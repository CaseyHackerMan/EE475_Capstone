
EE_475_Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011400  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08011590  08011590  00021590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011a5c  08011a5c  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  08011a5c  08011a5c  00021a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a64  08011a64  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a64  08011a64  00021a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011a68  08011a68  00021a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08011a6c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f4  2**0
                  CONTENTS
 10 .bss          00000e90  200001f4  200001f4  000301f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001084  20001084  000301f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e46c  00000000  00000000  00030267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000045c7  00000000  00000000  0004e6d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a10  00000000  00000000  00052ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000144b  00000000  00000000  000546b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002635e  00000000  00000000  00055afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022205  00000000  00000000  0007be59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d8bd8  00000000  00000000  0009e05e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000086e0  00000000  00000000  00176c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  0017f318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011578 	.word	0x08011578

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	08011578 	.word	0x08011578

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	6078      	str	r0, [r7, #4]
	if (huart == &huart3) {
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a1b      	ldr	r2, [pc, #108]	; (8001068 <HAL_UART_RxCpltCallback+0x78>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d12f      	bne.n	8001060 <HAL_UART_RxCpltCallback+0x70>
		memcpy(Data_Buffer, UART3_Rx_buf, GPS_BUF_N);
 8001000:	4a1a      	ldr	r2, [pc, #104]	; (800106c <HAL_UART_RxCpltCallback+0x7c>)
 8001002:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <HAL_UART_RxCpltCallback+0x80>)
 8001004:	4610      	mov	r0, r2
 8001006:	4619      	mov	r1, r3
 8001008:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800100c:	461a      	mov	r2, r3
 800100e:	f00c fbb6 	bl	800d77e <memcpy>
		Data_Buffer[GPS_BUF_N-1] = '\0';
 8001012:	4b16      	ldr	r3, [pc, #88]	; (800106c <HAL_UART_RxCpltCallback+0x7c>)
 8001014:	2200      	movs	r2, #0
 8001016:	f883 218f 	strb.w	r2, [r3, #399]	; 0x18f
		char* Data_Buffer_ptr = strstr((char*) Data_Buffer, "GPGGA");
 800101a:	4916      	ldr	r1, [pc, #88]	; (8001074 <HAL_UART_RxCpltCallback+0x84>)
 800101c:	4813      	ldr	r0, [pc, #76]	; (800106c <HAL_UART_RxCpltCallback+0x7c>)
 800101e:	f00c fb10 	bl	800d642 <strstr>
 8001022:	61f8      	str	r0, [r7, #28]
		if (Data_Buffer_ptr == 0) return;
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d019      	beq.n	800105e <HAL_UART_RxCpltCallback+0x6e>

		// HAL_UART_Transmit(&huart2, Data_Buffer_ptr, strlen(Data_Buffer_ptr), HAL_MAX_DELAY);
		float t, lat, lon;
		int res = sscanf((char*) Data_Buffer_ptr, "GPGGA,%f,%f,N,%f,W", &t, &lat, &lon);
 800102a:	f107 0110 	add.w	r1, r7, #16
 800102e:	f107 0214 	add.w	r2, r7, #20
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	460b      	mov	r3, r1
 800103a:	490f      	ldr	r1, [pc, #60]	; (8001078 <HAL_UART_RxCpltCallback+0x88>)
 800103c:	69f8      	ldr	r0, [r7, #28]
 800103e:	f00c fa87 	bl	800d550 <siscanf>
 8001042:	61b8      	str	r0, [r7, #24]
		if (res == 3) {
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	2b03      	cmp	r3, #3
 8001048:	d10a      	bne.n	8001060 <HAL_UART_RxCpltCallback+0x70>
			Time = t;
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	4a0b      	ldr	r2, [pc, #44]	; (800107c <HAL_UART_RxCpltCallback+0x8c>)
 800104e:	6013      	str	r3, [r2, #0]
			Latitude = lat;
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <HAL_UART_RxCpltCallback+0x90>)
 8001054:	6013      	str	r3, [r2, #0]
			Longitude = lon;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <HAL_UART_RxCpltCallback+0x94>)
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	e000      	b.n	8001060 <HAL_UART_RxCpltCallback+0x70>
		if (Data_Buffer_ptr == 0) return;
 800105e:	bf00      	nop
		}
	}
}
 8001060:	3720      	adds	r7, #32
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000394 	.word	0x20000394
 800106c:	2000043c 	.word	0x2000043c
 8001070:	200005e4 	.word	0x200005e4
 8001074:	08011590 	.word	0x08011590
 8001078:	08011598 	.word	0x08011598
 800107c:	200005cc 	.word	0x200005cc
 8001080:	200005d0 	.word	0x200005d0
 8001084:	200005d4 	.word	0x200005d4

08001088 <format_data>:

void format_data(float Time, float Lat, float Long) {
 8001088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800108c:	b0a4      	sub	sp, #144	; 0x90
 800108e:	af06      	add	r7, sp, #24
 8001090:	ed87 0a03 	vstr	s0, [r7, #12]
 8001094:	edc7 0a02 	vstr	s1, [r7, #8]
 8001098:	ed87 1a01 	vstr	s2, [r7, #4]
	char Data[100];
	Hours = (int)Time / 10000;
 800109c:	edd7 7a03 	vldr	s15, [r7, #12]
 80010a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010a4:	ee17 1a90 	vmov	r1, s15
 80010a8:	4b36      	ldr	r3, [pc, #216]	; (8001184 <format_data+0xfc>)
 80010aa:	fb83 2301 	smull	r2, r3, r3, r1
 80010ae:	131a      	asrs	r2, r3, #12
 80010b0:	17cb      	asrs	r3, r1, #31
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	4a34      	ldr	r2, [pc, #208]	; (8001188 <format_data+0x100>)
 80010b6:	6013      	str	r3, [r2, #0]
	Min = (int)(Time - (Hours * 10000)) / 100;
 80010b8:	4b33      	ldr	r3, [pc, #204]	; (8001188 <format_data+0x100>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80010c0:	fb02 f303 	mul.w	r3, r2, r3
 80010c4:	ee07 3a90 	vmov	s15, r3
 80010c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80010d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010d8:	ee17 1a90 	vmov	r1, s15
 80010dc:	4b2b      	ldr	r3, [pc, #172]	; (800118c <format_data+0x104>)
 80010de:	fb83 2301 	smull	r2, r3, r3, r1
 80010e2:	115a      	asrs	r2, r3, #5
 80010e4:	17cb      	asrs	r3, r1, #31
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	4a29      	ldr	r2, [pc, #164]	; (8001190 <format_data+0x108>)
 80010ea:	6013      	str	r3, [r2, #0]
	Sec = (int)(Time - ((Hours * 10000) + (Min * 100)));
 80010ec:	4b26      	ldr	r3, [pc, #152]	; (8001188 <format_data+0x100>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f242 7210 	movw	r2, #10000	; 0x2710
 80010f4:	fb03 f202 	mul.w	r2, r3, r2
 80010f8:	4b25      	ldr	r3, [pc, #148]	; (8001190 <format_data+0x108>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2164      	movs	r1, #100	; 0x64
 80010fe:	fb01 f303 	mul.w	r3, r1, r3
 8001102:	4413      	add	r3, r2
 8001104:	ee07 3a90 	vmov	s15, r3
 8001108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800110c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001114:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001118:	ee17 2a90 	vmov	r2, s15
 800111c:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <format_data+0x10c>)
 800111e:	601a      	str	r2, [r3, #0]
	sprintf(Data, "Time=%d:%d:%d Latitude=%f, Longitude=%f\r\n", Hours+4, Min, Sec, Lat, Long);
 8001120:	4b19      	ldr	r3, [pc, #100]	; (8001188 <format_data+0x100>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f103 0804 	add.w	r8, r3, #4
 8001128:	4b19      	ldr	r3, [pc, #100]	; (8001190 <format_data+0x108>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <format_data+0x10c>)
 8001130:	681e      	ldr	r6, [r3, #0]
 8001132:	68b8      	ldr	r0, [r7, #8]
 8001134:	f7ff fa08 	bl	8000548 <__aeabi_f2d>
 8001138:	4604      	mov	r4, r0
 800113a:	460d      	mov	r5, r1
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff fa03 	bl	8000548 <__aeabi_f2d>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	f107 0014 	add.w	r0, r7, #20
 800114a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800114e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001152:	9600      	str	r6, [sp, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	4642      	mov	r2, r8
 8001158:	490f      	ldr	r1, [pc, #60]	; (8001198 <format_data+0x110>)
 800115a:	f00c f9d9 	bl	800d510 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)Data, strlen(Data), HAL_MAX_DELAY);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f884 	bl	8000270 <strlen>
 8001168:	4603      	mov	r3, r0
 800116a:	b29a      	uxth	r2, r3
 800116c:	f107 0114 	add.w	r1, r7, #20
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
 8001174:	4809      	ldr	r0, [pc, #36]	; (800119c <format_data+0x114>)
 8001176:	f006 fb37 	bl	80077e8 <HAL_UART_Transmit>
}
 800117a:	bf00      	nop
 800117c:	3778      	adds	r7, #120	; 0x78
 800117e:	46bd      	mov	sp, r7
 8001180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001184:	68db8bad 	.word	0x68db8bad
 8001188:	200005d8 	.word	0x200005d8
 800118c:	51eb851f 	.word	0x51eb851f
 8001190:	200005dc 	.word	0x200005dc
 8001194:	200005e0 	.word	0x200005e0
 8001198:	080115ac 	.word	0x080115ac
 800119c:	2000034c 	.word	0x2000034c

080011a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a4:	f000 ff2a 	bl	8001ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a8:	f000 f856 	bl	8001258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ac:	f000 fa68 	bl	8001680 <MX_GPIO_Init>
  MX_DMA_Init();
 80011b0:	f000 fa46 	bl	8001640 <MX_DMA_Init>
  MX_I2C1_Init();
 80011b4:	f000 f8ba 	bl	800132c <MX_I2C1_Init>
  MX_I2S3_Init();
 80011b8:	f000 f8e6 	bl	8001388 <MX_I2S3_Init>
  MX_SPI1_Init();
 80011bc:	f000 f914 	bl	80013e8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80011c0:	f00a fea8 	bl	800bf14 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80011c4:	f000 f9e8 	bl	8001598 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80011c8:	f000 f944 	bl	8001454 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80011cc:	f000 fa0e 	bl	80015ec <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  memset(UART3_Rx_buf, 0, GPS_BUF_N);
 80011d0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80011d4:	2100      	movs	r1, #0
 80011d6:	4818      	ldr	r0, [pc, #96]	; (8001238 <main+0x98>)
 80011d8:	f00c fa2b 	bl	800d632 <memset>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011dc:	2100      	movs	r1, #0
 80011de:	4817      	ldr	r0, [pc, #92]	; (800123c <main+0x9c>)
 80011e0:	f005 fc76 	bl	8006ad0 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_DMA(&huart3, UART3_Rx_buf, GPS_BUF_N);
 80011e4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80011e8:	4913      	ldr	r1, [pc, #76]	; (8001238 <main+0x98>)
 80011ea:	4815      	ldr	r0, [pc, #84]	; (8001240 <main+0xa0>)
 80011ec:	f006 fb87 	bl	80078fe <HAL_UART_Receive_DMA>
  HAL_UART_Transmit(&huart2, (uint8_t*) "Hello!\r\n", 8, 100);
 80011f0:	2364      	movs	r3, #100	; 0x64
 80011f2:	2208      	movs	r2, #8
 80011f4:	4913      	ldr	r1, [pc, #76]	; (8001244 <main+0xa4>)
 80011f6:	4814      	ldr	r0, [pc, #80]	; (8001248 <main+0xa8>)
 80011f8:	f006 faf6 	bl	80077e8 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80011fc:	f00a feb0 	bl	800bf60 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    format_data(Time, Latitude, Longitude);
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <main+0xac>)
 8001202:	edd3 7a00 	vldr	s15, [r3]
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <main+0xb0>)
 8001208:	ed93 7a00 	vldr	s14, [r3]
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <main+0xb4>)
 800120e:	edd3 6a00 	vldr	s13, [r3]
 8001212:	eeb0 1a66 	vmov.f32	s2, s13
 8001216:	eef0 0a47 	vmov.f32	s1, s14
 800121a:	eeb0 0a67 	vmov.f32	s0, s15
 800121e:	f7ff ff33 	bl	8001088 <format_data>
    // int p = 1500 + 500*sin(i/100.0);
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1500);
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <main+0x9c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800122a:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(1000);
 800122c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001230:	f000 ff56 	bl	80020e0 <HAL_Delay>
    MX_USB_HOST_Process();
 8001234:	e7e2      	b.n	80011fc <main+0x5c>
 8001236:	bf00      	nop
 8001238:	200005e4 	.word	0x200005e4
 800123c:	20000304 	.word	0x20000304
 8001240:	20000394 	.word	0x20000394
 8001244:	080115d8 	.word	0x080115d8
 8001248:	2000034c 	.word	0x2000034c
 800124c:	200005cc 	.word	0x200005cc
 8001250:	200005d0 	.word	0x200005d0
 8001254:	200005d4 	.word	0x200005d4

08001258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b094      	sub	sp, #80	; 0x50
 800125c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125e:	f107 0320 	add.w	r3, r7, #32
 8001262:	2230      	movs	r2, #48	; 0x30
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f00c f9e3 	bl	800d632 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800127c:	2300      	movs	r3, #0
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	4b28      	ldr	r3, [pc, #160]	; (8001324 <SystemClock_Config+0xcc>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	4a27      	ldr	r2, [pc, #156]	; (8001324 <SystemClock_Config+0xcc>)
 8001286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128a:	6413      	str	r3, [r2, #64]	; 0x40
 800128c:	4b25      	ldr	r3, [pc, #148]	; (8001324 <SystemClock_Config+0xcc>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	4b22      	ldr	r3, [pc, #136]	; (8001328 <SystemClock_Config+0xd0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a21      	ldr	r2, [pc, #132]	; (8001328 <SystemClock_Config+0xd0>)
 80012a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <SystemClock_Config+0xd0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b4:	2301      	movs	r3, #1
 80012b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012be:	2302      	movs	r3, #2
 80012c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012c8:	2308      	movs	r3, #8
 80012ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d2:	2302      	movs	r3, #2
 80012d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012d6:	2307      	movs	r3, #7
 80012d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012da:	f107 0320 	add.w	r3, r7, #32
 80012de:	4618      	mov	r0, r3
 80012e0:	f004 fcea 	bl	8005cb8 <HAL_RCC_OscConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012ea:	f000 fac7 	bl	800187c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ee:	230f      	movs	r3, #15
 80012f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f2:	2302      	movs	r3, #2
 80012f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001304:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	2105      	movs	r1, #5
 800130c:	4618      	mov	r0, r3
 800130e:	f004 ff4b 	bl	80061a8 <HAL_RCC_ClockConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001318:	f000 fab0 	bl	800187c <Error_Handler>
  }
}
 800131c:	bf00      	nop
 800131e:	3750      	adds	r7, #80	; 0x50
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40023800 	.word	0x40023800
 8001328:	40007000 	.word	0x40007000

0800132c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <MX_I2C1_Init+0x50>)
 8001332:	4a13      	ldr	r2, [pc, #76]	; (8001380 <MX_I2C1_Init+0x54>)
 8001334:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <MX_I2C1_Init+0x50>)
 8001338:	4a12      	ldr	r2, [pc, #72]	; (8001384 <MX_I2C1_Init+0x58>)
 800133a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <MX_I2C1_Init+0x50>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <MX_I2C1_Init+0x50>)
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <MX_I2C1_Init+0x50>)
 800134a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800134e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001350:	4b0a      	ldr	r3, [pc, #40]	; (800137c <MX_I2C1_Init+0x50>)
 8001352:	2200      	movs	r2, #0
 8001354:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <MX_I2C1_Init+0x50>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <MX_I2C1_Init+0x50>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_I2C1_Init+0x50>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <MX_I2C1_Init+0x50>)
 800136a:	f003 fec1 	bl	80050f0 <HAL_I2C_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001374:	f000 fa82 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000210 	.word	0x20000210
 8001380:	40005400 	.word	0x40005400
 8001384:	000186a0 	.word	0x000186a0

08001388 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <MX_I2S3_Init+0x54>)
 800138e:	4a14      	ldr	r2, [pc, #80]	; (80013e0 <MX_I2S3_Init+0x58>)
 8001390:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <MX_I2S3_Init+0x54>)
 8001394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001398:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <MX_I2S3_Init+0x54>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MX_I2S3_Init+0x54>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80013a6:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <MX_I2S3_Init+0x54>)
 80013a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ac:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <MX_I2S3_Init+0x54>)
 80013b0:	4a0c      	ldr	r2, [pc, #48]	; (80013e4 <MX_I2S3_Init+0x5c>)
 80013b2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <MX_I2S3_Init+0x54>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80013ba:	4b08      	ldr	r3, [pc, #32]	; (80013dc <MX_I2S3_Init+0x54>)
 80013bc:	2200      	movs	r2, #0
 80013be:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <MX_I2S3_Init+0x54>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_I2S3_Init+0x54>)
 80013c8:	f003 ffd6 	bl	8005378 <HAL_I2S_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80013d2:	f000 fa53 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000264 	.word	0x20000264
 80013e0:	40003c00 	.word	0x40003c00
 80013e4:	00017700 	.word	0x00017700

080013e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013ec:	4b17      	ldr	r3, [pc, #92]	; (800144c <MX_SPI1_Init+0x64>)
 80013ee:	4a18      	ldr	r2, [pc, #96]	; (8001450 <MX_SPI1_Init+0x68>)
 80013f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013f2:	4b16      	ldr	r3, [pc, #88]	; (800144c <MX_SPI1_Init+0x64>)
 80013f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <MX_SPI1_Init+0x64>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <MX_SPI1_Init+0x64>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_SPI1_Init+0x64>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <MX_SPI1_Init+0x64>)
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <MX_SPI1_Init+0x64>)
 8001414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001418:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <MX_SPI1_Init+0x64>)
 800141c:	2200      	movs	r2, #0
 800141e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <MX_SPI1_Init+0x64>)
 8001422:	2200      	movs	r2, #0
 8001424:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_SPI1_Init+0x64>)
 8001428:	2200      	movs	r2, #0
 800142a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <MX_SPI1_Init+0x64>)
 800142e:	2200      	movs	r2, #0
 8001430:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <MX_SPI1_Init+0x64>)
 8001434:	220a      	movs	r2, #10
 8001436:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001438:	4804      	ldr	r0, [pc, #16]	; (800144c <MX_SPI1_Init+0x64>)
 800143a:	f005 fa17 	bl	800686c <HAL_SPI_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001444:	f000 fa1a 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200002ac 	.word	0x200002ac
 8001450:	40013000 	.word	0x40013000

08001454 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b096      	sub	sp, #88	; 0x58
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001468:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]
 8001482:	615a      	str	r2, [r3, #20]
 8001484:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	2220      	movs	r2, #32
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f00c f8d0 	bl	800d632 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001492:	4b3f      	ldr	r3, [pc, #252]	; (8001590 <MX_TIM1_Init+0x13c>)
 8001494:	4a3f      	ldr	r2, [pc, #252]	; (8001594 <MX_TIM1_Init+0x140>)
 8001496:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168;
 8001498:	4b3d      	ldr	r3, [pc, #244]	; (8001590 <MX_TIM1_Init+0x13c>)
 800149a:	22a8      	movs	r2, #168	; 0xa8
 800149c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149e:	4b3c      	ldr	r3, [pc, #240]	; (8001590 <MX_TIM1_Init+0x13c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80014a4:	4b3a      	ldr	r3, [pc, #232]	; (8001590 <MX_TIM1_Init+0x13c>)
 80014a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80014aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ac:	4b38      	ldr	r3, [pc, #224]	; (8001590 <MX_TIM1_Init+0x13c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014b2:	4b37      	ldr	r3, [pc, #220]	; (8001590 <MX_TIM1_Init+0x13c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b8:	4b35      	ldr	r3, [pc, #212]	; (8001590 <MX_TIM1_Init+0x13c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014be:	4834      	ldr	r0, [pc, #208]	; (8001590 <MX_TIM1_Init+0x13c>)
 80014c0:	f005 fa5d 	bl	800697e <HAL_TIM_Base_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80014ca:	f000 f9d7 	bl	800187c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014d8:	4619      	mov	r1, r3
 80014da:	482d      	ldr	r0, [pc, #180]	; (8001590 <MX_TIM1_Init+0x13c>)
 80014dc:	f005 fc82 	bl	8006de4 <HAL_TIM_ConfigClockSource>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80014e6:	f000 f9c9 	bl	800187c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014ea:	4829      	ldr	r0, [pc, #164]	; (8001590 <MX_TIM1_Init+0x13c>)
 80014ec:	f005 fa96 	bl	8006a1c <HAL_TIM_PWM_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80014f6:	f000 f9c1 	bl	800187c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001502:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001506:	4619      	mov	r1, r3
 8001508:	4821      	ldr	r0, [pc, #132]	; (8001590 <MX_TIM1_Init+0x13c>)
 800150a:	f006 f84f 	bl	80075ac <HAL_TIMEx_MasterConfigSynchronization>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001514:	f000 f9b2 	bl	800187c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001518:	2360      	movs	r3, #96	; 0x60
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 800151c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001522:	2300      	movs	r3, #0
 8001524:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001526:	2300      	movs	r3, #0
 8001528:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800152a:	2300      	movs	r3, #0
 800152c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153a:	2200      	movs	r2, #0
 800153c:	4619      	mov	r1, r3
 800153e:	4814      	ldr	r0, [pc, #80]	; (8001590 <MX_TIM1_Init+0x13c>)
 8001540:	f005 fb8e 	bl	8006c60 <HAL_TIM_PWM_ConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800154a:	f000 f997 	bl	800187c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001562:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001566:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	4619      	mov	r1, r3
 8001570:	4807      	ldr	r0, [pc, #28]	; (8001590 <MX_TIM1_Init+0x13c>)
 8001572:	f006 f897 	bl	80076a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800157c:	f000 f97e 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001580:	4803      	ldr	r0, [pc, #12]	; (8001590 <MX_TIM1_Init+0x13c>)
 8001582:	f000 fadb 	bl	8001b3c <HAL_TIM_MspPostInit>

}
 8001586:	bf00      	nop
 8001588:	3758      	adds	r7, #88	; 0x58
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000304 	.word	0x20000304
 8001594:	40010000 	.word	0x40010000

08001598 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_USART2_UART_Init+0x4c>)
 800159e:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <MX_USART2_UART_Init+0x50>)
 80015a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015be:	220c      	movs	r2, #12
 80015c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015d0:	f006 f8ba 	bl	8007748 <HAL_UART_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015da:	f000 f94f 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	2000034c 	.word	0x2000034c
 80015e8:	40004400 	.word	0x40004400

080015ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <MX_USART3_UART_Init+0x4c>)
 80015f2:	4a12      	ldr	r2, [pc, #72]	; (800163c <MX_USART3_UART_Init+0x50>)
 80015f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <MX_USART3_UART_Init+0x4c>)
 80015f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <MX_USART3_UART_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <MX_USART3_UART_Init+0x4c>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <MX_USART3_UART_Init+0x4c>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <MX_USART3_UART_Init+0x4c>)
 8001612:	220c      	movs	r2, #12
 8001614:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <MX_USART3_UART_Init+0x4c>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <MX_USART3_UART_Init+0x4c>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <MX_USART3_UART_Init+0x4c>)
 8001624:	f006 f890 	bl	8007748 <HAL_UART_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800162e:	f000 f925 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000394 	.word	0x20000394
 800163c:	40004800 	.word	0x40004800

08001640 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MX_DMA_Init+0x3c>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a0b      	ldr	r2, [pc, #44]	; (800167c <MX_DMA_Init+0x3c>)
 8001650:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <MX_DMA_Init+0x3c>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	200c      	movs	r0, #12
 8001668:	f000 fe39 	bl	80022de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800166c:	200c      	movs	r0, #12
 800166e:	f000 fe52 	bl	8002316 <HAL_NVIC_EnableIRQ>

}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800

08001680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08c      	sub	sp, #48	; 0x30
 8001684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001686:	f107 031c 	add.w	r3, r7, #28
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	61bb      	str	r3, [r7, #24]
 800169a:	4b72      	ldr	r3, [pc, #456]	; (8001864 <MX_GPIO_Init+0x1e4>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a71      	ldr	r2, [pc, #452]	; (8001864 <MX_GPIO_Init+0x1e4>)
 80016a0:	f043 0310 	orr.w	r3, r3, #16
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b6f      	ldr	r3, [pc, #444]	; (8001864 <MX_GPIO_Init+0x1e4>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0310 	and.w	r3, r3, #16
 80016ae:	61bb      	str	r3, [r7, #24]
 80016b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	4b6b      	ldr	r3, [pc, #428]	; (8001864 <MX_GPIO_Init+0x1e4>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a6a      	ldr	r2, [pc, #424]	; (8001864 <MX_GPIO_Init+0x1e4>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b68      	ldr	r3, [pc, #416]	; (8001864 <MX_GPIO_Init+0x1e4>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	4b64      	ldr	r3, [pc, #400]	; (8001864 <MX_GPIO_Init+0x1e4>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a63      	ldr	r2, [pc, #396]	; (8001864 <MX_GPIO_Init+0x1e4>)
 80016d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b61      	ldr	r3, [pc, #388]	; (8001864 <MX_GPIO_Init+0x1e4>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b5d      	ldr	r3, [pc, #372]	; (8001864 <MX_GPIO_Init+0x1e4>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a5c      	ldr	r2, [pc, #368]	; (8001864 <MX_GPIO_Init+0x1e4>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b5a      	ldr	r3, [pc, #360]	; (8001864 <MX_GPIO_Init+0x1e4>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	4b56      	ldr	r3, [pc, #344]	; (8001864 <MX_GPIO_Init+0x1e4>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a55      	ldr	r2, [pc, #340]	; (8001864 <MX_GPIO_Init+0x1e4>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b53      	ldr	r3, [pc, #332]	; (8001864 <MX_GPIO_Init+0x1e4>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	4b4f      	ldr	r3, [pc, #316]	; (8001864 <MX_GPIO_Init+0x1e4>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a4e      	ldr	r2, [pc, #312]	; (8001864 <MX_GPIO_Init+0x1e4>)
 800172c:	f043 0308 	orr.w	r3, r3, #8
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b4c      	ldr	r3, [pc, #304]	; (8001864 <MX_GPIO_Init+0x1e4>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	2108      	movs	r1, #8
 8001742:	4849      	ldr	r0, [pc, #292]	; (8001868 <MX_GPIO_Init+0x1e8>)
 8001744:	f001 fba0 	bl	8002e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001748:	2201      	movs	r2, #1
 800174a:	2101      	movs	r1, #1
 800174c:	4847      	ldr	r0, [pc, #284]	; (800186c <MX_GPIO_Init+0x1ec>)
 800174e:	f001 fb9b 	bl	8002e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001752:	2200      	movs	r2, #0
 8001754:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001758:	4845      	ldr	r0, [pc, #276]	; (8001870 <MX_GPIO_Init+0x1f0>)
 800175a:	f001 fb95 	bl	8002e88 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800175e:	2308      	movs	r3, #8
 8001760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001762:	2301      	movs	r3, #1
 8001764:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800176e:	f107 031c 	add.w	r3, r7, #28
 8001772:	4619      	mov	r1, r3
 8001774:	483c      	ldr	r0, [pc, #240]	; (8001868 <MX_GPIO_Init+0x1e8>)
 8001776:	f001 f9eb 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800177a:	2301      	movs	r3, #1
 800177c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177e:	2301      	movs	r3, #1
 8001780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800178a:	f107 031c 	add.w	r3, r7, #28
 800178e:	4619      	mov	r1, r3
 8001790:	4836      	ldr	r0, [pc, #216]	; (800186c <MX_GPIO_Init+0x1ec>)
 8001792:	f001 f9dd 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001796:	2308      	movs	r3, #8
 8001798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017a6:	2305      	movs	r3, #5
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80017aa:	f107 031c 	add.w	r3, r7, #28
 80017ae:	4619      	mov	r1, r3
 80017b0:	482e      	ldr	r0, [pc, #184]	; (800186c <MX_GPIO_Init+0x1ec>)
 80017b2:	f001 f9cd 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017b6:	2301      	movs	r3, #1
 80017b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017ba:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80017be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017c4:	f107 031c 	add.w	r3, r7, #28
 80017c8:	4619      	mov	r1, r3
 80017ca:	482a      	ldr	r0, [pc, #168]	; (8001874 <MX_GPIO_Init+0x1f4>)
 80017cc:	f001 f9c0 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80017d0:	2304      	movs	r3, #4
 80017d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80017dc:	f107 031c 	add.w	r3, r7, #28
 80017e0:	4619      	mov	r1, r3
 80017e2:	4825      	ldr	r0, [pc, #148]	; (8001878 <MX_GPIO_Init+0x1f8>)
 80017e4:	f001 f9b4 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80017e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017fa:	2305      	movs	r3, #5
 80017fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80017fe:	f107 031c 	add.w	r3, r7, #28
 8001802:	4619      	mov	r1, r3
 8001804:	481c      	ldr	r0, [pc, #112]	; (8001878 <MX_GPIO_Init+0x1f8>)
 8001806:	f001 f9a3 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800180a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800180e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001810:	2301      	movs	r3, #1
 8001812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800181c:	f107 031c 	add.w	r3, r7, #28
 8001820:	4619      	mov	r1, r3
 8001822:	4813      	ldr	r0, [pc, #76]	; (8001870 <MX_GPIO_Init+0x1f0>)
 8001824:	f001 f994 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001828:	2320      	movs	r3, #32
 800182a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182c:	2300      	movs	r3, #0
 800182e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001834:	f107 031c 	add.w	r3, r7, #28
 8001838:	4619      	mov	r1, r3
 800183a:	480d      	ldr	r0, [pc, #52]	; (8001870 <MX_GPIO_Init+0x1f0>)
 800183c:	f001 f988 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001840:	2302      	movs	r3, #2
 8001842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001844:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800184e:	f107 031c 	add.w	r3, r7, #28
 8001852:	4619      	mov	r1, r3
 8001854:	4804      	ldr	r0, [pc, #16]	; (8001868 <MX_GPIO_Init+0x1e8>)
 8001856:	f001 f97b 	bl	8002b50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800185a:	bf00      	nop
 800185c:	3730      	adds	r7, #48	; 0x30
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800
 8001868:	40021000 	.word	0x40021000
 800186c:	40020800 	.word	0x40020800
 8001870:	40020c00 	.word	0x40020c00
 8001874:	40020000 	.word	0x40020000
 8001878:	40020400 	.word	0x40020400

0800187c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001880:	b672      	cpsid	i
}
 8001882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001884:	e7fe      	b.n	8001884 <Error_Handler+0x8>
	...

08001888 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <HAL_MspInit+0x4c>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	4a0f      	ldr	r2, [pc, #60]	; (80018d4 <HAL_MspInit+0x4c>)
 8001898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800189c:	6453      	str	r3, [r2, #68]	; 0x44
 800189e:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <HAL_MspInit+0x4c>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	603b      	str	r3, [r7, #0]
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <HAL_MspInit+0x4c>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	4a08      	ldr	r2, [pc, #32]	; (80018d4 <HAL_MspInit+0x4c>)
 80018b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_MspInit+0x4c>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018c6:	2007      	movs	r0, #7
 80018c8:	f000 fcfe 	bl	80022c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40023800 	.word	0x40023800

080018d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a19      	ldr	r2, [pc, #100]	; (800195c <HAL_I2C_MspInit+0x84>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d12c      	bne.n	8001954 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	4b18      	ldr	r3, [pc, #96]	; (8001960 <HAL_I2C_MspInit+0x88>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a17      	ldr	r2, [pc, #92]	; (8001960 <HAL_I2C_MspInit+0x88>)
 8001904:	f043 0302 	orr.w	r3, r3, #2
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <HAL_I2C_MspInit+0x88>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001916:	f44f 7310 	mov.w	r3, #576	; 0x240
 800191a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800191c:	2312      	movs	r3, #18
 800191e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001920:	2301      	movs	r3, #1
 8001922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001928:	2304      	movs	r3, #4
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4619      	mov	r1, r3
 8001932:	480c      	ldr	r0, [pc, #48]	; (8001964 <HAL_I2C_MspInit+0x8c>)
 8001934:	f001 f90c 	bl	8002b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <HAL_I2C_MspInit+0x88>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	4a07      	ldr	r2, [pc, #28]	; (8001960 <HAL_I2C_MspInit+0x88>)
 8001942:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001946:	6413      	str	r3, [r2, #64]	; 0x40
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <HAL_I2C_MspInit+0x88>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001954:	bf00      	nop
 8001956:	3728      	adds	r7, #40	; 0x28
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40005400 	.word	0x40005400
 8001960:	40023800 	.word	0x40023800
 8001964:	40020400 	.word	0x40020400

08001968 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08e      	sub	sp, #56	; 0x38
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a31      	ldr	r2, [pc, #196]	; (8001a58 <HAL_I2S_MspInit+0xf0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d15a      	bne.n	8001a4e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001998:	2301      	movs	r3, #1
 800199a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800199c:	23c0      	movs	r3, #192	; 0xc0
 800199e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80019a0:	2302      	movs	r3, #2
 80019a2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4618      	mov	r0, r3
 80019aa:	f004 fe1d 	bl	80065e8 <HAL_RCCEx_PeriphCLKConfig>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80019b4:	f7ff ff62 	bl	800187c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019b8:	2300      	movs	r3, #0
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <HAL_I2S_MspInit+0xf4>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	4a26      	ldr	r2, [pc, #152]	; (8001a5c <HAL_I2S_MspInit+0xf4>)
 80019c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019c6:	6413      	str	r3, [r2, #64]	; 0x40
 80019c8:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <HAL_I2S_MspInit+0xf4>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <HAL_I2S_MspInit+0xf4>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019dc:	4a1f      	ldr	r2, [pc, #124]	; (8001a5c <HAL_I2S_MspInit+0xf4>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6313      	str	r3, [r2, #48]	; 0x30
 80019e4:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <HAL_I2S_MspInit+0xf4>)
 80019e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <HAL_I2S_MspInit+0xf4>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f8:	4a18      	ldr	r2, [pc, #96]	; (8001a5c <HAL_I2S_MspInit+0xf4>)
 80019fa:	f043 0304 	orr.w	r3, r3, #4
 80019fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001a00:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <HAL_I2S_MspInit+0xf4>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001a0c:	2310      	movs	r3, #16
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a1c:	2306      	movs	r3, #6
 8001a1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a24:	4619      	mov	r1, r3
 8001a26:	480e      	ldr	r0, [pc, #56]	; (8001a60 <HAL_I2S_MspInit+0xf8>)
 8001a28:	f001 f892 	bl	8002b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001a2c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a32:	2302      	movs	r3, #2
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a3e:	2306      	movs	r3, #6
 8001a40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a46:	4619      	mov	r1, r3
 8001a48:	4806      	ldr	r0, [pc, #24]	; (8001a64 <HAL_I2S_MspInit+0xfc>)
 8001a4a:	f001 f881 	bl	8002b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a4e:	bf00      	nop
 8001a50:	3738      	adds	r7, #56	; 0x38
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40003c00 	.word	0x40003c00
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020000 	.word	0x40020000
 8001a64:	40020800 	.word	0x40020800

08001a68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	; 0x28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a19      	ldr	r2, [pc, #100]	; (8001aec <HAL_SPI_MspInit+0x84>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d12b      	bne.n	8001ae2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <HAL_SPI_MspInit+0x88>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	4a17      	ldr	r2, [pc, #92]	; (8001af0 <HAL_SPI_MspInit+0x88>)
 8001a94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a98:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <HAL_SPI_MspInit+0x88>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_SPI_MspInit+0x88>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a10      	ldr	r2, [pc, #64]	; (8001af0 <HAL_SPI_MspInit+0x88>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <HAL_SPI_MspInit+0x88>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001ac2:	23e0      	movs	r3, #224	; 0xe0
 8001ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ad2:	2305      	movs	r3, #5
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	4805      	ldr	r0, [pc, #20]	; (8001af4 <HAL_SPI_MspInit+0x8c>)
 8001ade:	f001 f837 	bl	8002b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ae2:	bf00      	nop
 8001ae4:	3728      	adds	r7, #40	; 0x28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40013000 	.word	0x40013000
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020000 	.word	0x40020000

08001af8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0b      	ldr	r2, [pc, #44]	; (8001b34 <HAL_TIM_Base_MspInit+0x3c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d10d      	bne.n	8001b26 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <HAL_TIM_Base_MspInit+0x40>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	4a09      	ldr	r2, [pc, #36]	; (8001b38 <HAL_TIM_Base_MspInit+0x40>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1a:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <HAL_TIM_Base_MspInit+0x40>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40010000 	.word	0x40010000
 8001b38:	40023800 	.word	0x40023800

08001b3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <HAL_TIM_MspPostInit+0x68>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d11e      	bne.n	8001b9c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_TIM_MspPostInit+0x6c>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a10      	ldr	r2, [pc, #64]	; (8001ba8 <HAL_TIM_MspPostInit+0x6c>)
 8001b68:	f043 0310 	orr.w	r3, r3, #16
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_TIM_MspPostInit+0x6c>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0310 	and.w	r3, r3, #16
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b80:	2302      	movs	r3, #2
 8001b82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	4619      	mov	r1, r3
 8001b96:	4805      	ldr	r0, [pc, #20]	; (8001bac <HAL_TIM_MspPostInit+0x70>)
 8001b98:	f000 ffda 	bl	8002b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b9c:	bf00      	nop
 8001b9e:	3720      	adds	r7, #32
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40010000 	.word	0x40010000
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40021000 	.word	0x40021000

08001bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	; 0x30
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a5e      	ldr	r2, [pc, #376]	; (8001d48 <HAL_UART_MspInit+0x198>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d12c      	bne.n	8001c2c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
 8001bd6:	4b5d      	ldr	r3, [pc, #372]	; (8001d4c <HAL_UART_MspInit+0x19c>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	4a5c      	ldr	r2, [pc, #368]	; (8001d4c <HAL_UART_MspInit+0x19c>)
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be0:	6413      	str	r3, [r2, #64]	; 0x40
 8001be2:	4b5a      	ldr	r3, [pc, #360]	; (8001d4c <HAL_UART_MspInit+0x19c>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	61bb      	str	r3, [r7, #24]
 8001bec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	4b56      	ldr	r3, [pc, #344]	; (8001d4c <HAL_UART_MspInit+0x19c>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a55      	ldr	r2, [pc, #340]	; (8001d4c <HAL_UART_MspInit+0x19c>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <HAL_UART_MspInit+0x19c>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c0a:	230c      	movs	r3, #12
 8001c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c16:	2303      	movs	r3, #3
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c1a:	2307      	movs	r3, #7
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	f107 031c 	add.w	r3, r7, #28
 8001c22:	4619      	mov	r1, r3
 8001c24:	484a      	ldr	r0, [pc, #296]	; (8001d50 <HAL_UART_MspInit+0x1a0>)
 8001c26:	f000 ff93 	bl	8002b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c2a:	e088      	b.n	8001d3e <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART3)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a48      	ldr	r2, [pc, #288]	; (8001d54 <HAL_UART_MspInit+0x1a4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	f040 8083 	bne.w	8001d3e <HAL_UART_MspInit+0x18e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c38:	2300      	movs	r3, #0
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	4b43      	ldr	r3, [pc, #268]	; (8001d4c <HAL_UART_MspInit+0x19c>)
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	4a42      	ldr	r2, [pc, #264]	; (8001d4c <HAL_UART_MspInit+0x19c>)
 8001c42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c46:	6413      	str	r3, [r2, #64]	; 0x40
 8001c48:	4b40      	ldr	r3, [pc, #256]	; (8001d4c <HAL_UART_MspInit+0x19c>)
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	4b3c      	ldr	r3, [pc, #240]	; (8001d4c <HAL_UART_MspInit+0x19c>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	4a3b      	ldr	r2, [pc, #236]	; (8001d4c <HAL_UART_MspInit+0x19c>)
 8001c5e:	f043 0302 	orr.w	r3, r3, #2
 8001c62:	6313      	str	r3, [r2, #48]	; 0x30
 8001c64:	4b39      	ldr	r3, [pc, #228]	; (8001d4c <HAL_UART_MspInit+0x19c>)
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c70:	2300      	movs	r3, #0
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	4b35      	ldr	r3, [pc, #212]	; (8001d4c <HAL_UART_MspInit+0x19c>)
 8001c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c78:	4a34      	ldr	r2, [pc, #208]	; (8001d4c <HAL_UART_MspInit+0x19c>)
 8001c7a:	f043 0308 	orr.w	r3, r3, #8
 8001c7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c80:	4b32      	ldr	r3, [pc, #200]	; (8001d4c <HAL_UART_MspInit+0x19c>)
 8001c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c9e:	2307      	movs	r3, #7
 8001ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca2:	f107 031c 	add.w	r3, r7, #28
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	482b      	ldr	r0, [pc, #172]	; (8001d58 <HAL_UART_MspInit+0x1a8>)
 8001caa:	f000 ff51 	bl	8002b50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cc0:	2307      	movs	r3, #7
 8001cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4824      	ldr	r0, [pc, #144]	; (8001d5c <HAL_UART_MspInit+0x1ac>)
 8001ccc:	f000 ff40 	bl	8002b50 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001cd0:	4b23      	ldr	r3, [pc, #140]	; (8001d60 <HAL_UART_MspInit+0x1b0>)
 8001cd2:	4a24      	ldr	r2, [pc, #144]	; (8001d64 <HAL_UART_MspInit+0x1b4>)
 8001cd4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001cd6:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <HAL_UART_MspInit+0x1b0>)
 8001cd8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cdc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cde:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <HAL_UART_MspInit+0x1b0>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ce4:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <HAL_UART_MspInit+0x1b0>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cea:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <HAL_UART_MspInit+0x1b0>)
 8001cec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cf0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <HAL_UART_MspInit+0x1b0>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cf8:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_UART_MspInit+0x1b0>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001cfe:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <HAL_UART_MspInit+0x1b0>)
 8001d00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d04:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d06:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <HAL_UART_MspInit+0x1b0>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d0c:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <HAL_UART_MspInit+0x1b0>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001d12:	4813      	ldr	r0, [pc, #76]	; (8001d60 <HAL_UART_MspInit+0x1b0>)
 8001d14:	f000 fb1a 	bl	800234c <HAL_DMA_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_UART_MspInit+0x172>
      Error_Handler();
 8001d1e:	f7ff fdad 	bl	800187c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a0e      	ldr	r2, [pc, #56]	; (8001d60 <HAL_UART_MspInit+0x1b0>)
 8001d26:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d28:	4a0d      	ldr	r2, [pc, #52]	; (8001d60 <HAL_UART_MspInit+0x1b0>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2100      	movs	r1, #0
 8001d32:	2027      	movs	r0, #39	; 0x27
 8001d34:	f000 fad3 	bl	80022de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d38:	2027      	movs	r0, #39	; 0x27
 8001d3a:	f000 faec 	bl	8002316 <HAL_NVIC_EnableIRQ>
}
 8001d3e:	bf00      	nop
 8001d40:	3730      	adds	r7, #48	; 0x30
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40004400 	.word	0x40004400
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40020000 	.word	0x40020000
 8001d54:	40004800 	.word	0x40004800
 8001d58:	40020400 	.word	0x40020400
 8001d5c:	40020c00 	.word	0x40020c00
 8001d60:	200003dc 	.word	0x200003dc
 8001d64:	40026028 	.word	0x40026028

08001d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d6c:	e7fe      	b.n	8001d6c <NMI_Handler+0x4>

08001d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d72:	e7fe      	b.n	8001d72 <HardFault_Handler+0x4>

08001d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <MemManage_Handler+0x4>

08001d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d7e:	e7fe      	b.n	8001d7e <BusFault_Handler+0x4>

08001d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <UsageFault_Handler+0x4>

08001d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db4:	f000 f974 	bl	80020a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001dc0:	4802      	ldr	r0, [pc, #8]	; (8001dcc <DMA1_Stream1_IRQHandler+0x10>)
 8001dc2:	f000 fc5b 	bl	800267c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200003dc 	.word	0x200003dc

08001dd0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001dd4:	4802      	ldr	r0, [pc, #8]	; (8001de0 <USART3_IRQHandler+0x10>)
 8001dd6:	f005 fdb7 	bl	8007948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000394 	.word	0x20000394

08001de4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001de8:	4802      	ldr	r0, [pc, #8]	; (8001df4 <OTG_FS_IRQHandler+0x10>)
 8001dea:	f001 fb47 	bl	800347c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000b58 	.word	0x20000b58

08001df8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return 1;
 8001dfc:	2301      	movs	r3, #1
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <_kill>:

int _kill(int pid, int sig)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e12:	f00b fc87 	bl	800d724 <__errno>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2216      	movs	r2, #22
 8001e1a:	601a      	str	r2, [r3, #0]
  return -1;
 8001e1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <_exit>:

void _exit (int status)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e30:	f04f 31ff 	mov.w	r1, #4294967295
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff ffe7 	bl	8001e08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e3a:	e7fe      	b.n	8001e3a <_exit+0x12>

08001e3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	e00a      	b.n	8001e64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e4e:	f3af 8000 	nop.w
 8001e52:	4601      	mov	r1, r0
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	60ba      	str	r2, [r7, #8]
 8001e5a:	b2ca      	uxtb	r2, r1
 8001e5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	3301      	adds	r3, #1
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	dbf0      	blt.n	8001e4e <_read+0x12>
  }

  return len;
 8001e6c:	687b      	ldr	r3, [r7, #4]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b086      	sub	sp, #24
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	60f8      	str	r0, [r7, #12]
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	e009      	b.n	8001e9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	1c5a      	adds	r2, r3, #1
 8001e8c:	60ba      	str	r2, [r7, #8]
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	dbf1      	blt.n	8001e88 <_write+0x12>
  }
  return len;
 8001ea4:	687b      	ldr	r3, [r7, #4]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <_close>:

int _close(int file)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001eb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ed6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <_isatty>:

int _isatty(int file)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eee:	2301      	movs	r3, #1
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f20:	4a14      	ldr	r2, [pc, #80]	; (8001f74 <_sbrk+0x5c>)
 8001f22:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <_sbrk+0x60>)
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f2c:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <_sbrk+0x64>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d102      	bne.n	8001f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <_sbrk+0x64>)
 8001f36:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <_sbrk+0x68>)
 8001f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <_sbrk+0x64>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d207      	bcs.n	8001f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f48:	f00b fbec 	bl	800d724 <__errno>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	220c      	movs	r2, #12
 8001f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f52:	f04f 33ff 	mov.w	r3, #4294967295
 8001f56:	e009      	b.n	8001f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f58:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <_sbrk+0x64>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f5e:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <_sbrk+0x64>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	4a05      	ldr	r2, [pc, #20]	; (8001f7c <_sbrk+0x64>)
 8001f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20020000 	.word	0x20020000
 8001f78:	00000400 	.word	0x00000400
 8001f7c:	20000774 	.word	0x20000774
 8001f80:	20001088 	.word	0x20001088

08001f84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f88:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <SystemInit+0x20>)
 8001f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8e:	4a05      	ldr	r2, [pc, #20]	; (8001fa4 <SystemInit+0x20>)
 8001f90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fe0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fac:	f7ff ffea 	bl	8001f84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fb0:	480c      	ldr	r0, [pc, #48]	; (8001fe4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fb2:	490d      	ldr	r1, [pc, #52]	; (8001fe8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fb4:	4a0d      	ldr	r2, [pc, #52]	; (8001fec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb8:	e002      	b.n	8001fc0 <LoopCopyDataInit>

08001fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fbe:	3304      	adds	r3, #4

08001fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc4:	d3f9      	bcc.n	8001fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fc8:	4c0a      	ldr	r4, [pc, #40]	; (8001ff4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fcc:	e001      	b.n	8001fd2 <LoopFillZerobss>

08001fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd0:	3204      	adds	r2, #4

08001fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd4:	d3fb      	bcc.n	8001fce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fd6:	f00b fbab 	bl	800d730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fda:	f7ff f8e1 	bl	80011a0 <main>
  bx  lr    
 8001fde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fe0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe8:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001fec:	08011a6c 	.word	0x08011a6c
  ldr r2, =_sbss
 8001ff0:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001ff4:	20001084 	.word	0x20001084

08001ff8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ff8:	e7fe      	b.n	8001ff8 <ADC_IRQHandler>
	...

08001ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002000:	4b0e      	ldr	r3, [pc, #56]	; (800203c <HAL_Init+0x40>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0d      	ldr	r2, [pc, #52]	; (800203c <HAL_Init+0x40>)
 8002006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800200a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_Init+0x40>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a0a      	ldr	r2, [pc, #40]	; (800203c <HAL_Init+0x40>)
 8002012:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002016:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <HAL_Init+0x40>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a07      	ldr	r2, [pc, #28]	; (800203c <HAL_Init+0x40>)
 800201e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002022:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002024:	2003      	movs	r0, #3
 8002026:	f000 f94f 	bl	80022c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800202a:	2000      	movs	r0, #0
 800202c:	f000 f808 	bl	8002040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002030:	f7ff fc2a 	bl	8001888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40023c00 	.word	0x40023c00

08002040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_InitTick+0x54>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_InitTick+0x58>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	4619      	mov	r1, r3
 8002052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002056:	fbb3 f3f1 	udiv	r3, r3, r1
 800205a:	fbb2 f3f3 	udiv	r3, r2, r3
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f967 	bl	8002332 <HAL_SYSTICK_Config>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e00e      	b.n	800208c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b0f      	cmp	r3, #15
 8002072:	d80a      	bhi.n	800208a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002074:	2200      	movs	r2, #0
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	f04f 30ff 	mov.w	r0, #4294967295
 800207c:	f000 f92f 	bl	80022de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002080:	4a06      	ldr	r2, [pc, #24]	; (800209c <HAL_InitTick+0x5c>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	e000      	b.n	800208c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000000 	.word	0x20000000
 8002098:	20000008 	.word	0x20000008
 800209c:	20000004 	.word	0x20000004

080020a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_IncTick+0x20>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_IncTick+0x24>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4413      	add	r3, r2
 80020b0:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <HAL_IncTick+0x24>)
 80020b2:	6013      	str	r3, [r2, #0]
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20000008 	.word	0x20000008
 80020c4:	20000778 	.word	0x20000778

080020c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return uwTick;
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <HAL_GetTick+0x14>)
 80020ce:	681b      	ldr	r3, [r3, #0]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	20000778 	.word	0x20000778

080020e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e8:	f7ff ffee 	bl	80020c8 <HAL_GetTick>
 80020ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f8:	d005      	beq.n	8002106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020fa:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <HAL_Delay+0x44>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4413      	add	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002106:	bf00      	nop
 8002108:	f7ff ffde 	bl	80020c8 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	429a      	cmp	r2, r3
 8002116:	d8f7      	bhi.n	8002108 <HAL_Delay+0x28>
  {
  }
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000008 	.word	0x20000008

08002128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <__NVIC_SetPriorityGrouping+0x44>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002144:	4013      	ands	r3, r2
 8002146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002150:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800215a:	4a04      	ldr	r2, [pc, #16]	; (800216c <__NVIC_SetPriorityGrouping+0x44>)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	60d3      	str	r3, [r2, #12]
}
 8002160:	bf00      	nop
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002174:	4b04      	ldr	r3, [pc, #16]	; (8002188 <__NVIC_GetPriorityGrouping+0x18>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	0a1b      	lsrs	r3, r3, #8
 800217a:	f003 0307 	and.w	r3, r3, #7
}
 800217e:	4618      	mov	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	2b00      	cmp	r3, #0
 800219c:	db0b      	blt.n	80021b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	f003 021f 	and.w	r2, r3, #31
 80021a4:	4907      	ldr	r1, [pc, #28]	; (80021c4 <__NVIC_EnableIRQ+0x38>)
 80021a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021aa:	095b      	lsrs	r3, r3, #5
 80021ac:	2001      	movs	r0, #1
 80021ae:	fa00 f202 	lsl.w	r2, r0, r2
 80021b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	e000e100 	.word	0xe000e100

080021c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	6039      	str	r1, [r7, #0]
 80021d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	db0a      	blt.n	80021f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	490c      	ldr	r1, [pc, #48]	; (8002214 <__NVIC_SetPriority+0x4c>)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	0112      	lsls	r2, r2, #4
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	440b      	add	r3, r1
 80021ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021f0:	e00a      	b.n	8002208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	4908      	ldr	r1, [pc, #32]	; (8002218 <__NVIC_SetPriority+0x50>)
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	3b04      	subs	r3, #4
 8002200:	0112      	lsls	r2, r2, #4
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	440b      	add	r3, r1
 8002206:	761a      	strb	r2, [r3, #24]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000e100 	.word	0xe000e100
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800221c:	b480      	push	{r7}
 800221e:	b089      	sub	sp, #36	; 0x24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f1c3 0307 	rsb	r3, r3, #7
 8002236:	2b04      	cmp	r3, #4
 8002238:	bf28      	it	cs
 800223a:	2304      	movcs	r3, #4
 800223c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3304      	adds	r3, #4
 8002242:	2b06      	cmp	r3, #6
 8002244:	d902      	bls.n	800224c <NVIC_EncodePriority+0x30>
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3b03      	subs	r3, #3
 800224a:	e000      	b.n	800224e <NVIC_EncodePriority+0x32>
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002250:	f04f 32ff 	mov.w	r2, #4294967295
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43da      	mvns	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	401a      	ands	r2, r3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002264:	f04f 31ff 	mov.w	r1, #4294967295
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	fa01 f303 	lsl.w	r3, r1, r3
 800226e:	43d9      	mvns	r1, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002274:	4313      	orrs	r3, r2
         );
}
 8002276:	4618      	mov	r0, r3
 8002278:	3724      	adds	r7, #36	; 0x24
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
	...

08002284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002294:	d301      	bcc.n	800229a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002296:	2301      	movs	r3, #1
 8002298:	e00f      	b.n	80022ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800229a:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <SysTick_Config+0x40>)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3b01      	subs	r3, #1
 80022a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022a2:	210f      	movs	r1, #15
 80022a4:	f04f 30ff 	mov.w	r0, #4294967295
 80022a8:	f7ff ff8e 	bl	80021c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022ac:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <SysTick_Config+0x40>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022b2:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <SysTick_Config+0x40>)
 80022b4:	2207      	movs	r2, #7
 80022b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	e000e010 	.word	0xe000e010

080022c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff ff29 	bl	8002128 <__NVIC_SetPriorityGrouping>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022de:	b580      	push	{r7, lr}
 80022e0:	b086      	sub	sp, #24
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	4603      	mov	r3, r0
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022f0:	f7ff ff3e 	bl	8002170 <__NVIC_GetPriorityGrouping>
 80022f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	6978      	ldr	r0, [r7, #20]
 80022fc:	f7ff ff8e 	bl	800221c <NVIC_EncodePriority>
 8002300:	4602      	mov	r2, r0
 8002302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff ff5d 	bl	80021c8 <__NVIC_SetPriority>
}
 800230e:	bf00      	nop
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff31 	bl	800218c <__NVIC_EnableIRQ>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ffa2 	bl	8002284 <SysTick_Config>
 8002340:	4603      	mov	r3, r0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002358:	f7ff feb6 	bl	80020c8 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e099      	b.n	800249c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0201 	bic.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002388:	e00f      	b.n	80023aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800238a:	f7ff fe9d 	bl	80020c8 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b05      	cmp	r3, #5
 8002396:	d908      	bls.n	80023aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2220      	movs	r2, #32
 800239c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2203      	movs	r2, #3
 80023a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e078      	b.n	800249c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1e8      	bne.n	800238a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	4b38      	ldr	r3, [pc, #224]	; (80024a4 <HAL_DMA_Init+0x158>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	2b04      	cmp	r3, #4
 8002402:	d107      	bne.n	8002414 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	4313      	orrs	r3, r2
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4313      	orrs	r3, r2
 8002412:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f023 0307 	bic.w	r3, r3, #7
 800242a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	4313      	orrs	r3, r2
 8002434:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	2b04      	cmp	r3, #4
 800243c:	d117      	bne.n	800246e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	4313      	orrs	r3, r2
 8002446:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00e      	beq.n	800246e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 fb01 	bl	8002a58 <DMA_CheckFifoParam>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2240      	movs	r2, #64	; 0x40
 8002460:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800246a:	2301      	movs	r3, #1
 800246c:	e016      	b.n	800249c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fab8 	bl	80029ec <DMA_CalcBaseAndBitshift>
 800247c:	4603      	mov	r3, r0
 800247e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002484:	223f      	movs	r2, #63	; 0x3f
 8002486:	409a      	lsls	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	f010803f 	.word	0xf010803f

080024a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_DMA_Start_IT+0x26>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e040      	b.n	8002550 <HAL_DMA_Start_IT+0xa8>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d12f      	bne.n	8002542 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2202      	movs	r2, #2
 80024e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 fa4a 	bl	8002990 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	223f      	movs	r2, #63	; 0x3f
 8002502:	409a      	lsls	r2, r3
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0216 	orr.w	r2, r2, #22
 8002516:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	2b00      	cmp	r3, #0
 800251e:	d007      	beq.n	8002530 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0208 	orr.w	r2, r2, #8
 800252e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0201 	orr.w	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	e005      	b.n	800254e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800254a:	2302      	movs	r3, #2
 800254c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800254e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002564:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002566:	f7ff fdaf 	bl	80020c8 <HAL_GetTick>
 800256a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d008      	beq.n	800258a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2280      	movs	r2, #128	; 0x80
 800257c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e052      	b.n	8002630 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0216 	bic.w	r2, r2, #22
 8002598:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695a      	ldr	r2, [r3, #20]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d103      	bne.n	80025ba <HAL_DMA_Abort+0x62>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d007      	beq.n	80025ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0208 	bic.w	r2, r2, #8
 80025c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0201 	bic.w	r2, r2, #1
 80025d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025da:	e013      	b.n	8002604 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025dc:	f7ff fd74 	bl	80020c8 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b05      	cmp	r3, #5
 80025e8:	d90c      	bls.n	8002604 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2220      	movs	r2, #32
 80025ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2203      	movs	r2, #3
 80025f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e015      	b.n	8002630 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1e4      	bne.n	80025dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002616:	223f      	movs	r2, #63	; 0x3f
 8002618:	409a      	lsls	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d004      	beq.n	8002656 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2280      	movs	r2, #128	; 0x80
 8002650:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e00c      	b.n	8002670 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2205      	movs	r2, #5
 800265a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0201 	bic.w	r2, r2, #1
 800266c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002688:	4b8e      	ldr	r3, [pc, #568]	; (80028c4 <HAL_DMA_IRQHandler+0x248>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a8e      	ldr	r2, [pc, #568]	; (80028c8 <HAL_DMA_IRQHandler+0x24c>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	0a9b      	lsrs	r3, r3, #10
 8002694:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a6:	2208      	movs	r2, #8
 80026a8:	409a      	lsls	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d01a      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d013      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0204 	bic.w	r2, r2, #4
 80026ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d4:	2208      	movs	r2, #8
 80026d6:	409a      	lsls	r2, r3
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e0:	f043 0201 	orr.w	r2, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ec:	2201      	movs	r2, #1
 80026ee:	409a      	lsls	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d012      	beq.n	800271e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00b      	beq.n	800271e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270a:	2201      	movs	r2, #1
 800270c:	409a      	lsls	r2, r3
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002716:	f043 0202 	orr.w	r2, r3, #2
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002722:	2204      	movs	r2, #4
 8002724:	409a      	lsls	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4013      	ands	r3, r2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d012      	beq.n	8002754 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00b      	beq.n	8002754 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002740:	2204      	movs	r2, #4
 8002742:	409a      	lsls	r2, r3
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274c:	f043 0204 	orr.w	r2, r3, #4
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002758:	2210      	movs	r2, #16
 800275a:	409a      	lsls	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4013      	ands	r3, r2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d043      	beq.n	80027ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d03c      	beq.n	80027ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002776:	2210      	movs	r2, #16
 8002778:	409a      	lsls	r2, r3
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d018      	beq.n	80027be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d108      	bne.n	80027ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d024      	beq.n	80027ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	4798      	blx	r3
 80027aa:	e01f      	b.n	80027ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d01b      	beq.n	80027ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	4798      	blx	r3
 80027bc:	e016      	b.n	80027ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d107      	bne.n	80027dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0208 	bic.w	r2, r2, #8
 80027da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f0:	2220      	movs	r2, #32
 80027f2:	409a      	lsls	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 808f 	beq.w	800291c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 8087 	beq.w	800291c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002812:	2220      	movs	r2, #32
 8002814:	409a      	lsls	r2, r3
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b05      	cmp	r3, #5
 8002824:	d136      	bne.n	8002894 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0216 	bic.w	r2, r2, #22
 8002834:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695a      	ldr	r2, [r3, #20]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002844:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	2b00      	cmp	r3, #0
 800284c:	d103      	bne.n	8002856 <HAL_DMA_IRQHandler+0x1da>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002852:	2b00      	cmp	r3, #0
 8002854:	d007      	beq.n	8002866 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0208 	bic.w	r2, r2, #8
 8002864:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286a:	223f      	movs	r2, #63	; 0x3f
 800286c:	409a      	lsls	r2, r3
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002886:	2b00      	cmp	r3, #0
 8002888:	d07e      	beq.n	8002988 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	4798      	blx	r3
        }
        return;
 8002892:	e079      	b.n	8002988 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d01d      	beq.n	80028de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10d      	bne.n	80028cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d031      	beq.n	800291c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	4798      	blx	r3
 80028c0:	e02c      	b.n	800291c <HAL_DMA_IRQHandler+0x2a0>
 80028c2:	bf00      	nop
 80028c4:	20000000 	.word	0x20000000
 80028c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d023      	beq.n	800291c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	4798      	blx	r3
 80028dc:	e01e      	b.n	800291c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10f      	bne.n	800290c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0210 	bic.w	r2, r2, #16
 80028fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002920:	2b00      	cmp	r3, #0
 8002922:	d032      	beq.n	800298a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d022      	beq.n	8002976 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2205      	movs	r2, #5
 8002934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0201 	bic.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	3301      	adds	r3, #1
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	429a      	cmp	r2, r3
 8002952:	d307      	bcc.n	8002964 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f2      	bne.n	8002948 <HAL_DMA_IRQHandler+0x2cc>
 8002962:	e000      	b.n	8002966 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002964:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297a:	2b00      	cmp	r3, #0
 800297c:	d005      	beq.n	800298a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	4798      	blx	r3
 8002986:	e000      	b.n	800298a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002988:	bf00      	nop
    }
  }
}
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b40      	cmp	r3, #64	; 0x40
 80029bc:	d108      	bne.n	80029d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029ce:	e007      	b.n	80029e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	60da      	str	r2, [r3, #12]
}
 80029e0:	bf00      	nop
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	3b10      	subs	r3, #16
 80029fc:	4a14      	ldr	r2, [pc, #80]	; (8002a50 <DMA_CalcBaseAndBitshift+0x64>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	091b      	lsrs	r3, r3, #4
 8002a04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a06:	4a13      	ldr	r2, [pc, #76]	; (8002a54 <DMA_CalcBaseAndBitshift+0x68>)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d909      	bls.n	8002a2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a22:	f023 0303 	bic.w	r3, r3, #3
 8002a26:	1d1a      	adds	r2, r3, #4
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	659a      	str	r2, [r3, #88]	; 0x58
 8002a2c:	e007      	b.n	8002a3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a36:	f023 0303 	bic.w	r3, r3, #3
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	aaaaaaab 	.word	0xaaaaaaab
 8002a54:	0801160c 	.word	0x0801160c

08002a58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d11f      	bne.n	8002ab2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d856      	bhi.n	8002b26 <DMA_CheckFifoParam+0xce>
 8002a78:	a201      	add	r2, pc, #4	; (adr r2, 8002a80 <DMA_CheckFifoParam+0x28>)
 8002a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7e:	bf00      	nop
 8002a80:	08002a91 	.word	0x08002a91
 8002a84:	08002aa3 	.word	0x08002aa3
 8002a88:	08002a91 	.word	0x08002a91
 8002a8c:	08002b27 	.word	0x08002b27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d046      	beq.n	8002b2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aa0:	e043      	b.n	8002b2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002aaa:	d140      	bne.n	8002b2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab0:	e03d      	b.n	8002b2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aba:	d121      	bne.n	8002b00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	d837      	bhi.n	8002b32 <DMA_CheckFifoParam+0xda>
 8002ac2:	a201      	add	r2, pc, #4	; (adr r2, 8002ac8 <DMA_CheckFifoParam+0x70>)
 8002ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac8:	08002ad9 	.word	0x08002ad9
 8002acc:	08002adf 	.word	0x08002adf
 8002ad0:	08002ad9 	.word	0x08002ad9
 8002ad4:	08002af1 	.word	0x08002af1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	73fb      	strb	r3, [r7, #15]
      break;
 8002adc:	e030      	b.n	8002b40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d025      	beq.n	8002b36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aee:	e022      	b.n	8002b36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002af8:	d11f      	bne.n	8002b3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002afe:	e01c      	b.n	8002b3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d903      	bls.n	8002b0e <DMA_CheckFifoParam+0xb6>
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d003      	beq.n	8002b14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b0c:	e018      	b.n	8002b40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	73fb      	strb	r3, [r7, #15]
      break;
 8002b12:	e015      	b.n	8002b40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00e      	beq.n	8002b3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	73fb      	strb	r3, [r7, #15]
      break;
 8002b24:	e00b      	b.n	8002b3e <DMA_CheckFifoParam+0xe6>
      break;
 8002b26:	bf00      	nop
 8002b28:	e00a      	b.n	8002b40 <DMA_CheckFifoParam+0xe8>
      break;
 8002b2a:	bf00      	nop
 8002b2c:	e008      	b.n	8002b40 <DMA_CheckFifoParam+0xe8>
      break;
 8002b2e:	bf00      	nop
 8002b30:	e006      	b.n	8002b40 <DMA_CheckFifoParam+0xe8>
      break;
 8002b32:	bf00      	nop
 8002b34:	e004      	b.n	8002b40 <DMA_CheckFifoParam+0xe8>
      break;
 8002b36:	bf00      	nop
 8002b38:	e002      	b.n	8002b40 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b3a:	bf00      	nop
 8002b3c:	e000      	b.n	8002b40 <DMA_CheckFifoParam+0xe8>
      break;
 8002b3e:	bf00      	nop
    }
  } 
  
  return status; 
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop

08002b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b089      	sub	sp, #36	; 0x24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	e16b      	b.n	8002e44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	f040 815a 	bne.w	8002e3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d005      	beq.n	8002ba2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d130      	bne.n	8002c04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	2203      	movs	r2, #3
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bd8:	2201      	movs	r2, #1
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4013      	ands	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	091b      	lsrs	r3, r3, #4
 8002bee:	f003 0201 	and.w	r2, r3, #1
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d017      	beq.n	8002c40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d123      	bne.n	8002c94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	08da      	lsrs	r2, r3, #3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3208      	adds	r2, #8
 8002c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	220f      	movs	r2, #15
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	08da      	lsrs	r2, r3, #3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3208      	adds	r2, #8
 8002c8e:	69b9      	ldr	r1, [r7, #24]
 8002c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 0203 	and.w	r2, r3, #3
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 80b4 	beq.w	8002e3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	4b60      	ldr	r3, [pc, #384]	; (8002e5c <HAL_GPIO_Init+0x30c>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	4a5f      	ldr	r2, [pc, #380]	; (8002e5c <HAL_GPIO_Init+0x30c>)
 8002ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ce6:	4b5d      	ldr	r3, [pc, #372]	; (8002e5c <HAL_GPIO_Init+0x30c>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cf2:	4a5b      	ldr	r2, [pc, #364]	; (8002e60 <HAL_GPIO_Init+0x310>)
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	089b      	lsrs	r3, r3, #2
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	220f      	movs	r2, #15
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a52      	ldr	r2, [pc, #328]	; (8002e64 <HAL_GPIO_Init+0x314>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d02b      	beq.n	8002d76 <HAL_GPIO_Init+0x226>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a51      	ldr	r2, [pc, #324]	; (8002e68 <HAL_GPIO_Init+0x318>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d025      	beq.n	8002d72 <HAL_GPIO_Init+0x222>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a50      	ldr	r2, [pc, #320]	; (8002e6c <HAL_GPIO_Init+0x31c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d01f      	beq.n	8002d6e <HAL_GPIO_Init+0x21e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a4f      	ldr	r2, [pc, #316]	; (8002e70 <HAL_GPIO_Init+0x320>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d019      	beq.n	8002d6a <HAL_GPIO_Init+0x21a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a4e      	ldr	r2, [pc, #312]	; (8002e74 <HAL_GPIO_Init+0x324>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d013      	beq.n	8002d66 <HAL_GPIO_Init+0x216>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a4d      	ldr	r2, [pc, #308]	; (8002e78 <HAL_GPIO_Init+0x328>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d00d      	beq.n	8002d62 <HAL_GPIO_Init+0x212>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a4c      	ldr	r2, [pc, #304]	; (8002e7c <HAL_GPIO_Init+0x32c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d007      	beq.n	8002d5e <HAL_GPIO_Init+0x20e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a4b      	ldr	r2, [pc, #300]	; (8002e80 <HAL_GPIO_Init+0x330>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d101      	bne.n	8002d5a <HAL_GPIO_Init+0x20a>
 8002d56:	2307      	movs	r3, #7
 8002d58:	e00e      	b.n	8002d78 <HAL_GPIO_Init+0x228>
 8002d5a:	2308      	movs	r3, #8
 8002d5c:	e00c      	b.n	8002d78 <HAL_GPIO_Init+0x228>
 8002d5e:	2306      	movs	r3, #6
 8002d60:	e00a      	b.n	8002d78 <HAL_GPIO_Init+0x228>
 8002d62:	2305      	movs	r3, #5
 8002d64:	e008      	b.n	8002d78 <HAL_GPIO_Init+0x228>
 8002d66:	2304      	movs	r3, #4
 8002d68:	e006      	b.n	8002d78 <HAL_GPIO_Init+0x228>
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e004      	b.n	8002d78 <HAL_GPIO_Init+0x228>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e002      	b.n	8002d78 <HAL_GPIO_Init+0x228>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <HAL_GPIO_Init+0x228>
 8002d76:	2300      	movs	r3, #0
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	f002 0203 	and.w	r2, r2, #3
 8002d7e:	0092      	lsls	r2, r2, #2
 8002d80:	4093      	lsls	r3, r2
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d88:	4935      	ldr	r1, [pc, #212]	; (8002e60 <HAL_GPIO_Init+0x310>)
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	089b      	lsrs	r3, r3, #2
 8002d8e:	3302      	adds	r3, #2
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d96:	4b3b      	ldr	r3, [pc, #236]	; (8002e84 <HAL_GPIO_Init+0x334>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dba:	4a32      	ldr	r2, [pc, #200]	; (8002e84 <HAL_GPIO_Init+0x334>)
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dc0:	4b30      	ldr	r3, [pc, #192]	; (8002e84 <HAL_GPIO_Init+0x334>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002de4:	4a27      	ldr	r2, [pc, #156]	; (8002e84 <HAL_GPIO_Init+0x334>)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dea:	4b26      	ldr	r3, [pc, #152]	; (8002e84 <HAL_GPIO_Init+0x334>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	43db      	mvns	r3, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4013      	ands	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e0e:	4a1d      	ldr	r2, [pc, #116]	; (8002e84 <HAL_GPIO_Init+0x334>)
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e14:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <HAL_GPIO_Init+0x334>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e38:	4a12      	ldr	r2, [pc, #72]	; (8002e84 <HAL_GPIO_Init+0x334>)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	3301      	adds	r3, #1
 8002e42:	61fb      	str	r3, [r7, #28]
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	2b0f      	cmp	r3, #15
 8002e48:	f67f ae90 	bls.w	8002b6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e4c:	bf00      	nop
 8002e4e:	bf00      	nop
 8002e50:	3724      	adds	r7, #36	; 0x24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	40013800 	.word	0x40013800
 8002e64:	40020000 	.word	0x40020000
 8002e68:	40020400 	.word	0x40020400
 8002e6c:	40020800 	.word	0x40020800
 8002e70:	40020c00 	.word	0x40020c00
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40021400 	.word	0x40021400
 8002e7c:	40021800 	.word	0x40021800
 8002e80:	40021c00 	.word	0x40021c00
 8002e84:	40013c00 	.word	0x40013c00

08002e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	807b      	strh	r3, [r7, #2]
 8002e94:	4613      	mov	r3, r2
 8002e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e98:	787b      	ldrb	r3, [r7, #1]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e9e:	887a      	ldrh	r2, [r7, #2]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ea4:	e003      	b.n	8002eae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ea6:	887b      	ldrh	r3, [r7, #2]
 8002ea8:	041a      	lsls	r2, r3, #16
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	619a      	str	r2, [r3, #24]
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b086      	sub	sp, #24
 8002ebe:	af02      	add	r7, sp, #8
 8002ec0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e059      	b.n	8002f80 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f009 f872 	bl	800bfd0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2203      	movs	r2, #3
 8002ef0:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002efa:	d102      	bne.n	8002f02 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f005 fe7b 	bl	8008c02 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	7c1a      	ldrb	r2, [r3, #16]
 8002f14:	f88d 2000 	strb.w	r2, [sp]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f1c:	f005 fdfc 	bl	8008b18 <USB_CoreInit>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d005      	beq.n	8002f32 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2202      	movs	r2, #2
 8002f2a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e026      	b.n	8002f80 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2101      	movs	r1, #1
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f005 fe73 	bl	8008c24 <USB_SetCurrentMode>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e017      	b.n	8002f80 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6818      	ldr	r0, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	7c1a      	ldrb	r2, [r3, #16]
 8002f58:	f88d 2000 	strb.w	r2, [sp]
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f60:	f006 f816 	bl	8008f90 <USB_HostInit>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d005      	beq.n	8002f76 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e004      	b.n	8002f80 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002f88:	b590      	push	{r4, r7, lr}
 8002f8a:	b08b      	sub	sp, #44	; 0x2c
 8002f8c:	af04      	add	r7, sp, #16
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	4608      	mov	r0, r1
 8002f92:	4611      	mov	r1, r2
 8002f94:	461a      	mov	r2, r3
 8002f96:	4603      	mov	r3, r0
 8002f98:	70fb      	strb	r3, [r7, #3]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	70bb      	strb	r3, [r7, #2]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002fa2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002fa4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_HCD_HC_Init+0x2c>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e09d      	b.n	80030f0 <HAL_HCD_HC_Init+0x168>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002fbc:	78fa      	ldrb	r2, [r7, #3]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	3319      	adds	r3, #25
 8002fcc:	2200      	movs	r2, #0
 8002fce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002fd0:	78fa      	ldrb	r2, [r7, #3]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	3314      	adds	r3, #20
 8002fe0:	787a      	ldrb	r2, [r7, #1]
 8002fe2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002fe4:	78fa      	ldrb	r2, [r7, #3]
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	3315      	adds	r3, #21
 8002ff4:	78fa      	ldrb	r2, [r7, #3]
 8002ff6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	3326      	adds	r3, #38	; 0x26
 8003008:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800300c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800300e:	78fa      	ldrb	r2, [r7, #3]
 8003010:	78bb      	ldrb	r3, [r7, #2]
 8003012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003016:	b2d8      	uxtb	r0, r3
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	3316      	adds	r3, #22
 8003026:	4602      	mov	r2, r0
 8003028:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800302a:	78fb      	ldrb	r3, [r7, #3]
 800302c:	4619      	mov	r1, r3
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fbc8 	bl	80037c4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003034:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003038:	2b00      	cmp	r3, #0
 800303a:	da0a      	bge.n	8003052 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	3317      	adds	r3, #23
 800304c:	2201      	movs	r2, #1
 800304e:	701a      	strb	r2, [r3, #0]
 8003050:	e009      	b.n	8003066 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003052:	78fa      	ldrb	r2, [r7, #3]
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	1a9b      	subs	r3, r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	3317      	adds	r3, #23
 8003062:	2200      	movs	r2, #0
 8003064:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f006 f8f4 	bl	8009258 <USB_GetHostSpeed>
 8003070:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003072:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003076:	2b01      	cmp	r3, #1
 8003078:	d10b      	bne.n	8003092 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800307a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800307e:	2b01      	cmp	r3, #1
 8003080:	d107      	bne.n	8003092 <HAL_HCD_HC_Init+0x10a>
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d104      	bne.n	8003092 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	2bbc      	cmp	r3, #188	; 0xbc
 800308c:	d901      	bls.n	8003092 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800308e:	23bc      	movs	r3, #188	; 0xbc
 8003090:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003092:	78fa      	ldrb	r2, [r7, #3]
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	1a9b      	subs	r3, r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	3318      	adds	r3, #24
 80030a2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80030a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80030a8:	78fa      	ldrb	r2, [r7, #3]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	b298      	uxth	r0, r3
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	3328      	adds	r3, #40	; 0x28
 80030bc:	4602      	mov	r2, r0
 80030be:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6818      	ldr	r0, [r3, #0]
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	787c      	ldrb	r4, [r7, #1]
 80030ca:	78ba      	ldrb	r2, [r7, #2]
 80030cc:	78f9      	ldrb	r1, [r7, #3]
 80030ce:	9302      	str	r3, [sp, #8]
 80030d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80030d4:	9301      	str	r3, [sp, #4]
 80030d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	4623      	mov	r3, r4
 80030de:	f006 f8e3 	bl	80092a8 <USB_HC_Init>
 80030e2:	4603      	mov	r3, r0
 80030e4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	371c      	adds	r7, #28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd90      	pop	{r4, r7, pc}

080030f8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_HCD_HC_Halt+0x1e>
 8003112:	2302      	movs	r3, #2
 8003114:	e00f      	b.n	8003136 <HAL_HCD_HC_Halt+0x3e>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	4611      	mov	r1, r2
 8003126:	4618      	mov	r0, r3
 8003128:	f006 fc75 	bl	8009a16 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8003134:	7bfb      	ldrb	r3, [r7, #15]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	4608      	mov	r0, r1
 800314a:	4611      	mov	r1, r2
 800314c:	461a      	mov	r2, r3
 800314e:	4603      	mov	r3, r0
 8003150:	70fb      	strb	r3, [r7, #3]
 8003152:	460b      	mov	r3, r1
 8003154:	70bb      	strb	r3, [r7, #2]
 8003156:	4613      	mov	r3, r2
 8003158:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800315a:	78fa      	ldrb	r2, [r7, #3]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	3317      	adds	r3, #23
 800316a:	78ba      	ldrb	r2, [r7, #2]
 800316c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800316e:	78fa      	ldrb	r2, [r7, #3]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	3326      	adds	r3, #38	; 0x26
 800317e:	787a      	ldrb	r2, [r7, #1]
 8003180:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003182:	7c3b      	ldrb	r3, [r7, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d114      	bne.n	80031b2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	332a      	adds	r3, #42	; 0x2a
 8003198:	2203      	movs	r2, #3
 800319a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	3319      	adds	r3, #25
 80031ac:	7f3a      	ldrb	r2, [r7, #28]
 80031ae:	701a      	strb	r2, [r3, #0]
 80031b0:	e009      	b.n	80031c6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	332a      	adds	r3, #42	; 0x2a
 80031c2:	2202      	movs	r2, #2
 80031c4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80031c6:	787b      	ldrb	r3, [r7, #1]
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	f200 8102 	bhi.w	80033d2 <HAL_HCD_HC_SubmitRequest+0x292>
 80031ce:	a201      	add	r2, pc, #4	; (adr r2, 80031d4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80031d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d4:	080031e5 	.word	0x080031e5
 80031d8:	080033bd 	.word	0x080033bd
 80031dc:	080032a9 	.word	0x080032a9
 80031e0:	08003333 	.word	0x08003333
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80031e4:	7c3b      	ldrb	r3, [r7, #16]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	f040 80f5 	bne.w	80033d6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80031ec:	78bb      	ldrb	r3, [r7, #2]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d12d      	bne.n	800324e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80031f2:	8b3b      	ldrh	r3, [r7, #24]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d109      	bne.n	800320c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80031f8:	78fa      	ldrb	r2, [r7, #3]
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	1a9b      	subs	r3, r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	333d      	adds	r3, #61	; 0x3d
 8003208:	2201      	movs	r2, #1
 800320a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800320c:	78fa      	ldrb	r2, [r7, #3]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	333d      	adds	r3, #61	; 0x3d
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10a      	bne.n	8003238 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003222:	78fa      	ldrb	r2, [r7, #3]
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	1a9b      	subs	r3, r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	332a      	adds	r3, #42	; 0x2a
 8003232:	2200      	movs	r2, #0
 8003234:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003236:	e0ce      	b.n	80033d6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003238:	78fa      	ldrb	r2, [r7, #3]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	332a      	adds	r3, #42	; 0x2a
 8003248:	2202      	movs	r2, #2
 800324a:	701a      	strb	r2, [r3, #0]
      break;
 800324c:	e0c3      	b.n	80033d6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800324e:	78fa      	ldrb	r2, [r7, #3]
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	1a9b      	subs	r3, r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	440b      	add	r3, r1
 800325c:	331a      	adds	r3, #26
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b01      	cmp	r3, #1
 8003262:	f040 80b8 	bne.w	80033d6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	333c      	adds	r3, #60	; 0x3c
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10a      	bne.n	8003292 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800327c:	78fa      	ldrb	r2, [r7, #3]
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	332a      	adds	r3, #42	; 0x2a
 800328c:	2200      	movs	r2, #0
 800328e:	701a      	strb	r2, [r3, #0]
      break;
 8003290:	e0a1      	b.n	80033d6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	332a      	adds	r3, #42	; 0x2a
 80032a2:	2202      	movs	r2, #2
 80032a4:	701a      	strb	r2, [r3, #0]
      break;
 80032a6:	e096      	b.n	80033d6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80032a8:	78bb      	ldrb	r3, [r7, #2]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d120      	bne.n	80032f0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	333d      	adds	r3, #61	; 0x3d
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10a      	bne.n	80032da <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	332a      	adds	r3, #42	; 0x2a
 80032d4:	2200      	movs	r2, #0
 80032d6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80032d8:	e07e      	b.n	80033d8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	332a      	adds	r3, #42	; 0x2a
 80032ea:	2202      	movs	r2, #2
 80032ec:	701a      	strb	r2, [r3, #0]
      break;
 80032ee:	e073      	b.n	80033d8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80032f0:	78fa      	ldrb	r2, [r7, #3]
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	4613      	mov	r3, r2
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	1a9b      	subs	r3, r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	333c      	adds	r3, #60	; 0x3c
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10a      	bne.n	800331c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003306:	78fa      	ldrb	r2, [r7, #3]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	1a9b      	subs	r3, r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	332a      	adds	r3, #42	; 0x2a
 8003316:	2200      	movs	r2, #0
 8003318:	701a      	strb	r2, [r3, #0]
      break;
 800331a:	e05d      	b.n	80033d8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800331c:	78fa      	ldrb	r2, [r7, #3]
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	332a      	adds	r3, #42	; 0x2a
 800332c:	2202      	movs	r2, #2
 800332e:	701a      	strb	r2, [r3, #0]
      break;
 8003330:	e052      	b.n	80033d8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003332:	78bb      	ldrb	r3, [r7, #2]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d120      	bne.n	800337a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	333d      	adds	r3, #61	; 0x3d
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10a      	bne.n	8003364 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	332a      	adds	r3, #42	; 0x2a
 800335e:	2200      	movs	r2, #0
 8003360:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003362:	e039      	b.n	80033d8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	332a      	adds	r3, #42	; 0x2a
 8003374:	2202      	movs	r2, #2
 8003376:	701a      	strb	r2, [r3, #0]
      break;
 8003378:	e02e      	b.n	80033d8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800337a:	78fa      	ldrb	r2, [r7, #3]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	1a9b      	subs	r3, r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	333c      	adds	r3, #60	; 0x3c
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10a      	bne.n	80033a6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003390:	78fa      	ldrb	r2, [r7, #3]
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	332a      	adds	r3, #42	; 0x2a
 80033a0:	2200      	movs	r2, #0
 80033a2:	701a      	strb	r2, [r3, #0]
      break;
 80033a4:	e018      	b.n	80033d8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033a6:	78fa      	ldrb	r2, [r7, #3]
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	1a9b      	subs	r3, r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	332a      	adds	r3, #42	; 0x2a
 80033b6:	2202      	movs	r2, #2
 80033b8:	701a      	strb	r2, [r3, #0]
      break;
 80033ba:	e00d      	b.n	80033d8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033bc:	78fa      	ldrb	r2, [r7, #3]
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	332a      	adds	r3, #42	; 0x2a
 80033cc:	2200      	movs	r2, #0
 80033ce:	701a      	strb	r2, [r3, #0]
      break;
 80033d0:	e002      	b.n	80033d8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80033d2:	bf00      	nop
 80033d4:	e000      	b.n	80033d8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80033d6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80033d8:	78fa      	ldrb	r2, [r7, #3]
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	1a9b      	subs	r3, r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	332c      	adds	r3, #44	; 0x2c
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80033ec:	78fa      	ldrb	r2, [r7, #3]
 80033ee:	8b39      	ldrh	r1, [r7, #24]
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	1a9b      	subs	r3, r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4403      	add	r3, r0
 80033fc:	3334      	adds	r3, #52	; 0x34
 80033fe:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	334c      	adds	r3, #76	; 0x4c
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003414:	78fa      	ldrb	r2, [r7, #3]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	3338      	adds	r3, #56	; 0x38
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	3315      	adds	r3, #21
 8003438:	78fa      	ldrb	r2, [r7, #3]
 800343a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	334d      	adds	r3, #77	; 0x4d
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6818      	ldr	r0, [r3, #0]
 8003454:	78fa      	ldrb	r2, [r7, #3]
 8003456:	4613      	mov	r3, r2
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	3310      	adds	r3, #16
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	4413      	add	r3, r2
 8003464:	1d19      	adds	r1, r3, #4
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	799b      	ldrb	r3, [r3, #6]
 800346a:	461a      	mov	r2, r3
 800346c:	f006 f848 	bl	8009500 <USB_HC_StartXfer>
 8003470:	4603      	mov	r3, r0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop

0800347c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f005 fd3c 	bl	8008f10 <USB_GetMode>
 8003498:	4603      	mov	r3, r0
 800349a:	2b01      	cmp	r3, #1
 800349c:	f040 80fb 	bne.w	8003696 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f005 fcff 	bl	8008ea8 <USB_ReadInterrupts>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80f1 	beq.w	8003694 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f005 fcf6 	bl	8008ea8 <USB_ReadInterrupts>
 80034bc:	4603      	mov	r3, r0
 80034be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034c6:	d104      	bne.n	80034d2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80034d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f005 fce6 	bl	8008ea8 <USB_ReadInterrupts>
 80034dc:	4603      	mov	r3, r0
 80034de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034e6:	d104      	bne.n	80034f2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80034f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f005 fcd6 	bl	8008ea8 <USB_ReadInterrupts>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003502:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003506:	d104      	bne.n	8003512 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003510:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f005 fcc6 	bl	8008ea8 <USB_ReadInterrupts>
 800351c:	4603      	mov	r3, r0
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b02      	cmp	r3, #2
 8003524:	d103      	bne.n	800352e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2202      	movs	r2, #2
 800352c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f005 fcb8 	bl	8008ea8 <USB_ReadInterrupts>
 8003538:	4603      	mov	r3, r0
 800353a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800353e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003542:	d120      	bne.n	8003586 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800354c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d113      	bne.n	8003586 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800355e:	2110      	movs	r1, #16
 8003560:	6938      	ldr	r0, [r7, #16]
 8003562:	f005 fbab 	bl	8008cbc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003566:	6938      	ldr	r0, [r7, #16]
 8003568:	f005 fbda 	bl	8008d20 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	7a5b      	ldrb	r3, [r3, #9]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d105      	bne.n	8003580 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2101      	movs	r1, #1
 800357a:	4618      	mov	r0, r3
 800357c:	f005 fdcc 	bl	8009118 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f008 fda3 	bl	800c0cc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f005 fc8c 	bl	8008ea8 <USB_ReadInterrupts>
 8003590:	4603      	mov	r3, r0
 8003592:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003596:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800359a:	d102      	bne.n	80035a2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f001 fd33 	bl	8005008 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f005 fc7e 	bl	8008ea8 <USB_ReadInterrupts>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d106      	bne.n	80035c4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f008 fd6c 	bl	800c094 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2208      	movs	r2, #8
 80035c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f005 fc6d 	bl	8008ea8 <USB_ReadInterrupts>
 80035ce:	4603      	mov	r3, r0
 80035d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035d8:	d139      	bne.n	800364e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f006 fa08 	bl	80099f4 <USB_HC_ReadInterrupt>
 80035e4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	e025      	b.n	8003638 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	fa22 f303 	lsr.w	r3, r2, r3
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d018      	beq.n	8003632 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4413      	add	r3, r2
 8003608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003612:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003616:	d106      	bne.n	8003626 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	b2db      	uxtb	r3, r3
 800361c:	4619      	mov	r1, r3
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f905 	bl	800382e <HCD_HC_IN_IRQHandler>
 8003624:	e005      	b.n	8003632 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	4619      	mov	r1, r3
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 ff67 	bl	8004500 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	3301      	adds	r3, #1
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	795b      	ldrb	r3, [r3, #5]
 800363c:	461a      	mov	r2, r3
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	4293      	cmp	r3, r2
 8003642:	d3d3      	bcc.n	80035ec <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800364c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f005 fc28 	bl	8008ea8 <USB_ReadInterrupts>
 8003658:	4603      	mov	r3, r0
 800365a:	f003 0310 	and.w	r3, r3, #16
 800365e:	2b10      	cmp	r3, #16
 8003660:	d101      	bne.n	8003666 <HAL_HCD_IRQHandler+0x1ea>
 8003662:	2301      	movs	r3, #1
 8003664:	e000      	b.n	8003668 <HAL_HCD_IRQHandler+0x1ec>
 8003666:	2300      	movs	r3, #0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d014      	beq.n	8003696 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699a      	ldr	r2, [r3, #24]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0210 	bic.w	r2, r2, #16
 800367a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f001 fbe4 	bl	8004e4a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699a      	ldr	r2, [r3, #24]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0210 	orr.w	r2, r2, #16
 8003690:	619a      	str	r2, [r3, #24]
 8003692:	e000      	b.n	8003696 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003694:	bf00      	nop
    }
  }
}
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_HCD_Start+0x16>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e013      	b.n	80036da <HAL_HCD_Start+0x3e>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2101      	movs	r1, #1
 80036c0:	4618      	mov	r0, r3
 80036c2:	f005 fd90 	bl	80091e6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f005 fa88 	bl	8008be0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_HCD_Stop+0x16>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e00d      	b.n	8003714 <HAL_HCD_Stop+0x32>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f006 fae3 	bl	8009cd0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f005 fd32 	bl	8009192 <USB_ResetPort>
 800372e:	4603      	mov	r3, r0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003744:	78fa      	ldrb	r2, [r7, #3]
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	4613      	mov	r3, r2
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	334c      	adds	r3, #76	; 0x4c
 8003754:	781b      	ldrb	r3, [r3, #0]
}
 8003756:	4618      	mov	r0, r3
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	460b      	mov	r3, r1
 800376c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800376e:	78fa      	ldrb	r2, [r7, #3]
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	4613      	mov	r3, r2
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	1a9b      	subs	r3, r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	3338      	adds	r3, #56	; 0x38
 800377e:	681b      	ldr	r3, [r3, #0]
}
 8003780:	4618      	mov	r0, r3
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f005 fd74 	bl	8009286 <USB_GetCurrentFrame>
 800379e:	4603      	mov	r3, r0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f005 fd4f 	bl	8009258 <USB_GetHostSpeed>
 80037ba:	4603      	mov	r3, r0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80037d0:	78fa      	ldrb	r2, [r7, #3]
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	4613      	mov	r3, r2
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	1a9b      	subs	r3, r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	331a      	adds	r3, #26
 80037e0:	2200      	movs	r2, #0
 80037e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80037e4:	78fa      	ldrb	r2, [r7, #3]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	331b      	adds	r3, #27
 80037f4:	2200      	movs	r2, #0
 80037f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80037f8:	78fa      	ldrb	r2, [r7, #3]
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	4613      	mov	r3, r2
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	3325      	adds	r3, #37	; 0x25
 8003808:	2200      	movs	r2, #0
 800380a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800380c:	78fa      	ldrb	r2, [r7, #3]
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	4613      	mov	r3, r2
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	1a9b      	subs	r3, r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	3324      	adds	r3, #36	; 0x24
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b086      	sub	sp, #24
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	460b      	mov	r3, r1
 8003838:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	78fa      	ldrb	r2, [r7, #3]
 800384a:	4611      	mov	r1, r2
 800384c:	4618      	mov	r0, r3
 800384e:	f005 fb3e 	bl	8008ece <USB_ReadChInterrupts>
 8003852:	4603      	mov	r3, r0
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b04      	cmp	r3, #4
 800385a:	d11a      	bne.n	8003892 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800385c:	78fb      	ldrb	r3, [r7, #3]
 800385e:	015a      	lsls	r2, r3, #5
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	4413      	add	r3, r2
 8003864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003868:	461a      	mov	r2, r3
 800386a:	2304      	movs	r3, #4
 800386c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800386e:	78fa      	ldrb	r2, [r7, #3]
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	1a9b      	subs	r3, r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	334d      	adds	r3, #77	; 0x4d
 800387e:	2207      	movs	r2, #7
 8003880:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	78fa      	ldrb	r2, [r7, #3]
 8003888:	4611      	mov	r1, r2
 800388a:	4618      	mov	r0, r3
 800388c:	f006 f8c3 	bl	8009a16 <USB_HC_Halt>
 8003890:	e09e      	b.n	80039d0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	4611      	mov	r1, r2
 800389a:	4618      	mov	r0, r3
 800389c:	f005 fb17 	bl	8008ece <USB_ReadChInterrupts>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038aa:	d11b      	bne.n	80038e4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b8:	461a      	mov	r2, r3
 80038ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038be:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	334d      	adds	r3, #77	; 0x4d
 80038d0:	2208      	movs	r2, #8
 80038d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	78fa      	ldrb	r2, [r7, #3]
 80038da:	4611      	mov	r1, r2
 80038dc:	4618      	mov	r0, r3
 80038de:	f006 f89a 	bl	8009a16 <USB_HC_Halt>
 80038e2:	e075      	b.n	80039d0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	78fa      	ldrb	r2, [r7, #3]
 80038ea:	4611      	mov	r1, r2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f005 faee 	bl	8008ece <USB_ReadChInterrupts>
 80038f2:	4603      	mov	r3, r0
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d11a      	bne.n	8003932 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	4413      	add	r3, r2
 8003904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003908:	461a      	mov	r2, r3
 800390a:	2308      	movs	r3, #8
 800390c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800390e:	78fa      	ldrb	r2, [r7, #3]
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	4613      	mov	r3, r2
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	1a9b      	subs	r3, r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	334d      	adds	r3, #77	; 0x4d
 800391e:	2206      	movs	r2, #6
 8003920:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	78fa      	ldrb	r2, [r7, #3]
 8003928:	4611      	mov	r1, r2
 800392a:	4618      	mov	r0, r3
 800392c:	f006 f873 	bl	8009a16 <USB_HC_Halt>
 8003930:	e04e      	b.n	80039d0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	78fa      	ldrb	r2, [r7, #3]
 8003938:	4611      	mov	r1, r2
 800393a:	4618      	mov	r0, r3
 800393c:	f005 fac7 	bl	8008ece <USB_ReadChInterrupts>
 8003940:	4603      	mov	r3, r0
 8003942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800394a:	d11b      	bne.n	8003984 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	4413      	add	r3, r2
 8003954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003958:	461a      	mov	r2, r3
 800395a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800395e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003960:	78fa      	ldrb	r2, [r7, #3]
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	4613      	mov	r3, r2
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	1a9b      	subs	r3, r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	334d      	adds	r3, #77	; 0x4d
 8003970:	2209      	movs	r2, #9
 8003972:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	78fa      	ldrb	r2, [r7, #3]
 800397a:	4611      	mov	r1, r2
 800397c:	4618      	mov	r0, r3
 800397e:	f006 f84a 	bl	8009a16 <USB_HC_Halt>
 8003982:	e025      	b.n	80039d0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	78fa      	ldrb	r2, [r7, #3]
 800398a:	4611      	mov	r1, r2
 800398c:	4618      	mov	r0, r3
 800398e:	f005 fa9e 	bl	8008ece <USB_ReadChInterrupts>
 8003992:	4603      	mov	r3, r0
 8003994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003998:	2b80      	cmp	r3, #128	; 0x80
 800399a:	d119      	bne.n	80039d0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a8:	461a      	mov	r2, r3
 80039aa:	2380      	movs	r3, #128	; 0x80
 80039ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80039ae:	78fa      	ldrb	r2, [r7, #3]
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	4613      	mov	r3, r2
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	1a9b      	subs	r3, r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	440b      	add	r3, r1
 80039bc:	334d      	adds	r3, #77	; 0x4d
 80039be:	2207      	movs	r2, #7
 80039c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	78fa      	ldrb	r2, [r7, #3]
 80039c8:	4611      	mov	r1, r2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f006 f823 	bl	8009a16 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	78fa      	ldrb	r2, [r7, #3]
 80039d6:	4611      	mov	r1, r2
 80039d8:	4618      	mov	r0, r3
 80039da:	f005 fa78 	bl	8008ece <USB_ReadChInterrupts>
 80039de:	4603      	mov	r3, r0
 80039e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e8:	d112      	bne.n	8003a10 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	78fa      	ldrb	r2, [r7, #3]
 80039f0:	4611      	mov	r1, r2
 80039f2:	4618      	mov	r0, r3
 80039f4:	f006 f80f 	bl	8009a16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a04:	461a      	mov	r2, r3
 8003a06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a0a:	6093      	str	r3, [r2, #8]
 8003a0c:	f000 bd75 	b.w	80044fa <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	78fa      	ldrb	r2, [r7, #3]
 8003a16:	4611      	mov	r1, r2
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f005 fa58 	bl	8008ece <USB_ReadChInterrupts>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	f040 8128 	bne.w	8003c7a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003a2a:	78fb      	ldrb	r3, [r7, #3]
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a36:	461a      	mov	r2, r3
 8003a38:	2320      	movs	r3, #32
 8003a3a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	1a9b      	subs	r3, r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	331b      	adds	r3, #27
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d119      	bne.n	8003a86 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003a52:	78fa      	ldrb	r2, [r7, #3]
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	4613      	mov	r3, r2
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	1a9b      	subs	r3, r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	331b      	adds	r3, #27
 8003a62:	2200      	movs	r2, #0
 8003a64:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003a66:	78fb      	ldrb	r3, [r7, #3]
 8003a68:	015a      	lsls	r2, r3, #5
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	78fa      	ldrb	r2, [r7, #3]
 8003a76:	0151      	lsls	r1, r2, #5
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	440a      	add	r2, r1
 8003a7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a84:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	799b      	ldrb	r3, [r3, #6]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d01b      	beq.n	8003ac6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	3330      	adds	r3, #48	; 0x30
 8003a9e:	6819      	ldr	r1, [r3, #0]
 8003aa0:	78fb      	ldrb	r3, [r7, #3]
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ab2:	78fa      	ldrb	r2, [r7, #3]
 8003ab4:	1ac9      	subs	r1, r1, r3
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	1a9b      	subs	r3, r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4403      	add	r3, r0
 8003ac2:	3338      	adds	r3, #56	; 0x38
 8003ac4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003ac6:	78fa      	ldrb	r2, [r7, #3]
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	1a9b      	subs	r3, r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	334d      	adds	r3, #77	; 0x4d
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003ada:	78fa      	ldrb	r2, [r7, #3]
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	3344      	adds	r3, #68	; 0x44
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003aee:	78fb      	ldrb	r3, [r7, #3]
 8003af0:	015a      	lsls	r2, r3, #5
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003afa:	461a      	mov	r2, r3
 8003afc:	2301      	movs	r3, #1
 8003afe:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b00:	78fa      	ldrb	r2, [r7, #3]
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	4613      	mov	r3, r2
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	1a9b      	subs	r3, r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	3326      	adds	r3, #38	; 0x26
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003b16:	78fa      	ldrb	r2, [r7, #3]
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	1a9b      	subs	r3, r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	440b      	add	r3, r1
 8003b24:	3326      	adds	r3, #38	; 0x26
 8003b26:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d110      	bne.n	8003b4e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	78fa      	ldrb	r2, [r7, #3]
 8003b32:	4611      	mov	r1, r2
 8003b34:	4618      	mov	r0, r3
 8003b36:	f005 ff6e 	bl	8009a16 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003b3a:	78fb      	ldrb	r3, [r7, #3]
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b46:	461a      	mov	r2, r3
 8003b48:	2310      	movs	r3, #16
 8003b4a:	6093      	str	r3, [r2, #8]
 8003b4c:	e03d      	b.n	8003bca <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003b4e:	78fa      	ldrb	r2, [r7, #3]
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	1a9b      	subs	r3, r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	3326      	adds	r3, #38	; 0x26
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d00a      	beq.n	8003b7a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003b64:	78fa      	ldrb	r2, [r7, #3]
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	3326      	adds	r3, #38	; 0x26
 8003b74:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d127      	bne.n	8003bca <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003b7a:	78fb      	ldrb	r3, [r7, #3]
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	78fa      	ldrb	r2, [r7, #3]
 8003b8a:	0151      	lsls	r1, r2, #5
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	440a      	add	r2, r1
 8003b90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b98:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003b9a:	78fa      	ldrb	r2, [r7, #3]
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	1a9b      	subs	r3, r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	334c      	adds	r3, #76	; 0x4c
 8003baa:	2201      	movs	r2, #1
 8003bac:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003bae:	78fa      	ldrb	r2, [r7, #3]
 8003bb0:	6879      	ldr	r1, [r7, #4]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	1a9b      	subs	r3, r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	334c      	adds	r3, #76	; 0x4c
 8003bbe:	781a      	ldrb	r2, [r3, #0]
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f008 fa8f 	bl	800c0e8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	799b      	ldrb	r3, [r3, #6]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d13b      	bne.n	8003c4a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003bd2:	78fa      	ldrb	r2, [r7, #3]
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	1a9b      	subs	r3, r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	440b      	add	r3, r1
 8003be0:	3338      	adds	r3, #56	; 0x38
 8003be2:	6819      	ldr	r1, [r3, #0]
 8003be4:	78fa      	ldrb	r2, [r7, #3]
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	4613      	mov	r3, r2
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	1a9b      	subs	r3, r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4403      	add	r3, r0
 8003bf2:	3328      	adds	r3, #40	; 0x28
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	440b      	add	r3, r1
 8003bf8:	1e59      	subs	r1, r3, #1
 8003bfa:	78fa      	ldrb	r2, [r7, #3]
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	1a9b      	subs	r3, r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4403      	add	r3, r0
 8003c08:	3328      	adds	r3, #40	; 0x28
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8470 	beq.w	80044fa <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003c1a:	78fa      	ldrb	r2, [r7, #3]
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	1a9b      	subs	r3, r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	440b      	add	r3, r1
 8003c28:	333c      	adds	r3, #60	; 0x3c
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	78fa      	ldrb	r2, [r7, #3]
 8003c2e:	f083 0301 	eor.w	r3, r3, #1
 8003c32:	b2d8      	uxtb	r0, r3
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	333c      	adds	r3, #60	; 0x3c
 8003c42:	4602      	mov	r2, r0
 8003c44:	701a      	strb	r2, [r3, #0]
 8003c46:	f000 bc58 	b.w	80044fa <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003c4a:	78fa      	ldrb	r2, [r7, #3]
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	333c      	adds	r3, #60	; 0x3c
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	78fa      	ldrb	r2, [r7, #3]
 8003c5e:	f083 0301 	eor.w	r3, r3, #1
 8003c62:	b2d8      	uxtb	r0, r3
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	333c      	adds	r3, #60	; 0x3c
 8003c72:	4602      	mov	r2, r0
 8003c74:	701a      	strb	r2, [r3, #0]
 8003c76:	f000 bc40 	b.w	80044fa <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	78fa      	ldrb	r2, [r7, #3]
 8003c80:	4611      	mov	r1, r2
 8003c82:	4618      	mov	r0, r3
 8003c84:	f005 f923 	bl	8008ece <USB_ReadChInterrupts>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d131      	bne.n	8003cf6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003c92:	78fb      	ldrb	r3, [r7, #3]
 8003c94:	015a      	lsls	r2, r3, #5
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	2320      	movs	r3, #32
 8003ca2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003ca4:	78fa      	ldrb	r2, [r7, #3]
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	1a9b      	subs	r3, r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	331a      	adds	r3, #26
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	f040 841f 	bne.w	80044fa <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003cbc:	78fa      	ldrb	r2, [r7, #3]
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	1a9b      	subs	r3, r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	331b      	adds	r3, #27
 8003ccc:	2201      	movs	r2, #1
 8003cce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003cd0:	78fa      	ldrb	r2, [r7, #3]
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	1a9b      	subs	r3, r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	334d      	adds	r3, #77	; 0x4d
 8003ce0:	2203      	movs	r2, #3
 8003ce2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	78fa      	ldrb	r2, [r7, #3]
 8003cea:	4611      	mov	r1, r2
 8003cec:	4618      	mov	r0, r3
 8003cee:	f005 fe92 	bl	8009a16 <USB_HC_Halt>
 8003cf2:	f000 bc02 	b.w	80044fa <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	78fa      	ldrb	r2, [r7, #3]
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f005 f8e5 	bl	8008ece <USB_ReadChInterrupts>
 8003d04:	4603      	mov	r3, r0
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	f040 8305 	bne.w	800431a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	2302      	movs	r3, #2
 8003d20:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003d22:	78fa      	ldrb	r2, [r7, #3]
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	1a9b      	subs	r3, r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	440b      	add	r3, r1
 8003d30:	334d      	adds	r3, #77	; 0x4d
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d114      	bne.n	8003d62 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d38:	78fa      	ldrb	r2, [r7, #3]
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	1a9b      	subs	r3, r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	334d      	adds	r3, #77	; 0x4d
 8003d48:	2202      	movs	r2, #2
 8003d4a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003d4c:	78fa      	ldrb	r2, [r7, #3]
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	4613      	mov	r3, r2
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	1a9b      	subs	r3, r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	334c      	adds	r3, #76	; 0x4c
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	701a      	strb	r2, [r3, #0]
 8003d60:	e2cc      	b.n	80042fc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003d62:	78fa      	ldrb	r2, [r7, #3]
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	1a9b      	subs	r3, r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	440b      	add	r3, r1
 8003d70:	334d      	adds	r3, #77	; 0x4d
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b06      	cmp	r3, #6
 8003d76:	d114      	bne.n	8003da2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d78:	78fa      	ldrb	r2, [r7, #3]
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	1a9b      	subs	r3, r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	334d      	adds	r3, #77	; 0x4d
 8003d88:	2202      	movs	r2, #2
 8003d8a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003d8c:	78fa      	ldrb	r2, [r7, #3]
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	334c      	adds	r3, #76	; 0x4c
 8003d9c:	2205      	movs	r2, #5
 8003d9e:	701a      	strb	r2, [r3, #0]
 8003da0:	e2ac      	b.n	80042fc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003da2:	78fa      	ldrb	r2, [r7, #3]
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	1a9b      	subs	r3, r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	334d      	adds	r3, #77	; 0x4d
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b07      	cmp	r3, #7
 8003db6:	d00b      	beq.n	8003dd0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003db8:	78fa      	ldrb	r2, [r7, #3]
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	1a9b      	subs	r3, r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	334d      	adds	r3, #77	; 0x4d
 8003dc8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003dca:	2b09      	cmp	r3, #9
 8003dcc:	f040 80a6 	bne.w	8003f1c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003dd0:	78fa      	ldrb	r2, [r7, #3]
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	1a9b      	subs	r3, r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	334d      	adds	r3, #77	; 0x4d
 8003de0:	2202      	movs	r2, #2
 8003de2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003de4:	78fa      	ldrb	r2, [r7, #3]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	1a9b      	subs	r3, r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	3344      	adds	r3, #68	; 0x44
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	1c59      	adds	r1, r3, #1
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	1a9b      	subs	r3, r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4403      	add	r3, r0
 8003e04:	3344      	adds	r3, #68	; 0x44
 8003e06:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e08:	78fa      	ldrb	r2, [r7, #3]
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	1a9b      	subs	r3, r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	3344      	adds	r3, #68	; 0x44
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d943      	bls.n	8003ea6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003e1e:	78fa      	ldrb	r2, [r7, #3]
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	1a9b      	subs	r3, r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	3344      	adds	r3, #68	; 0x44
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003e32:	78fa      	ldrb	r2, [r7, #3]
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	4613      	mov	r3, r2
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	1a9b      	subs	r3, r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	440b      	add	r3, r1
 8003e40:	331a      	adds	r3, #26
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d123      	bne.n	8003e90 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003e48:	78fa      	ldrb	r2, [r7, #3]
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	331b      	adds	r3, #27
 8003e58:	2200      	movs	r2, #0
 8003e5a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003e5c:	78fa      	ldrb	r2, [r7, #3]
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	331c      	adds	r3, #28
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	78fa      	ldrb	r2, [r7, #3]
 8003e80:	0151      	lsls	r1, r2, #5
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	440a      	add	r2, r1
 8003e86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e8e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003e90:	78fa      	ldrb	r2, [r7, #3]
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	334c      	adds	r3, #76	; 0x4c
 8003ea0:	2204      	movs	r2, #4
 8003ea2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ea4:	e229      	b.n	80042fa <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ea6:	78fa      	ldrb	r2, [r7, #3]
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	334c      	adds	r3, #76	; 0x4c
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003eba:	78fa      	ldrb	r2, [r7, #3]
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	3326      	adds	r3, #38	; 0x26
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00b      	beq.n	8003ee8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ed0:	78fa      	ldrb	r2, [r7, #3]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	3326      	adds	r3, #38	; 0x26
 8003ee0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	f040 8209 	bne.w	80042fa <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ee8:	78fb      	ldrb	r3, [r7, #3]
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003efe:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f06:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f08:	78fb      	ldrb	r3, [r7, #3]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f14:	461a      	mov	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f1a:	e1ee      	b.n	80042fa <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003f1c:	78fa      	ldrb	r2, [r7, #3]
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	4613      	mov	r3, r2
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	1a9b      	subs	r3, r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	334d      	adds	r3, #77	; 0x4d
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b05      	cmp	r3, #5
 8003f30:	f040 80c8 	bne.w	80040c4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f34:	78fa      	ldrb	r2, [r7, #3]
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	1a9b      	subs	r3, r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	334d      	adds	r3, #77	; 0x4d
 8003f44:	2202      	movs	r2, #2
 8003f46:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003f48:	78fa      	ldrb	r2, [r7, #3]
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	1a9b      	subs	r3, r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	331b      	adds	r3, #27
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	f040 81ce 	bne.w	80042fc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003f60:	78fa      	ldrb	r2, [r7, #3]
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	3326      	adds	r3, #38	; 0x26
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b03      	cmp	r3, #3
 8003f74:	d16b      	bne.n	800404e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003f76:	78fa      	ldrb	r2, [r7, #3]
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	1a9b      	subs	r3, r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	3348      	adds	r3, #72	; 0x48
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	1c59      	adds	r1, r3, #1
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4403      	add	r3, r0
 8003f96:	3348      	adds	r3, #72	; 0x48
 8003f98:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003f9a:	78fa      	ldrb	r2, [r7, #3]
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	1a9b      	subs	r3, r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	3348      	adds	r3, #72	; 0x48
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d943      	bls.n	8004038 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003fb0:	78fa      	ldrb	r2, [r7, #3]
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	1a9b      	subs	r3, r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	3348      	adds	r3, #72	; 0x48
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003fc4:	78fa      	ldrb	r2, [r7, #3]
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	1a9b      	subs	r3, r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	331b      	adds	r3, #27
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003fd8:	78fa      	ldrb	r2, [r7, #3]
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	1a9b      	subs	r3, r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	3344      	adds	r3, #68	; 0x44
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d809      	bhi.n	8004002 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003fee:	78fa      	ldrb	r2, [r7, #3]
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	1a9b      	subs	r3, r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	331c      	adds	r3, #28
 8003ffe:	2201      	movs	r2, #1
 8004000:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004002:	78fb      	ldrb	r3, [r7, #3]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	4413      	add	r3, r2
 800400a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	78fa      	ldrb	r2, [r7, #3]
 8004012:	0151      	lsls	r1, r2, #5
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	440a      	add	r2, r1
 8004018:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800401c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004020:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004022:	78fa      	ldrb	r2, [r7, #3]
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	1a9b      	subs	r3, r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	334c      	adds	r3, #76	; 0x4c
 8004032:	2204      	movs	r2, #4
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	e014      	b.n	8004062 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004038:	78fa      	ldrb	r2, [r7, #3]
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	4613      	mov	r3, r2
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	1a9b      	subs	r3, r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	440b      	add	r3, r1
 8004046:	334c      	adds	r3, #76	; 0x4c
 8004048:	2202      	movs	r2, #2
 800404a:	701a      	strb	r2, [r3, #0]
 800404c:	e009      	b.n	8004062 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800404e:	78fa      	ldrb	r2, [r7, #3]
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	4613      	mov	r3, r2
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	1a9b      	subs	r3, r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	440b      	add	r3, r1
 800405c:	334c      	adds	r3, #76	; 0x4c
 800405e:	2202      	movs	r2, #2
 8004060:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004062:	78fa      	ldrb	r2, [r7, #3]
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	4613      	mov	r3, r2
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	1a9b      	subs	r3, r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	440b      	add	r3, r1
 8004070:	3326      	adds	r3, #38	; 0x26
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00b      	beq.n	8004090 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004078:	78fa      	ldrb	r2, [r7, #3]
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	4613      	mov	r3, r2
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	1a9b      	subs	r3, r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	3326      	adds	r3, #38	; 0x26
 8004088:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800408a:	2b02      	cmp	r3, #2
 800408c:	f040 8136 	bne.w	80042fc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	4413      	add	r3, r2
 8004098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040a6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040ae:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80040b0:	78fb      	ldrb	r3, [r7, #3]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040bc:	461a      	mov	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e11b      	b.n	80042fc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80040c4:	78fa      	ldrb	r2, [r7, #3]
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	4613      	mov	r3, r2
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	334d      	adds	r3, #77	; 0x4d
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	f040 8081 	bne.w	80041de <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040dc:	78fa      	ldrb	r2, [r7, #3]
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	4613      	mov	r3, r2
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	1a9b      	subs	r3, r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	334d      	adds	r3, #77	; 0x4d
 80040ec:	2202      	movs	r2, #2
 80040ee:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80040f0:	78fa      	ldrb	r2, [r7, #3]
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	4613      	mov	r3, r2
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	331b      	adds	r3, #27
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b01      	cmp	r3, #1
 8004104:	f040 80fa 	bne.w	80042fc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004108:	78fa      	ldrb	r2, [r7, #3]
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	4613      	mov	r3, r2
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	1a9b      	subs	r3, r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	334c      	adds	r3, #76	; 0x4c
 8004118:	2202      	movs	r2, #2
 800411a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	4413      	add	r3, r2
 8004124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	78fa      	ldrb	r2, [r7, #3]
 800412c:	0151      	lsls	r1, r2, #5
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	440a      	add	r2, r1
 8004132:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800413a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4413      	add	r3, r2
 8004144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	78fa      	ldrb	r2, [r7, #3]
 800414c:	0151      	lsls	r1, r2, #5
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	440a      	add	r2, r1
 8004152:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800415a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	4413      	add	r3, r2
 8004164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	78fa      	ldrb	r2, [r7, #3]
 800416c:	0151      	lsls	r1, r2, #5
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	440a      	add	r2, r1
 8004172:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004176:	f023 0320 	bic.w	r3, r3, #32
 800417a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800417c:	78fa      	ldrb	r2, [r7, #3]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	1a9b      	subs	r3, r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	3326      	adds	r3, #38	; 0x26
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00b      	beq.n	80041aa <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004192:	78fa      	ldrb	r2, [r7, #3]
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	1a9b      	subs	r3, r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	440b      	add	r3, r1
 80041a0:	3326      	adds	r3, #38	; 0x26
 80041a2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	f040 80a9 	bne.w	80042fc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80041aa:	78fb      	ldrb	r3, [r7, #3]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041c0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041c8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80041ca:	78fb      	ldrb	r3, [r7, #3]
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d6:	461a      	mov	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6013      	str	r3, [r2, #0]
 80041dc:	e08e      	b.n	80042fc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80041de:	78fa      	ldrb	r2, [r7, #3]
 80041e0:	6879      	ldr	r1, [r7, #4]
 80041e2:	4613      	mov	r3, r2
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	1a9b      	subs	r3, r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	440b      	add	r3, r1
 80041ec:	334d      	adds	r3, #77	; 0x4d
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d143      	bne.n	800427c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041f4:	78fa      	ldrb	r2, [r7, #3]
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	4613      	mov	r3, r2
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	1a9b      	subs	r3, r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	440b      	add	r3, r1
 8004202:	334d      	adds	r3, #77	; 0x4d
 8004204:	2202      	movs	r2, #2
 8004206:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004208:	78fa      	ldrb	r2, [r7, #3]
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	4613      	mov	r3, r2
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	1a9b      	subs	r3, r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	440b      	add	r3, r1
 8004216:	334c      	adds	r3, #76	; 0x4c
 8004218:	2202      	movs	r2, #2
 800421a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	4613      	mov	r3, r2
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	1a9b      	subs	r3, r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	3326      	adds	r3, #38	; 0x26
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004232:	78fa      	ldrb	r2, [r7, #3]
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	4613      	mov	r3, r2
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	1a9b      	subs	r3, r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	440b      	add	r3, r1
 8004240:	3326      	adds	r3, #38	; 0x26
 8004242:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004244:	2b02      	cmp	r3, #2
 8004246:	d159      	bne.n	80042fc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	4413      	add	r3, r2
 8004250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800425e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004266:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004268:	78fb      	ldrb	r3, [r7, #3]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	4413      	add	r3, r2
 8004270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004274:	461a      	mov	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	e03f      	b.n	80042fc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800427c:	78fa      	ldrb	r2, [r7, #3]
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	4613      	mov	r3, r2
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	1a9b      	subs	r3, r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	440b      	add	r3, r1
 800428a:	334d      	adds	r3, #77	; 0x4d
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b08      	cmp	r3, #8
 8004290:	d126      	bne.n	80042e0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004292:	78fa      	ldrb	r2, [r7, #3]
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	4613      	mov	r3, r2
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	1a9b      	subs	r3, r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	440b      	add	r3, r1
 80042a0:	334d      	adds	r3, #77	; 0x4d
 80042a2:	2202      	movs	r2, #2
 80042a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80042a6:	78fa      	ldrb	r2, [r7, #3]
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	1a9b      	subs	r3, r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	440b      	add	r3, r1
 80042b4:	3344      	adds	r3, #68	; 0x44
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	1c59      	adds	r1, r3, #1
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	4613      	mov	r3, r2
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	1a9b      	subs	r3, r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4403      	add	r3, r0
 80042c6:	3344      	adds	r3, #68	; 0x44
 80042c8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80042ca:	78fa      	ldrb	r2, [r7, #3]
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	1a9b      	subs	r3, r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	334c      	adds	r3, #76	; 0x4c
 80042da:	2204      	movs	r2, #4
 80042dc:	701a      	strb	r2, [r3, #0]
 80042de:	e00d      	b.n	80042fc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80042e0:	78fa      	ldrb	r2, [r7, #3]
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	4613      	mov	r3, r2
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	1a9b      	subs	r3, r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	334d      	adds	r3, #77	; 0x4d
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	f000 8100 	beq.w	80044f8 <HCD_HC_IN_IRQHandler+0xcca>
 80042f8:	e000      	b.n	80042fc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80042fa:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80042fc:	78fa      	ldrb	r2, [r7, #3]
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	4613      	mov	r3, r2
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	1a9b      	subs	r3, r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	334c      	adds	r3, #76	; 0x4c
 800430c:	781a      	ldrb	r2, [r3, #0]
 800430e:	78fb      	ldrb	r3, [r7, #3]
 8004310:	4619      	mov	r1, r3
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f007 fee8 	bl	800c0e8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004318:	e0ef      	b.n	80044fa <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	78fa      	ldrb	r2, [r7, #3]
 8004320:	4611      	mov	r1, r2
 8004322:	4618      	mov	r0, r3
 8004324:	f004 fdd3 	bl	8008ece <USB_ReadChInterrupts>
 8004328:	4603      	mov	r3, r0
 800432a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432e:	2b40      	cmp	r3, #64	; 0x40
 8004330:	d12f      	bne.n	8004392 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004332:	78fb      	ldrb	r3, [r7, #3]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	4413      	add	r3, r2
 800433a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433e:	461a      	mov	r2, r3
 8004340:	2340      	movs	r3, #64	; 0x40
 8004342:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004344:	78fa      	ldrb	r2, [r7, #3]
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	4613      	mov	r3, r2
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	1a9b      	subs	r3, r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	334d      	adds	r3, #77	; 0x4d
 8004354:	2205      	movs	r2, #5
 8004356:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004358:	78fa      	ldrb	r2, [r7, #3]
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	4613      	mov	r3, r2
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	1a9b      	subs	r3, r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	440b      	add	r3, r1
 8004366:	331a      	adds	r3, #26
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d109      	bne.n	8004382 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800436e:	78fa      	ldrb	r2, [r7, #3]
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	440b      	add	r3, r1
 800437c:	3344      	adds	r3, #68	; 0x44
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	78fa      	ldrb	r2, [r7, #3]
 8004388:	4611      	mov	r1, r2
 800438a:	4618      	mov	r0, r3
 800438c:	f005 fb43 	bl	8009a16 <USB_HC_Halt>
 8004390:	e0b3      	b.n	80044fa <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	78fa      	ldrb	r2, [r7, #3]
 8004398:	4611      	mov	r1, r2
 800439a:	4618      	mov	r0, r3
 800439c:	f004 fd97 	bl	8008ece <USB_ReadChInterrupts>
 80043a0:	4603      	mov	r3, r0
 80043a2:	f003 0310 	and.w	r3, r3, #16
 80043a6:	2b10      	cmp	r3, #16
 80043a8:	f040 80a7 	bne.w	80044fa <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80043ac:	78fa      	ldrb	r2, [r7, #3]
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	1a9b      	subs	r3, r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	3326      	adds	r3, #38	; 0x26
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	2b03      	cmp	r3, #3
 80043c0:	d11b      	bne.n	80043fa <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80043c2:	78fa      	ldrb	r2, [r7, #3]
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	4613      	mov	r3, r2
 80043c8:	011b      	lsls	r3, r3, #4
 80043ca:	1a9b      	subs	r3, r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	440b      	add	r3, r1
 80043d0:	3344      	adds	r3, #68	; 0x44
 80043d2:	2200      	movs	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80043d6:	78fa      	ldrb	r2, [r7, #3]
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	4613      	mov	r3, r2
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	1a9b      	subs	r3, r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	334d      	adds	r3, #77	; 0x4d
 80043e6:	2204      	movs	r2, #4
 80043e8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	78fa      	ldrb	r2, [r7, #3]
 80043f0:	4611      	mov	r1, r2
 80043f2:	4618      	mov	r0, r3
 80043f4:	f005 fb0f 	bl	8009a16 <USB_HC_Halt>
 80043f8:	e03f      	b.n	800447a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043fa:	78fa      	ldrb	r2, [r7, #3]
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	440b      	add	r3, r1
 8004408:	3326      	adds	r3, #38	; 0x26
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004410:	78fa      	ldrb	r2, [r7, #3]
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	4613      	mov	r3, r2
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	3326      	adds	r3, #38	; 0x26
 8004420:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004422:	2b02      	cmp	r3, #2
 8004424:	d129      	bne.n	800447a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004426:	78fa      	ldrb	r2, [r7, #3]
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	4613      	mov	r3, r2
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	1a9b      	subs	r3, r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	440b      	add	r3, r1
 8004434:	3344      	adds	r3, #68	; 0x44
 8004436:	2200      	movs	r2, #0
 8004438:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	799b      	ldrb	r3, [r3, #6]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HCD_HC_IN_IRQHandler+0xc2a>
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	4613      	mov	r3, r2
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	331b      	adds	r3, #27
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d110      	bne.n	800447a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004458:	78fa      	ldrb	r2, [r7, #3]
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	4613      	mov	r3, r2
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	1a9b      	subs	r3, r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	334d      	adds	r3, #77	; 0x4d
 8004468:	2204      	movs	r2, #4
 800446a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	78fa      	ldrb	r2, [r7, #3]
 8004472:	4611      	mov	r1, r2
 8004474:	4618      	mov	r0, r3
 8004476:	f005 face 	bl	8009a16 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800447a:	78fa      	ldrb	r2, [r7, #3]
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	1a9b      	subs	r3, r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	440b      	add	r3, r1
 8004488:	331b      	adds	r3, #27
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d129      	bne.n	80044e4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004490:	78fa      	ldrb	r2, [r7, #3]
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	4613      	mov	r3, r2
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	1a9b      	subs	r3, r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	331b      	adds	r3, #27
 80044a0:	2200      	movs	r2, #0
 80044a2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	78fa      	ldrb	r2, [r7, #3]
 80044b4:	0151      	lsls	r1, r2, #5
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	440a      	add	r2, r1
 80044ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	78fa      	ldrb	r2, [r7, #3]
 80044d4:	0151      	lsls	r1, r2, #5
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	440a      	add	r2, r1
 80044da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044de:	f043 0320 	orr.w	r3, r3, #32
 80044e2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80044e4:	78fb      	ldrb	r3, [r7, #3]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f0:	461a      	mov	r2, r3
 80044f2:	2310      	movs	r3, #16
 80044f4:	6093      	str	r3, [r2, #8]
 80044f6:	e000      	b.n	80044fa <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80044f8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	460b      	mov	r3, r1
 800450a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	78fa      	ldrb	r2, [r7, #3]
 800451c:	4611      	mov	r1, r2
 800451e:	4618      	mov	r0, r3
 8004520:	f004 fcd5 	bl	8008ece <USB_ReadChInterrupts>
 8004524:	4603      	mov	r3, r0
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b04      	cmp	r3, #4
 800452c:	d11b      	bne.n	8004566 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800452e:	78fb      	ldrb	r3, [r7, #3]
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	4413      	add	r3, r2
 8004536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800453a:	461a      	mov	r2, r3
 800453c:	2304      	movs	r3, #4
 800453e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004540:	78fa      	ldrb	r2, [r7, #3]
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	1a9b      	subs	r3, r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	334d      	adds	r3, #77	; 0x4d
 8004550:	2207      	movs	r2, #7
 8004552:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	78fa      	ldrb	r2, [r7, #3]
 800455a:	4611      	mov	r1, r2
 800455c:	4618      	mov	r0, r3
 800455e:	f005 fa5a 	bl	8009a16 <USB_HC_Halt>
 8004562:	f000 bc6f 	b.w	8004e44 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	78fa      	ldrb	r2, [r7, #3]
 800456c:	4611      	mov	r1, r2
 800456e:	4618      	mov	r0, r3
 8004570:	f004 fcad 	bl	8008ece <USB_ReadChInterrupts>
 8004574:	4603      	mov	r3, r0
 8004576:	f003 0320 	and.w	r3, r3, #32
 800457a:	2b20      	cmp	r3, #32
 800457c:	f040 8082 	bne.w	8004684 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	015a      	lsls	r2, r3, #5
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	4413      	add	r3, r2
 8004588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800458c:	461a      	mov	r2, r3
 800458e:	2320      	movs	r3, #32
 8004590:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004592:	78fa      	ldrb	r2, [r7, #3]
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	4613      	mov	r3, r2
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	1a9b      	subs	r3, r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	440b      	add	r3, r1
 80045a0:	3319      	adds	r3, #25
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d124      	bne.n	80045f2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80045a8:	78fa      	ldrb	r2, [r7, #3]
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	4613      	mov	r3, r2
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	1a9b      	subs	r3, r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	3319      	adds	r3, #25
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80045bc:	78fa      	ldrb	r2, [r7, #3]
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	4613      	mov	r3, r2
 80045c2:	011b      	lsls	r3, r3, #4
 80045c4:	1a9b      	subs	r3, r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	334c      	adds	r3, #76	; 0x4c
 80045cc:	2202      	movs	r2, #2
 80045ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80045d0:	78fa      	ldrb	r2, [r7, #3]
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	1a9b      	subs	r3, r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	334d      	adds	r3, #77	; 0x4d
 80045e0:	2203      	movs	r2, #3
 80045e2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	78fa      	ldrb	r2, [r7, #3]
 80045ea:	4611      	mov	r1, r2
 80045ec:	4618      	mov	r0, r3
 80045ee:	f005 fa12 	bl	8009a16 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80045f2:	78fa      	ldrb	r2, [r7, #3]
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	440b      	add	r3, r1
 8004600:	331a      	adds	r3, #26
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b01      	cmp	r3, #1
 8004606:	f040 841d 	bne.w	8004e44 <HCD_HC_OUT_IRQHandler+0x944>
 800460a:	78fa      	ldrb	r2, [r7, #3]
 800460c:	6879      	ldr	r1, [r7, #4]
 800460e:	4613      	mov	r3, r2
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	1a9b      	subs	r3, r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	440b      	add	r3, r1
 8004618:	331b      	adds	r3, #27
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	f040 8411 	bne.w	8004e44 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004622:	78fa      	ldrb	r2, [r7, #3]
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	4613      	mov	r3, r2
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	1a9b      	subs	r3, r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	440b      	add	r3, r1
 8004630:	3326      	adds	r3, #38	; 0x26
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d009      	beq.n	800464c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004638:	78fa      	ldrb	r2, [r7, #3]
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	4613      	mov	r3, r2
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	1a9b      	subs	r3, r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	331b      	adds	r3, #27
 8004648:	2201      	movs	r2, #1
 800464a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800464c:	78fa      	ldrb	r2, [r7, #3]
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	4613      	mov	r3, r2
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	1a9b      	subs	r3, r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	334d      	adds	r3, #77	; 0x4d
 800465c:	2203      	movs	r2, #3
 800465e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	78fa      	ldrb	r2, [r7, #3]
 8004666:	4611      	mov	r1, r2
 8004668:	4618      	mov	r0, r3
 800466a:	f005 f9d4 	bl	8009a16 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800466e:	78fa      	ldrb	r2, [r7, #3]
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	4613      	mov	r3, r2
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	1a9b      	subs	r3, r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	440b      	add	r3, r1
 800467c:	3344      	adds	r3, #68	; 0x44
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	e3df      	b.n	8004e44 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	78fa      	ldrb	r2, [r7, #3]
 800468a:	4611      	mov	r1, r2
 800468c:	4618      	mov	r0, r3
 800468e:	f004 fc1e 	bl	8008ece <USB_ReadChInterrupts>
 8004692:	4603      	mov	r3, r0
 8004694:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800469c:	d111      	bne.n	80046c2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800469e:	78fb      	ldrb	r3, [r7, #3]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046aa:	461a      	mov	r2, r3
 80046ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046b0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	78fa      	ldrb	r2, [r7, #3]
 80046b8:	4611      	mov	r1, r2
 80046ba:	4618      	mov	r0, r3
 80046bc:	f005 f9ab 	bl	8009a16 <USB_HC_Halt>
 80046c0:	e3c0      	b.n	8004e44 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	78fa      	ldrb	r2, [r7, #3]
 80046c8:	4611      	mov	r1, r2
 80046ca:	4618      	mov	r0, r3
 80046cc:	f004 fbff 	bl	8008ece <USB_ReadChInterrupts>
 80046d0:	4603      	mov	r3, r0
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d168      	bne.n	80047ac <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80046da:	78fa      	ldrb	r2, [r7, #3]
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	4613      	mov	r3, r2
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	1a9b      	subs	r3, r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	440b      	add	r3, r1
 80046e8:	3344      	adds	r3, #68	; 0x44
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	78fa      	ldrb	r2, [r7, #3]
 80046f4:	4611      	mov	r1, r2
 80046f6:	4618      	mov	r0, r3
 80046f8:	f004 fbe9 	bl	8008ece <USB_ReadChInterrupts>
 80046fc:	4603      	mov	r3, r0
 80046fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004702:	2b40      	cmp	r3, #64	; 0x40
 8004704:	d112      	bne.n	800472c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004706:	78fa      	ldrb	r2, [r7, #3]
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	4613      	mov	r3, r2
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	1a9b      	subs	r3, r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	440b      	add	r3, r1
 8004714:	3319      	adds	r3, #25
 8004716:	2201      	movs	r2, #1
 8004718:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800471a:	78fb      	ldrb	r3, [r7, #3]
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	4413      	add	r3, r2
 8004722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004726:	461a      	mov	r2, r3
 8004728:	2340      	movs	r3, #64	; 0x40
 800472a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800472c:	78fa      	ldrb	r2, [r7, #3]
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	4613      	mov	r3, r2
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	1a9b      	subs	r3, r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	331b      	adds	r3, #27
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d019      	beq.n	8004776 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004742:	78fa      	ldrb	r2, [r7, #3]
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	4613      	mov	r3, r2
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	1a9b      	subs	r3, r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	440b      	add	r3, r1
 8004750:	331b      	adds	r3, #27
 8004752:	2200      	movs	r2, #0
 8004754:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004756:	78fb      	ldrb	r3, [r7, #3]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	4413      	add	r3, r2
 800475e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	78fa      	ldrb	r2, [r7, #3]
 8004766:	0151      	lsls	r1, r2, #5
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	440a      	add	r2, r1
 800476c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004774:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004776:	78fb      	ldrb	r3, [r7, #3]
 8004778:	015a      	lsls	r2, r3, #5
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	4413      	add	r3, r2
 800477e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004782:	461a      	mov	r2, r3
 8004784:	2301      	movs	r3, #1
 8004786:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004788:	78fa      	ldrb	r2, [r7, #3]
 800478a:	6879      	ldr	r1, [r7, #4]
 800478c:	4613      	mov	r3, r2
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	334d      	adds	r3, #77	; 0x4d
 8004798:	2201      	movs	r2, #1
 800479a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	78fa      	ldrb	r2, [r7, #3]
 80047a2:	4611      	mov	r1, r2
 80047a4:	4618      	mov	r0, r3
 80047a6:	f005 f936 	bl	8009a16 <USB_HC_Halt>
 80047aa:	e34b      	b.n	8004e44 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	78fa      	ldrb	r2, [r7, #3]
 80047b2:	4611      	mov	r1, r2
 80047b4:	4618      	mov	r0, r3
 80047b6:	f004 fb8a 	bl	8008ece <USB_ReadChInterrupts>
 80047ba:	4603      	mov	r3, r0
 80047bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c0:	2b40      	cmp	r3, #64	; 0x40
 80047c2:	d139      	bne.n	8004838 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80047c4:	78fa      	ldrb	r2, [r7, #3]
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	4613      	mov	r3, r2
 80047ca:	011b      	lsls	r3, r3, #4
 80047cc:	1a9b      	subs	r3, r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	440b      	add	r3, r1
 80047d2:	334d      	adds	r3, #77	; 0x4d
 80047d4:	2205      	movs	r2, #5
 80047d6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80047d8:	78fa      	ldrb	r2, [r7, #3]
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	4613      	mov	r3, r2
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	1a9b      	subs	r3, r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	440b      	add	r3, r1
 80047e6:	331a      	adds	r3, #26
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d109      	bne.n	8004802 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80047ee:	78fa      	ldrb	r2, [r7, #3]
 80047f0:	6879      	ldr	r1, [r7, #4]
 80047f2:	4613      	mov	r3, r2
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	1a9b      	subs	r3, r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	440b      	add	r3, r1
 80047fc:	3319      	adds	r3, #25
 80047fe:	2201      	movs	r2, #1
 8004800:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004802:	78fa      	ldrb	r2, [r7, #3]
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	4613      	mov	r3, r2
 8004808:	011b      	lsls	r3, r3, #4
 800480a:	1a9b      	subs	r3, r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	440b      	add	r3, r1
 8004810:	3344      	adds	r3, #68	; 0x44
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	78fa      	ldrb	r2, [r7, #3]
 800481c:	4611      	mov	r1, r2
 800481e:	4618      	mov	r0, r3
 8004820:	f005 f8f9 	bl	8009a16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	4413      	add	r3, r2
 800482c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004830:	461a      	mov	r2, r3
 8004832:	2340      	movs	r3, #64	; 0x40
 8004834:	6093      	str	r3, [r2, #8]
 8004836:	e305      	b.n	8004e44 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	78fa      	ldrb	r2, [r7, #3]
 800483e:	4611      	mov	r1, r2
 8004840:	4618      	mov	r0, r3
 8004842:	f004 fb44 	bl	8008ece <USB_ReadChInterrupts>
 8004846:	4603      	mov	r3, r0
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b08      	cmp	r3, #8
 800484e:	d11a      	bne.n	8004886 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004850:	78fb      	ldrb	r3, [r7, #3]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	4413      	add	r3, r2
 8004858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800485c:	461a      	mov	r2, r3
 800485e:	2308      	movs	r3, #8
 8004860:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004862:	78fa      	ldrb	r2, [r7, #3]
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	4613      	mov	r3, r2
 8004868:	011b      	lsls	r3, r3, #4
 800486a:	1a9b      	subs	r3, r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	440b      	add	r3, r1
 8004870:	334d      	adds	r3, #77	; 0x4d
 8004872:	2206      	movs	r2, #6
 8004874:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	78fa      	ldrb	r2, [r7, #3]
 800487c:	4611      	mov	r1, r2
 800487e:	4618      	mov	r0, r3
 8004880:	f005 f8c9 	bl	8009a16 <USB_HC_Halt>
 8004884:	e2de      	b.n	8004e44 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	78fa      	ldrb	r2, [r7, #3]
 800488c:	4611      	mov	r1, r2
 800488e:	4618      	mov	r0, r3
 8004890:	f004 fb1d 	bl	8008ece <USB_ReadChInterrupts>
 8004894:	4603      	mov	r3, r0
 8004896:	f003 0310 	and.w	r3, r3, #16
 800489a:	2b10      	cmp	r3, #16
 800489c:	d144      	bne.n	8004928 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800489e:	78fa      	ldrb	r2, [r7, #3]
 80048a0:	6879      	ldr	r1, [r7, #4]
 80048a2:	4613      	mov	r3, r2
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	1a9b      	subs	r3, r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	440b      	add	r3, r1
 80048ac:	3344      	adds	r3, #68	; 0x44
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80048b2:	78fa      	ldrb	r2, [r7, #3]
 80048b4:	6879      	ldr	r1, [r7, #4]
 80048b6:	4613      	mov	r3, r2
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	1a9b      	subs	r3, r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	440b      	add	r3, r1
 80048c0:	334d      	adds	r3, #77	; 0x4d
 80048c2:	2204      	movs	r2, #4
 80048c4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80048c6:	78fa      	ldrb	r2, [r7, #3]
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	4613      	mov	r3, r2
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	1a9b      	subs	r3, r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	3319      	adds	r3, #25
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d114      	bne.n	8004906 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80048dc:	78fa      	ldrb	r2, [r7, #3]
 80048de:	6879      	ldr	r1, [r7, #4]
 80048e0:	4613      	mov	r3, r2
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	1a9b      	subs	r3, r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	440b      	add	r3, r1
 80048ea:	3318      	adds	r3, #24
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d109      	bne.n	8004906 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80048f2:	78fa      	ldrb	r2, [r7, #3]
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	4613      	mov	r3, r2
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	1a9b      	subs	r3, r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	440b      	add	r3, r1
 8004900:	3319      	adds	r3, #25
 8004902:	2201      	movs	r2, #1
 8004904:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	78fa      	ldrb	r2, [r7, #3]
 800490c:	4611      	mov	r1, r2
 800490e:	4618      	mov	r0, r3
 8004910:	f005 f881 	bl	8009a16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004914:	78fb      	ldrb	r3, [r7, #3]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	4413      	add	r3, r2
 800491c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004920:	461a      	mov	r2, r3
 8004922:	2310      	movs	r3, #16
 8004924:	6093      	str	r3, [r2, #8]
 8004926:	e28d      	b.n	8004e44 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	78fa      	ldrb	r2, [r7, #3]
 800492e:	4611      	mov	r1, r2
 8004930:	4618      	mov	r0, r3
 8004932:	f004 facc 	bl	8008ece <USB_ReadChInterrupts>
 8004936:	4603      	mov	r3, r0
 8004938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493c:	2b80      	cmp	r3, #128	; 0x80
 800493e:	d169      	bne.n	8004a14 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	799b      	ldrb	r3, [r3, #6]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d111      	bne.n	800496c <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004948:	78fa      	ldrb	r2, [r7, #3]
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	4613      	mov	r3, r2
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	1a9b      	subs	r3, r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	440b      	add	r3, r1
 8004956:	334d      	adds	r3, #77	; 0x4d
 8004958:	2207      	movs	r2, #7
 800495a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	78fa      	ldrb	r2, [r7, #3]
 8004962:	4611      	mov	r1, r2
 8004964:	4618      	mov	r0, r3
 8004966:	f005 f856 	bl	8009a16 <USB_HC_Halt>
 800496a:	e049      	b.n	8004a00 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800496c:	78fa      	ldrb	r2, [r7, #3]
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	4613      	mov	r3, r2
 8004972:	011b      	lsls	r3, r3, #4
 8004974:	1a9b      	subs	r3, r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	440b      	add	r3, r1
 800497a:	3344      	adds	r3, #68	; 0x44
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	1c59      	adds	r1, r3, #1
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	1a9b      	subs	r3, r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4403      	add	r3, r0
 800498c:	3344      	adds	r3, #68	; 0x44
 800498e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004990:	78fa      	ldrb	r2, [r7, #3]
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	4613      	mov	r3, r2
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	1a9b      	subs	r3, r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	3344      	adds	r3, #68	; 0x44
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d922      	bls.n	80049ec <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80049a6:	78fa      	ldrb	r2, [r7, #3]
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	4613      	mov	r3, r2
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	1a9b      	subs	r3, r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	440b      	add	r3, r1
 80049b4:	3344      	adds	r3, #68	; 0x44
 80049b6:	2200      	movs	r2, #0
 80049b8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80049ba:	78fa      	ldrb	r2, [r7, #3]
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	4613      	mov	r3, r2
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	334c      	adds	r3, #76	; 0x4c
 80049ca:	2204      	movs	r2, #4
 80049cc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80049ce:	78fa      	ldrb	r2, [r7, #3]
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	4613      	mov	r3, r2
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	1a9b      	subs	r3, r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	440b      	add	r3, r1
 80049dc:	334c      	adds	r3, #76	; 0x4c
 80049de:	781a      	ldrb	r2, [r3, #0]
 80049e0:	78fb      	ldrb	r3, [r7, #3]
 80049e2:	4619      	mov	r1, r3
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f007 fb7f 	bl	800c0e8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80049ea:	e009      	b.n	8004a00 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80049ec:	78fa      	ldrb	r2, [r7, #3]
 80049ee:	6879      	ldr	r1, [r7, #4]
 80049f0:	4613      	mov	r3, r2
 80049f2:	011b      	lsls	r3, r3, #4
 80049f4:	1a9b      	subs	r3, r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	440b      	add	r3, r1
 80049fa:	334c      	adds	r3, #76	; 0x4c
 80049fc:	2202      	movs	r2, #2
 80049fe:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004a00:	78fb      	ldrb	r3, [r7, #3]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	2380      	movs	r3, #128	; 0x80
 8004a10:	6093      	str	r3, [r2, #8]
 8004a12:	e217      	b.n	8004e44 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	78fa      	ldrb	r2, [r7, #3]
 8004a1a:	4611      	mov	r1, r2
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f004 fa56 	bl	8008ece <USB_ReadChInterrupts>
 8004a22:	4603      	mov	r3, r0
 8004a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2c:	d11b      	bne.n	8004a66 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004a2e:	78fa      	ldrb	r2, [r7, #3]
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	4613      	mov	r3, r2
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	334d      	adds	r3, #77	; 0x4d
 8004a3e:	2209      	movs	r2, #9
 8004a40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	78fa      	ldrb	r2, [r7, #3]
 8004a48:	4611      	mov	r1, r2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f004 ffe3 	bl	8009a16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004a50:	78fb      	ldrb	r3, [r7, #3]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a62:	6093      	str	r3, [r2, #8]
 8004a64:	e1ee      	b.n	8004e44 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	78fa      	ldrb	r2, [r7, #3]
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f004 fa2d 	bl	8008ece <USB_ReadChInterrupts>
 8004a74:	4603      	mov	r3, r0
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	f040 81df 	bne.w	8004e3e <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004a80:	78fb      	ldrb	r3, [r7, #3]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	2302      	movs	r3, #2
 8004a90:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004a92:	78fa      	ldrb	r2, [r7, #3]
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	334d      	adds	r3, #77	; 0x4d
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	f040 8093 	bne.w	8004bd0 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004aaa:	78fa      	ldrb	r2, [r7, #3]
 8004aac:	6879      	ldr	r1, [r7, #4]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	1a9b      	subs	r3, r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	440b      	add	r3, r1
 8004ab8:	334d      	adds	r3, #77	; 0x4d
 8004aba:	2202      	movs	r2, #2
 8004abc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004abe:	78fa      	ldrb	r2, [r7, #3]
 8004ac0:	6879      	ldr	r1, [r7, #4]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	1a9b      	subs	r3, r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	440b      	add	r3, r1
 8004acc:	334c      	adds	r3, #76	; 0x4c
 8004ace:	2201      	movs	r2, #1
 8004ad0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004ad2:	78fa      	ldrb	r2, [r7, #3]
 8004ad4:	6879      	ldr	r1, [r7, #4]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	011b      	lsls	r3, r3, #4
 8004ada:	1a9b      	subs	r3, r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	440b      	add	r3, r1
 8004ae0:	3326      	adds	r3, #38	; 0x26
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d00b      	beq.n	8004b00 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004ae8:	78fa      	ldrb	r2, [r7, #3]
 8004aea:	6879      	ldr	r1, [r7, #4]
 8004aec:	4613      	mov	r3, r2
 8004aee:	011b      	lsls	r3, r3, #4
 8004af0:	1a9b      	subs	r3, r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	440b      	add	r3, r1
 8004af6:	3326      	adds	r3, #38	; 0x26
 8004af8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	f040 8190 	bne.w	8004e20 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	799b      	ldrb	r3, [r3, #6]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d115      	bne.n	8004b34 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004b08:	78fa      	ldrb	r2, [r7, #3]
 8004b0a:	6879      	ldr	r1, [r7, #4]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	011b      	lsls	r3, r3, #4
 8004b10:	1a9b      	subs	r3, r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	440b      	add	r3, r1
 8004b16:	333d      	adds	r3, #61	; 0x3d
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	78fa      	ldrb	r2, [r7, #3]
 8004b1c:	f083 0301 	eor.w	r3, r3, #1
 8004b20:	b2d8      	uxtb	r0, r3
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	4613      	mov	r3, r2
 8004b26:	011b      	lsls	r3, r3, #4
 8004b28:	1a9b      	subs	r3, r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	440b      	add	r3, r1
 8004b2e:	333d      	adds	r3, #61	; 0x3d
 8004b30:	4602      	mov	r2, r0
 8004b32:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	799b      	ldrb	r3, [r3, #6]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	f040 8171 	bne.w	8004e20 <HCD_HC_OUT_IRQHandler+0x920>
 8004b3e:	78fa      	ldrb	r2, [r7, #3]
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	4613      	mov	r3, r2
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	3334      	adds	r3, #52	; 0x34
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 8165 	beq.w	8004e20 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004b56:	78fa      	ldrb	r2, [r7, #3]
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	1a9b      	subs	r3, r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	440b      	add	r3, r1
 8004b64:	3334      	adds	r3, #52	; 0x34
 8004b66:	6819      	ldr	r1, [r3, #0]
 8004b68:	78fa      	ldrb	r2, [r7, #3]
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	1a9b      	subs	r3, r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4403      	add	r3, r0
 8004b76:	3328      	adds	r3, #40	; 0x28
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	440b      	add	r3, r1
 8004b7c:	1e59      	subs	r1, r3, #1
 8004b7e:	78fa      	ldrb	r2, [r7, #3]
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	4613      	mov	r3, r2
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	1a9b      	subs	r3, r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4403      	add	r3, r0
 8004b8c:	3328      	adds	r3, #40	; 0x28
 8004b8e:	881b      	ldrh	r3, [r3, #0]
 8004b90:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b94:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 813f 	beq.w	8004e20 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004ba2:	78fa      	ldrb	r2, [r7, #3]
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	1a9b      	subs	r3, r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	440b      	add	r3, r1
 8004bb0:	333d      	adds	r3, #61	; 0x3d
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	78fa      	ldrb	r2, [r7, #3]
 8004bb6:	f083 0301 	eor.w	r3, r3, #1
 8004bba:	b2d8      	uxtb	r0, r3
 8004bbc:	6879      	ldr	r1, [r7, #4]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	011b      	lsls	r3, r3, #4
 8004bc2:	1a9b      	subs	r3, r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	333d      	adds	r3, #61	; 0x3d
 8004bca:	4602      	mov	r2, r0
 8004bcc:	701a      	strb	r2, [r3, #0]
 8004bce:	e127      	b.n	8004e20 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004bd0:	78fa      	ldrb	r2, [r7, #3]
 8004bd2:	6879      	ldr	r1, [r7, #4]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	011b      	lsls	r3, r3, #4
 8004bd8:	1a9b      	subs	r3, r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	440b      	add	r3, r1
 8004bde:	334d      	adds	r3, #77	; 0x4d
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d120      	bne.n	8004c28 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004be6:	78fa      	ldrb	r2, [r7, #3]
 8004be8:	6879      	ldr	r1, [r7, #4]
 8004bea:	4613      	mov	r3, r2
 8004bec:	011b      	lsls	r3, r3, #4
 8004bee:	1a9b      	subs	r3, r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	334d      	adds	r3, #77	; 0x4d
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004bfa:	78fa      	ldrb	r2, [r7, #3]
 8004bfc:	6879      	ldr	r1, [r7, #4]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	011b      	lsls	r3, r3, #4
 8004c02:	1a9b      	subs	r3, r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	440b      	add	r3, r1
 8004c08:	331b      	adds	r3, #27
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	f040 8107 	bne.w	8004e20 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004c12:	78fa      	ldrb	r2, [r7, #3]
 8004c14:	6879      	ldr	r1, [r7, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	1a9b      	subs	r3, r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	440b      	add	r3, r1
 8004c20:	334c      	adds	r3, #76	; 0x4c
 8004c22:	2202      	movs	r2, #2
 8004c24:	701a      	strb	r2, [r3, #0]
 8004c26:	e0fb      	b.n	8004e20 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004c28:	78fa      	ldrb	r2, [r7, #3]
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	1a9b      	subs	r3, r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	334d      	adds	r3, #77	; 0x4d
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	2b04      	cmp	r3, #4
 8004c3c:	d13a      	bne.n	8004cb4 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c3e:	78fa      	ldrb	r2, [r7, #3]
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	4613      	mov	r3, r2
 8004c44:	011b      	lsls	r3, r3, #4
 8004c46:	1a9b      	subs	r3, r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	440b      	add	r3, r1
 8004c4c:	334d      	adds	r3, #77	; 0x4d
 8004c4e:	2202      	movs	r2, #2
 8004c50:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004c52:	78fa      	ldrb	r2, [r7, #3]
 8004c54:	6879      	ldr	r1, [r7, #4]
 8004c56:	4613      	mov	r3, r2
 8004c58:	011b      	lsls	r3, r3, #4
 8004c5a:	1a9b      	subs	r3, r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	440b      	add	r3, r1
 8004c60:	334c      	adds	r3, #76	; 0x4c
 8004c62:	2202      	movs	r2, #2
 8004c64:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004c66:	78fa      	ldrb	r2, [r7, #3]
 8004c68:	6879      	ldr	r1, [r7, #4]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	1a9b      	subs	r3, r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	440b      	add	r3, r1
 8004c74:	331b      	adds	r3, #27
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	f040 80d1 	bne.w	8004e20 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004c7e:	78fa      	ldrb	r2, [r7, #3]
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	4613      	mov	r3, r2
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	1a9b      	subs	r3, r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	440b      	add	r3, r1
 8004c8c:	331b      	adds	r3, #27
 8004c8e:	2200      	movs	r2, #0
 8004c90:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004c92:	78fb      	ldrb	r3, [r7, #3]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	78fa      	ldrb	r2, [r7, #3]
 8004ca2:	0151      	lsls	r1, r2, #5
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	440a      	add	r2, r1
 8004ca8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cb0:	6053      	str	r3, [r2, #4]
 8004cb2:	e0b5      	b.n	8004e20 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004cb4:	78fa      	ldrb	r2, [r7, #3]
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	1a9b      	subs	r3, r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	334d      	adds	r3, #77	; 0x4d
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	2b05      	cmp	r3, #5
 8004cc8:	d114      	bne.n	8004cf4 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004cca:	78fa      	ldrb	r2, [r7, #3]
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	1a9b      	subs	r3, r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	440b      	add	r3, r1
 8004cd8:	334d      	adds	r3, #77	; 0x4d
 8004cda:	2202      	movs	r2, #2
 8004cdc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004cde:	78fa      	ldrb	r2, [r7, #3]
 8004ce0:	6879      	ldr	r1, [r7, #4]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	011b      	lsls	r3, r3, #4
 8004ce6:	1a9b      	subs	r3, r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	440b      	add	r3, r1
 8004cec:	334c      	adds	r3, #76	; 0x4c
 8004cee:	2202      	movs	r2, #2
 8004cf0:	701a      	strb	r2, [r3, #0]
 8004cf2:	e095      	b.n	8004e20 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004cf4:	78fa      	ldrb	r2, [r7, #3]
 8004cf6:	6879      	ldr	r1, [r7, #4]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	1a9b      	subs	r3, r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	440b      	add	r3, r1
 8004d02:	334d      	adds	r3, #77	; 0x4d
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2b06      	cmp	r3, #6
 8004d08:	d114      	bne.n	8004d34 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004d0a:	78fa      	ldrb	r2, [r7, #3]
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	011b      	lsls	r3, r3, #4
 8004d12:	1a9b      	subs	r3, r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	440b      	add	r3, r1
 8004d18:	334d      	adds	r3, #77	; 0x4d
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004d1e:	78fa      	ldrb	r2, [r7, #3]
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	334c      	adds	r3, #76	; 0x4c
 8004d2e:	2205      	movs	r2, #5
 8004d30:	701a      	strb	r2, [r3, #0]
 8004d32:	e075      	b.n	8004e20 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004d34:	78fa      	ldrb	r2, [r7, #3]
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	1a9b      	subs	r3, r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	334d      	adds	r3, #77	; 0x4d
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	2b07      	cmp	r3, #7
 8004d48:	d00a      	beq.n	8004d60 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004d4a:	78fa      	ldrb	r2, [r7, #3]
 8004d4c:	6879      	ldr	r1, [r7, #4]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	1a9b      	subs	r3, r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	440b      	add	r3, r1
 8004d58:	334d      	adds	r3, #77	; 0x4d
 8004d5a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004d5c:	2b09      	cmp	r3, #9
 8004d5e:	d170      	bne.n	8004e42 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004d60:	78fa      	ldrb	r2, [r7, #3]
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	4613      	mov	r3, r2
 8004d66:	011b      	lsls	r3, r3, #4
 8004d68:	1a9b      	subs	r3, r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	334d      	adds	r3, #77	; 0x4d
 8004d70:	2202      	movs	r2, #2
 8004d72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004d74:	78fa      	ldrb	r2, [r7, #3]
 8004d76:	6879      	ldr	r1, [r7, #4]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	011b      	lsls	r3, r3, #4
 8004d7c:	1a9b      	subs	r3, r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	440b      	add	r3, r1
 8004d82:	3344      	adds	r3, #68	; 0x44
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	1c59      	adds	r1, r3, #1
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	1a9b      	subs	r3, r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4403      	add	r3, r0
 8004d94:	3344      	adds	r3, #68	; 0x44
 8004d96:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004d98:	78fa      	ldrb	r2, [r7, #3]
 8004d9a:	6879      	ldr	r1, [r7, #4]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	011b      	lsls	r3, r3, #4
 8004da0:	1a9b      	subs	r3, r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	440b      	add	r3, r1
 8004da6:	3344      	adds	r3, #68	; 0x44
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d914      	bls.n	8004dd8 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004dae:	78fa      	ldrb	r2, [r7, #3]
 8004db0:	6879      	ldr	r1, [r7, #4]
 8004db2:	4613      	mov	r3, r2
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	1a9b      	subs	r3, r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	440b      	add	r3, r1
 8004dbc:	3344      	adds	r3, #68	; 0x44
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004dc2:	78fa      	ldrb	r2, [r7, #3]
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	011b      	lsls	r3, r3, #4
 8004dca:	1a9b      	subs	r3, r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	440b      	add	r3, r1
 8004dd0:	334c      	adds	r3, #76	; 0x4c
 8004dd2:	2204      	movs	r2, #4
 8004dd4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004dd6:	e022      	b.n	8004e1e <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004dd8:	78fa      	ldrb	r2, [r7, #3]
 8004dda:	6879      	ldr	r1, [r7, #4]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	1a9b      	subs	r3, r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	440b      	add	r3, r1
 8004de6:	334c      	adds	r3, #76	; 0x4c
 8004de8:	2202      	movs	r2, #2
 8004dea:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004dec:	78fb      	ldrb	r3, [r7, #3]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e02:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e0a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004e0c:	78fb      	ldrb	r3, [r7, #3]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e18:	461a      	mov	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004e1e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004e20:	78fa      	ldrb	r2, [r7, #3]
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	4613      	mov	r3, r2
 8004e26:	011b      	lsls	r3, r3, #4
 8004e28:	1a9b      	subs	r3, r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	440b      	add	r3, r1
 8004e2e:	334c      	adds	r3, #76	; 0x4c
 8004e30:	781a      	ldrb	r2, [r3, #0]
 8004e32:	78fb      	ldrb	r3, [r7, #3]
 8004e34:	4619      	mov	r1, r3
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f007 f956 	bl	800c0e8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004e3c:	e002      	b.n	8004e44 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004e3e:	bf00      	nop
 8004e40:	e000      	b.n	8004e44 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004e42:	bf00      	nop
  }
}
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b08a      	sub	sp, #40	; 0x28
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	0c5b      	lsrs	r3, r3, #17
 8004e70:	f003 030f 	and.w	r3, r3, #15
 8004e74:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	091b      	lsrs	r3, r3, #4
 8004e7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e7e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d004      	beq.n	8004e90 <HCD_RXQLVL_IRQHandler+0x46>
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2b05      	cmp	r3, #5
 8004e8a:	f000 80b6 	beq.w	8004ffa <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004e8e:	e0b7      	b.n	8005000 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 80b3 	beq.w	8004ffe <HCD_RXQLVL_IRQHandler+0x1b4>
 8004e98:	6879      	ldr	r1, [r7, #4]
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	1a9b      	subs	r3, r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	440b      	add	r3, r1
 8004ea6:	332c      	adds	r3, #44	; 0x2c
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 80a7 	beq.w	8004ffe <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004eb0:	6879      	ldr	r1, [r7, #4]
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	1a9b      	subs	r3, r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	3338      	adds	r3, #56	; 0x38
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	18d1      	adds	r1, r2, r3
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	1a9b      	subs	r3, r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4403      	add	r3, r0
 8004ed4:	3334      	adds	r3, #52	; 0x34
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4299      	cmp	r1, r3
 8004eda:	f200 8083 	bhi.w	8004fe4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6818      	ldr	r0, [r3, #0]
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	1a9b      	subs	r3, r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	440b      	add	r3, r1
 8004ef0:	332c      	adds	r3, #44	; 0x2c
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	b292      	uxth	r2, r2
 8004ef8:	4619      	mov	r1, r3
 8004efa:	f003 ff7d 	bl	8008df8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004efe:	6879      	ldr	r1, [r7, #4]
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	4613      	mov	r3, r2
 8004f04:	011b      	lsls	r3, r3, #4
 8004f06:	1a9b      	subs	r3, r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	440b      	add	r3, r1
 8004f0c:	332c      	adds	r3, #44	; 0x2c
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	18d1      	adds	r1, r2, r3
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	1a9b      	subs	r3, r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4403      	add	r3, r0
 8004f22:	332c      	adds	r3, #44	; 0x2c
 8004f24:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	1a9b      	subs	r3, r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	440b      	add	r3, r1
 8004f34:	3338      	adds	r3, #56	; 0x38
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	18d1      	adds	r1, r2, r3
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	4613      	mov	r3, r2
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	1a9b      	subs	r3, r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4403      	add	r3, r0
 8004f4a:	3338      	adds	r3, #56	; 0x38
 8004f4c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	6a3b      	ldr	r3, [r7, #32]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	0cdb      	lsrs	r3, r3, #19
 8004f5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f62:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004f64:	6879      	ldr	r1, [r7, #4]
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	1a9b      	subs	r3, r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	440b      	add	r3, r1
 8004f72:	3328      	adds	r3, #40	; 0x28
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d13f      	bne.n	8004ffe <HCD_RXQLVL_IRQHandler+0x1b4>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d03c      	beq.n	8004ffe <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f9a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fa2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004fb6:	6879      	ldr	r1, [r7, #4]
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	1a9b      	subs	r3, r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	440b      	add	r3, r1
 8004fc4:	333c      	adds	r3, #60	; 0x3c
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	f083 0301 	eor.w	r3, r3, #1
 8004fcc:	b2d8      	uxtb	r0, r3
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	011b      	lsls	r3, r3, #4
 8004fd6:	1a9b      	subs	r3, r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	440b      	add	r3, r1
 8004fdc:	333c      	adds	r3, #60	; 0x3c
 8004fde:	4602      	mov	r2, r0
 8004fe0:	701a      	strb	r2, [r3, #0]
      break;
 8004fe2:	e00c      	b.n	8004ffe <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004fe4:	6879      	ldr	r1, [r7, #4]
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	011b      	lsls	r3, r3, #4
 8004fec:	1a9b      	subs	r3, r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	334c      	adds	r3, #76	; 0x4c
 8004ff4:	2204      	movs	r2, #4
 8004ff6:	701a      	strb	r2, [r3, #0]
      break;
 8004ff8:	e001      	b.n	8004ffe <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004ffa:	bf00      	nop
 8004ffc:	e000      	b.n	8005000 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004ffe:	bf00      	nop
  }
}
 8005000:	bf00      	nop
 8005002:	3728      	adds	r7, #40	; 0x28
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005034:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b02      	cmp	r3, #2
 800503e:	d10b      	bne.n	8005058 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b01      	cmp	r3, #1
 8005048:	d102      	bne.n	8005050 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f007 f830 	bl	800c0b0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f043 0302 	orr.w	r3, r3, #2
 8005056:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f003 0308 	and.w	r3, r3, #8
 800505e:	2b08      	cmp	r3, #8
 8005060:	d132      	bne.n	80050c8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f043 0308 	orr.w	r3, r3, #8
 8005068:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b04      	cmp	r3, #4
 8005072:	d126      	bne.n	80050c2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	7a5b      	ldrb	r3, [r3, #9]
 8005078:	2b02      	cmp	r3, #2
 800507a:	d113      	bne.n	80050a4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005082:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005086:	d106      	bne.n	8005096 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2102      	movs	r1, #2
 800508e:	4618      	mov	r0, r3
 8005090:	f004 f842 	bl	8009118 <USB_InitFSLSPClkSel>
 8005094:	e011      	b.n	80050ba <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2101      	movs	r1, #1
 800509c:	4618      	mov	r0, r3
 800509e:	f004 f83b 	bl	8009118 <USB_InitFSLSPClkSel>
 80050a2:	e00a      	b.n	80050ba <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	79db      	ldrb	r3, [r3, #7]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d106      	bne.n	80050ba <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050b2:	461a      	mov	r2, r3
 80050b4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80050b8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f007 f822 	bl	800c104 <HAL_HCD_PortEnabled_Callback>
 80050c0:	e002      	b.n	80050c8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f007 f82c 	bl	800c120 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f003 0320 	and.w	r3, r3, #32
 80050ce:	2b20      	cmp	r3, #32
 80050d0:	d103      	bne.n	80050da <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	f043 0320 	orr.w	r3, r3, #32
 80050d8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050e0:	461a      	mov	r2, r3
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	6013      	str	r3, [r2, #0]
}
 80050e6:	bf00      	nop
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
	...

080050f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e12b      	b.n	800535a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d106      	bne.n	800511c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7fc fbde 	bl	80018d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2224      	movs	r2, #36	; 0x24
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0201 	bic.w	r2, r2, #1
 8005132:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005142:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005152:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005154:	f001 fa20 	bl	8006598 <HAL_RCC_GetPCLK1Freq>
 8005158:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	4a81      	ldr	r2, [pc, #516]	; (8005364 <HAL_I2C_Init+0x274>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d807      	bhi.n	8005174 <HAL_I2C_Init+0x84>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4a80      	ldr	r2, [pc, #512]	; (8005368 <HAL_I2C_Init+0x278>)
 8005168:	4293      	cmp	r3, r2
 800516a:	bf94      	ite	ls
 800516c:	2301      	movls	r3, #1
 800516e:	2300      	movhi	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	e006      	b.n	8005182 <HAL_I2C_Init+0x92>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4a7d      	ldr	r2, [pc, #500]	; (800536c <HAL_I2C_Init+0x27c>)
 8005178:	4293      	cmp	r3, r2
 800517a:	bf94      	ite	ls
 800517c:	2301      	movls	r3, #1
 800517e:	2300      	movhi	r3, #0
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e0e7      	b.n	800535a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4a78      	ldr	r2, [pc, #480]	; (8005370 <HAL_I2C_Init+0x280>)
 800518e:	fba2 2303 	umull	r2, r3, r2, r3
 8005192:	0c9b      	lsrs	r3, r3, #18
 8005194:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	4a6a      	ldr	r2, [pc, #424]	; (8005364 <HAL_I2C_Init+0x274>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d802      	bhi.n	80051c4 <HAL_I2C_Init+0xd4>
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	3301      	adds	r3, #1
 80051c2:	e009      	b.n	80051d8 <HAL_I2C_Init+0xe8>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80051ca:	fb02 f303 	mul.w	r3, r2, r3
 80051ce:	4a69      	ldr	r2, [pc, #420]	; (8005374 <HAL_I2C_Init+0x284>)
 80051d0:	fba2 2303 	umull	r2, r3, r2, r3
 80051d4:	099b      	lsrs	r3, r3, #6
 80051d6:	3301      	adds	r3, #1
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6812      	ldr	r2, [r2, #0]
 80051dc:	430b      	orrs	r3, r1
 80051de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80051ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	495c      	ldr	r1, [pc, #368]	; (8005364 <HAL_I2C_Init+0x274>)
 80051f4:	428b      	cmp	r3, r1
 80051f6:	d819      	bhi.n	800522c <HAL_I2C_Init+0x13c>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	1e59      	subs	r1, r3, #1
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	fbb1 f3f3 	udiv	r3, r1, r3
 8005206:	1c59      	adds	r1, r3, #1
 8005208:	f640 73fc 	movw	r3, #4092	; 0xffc
 800520c:	400b      	ands	r3, r1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00a      	beq.n	8005228 <HAL_I2C_Init+0x138>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	1e59      	subs	r1, r3, #1
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005220:	3301      	adds	r3, #1
 8005222:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005226:	e051      	b.n	80052cc <HAL_I2C_Init+0x1dc>
 8005228:	2304      	movs	r3, #4
 800522a:	e04f      	b.n	80052cc <HAL_I2C_Init+0x1dc>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d111      	bne.n	8005258 <HAL_I2C_Init+0x168>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	1e58      	subs	r0, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6859      	ldr	r1, [r3, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	440b      	add	r3, r1
 8005242:	fbb0 f3f3 	udiv	r3, r0, r3
 8005246:	3301      	adds	r3, #1
 8005248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800524c:	2b00      	cmp	r3, #0
 800524e:	bf0c      	ite	eq
 8005250:	2301      	moveq	r3, #1
 8005252:	2300      	movne	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	e012      	b.n	800527e <HAL_I2C_Init+0x18e>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	1e58      	subs	r0, r3, #1
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6859      	ldr	r1, [r3, #4]
 8005260:	460b      	mov	r3, r1
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	440b      	add	r3, r1
 8005266:	0099      	lsls	r1, r3, #2
 8005268:	440b      	add	r3, r1
 800526a:	fbb0 f3f3 	udiv	r3, r0, r3
 800526e:	3301      	adds	r3, #1
 8005270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005274:	2b00      	cmp	r3, #0
 8005276:	bf0c      	ite	eq
 8005278:	2301      	moveq	r3, #1
 800527a:	2300      	movne	r3, #0
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <HAL_I2C_Init+0x196>
 8005282:	2301      	movs	r3, #1
 8005284:	e022      	b.n	80052cc <HAL_I2C_Init+0x1dc>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10e      	bne.n	80052ac <HAL_I2C_Init+0x1bc>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	1e58      	subs	r0, r3, #1
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6859      	ldr	r1, [r3, #4]
 8005296:	460b      	mov	r3, r1
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	440b      	add	r3, r1
 800529c:	fbb0 f3f3 	udiv	r3, r0, r3
 80052a0:	3301      	adds	r3, #1
 80052a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052aa:	e00f      	b.n	80052cc <HAL_I2C_Init+0x1dc>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	1e58      	subs	r0, r3, #1
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6859      	ldr	r1, [r3, #4]
 80052b4:	460b      	mov	r3, r1
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	440b      	add	r3, r1
 80052ba:	0099      	lsls	r1, r3, #2
 80052bc:	440b      	add	r3, r1
 80052be:	fbb0 f3f3 	udiv	r3, r0, r3
 80052c2:	3301      	adds	r3, #1
 80052c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	6809      	ldr	r1, [r1, #0]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	69da      	ldr	r2, [r3, #28]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	431a      	orrs	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	430a      	orrs	r2, r1
 80052ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80052fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6911      	ldr	r1, [r2, #16]
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	68d2      	ldr	r2, [r2, #12]
 8005306:	4311      	orrs	r1, r2
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6812      	ldr	r2, [r2, #0]
 800530c:	430b      	orrs	r3, r1
 800530e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695a      	ldr	r2, [r3, #20]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0201 	orr.w	r2, r2, #1
 800533a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2220      	movs	r2, #32
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	000186a0 	.word	0x000186a0
 8005368:	001e847f 	.word	0x001e847f
 800536c:	003d08ff 	.word	0x003d08ff
 8005370:	431bde83 	.word	0x431bde83
 8005374:	10624dd3 	.word	0x10624dd3

08005378 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b088      	sub	sp, #32
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e128      	b.n	80055dc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d109      	bne.n	80053aa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a90      	ldr	r2, [pc, #576]	; (80055e4 <HAL_I2S_Init+0x26c>)
 80053a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7fc fadf 	bl	8001968 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2202      	movs	r2, #2
 80053ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6812      	ldr	r2, [r2, #0]
 80053bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80053c0:	f023 030f 	bic.w	r3, r3, #15
 80053c4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2202      	movs	r2, #2
 80053cc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d060      	beq.n	8005498 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d102      	bne.n	80053e4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80053de:	2310      	movs	r3, #16
 80053e0:	617b      	str	r3, [r7, #20]
 80053e2:	e001      	b.n	80053e8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80053e4:	2320      	movs	r3, #32
 80053e6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d802      	bhi.n	80053f6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80053f6:	2001      	movs	r0, #1
 80053f8:	f001 f9d8 	bl	80067ac <HAL_RCCEx_GetPeriphCLKFreq>
 80053fc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005406:	d125      	bne.n	8005454 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d010      	beq.n	8005432 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	fbb2 f2f3 	udiv	r2, r2, r3
 800541a:	4613      	mov	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	4413      	add	r3, r2
 8005420:	005b      	lsls	r3, r3, #1
 8005422:	461a      	mov	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	fbb2 f3f3 	udiv	r3, r2, r3
 800542c:	3305      	adds	r3, #5
 800542e:	613b      	str	r3, [r7, #16]
 8005430:	e01f      	b.n	8005472 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	fbb2 f2f3 	udiv	r2, r2, r3
 800543c:	4613      	mov	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	005b      	lsls	r3, r3, #1
 8005444:	461a      	mov	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	fbb2 f3f3 	udiv	r3, r2, r3
 800544e:	3305      	adds	r3, #5
 8005450:	613b      	str	r3, [r7, #16]
 8005452:	e00e      	b.n	8005472 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	fbb2 f2f3 	udiv	r2, r2, r3
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	461a      	mov	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	fbb2 f3f3 	udiv	r3, r2, r3
 800546e:	3305      	adds	r3, #5
 8005470:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	4a5c      	ldr	r2, [pc, #368]	; (80055e8 <HAL_I2S_Init+0x270>)
 8005476:	fba2 2303 	umull	r2, r3, r2, r3
 800547a:	08db      	lsrs	r3, r3, #3
 800547c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	085b      	lsrs	r3, r3, #1
 800548e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	021b      	lsls	r3, r3, #8
 8005494:	61bb      	str	r3, [r7, #24]
 8005496:	e003      	b.n	80054a0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005498:	2302      	movs	r3, #2
 800549a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d902      	bls.n	80054ac <HAL_I2S_Init+0x134>
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	2bff      	cmp	r3, #255	; 0xff
 80054aa:	d907      	bls.n	80054bc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b0:	f043 0210 	orr.w	r2, r3, #16
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e08f      	b.n	80055dc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691a      	ldr	r2, [r3, #16]
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	ea42 0103 	orr.w	r1, r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69fa      	ldr	r2, [r7, #28]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80054da:	f023 030f 	bic.w	r3, r3, #15
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6851      	ldr	r1, [r2, #4]
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	6892      	ldr	r2, [r2, #8]
 80054e6:	4311      	orrs	r1, r2
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	68d2      	ldr	r2, [r2, #12]
 80054ec:	4311      	orrs	r1, r2
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6992      	ldr	r2, [r2, #24]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	431a      	orrs	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054fe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d161      	bne.n	80055cc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a38      	ldr	r2, [pc, #224]	; (80055ec <HAL_I2S_Init+0x274>)
 800550c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a37      	ldr	r2, [pc, #220]	; (80055f0 <HAL_I2S_Init+0x278>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d101      	bne.n	800551c <HAL_I2S_Init+0x1a4>
 8005518:	4b36      	ldr	r3, [pc, #216]	; (80055f4 <HAL_I2S_Init+0x27c>)
 800551a:	e001      	b.n	8005520 <HAL_I2S_Init+0x1a8>
 800551c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6812      	ldr	r2, [r2, #0]
 8005526:	4932      	ldr	r1, [pc, #200]	; (80055f0 <HAL_I2S_Init+0x278>)
 8005528:	428a      	cmp	r2, r1
 800552a:	d101      	bne.n	8005530 <HAL_I2S_Init+0x1b8>
 800552c:	4a31      	ldr	r2, [pc, #196]	; (80055f4 <HAL_I2S_Init+0x27c>)
 800552e:	e001      	b.n	8005534 <HAL_I2S_Init+0x1bc>
 8005530:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005534:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005538:	f023 030f 	bic.w	r3, r3, #15
 800553c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a2b      	ldr	r2, [pc, #172]	; (80055f0 <HAL_I2S_Init+0x278>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d101      	bne.n	800554c <HAL_I2S_Init+0x1d4>
 8005548:	4b2a      	ldr	r3, [pc, #168]	; (80055f4 <HAL_I2S_Init+0x27c>)
 800554a:	e001      	b.n	8005550 <HAL_I2S_Init+0x1d8>
 800554c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005550:	2202      	movs	r2, #2
 8005552:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a25      	ldr	r2, [pc, #148]	; (80055f0 <HAL_I2S_Init+0x278>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d101      	bne.n	8005562 <HAL_I2S_Init+0x1ea>
 800555e:	4b25      	ldr	r3, [pc, #148]	; (80055f4 <HAL_I2S_Init+0x27c>)
 8005560:	e001      	b.n	8005566 <HAL_I2S_Init+0x1ee>
 8005562:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005566:	69db      	ldr	r3, [r3, #28]
 8005568:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005572:	d003      	beq.n	800557c <HAL_I2S_Init+0x204>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d103      	bne.n	8005584 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800557c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005580:	613b      	str	r3, [r7, #16]
 8005582:	e001      	b.n	8005588 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005584:	2300      	movs	r3, #0
 8005586:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005592:	4313      	orrs	r3, r2
 8005594:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800559c:	4313      	orrs	r3, r2
 800559e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80055a6:	4313      	orrs	r3, r2
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	897b      	ldrh	r3, [r7, #10]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80055b4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a0d      	ldr	r2, [pc, #52]	; (80055f0 <HAL_I2S_Init+0x278>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d101      	bne.n	80055c4 <HAL_I2S_Init+0x24c>
 80055c0:	4b0c      	ldr	r3, [pc, #48]	; (80055f4 <HAL_I2S_Init+0x27c>)
 80055c2:	e001      	b.n	80055c8 <HAL_I2S_Init+0x250>
 80055c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055c8:	897a      	ldrh	r2, [r7, #10]
 80055ca:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3720      	adds	r7, #32
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	080056ef 	.word	0x080056ef
 80055e8:	cccccccd 	.word	0xcccccccd
 80055ec:	08005805 	.word	0x08005805
 80055f0:	40003800 	.word	0x40003800
 80055f4:	40003400 	.word	0x40003400

080055f8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005640:	881a      	ldrh	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	1c9a      	adds	r2, r3, #2
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005656:	b29b      	uxth	r3, r3
 8005658:	3b01      	subs	r3, #1
 800565a:	b29a      	uxth	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005664:	b29b      	uxth	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10e      	bne.n	8005688 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005678:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7ff ffb8 	bl	80055f8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005688:	bf00      	nop
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a2:	b292      	uxth	r2, r2
 80056a4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056aa:	1c9a      	adds	r2, r3, #2
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	3b01      	subs	r3, #1
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10e      	bne.n	80056e6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80056d6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff ff93 	bl	800560c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80056e6:	bf00      	nop
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b086      	sub	sp, #24
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b04      	cmp	r3, #4
 8005708:	d13a      	bne.n	8005780 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b01      	cmp	r3, #1
 8005712:	d109      	bne.n	8005728 <I2S_IRQHandler+0x3a>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571e:	2b40      	cmp	r3, #64	; 0x40
 8005720:	d102      	bne.n	8005728 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7ff ffb4 	bl	8005690 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572e:	2b40      	cmp	r3, #64	; 0x40
 8005730:	d126      	bne.n	8005780 <I2S_IRQHandler+0x92>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f003 0320 	and.w	r3, r3, #32
 800573c:	2b20      	cmp	r3, #32
 800573e:	d11f      	bne.n	8005780 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800574e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005750:	2300      	movs	r3, #0
 8005752:	613b      	str	r3, [r7, #16]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	613b      	str	r3, [r7, #16]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	613b      	str	r3, [r7, #16]
 8005764:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005772:	f043 0202 	orr.w	r2, r3, #2
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7ff ff50 	bl	8005620 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b03      	cmp	r3, #3
 800578a:	d136      	bne.n	80057fa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b02      	cmp	r3, #2
 8005794:	d109      	bne.n	80057aa <I2S_IRQHandler+0xbc>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a0:	2b80      	cmp	r3, #128	; 0x80
 80057a2:	d102      	bne.n	80057aa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff ff45 	bl	8005634 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f003 0308 	and.w	r3, r3, #8
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d122      	bne.n	80057fa <I2S_IRQHandler+0x10c>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b20      	cmp	r3, #32
 80057c0:	d11b      	bne.n	80057fa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80057d0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80057d2:	2300      	movs	r3, #0
 80057d4:	60fb      	str	r3, [r7, #12]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ec:	f043 0204 	orr.w	r2, r3, #4
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7ff ff13 	bl	8005620 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80057fa:	bf00      	nop
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b088      	sub	sp, #32
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a92      	ldr	r2, [pc, #584]	; (8005a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d101      	bne.n	8005822 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800581e:	4b92      	ldr	r3, [pc, #584]	; (8005a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005820:	e001      	b.n	8005826 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005822:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a8b      	ldr	r2, [pc, #556]	; (8005a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d101      	bne.n	8005840 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800583c:	4b8a      	ldr	r3, [pc, #552]	; (8005a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800583e:	e001      	b.n	8005844 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005840:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005850:	d004      	beq.n	800585c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	f040 8099 	bne.w	800598e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b02      	cmp	r3, #2
 8005864:	d107      	bne.n	8005876 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f925 	bl	8005ac0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b01      	cmp	r3, #1
 800587e:	d107      	bne.n	8005890 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f9c8 	bl	8005c20 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005896:	2b40      	cmp	r3, #64	; 0x40
 8005898:	d13a      	bne.n	8005910 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	f003 0320 	and.w	r3, r3, #32
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d035      	beq.n	8005910 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a6e      	ldr	r2, [pc, #440]	; (8005a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d101      	bne.n	80058b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80058ae:	4b6e      	ldr	r3, [pc, #440]	; (8005a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058b0:	e001      	b.n	80058b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80058b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4969      	ldr	r1, [pc, #420]	; (8005a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058be:	428b      	cmp	r3, r1
 80058c0:	d101      	bne.n	80058c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80058c2:	4b69      	ldr	r3, [pc, #420]	; (8005a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058c4:	e001      	b.n	80058ca <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80058c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80058ce:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80058de:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80058e0:	2300      	movs	r3, #0
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005902:	f043 0202 	orr.w	r2, r3, #2
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7ff fe88 	bl	8005620 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	2b08      	cmp	r3, #8
 8005918:	f040 80c3 	bne.w	8005aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 80bd 	beq.w	8005aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005936:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a49      	ldr	r2, [pc, #292]	; (8005a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d101      	bne.n	8005946 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005942:	4b49      	ldr	r3, [pc, #292]	; (8005a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005944:	e001      	b.n	800594a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005946:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4944      	ldr	r1, [pc, #272]	; (8005a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005952:	428b      	cmp	r3, r1
 8005954:	d101      	bne.n	800595a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005956:	4b44      	ldr	r3, [pc, #272]	; (8005a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005958:	e001      	b.n	800595e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800595a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800595e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005962:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005964:	2300      	movs	r3, #0
 8005966:	60bb      	str	r3, [r7, #8]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	60bb      	str	r3, [r7, #8]
 8005970:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597e:	f043 0204 	orr.w	r2, r3, #4
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7ff fe4a 	bl	8005620 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800598c:	e089      	b.n	8005aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b02      	cmp	r3, #2
 8005996:	d107      	bne.n	80059a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f8be 	bl	8005b24 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d107      	bne.n	80059c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f8fd 	bl	8005bbc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c8:	2b40      	cmp	r3, #64	; 0x40
 80059ca:	d12f      	bne.n	8005a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f003 0320 	and.w	r3, r3, #32
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d02a      	beq.n	8005a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80059e4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a1e      	ldr	r2, [pc, #120]	; (8005a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d101      	bne.n	80059f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80059f0:	4b1d      	ldr	r3, [pc, #116]	; (8005a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059f2:	e001      	b.n	80059f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80059f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4919      	ldr	r1, [pc, #100]	; (8005a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a00:	428b      	cmp	r3, r1
 8005a02:	d101      	bne.n	8005a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005a04:	4b18      	ldr	r3, [pc, #96]	; (8005a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a06:	e001      	b.n	8005a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005a08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a10:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1e:	f043 0202 	orr.w	r2, r3, #2
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7ff fdfa 	bl	8005620 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	f003 0308 	and.w	r3, r3, #8
 8005a32:	2b08      	cmp	r3, #8
 8005a34:	d136      	bne.n	8005aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f003 0320 	and.w	r3, r3, #32
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d031      	beq.n	8005aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a07      	ldr	r2, [pc, #28]	; (8005a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d101      	bne.n	8005a4e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005a4a:	4b07      	ldr	r3, [pc, #28]	; (8005a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a4c:	e001      	b.n	8005a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005a4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4902      	ldr	r1, [pc, #8]	; (8005a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a5a:	428b      	cmp	r3, r1
 8005a5c:	d106      	bne.n	8005a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005a5e:	4b02      	ldr	r3, [pc, #8]	; (8005a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a60:	e006      	b.n	8005a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005a62:	bf00      	nop
 8005a64:	40003800 	.word	0x40003800
 8005a68:	40003400 	.word	0x40003400
 8005a6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a74:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a84:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a92:	f043 0204 	orr.w	r2, r3, #4
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7ff fdc0 	bl	8005620 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005aa0:	e000      	b.n	8005aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005aa2:	bf00      	nop
}
 8005aa4:	bf00      	nop
 8005aa6:	3720      	adds	r7, #32
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005acc:	1c99      	adds	r1, r3, #2
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	6251      	str	r1, [r2, #36]	; 0x24
 8005ad2:	881a      	ldrh	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d113      	bne.n	8005b1a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b00:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d106      	bne.n	8005b1a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7ff ffc9 	bl	8005aac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b1a:	bf00      	nop
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
	...

08005b24 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	1c99      	adds	r1, r3, #2
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	6251      	str	r1, [r2, #36]	; 0x24
 8005b36:	8819      	ldrh	r1, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a1d      	ldr	r2, [pc, #116]	; (8005bb4 <I2SEx_TxISR_I2SExt+0x90>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d101      	bne.n	8005b46 <I2SEx_TxISR_I2SExt+0x22>
 8005b42:	4b1d      	ldr	r3, [pc, #116]	; (8005bb8 <I2SEx_TxISR_I2SExt+0x94>)
 8005b44:	e001      	b.n	8005b4a <I2SEx_TxISR_I2SExt+0x26>
 8005b46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b4a:	460a      	mov	r2, r1
 8005b4c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	3b01      	subs	r3, #1
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d121      	bne.n	8005baa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a12      	ldr	r2, [pc, #72]	; (8005bb4 <I2SEx_TxISR_I2SExt+0x90>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d101      	bne.n	8005b74 <I2SEx_TxISR_I2SExt+0x50>
 8005b70:	4b11      	ldr	r3, [pc, #68]	; (8005bb8 <I2SEx_TxISR_I2SExt+0x94>)
 8005b72:	e001      	b.n	8005b78 <I2SEx_TxISR_I2SExt+0x54>
 8005b74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	490d      	ldr	r1, [pc, #52]	; (8005bb4 <I2SEx_TxISR_I2SExt+0x90>)
 8005b80:	428b      	cmp	r3, r1
 8005b82:	d101      	bne.n	8005b88 <I2SEx_TxISR_I2SExt+0x64>
 8005b84:	4b0c      	ldr	r3, [pc, #48]	; (8005bb8 <I2SEx_TxISR_I2SExt+0x94>)
 8005b86:	e001      	b.n	8005b8c <I2SEx_TxISR_I2SExt+0x68>
 8005b88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b90:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d106      	bne.n	8005baa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7ff ff81 	bl	8005aac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005baa:	bf00      	nop
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	40003800 	.word	0x40003800
 8005bb8:	40003400 	.word	0x40003400

08005bbc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68d8      	ldr	r0, [r3, #12]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bce:	1c99      	adds	r1, r3, #2
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005bd4:	b282      	uxth	r2, r0
 8005bd6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	3b01      	subs	r3, #1
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d113      	bne.n	8005c18 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005bfe:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d106      	bne.n	8005c18 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7ff ff4a 	bl	8005aac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c18:	bf00      	nop
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a20      	ldr	r2, [pc, #128]	; (8005cb0 <I2SEx_RxISR_I2SExt+0x90>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d101      	bne.n	8005c36 <I2SEx_RxISR_I2SExt+0x16>
 8005c32:	4b20      	ldr	r3, [pc, #128]	; (8005cb4 <I2SEx_RxISR_I2SExt+0x94>)
 8005c34:	e001      	b.n	8005c3a <I2SEx_RxISR_I2SExt+0x1a>
 8005c36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c3a:	68d8      	ldr	r0, [r3, #12]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	1c99      	adds	r1, r3, #2
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005c46:	b282      	uxth	r2, r0
 8005c48:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	3b01      	subs	r3, #1
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d121      	bne.n	8005ca6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a12      	ldr	r2, [pc, #72]	; (8005cb0 <I2SEx_RxISR_I2SExt+0x90>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d101      	bne.n	8005c70 <I2SEx_RxISR_I2SExt+0x50>
 8005c6c:	4b11      	ldr	r3, [pc, #68]	; (8005cb4 <I2SEx_RxISR_I2SExt+0x94>)
 8005c6e:	e001      	b.n	8005c74 <I2SEx_RxISR_I2SExt+0x54>
 8005c70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	490d      	ldr	r1, [pc, #52]	; (8005cb0 <I2SEx_RxISR_I2SExt+0x90>)
 8005c7c:	428b      	cmp	r3, r1
 8005c7e:	d101      	bne.n	8005c84 <I2SEx_RxISR_I2SExt+0x64>
 8005c80:	4b0c      	ldr	r3, [pc, #48]	; (8005cb4 <I2SEx_RxISR_I2SExt+0x94>)
 8005c82:	e001      	b.n	8005c88 <I2SEx_RxISR_I2SExt+0x68>
 8005c84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c8c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d106      	bne.n	8005ca6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7ff ff03 	bl	8005aac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ca6:	bf00      	nop
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	40003800 	.word	0x40003800
 8005cb4:	40003400 	.word	0x40003400

08005cb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e267      	b.n	800619a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d075      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cd6:	4b88      	ldr	r3, [pc, #544]	; (8005ef8 <HAL_RCC_OscConfig+0x240>)
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f003 030c 	and.w	r3, r3, #12
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	d00c      	beq.n	8005cfc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ce2:	4b85      	ldr	r3, [pc, #532]	; (8005ef8 <HAL_RCC_OscConfig+0x240>)
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cea:	2b08      	cmp	r3, #8
 8005cec:	d112      	bne.n	8005d14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cee:	4b82      	ldr	r3, [pc, #520]	; (8005ef8 <HAL_RCC_OscConfig+0x240>)
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cfa:	d10b      	bne.n	8005d14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cfc:	4b7e      	ldr	r3, [pc, #504]	; (8005ef8 <HAL_RCC_OscConfig+0x240>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d05b      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x108>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d157      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e242      	b.n	800619a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d1c:	d106      	bne.n	8005d2c <HAL_RCC_OscConfig+0x74>
 8005d1e:	4b76      	ldr	r3, [pc, #472]	; (8005ef8 <HAL_RCC_OscConfig+0x240>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a75      	ldr	r2, [pc, #468]	; (8005ef8 <HAL_RCC_OscConfig+0x240>)
 8005d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d28:	6013      	str	r3, [r2, #0]
 8005d2a:	e01d      	b.n	8005d68 <HAL_RCC_OscConfig+0xb0>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d34:	d10c      	bne.n	8005d50 <HAL_RCC_OscConfig+0x98>
 8005d36:	4b70      	ldr	r3, [pc, #448]	; (8005ef8 <HAL_RCC_OscConfig+0x240>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a6f      	ldr	r2, [pc, #444]	; (8005ef8 <HAL_RCC_OscConfig+0x240>)
 8005d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d40:	6013      	str	r3, [r2, #0]
 8005d42:	4b6d      	ldr	r3, [pc, #436]	; (8005ef8 <HAL_RCC_OscConfig+0x240>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a6c      	ldr	r2, [pc, #432]	; (8005ef8 <HAL_RCC_OscConfig+0x240>)
 8005d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d4c:	6013      	str	r3, [r2, #0]
 8005d4e:	e00b      	b.n	8005d68 <HAL_RCC_OscConfig+0xb0>
 8005d50:	4b69      	ldr	r3, [pc, #420]	; (8005ef8 <HAL_RCC_OscConfig+0x240>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a68      	ldr	r2, [pc, #416]	; (8005ef8 <HAL_RCC_OscConfig+0x240>)
 8005d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d5a:	6013      	str	r3, [r2, #0]
 8005d5c:	4b66      	ldr	r3, [pc, #408]	; (8005ef8 <HAL_RCC_OscConfig+0x240>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a65      	ldr	r2, [pc, #404]	; (8005ef8 <HAL_RCC_OscConfig+0x240>)
 8005d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d013      	beq.n	8005d98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d70:	f7fc f9aa 	bl	80020c8 <HAL_GetTick>
 8005d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d76:	e008      	b.n	8005d8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d78:	f7fc f9a6 	bl	80020c8 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b64      	cmp	r3, #100	; 0x64
 8005d84:	d901      	bls.n	8005d8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e207      	b.n	800619a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d8a:	4b5b      	ldr	r3, [pc, #364]	; (8005ef8 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d0f0      	beq.n	8005d78 <HAL_RCC_OscConfig+0xc0>
 8005d96:	e014      	b.n	8005dc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d98:	f7fc f996 	bl	80020c8 <HAL_GetTick>
 8005d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005da0:	f7fc f992 	bl	80020c8 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b64      	cmp	r3, #100	; 0x64
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e1f3      	b.n	800619a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005db2:	4b51      	ldr	r3, [pc, #324]	; (8005ef8 <HAL_RCC_OscConfig+0x240>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1f0      	bne.n	8005da0 <HAL_RCC_OscConfig+0xe8>
 8005dbe:	e000      	b.n	8005dc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d063      	beq.n	8005e96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dce:	4b4a      	ldr	r3, [pc, #296]	; (8005ef8 <HAL_RCC_OscConfig+0x240>)
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f003 030c 	and.w	r3, r3, #12
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00b      	beq.n	8005df2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dda:	4b47      	ldr	r3, [pc, #284]	; (8005ef8 <HAL_RCC_OscConfig+0x240>)
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005de2:	2b08      	cmp	r3, #8
 8005de4:	d11c      	bne.n	8005e20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005de6:	4b44      	ldr	r3, [pc, #272]	; (8005ef8 <HAL_RCC_OscConfig+0x240>)
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d116      	bne.n	8005e20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005df2:	4b41      	ldr	r3, [pc, #260]	; (8005ef8 <HAL_RCC_OscConfig+0x240>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d005      	beq.n	8005e0a <HAL_RCC_OscConfig+0x152>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d001      	beq.n	8005e0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e1c7      	b.n	800619a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e0a:	4b3b      	ldr	r3, [pc, #236]	; (8005ef8 <HAL_RCC_OscConfig+0x240>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	4937      	ldr	r1, [pc, #220]	; (8005ef8 <HAL_RCC_OscConfig+0x240>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e1e:	e03a      	b.n	8005e96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d020      	beq.n	8005e6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e28:	4b34      	ldr	r3, [pc, #208]	; (8005efc <HAL_RCC_OscConfig+0x244>)
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e2e:	f7fc f94b 	bl	80020c8 <HAL_GetTick>
 8005e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e34:	e008      	b.n	8005e48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e36:	f7fc f947 	bl	80020c8 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d901      	bls.n	8005e48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e1a8      	b.n	800619a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e48:	4b2b      	ldr	r3, [pc, #172]	; (8005ef8 <HAL_RCC_OscConfig+0x240>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d0f0      	beq.n	8005e36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e54:	4b28      	ldr	r3, [pc, #160]	; (8005ef8 <HAL_RCC_OscConfig+0x240>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	00db      	lsls	r3, r3, #3
 8005e62:	4925      	ldr	r1, [pc, #148]	; (8005ef8 <HAL_RCC_OscConfig+0x240>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	600b      	str	r3, [r1, #0]
 8005e68:	e015      	b.n	8005e96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e6a:	4b24      	ldr	r3, [pc, #144]	; (8005efc <HAL_RCC_OscConfig+0x244>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e70:	f7fc f92a 	bl	80020c8 <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e78:	f7fc f926 	bl	80020c8 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e187      	b.n	800619a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e8a:	4b1b      	ldr	r3, [pc, #108]	; (8005ef8 <HAL_RCC_OscConfig+0x240>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1f0      	bne.n	8005e78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0308 	and.w	r3, r3, #8
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d036      	beq.n	8005f10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d016      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eaa:	4b15      	ldr	r3, [pc, #84]	; (8005f00 <HAL_RCC_OscConfig+0x248>)
 8005eac:	2201      	movs	r2, #1
 8005eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb0:	f7fc f90a 	bl	80020c8 <HAL_GetTick>
 8005eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eb6:	e008      	b.n	8005eca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005eb8:	f7fc f906 	bl	80020c8 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d901      	bls.n	8005eca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e167      	b.n	800619a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eca:	4b0b      	ldr	r3, [pc, #44]	; (8005ef8 <HAL_RCC_OscConfig+0x240>)
 8005ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d0f0      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x200>
 8005ed6:	e01b      	b.n	8005f10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ed8:	4b09      	ldr	r3, [pc, #36]	; (8005f00 <HAL_RCC_OscConfig+0x248>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ede:	f7fc f8f3 	bl	80020c8 <HAL_GetTick>
 8005ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ee4:	e00e      	b.n	8005f04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ee6:	f7fc f8ef 	bl	80020c8 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d907      	bls.n	8005f04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e150      	b.n	800619a <HAL_RCC_OscConfig+0x4e2>
 8005ef8:	40023800 	.word	0x40023800
 8005efc:	42470000 	.word	0x42470000
 8005f00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f04:	4b88      	ldr	r3, [pc, #544]	; (8006128 <HAL_RCC_OscConfig+0x470>)
 8005f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1ea      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0304 	and.w	r3, r3, #4
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f000 8097 	beq.w	800604c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f22:	4b81      	ldr	r3, [pc, #516]	; (8006128 <HAL_RCC_OscConfig+0x470>)
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10f      	bne.n	8005f4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60bb      	str	r3, [r7, #8]
 8005f32:	4b7d      	ldr	r3, [pc, #500]	; (8006128 <HAL_RCC_OscConfig+0x470>)
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	4a7c      	ldr	r2, [pc, #496]	; (8006128 <HAL_RCC_OscConfig+0x470>)
 8005f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8005f3e:	4b7a      	ldr	r3, [pc, #488]	; (8006128 <HAL_RCC_OscConfig+0x470>)
 8005f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f46:	60bb      	str	r3, [r7, #8]
 8005f48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f4e:	4b77      	ldr	r3, [pc, #476]	; (800612c <HAL_RCC_OscConfig+0x474>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d118      	bne.n	8005f8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f5a:	4b74      	ldr	r3, [pc, #464]	; (800612c <HAL_RCC_OscConfig+0x474>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a73      	ldr	r2, [pc, #460]	; (800612c <HAL_RCC_OscConfig+0x474>)
 8005f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f66:	f7fc f8af 	bl	80020c8 <HAL_GetTick>
 8005f6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f6c:	e008      	b.n	8005f80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f6e:	f7fc f8ab 	bl	80020c8 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e10c      	b.n	800619a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f80:	4b6a      	ldr	r3, [pc, #424]	; (800612c <HAL_RCC_OscConfig+0x474>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d0f0      	beq.n	8005f6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d106      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x2ea>
 8005f94:	4b64      	ldr	r3, [pc, #400]	; (8006128 <HAL_RCC_OscConfig+0x470>)
 8005f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f98:	4a63      	ldr	r2, [pc, #396]	; (8006128 <HAL_RCC_OscConfig+0x470>)
 8005f9a:	f043 0301 	orr.w	r3, r3, #1
 8005f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8005fa0:	e01c      	b.n	8005fdc <HAL_RCC_OscConfig+0x324>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	2b05      	cmp	r3, #5
 8005fa8:	d10c      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x30c>
 8005faa:	4b5f      	ldr	r3, [pc, #380]	; (8006128 <HAL_RCC_OscConfig+0x470>)
 8005fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fae:	4a5e      	ldr	r2, [pc, #376]	; (8006128 <HAL_RCC_OscConfig+0x470>)
 8005fb0:	f043 0304 	orr.w	r3, r3, #4
 8005fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8005fb6:	4b5c      	ldr	r3, [pc, #368]	; (8006128 <HAL_RCC_OscConfig+0x470>)
 8005fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fba:	4a5b      	ldr	r2, [pc, #364]	; (8006128 <HAL_RCC_OscConfig+0x470>)
 8005fbc:	f043 0301 	orr.w	r3, r3, #1
 8005fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8005fc2:	e00b      	b.n	8005fdc <HAL_RCC_OscConfig+0x324>
 8005fc4:	4b58      	ldr	r3, [pc, #352]	; (8006128 <HAL_RCC_OscConfig+0x470>)
 8005fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc8:	4a57      	ldr	r2, [pc, #348]	; (8006128 <HAL_RCC_OscConfig+0x470>)
 8005fca:	f023 0301 	bic.w	r3, r3, #1
 8005fce:	6713      	str	r3, [r2, #112]	; 0x70
 8005fd0:	4b55      	ldr	r3, [pc, #340]	; (8006128 <HAL_RCC_OscConfig+0x470>)
 8005fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd4:	4a54      	ldr	r2, [pc, #336]	; (8006128 <HAL_RCC_OscConfig+0x470>)
 8005fd6:	f023 0304 	bic.w	r3, r3, #4
 8005fda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d015      	beq.n	8006010 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe4:	f7fc f870 	bl	80020c8 <HAL_GetTick>
 8005fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fea:	e00a      	b.n	8006002 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fec:	f7fc f86c 	bl	80020c8 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e0cb      	b.n	800619a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006002:	4b49      	ldr	r3, [pc, #292]	; (8006128 <HAL_RCC_OscConfig+0x470>)
 8006004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0ee      	beq.n	8005fec <HAL_RCC_OscConfig+0x334>
 800600e:	e014      	b.n	800603a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006010:	f7fc f85a 	bl	80020c8 <HAL_GetTick>
 8006014:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006016:	e00a      	b.n	800602e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006018:	f7fc f856 	bl	80020c8 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	f241 3288 	movw	r2, #5000	; 0x1388
 8006026:	4293      	cmp	r3, r2
 8006028:	d901      	bls.n	800602e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e0b5      	b.n	800619a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800602e:	4b3e      	ldr	r3, [pc, #248]	; (8006128 <HAL_RCC_OscConfig+0x470>)
 8006030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1ee      	bne.n	8006018 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800603a:	7dfb      	ldrb	r3, [r7, #23]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d105      	bne.n	800604c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006040:	4b39      	ldr	r3, [pc, #228]	; (8006128 <HAL_RCC_OscConfig+0x470>)
 8006042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006044:	4a38      	ldr	r2, [pc, #224]	; (8006128 <HAL_RCC_OscConfig+0x470>)
 8006046:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800604a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 80a1 	beq.w	8006198 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006056:	4b34      	ldr	r3, [pc, #208]	; (8006128 <HAL_RCC_OscConfig+0x470>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f003 030c 	and.w	r3, r3, #12
 800605e:	2b08      	cmp	r3, #8
 8006060:	d05c      	beq.n	800611c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	2b02      	cmp	r3, #2
 8006068:	d141      	bne.n	80060ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800606a:	4b31      	ldr	r3, [pc, #196]	; (8006130 <HAL_RCC_OscConfig+0x478>)
 800606c:	2200      	movs	r2, #0
 800606e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006070:	f7fc f82a 	bl	80020c8 <HAL_GetTick>
 8006074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006076:	e008      	b.n	800608a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006078:	f7fc f826 	bl	80020c8 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	2b02      	cmp	r3, #2
 8006084:	d901      	bls.n	800608a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e087      	b.n	800619a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800608a:	4b27      	ldr	r3, [pc, #156]	; (8006128 <HAL_RCC_OscConfig+0x470>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1f0      	bne.n	8006078 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	69da      	ldr	r2, [r3, #28]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	431a      	orrs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	019b      	lsls	r3, r3, #6
 80060a6:	431a      	orrs	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ac:	085b      	lsrs	r3, r3, #1
 80060ae:	3b01      	subs	r3, #1
 80060b0:	041b      	lsls	r3, r3, #16
 80060b2:	431a      	orrs	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b8:	061b      	lsls	r3, r3, #24
 80060ba:	491b      	ldr	r1, [pc, #108]	; (8006128 <HAL_RCC_OscConfig+0x470>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060c0:	4b1b      	ldr	r3, [pc, #108]	; (8006130 <HAL_RCC_OscConfig+0x478>)
 80060c2:	2201      	movs	r2, #1
 80060c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c6:	f7fb ffff 	bl	80020c8 <HAL_GetTick>
 80060ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060cc:	e008      	b.n	80060e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060ce:	f7fb fffb 	bl	80020c8 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d901      	bls.n	80060e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e05c      	b.n	800619a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060e0:	4b11      	ldr	r3, [pc, #68]	; (8006128 <HAL_RCC_OscConfig+0x470>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d0f0      	beq.n	80060ce <HAL_RCC_OscConfig+0x416>
 80060ec:	e054      	b.n	8006198 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ee:	4b10      	ldr	r3, [pc, #64]	; (8006130 <HAL_RCC_OscConfig+0x478>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f4:	f7fb ffe8 	bl	80020c8 <HAL_GetTick>
 80060f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060fa:	e008      	b.n	800610e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060fc:	f7fb ffe4 	bl	80020c8 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d901      	bls.n	800610e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e045      	b.n	800619a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800610e:	4b06      	ldr	r3, [pc, #24]	; (8006128 <HAL_RCC_OscConfig+0x470>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1f0      	bne.n	80060fc <HAL_RCC_OscConfig+0x444>
 800611a:	e03d      	b.n	8006198 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d107      	bne.n	8006134 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e038      	b.n	800619a <HAL_RCC_OscConfig+0x4e2>
 8006128:	40023800 	.word	0x40023800
 800612c:	40007000 	.word	0x40007000
 8006130:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006134:	4b1b      	ldr	r3, [pc, #108]	; (80061a4 <HAL_RCC_OscConfig+0x4ec>)
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d028      	beq.n	8006194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800614c:	429a      	cmp	r2, r3
 800614e:	d121      	bne.n	8006194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800615a:	429a      	cmp	r2, r3
 800615c:	d11a      	bne.n	8006194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006164:	4013      	ands	r3, r2
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800616a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800616c:	4293      	cmp	r3, r2
 800616e:	d111      	bne.n	8006194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617a:	085b      	lsrs	r3, r3, #1
 800617c:	3b01      	subs	r3, #1
 800617e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006180:	429a      	cmp	r2, r3
 8006182:	d107      	bne.n	8006194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006190:	429a      	cmp	r2, r3
 8006192:	d001      	beq.n	8006198 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e000      	b.n	800619a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	40023800 	.word	0x40023800

080061a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e0cc      	b.n	8006356 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061bc:	4b68      	ldr	r3, [pc, #416]	; (8006360 <HAL_RCC_ClockConfig+0x1b8>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0307 	and.w	r3, r3, #7
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d90c      	bls.n	80061e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ca:	4b65      	ldr	r3, [pc, #404]	; (8006360 <HAL_RCC_ClockConfig+0x1b8>)
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061d2:	4b63      	ldr	r3, [pc, #396]	; (8006360 <HAL_RCC_ClockConfig+0x1b8>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0307 	and.w	r3, r3, #7
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d001      	beq.n	80061e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e0b8      	b.n	8006356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0302 	and.w	r3, r3, #2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d020      	beq.n	8006232 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0304 	and.w	r3, r3, #4
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d005      	beq.n	8006208 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061fc:	4b59      	ldr	r3, [pc, #356]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	4a58      	ldr	r2, [pc, #352]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 8006202:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006206:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0308 	and.w	r3, r3, #8
 8006210:	2b00      	cmp	r3, #0
 8006212:	d005      	beq.n	8006220 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006214:	4b53      	ldr	r3, [pc, #332]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	4a52      	ldr	r2, [pc, #328]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 800621a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800621e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006220:	4b50      	ldr	r3, [pc, #320]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	494d      	ldr	r1, [pc, #308]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 800622e:	4313      	orrs	r3, r2
 8006230:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d044      	beq.n	80062c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d107      	bne.n	8006256 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006246:	4b47      	ldr	r3, [pc, #284]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d119      	bne.n	8006286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e07f      	b.n	8006356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	2b02      	cmp	r3, #2
 800625c:	d003      	beq.n	8006266 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006262:	2b03      	cmp	r3, #3
 8006264:	d107      	bne.n	8006276 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006266:	4b3f      	ldr	r3, [pc, #252]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d109      	bne.n	8006286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e06f      	b.n	8006356 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006276:	4b3b      	ldr	r3, [pc, #236]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e067      	b.n	8006356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006286:	4b37      	ldr	r3, [pc, #220]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f023 0203 	bic.w	r2, r3, #3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	4934      	ldr	r1, [pc, #208]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 8006294:	4313      	orrs	r3, r2
 8006296:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006298:	f7fb ff16 	bl	80020c8 <HAL_GetTick>
 800629c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800629e:	e00a      	b.n	80062b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062a0:	f7fb ff12 	bl	80020c8 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d901      	bls.n	80062b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e04f      	b.n	8006356 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062b6:	4b2b      	ldr	r3, [pc, #172]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f003 020c 	and.w	r2, r3, #12
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d1eb      	bne.n	80062a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062c8:	4b25      	ldr	r3, [pc, #148]	; (8006360 <HAL_RCC_ClockConfig+0x1b8>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0307 	and.w	r3, r3, #7
 80062d0:	683a      	ldr	r2, [r7, #0]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d20c      	bcs.n	80062f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062d6:	4b22      	ldr	r3, [pc, #136]	; (8006360 <HAL_RCC_ClockConfig+0x1b8>)
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	b2d2      	uxtb	r2, r2
 80062dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062de:	4b20      	ldr	r3, [pc, #128]	; (8006360 <HAL_RCC_ClockConfig+0x1b8>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0307 	and.w	r3, r3, #7
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d001      	beq.n	80062f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e032      	b.n	8006356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d008      	beq.n	800630e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062fc:	4b19      	ldr	r3, [pc, #100]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	4916      	ldr	r1, [pc, #88]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 800630a:	4313      	orrs	r3, r2
 800630c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0308 	and.w	r3, r3, #8
 8006316:	2b00      	cmp	r3, #0
 8006318:	d009      	beq.n	800632e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800631a:	4b12      	ldr	r3, [pc, #72]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	00db      	lsls	r3, r3, #3
 8006328:	490e      	ldr	r1, [pc, #56]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 800632a:	4313      	orrs	r3, r2
 800632c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800632e:	f000 f821 	bl	8006374 <HAL_RCC_GetSysClockFreq>
 8006332:	4602      	mov	r2, r0
 8006334:	4b0b      	ldr	r3, [pc, #44]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	091b      	lsrs	r3, r3, #4
 800633a:	f003 030f 	and.w	r3, r3, #15
 800633e:	490a      	ldr	r1, [pc, #40]	; (8006368 <HAL_RCC_ClockConfig+0x1c0>)
 8006340:	5ccb      	ldrb	r3, [r1, r3]
 8006342:	fa22 f303 	lsr.w	r3, r2, r3
 8006346:	4a09      	ldr	r2, [pc, #36]	; (800636c <HAL_RCC_ClockConfig+0x1c4>)
 8006348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800634a:	4b09      	ldr	r3, [pc, #36]	; (8006370 <HAL_RCC_ClockConfig+0x1c8>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4618      	mov	r0, r3
 8006350:	f7fb fe76 	bl	8002040 <HAL_InitTick>

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	40023c00 	.word	0x40023c00
 8006364:	40023800 	.word	0x40023800
 8006368:	080115f4 	.word	0x080115f4
 800636c:	20000000 	.word	0x20000000
 8006370:	20000004 	.word	0x20000004

08006374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006378:	b094      	sub	sp, #80	; 0x50
 800637a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800637c:	2300      	movs	r3, #0
 800637e:	647b      	str	r3, [r7, #68]	; 0x44
 8006380:	2300      	movs	r3, #0
 8006382:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006384:	2300      	movs	r3, #0
 8006386:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006388:	2300      	movs	r3, #0
 800638a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800638c:	4b79      	ldr	r3, [pc, #484]	; (8006574 <HAL_RCC_GetSysClockFreq+0x200>)
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f003 030c 	and.w	r3, r3, #12
 8006394:	2b08      	cmp	r3, #8
 8006396:	d00d      	beq.n	80063b4 <HAL_RCC_GetSysClockFreq+0x40>
 8006398:	2b08      	cmp	r3, #8
 800639a:	f200 80e1 	bhi.w	8006560 <HAL_RCC_GetSysClockFreq+0x1ec>
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <HAL_RCC_GetSysClockFreq+0x34>
 80063a2:	2b04      	cmp	r3, #4
 80063a4:	d003      	beq.n	80063ae <HAL_RCC_GetSysClockFreq+0x3a>
 80063a6:	e0db      	b.n	8006560 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063a8:	4b73      	ldr	r3, [pc, #460]	; (8006578 <HAL_RCC_GetSysClockFreq+0x204>)
 80063aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80063ac:	e0db      	b.n	8006566 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063ae:	4b73      	ldr	r3, [pc, #460]	; (800657c <HAL_RCC_GetSysClockFreq+0x208>)
 80063b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063b2:	e0d8      	b.n	8006566 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063b4:	4b6f      	ldr	r3, [pc, #444]	; (8006574 <HAL_RCC_GetSysClockFreq+0x200>)
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063be:	4b6d      	ldr	r3, [pc, #436]	; (8006574 <HAL_RCC_GetSysClockFreq+0x200>)
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d063      	beq.n	8006492 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063ca:	4b6a      	ldr	r3, [pc, #424]	; (8006574 <HAL_RCC_GetSysClockFreq+0x200>)
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	099b      	lsrs	r3, r3, #6
 80063d0:	2200      	movs	r2, #0
 80063d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80063d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80063d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063dc:	633b      	str	r3, [r7, #48]	; 0x30
 80063de:	2300      	movs	r3, #0
 80063e0:	637b      	str	r3, [r7, #52]	; 0x34
 80063e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80063e6:	4622      	mov	r2, r4
 80063e8:	462b      	mov	r3, r5
 80063ea:	f04f 0000 	mov.w	r0, #0
 80063ee:	f04f 0100 	mov.w	r1, #0
 80063f2:	0159      	lsls	r1, r3, #5
 80063f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063f8:	0150      	lsls	r0, r2, #5
 80063fa:	4602      	mov	r2, r0
 80063fc:	460b      	mov	r3, r1
 80063fe:	4621      	mov	r1, r4
 8006400:	1a51      	subs	r1, r2, r1
 8006402:	6139      	str	r1, [r7, #16]
 8006404:	4629      	mov	r1, r5
 8006406:	eb63 0301 	sbc.w	r3, r3, r1
 800640a:	617b      	str	r3, [r7, #20]
 800640c:	f04f 0200 	mov.w	r2, #0
 8006410:	f04f 0300 	mov.w	r3, #0
 8006414:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006418:	4659      	mov	r1, fp
 800641a:	018b      	lsls	r3, r1, #6
 800641c:	4651      	mov	r1, sl
 800641e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006422:	4651      	mov	r1, sl
 8006424:	018a      	lsls	r2, r1, #6
 8006426:	4651      	mov	r1, sl
 8006428:	ebb2 0801 	subs.w	r8, r2, r1
 800642c:	4659      	mov	r1, fp
 800642e:	eb63 0901 	sbc.w	r9, r3, r1
 8006432:	f04f 0200 	mov.w	r2, #0
 8006436:	f04f 0300 	mov.w	r3, #0
 800643a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800643e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006442:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006446:	4690      	mov	r8, r2
 8006448:	4699      	mov	r9, r3
 800644a:	4623      	mov	r3, r4
 800644c:	eb18 0303 	adds.w	r3, r8, r3
 8006450:	60bb      	str	r3, [r7, #8]
 8006452:	462b      	mov	r3, r5
 8006454:	eb49 0303 	adc.w	r3, r9, r3
 8006458:	60fb      	str	r3, [r7, #12]
 800645a:	f04f 0200 	mov.w	r2, #0
 800645e:	f04f 0300 	mov.w	r3, #0
 8006462:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006466:	4629      	mov	r1, r5
 8006468:	024b      	lsls	r3, r1, #9
 800646a:	4621      	mov	r1, r4
 800646c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006470:	4621      	mov	r1, r4
 8006472:	024a      	lsls	r2, r1, #9
 8006474:	4610      	mov	r0, r2
 8006476:	4619      	mov	r1, r3
 8006478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800647a:	2200      	movs	r2, #0
 800647c:	62bb      	str	r3, [r7, #40]	; 0x28
 800647e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006480:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006484:	f7fa fc00 	bl	8000c88 <__aeabi_uldivmod>
 8006488:	4602      	mov	r2, r0
 800648a:	460b      	mov	r3, r1
 800648c:	4613      	mov	r3, r2
 800648e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006490:	e058      	b.n	8006544 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006492:	4b38      	ldr	r3, [pc, #224]	; (8006574 <HAL_RCC_GetSysClockFreq+0x200>)
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	099b      	lsrs	r3, r3, #6
 8006498:	2200      	movs	r2, #0
 800649a:	4618      	mov	r0, r3
 800649c:	4611      	mov	r1, r2
 800649e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80064a2:	623b      	str	r3, [r7, #32]
 80064a4:	2300      	movs	r3, #0
 80064a6:	627b      	str	r3, [r7, #36]	; 0x24
 80064a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80064ac:	4642      	mov	r2, r8
 80064ae:	464b      	mov	r3, r9
 80064b0:	f04f 0000 	mov.w	r0, #0
 80064b4:	f04f 0100 	mov.w	r1, #0
 80064b8:	0159      	lsls	r1, r3, #5
 80064ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064be:	0150      	lsls	r0, r2, #5
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4641      	mov	r1, r8
 80064c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80064ca:	4649      	mov	r1, r9
 80064cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80064d0:	f04f 0200 	mov.w	r2, #0
 80064d4:	f04f 0300 	mov.w	r3, #0
 80064d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80064dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80064e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80064e4:	ebb2 040a 	subs.w	r4, r2, sl
 80064e8:	eb63 050b 	sbc.w	r5, r3, fp
 80064ec:	f04f 0200 	mov.w	r2, #0
 80064f0:	f04f 0300 	mov.w	r3, #0
 80064f4:	00eb      	lsls	r3, r5, #3
 80064f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064fa:	00e2      	lsls	r2, r4, #3
 80064fc:	4614      	mov	r4, r2
 80064fe:	461d      	mov	r5, r3
 8006500:	4643      	mov	r3, r8
 8006502:	18e3      	adds	r3, r4, r3
 8006504:	603b      	str	r3, [r7, #0]
 8006506:	464b      	mov	r3, r9
 8006508:	eb45 0303 	adc.w	r3, r5, r3
 800650c:	607b      	str	r3, [r7, #4]
 800650e:	f04f 0200 	mov.w	r2, #0
 8006512:	f04f 0300 	mov.w	r3, #0
 8006516:	e9d7 4500 	ldrd	r4, r5, [r7]
 800651a:	4629      	mov	r1, r5
 800651c:	028b      	lsls	r3, r1, #10
 800651e:	4621      	mov	r1, r4
 8006520:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006524:	4621      	mov	r1, r4
 8006526:	028a      	lsls	r2, r1, #10
 8006528:	4610      	mov	r0, r2
 800652a:	4619      	mov	r1, r3
 800652c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800652e:	2200      	movs	r2, #0
 8006530:	61bb      	str	r3, [r7, #24]
 8006532:	61fa      	str	r2, [r7, #28]
 8006534:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006538:	f7fa fba6 	bl	8000c88 <__aeabi_uldivmod>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	4613      	mov	r3, r2
 8006542:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006544:	4b0b      	ldr	r3, [pc, #44]	; (8006574 <HAL_RCC_GetSysClockFreq+0x200>)
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	0c1b      	lsrs	r3, r3, #16
 800654a:	f003 0303 	and.w	r3, r3, #3
 800654e:	3301      	adds	r3, #1
 8006550:	005b      	lsls	r3, r3, #1
 8006552:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006554:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006558:	fbb2 f3f3 	udiv	r3, r2, r3
 800655c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800655e:	e002      	b.n	8006566 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006560:	4b05      	ldr	r3, [pc, #20]	; (8006578 <HAL_RCC_GetSysClockFreq+0x204>)
 8006562:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006568:	4618      	mov	r0, r3
 800656a:	3750      	adds	r7, #80	; 0x50
 800656c:	46bd      	mov	sp, r7
 800656e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006572:	bf00      	nop
 8006574:	40023800 	.word	0x40023800
 8006578:	00f42400 	.word	0x00f42400
 800657c:	007a1200 	.word	0x007a1200

08006580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006580:	b480      	push	{r7}
 8006582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006584:	4b03      	ldr	r3, [pc, #12]	; (8006594 <HAL_RCC_GetHCLKFreq+0x14>)
 8006586:	681b      	ldr	r3, [r3, #0]
}
 8006588:	4618      	mov	r0, r3
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	20000000 	.word	0x20000000

08006598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800659c:	f7ff fff0 	bl	8006580 <HAL_RCC_GetHCLKFreq>
 80065a0:	4602      	mov	r2, r0
 80065a2:	4b05      	ldr	r3, [pc, #20]	; (80065b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	0a9b      	lsrs	r3, r3, #10
 80065a8:	f003 0307 	and.w	r3, r3, #7
 80065ac:	4903      	ldr	r1, [pc, #12]	; (80065bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80065ae:	5ccb      	ldrb	r3, [r1, r3]
 80065b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	40023800 	.word	0x40023800
 80065bc:	08011604 	.word	0x08011604

080065c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065c4:	f7ff ffdc 	bl	8006580 <HAL_RCC_GetHCLKFreq>
 80065c8:	4602      	mov	r2, r0
 80065ca:	4b05      	ldr	r3, [pc, #20]	; (80065e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	0b5b      	lsrs	r3, r3, #13
 80065d0:	f003 0307 	and.w	r3, r3, #7
 80065d4:	4903      	ldr	r1, [pc, #12]	; (80065e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065d6:	5ccb      	ldrb	r3, [r1, r3]
 80065d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065dc:	4618      	mov	r0, r3
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	40023800 	.word	0x40023800
 80065e4:	08011604 	.word	0x08011604

080065e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065f0:	2300      	movs	r3, #0
 80065f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80065f4:	2300      	movs	r3, #0
 80065f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	2b00      	cmp	r3, #0
 8006602:	d105      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800660c:	2b00      	cmp	r3, #0
 800660e:	d035      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006610:	4b62      	ldr	r3, [pc, #392]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006612:	2200      	movs	r2, #0
 8006614:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006616:	f7fb fd57 	bl	80020c8 <HAL_GetTick>
 800661a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800661c:	e008      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800661e:	f7fb fd53 	bl	80020c8 <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d901      	bls.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e0b0      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006630:	4b5b      	ldr	r3, [pc, #364]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1f0      	bne.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	019a      	lsls	r2, r3, #6
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	071b      	lsls	r3, r3, #28
 8006648:	4955      	ldr	r1, [pc, #340]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800664a:	4313      	orrs	r3, r2
 800664c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006650:	4b52      	ldr	r3, [pc, #328]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006652:	2201      	movs	r2, #1
 8006654:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006656:	f7fb fd37 	bl	80020c8 <HAL_GetTick>
 800665a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800665c:	e008      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800665e:	f7fb fd33 	bl	80020c8 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	2b02      	cmp	r3, #2
 800666a:	d901      	bls.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e090      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006670:	4b4b      	ldr	r3, [pc, #300]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0f0      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 8083 	beq.w	8006790 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800668a:	2300      	movs	r3, #0
 800668c:	60fb      	str	r3, [r7, #12]
 800668e:	4b44      	ldr	r3, [pc, #272]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006692:	4a43      	ldr	r2, [pc, #268]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006698:	6413      	str	r3, [r2, #64]	; 0x40
 800669a:	4b41      	ldr	r3, [pc, #260]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800669c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066a2:	60fb      	str	r3, [r7, #12]
 80066a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80066a6:	4b3f      	ldr	r3, [pc, #252]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a3e      	ldr	r2, [pc, #248]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80066ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80066b2:	f7fb fd09 	bl	80020c8 <HAL_GetTick>
 80066b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80066b8:	e008      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80066ba:	f7fb fd05 	bl	80020c8 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d901      	bls.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e062      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80066cc:	4b35      	ldr	r3, [pc, #212]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d0f0      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80066d8:	4b31      	ldr	r3, [pc, #196]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066e0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d02f      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d028      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066f6:	4b2a      	ldr	r3, [pc, #168]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006700:	4b29      	ldr	r3, [pc, #164]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006702:	2201      	movs	r2, #1
 8006704:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006706:	4b28      	ldr	r3, [pc, #160]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006708:	2200      	movs	r2, #0
 800670a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800670c:	4a24      	ldr	r2, [pc, #144]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006712:	4b23      	ldr	r3, [pc, #140]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b01      	cmp	r3, #1
 800671c:	d114      	bne.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800671e:	f7fb fcd3 	bl	80020c8 <HAL_GetTick>
 8006722:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006724:	e00a      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006726:	f7fb fccf 	bl	80020c8 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	f241 3288 	movw	r2, #5000	; 0x1388
 8006734:	4293      	cmp	r3, r2
 8006736:	d901      	bls.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e02a      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800673c:	4b18      	ldr	r3, [pc, #96]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800673e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b00      	cmp	r3, #0
 8006746:	d0ee      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006750:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006754:	d10d      	bne.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006756:	4b12      	ldr	r3, [pc, #72]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800676a:	490d      	ldr	r1, [pc, #52]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800676c:	4313      	orrs	r3, r2
 800676e:	608b      	str	r3, [r1, #8]
 8006770:	e005      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006772:	4b0b      	ldr	r3, [pc, #44]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	4a0a      	ldr	r2, [pc, #40]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006778:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800677c:	6093      	str	r3, [r2, #8]
 800677e:	4b08      	ldr	r3, [pc, #32]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006780:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800678a:	4905      	ldr	r1, [pc, #20]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800678c:	4313      	orrs	r3, r2
 800678e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3718      	adds	r7, #24
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	42470068 	.word	0x42470068
 80067a0:	40023800 	.word	0x40023800
 80067a4:	40007000 	.word	0x40007000
 80067a8:	42470e40 	.word	0x42470e40

080067ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80067b8:	2300      	movs	r3, #0
 80067ba:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80067bc:	2300      	movs	r3, #0
 80067be:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d13f      	bne.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80067ca:	4b24      	ldr	r3, [pc, #144]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067d2:	60fb      	str	r3, [r7, #12]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d006      	beq.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067e0:	d12f      	bne.n	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80067e2:	4b1f      	ldr	r3, [pc, #124]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80067e4:	617b      	str	r3, [r7, #20]
          break;
 80067e6:	e02f      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80067e8:	4b1c      	ldr	r3, [pc, #112]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067f4:	d108      	bne.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80067f6:	4b19      	ldr	r3, [pc, #100]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067fe:	4a19      	ldr	r2, [pc, #100]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006800:	fbb2 f3f3 	udiv	r3, r2, r3
 8006804:	613b      	str	r3, [r7, #16]
 8006806:	e007      	b.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006808:	4b14      	ldr	r3, [pc, #80]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006810:	4a15      	ldr	r2, [pc, #84]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006812:	fbb2 f3f3 	udiv	r3, r2, r3
 8006816:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006818:	4b10      	ldr	r3, [pc, #64]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800681a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800681e:	099b      	lsrs	r3, r3, #6
 8006820:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	fb02 f303 	mul.w	r3, r2, r3
 800682a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800682c:	4b0b      	ldr	r3, [pc, #44]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800682e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006832:	0f1b      	lsrs	r3, r3, #28
 8006834:	f003 0307 	and.w	r3, r3, #7
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	fbb2 f3f3 	udiv	r3, r2, r3
 800683e:	617b      	str	r3, [r7, #20]
          break;
 8006840:	e002      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006842:	2300      	movs	r3, #0
 8006844:	617b      	str	r3, [r7, #20]
          break;
 8006846:	bf00      	nop
        }
      }
      break;
 8006848:	e000      	b.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 800684a:	bf00      	nop
    }
  }
  return frequency;
 800684c:	697b      	ldr	r3, [r7, #20]
}
 800684e:	4618      	mov	r0, r3
 8006850:	371c      	adds	r7, #28
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	40023800 	.word	0x40023800
 8006860:	00bb8000 	.word	0x00bb8000
 8006864:	007a1200 	.word	0x007a1200
 8006868:	00f42400 	.word	0x00f42400

0800686c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d101      	bne.n	800687e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e07b      	b.n	8006976 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006882:	2b00      	cmp	r3, #0
 8006884:	d108      	bne.n	8006898 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800688e:	d009      	beq.n	80068a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	61da      	str	r2, [r3, #28]
 8006896:	e005      	b.n	80068a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d106      	bne.n	80068c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7fb f8d2 	bl	8001a68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2202      	movs	r2, #2
 80068c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80068ec:	431a      	orrs	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068f6:	431a      	orrs	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	f003 0302 	and.w	r3, r3, #2
 8006900:	431a      	orrs	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	431a      	orrs	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006914:	431a      	orrs	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800691e:	431a      	orrs	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006928:	ea42 0103 	orr.w	r1, r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006930:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	430a      	orrs	r2, r1
 800693a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	0c1b      	lsrs	r3, r3, #16
 8006942:	f003 0104 	and.w	r1, r3, #4
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	f003 0210 	and.w	r2, r3, #16
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	69da      	ldr	r2, [r3, #28]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006964:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b082      	sub	sp, #8
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e041      	b.n	8006a14 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	d106      	bne.n	80069aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f7fb f8a7 	bl	8001af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2202      	movs	r2, #2
 80069ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	3304      	adds	r3, #4
 80069ba:	4619      	mov	r1, r3
 80069bc:	4610      	mov	r0, r2
 80069be:	f000 fad9 	bl	8006f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e041      	b.n	8006ab2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d106      	bne.n	8006a48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f839 	bl	8006aba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3304      	adds	r3, #4
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	f000 fa8a 	bl	8006f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b083      	sub	sp, #12
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006ac2:	bf00      	nop
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
	...

08006ad0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d109      	bne.n	8006af4 <HAL_TIM_PWM_Start+0x24>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	bf14      	ite	ne
 8006aec:	2301      	movne	r3, #1
 8006aee:	2300      	moveq	r3, #0
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	e022      	b.n	8006b3a <HAL_TIM_PWM_Start+0x6a>
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	2b04      	cmp	r3, #4
 8006af8:	d109      	bne.n	8006b0e <HAL_TIM_PWM_Start+0x3e>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	bf14      	ite	ne
 8006b06:	2301      	movne	r3, #1
 8006b08:	2300      	moveq	r3, #0
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	e015      	b.n	8006b3a <HAL_TIM_PWM_Start+0x6a>
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	2b08      	cmp	r3, #8
 8006b12:	d109      	bne.n	8006b28 <HAL_TIM_PWM_Start+0x58>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	bf14      	ite	ne
 8006b20:	2301      	movne	r3, #1
 8006b22:	2300      	moveq	r3, #0
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	e008      	b.n	8006b3a <HAL_TIM_PWM_Start+0x6a>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	bf14      	ite	ne
 8006b34:	2301      	movne	r3, #1
 8006b36:	2300      	moveq	r3, #0
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e07c      	b.n	8006c3c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d104      	bne.n	8006b52 <HAL_TIM_PWM_Start+0x82>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b50:	e013      	b.n	8006b7a <HAL_TIM_PWM_Start+0xaa>
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2b04      	cmp	r3, #4
 8006b56:	d104      	bne.n	8006b62 <HAL_TIM_PWM_Start+0x92>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b60:	e00b      	b.n	8006b7a <HAL_TIM_PWM_Start+0xaa>
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	2b08      	cmp	r3, #8
 8006b66:	d104      	bne.n	8006b72 <HAL_TIM_PWM_Start+0xa2>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b70:	e003      	b.n	8006b7a <HAL_TIM_PWM_Start+0xaa>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2202      	movs	r2, #2
 8006b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 fcec 	bl	8007560 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a2d      	ldr	r2, [pc, #180]	; (8006c44 <HAL_TIM_PWM_Start+0x174>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d004      	beq.n	8006b9c <HAL_TIM_PWM_Start+0xcc>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a2c      	ldr	r2, [pc, #176]	; (8006c48 <HAL_TIM_PWM_Start+0x178>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d101      	bne.n	8006ba0 <HAL_TIM_PWM_Start+0xd0>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e000      	b.n	8006ba2 <HAL_TIM_PWM_Start+0xd2>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d007      	beq.n	8006bb6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a22      	ldr	r2, [pc, #136]	; (8006c44 <HAL_TIM_PWM_Start+0x174>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d022      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x136>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bc8:	d01d      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x136>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a1f      	ldr	r2, [pc, #124]	; (8006c4c <HAL_TIM_PWM_Start+0x17c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d018      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x136>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a1d      	ldr	r2, [pc, #116]	; (8006c50 <HAL_TIM_PWM_Start+0x180>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d013      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x136>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a1c      	ldr	r2, [pc, #112]	; (8006c54 <HAL_TIM_PWM_Start+0x184>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d00e      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x136>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a16      	ldr	r2, [pc, #88]	; (8006c48 <HAL_TIM_PWM_Start+0x178>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d009      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x136>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a18      	ldr	r2, [pc, #96]	; (8006c58 <HAL_TIM_PWM_Start+0x188>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d004      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x136>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a16      	ldr	r2, [pc, #88]	; (8006c5c <HAL_TIM_PWM_Start+0x18c>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d111      	bne.n	8006c2a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2b06      	cmp	r3, #6
 8006c16:	d010      	beq.n	8006c3a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f042 0201 	orr.w	r2, r2, #1
 8006c26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c28:	e007      	b.n	8006c3a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f042 0201 	orr.w	r2, r2, #1
 8006c38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	40010000 	.word	0x40010000
 8006c48:	40010400 	.word	0x40010400
 8006c4c:	40000400 	.word	0x40000400
 8006c50:	40000800 	.word	0x40000800
 8006c54:	40000c00 	.word	0x40000c00
 8006c58:	40014000 	.word	0x40014000
 8006c5c:	40001800 	.word	0x40001800

08006c60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d101      	bne.n	8006c7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	e0ae      	b.n	8006ddc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b0c      	cmp	r3, #12
 8006c8a:	f200 809f 	bhi.w	8006dcc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006c8e:	a201      	add	r2, pc, #4	; (adr r2, 8006c94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c94:	08006cc9 	.word	0x08006cc9
 8006c98:	08006dcd 	.word	0x08006dcd
 8006c9c:	08006dcd 	.word	0x08006dcd
 8006ca0:	08006dcd 	.word	0x08006dcd
 8006ca4:	08006d09 	.word	0x08006d09
 8006ca8:	08006dcd 	.word	0x08006dcd
 8006cac:	08006dcd 	.word	0x08006dcd
 8006cb0:	08006dcd 	.word	0x08006dcd
 8006cb4:	08006d4b 	.word	0x08006d4b
 8006cb8:	08006dcd 	.word	0x08006dcd
 8006cbc:	08006dcd 	.word	0x08006dcd
 8006cc0:	08006dcd 	.word	0x08006dcd
 8006cc4:	08006d8b 	.word	0x08006d8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68b9      	ldr	r1, [r7, #8]
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 f9fc 	bl	80070cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	699a      	ldr	r2, [r3, #24]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f042 0208 	orr.w	r2, r2, #8
 8006ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	699a      	ldr	r2, [r3, #24]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 0204 	bic.w	r2, r2, #4
 8006cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6999      	ldr	r1, [r3, #24]
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	691a      	ldr	r2, [r3, #16]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	619a      	str	r2, [r3, #24]
      break;
 8006d06:	e064      	b.n	8006dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68b9      	ldr	r1, [r7, #8]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 fa4c 	bl	80071ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	699a      	ldr	r2, [r3, #24]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	699a      	ldr	r2, [r3, #24]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6999      	ldr	r1, [r3, #24]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	021a      	lsls	r2, r3, #8
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	430a      	orrs	r2, r1
 8006d46:	619a      	str	r2, [r3, #24]
      break;
 8006d48:	e043      	b.n	8006dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68b9      	ldr	r1, [r7, #8]
 8006d50:	4618      	mov	r0, r3
 8006d52:	f000 faa1 	bl	8007298 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	69da      	ldr	r2, [r3, #28]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f042 0208 	orr.w	r2, r2, #8
 8006d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	69da      	ldr	r2, [r3, #28]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f022 0204 	bic.w	r2, r2, #4
 8006d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	69d9      	ldr	r1, [r3, #28]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	691a      	ldr	r2, [r3, #16]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	61da      	str	r2, [r3, #28]
      break;
 8006d88:	e023      	b.n	8006dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68b9      	ldr	r1, [r7, #8]
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 faf5 	bl	8007380 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	69da      	ldr	r2, [r3, #28]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	69da      	ldr	r2, [r3, #28]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	69d9      	ldr	r1, [r3, #28]
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	021a      	lsls	r2, r3, #8
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	61da      	str	r2, [r3, #28]
      break;
 8006dca:	e002      	b.n	8006dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	75fb      	strb	r3, [r7, #23]
      break;
 8006dd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3718      	adds	r7, #24
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d101      	bne.n	8006e00 <HAL_TIM_ConfigClockSource+0x1c>
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	e0b4      	b.n	8006f6a <HAL_TIM_ConfigClockSource+0x186>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e38:	d03e      	beq.n	8006eb8 <HAL_TIM_ConfigClockSource+0xd4>
 8006e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e3e:	f200 8087 	bhi.w	8006f50 <HAL_TIM_ConfigClockSource+0x16c>
 8006e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e46:	f000 8086 	beq.w	8006f56 <HAL_TIM_ConfigClockSource+0x172>
 8006e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e4e:	d87f      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x16c>
 8006e50:	2b70      	cmp	r3, #112	; 0x70
 8006e52:	d01a      	beq.n	8006e8a <HAL_TIM_ConfigClockSource+0xa6>
 8006e54:	2b70      	cmp	r3, #112	; 0x70
 8006e56:	d87b      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x16c>
 8006e58:	2b60      	cmp	r3, #96	; 0x60
 8006e5a:	d050      	beq.n	8006efe <HAL_TIM_ConfigClockSource+0x11a>
 8006e5c:	2b60      	cmp	r3, #96	; 0x60
 8006e5e:	d877      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x16c>
 8006e60:	2b50      	cmp	r3, #80	; 0x50
 8006e62:	d03c      	beq.n	8006ede <HAL_TIM_ConfigClockSource+0xfa>
 8006e64:	2b50      	cmp	r3, #80	; 0x50
 8006e66:	d873      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x16c>
 8006e68:	2b40      	cmp	r3, #64	; 0x40
 8006e6a:	d058      	beq.n	8006f1e <HAL_TIM_ConfigClockSource+0x13a>
 8006e6c:	2b40      	cmp	r3, #64	; 0x40
 8006e6e:	d86f      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x16c>
 8006e70:	2b30      	cmp	r3, #48	; 0x30
 8006e72:	d064      	beq.n	8006f3e <HAL_TIM_ConfigClockSource+0x15a>
 8006e74:	2b30      	cmp	r3, #48	; 0x30
 8006e76:	d86b      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x16c>
 8006e78:	2b20      	cmp	r3, #32
 8006e7a:	d060      	beq.n	8006f3e <HAL_TIM_ConfigClockSource+0x15a>
 8006e7c:	2b20      	cmp	r3, #32
 8006e7e:	d867      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x16c>
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d05c      	beq.n	8006f3e <HAL_TIM_ConfigClockSource+0x15a>
 8006e84:	2b10      	cmp	r3, #16
 8006e86:	d05a      	beq.n	8006f3e <HAL_TIM_ConfigClockSource+0x15a>
 8006e88:	e062      	b.n	8006f50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e9a:	f000 fb41 	bl	8007520 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006eac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	609a      	str	r2, [r3, #8]
      break;
 8006eb6:	e04f      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ec8:	f000 fb2a 	bl	8007520 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	689a      	ldr	r2, [r3, #8]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006eda:	609a      	str	r2, [r3, #8]
      break;
 8006edc:	e03c      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eea:	461a      	mov	r2, r3
 8006eec:	f000 fa9e 	bl	800742c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2150      	movs	r1, #80	; 0x50
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 faf7 	bl	80074ea <TIM_ITRx_SetConfig>
      break;
 8006efc:	e02c      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	f000 fabd 	bl	800748a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2160      	movs	r1, #96	; 0x60
 8006f16:	4618      	mov	r0, r3
 8006f18:	f000 fae7 	bl	80074ea <TIM_ITRx_SetConfig>
      break;
 8006f1c:	e01c      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	f000 fa7e 	bl	800742c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2140      	movs	r1, #64	; 0x40
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 fad7 	bl	80074ea <TIM_ITRx_SetConfig>
      break;
 8006f3c:	e00c      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4619      	mov	r1, r3
 8006f48:	4610      	mov	r0, r2
 8006f4a:	f000 face 	bl	80074ea <TIM_ITRx_SetConfig>
      break;
 8006f4e:	e003      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	73fb      	strb	r3, [r7, #15]
      break;
 8006f54:	e000      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
	...

08006f74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a46      	ldr	r2, [pc, #280]	; (80070a0 <TIM_Base_SetConfig+0x12c>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d013      	beq.n	8006fb4 <TIM_Base_SetConfig+0x40>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f92:	d00f      	beq.n	8006fb4 <TIM_Base_SetConfig+0x40>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a43      	ldr	r2, [pc, #268]	; (80070a4 <TIM_Base_SetConfig+0x130>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d00b      	beq.n	8006fb4 <TIM_Base_SetConfig+0x40>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a42      	ldr	r2, [pc, #264]	; (80070a8 <TIM_Base_SetConfig+0x134>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d007      	beq.n	8006fb4 <TIM_Base_SetConfig+0x40>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a41      	ldr	r2, [pc, #260]	; (80070ac <TIM_Base_SetConfig+0x138>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d003      	beq.n	8006fb4 <TIM_Base_SetConfig+0x40>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a40      	ldr	r2, [pc, #256]	; (80070b0 <TIM_Base_SetConfig+0x13c>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d108      	bne.n	8006fc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a35      	ldr	r2, [pc, #212]	; (80070a0 <TIM_Base_SetConfig+0x12c>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d02b      	beq.n	8007026 <TIM_Base_SetConfig+0xb2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fd4:	d027      	beq.n	8007026 <TIM_Base_SetConfig+0xb2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a32      	ldr	r2, [pc, #200]	; (80070a4 <TIM_Base_SetConfig+0x130>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d023      	beq.n	8007026 <TIM_Base_SetConfig+0xb2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a31      	ldr	r2, [pc, #196]	; (80070a8 <TIM_Base_SetConfig+0x134>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d01f      	beq.n	8007026 <TIM_Base_SetConfig+0xb2>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a30      	ldr	r2, [pc, #192]	; (80070ac <TIM_Base_SetConfig+0x138>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d01b      	beq.n	8007026 <TIM_Base_SetConfig+0xb2>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a2f      	ldr	r2, [pc, #188]	; (80070b0 <TIM_Base_SetConfig+0x13c>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d017      	beq.n	8007026 <TIM_Base_SetConfig+0xb2>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a2e      	ldr	r2, [pc, #184]	; (80070b4 <TIM_Base_SetConfig+0x140>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d013      	beq.n	8007026 <TIM_Base_SetConfig+0xb2>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a2d      	ldr	r2, [pc, #180]	; (80070b8 <TIM_Base_SetConfig+0x144>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d00f      	beq.n	8007026 <TIM_Base_SetConfig+0xb2>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a2c      	ldr	r2, [pc, #176]	; (80070bc <TIM_Base_SetConfig+0x148>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d00b      	beq.n	8007026 <TIM_Base_SetConfig+0xb2>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a2b      	ldr	r2, [pc, #172]	; (80070c0 <TIM_Base_SetConfig+0x14c>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d007      	beq.n	8007026 <TIM_Base_SetConfig+0xb2>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a2a      	ldr	r2, [pc, #168]	; (80070c4 <TIM_Base_SetConfig+0x150>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d003      	beq.n	8007026 <TIM_Base_SetConfig+0xb2>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a29      	ldr	r2, [pc, #164]	; (80070c8 <TIM_Base_SetConfig+0x154>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d108      	bne.n	8007038 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800702c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	4313      	orrs	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	4313      	orrs	r3, r2
 8007044:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a10      	ldr	r2, [pc, #64]	; (80070a0 <TIM_Base_SetConfig+0x12c>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d003      	beq.n	800706c <TIM_Base_SetConfig+0xf8>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a12      	ldr	r2, [pc, #72]	; (80070b0 <TIM_Base_SetConfig+0x13c>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d103      	bne.n	8007074 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	691a      	ldr	r2, [r3, #16]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b01      	cmp	r3, #1
 8007084:	d105      	bne.n	8007092 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	f023 0201 	bic.w	r2, r3, #1
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	611a      	str	r2, [r3, #16]
  }
}
 8007092:	bf00      	nop
 8007094:	3714      	adds	r7, #20
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	40010000 	.word	0x40010000
 80070a4:	40000400 	.word	0x40000400
 80070a8:	40000800 	.word	0x40000800
 80070ac:	40000c00 	.word	0x40000c00
 80070b0:	40010400 	.word	0x40010400
 80070b4:	40014000 	.word	0x40014000
 80070b8:	40014400 	.word	0x40014400
 80070bc:	40014800 	.word	0x40014800
 80070c0:	40001800 	.word	0x40001800
 80070c4:	40001c00 	.word	0x40001c00
 80070c8:	40002000 	.word	0x40002000

080070cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a1b      	ldr	r3, [r3, #32]
 80070e0:	f023 0201 	bic.w	r2, r3, #1
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f023 0303 	bic.w	r3, r3, #3
 8007102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	4313      	orrs	r3, r2
 800710c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f023 0302 	bic.w	r3, r3, #2
 8007114:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	4313      	orrs	r3, r2
 800711e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a20      	ldr	r2, [pc, #128]	; (80071a4 <TIM_OC1_SetConfig+0xd8>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d003      	beq.n	8007130 <TIM_OC1_SetConfig+0x64>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a1f      	ldr	r2, [pc, #124]	; (80071a8 <TIM_OC1_SetConfig+0xdc>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d10c      	bne.n	800714a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	f023 0308 	bic.w	r3, r3, #8
 8007136:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	4313      	orrs	r3, r2
 8007140:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f023 0304 	bic.w	r3, r3, #4
 8007148:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a15      	ldr	r2, [pc, #84]	; (80071a4 <TIM_OC1_SetConfig+0xd8>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d003      	beq.n	800715a <TIM_OC1_SetConfig+0x8e>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a14      	ldr	r2, [pc, #80]	; (80071a8 <TIM_OC1_SetConfig+0xdc>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d111      	bne.n	800717e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007160:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007168:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	4313      	orrs	r3, r2
 8007172:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	4313      	orrs	r3, r2
 800717c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	621a      	str	r2, [r3, #32]
}
 8007198:	bf00      	nop
 800719a:	371c      	adds	r7, #28
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	40010000 	.word	0x40010000
 80071a8:	40010400 	.word	0x40010400

080071ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	f023 0210 	bic.w	r2, r3, #16
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	021b      	lsls	r3, r3, #8
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	f023 0320 	bic.w	r3, r3, #32
 80071f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	011b      	lsls	r3, r3, #4
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	4313      	orrs	r3, r2
 8007202:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a22      	ldr	r2, [pc, #136]	; (8007290 <TIM_OC2_SetConfig+0xe4>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d003      	beq.n	8007214 <TIM_OC2_SetConfig+0x68>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a21      	ldr	r2, [pc, #132]	; (8007294 <TIM_OC2_SetConfig+0xe8>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d10d      	bne.n	8007230 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800721a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	011b      	lsls	r3, r3, #4
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	4313      	orrs	r3, r2
 8007226:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800722e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a17      	ldr	r2, [pc, #92]	; (8007290 <TIM_OC2_SetConfig+0xe4>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d003      	beq.n	8007240 <TIM_OC2_SetConfig+0x94>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a16      	ldr	r2, [pc, #88]	; (8007294 <TIM_OC2_SetConfig+0xe8>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d113      	bne.n	8007268 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007246:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800724e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	4313      	orrs	r3, r2
 800725a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	4313      	orrs	r3, r2
 8007266:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	685a      	ldr	r2, [r3, #4]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	621a      	str	r2, [r3, #32]
}
 8007282:	bf00      	nop
 8007284:	371c      	adds	r7, #28
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	40010000 	.word	0x40010000
 8007294:	40010400 	.word	0x40010400

08007298 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007298:	b480      	push	{r7}
 800729a:	b087      	sub	sp, #28
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a1b      	ldr	r3, [r3, #32]
 80072ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f023 0303 	bic.w	r3, r3, #3
 80072ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	021b      	lsls	r3, r3, #8
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a21      	ldr	r2, [pc, #132]	; (8007378 <TIM_OC3_SetConfig+0xe0>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d003      	beq.n	80072fe <TIM_OC3_SetConfig+0x66>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a20      	ldr	r2, [pc, #128]	; (800737c <TIM_OC3_SetConfig+0xe4>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d10d      	bne.n	800731a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007304:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	021b      	lsls	r3, r3, #8
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	4313      	orrs	r3, r2
 8007310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a16      	ldr	r2, [pc, #88]	; (8007378 <TIM_OC3_SetConfig+0xe0>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d003      	beq.n	800732a <TIM_OC3_SetConfig+0x92>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a15      	ldr	r2, [pc, #84]	; (800737c <TIM_OC3_SetConfig+0xe4>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d113      	bne.n	8007352 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007330:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007338:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	011b      	lsls	r3, r3, #4
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	4313      	orrs	r3, r2
 8007344:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	011b      	lsls	r3, r3, #4
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	4313      	orrs	r3, r2
 8007350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	621a      	str	r2, [r3, #32]
}
 800736c:	bf00      	nop
 800736e:	371c      	adds	r7, #28
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr
 8007378:	40010000 	.word	0x40010000
 800737c:	40010400 	.word	0x40010400

08007380 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	69db      	ldr	r3, [r3, #28]
 80073a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	021b      	lsls	r3, r3, #8
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	031b      	lsls	r3, r3, #12
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a12      	ldr	r2, [pc, #72]	; (8007424 <TIM_OC4_SetConfig+0xa4>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d003      	beq.n	80073e8 <TIM_OC4_SetConfig+0x68>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a11      	ldr	r2, [pc, #68]	; (8007428 <TIM_OC4_SetConfig+0xa8>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d109      	bne.n	80073fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	695b      	ldr	r3, [r3, #20]
 80073f4:	019b      	lsls	r3, r3, #6
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	621a      	str	r2, [r3, #32]
}
 8007416:	bf00      	nop
 8007418:	371c      	adds	r7, #28
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	40010000 	.word	0x40010000
 8007428:	40010400 	.word	0x40010400

0800742c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800742c:	b480      	push	{r7}
 800742e:	b087      	sub	sp, #28
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6a1b      	ldr	r3, [r3, #32]
 800743c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	f023 0201 	bic.w	r2, r3, #1
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007456:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	011b      	lsls	r3, r3, #4
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	4313      	orrs	r3, r2
 8007460:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f023 030a 	bic.w	r3, r3, #10
 8007468:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	4313      	orrs	r3, r2
 8007470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	693a      	ldr	r2, [r7, #16]
 8007476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	621a      	str	r2, [r3, #32]
}
 800747e:	bf00      	nop
 8007480:	371c      	adds	r7, #28
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800748a:	b480      	push	{r7}
 800748c:	b087      	sub	sp, #28
 800748e:	af00      	add	r7, sp, #0
 8007490:	60f8      	str	r0, [r7, #12]
 8007492:	60b9      	str	r1, [r7, #8]
 8007494:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6a1b      	ldr	r3, [r3, #32]
 80074a0:	f023 0210 	bic.w	r2, r3, #16
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	031b      	lsls	r3, r3, #12
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	4313      	orrs	r3, r2
 80074be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	011b      	lsls	r3, r3, #4
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	621a      	str	r2, [r3, #32]
}
 80074de:	bf00      	nop
 80074e0:	371c      	adds	r7, #28
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b085      	sub	sp, #20
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007500:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	4313      	orrs	r3, r2
 8007508:	f043 0307 	orr.w	r3, r3, #7
 800750c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	609a      	str	r2, [r3, #8]
}
 8007514:	bf00      	nop
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
 800752c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800753a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	021a      	lsls	r2, r3, #8
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	431a      	orrs	r2, r3
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	4313      	orrs	r3, r2
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	4313      	orrs	r3, r2
 800754c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	609a      	str	r2, [r3, #8]
}
 8007554:	bf00      	nop
 8007556:	371c      	adds	r7, #28
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007560:	b480      	push	{r7}
 8007562:	b087      	sub	sp, #28
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	f003 031f 	and.w	r3, r3, #31
 8007572:	2201      	movs	r2, #1
 8007574:	fa02 f303 	lsl.w	r3, r2, r3
 8007578:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6a1a      	ldr	r2, [r3, #32]
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	43db      	mvns	r3, r3
 8007582:	401a      	ands	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6a1a      	ldr	r2, [r3, #32]
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	f003 031f 	and.w	r3, r3, #31
 8007592:	6879      	ldr	r1, [r7, #4]
 8007594:	fa01 f303 	lsl.w	r3, r1, r3
 8007598:	431a      	orrs	r2, r3
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	621a      	str	r2, [r3, #32]
}
 800759e:	bf00      	nop
 80075a0:	371c      	adds	r7, #28
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr
	...

080075ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d101      	bne.n	80075c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075c0:	2302      	movs	r3, #2
 80075c2:	e05a      	b.n	800767a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2202      	movs	r2, #2
 80075d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a21      	ldr	r2, [pc, #132]	; (8007688 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d022      	beq.n	800764e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007610:	d01d      	beq.n	800764e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a1d      	ldr	r2, [pc, #116]	; (800768c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d018      	beq.n	800764e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a1b      	ldr	r2, [pc, #108]	; (8007690 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d013      	beq.n	800764e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a1a      	ldr	r2, [pc, #104]	; (8007694 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d00e      	beq.n	800764e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a18      	ldr	r2, [pc, #96]	; (8007698 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d009      	beq.n	800764e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a17      	ldr	r2, [pc, #92]	; (800769c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d004      	beq.n	800764e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a15      	ldr	r2, [pc, #84]	; (80076a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d10c      	bne.n	8007668 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007654:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	4313      	orrs	r3, r2
 800765e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3714      	adds	r7, #20
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	40010000 	.word	0x40010000
 800768c:	40000400 	.word	0x40000400
 8007690:	40000800 	.word	0x40000800
 8007694:	40000c00 	.word	0x40000c00
 8007698:	40010400 	.word	0x40010400
 800769c:	40014000 	.word	0x40014000
 80076a0:	40001800 	.word	0x40001800

080076a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80076ae:	2300      	movs	r3, #0
 80076b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d101      	bne.n	80076c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80076bc:	2302      	movs	r3, #2
 80076be:	e03d      	b.n	800773c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	4313      	orrs	r3, r2
 800770c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	695b      	ldr	r3, [r3, #20]
 8007718:	4313      	orrs	r3, r2
 800771a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	69db      	ldr	r3, [r3, #28]
 8007726:	4313      	orrs	r3, r2
 8007728:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d101      	bne.n	800775a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e042      	b.n	80077e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b00      	cmp	r3, #0
 8007764:	d106      	bne.n	8007774 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7fa fa1e 	bl	8001bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2224      	movs	r2, #36	; 0x24
 8007778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68da      	ldr	r2, [r3, #12]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800778a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 ff4f 	bl	8008630 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	691a      	ldr	r2, [r3, #16]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	695a      	ldr	r2, [r3, #20]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68da      	ldr	r2, [r3, #12]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2220      	movs	r2, #32
 80077cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2220      	movs	r2, #32
 80077d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b08a      	sub	sp, #40	; 0x28
 80077ec:	af02      	add	r7, sp, #8
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	603b      	str	r3, [r7, #0]
 80077f4:	4613      	mov	r3, r2
 80077f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80077f8:	2300      	movs	r3, #0
 80077fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b20      	cmp	r3, #32
 8007806:	d175      	bne.n	80078f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <HAL_UART_Transmit+0x2c>
 800780e:	88fb      	ldrh	r3, [r7, #6]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d101      	bne.n	8007818 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e06e      	b.n	80078f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2221      	movs	r2, #33	; 0x21
 8007822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007826:	f7fa fc4f 	bl	80020c8 <HAL_GetTick>
 800782a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	88fa      	ldrh	r2, [r7, #6]
 8007830:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	88fa      	ldrh	r2, [r7, #6]
 8007836:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007840:	d108      	bne.n	8007854 <HAL_UART_Transmit+0x6c>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d104      	bne.n	8007854 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800784a:	2300      	movs	r3, #0
 800784c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	61bb      	str	r3, [r7, #24]
 8007852:	e003      	b.n	800785c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007858:	2300      	movs	r3, #0
 800785a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800785c:	e02e      	b.n	80078bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	2200      	movs	r2, #0
 8007866:	2180      	movs	r1, #128	; 0x80
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f000 fc27 	bl	80080bc <UART_WaitOnFlagUntilTimeout>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d005      	beq.n	8007880 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2220      	movs	r2, #32
 8007878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	e03a      	b.n	80078f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10b      	bne.n	800789e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	881b      	ldrh	r3, [r3, #0]
 800788a:	461a      	mov	r2, r3
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007894:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	3302      	adds	r3, #2
 800789a:	61bb      	str	r3, [r7, #24]
 800789c:	e007      	b.n	80078ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	781a      	ldrb	r2, [r3, #0]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	3301      	adds	r3, #1
 80078ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	3b01      	subs	r3, #1
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1cb      	bne.n	800785e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	2200      	movs	r2, #0
 80078ce:	2140      	movs	r1, #64	; 0x40
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f000 fbf3 	bl	80080bc <UART_WaitOnFlagUntilTimeout>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d005      	beq.n	80078e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2220      	movs	r2, #32
 80078e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e006      	b.n	80078f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2220      	movs	r2, #32
 80078ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	e000      	b.n	80078f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80078f4:	2302      	movs	r3, #2
  }
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3720      	adds	r7, #32
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	60f8      	str	r0, [r7, #12]
 8007906:	60b9      	str	r1, [r7, #8]
 8007908:	4613      	mov	r3, r2
 800790a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b20      	cmp	r3, #32
 8007916:	d112      	bne.n	800793e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d002      	beq.n	8007924 <HAL_UART_Receive_DMA+0x26>
 800791e:	88fb      	ldrh	r3, [r7, #6]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d101      	bne.n	8007928 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e00b      	b.n	8007940 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800792e:	88fb      	ldrh	r3, [r7, #6]
 8007930:	461a      	mov	r2, r3
 8007932:	68b9      	ldr	r1, [r7, #8]
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f000 fc1b 	bl	8008170 <UART_Start_Receive_DMA>
 800793a:	4603      	mov	r3, r0
 800793c:	e000      	b.n	8007940 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800793e:	2302      	movs	r3, #2
  }
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b0ba      	sub	sp, #232	; 0xe8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	695b      	ldr	r3, [r3, #20]
 800796a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800796e:	2300      	movs	r3, #0
 8007970:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007974:	2300      	movs	r3, #0
 8007976:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800797a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800797e:	f003 030f 	and.w	r3, r3, #15
 8007982:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10f      	bne.n	80079ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800798e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007992:	f003 0320 	and.w	r3, r3, #32
 8007996:	2b00      	cmp	r3, #0
 8007998:	d009      	beq.n	80079ae <HAL_UART_IRQHandler+0x66>
 800799a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800799e:	f003 0320 	and.w	r3, r3, #32
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d003      	beq.n	80079ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fd83 	bl	80084b2 <UART_Receive_IT>
      return;
 80079ac:	e25b      	b.n	8007e66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80079ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 80de 	beq.w	8007b74 <HAL_UART_IRQHandler+0x22c>
 80079b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079bc:	f003 0301 	and.w	r3, r3, #1
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d106      	bne.n	80079d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80079c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 80d1 	beq.w	8007b74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80079d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00b      	beq.n	80079f6 <HAL_UART_IRQHandler+0xae>
 80079de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d005      	beq.n	80079f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ee:	f043 0201 	orr.w	r2, r3, #1
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079fa:	f003 0304 	and.w	r3, r3, #4
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00b      	beq.n	8007a1a <HAL_UART_IRQHandler+0xd2>
 8007a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d005      	beq.n	8007a1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a12:	f043 0202 	orr.w	r2, r3, #2
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a1e:	f003 0302 	and.w	r3, r3, #2
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00b      	beq.n	8007a3e <HAL_UART_IRQHandler+0xf6>
 8007a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a2a:	f003 0301 	and.w	r3, r3, #1
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d005      	beq.n	8007a3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a36:	f043 0204 	orr.w	r2, r3, #4
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a42:	f003 0308 	and.w	r3, r3, #8
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d011      	beq.n	8007a6e <HAL_UART_IRQHandler+0x126>
 8007a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a4e:	f003 0320 	and.w	r3, r3, #32
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d105      	bne.n	8007a62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d005      	beq.n	8007a6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a66:	f043 0208 	orr.w	r2, r3, #8
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f000 81f2 	beq.w	8007e5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a7c:	f003 0320 	and.w	r3, r3, #32
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d008      	beq.n	8007a96 <HAL_UART_IRQHandler+0x14e>
 8007a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a88:	f003 0320 	and.w	r3, r3, #32
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d002      	beq.n	8007a96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fd0e 	bl	80084b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa0:	2b40      	cmp	r3, #64	; 0x40
 8007aa2:	bf0c      	ite	eq
 8007aa4:	2301      	moveq	r3, #1
 8007aa6:	2300      	movne	r3, #0
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ab2:	f003 0308 	and.w	r3, r3, #8
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d103      	bne.n	8007ac2 <HAL_UART_IRQHandler+0x17a>
 8007aba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d04f      	beq.n	8007b62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fc16 	bl	80082f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad2:	2b40      	cmp	r3, #64	; 0x40
 8007ad4:	d141      	bne.n	8007b5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	3314      	adds	r3, #20
 8007adc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ae4:	e853 3f00 	ldrex	r3, [r3]
 8007ae8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007aec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007af4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3314      	adds	r3, #20
 8007afe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b12:	e841 2300 	strex	r3, r2, [r1]
 8007b16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1d9      	bne.n	8007ad6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d013      	beq.n	8007b52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b2e:	4a7e      	ldr	r2, [pc, #504]	; (8007d28 <HAL_UART_IRQHandler+0x3e0>)
 8007b30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fa fd7e 	bl	8002638 <HAL_DMA_Abort_IT>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d016      	beq.n	8007b70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b50:	e00e      	b.n	8007b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f99e 	bl	8007e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b58:	e00a      	b.n	8007b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f99a 	bl	8007e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b60:	e006      	b.n	8007b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f996 	bl	8007e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007b6e:	e175      	b.n	8007e5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b70:	bf00      	nop
    return;
 8007b72:	e173      	b.n	8007e5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	f040 814f 	bne.w	8007e1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b82:	f003 0310 	and.w	r3, r3, #16
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f000 8148 	beq.w	8007e1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b90:	f003 0310 	and.w	r3, r3, #16
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 8141 	beq.w	8007e1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	60bb      	str	r3, [r7, #8]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	60bb      	str	r3, [r7, #8]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	60bb      	str	r3, [r7, #8]
 8007bae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bba:	2b40      	cmp	r3, #64	; 0x40
 8007bbc:	f040 80b6 	bne.w	8007d2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007bcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 8145 	beq.w	8007e60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007bda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bde:	429a      	cmp	r2, r3
 8007be0:	f080 813e 	bcs.w	8007e60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf0:	69db      	ldr	r3, [r3, #28]
 8007bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bf6:	f000 8088 	beq.w	8007d0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	330c      	adds	r3, #12
 8007c00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c08:	e853 3f00 	ldrex	r3, [r3]
 8007c0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	330c      	adds	r3, #12
 8007c22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007c26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c36:	e841 2300 	strex	r3, r2, [r1]
 8007c3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1d9      	bne.n	8007bfa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	3314      	adds	r3, #20
 8007c4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c50:	e853 3f00 	ldrex	r3, [r3]
 8007c54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c58:	f023 0301 	bic.w	r3, r3, #1
 8007c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	3314      	adds	r3, #20
 8007c66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c76:	e841 2300 	strex	r3, r2, [r1]
 8007c7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1e1      	bne.n	8007c46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	3314      	adds	r3, #20
 8007c88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c8c:	e853 3f00 	ldrex	r3, [r3]
 8007c90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	3314      	adds	r3, #20
 8007ca2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007ca6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ca8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007caa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007cac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007cae:	e841 2300 	strex	r3, r2, [r1]
 8007cb2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007cb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1e3      	bne.n	8007c82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2220      	movs	r2, #32
 8007cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	330c      	adds	r3, #12
 8007cce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cd2:	e853 3f00 	ldrex	r3, [r3]
 8007cd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cda:	f023 0310 	bic.w	r3, r3, #16
 8007cde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	330c      	adds	r3, #12
 8007ce8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007cec:	65ba      	str	r2, [r7, #88]	; 0x58
 8007cee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cf2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cf4:	e841 2300 	strex	r3, r2, [r1]
 8007cf8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1e3      	bne.n	8007cc8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7fa fc27 	bl	8002558 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	4619      	mov	r1, r3
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f8c1 	bl	8007ea8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d26:	e09b      	b.n	8007e60 <HAL_UART_IRQHandler+0x518>
 8007d28:	080083bb 	.word	0x080083bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	1ad3      	subs	r3, r2, r3
 8007d38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	f000 808e 	beq.w	8007e64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f000 8089 	beq.w	8007e64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	330c      	adds	r3, #12
 8007d58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5c:	e853 3f00 	ldrex	r3, [r3]
 8007d60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	330c      	adds	r3, #12
 8007d72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007d76:	647a      	str	r2, [r7, #68]	; 0x44
 8007d78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d7e:	e841 2300 	strex	r3, r2, [r1]
 8007d82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1e3      	bne.n	8007d52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3314      	adds	r3, #20
 8007d90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d94:	e853 3f00 	ldrex	r3, [r3]
 8007d98:	623b      	str	r3, [r7, #32]
   return(result);
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	f023 0301 	bic.w	r3, r3, #1
 8007da0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	3314      	adds	r3, #20
 8007daa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007dae:	633a      	str	r2, [r7, #48]	; 0x30
 8007db0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007db6:	e841 2300 	strex	r3, r2, [r1]
 8007dba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1e3      	bne.n	8007d8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2220      	movs	r2, #32
 8007dc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	330c      	adds	r3, #12
 8007dd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	e853 3f00 	ldrex	r3, [r3]
 8007dde:	60fb      	str	r3, [r7, #12]
   return(result);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f023 0310 	bic.w	r3, r3, #16
 8007de6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	330c      	adds	r3, #12
 8007df0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007df4:	61fa      	str	r2, [r7, #28]
 8007df6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df8:	69b9      	ldr	r1, [r7, #24]
 8007dfa:	69fa      	ldr	r2, [r7, #28]
 8007dfc:	e841 2300 	strex	r3, r2, [r1]
 8007e00:	617b      	str	r3, [r7, #20]
   return(result);
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1e3      	bne.n	8007dd0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e12:	4619      	mov	r1, r3
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f847 	bl	8007ea8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e1a:	e023      	b.n	8007e64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d009      	beq.n	8007e3c <HAL_UART_IRQHandler+0x4f4>
 8007e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d003      	beq.n	8007e3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fad4 	bl	80083e2 <UART_Transmit_IT>
    return;
 8007e3a:	e014      	b.n	8007e66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00e      	beq.n	8007e66 <HAL_UART_IRQHandler+0x51e>
 8007e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d008      	beq.n	8007e66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fb14 	bl	8008482 <UART_EndTransmit_IT>
    return;
 8007e5a:	e004      	b.n	8007e66 <HAL_UART_IRQHandler+0x51e>
    return;
 8007e5c:	bf00      	nop
 8007e5e:	e002      	b.n	8007e66 <HAL_UART_IRQHandler+0x51e>
      return;
 8007e60:	bf00      	nop
 8007e62:	e000      	b.n	8007e66 <HAL_UART_IRQHandler+0x51e>
      return;
 8007e64:	bf00      	nop
  }
}
 8007e66:	37e8      	adds	r7, #232	; 0xe8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007e74:	bf00      	nop
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007e88:	bf00      	nop
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b09c      	sub	sp, #112	; 0x70
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ecc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d172      	bne.n	8007fc2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ede:	2200      	movs	r2, #0
 8007ee0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	330c      	adds	r3, #12
 8007ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eec:	e853 3f00 	ldrex	r3, [r3]
 8007ef0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ef8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	330c      	adds	r3, #12
 8007f00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f02:	65ba      	str	r2, [r7, #88]	; 0x58
 8007f04:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f0a:	e841 2300 	strex	r3, r2, [r1]
 8007f0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1e5      	bne.n	8007ee2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	3314      	adds	r3, #20
 8007f1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f20:	e853 3f00 	ldrex	r3, [r3]
 8007f24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f28:	f023 0301 	bic.w	r3, r3, #1
 8007f2c:	667b      	str	r3, [r7, #100]	; 0x64
 8007f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	3314      	adds	r3, #20
 8007f34:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007f36:	647a      	str	r2, [r7, #68]	; 0x44
 8007f38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f3e:	e841 2300 	strex	r3, r2, [r1]
 8007f42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1e5      	bne.n	8007f16 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	3314      	adds	r3, #20
 8007f50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	e853 3f00 	ldrex	r3, [r3]
 8007f58:	623b      	str	r3, [r7, #32]
   return(result);
 8007f5a:	6a3b      	ldr	r3, [r7, #32]
 8007f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f60:	663b      	str	r3, [r7, #96]	; 0x60
 8007f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3314      	adds	r3, #20
 8007f68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f6a:	633a      	str	r2, [r7, #48]	; 0x30
 8007f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f72:	e841 2300 	strex	r3, r2, [r1]
 8007f76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1e5      	bne.n	8007f4a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f80:	2220      	movs	r2, #32
 8007f82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d119      	bne.n	8007fc2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	330c      	adds	r3, #12
 8007f94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	e853 3f00 	ldrex	r3, [r3]
 8007f9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f023 0310 	bic.w	r3, r3, #16
 8007fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	330c      	adds	r3, #12
 8007fac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007fae:	61fa      	str	r2, [r7, #28]
 8007fb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb2:	69b9      	ldr	r1, [r7, #24]
 8007fb4:	69fa      	ldr	r2, [r7, #28]
 8007fb6:	e841 2300 	strex	r3, r2, [r1]
 8007fba:	617b      	str	r3, [r7, #20]
   return(result);
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1e5      	bne.n	8007f8e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d106      	bne.n	8007fde <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fd2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007fd8:	f7ff ff66 	bl	8007ea8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007fdc:	e002      	b.n	8007fe4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007fde:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007fe0:	f7f9 f806 	bl	8000ff0 <HAL_UART_RxCpltCallback>
}
 8007fe4:	bf00      	nop
 8007fe6:	3770      	adds	r7, #112	; 0x70
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008004:	2b01      	cmp	r3, #1
 8008006:	d108      	bne.n	800801a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800800c:	085b      	lsrs	r3, r3, #1
 800800e:	b29b      	uxth	r3, r3
 8008010:	4619      	mov	r1, r3
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f7ff ff48 	bl	8007ea8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008018:	e002      	b.n	8008020 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f7ff ff30 	bl	8007e80 <HAL_UART_RxHalfCpltCallback>
}
 8008020:	bf00      	nop
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008030:	2300      	movs	r3, #0
 8008032:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008038:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	695b      	ldr	r3, [r3, #20]
 8008040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008044:	2b80      	cmp	r3, #128	; 0x80
 8008046:	bf0c      	ite	eq
 8008048:	2301      	moveq	r3, #1
 800804a:	2300      	movne	r3, #0
 800804c:	b2db      	uxtb	r3, r3
 800804e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b21      	cmp	r3, #33	; 0x21
 800805a:	d108      	bne.n	800806e <UART_DMAError+0x46>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d005      	beq.n	800806e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	2200      	movs	r2, #0
 8008066:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008068:	68b8      	ldr	r0, [r7, #8]
 800806a:	f000 f91b 	bl	80082a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008078:	2b40      	cmp	r3, #64	; 0x40
 800807a:	bf0c      	ite	eq
 800807c:	2301      	moveq	r3, #1
 800807e:	2300      	movne	r3, #0
 8008080:	b2db      	uxtb	r3, r3
 8008082:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800808a:	b2db      	uxtb	r3, r3
 800808c:	2b22      	cmp	r3, #34	; 0x22
 800808e:	d108      	bne.n	80080a2 <UART_DMAError+0x7a>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d005      	beq.n	80080a2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	2200      	movs	r2, #0
 800809a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800809c:	68b8      	ldr	r0, [r7, #8]
 800809e:	f000 f929 	bl	80082f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a6:	f043 0210 	orr.w	r2, r3, #16
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080ae:	68b8      	ldr	r0, [r7, #8]
 80080b0:	f7ff fef0 	bl	8007e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080b4:	bf00      	nop
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b086      	sub	sp, #24
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	603b      	str	r3, [r7, #0]
 80080c8:	4613      	mov	r3, r2
 80080ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080cc:	e03b      	b.n	8008146 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080ce:	6a3b      	ldr	r3, [r7, #32]
 80080d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d4:	d037      	beq.n	8008146 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080d6:	f7f9 fff7 	bl	80020c8 <HAL_GetTick>
 80080da:	4602      	mov	r2, r0
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	6a3a      	ldr	r2, [r7, #32]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d302      	bcc.n	80080ec <UART_WaitOnFlagUntilTimeout+0x30>
 80080e6:	6a3b      	ldr	r3, [r7, #32]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d101      	bne.n	80080f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80080ec:	2303      	movs	r3, #3
 80080ee:	e03a      	b.n	8008166 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	f003 0304 	and.w	r3, r3, #4
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d023      	beq.n	8008146 <UART_WaitOnFlagUntilTimeout+0x8a>
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	2b80      	cmp	r3, #128	; 0x80
 8008102:	d020      	beq.n	8008146 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	2b40      	cmp	r3, #64	; 0x40
 8008108:	d01d      	beq.n	8008146 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0308 	and.w	r3, r3, #8
 8008114:	2b08      	cmp	r3, #8
 8008116:	d116      	bne.n	8008146 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008118:	2300      	movs	r3, #0
 800811a:	617b      	str	r3, [r7, #20]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	617b      	str	r3, [r7, #20]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	617b      	str	r3, [r7, #20]
 800812c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f000 f8e0 	bl	80082f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2208      	movs	r2, #8
 8008138:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e00f      	b.n	8008166 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	4013      	ands	r3, r2
 8008150:	68ba      	ldr	r2, [r7, #8]
 8008152:	429a      	cmp	r2, r3
 8008154:	bf0c      	ite	eq
 8008156:	2301      	moveq	r3, #1
 8008158:	2300      	movne	r3, #0
 800815a:	b2db      	uxtb	r3, r3
 800815c:	461a      	mov	r2, r3
 800815e:	79fb      	ldrb	r3, [r7, #7]
 8008160:	429a      	cmp	r2, r3
 8008162:	d0b4      	beq.n	80080ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
	...

08008170 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b098      	sub	sp, #96	; 0x60
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	4613      	mov	r3, r2
 800817c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	88fa      	ldrh	r2, [r7, #6]
 8008188:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2200      	movs	r2, #0
 800818e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2222      	movs	r2, #34	; 0x22
 8008194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800819c:	4a3e      	ldr	r2, [pc, #248]	; (8008298 <UART_Start_Receive_DMA+0x128>)
 800819e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a4:	4a3d      	ldr	r2, [pc, #244]	; (800829c <UART_Start_Receive_DMA+0x12c>)
 80081a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ac:	4a3c      	ldr	r2, [pc, #240]	; (80082a0 <UART_Start_Receive_DMA+0x130>)
 80081ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b4:	2200      	movs	r2, #0
 80081b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80081b8:	f107 0308 	add.w	r3, r7, #8
 80081bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	3304      	adds	r3, #4
 80081c8:	4619      	mov	r1, r3
 80081ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	88fb      	ldrh	r3, [r7, #6]
 80081d0:	f7fa f96a 	bl	80024a8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80081d4:	2300      	movs	r3, #0
 80081d6:	613b      	str	r3, [r7, #16]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	613b      	str	r3, [r7, #16]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	613b      	str	r3, [r7, #16]
 80081e8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d019      	beq.n	8008226 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	330c      	adds	r3, #12
 80081f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081fc:	e853 3f00 	ldrex	r3, [r3]
 8008200:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008208:	65bb      	str	r3, [r7, #88]	; 0x58
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	330c      	adds	r3, #12
 8008210:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008212:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008214:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008216:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008218:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800821a:	e841 2300 	strex	r3, r2, [r1]
 800821e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1e5      	bne.n	80081f2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	3314      	adds	r3, #20
 800822c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008230:	e853 3f00 	ldrex	r3, [r3]
 8008234:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008238:	f043 0301 	orr.w	r3, r3, #1
 800823c:	657b      	str	r3, [r7, #84]	; 0x54
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	3314      	adds	r3, #20
 8008244:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008246:	63ba      	str	r2, [r7, #56]	; 0x38
 8008248:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800824c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800824e:	e841 2300 	strex	r3, r2, [r1]
 8008252:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1e5      	bne.n	8008226 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3314      	adds	r3, #20
 8008260:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	e853 3f00 	ldrex	r3, [r3]
 8008268:	617b      	str	r3, [r7, #20]
   return(result);
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008270:	653b      	str	r3, [r7, #80]	; 0x50
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3314      	adds	r3, #20
 8008278:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800827a:	627a      	str	r2, [r7, #36]	; 0x24
 800827c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827e:	6a39      	ldr	r1, [r7, #32]
 8008280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008282:	e841 2300 	strex	r3, r2, [r1]
 8008286:	61fb      	str	r3, [r7, #28]
   return(result);
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1e5      	bne.n	800825a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3760      	adds	r7, #96	; 0x60
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	08007ec1 	.word	0x08007ec1
 800829c:	08007fed 	.word	0x08007fed
 80082a0:	08008029 	.word	0x08008029

080082a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b089      	sub	sp, #36	; 0x24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	330c      	adds	r3, #12
 80082b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	e853 3f00 	ldrex	r3, [r3]
 80082ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80082c2:	61fb      	str	r3, [r7, #28]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	330c      	adds	r3, #12
 80082ca:	69fa      	ldr	r2, [r7, #28]
 80082cc:	61ba      	str	r2, [r7, #24]
 80082ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d0:	6979      	ldr	r1, [r7, #20]
 80082d2:	69ba      	ldr	r2, [r7, #24]
 80082d4:	e841 2300 	strex	r3, r2, [r1]
 80082d8:	613b      	str	r3, [r7, #16]
   return(result);
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1e5      	bne.n	80082ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2220      	movs	r2, #32
 80082e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80082e8:	bf00      	nop
 80082ea:	3724      	adds	r7, #36	; 0x24
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b095      	sub	sp, #84	; 0x54
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	330c      	adds	r3, #12
 8008302:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008306:	e853 3f00 	ldrex	r3, [r3]
 800830a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800830c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	330c      	adds	r3, #12
 800831a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800831c:	643a      	str	r2, [r7, #64]	; 0x40
 800831e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008320:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008322:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008324:	e841 2300 	strex	r3, r2, [r1]
 8008328:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800832a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1e5      	bne.n	80082fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	3314      	adds	r3, #20
 8008336:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008338:	6a3b      	ldr	r3, [r7, #32]
 800833a:	e853 3f00 	ldrex	r3, [r3]
 800833e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	f023 0301 	bic.w	r3, r3, #1
 8008346:	64bb      	str	r3, [r7, #72]	; 0x48
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	3314      	adds	r3, #20
 800834e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008350:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008352:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008354:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008358:	e841 2300 	strex	r3, r2, [r1]
 800835c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800835e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1e5      	bne.n	8008330 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008368:	2b01      	cmp	r3, #1
 800836a:	d119      	bne.n	80083a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	330c      	adds	r3, #12
 8008372:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	e853 3f00 	ldrex	r3, [r3]
 800837a:	60bb      	str	r3, [r7, #8]
   return(result);
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	f023 0310 	bic.w	r3, r3, #16
 8008382:	647b      	str	r3, [r7, #68]	; 0x44
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	330c      	adds	r3, #12
 800838a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800838c:	61ba      	str	r2, [r7, #24]
 800838e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008390:	6979      	ldr	r1, [r7, #20]
 8008392:	69ba      	ldr	r2, [r7, #24]
 8008394:	e841 2300 	strex	r3, r2, [r1]
 8008398:	613b      	str	r3, [r7, #16]
   return(result);
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1e5      	bne.n	800836c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2220      	movs	r2, #32
 80083a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80083ae:	bf00      	nop
 80083b0:	3754      	adds	r7, #84	; 0x54
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b084      	sub	sp, #16
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2200      	movs	r2, #0
 80083cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083d4:	68f8      	ldr	r0, [r7, #12]
 80083d6:	f7ff fd5d 	bl	8007e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083da:	bf00      	nop
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b085      	sub	sp, #20
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b21      	cmp	r3, #33	; 0x21
 80083f4:	d13e      	bne.n	8008474 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083fe:	d114      	bne.n	800842a <UART_Transmit_IT+0x48>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d110      	bne.n	800842a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a1b      	ldr	r3, [r3, #32]
 800840c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	881b      	ldrh	r3, [r3, #0]
 8008412:	461a      	mov	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800841c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a1b      	ldr	r3, [r3, #32]
 8008422:	1c9a      	adds	r2, r3, #2
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	621a      	str	r2, [r3, #32]
 8008428:	e008      	b.n	800843c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	1c59      	adds	r1, r3, #1
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	6211      	str	r1, [r2, #32]
 8008434:	781a      	ldrb	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008440:	b29b      	uxth	r3, r3
 8008442:	3b01      	subs	r3, #1
 8008444:	b29b      	uxth	r3, r3
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	4619      	mov	r1, r3
 800844a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800844c:	2b00      	cmp	r3, #0
 800844e:	d10f      	bne.n	8008470 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68da      	ldr	r2, [r3, #12]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800845e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68da      	ldr	r2, [r3, #12]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800846e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008470:	2300      	movs	r3, #0
 8008472:	e000      	b.n	8008476 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008474:	2302      	movs	r3, #2
  }
}
 8008476:	4618      	mov	r0, r3
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b082      	sub	sp, #8
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68da      	ldr	r2, [r3, #12]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008498:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2220      	movs	r2, #32
 800849e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7ff fce2 	bl	8007e6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b08c      	sub	sp, #48	; 0x30
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	2b22      	cmp	r3, #34	; 0x22
 80084c4:	f040 80ae 	bne.w	8008624 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084d0:	d117      	bne.n	8008502 <UART_Receive_IT+0x50>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d113      	bne.n	8008502 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80084da:	2300      	movs	r3, #0
 80084dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fa:	1c9a      	adds	r2, r3, #2
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	629a      	str	r2, [r3, #40]	; 0x28
 8008500:	e026      	b.n	8008550 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008506:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008508:	2300      	movs	r3, #0
 800850a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008514:	d007      	beq.n	8008526 <UART_Receive_IT+0x74>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10a      	bne.n	8008534 <UART_Receive_IT+0x82>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d106      	bne.n	8008534 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	b2da      	uxtb	r2, r3
 800852e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008530:	701a      	strb	r2, [r3, #0]
 8008532:	e008      	b.n	8008546 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	b2db      	uxtb	r3, r3
 800853c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008540:	b2da      	uxtb	r2, r3
 8008542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008544:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854a:	1c5a      	adds	r2, r3, #1
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008554:	b29b      	uxth	r3, r3
 8008556:	3b01      	subs	r3, #1
 8008558:	b29b      	uxth	r3, r3
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	4619      	mov	r1, r3
 800855e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008560:	2b00      	cmp	r3, #0
 8008562:	d15d      	bne.n	8008620 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68da      	ldr	r2, [r3, #12]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f022 0220 	bic.w	r2, r2, #32
 8008572:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68da      	ldr	r2, [r3, #12]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008582:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	695a      	ldr	r2, [r3, #20]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f022 0201 	bic.w	r2, r2, #1
 8008592:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2220      	movs	r2, #32
 8008598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d135      	bne.n	8008616 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	330c      	adds	r3, #12
 80085b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	e853 3f00 	ldrex	r3, [r3]
 80085be:	613b      	str	r3, [r7, #16]
   return(result);
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	f023 0310 	bic.w	r3, r3, #16
 80085c6:	627b      	str	r3, [r7, #36]	; 0x24
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	330c      	adds	r3, #12
 80085ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085d0:	623a      	str	r2, [r7, #32]
 80085d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d4:	69f9      	ldr	r1, [r7, #28]
 80085d6:	6a3a      	ldr	r2, [r7, #32]
 80085d8:	e841 2300 	strex	r3, r2, [r1]
 80085dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1e5      	bne.n	80085b0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0310 	and.w	r3, r3, #16
 80085ee:	2b10      	cmp	r3, #16
 80085f0:	d10a      	bne.n	8008608 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80085f2:	2300      	movs	r3, #0
 80085f4:	60fb      	str	r3, [r7, #12]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	60fb      	str	r3, [r7, #12]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	60fb      	str	r3, [r7, #12]
 8008606:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800860c:	4619      	mov	r1, r3
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f7ff fc4a 	bl	8007ea8 <HAL_UARTEx_RxEventCallback>
 8008614:	e002      	b.n	800861c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7f8 fcea 	bl	8000ff0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800861c:	2300      	movs	r3, #0
 800861e:	e002      	b.n	8008626 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008620:	2300      	movs	r3, #0
 8008622:	e000      	b.n	8008626 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008624:	2302      	movs	r3, #2
  }
}
 8008626:	4618      	mov	r0, r3
 8008628:	3730      	adds	r7, #48	; 0x30
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
	...

08008630 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008634:	b0c0      	sub	sp, #256	; 0x100
 8008636:	af00      	add	r7, sp, #0
 8008638:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800863c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800864c:	68d9      	ldr	r1, [r3, #12]
 800864e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	ea40 0301 	orr.w	r3, r0, r1
 8008658:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800865a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800865e:	689a      	ldr	r2, [r3, #8]
 8008660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	431a      	orrs	r2, r3
 8008668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800866c:	695b      	ldr	r3, [r3, #20]
 800866e:	431a      	orrs	r2, r3
 8008670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008674:	69db      	ldr	r3, [r3, #28]
 8008676:	4313      	orrs	r3, r2
 8008678:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800867c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008688:	f021 010c 	bic.w	r1, r1, #12
 800868c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008696:	430b      	orrs	r3, r1
 8008698:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800869a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80086a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086aa:	6999      	ldr	r1, [r3, #24]
 80086ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	ea40 0301 	orr.w	r3, r0, r1
 80086b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80086b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	4b8f      	ldr	r3, [pc, #572]	; (80088fc <UART_SetConfig+0x2cc>)
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d005      	beq.n	80086d0 <UART_SetConfig+0xa0>
 80086c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	4b8d      	ldr	r3, [pc, #564]	; (8008900 <UART_SetConfig+0x2d0>)
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d104      	bne.n	80086da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80086d0:	f7fd ff76 	bl	80065c0 <HAL_RCC_GetPCLK2Freq>
 80086d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80086d8:	e003      	b.n	80086e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80086da:	f7fd ff5d 	bl	8006598 <HAL_RCC_GetPCLK1Freq>
 80086de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086e6:	69db      	ldr	r3, [r3, #28]
 80086e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086ec:	f040 810c 	bne.w	8008908 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80086f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086f4:	2200      	movs	r2, #0
 80086f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80086fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80086fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008702:	4622      	mov	r2, r4
 8008704:	462b      	mov	r3, r5
 8008706:	1891      	adds	r1, r2, r2
 8008708:	65b9      	str	r1, [r7, #88]	; 0x58
 800870a:	415b      	adcs	r3, r3
 800870c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800870e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008712:	4621      	mov	r1, r4
 8008714:	eb12 0801 	adds.w	r8, r2, r1
 8008718:	4629      	mov	r1, r5
 800871a:	eb43 0901 	adc.w	r9, r3, r1
 800871e:	f04f 0200 	mov.w	r2, #0
 8008722:	f04f 0300 	mov.w	r3, #0
 8008726:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800872a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800872e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008732:	4690      	mov	r8, r2
 8008734:	4699      	mov	r9, r3
 8008736:	4623      	mov	r3, r4
 8008738:	eb18 0303 	adds.w	r3, r8, r3
 800873c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008740:	462b      	mov	r3, r5
 8008742:	eb49 0303 	adc.w	r3, r9, r3
 8008746:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800874a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008756:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800875a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800875e:	460b      	mov	r3, r1
 8008760:	18db      	adds	r3, r3, r3
 8008762:	653b      	str	r3, [r7, #80]	; 0x50
 8008764:	4613      	mov	r3, r2
 8008766:	eb42 0303 	adc.w	r3, r2, r3
 800876a:	657b      	str	r3, [r7, #84]	; 0x54
 800876c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008770:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008774:	f7f8 fa88 	bl	8000c88 <__aeabi_uldivmod>
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	4b61      	ldr	r3, [pc, #388]	; (8008904 <UART_SetConfig+0x2d4>)
 800877e:	fba3 2302 	umull	r2, r3, r3, r2
 8008782:	095b      	lsrs	r3, r3, #5
 8008784:	011c      	lsls	r4, r3, #4
 8008786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800878a:	2200      	movs	r2, #0
 800878c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008790:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008794:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008798:	4642      	mov	r2, r8
 800879a:	464b      	mov	r3, r9
 800879c:	1891      	adds	r1, r2, r2
 800879e:	64b9      	str	r1, [r7, #72]	; 0x48
 80087a0:	415b      	adcs	r3, r3
 80087a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80087a8:	4641      	mov	r1, r8
 80087aa:	eb12 0a01 	adds.w	sl, r2, r1
 80087ae:	4649      	mov	r1, r9
 80087b0:	eb43 0b01 	adc.w	fp, r3, r1
 80087b4:	f04f 0200 	mov.w	r2, #0
 80087b8:	f04f 0300 	mov.w	r3, #0
 80087bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80087c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80087c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087c8:	4692      	mov	sl, r2
 80087ca:	469b      	mov	fp, r3
 80087cc:	4643      	mov	r3, r8
 80087ce:	eb1a 0303 	adds.w	r3, sl, r3
 80087d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087d6:	464b      	mov	r3, r9
 80087d8:	eb4b 0303 	adc.w	r3, fp, r3
 80087dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80087e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80087f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80087f4:	460b      	mov	r3, r1
 80087f6:	18db      	adds	r3, r3, r3
 80087f8:	643b      	str	r3, [r7, #64]	; 0x40
 80087fa:	4613      	mov	r3, r2
 80087fc:	eb42 0303 	adc.w	r3, r2, r3
 8008800:	647b      	str	r3, [r7, #68]	; 0x44
 8008802:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008806:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800880a:	f7f8 fa3d 	bl	8000c88 <__aeabi_uldivmod>
 800880e:	4602      	mov	r2, r0
 8008810:	460b      	mov	r3, r1
 8008812:	4611      	mov	r1, r2
 8008814:	4b3b      	ldr	r3, [pc, #236]	; (8008904 <UART_SetConfig+0x2d4>)
 8008816:	fba3 2301 	umull	r2, r3, r3, r1
 800881a:	095b      	lsrs	r3, r3, #5
 800881c:	2264      	movs	r2, #100	; 0x64
 800881e:	fb02 f303 	mul.w	r3, r2, r3
 8008822:	1acb      	subs	r3, r1, r3
 8008824:	00db      	lsls	r3, r3, #3
 8008826:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800882a:	4b36      	ldr	r3, [pc, #216]	; (8008904 <UART_SetConfig+0x2d4>)
 800882c:	fba3 2302 	umull	r2, r3, r3, r2
 8008830:	095b      	lsrs	r3, r3, #5
 8008832:	005b      	lsls	r3, r3, #1
 8008834:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008838:	441c      	add	r4, r3
 800883a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800883e:	2200      	movs	r2, #0
 8008840:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008844:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008848:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800884c:	4642      	mov	r2, r8
 800884e:	464b      	mov	r3, r9
 8008850:	1891      	adds	r1, r2, r2
 8008852:	63b9      	str	r1, [r7, #56]	; 0x38
 8008854:	415b      	adcs	r3, r3
 8008856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008858:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800885c:	4641      	mov	r1, r8
 800885e:	1851      	adds	r1, r2, r1
 8008860:	6339      	str	r1, [r7, #48]	; 0x30
 8008862:	4649      	mov	r1, r9
 8008864:	414b      	adcs	r3, r1
 8008866:	637b      	str	r3, [r7, #52]	; 0x34
 8008868:	f04f 0200 	mov.w	r2, #0
 800886c:	f04f 0300 	mov.w	r3, #0
 8008870:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008874:	4659      	mov	r1, fp
 8008876:	00cb      	lsls	r3, r1, #3
 8008878:	4651      	mov	r1, sl
 800887a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800887e:	4651      	mov	r1, sl
 8008880:	00ca      	lsls	r2, r1, #3
 8008882:	4610      	mov	r0, r2
 8008884:	4619      	mov	r1, r3
 8008886:	4603      	mov	r3, r0
 8008888:	4642      	mov	r2, r8
 800888a:	189b      	adds	r3, r3, r2
 800888c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008890:	464b      	mov	r3, r9
 8008892:	460a      	mov	r2, r1
 8008894:	eb42 0303 	adc.w	r3, r2, r3
 8008898:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800889c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80088a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80088ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80088b0:	460b      	mov	r3, r1
 80088b2:	18db      	adds	r3, r3, r3
 80088b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80088b6:	4613      	mov	r3, r2
 80088b8:	eb42 0303 	adc.w	r3, r2, r3
 80088bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80088c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80088c6:	f7f8 f9df 	bl	8000c88 <__aeabi_uldivmod>
 80088ca:	4602      	mov	r2, r0
 80088cc:	460b      	mov	r3, r1
 80088ce:	4b0d      	ldr	r3, [pc, #52]	; (8008904 <UART_SetConfig+0x2d4>)
 80088d0:	fba3 1302 	umull	r1, r3, r3, r2
 80088d4:	095b      	lsrs	r3, r3, #5
 80088d6:	2164      	movs	r1, #100	; 0x64
 80088d8:	fb01 f303 	mul.w	r3, r1, r3
 80088dc:	1ad3      	subs	r3, r2, r3
 80088de:	00db      	lsls	r3, r3, #3
 80088e0:	3332      	adds	r3, #50	; 0x32
 80088e2:	4a08      	ldr	r2, [pc, #32]	; (8008904 <UART_SetConfig+0x2d4>)
 80088e4:	fba2 2303 	umull	r2, r3, r2, r3
 80088e8:	095b      	lsrs	r3, r3, #5
 80088ea:	f003 0207 	and.w	r2, r3, #7
 80088ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4422      	add	r2, r4
 80088f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80088f8:	e106      	b.n	8008b08 <UART_SetConfig+0x4d8>
 80088fa:	bf00      	nop
 80088fc:	40011000 	.word	0x40011000
 8008900:	40011400 	.word	0x40011400
 8008904:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008908:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800890c:	2200      	movs	r2, #0
 800890e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008912:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008916:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800891a:	4642      	mov	r2, r8
 800891c:	464b      	mov	r3, r9
 800891e:	1891      	adds	r1, r2, r2
 8008920:	6239      	str	r1, [r7, #32]
 8008922:	415b      	adcs	r3, r3
 8008924:	627b      	str	r3, [r7, #36]	; 0x24
 8008926:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800892a:	4641      	mov	r1, r8
 800892c:	1854      	adds	r4, r2, r1
 800892e:	4649      	mov	r1, r9
 8008930:	eb43 0501 	adc.w	r5, r3, r1
 8008934:	f04f 0200 	mov.w	r2, #0
 8008938:	f04f 0300 	mov.w	r3, #0
 800893c:	00eb      	lsls	r3, r5, #3
 800893e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008942:	00e2      	lsls	r2, r4, #3
 8008944:	4614      	mov	r4, r2
 8008946:	461d      	mov	r5, r3
 8008948:	4643      	mov	r3, r8
 800894a:	18e3      	adds	r3, r4, r3
 800894c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008950:	464b      	mov	r3, r9
 8008952:	eb45 0303 	adc.w	r3, r5, r3
 8008956:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800895a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008966:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800896a:	f04f 0200 	mov.w	r2, #0
 800896e:	f04f 0300 	mov.w	r3, #0
 8008972:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008976:	4629      	mov	r1, r5
 8008978:	008b      	lsls	r3, r1, #2
 800897a:	4621      	mov	r1, r4
 800897c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008980:	4621      	mov	r1, r4
 8008982:	008a      	lsls	r2, r1, #2
 8008984:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008988:	f7f8 f97e 	bl	8000c88 <__aeabi_uldivmod>
 800898c:	4602      	mov	r2, r0
 800898e:	460b      	mov	r3, r1
 8008990:	4b60      	ldr	r3, [pc, #384]	; (8008b14 <UART_SetConfig+0x4e4>)
 8008992:	fba3 2302 	umull	r2, r3, r3, r2
 8008996:	095b      	lsrs	r3, r3, #5
 8008998:	011c      	lsls	r4, r3, #4
 800899a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800899e:	2200      	movs	r2, #0
 80089a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80089a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80089a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80089ac:	4642      	mov	r2, r8
 80089ae:	464b      	mov	r3, r9
 80089b0:	1891      	adds	r1, r2, r2
 80089b2:	61b9      	str	r1, [r7, #24]
 80089b4:	415b      	adcs	r3, r3
 80089b6:	61fb      	str	r3, [r7, #28]
 80089b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80089bc:	4641      	mov	r1, r8
 80089be:	1851      	adds	r1, r2, r1
 80089c0:	6139      	str	r1, [r7, #16]
 80089c2:	4649      	mov	r1, r9
 80089c4:	414b      	adcs	r3, r1
 80089c6:	617b      	str	r3, [r7, #20]
 80089c8:	f04f 0200 	mov.w	r2, #0
 80089cc:	f04f 0300 	mov.w	r3, #0
 80089d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80089d4:	4659      	mov	r1, fp
 80089d6:	00cb      	lsls	r3, r1, #3
 80089d8:	4651      	mov	r1, sl
 80089da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089de:	4651      	mov	r1, sl
 80089e0:	00ca      	lsls	r2, r1, #3
 80089e2:	4610      	mov	r0, r2
 80089e4:	4619      	mov	r1, r3
 80089e6:	4603      	mov	r3, r0
 80089e8:	4642      	mov	r2, r8
 80089ea:	189b      	adds	r3, r3, r2
 80089ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80089f0:	464b      	mov	r3, r9
 80089f2:	460a      	mov	r2, r1
 80089f4:	eb42 0303 	adc.w	r3, r2, r3
 80089f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80089fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008a08:	f04f 0200 	mov.w	r2, #0
 8008a0c:	f04f 0300 	mov.w	r3, #0
 8008a10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008a14:	4649      	mov	r1, r9
 8008a16:	008b      	lsls	r3, r1, #2
 8008a18:	4641      	mov	r1, r8
 8008a1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a1e:	4641      	mov	r1, r8
 8008a20:	008a      	lsls	r2, r1, #2
 8008a22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008a26:	f7f8 f92f 	bl	8000c88 <__aeabi_uldivmod>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	4611      	mov	r1, r2
 8008a30:	4b38      	ldr	r3, [pc, #224]	; (8008b14 <UART_SetConfig+0x4e4>)
 8008a32:	fba3 2301 	umull	r2, r3, r3, r1
 8008a36:	095b      	lsrs	r3, r3, #5
 8008a38:	2264      	movs	r2, #100	; 0x64
 8008a3a:	fb02 f303 	mul.w	r3, r2, r3
 8008a3e:	1acb      	subs	r3, r1, r3
 8008a40:	011b      	lsls	r3, r3, #4
 8008a42:	3332      	adds	r3, #50	; 0x32
 8008a44:	4a33      	ldr	r2, [pc, #204]	; (8008b14 <UART_SetConfig+0x4e4>)
 8008a46:	fba2 2303 	umull	r2, r3, r2, r3
 8008a4a:	095b      	lsrs	r3, r3, #5
 8008a4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a50:	441c      	add	r4, r3
 8008a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a56:	2200      	movs	r2, #0
 8008a58:	673b      	str	r3, [r7, #112]	; 0x70
 8008a5a:	677a      	str	r2, [r7, #116]	; 0x74
 8008a5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008a60:	4642      	mov	r2, r8
 8008a62:	464b      	mov	r3, r9
 8008a64:	1891      	adds	r1, r2, r2
 8008a66:	60b9      	str	r1, [r7, #8]
 8008a68:	415b      	adcs	r3, r3
 8008a6a:	60fb      	str	r3, [r7, #12]
 8008a6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a70:	4641      	mov	r1, r8
 8008a72:	1851      	adds	r1, r2, r1
 8008a74:	6039      	str	r1, [r7, #0]
 8008a76:	4649      	mov	r1, r9
 8008a78:	414b      	adcs	r3, r1
 8008a7a:	607b      	str	r3, [r7, #4]
 8008a7c:	f04f 0200 	mov.w	r2, #0
 8008a80:	f04f 0300 	mov.w	r3, #0
 8008a84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008a88:	4659      	mov	r1, fp
 8008a8a:	00cb      	lsls	r3, r1, #3
 8008a8c:	4651      	mov	r1, sl
 8008a8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a92:	4651      	mov	r1, sl
 8008a94:	00ca      	lsls	r2, r1, #3
 8008a96:	4610      	mov	r0, r2
 8008a98:	4619      	mov	r1, r3
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	4642      	mov	r2, r8
 8008a9e:	189b      	adds	r3, r3, r2
 8008aa0:	66bb      	str	r3, [r7, #104]	; 0x68
 8008aa2:	464b      	mov	r3, r9
 8008aa4:	460a      	mov	r2, r1
 8008aa6:	eb42 0303 	adc.w	r3, r2, r3
 8008aaa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	663b      	str	r3, [r7, #96]	; 0x60
 8008ab6:	667a      	str	r2, [r7, #100]	; 0x64
 8008ab8:	f04f 0200 	mov.w	r2, #0
 8008abc:	f04f 0300 	mov.w	r3, #0
 8008ac0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008ac4:	4649      	mov	r1, r9
 8008ac6:	008b      	lsls	r3, r1, #2
 8008ac8:	4641      	mov	r1, r8
 8008aca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ace:	4641      	mov	r1, r8
 8008ad0:	008a      	lsls	r2, r1, #2
 8008ad2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008ad6:	f7f8 f8d7 	bl	8000c88 <__aeabi_uldivmod>
 8008ada:	4602      	mov	r2, r0
 8008adc:	460b      	mov	r3, r1
 8008ade:	4b0d      	ldr	r3, [pc, #52]	; (8008b14 <UART_SetConfig+0x4e4>)
 8008ae0:	fba3 1302 	umull	r1, r3, r3, r2
 8008ae4:	095b      	lsrs	r3, r3, #5
 8008ae6:	2164      	movs	r1, #100	; 0x64
 8008ae8:	fb01 f303 	mul.w	r3, r1, r3
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	011b      	lsls	r3, r3, #4
 8008af0:	3332      	adds	r3, #50	; 0x32
 8008af2:	4a08      	ldr	r2, [pc, #32]	; (8008b14 <UART_SetConfig+0x4e4>)
 8008af4:	fba2 2303 	umull	r2, r3, r2, r3
 8008af8:	095b      	lsrs	r3, r3, #5
 8008afa:	f003 020f 	and.w	r2, r3, #15
 8008afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4422      	add	r2, r4
 8008b06:	609a      	str	r2, [r3, #8]
}
 8008b08:	bf00      	nop
 8008b0a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b14:	51eb851f 	.word	0x51eb851f

08008b18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b18:	b084      	sub	sp, #16
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b084      	sub	sp, #16
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
 8008b22:	f107 001c 	add.w	r0, r7, #28
 8008b26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b2a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d123      	bne.n	8008b7a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008b5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d105      	bne.n	8008b6e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f9dc 	bl	8008f2c <USB_CoreReset>
 8008b74:	4603      	mov	r3, r0
 8008b76:	73fb      	strb	r3, [r7, #15]
 8008b78:	e01b      	b.n	8008bb2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 f9d0 	bl	8008f2c <USB_CoreReset>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008b90:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d106      	bne.n	8008ba6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	639a      	str	r2, [r3, #56]	; 0x38
 8008ba4:	e005      	b.n	8008bb2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008baa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008bb2:	7fbb      	ldrb	r3, [r7, #30]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d10b      	bne.n	8008bd0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	f043 0206 	orr.w	r2, r3, #6
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	f043 0220 	orr.w	r2, r3, #32
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008bdc:	b004      	add	sp, #16
 8008bde:	4770      	bx	lr

08008be0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	f043 0201 	orr.w	r2, r3, #1
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr

08008c02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c02:	b480      	push	{r7}
 8008c04:	b083      	sub	sp, #12
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	f023 0201 	bic.w	r2, r3, #1
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008c30:	2300      	movs	r3, #0
 8008c32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c40:	78fb      	ldrb	r3, [r7, #3]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d115      	bne.n	8008c72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008c52:	200a      	movs	r0, #10
 8008c54:	f7f9 fa44 	bl	80020e0 <HAL_Delay>
      ms += 10U;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	330a      	adds	r3, #10
 8008c5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f956 	bl	8008f10 <USB_GetMode>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d01e      	beq.n	8008ca8 <USB_SetCurrentMode+0x84>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2bc7      	cmp	r3, #199	; 0xc7
 8008c6e:	d9f0      	bls.n	8008c52 <USB_SetCurrentMode+0x2e>
 8008c70:	e01a      	b.n	8008ca8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008c72:	78fb      	ldrb	r3, [r7, #3]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d115      	bne.n	8008ca4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008c84:	200a      	movs	r0, #10
 8008c86:	f7f9 fa2b 	bl	80020e0 <HAL_Delay>
      ms += 10U;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	330a      	adds	r3, #10
 8008c8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 f93d 	bl	8008f10 <USB_GetMode>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d005      	beq.n	8008ca8 <USB_SetCurrentMode+0x84>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2bc7      	cmp	r3, #199	; 0xc7
 8008ca0:	d9f0      	bls.n	8008c84 <USB_SetCurrentMode+0x60>
 8008ca2:	e001      	b.n	8008ca8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e005      	b.n	8008cb4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2bc8      	cmp	r3, #200	; 0xc8
 8008cac:	d101      	bne.n	8008cb2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e000      	b.n	8008cb4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008cd6:	d901      	bls.n	8008cdc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	e01b      	b.n	8008d14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	daf2      	bge.n	8008cca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	019b      	lsls	r3, r3, #6
 8008cec:	f043 0220 	orr.w	r2, r3, #32
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008d00:	d901      	bls.n	8008d06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008d02:	2303      	movs	r3, #3
 8008d04:	e006      	b.n	8008d14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	f003 0320 	and.w	r3, r3, #32
 8008d0e:	2b20      	cmp	r3, #32
 8008d10:	d0f0      	beq.n	8008cf4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3714      	adds	r7, #20
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b085      	sub	sp, #20
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008d38:	d901      	bls.n	8008d3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	e018      	b.n	8008d70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	daf2      	bge.n	8008d2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008d46:	2300      	movs	r3, #0
 8008d48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2210      	movs	r2, #16
 8008d4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	3301      	adds	r3, #1
 8008d54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008d5c:	d901      	bls.n	8008d62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e006      	b.n	8008d70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	691b      	ldr	r3, [r3, #16]
 8008d66:	f003 0310 	and.w	r3, r3, #16
 8008d6a:	2b10      	cmp	r3, #16
 8008d6c:	d0f0      	beq.n	8008d50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3714      	adds	r7, #20
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b089      	sub	sp, #36	; 0x24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	4611      	mov	r1, r2
 8008d88:	461a      	mov	r2, r3
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	71fb      	strb	r3, [r7, #7]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008d9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d123      	bne.n	8008dea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008da2:	88bb      	ldrh	r3, [r7, #4]
 8008da4:	3303      	adds	r3, #3
 8008da6:	089b      	lsrs	r3, r3, #2
 8008da8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008daa:	2300      	movs	r3, #0
 8008dac:	61bb      	str	r3, [r7, #24]
 8008dae:	e018      	b.n	8008de2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008db0:	79fb      	ldrb	r3, [r7, #7]
 8008db2:	031a      	lsls	r2, r3, #12
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	4413      	add	r3, r2
 8008db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	3301      	adds	r3, #1
 8008de0:	61bb      	str	r3, [r7, #24]
 8008de2:	69ba      	ldr	r2, [r7, #24]
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d3e2      	bcc.n	8008db0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3724      	adds	r7, #36	; 0x24
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b08b      	sub	sp, #44	; 0x2c
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	4613      	mov	r3, r2
 8008e04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008e0e:	88fb      	ldrh	r3, [r7, #6]
 8008e10:	089b      	lsrs	r3, r3, #2
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008e16:	88fb      	ldrh	r3, [r7, #6]
 8008e18:	f003 0303 	and.w	r3, r3, #3
 8008e1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008e1e:	2300      	movs	r3, #0
 8008e20:	623b      	str	r3, [r7, #32]
 8008e22:	e014      	b.n	8008e4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e32:	3301      	adds	r3, #1
 8008e34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e38:	3301      	adds	r3, #1
 8008e3a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3e:	3301      	adds	r3, #1
 8008e40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e44:	3301      	adds	r3, #1
 8008e46:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008e48:	6a3b      	ldr	r3, [r7, #32]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	623b      	str	r3, [r7, #32]
 8008e4e:	6a3a      	ldr	r2, [r7, #32]
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d3e6      	bcc.n	8008e24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008e56:	8bfb      	ldrh	r3, [r7, #30]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d01e      	beq.n	8008e9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e66:	461a      	mov	r2, r3
 8008e68:	f107 0310 	add.w	r3, r7, #16
 8008e6c:	6812      	ldr	r2, [r2, #0]
 8008e6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008e70:	693a      	ldr	r2, [r7, #16]
 8008e72:	6a3b      	ldr	r3, [r7, #32]
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	00db      	lsls	r3, r3, #3
 8008e78:	fa22 f303 	lsr.w	r3, r2, r3
 8008e7c:	b2da      	uxtb	r2, r3
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e80:	701a      	strb	r2, [r3, #0]
      i++;
 8008e82:	6a3b      	ldr	r3, [r7, #32]
 8008e84:	3301      	adds	r3, #1
 8008e86:	623b      	str	r3, [r7, #32]
      pDest++;
 8008e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008e8e:	8bfb      	ldrh	r3, [r7, #30]
 8008e90:	3b01      	subs	r3, #1
 8008e92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008e94:	8bfb      	ldrh	r3, [r7, #30]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d1ea      	bne.n	8008e70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	372c      	adds	r7, #44	; 0x2c
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	695b      	ldr	r3, [r3, #20]
 8008eb4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	699b      	ldr	r3, [r3, #24]
 8008eba:	68fa      	ldr	r2, [r7, #12]
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3714      	adds	r7, #20
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr

08008ece <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008ece:	b480      	push	{r7}
 8008ed0:	b085      	sub	sp, #20
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008ede:	78fb      	ldrb	r3, [r7, #3]
 8008ee0:	015a      	lsls	r2, r3, #5
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008eee:	78fb      	ldrb	r3, [r7, #3]
 8008ef0:	015a      	lsls	r2, r3, #5
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	4013      	ands	r3, r2
 8008f00:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008f02:	68bb      	ldr	r3, [r7, #8]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3714      	adds	r7, #20
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	695b      	ldr	r3, [r3, #20]
 8008f1c:	f003 0301 	and.w	r3, r3, #1
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b085      	sub	sp, #20
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f34:	2300      	movs	r3, #0
 8008f36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008f44:	d901      	bls.n	8008f4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f46:	2303      	movs	r3, #3
 8008f48:	e01b      	b.n	8008f82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	daf2      	bge.n	8008f38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f52:	2300      	movs	r3, #0
 8008f54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	f043 0201 	orr.w	r2, r3, #1
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	3301      	adds	r3, #1
 8008f66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008f6e:	d901      	bls.n	8008f74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f70:	2303      	movs	r3, #3
 8008f72:	e006      	b.n	8008f82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	f003 0301 	and.w	r3, r3, #1
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d0f0      	beq.n	8008f62 <USB_CoreReset+0x36>

  return HAL_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3714      	adds	r7, #20
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr
	...

08008f90 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f90:	b084      	sub	sp, #16
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b086      	sub	sp, #24
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
 8008f9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008f9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d119      	bne.n	800901a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008fe6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d10a      	bne.n	8009004 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ffc:	f043 0304 	orr.w	r3, r3, #4
 8009000:	6013      	str	r3, [r2, #0]
 8009002:	e014      	b.n	800902e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009012:	f023 0304 	bic.w	r3, r3, #4
 8009016:	6013      	str	r3, [r2, #0]
 8009018:	e009      	b.n	800902e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009028:	f023 0304 	bic.w	r3, r3, #4
 800902c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800902e:	2110      	movs	r1, #16
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f7ff fe43 	bl	8008cbc <USB_FlushTxFifo>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d001      	beq.n	8009040 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f7ff fe6d 	bl	8008d20 <USB_FlushRxFifo>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d001      	beq.n	8009050 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009050:	2300      	movs	r3, #0
 8009052:	613b      	str	r3, [r7, #16]
 8009054:	e015      	b.n	8009082 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	015a      	lsls	r2, r3, #5
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	4413      	add	r3, r2
 800905e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009062:	461a      	mov	r2, r3
 8009064:	f04f 33ff 	mov.w	r3, #4294967295
 8009068:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	015a      	lsls	r2, r3, #5
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	4413      	add	r3, r2
 8009072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009076:	461a      	mov	r2, r3
 8009078:	2300      	movs	r3, #0
 800907a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	3301      	adds	r3, #1
 8009080:	613b      	str	r3, [r7, #16]
 8009082:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009086:	461a      	mov	r2, r3
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	4293      	cmp	r3, r2
 800908c:	d3e3      	bcc.n	8009056 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f04f 32ff 	mov.w	r2, #4294967295
 800909a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a18      	ldr	r2, [pc, #96]	; (8009100 <USB_HostInit+0x170>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d10b      	bne.n	80090bc <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090aa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a15      	ldr	r2, [pc, #84]	; (8009104 <USB_HostInit+0x174>)
 80090b0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a14      	ldr	r2, [pc, #80]	; (8009108 <USB_HostInit+0x178>)
 80090b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80090ba:	e009      	b.n	80090d0 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2280      	movs	r2, #128	; 0x80
 80090c0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4a11      	ldr	r2, [pc, #68]	; (800910c <USB_HostInit+0x17c>)
 80090c6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4a11      	ldr	r2, [pc, #68]	; (8009110 <USB_HostInit+0x180>)
 80090cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80090d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d105      	bne.n	80090e4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	699b      	ldr	r3, [r3, #24]
 80090dc:	f043 0210 	orr.w	r2, r3, #16
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	699a      	ldr	r2, [r3, #24]
 80090e8:	4b0a      	ldr	r3, [pc, #40]	; (8009114 <USB_HostInit+0x184>)
 80090ea:	4313      	orrs	r3, r2
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80090f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3718      	adds	r7, #24
 80090f6:	46bd      	mov	sp, r7
 80090f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090fc:	b004      	add	sp, #16
 80090fe:	4770      	bx	lr
 8009100:	40040000 	.word	0x40040000
 8009104:	01000200 	.word	0x01000200
 8009108:	00e00300 	.word	0x00e00300
 800910c:	00600080 	.word	0x00600080
 8009110:	004000e0 	.word	0x004000e0
 8009114:	a3200008 	.word	0xa3200008

08009118 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	460b      	mov	r3, r1
 8009122:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009136:	f023 0303 	bic.w	r3, r3, #3
 800913a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	78fb      	ldrb	r3, [r7, #3]
 8009146:	f003 0303 	and.w	r3, r3, #3
 800914a:	68f9      	ldr	r1, [r7, #12]
 800914c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009150:	4313      	orrs	r3, r2
 8009152:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009154:	78fb      	ldrb	r3, [r7, #3]
 8009156:	2b01      	cmp	r3, #1
 8009158:	d107      	bne.n	800916a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009160:	461a      	mov	r2, r3
 8009162:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009166:	6053      	str	r3, [r2, #4]
 8009168:	e00c      	b.n	8009184 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800916a:	78fb      	ldrb	r3, [r7, #3]
 800916c:	2b02      	cmp	r3, #2
 800916e:	d107      	bne.n	8009180 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009176:	461a      	mov	r2, r3
 8009178:	f241 7370 	movw	r3, #6000	; 0x1770
 800917c:	6053      	str	r3, [r2, #4]
 800917e:	e001      	b.n	8009184 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8009180:	2301      	movs	r3, #1
 8009182:	e000      	b.n	8009186 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3714      	adds	r7, #20
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr

08009192 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b084      	sub	sp, #16
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800919e:	2300      	movs	r3, #0
 80091a0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80091b2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80091bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091c0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80091c2:	2064      	movs	r0, #100	; 0x64
 80091c4:	f7f8 ff8c 	bl	80020e0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80091d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091d4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80091d6:	200a      	movs	r0, #10
 80091d8:	f7f8 ff82 	bl	80020e0 <HAL_Delay>

  return HAL_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80091e6:	b480      	push	{r7}
 80091e8:	b085      	sub	sp, #20
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	460b      	mov	r3, r1
 80091f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80091f6:	2300      	movs	r3, #0
 80091f8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800920a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009212:	2b00      	cmp	r3, #0
 8009214:	d109      	bne.n	800922a <USB_DriveVbus+0x44>
 8009216:	78fb      	ldrb	r3, [r7, #3]
 8009218:	2b01      	cmp	r3, #1
 800921a:	d106      	bne.n	800922a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009224:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009228:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009234:	d109      	bne.n	800924a <USB_DriveVbus+0x64>
 8009236:	78fb      	ldrb	r3, [r7, #3]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d106      	bne.n	800924a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009244:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009248:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3714      	adds	r7, #20
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009264:	2300      	movs	r3, #0
 8009266:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	0c5b      	lsrs	r3, r3, #17
 8009276:	f003 0303 	and.w	r3, r3, #3
}
 800927a:	4618      	mov	r0, r3
 800927c:	3714      	adds	r7, #20
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr

08009286 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8009286:	b480      	push	{r7}
 8009288:	b085      	sub	sp, #20
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	b29b      	uxth	r3, r3
}
 800929c:	4618      	mov	r0, r3
 800929e:	3714      	adds	r7, #20
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b088      	sub	sp, #32
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	4608      	mov	r0, r1
 80092b2:	4611      	mov	r1, r2
 80092b4:	461a      	mov	r2, r3
 80092b6:	4603      	mov	r3, r0
 80092b8:	70fb      	strb	r3, [r7, #3]
 80092ba:	460b      	mov	r3, r1
 80092bc:	70bb      	strb	r3, [r7, #2]
 80092be:	4613      	mov	r3, r2
 80092c0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80092ca:	78fb      	ldrb	r3, [r7, #3]
 80092cc:	015a      	lsls	r2, r3, #5
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	4413      	add	r3, r2
 80092d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092d6:	461a      	mov	r2, r3
 80092d8:	f04f 33ff 	mov.w	r3, #4294967295
 80092dc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80092de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80092e2:	2b03      	cmp	r3, #3
 80092e4:	d87c      	bhi.n	80093e0 <USB_HC_Init+0x138>
 80092e6:	a201      	add	r2, pc, #4	; (adr r2, 80092ec <USB_HC_Init+0x44>)
 80092e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ec:	080092fd 	.word	0x080092fd
 80092f0:	080093a3 	.word	0x080093a3
 80092f4:	080092fd 	.word	0x080092fd
 80092f8:	08009365 	.word	0x08009365
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80092fc:	78fb      	ldrb	r3, [r7, #3]
 80092fe:	015a      	lsls	r2, r3, #5
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	4413      	add	r3, r2
 8009304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009308:	461a      	mov	r2, r3
 800930a:	f240 439d 	movw	r3, #1181	; 0x49d
 800930e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009310:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009314:	2b00      	cmp	r3, #0
 8009316:	da10      	bge.n	800933a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009318:	78fb      	ldrb	r3, [r7, #3]
 800931a:	015a      	lsls	r2, r3, #5
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	4413      	add	r3, r2
 8009320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	78fa      	ldrb	r2, [r7, #3]
 8009328:	0151      	lsls	r1, r2, #5
 800932a:	693a      	ldr	r2, [r7, #16]
 800932c:	440a      	add	r2, r1
 800932e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009336:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8009338:	e055      	b.n	80093e6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	4a6f      	ldr	r2, [pc, #444]	; (80094fc <USB_HC_Init+0x254>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d151      	bne.n	80093e6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009342:	78fb      	ldrb	r3, [r7, #3]
 8009344:	015a      	lsls	r2, r3, #5
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	4413      	add	r3, r2
 800934a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	78fa      	ldrb	r2, [r7, #3]
 8009352:	0151      	lsls	r1, r2, #5
 8009354:	693a      	ldr	r2, [r7, #16]
 8009356:	440a      	add	r2, r1
 8009358:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800935c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009360:	60d3      	str	r3, [r2, #12]
      break;
 8009362:	e040      	b.n	80093e6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009364:	78fb      	ldrb	r3, [r7, #3]
 8009366:	015a      	lsls	r2, r3, #5
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	4413      	add	r3, r2
 800936c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009370:	461a      	mov	r2, r3
 8009372:	f240 639d 	movw	r3, #1693	; 0x69d
 8009376:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009378:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800937c:	2b00      	cmp	r3, #0
 800937e:	da34      	bge.n	80093ea <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009380:	78fb      	ldrb	r3, [r7, #3]
 8009382:	015a      	lsls	r2, r3, #5
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	4413      	add	r3, r2
 8009388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	78fa      	ldrb	r2, [r7, #3]
 8009390:	0151      	lsls	r1, r2, #5
 8009392:	693a      	ldr	r2, [r7, #16]
 8009394:	440a      	add	r2, r1
 8009396:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800939a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800939e:	60d3      	str	r3, [r2, #12]
      }

      break;
 80093a0:	e023      	b.n	80093ea <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80093a2:	78fb      	ldrb	r3, [r7, #3]
 80093a4:	015a      	lsls	r2, r3, #5
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	4413      	add	r3, r2
 80093aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093ae:	461a      	mov	r2, r3
 80093b0:	f240 2325 	movw	r3, #549	; 0x225
 80093b4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80093b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	da17      	bge.n	80093ee <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80093be:	78fb      	ldrb	r3, [r7, #3]
 80093c0:	015a      	lsls	r2, r3, #5
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	4413      	add	r3, r2
 80093c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	78fa      	ldrb	r2, [r7, #3]
 80093ce:	0151      	lsls	r1, r2, #5
 80093d0:	693a      	ldr	r2, [r7, #16]
 80093d2:	440a      	add	r2, r1
 80093d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093d8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80093dc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80093de:	e006      	b.n	80093ee <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	77fb      	strb	r3, [r7, #31]
      break;
 80093e4:	e004      	b.n	80093f0 <USB_HC_Init+0x148>
      break;
 80093e6:	bf00      	nop
 80093e8:	e002      	b.n	80093f0 <USB_HC_Init+0x148>
      break;
 80093ea:	bf00      	nop
 80093ec:	e000      	b.n	80093f0 <USB_HC_Init+0x148>
      break;
 80093ee:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80093f0:	78fb      	ldrb	r3, [r7, #3]
 80093f2:	015a      	lsls	r2, r3, #5
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	4413      	add	r3, r2
 80093f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093fc:	461a      	mov	r2, r3
 80093fe:	2300      	movs	r3, #0
 8009400:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009402:	78fb      	ldrb	r3, [r7, #3]
 8009404:	015a      	lsls	r2, r3, #5
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	4413      	add	r3, r2
 800940a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	78fa      	ldrb	r2, [r7, #3]
 8009412:	0151      	lsls	r1, r2, #5
 8009414:	693a      	ldr	r2, [r7, #16]
 8009416:	440a      	add	r2, r1
 8009418:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800941c:	f043 0302 	orr.w	r3, r3, #2
 8009420:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009428:	699a      	ldr	r2, [r3, #24]
 800942a:	78fb      	ldrb	r3, [r7, #3]
 800942c:	f003 030f 	and.w	r3, r3, #15
 8009430:	2101      	movs	r1, #1
 8009432:	fa01 f303 	lsl.w	r3, r1, r3
 8009436:	6939      	ldr	r1, [r7, #16]
 8009438:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800943c:	4313      	orrs	r3, r2
 800943e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800944c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009450:	2b00      	cmp	r3, #0
 8009452:	da03      	bge.n	800945c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009454:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009458:	61bb      	str	r3, [r7, #24]
 800945a:	e001      	b.n	8009460 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800945c:	2300      	movs	r3, #0
 800945e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f7ff fef9 	bl	8009258 <USB_GetHostSpeed>
 8009466:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009468:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800946c:	2b02      	cmp	r3, #2
 800946e:	d106      	bne.n	800947e <USB_HC_Init+0x1d6>
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2b02      	cmp	r3, #2
 8009474:	d003      	beq.n	800947e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009476:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800947a:	617b      	str	r3, [r7, #20]
 800947c:	e001      	b.n	8009482 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800947e:	2300      	movs	r3, #0
 8009480:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009482:	787b      	ldrb	r3, [r7, #1]
 8009484:	059b      	lsls	r3, r3, #22
 8009486:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800948a:	78bb      	ldrb	r3, [r7, #2]
 800948c:	02db      	lsls	r3, r3, #11
 800948e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009492:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009494:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009498:	049b      	lsls	r3, r3, #18
 800949a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800949e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80094a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80094a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80094a6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	431a      	orrs	r2, r3
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80094b0:	78fa      	ldrb	r2, [r7, #3]
 80094b2:	0151      	lsls	r1, r2, #5
 80094b4:	693a      	ldr	r2, [r7, #16]
 80094b6:	440a      	add	r2, r1
 80094b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80094bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80094c0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80094c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80094c6:	2b03      	cmp	r3, #3
 80094c8:	d003      	beq.n	80094d2 <USB_HC_Init+0x22a>
 80094ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d10f      	bne.n	80094f2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80094d2:	78fb      	ldrb	r3, [r7, #3]
 80094d4:	015a      	lsls	r2, r3, #5
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	4413      	add	r3, r2
 80094da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	78fa      	ldrb	r2, [r7, #3]
 80094e2:	0151      	lsls	r1, r2, #5
 80094e4:	693a      	ldr	r2, [r7, #16]
 80094e6:	440a      	add	r2, r1
 80094e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80094f0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80094f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3720      	adds	r7, #32
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	40040000 	.word	0x40040000

08009500 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b08c      	sub	sp, #48	; 0x30
 8009504:	af02      	add	r7, sp, #8
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	4613      	mov	r3, r2
 800950c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	785b      	ldrb	r3, [r3, #1]
 8009516:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8009518:	f44f 7380 	mov.w	r3, #256	; 0x100
 800951c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	4a5d      	ldr	r2, [pc, #372]	; (8009698 <USB_HC_StartXfer+0x198>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d12f      	bne.n	8009586 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8009526:	79fb      	ldrb	r3, [r7, #7]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d11c      	bne.n	8009566 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	7c9b      	ldrb	r3, [r3, #18]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d003      	beq.n	800953c <USB_HC_StartXfer+0x3c>
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	7c9b      	ldrb	r3, [r3, #18]
 8009538:	2b02      	cmp	r3, #2
 800953a:	d124      	bne.n	8009586 <USB_HC_StartXfer+0x86>
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	799b      	ldrb	r3, [r3, #6]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d120      	bne.n	8009586 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	015a      	lsls	r2, r3, #5
 8009548:	6a3b      	ldr	r3, [r7, #32]
 800954a:	4413      	add	r3, r2
 800954c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	69fa      	ldr	r2, [r7, #28]
 8009554:	0151      	lsls	r1, r2, #5
 8009556:	6a3a      	ldr	r2, [r7, #32]
 8009558:	440a      	add	r2, r1
 800955a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800955e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009562:	60d3      	str	r3, [r2, #12]
 8009564:	e00f      	b.n	8009586 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	791b      	ldrb	r3, [r3, #4]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d10b      	bne.n	8009586 <USB_HC_StartXfer+0x86>
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	795b      	ldrb	r3, [r3, #5]
 8009572:	2b01      	cmp	r3, #1
 8009574:	d107      	bne.n	8009586 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	785b      	ldrb	r3, [r3, #1]
 800957a:	4619      	mov	r1, r3
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	f000 fb6b 	bl	8009c58 <USB_DoPing>
        return HAL_OK;
 8009582:	2300      	movs	r3, #0
 8009584:	e232      	b.n	80099ec <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	799b      	ldrb	r3, [r3, #6]
 800958a:	2b01      	cmp	r3, #1
 800958c:	d158      	bne.n	8009640 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800958e:	2301      	movs	r3, #1
 8009590:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	78db      	ldrb	r3, [r3, #3]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d007      	beq.n	80095aa <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800959a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800959c:	68ba      	ldr	r2, [r7, #8]
 800959e:	8a92      	ldrh	r2, [r2, #20]
 80095a0:	fb03 f202 	mul.w	r2, r3, r2
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	61da      	str	r2, [r3, #28]
 80095a8:	e07c      	b.n	80096a4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	7c9b      	ldrb	r3, [r3, #18]
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d130      	bne.n	8009614 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	6a1b      	ldr	r3, [r3, #32]
 80095b6:	2bbc      	cmp	r3, #188	; 0xbc
 80095b8:	d918      	bls.n	80095ec <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	8a9b      	ldrh	r3, [r3, #20]
 80095be:	461a      	mov	r2, r3
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	69da      	ldr	r2, [r3, #28]
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d003      	beq.n	80095dc <USB_HC_StartXfer+0xdc>
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	2b02      	cmp	r3, #2
 80095da:	d103      	bne.n	80095e4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	2202      	movs	r2, #2
 80095e0:	60da      	str	r2, [r3, #12]
 80095e2:	e05f      	b.n	80096a4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	2201      	movs	r2, #1
 80095e8:	60da      	str	r2, [r3, #12]
 80095ea:	e05b      	b.n	80096a4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	6a1a      	ldr	r2, [r3, #32]
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d007      	beq.n	800960c <USB_HC_StartXfer+0x10c>
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	2b02      	cmp	r3, #2
 8009602:	d003      	beq.n	800960c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	2204      	movs	r2, #4
 8009608:	60da      	str	r2, [r3, #12]
 800960a:	e04b      	b.n	80096a4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	2203      	movs	r2, #3
 8009610:	60da      	str	r2, [r3, #12]
 8009612:	e047      	b.n	80096a4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8009614:	79fb      	ldrb	r3, [r7, #7]
 8009616:	2b01      	cmp	r3, #1
 8009618:	d10d      	bne.n	8009636 <USB_HC_StartXfer+0x136>
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	6a1b      	ldr	r3, [r3, #32]
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	8a92      	ldrh	r2, [r2, #20]
 8009622:	4293      	cmp	r3, r2
 8009624:	d907      	bls.n	8009636 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009626:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009628:	68ba      	ldr	r2, [r7, #8]
 800962a:	8a92      	ldrh	r2, [r2, #20]
 800962c:	fb03 f202 	mul.w	r2, r3, r2
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	61da      	str	r2, [r3, #28]
 8009634:	e036      	b.n	80096a4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	6a1a      	ldr	r2, [r3, #32]
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	61da      	str	r2, [r3, #28]
 800963e:	e031      	b.n	80096a4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	6a1b      	ldr	r3, [r3, #32]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d018      	beq.n	800967a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	6a1b      	ldr	r3, [r3, #32]
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	8a92      	ldrh	r2, [r2, #20]
 8009650:	4413      	add	r3, r2
 8009652:	3b01      	subs	r3, #1
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	8a92      	ldrh	r2, [r2, #20]
 8009658:	fbb3 f3f2 	udiv	r3, r3, r2
 800965c:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 800965e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009660:	8b7b      	ldrh	r3, [r7, #26]
 8009662:	429a      	cmp	r2, r3
 8009664:	d90b      	bls.n	800967e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8009666:	8b7b      	ldrh	r3, [r7, #26]
 8009668:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800966a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	8a92      	ldrh	r2, [r2, #20]
 8009670:	fb03 f202 	mul.w	r2, r3, r2
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	61da      	str	r2, [r3, #28]
 8009678:	e001      	b.n	800967e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800967a:	2301      	movs	r3, #1
 800967c:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	78db      	ldrb	r3, [r3, #3]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00a      	beq.n	800969c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009686:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	8a92      	ldrh	r2, [r2, #20]
 800968c:	fb03 f202 	mul.w	r2, r3, r2
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	61da      	str	r2, [r3, #28]
 8009694:	e006      	b.n	80096a4 <USB_HC_StartXfer+0x1a4>
 8009696:	bf00      	nop
 8009698:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	6a1a      	ldr	r2, [r3, #32]
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	69db      	ldr	r3, [r3, #28]
 80096a8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80096ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80096ae:	04d9      	lsls	r1, r3, #19
 80096b0:	4ba3      	ldr	r3, [pc, #652]	; (8009940 <USB_HC_StartXfer+0x440>)
 80096b2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80096b4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	7d9b      	ldrb	r3, [r3, #22]
 80096ba:	075b      	lsls	r3, r3, #29
 80096bc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80096c0:	69f9      	ldr	r1, [r7, #28]
 80096c2:	0148      	lsls	r0, r1, #5
 80096c4:	6a39      	ldr	r1, [r7, #32]
 80096c6:	4401      	add	r1, r0
 80096c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80096cc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80096ce:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80096d0:	79fb      	ldrb	r3, [r7, #7]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d009      	beq.n	80096ea <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	6999      	ldr	r1, [r3, #24]
 80096da:	69fb      	ldr	r3, [r7, #28]
 80096dc:	015a      	lsls	r2, r3, #5
 80096de:	6a3b      	ldr	r3, [r7, #32]
 80096e0:	4413      	add	r3, r2
 80096e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096e6:	460a      	mov	r2, r1
 80096e8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80096ea:	6a3b      	ldr	r3, [r7, #32]
 80096ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	f003 0301 	and.w	r3, r3, #1
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	bf0c      	ite	eq
 80096fa:	2301      	moveq	r3, #1
 80096fc:	2300      	movne	r3, #0
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	015a      	lsls	r2, r3, #5
 8009706:	6a3b      	ldr	r3, [r7, #32]
 8009708:	4413      	add	r3, r2
 800970a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	69fa      	ldr	r2, [r7, #28]
 8009712:	0151      	lsls	r1, r2, #5
 8009714:	6a3a      	ldr	r2, [r7, #32]
 8009716:	440a      	add	r2, r1
 8009718:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800971c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009720:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	015a      	lsls	r2, r3, #5
 8009726:	6a3b      	ldr	r3, [r7, #32]
 8009728:	4413      	add	r3, r2
 800972a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	7e7b      	ldrb	r3, [r7, #25]
 8009732:	075b      	lsls	r3, r3, #29
 8009734:	69f9      	ldr	r1, [r7, #28]
 8009736:	0148      	lsls	r0, r1, #5
 8009738:	6a39      	ldr	r1, [r7, #32]
 800973a:	4401      	add	r1, r0
 800973c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009740:	4313      	orrs	r3, r2
 8009742:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	799b      	ldrb	r3, [r3, #6]
 8009748:	2b01      	cmp	r3, #1
 800974a:	f040 80c3 	bne.w	80098d4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	7c5b      	ldrb	r3, [r3, #17]
 8009752:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009754:	68ba      	ldr	r2, [r7, #8]
 8009756:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009758:	4313      	orrs	r3, r2
 800975a:	69fa      	ldr	r2, [r7, #28]
 800975c:	0151      	lsls	r1, r2, #5
 800975e:	6a3a      	ldr	r2, [r7, #32]
 8009760:	440a      	add	r2, r1
 8009762:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009766:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800976a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	015a      	lsls	r2, r3, #5
 8009770:	6a3b      	ldr	r3, [r7, #32]
 8009772:	4413      	add	r3, r2
 8009774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	69fa      	ldr	r2, [r7, #28]
 800977c:	0151      	lsls	r1, r2, #5
 800977e:	6a3a      	ldr	r2, [r7, #32]
 8009780:	440a      	add	r2, r1
 8009782:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009786:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800978a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	79db      	ldrb	r3, [r3, #7]
 8009790:	2b01      	cmp	r3, #1
 8009792:	d123      	bne.n	80097dc <USB_HC_StartXfer+0x2dc>
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	78db      	ldrb	r3, [r3, #3]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d11f      	bne.n	80097dc <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	015a      	lsls	r2, r3, #5
 80097a0:	6a3b      	ldr	r3, [r7, #32]
 80097a2:	4413      	add	r3, r2
 80097a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	69fa      	ldr	r2, [r7, #28]
 80097ac:	0151      	lsls	r1, r2, #5
 80097ae:	6a3a      	ldr	r2, [r7, #32]
 80097b0:	440a      	add	r2, r1
 80097b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097ba:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	015a      	lsls	r2, r3, #5
 80097c0:	6a3b      	ldr	r3, [r7, #32]
 80097c2:	4413      	add	r3, r2
 80097c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	69fa      	ldr	r2, [r7, #28]
 80097cc:	0151      	lsls	r1, r2, #5
 80097ce:	6a3a      	ldr	r2, [r7, #32]
 80097d0:	440a      	add	r2, r1
 80097d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097da:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	7c9b      	ldrb	r3, [r3, #18]
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d003      	beq.n	80097ec <USB_HC_StartXfer+0x2ec>
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	7c9b      	ldrb	r3, [r3, #18]
 80097e8:	2b03      	cmp	r3, #3
 80097ea:	d117      	bne.n	800981c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d113      	bne.n	800981c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	78db      	ldrb	r3, [r3, #3]
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d10f      	bne.n	800981c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	015a      	lsls	r2, r3, #5
 8009800:	6a3b      	ldr	r3, [r7, #32]
 8009802:	4413      	add	r3, r2
 8009804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	69fa      	ldr	r2, [r7, #28]
 800980c:	0151      	lsls	r1, r2, #5
 800980e:	6a3a      	ldr	r2, [r7, #32]
 8009810:	440a      	add	r2, r1
 8009812:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800981a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	7c9b      	ldrb	r3, [r3, #18]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d162      	bne.n	80098ea <USB_HC_StartXfer+0x3ea>
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	78db      	ldrb	r3, [r3, #3]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d15e      	bne.n	80098ea <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	3b01      	subs	r3, #1
 8009832:	2b03      	cmp	r3, #3
 8009834:	d858      	bhi.n	80098e8 <USB_HC_StartXfer+0x3e8>
 8009836:	a201      	add	r2, pc, #4	; (adr r2, 800983c <USB_HC_StartXfer+0x33c>)
 8009838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800983c:	0800984d 	.word	0x0800984d
 8009840:	0800986f 	.word	0x0800986f
 8009844:	08009891 	.word	0x08009891
 8009848:	080098b3 	.word	0x080098b3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	015a      	lsls	r2, r3, #5
 8009850:	6a3b      	ldr	r3, [r7, #32]
 8009852:	4413      	add	r3, r2
 8009854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	69fa      	ldr	r2, [r7, #28]
 800985c:	0151      	lsls	r1, r2, #5
 800985e:	6a3a      	ldr	r2, [r7, #32]
 8009860:	440a      	add	r2, r1
 8009862:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800986a:	6053      	str	r3, [r2, #4]
          break;
 800986c:	e03d      	b.n	80098ea <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800986e:	69fb      	ldr	r3, [r7, #28]
 8009870:	015a      	lsls	r2, r3, #5
 8009872:	6a3b      	ldr	r3, [r7, #32]
 8009874:	4413      	add	r3, r2
 8009876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	69fa      	ldr	r2, [r7, #28]
 800987e:	0151      	lsls	r1, r2, #5
 8009880:	6a3a      	ldr	r2, [r7, #32]
 8009882:	440a      	add	r2, r1
 8009884:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009888:	f043 030e 	orr.w	r3, r3, #14
 800988c:	6053      	str	r3, [r2, #4]
          break;
 800988e:	e02c      	b.n	80098ea <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	015a      	lsls	r2, r3, #5
 8009894:	6a3b      	ldr	r3, [r7, #32]
 8009896:	4413      	add	r3, r2
 8009898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	69fa      	ldr	r2, [r7, #28]
 80098a0:	0151      	lsls	r1, r2, #5
 80098a2:	6a3a      	ldr	r2, [r7, #32]
 80098a4:	440a      	add	r2, r1
 80098a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80098ae:	6053      	str	r3, [r2, #4]
          break;
 80098b0:	e01b      	b.n	80098ea <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	015a      	lsls	r2, r3, #5
 80098b6:	6a3b      	ldr	r3, [r7, #32]
 80098b8:	4413      	add	r3, r2
 80098ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	69fa      	ldr	r2, [r7, #28]
 80098c2:	0151      	lsls	r1, r2, #5
 80098c4:	6a3a      	ldr	r2, [r7, #32]
 80098c6:	440a      	add	r2, r1
 80098c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80098d0:	6053      	str	r3, [r2, #4]
          break;
 80098d2:	e00a      	b.n	80098ea <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	6a3b      	ldr	r3, [r7, #32]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098e0:	461a      	mov	r2, r3
 80098e2:	2300      	movs	r3, #0
 80098e4:	6053      	str	r3, [r2, #4]
 80098e6:	e000      	b.n	80098ea <USB_HC_StartXfer+0x3ea>
          break;
 80098e8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	015a      	lsls	r2, r3, #5
 80098ee:	6a3b      	ldr	r3, [r7, #32]
 80098f0:	4413      	add	r3, r2
 80098f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009900:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	78db      	ldrb	r3, [r3, #3]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d004      	beq.n	8009914 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009910:	613b      	str	r3, [r7, #16]
 8009912:	e003      	b.n	800991c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800991a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009922:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	015a      	lsls	r2, r3, #5
 8009928:	6a3b      	ldr	r3, [r7, #32]
 800992a:	4413      	add	r3, r2
 800992c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009930:	461a      	mov	r2, r3
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009936:	79fb      	ldrb	r3, [r7, #7]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d003      	beq.n	8009944 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800993c:	2300      	movs	r3, #0
 800993e:	e055      	b.n	80099ec <USB_HC_StartXfer+0x4ec>
 8009940:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	78db      	ldrb	r3, [r3, #3]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d14e      	bne.n	80099ea <USB_HC_StartXfer+0x4ea>
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	6a1b      	ldr	r3, [r3, #32]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d04a      	beq.n	80099ea <USB_HC_StartXfer+0x4ea>
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	79db      	ldrb	r3, [r3, #7]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d146      	bne.n	80099ea <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	7c9b      	ldrb	r3, [r3, #18]
 8009960:	2b03      	cmp	r3, #3
 8009962:	d831      	bhi.n	80099c8 <USB_HC_StartXfer+0x4c8>
 8009964:	a201      	add	r2, pc, #4	; (adr r2, 800996c <USB_HC_StartXfer+0x46c>)
 8009966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800996a:	bf00      	nop
 800996c:	0800997d 	.word	0x0800997d
 8009970:	080099a1 	.word	0x080099a1
 8009974:	0800997d 	.word	0x0800997d
 8009978:	080099a1 	.word	0x080099a1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	6a1b      	ldr	r3, [r3, #32]
 8009980:	3303      	adds	r3, #3
 8009982:	089b      	lsrs	r3, r3, #2
 8009984:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009986:	8afa      	ldrh	r2, [r7, #22]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800998c:	b29b      	uxth	r3, r3
 800998e:	429a      	cmp	r2, r3
 8009990:	d91c      	bls.n	80099cc <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	699b      	ldr	r3, [r3, #24]
 8009996:	f043 0220 	orr.w	r2, r3, #32
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	619a      	str	r2, [r3, #24]
        }
        break;
 800999e:	e015      	b.n	80099cc <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	6a1b      	ldr	r3, [r3, #32]
 80099a4:	3303      	adds	r3, #3
 80099a6:	089b      	lsrs	r3, r3, #2
 80099a8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80099aa:	8afa      	ldrh	r2, [r7, #22]
 80099ac:	6a3b      	ldr	r3, [r7, #32]
 80099ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d90a      	bls.n	80099d0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	699b      	ldr	r3, [r3, #24]
 80099be:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	619a      	str	r2, [r3, #24]
        }
        break;
 80099c6:	e003      	b.n	80099d0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80099c8:	bf00      	nop
 80099ca:	e002      	b.n	80099d2 <USB_HC_StartXfer+0x4d2>
        break;
 80099cc:	bf00      	nop
 80099ce:	e000      	b.n	80099d2 <USB_HC_StartXfer+0x4d2>
        break;
 80099d0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	6999      	ldr	r1, [r3, #24]
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	785a      	ldrb	r2, [r3, #1]
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	6a1b      	ldr	r3, [r3, #32]
 80099de:	b29b      	uxth	r3, r3
 80099e0:	2000      	movs	r0, #0
 80099e2:	9000      	str	r0, [sp, #0]
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f7ff f9c9 	bl	8008d7c <USB_WritePacket>
  }

  return HAL_OK;
 80099ea:	2300      	movs	r3, #0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3728      	adds	r7, #40	; 0x28
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a06:	695b      	ldr	r3, [r3, #20]
 8009a08:	b29b      	uxth	r3, r3
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3714      	adds	r7, #20
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr

08009a16 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009a16:	b480      	push	{r7}
 8009a18:	b089      	sub	sp, #36	; 0x24
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
 8009a1e:	460b      	mov	r3, r1
 8009a20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009a26:	78fb      	ldrb	r3, [r7, #3]
 8009a28:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	015a      	lsls	r2, r3, #5
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	4413      	add	r3, r2
 8009a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	0c9b      	lsrs	r3, r3, #18
 8009a3e:	f003 0303 	and.w	r3, r3, #3
 8009a42:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	015a      	lsls	r2, r3, #5
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	0fdb      	lsrs	r3, r3, #31
 8009a54:	f003 0301 	and.w	r3, r3, #1
 8009a58:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	015a      	lsls	r2, r3, #5
 8009a5e:	69fb      	ldr	r3, [r7, #28]
 8009a60:	4413      	add	r3, r2
 8009a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	0fdb      	lsrs	r3, r3, #31
 8009a6a:	f003 0301 	and.w	r3, r3, #1
 8009a6e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	f003 0320 	and.w	r3, r3, #32
 8009a78:	2b20      	cmp	r3, #32
 8009a7a:	d10d      	bne.n	8009a98 <USB_HC_Halt+0x82>
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d10a      	bne.n	8009a98 <USB_HC_Halt+0x82>
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d005      	beq.n	8009a94 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d002      	beq.n	8009a94 <USB_HC_Halt+0x7e>
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	2b03      	cmp	r3, #3
 8009a92:	d101      	bne.n	8009a98 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8009a94:	2300      	movs	r3, #0
 8009a96:	e0d8      	b.n	8009c4a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d002      	beq.n	8009aa4 <USB_HC_Halt+0x8e>
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d173      	bne.n	8009b8c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009aa4:	69bb      	ldr	r3, [r7, #24]
 8009aa6:	015a      	lsls	r2, r3, #5
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	4413      	add	r3, r2
 8009aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	69ba      	ldr	r2, [r7, #24]
 8009ab4:	0151      	lsls	r1, r2, #5
 8009ab6:	69fa      	ldr	r2, [r7, #28]
 8009ab8:	440a      	add	r2, r1
 8009aba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009abe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ac2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	f003 0320 	and.w	r3, r3, #32
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d14a      	bne.n	8009b66 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d133      	bne.n	8009b44 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	015a      	lsls	r2, r3, #5
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	69ba      	ldr	r2, [r7, #24]
 8009aec:	0151      	lsls	r1, r2, #5
 8009aee:	69fa      	ldr	r2, [r7, #28]
 8009af0:	440a      	add	r2, r1
 8009af2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009af6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009afa:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	015a      	lsls	r2, r3, #5
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	4413      	add	r3, r2
 8009b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	69ba      	ldr	r2, [r7, #24]
 8009b0c:	0151      	lsls	r1, r2, #5
 8009b0e:	69fa      	ldr	r2, [r7, #28]
 8009b10:	440a      	add	r2, r1
 8009b12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b1a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	3301      	adds	r3, #1
 8009b20:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b28:	d82e      	bhi.n	8009b88 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	015a      	lsls	r2, r3, #5
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	4413      	add	r3, r2
 8009b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b40:	d0ec      	beq.n	8009b1c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009b42:	e081      	b.n	8009c48 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	015a      	lsls	r2, r3, #5
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	69ba      	ldr	r2, [r7, #24]
 8009b54:	0151      	lsls	r1, r2, #5
 8009b56:	69fa      	ldr	r2, [r7, #28]
 8009b58:	440a      	add	r2, r1
 8009b5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b62:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009b64:	e070      	b.n	8009c48 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009b66:	69bb      	ldr	r3, [r7, #24]
 8009b68:	015a      	lsls	r2, r3, #5
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	69ba      	ldr	r2, [r7, #24]
 8009b76:	0151      	lsls	r1, r2, #5
 8009b78:	69fa      	ldr	r2, [r7, #28]
 8009b7a:	440a      	add	r2, r1
 8009b7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b84:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009b86:	e05f      	b.n	8009c48 <USB_HC_Halt+0x232>
            break;
 8009b88:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009b8a:	e05d      	b.n	8009c48 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	015a      	lsls	r2, r3, #5
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	4413      	add	r3, r2
 8009b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	69ba      	ldr	r2, [r7, #24]
 8009b9c:	0151      	lsls	r1, r2, #5
 8009b9e:	69fa      	ldr	r2, [r7, #28]
 8009ba0:	440a      	add	r2, r1
 8009ba2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ba6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009baa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bb2:	691b      	ldr	r3, [r3, #16]
 8009bb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d133      	bne.n	8009c24 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	015a      	lsls	r2, r3, #5
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	69ba      	ldr	r2, [r7, #24]
 8009bcc:	0151      	lsls	r1, r2, #5
 8009bce:	69fa      	ldr	r2, [r7, #28]
 8009bd0:	440a      	add	r2, r1
 8009bd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009bda:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009bdc:	69bb      	ldr	r3, [r7, #24]
 8009bde:	015a      	lsls	r2, r3, #5
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	4413      	add	r3, r2
 8009be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	69ba      	ldr	r2, [r7, #24]
 8009bec:	0151      	lsls	r1, r2, #5
 8009bee:	69fa      	ldr	r2, [r7, #28]
 8009bf0:	440a      	add	r2, r1
 8009bf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009bfa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c08:	d81d      	bhi.n	8009c46 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	015a      	lsls	r2, r3, #5
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	4413      	add	r3, r2
 8009c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c20:	d0ec      	beq.n	8009bfc <USB_HC_Halt+0x1e6>
 8009c22:	e011      	b.n	8009c48 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	015a      	lsls	r2, r3, #5
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	4413      	add	r3, r2
 8009c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	69ba      	ldr	r2, [r7, #24]
 8009c34:	0151      	lsls	r1, r2, #5
 8009c36:	69fa      	ldr	r2, [r7, #28]
 8009c38:	440a      	add	r2, r1
 8009c3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c42:	6013      	str	r3, [r2, #0]
 8009c44:	e000      	b.n	8009c48 <USB_HC_Halt+0x232>
          break;
 8009c46:	bf00      	nop
    }
  }

  return HAL_OK;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3724      	adds	r7, #36	; 0x24
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr
	...

08009c58 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b087      	sub	sp, #28
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	460b      	mov	r3, r1
 8009c62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009c68:	78fb      	ldrb	r3, [r7, #3]
 8009c6a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	04da      	lsls	r2, r3, #19
 8009c74:	4b15      	ldr	r3, [pc, #84]	; (8009ccc <USB_DoPing+0x74>)
 8009c76:	4013      	ands	r3, r2
 8009c78:	693a      	ldr	r2, [r7, #16]
 8009c7a:	0151      	lsls	r1, r2, #5
 8009c7c:	697a      	ldr	r2, [r7, #20]
 8009c7e:	440a      	add	r2, r1
 8009c80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c88:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	015a      	lsls	r2, r3, #5
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	4413      	add	r3, r2
 8009c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ca0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ca8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	015a      	lsls	r2, r3, #5
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009cbc:	2300      	movs	r3, #0
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	371c      	adds	r7, #28
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr
 8009cca:	bf00      	nop
 8009ccc:	1ff80000 	.word	0x1ff80000

08009cd0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b088      	sub	sp, #32
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f7fe ff8c 	bl	8008c02 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009cea:	2110      	movs	r1, #16
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f7fe ffe5 	bl	8008cbc <USB_FlushTxFifo>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d001      	beq.n	8009cfc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f7ff f80f 	bl	8008d20 <USB_FlushRxFifo>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d001      	beq.n	8009d0c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	61bb      	str	r3, [r7, #24]
 8009d10:	e01f      	b.n	8009d52 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	015a      	lsls	r2, r3, #5
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	4413      	add	r3, r2
 8009d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d28:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d30:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d38:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	015a      	lsls	r2, r3, #5
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	4413      	add	r3, r2
 8009d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d46:	461a      	mov	r2, r3
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	3301      	adds	r3, #1
 8009d50:	61bb      	str	r3, [r7, #24]
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	2b0f      	cmp	r3, #15
 8009d56:	d9dc      	bls.n	8009d12 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009d58:	2300      	movs	r3, #0
 8009d5a:	61bb      	str	r3, [r7, #24]
 8009d5c:	e034      	b.n	8009dc8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	015a      	lsls	r2, r3, #5
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	4413      	add	r3, r2
 8009d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d74:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d7c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d84:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	015a      	lsls	r2, r3, #5
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d92:	461a      	mov	r2, r3
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009da4:	d80c      	bhi.n	8009dc0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	015a      	lsls	r2, r3, #5
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	4413      	add	r3, r2
 8009dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009db8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009dbc:	d0ec      	beq.n	8009d98 <USB_StopHost+0xc8>
 8009dbe:	e000      	b.n	8009dc2 <USB_StopHost+0xf2>
        break;
 8009dc0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	61bb      	str	r3, [r7, #24]
 8009dc8:	69bb      	ldr	r3, [r7, #24]
 8009dca:	2b0f      	cmp	r3, #15
 8009dcc:	d9c7      	bls.n	8009d5e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8009dda:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f04f 32ff 	mov.w	r2, #4294967295
 8009de2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f7fe fefb 	bl	8008be0 <USB_EnableGlobalInt>

  return ret;
 8009dea:	7ffb      	ldrb	r3, [r7, #31]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3720      	adds	r7, #32
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009df4:	b590      	push	{r4, r7, lr}
 8009df6:	b089      	sub	sp, #36	; 0x24
 8009df8:	af04      	add	r7, sp, #16
 8009dfa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	2202      	movs	r2, #2
 8009e00:	2102      	movs	r1, #2
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 fc85 	bl	800a712 <USBH_FindInterface>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009e0c:	7bfb      	ldrb	r3, [r7, #15]
 8009e0e:	2bff      	cmp	r3, #255	; 0xff
 8009e10:	d002      	beq.n	8009e18 <USBH_CDC_InterfaceInit+0x24>
 8009e12:	7bfb      	ldrb	r3, [r7, #15]
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d901      	bls.n	8009e1c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009e18:	2302      	movs	r3, #2
 8009e1a:	e13d      	b.n	800a098 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009e1c:	7bfb      	ldrb	r3, [r7, #15]
 8009e1e:	4619      	mov	r1, r3
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 fc5a 	bl	800a6da <USBH_SelectInterface>
 8009e26:	4603      	mov	r3, r0
 8009e28:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009e2a:	7bbb      	ldrb	r3, [r7, #14]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d001      	beq.n	8009e34 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009e30:	2302      	movs	r3, #2
 8009e32:	e131      	b.n	800a098 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009e3a:	2050      	movs	r0, #80	; 0x50
 8009e3c:	f002 fb74 	bl	800c528 <malloc>
 8009e40:	4603      	mov	r3, r0
 8009e42:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e4a:	69db      	ldr	r3, [r3, #28]
 8009e4c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d101      	bne.n	8009e58 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009e54:	2302      	movs	r3, #2
 8009e56:	e11f      	b.n	800a098 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009e58:	2250      	movs	r2, #80	; 0x50
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	68b8      	ldr	r0, [r7, #8]
 8009e5e:	f003 fbe8 	bl	800d632 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009e62:	7bfb      	ldrb	r3, [r7, #15]
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	211a      	movs	r1, #26
 8009e68:	fb01 f303 	mul.w	r3, r1, r3
 8009e6c:	4413      	add	r3, r2
 8009e6e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	b25b      	sxtb	r3, r3
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	da15      	bge.n	8009ea6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009e7a:	7bfb      	ldrb	r3, [r7, #15]
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	211a      	movs	r1, #26
 8009e80:	fb01 f303 	mul.w	r3, r1, r3
 8009e84:	4413      	add	r3, r2
 8009e86:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009e8a:	781a      	ldrb	r2, [r3, #0]
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009e90:	7bfb      	ldrb	r3, [r7, #15]
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	211a      	movs	r1, #26
 8009e96:	fb01 f303 	mul.w	r3, r1, r3
 8009e9a:	4413      	add	r3, r2
 8009e9c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009ea0:	881a      	ldrh	r2, [r3, #0]
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	785b      	ldrb	r3, [r3, #1]
 8009eaa:	4619      	mov	r1, r3
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f001 ffce 	bl	800be4e <USBH_AllocPipe>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	7819      	ldrb	r1, [r3, #0]
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	7858      	ldrb	r0, [r3, #1]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009ece:	68ba      	ldr	r2, [r7, #8]
 8009ed0:	8952      	ldrh	r2, [r2, #10]
 8009ed2:	9202      	str	r2, [sp, #8]
 8009ed4:	2203      	movs	r2, #3
 8009ed6:	9201      	str	r2, [sp, #4]
 8009ed8:	9300      	str	r3, [sp, #0]
 8009eda:	4623      	mov	r3, r4
 8009edc:	4602      	mov	r2, r0
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f001 ff86 	bl	800bdf0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	4619      	mov	r1, r3
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f002 fa95 	bl	800c41c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	210a      	movs	r1, #10
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 fc0a 	bl	800a712 <USBH_FindInterface>
 8009efe:	4603      	mov	r3, r0
 8009f00:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009f02:	7bfb      	ldrb	r3, [r7, #15]
 8009f04:	2bff      	cmp	r3, #255	; 0xff
 8009f06:	d002      	beq.n	8009f0e <USBH_CDC_InterfaceInit+0x11a>
 8009f08:	7bfb      	ldrb	r3, [r7, #15]
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d901      	bls.n	8009f12 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009f0e:	2302      	movs	r3, #2
 8009f10:	e0c2      	b.n	800a098 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009f12:	7bfb      	ldrb	r3, [r7, #15]
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	211a      	movs	r1, #26
 8009f18:	fb01 f303 	mul.w	r3, r1, r3
 8009f1c:	4413      	add	r3, r2
 8009f1e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	b25b      	sxtb	r3, r3
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	da16      	bge.n	8009f58 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009f2a:	7bfb      	ldrb	r3, [r7, #15]
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	211a      	movs	r1, #26
 8009f30:	fb01 f303 	mul.w	r3, r1, r3
 8009f34:	4413      	add	r3, r2
 8009f36:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009f3a:	781a      	ldrb	r2, [r3, #0]
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009f40:	7bfb      	ldrb	r3, [r7, #15]
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	211a      	movs	r1, #26
 8009f46:	fb01 f303 	mul.w	r3, r1, r3
 8009f4a:	4413      	add	r3, r2
 8009f4c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009f50:	881a      	ldrh	r2, [r3, #0]
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	835a      	strh	r2, [r3, #26]
 8009f56:	e015      	b.n	8009f84 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009f58:	7bfb      	ldrb	r3, [r7, #15]
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	211a      	movs	r1, #26
 8009f5e:	fb01 f303 	mul.w	r3, r1, r3
 8009f62:	4413      	add	r3, r2
 8009f64:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009f68:	781a      	ldrb	r2, [r3, #0]
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009f6e:	7bfb      	ldrb	r3, [r7, #15]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	211a      	movs	r1, #26
 8009f74:	fb01 f303 	mul.w	r3, r1, r3
 8009f78:	4413      	add	r3, r2
 8009f7a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009f7e:	881a      	ldrh	r2, [r3, #0]
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009f84:	7bfb      	ldrb	r3, [r7, #15]
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	211a      	movs	r1, #26
 8009f8a:	fb01 f303 	mul.w	r3, r1, r3
 8009f8e:	4413      	add	r3, r2
 8009f90:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	b25b      	sxtb	r3, r3
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	da16      	bge.n	8009fca <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009f9c:	7bfb      	ldrb	r3, [r7, #15]
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	211a      	movs	r1, #26
 8009fa2:	fb01 f303 	mul.w	r3, r1, r3
 8009fa6:	4413      	add	r3, r2
 8009fa8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009fac:	781a      	ldrb	r2, [r3, #0]
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009fb2:	7bfb      	ldrb	r3, [r7, #15]
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	211a      	movs	r1, #26
 8009fb8:	fb01 f303 	mul.w	r3, r1, r3
 8009fbc:	4413      	add	r3, r2
 8009fbe:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009fc2:	881a      	ldrh	r2, [r3, #0]
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	835a      	strh	r2, [r3, #26]
 8009fc8:	e015      	b.n	8009ff6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009fca:	7bfb      	ldrb	r3, [r7, #15]
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	211a      	movs	r1, #26
 8009fd0:	fb01 f303 	mul.w	r3, r1, r3
 8009fd4:	4413      	add	r3, r2
 8009fd6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009fda:	781a      	ldrb	r2, [r3, #0]
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009fe0:	7bfb      	ldrb	r3, [r7, #15]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	211a      	movs	r1, #26
 8009fe6:	fb01 f303 	mul.w	r3, r1, r3
 8009fea:	4413      	add	r3, r2
 8009fec:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009ff0:	881a      	ldrh	r2, [r3, #0]
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	7b9b      	ldrb	r3, [r3, #14]
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f001 ff26 	bl	800be4e <USBH_AllocPipe>
 800a002:	4603      	mov	r3, r0
 800a004:	461a      	mov	r2, r3
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	7bdb      	ldrb	r3, [r3, #15]
 800a00e:	4619      	mov	r1, r3
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f001 ff1c 	bl	800be4e <USBH_AllocPipe>
 800a016:	4603      	mov	r3, r0
 800a018:	461a      	mov	r2, r3
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	7b59      	ldrb	r1, [r3, #13]
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	7b98      	ldrb	r0, [r3, #14]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a032:	68ba      	ldr	r2, [r7, #8]
 800a034:	8b12      	ldrh	r2, [r2, #24]
 800a036:	9202      	str	r2, [sp, #8]
 800a038:	2202      	movs	r2, #2
 800a03a:	9201      	str	r2, [sp, #4]
 800a03c:	9300      	str	r3, [sp, #0]
 800a03e:	4623      	mov	r3, r4
 800a040:	4602      	mov	r2, r0
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f001 fed4 	bl	800bdf0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	7b19      	ldrb	r1, [r3, #12]
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	7bd8      	ldrb	r0, [r3, #15]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a05c:	68ba      	ldr	r2, [r7, #8]
 800a05e:	8b52      	ldrh	r2, [r2, #26]
 800a060:	9202      	str	r2, [sp, #8]
 800a062:	2202      	movs	r2, #2
 800a064:	9201      	str	r2, [sp, #4]
 800a066:	9300      	str	r3, [sp, #0]
 800a068:	4623      	mov	r3, r4
 800a06a:	4602      	mov	r2, r0
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f001 febf 	bl	800bdf0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	2200      	movs	r2, #0
 800a076:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	7b5b      	ldrb	r3, [r3, #13]
 800a07e:	2200      	movs	r2, #0
 800a080:	4619      	mov	r1, r3
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f002 f9ca 	bl	800c41c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	7b1b      	ldrb	r3, [r3, #12]
 800a08c:	2200      	movs	r2, #0
 800a08e:	4619      	mov	r1, r3
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f002 f9c3 	bl	800c41c <USBH_LL_SetToggle>

  return USBH_OK;
 800a096:	2300      	movs	r3, #0
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3714      	adds	r7, #20
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd90      	pop	{r4, r7, pc}

0800a0a0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0ae:	69db      	ldr	r3, [r3, #28]
 800a0b0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d00e      	beq.n	800a0d8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	4619      	mov	r1, r3
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f001 feb4 	bl	800be2e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f001 fedf 	bl	800be90 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	7b1b      	ldrb	r3, [r3, #12]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d00e      	beq.n	800a0fe <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	7b1b      	ldrb	r3, [r3, #12]
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f001 fea1 	bl	800be2e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	7b1b      	ldrb	r3, [r3, #12]
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f001 fecc 	bl	800be90 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	7b5b      	ldrb	r3, [r3, #13]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00e      	beq.n	800a124 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	7b5b      	ldrb	r3, [r3, #13]
 800a10a:	4619      	mov	r1, r3
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f001 fe8e 	bl	800be2e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	7b5b      	ldrb	r3, [r3, #13]
 800a116:	4619      	mov	r1, r3
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f001 feb9 	bl	800be90 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2200      	movs	r2, #0
 800a122:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a12a:	69db      	ldr	r3, [r3, #28]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00b      	beq.n	800a148 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a136:	69db      	ldr	r3, [r3, #28]
 800a138:	4618      	mov	r0, r3
 800a13a:	f002 f9fd 	bl	800c538 <free>
    phost->pActiveClass->pData = 0U;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a144:	2200      	movs	r2, #0
 800a146:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3710      	adds	r7, #16
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b084      	sub	sp, #16
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a160:	69db      	ldr	r3, [r3, #28]
 800a162:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	3340      	adds	r3, #64	; 0x40
 800a168:	4619      	mov	r1, r3
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 f8b1 	bl	800a2d2 <GetLineCoding>
 800a170:	4603      	mov	r3, r0
 800a172:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a174:	7afb      	ldrb	r3, [r7, #11]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d105      	bne.n	800a186 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a180:	2102      	movs	r1, #2
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a186:	7afb      	ldrb	r3, [r7, #11]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3710      	adds	r7, #16
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a198:	2301      	movs	r3, #1
 800a19a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a19c:	2300      	movs	r3, #0
 800a19e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1a6:	69db      	ldr	r3, [r3, #28]
 800a1a8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a1b0:	2b04      	cmp	r3, #4
 800a1b2:	d877      	bhi.n	800a2a4 <USBH_CDC_Process+0x114>
 800a1b4:	a201      	add	r2, pc, #4	; (adr r2, 800a1bc <USBH_CDC_Process+0x2c>)
 800a1b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ba:	bf00      	nop
 800a1bc:	0800a1d1 	.word	0x0800a1d1
 800a1c0:	0800a1d7 	.word	0x0800a1d7
 800a1c4:	0800a207 	.word	0x0800a207
 800a1c8:	0800a27b 	.word	0x0800a27b
 800a1cc:	0800a289 	.word	0x0800a289
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	73fb      	strb	r3, [r7, #15]
      break;
 800a1d4:	e06d      	b.n	800a2b2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1da:	4619      	mov	r1, r3
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 f897 	bl	800a310 <SetLineCoding>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a1e6:	7bbb      	ldrb	r3, [r7, #14]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d104      	bne.n	800a1f6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	2202      	movs	r2, #2
 800a1f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a1f4:	e058      	b.n	800a2a8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a1f6:	7bbb      	ldrb	r3, [r7, #14]
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d055      	beq.n	800a2a8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	2204      	movs	r2, #4
 800a200:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a204:	e050      	b.n	800a2a8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	3340      	adds	r3, #64	; 0x40
 800a20a:	4619      	mov	r1, r3
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 f860 	bl	800a2d2 <GetLineCoding>
 800a212:	4603      	mov	r3, r0
 800a214:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a216:	7bbb      	ldrb	r3, [r7, #14]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d126      	bne.n	800a26a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	2200      	movs	r2, #0
 800a220:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a22e:	791b      	ldrb	r3, [r3, #4]
 800a230:	429a      	cmp	r2, r3
 800a232:	d13b      	bne.n	800a2ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a23e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a240:	429a      	cmp	r2, r3
 800a242:	d133      	bne.n	800a2ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a24e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a250:	429a      	cmp	r2, r3
 800a252:	d12b      	bne.n	800a2ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a25c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a25e:	429a      	cmp	r2, r3
 800a260:	d124      	bne.n	800a2ac <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 f958 	bl	800a518 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a268:	e020      	b.n	800a2ac <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a26a:	7bbb      	ldrb	r3, [r7, #14]
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d01d      	beq.n	800a2ac <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	2204      	movs	r2, #4
 800a274:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a278:	e018      	b.n	800a2ac <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 f867 	bl	800a34e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 f8da 	bl	800a43a <CDC_ProcessReception>
      break;
 800a286:	e014      	b.n	800a2b2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a288:	2100      	movs	r1, #0
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f001 f822 	bl	800b2d4 <USBH_ClrFeature>
 800a290:	4603      	mov	r3, r0
 800a292:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a294:	7bbb      	ldrb	r3, [r7, #14]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d10a      	bne.n	800a2b0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	2200      	movs	r2, #0
 800a29e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a2a2:	e005      	b.n	800a2b0 <USBH_CDC_Process+0x120>

    default:
      break;
 800a2a4:	bf00      	nop
 800a2a6:	e004      	b.n	800a2b2 <USBH_CDC_Process+0x122>
      break;
 800a2a8:	bf00      	nop
 800a2aa:	e002      	b.n	800a2b2 <USBH_CDC_Process+0x122>
      break;
 800a2ac:	bf00      	nop
 800a2ae:	e000      	b.n	800a2b2 <USBH_CDC_Process+0x122>
      break;
 800a2b0:	bf00      	nop

  }

  return status;
 800a2b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3710      	adds	r7, #16
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b083      	sub	sp, #12
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	370c      	adds	r7, #12
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr

0800a2d2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a2d2:	b580      	push	{r7, lr}
 800a2d4:	b082      	sub	sp, #8
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
 800a2da:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	22a1      	movs	r2, #161	; 0xa1
 800a2e0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2221      	movs	r2, #33	; 0x21
 800a2e6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2207      	movs	r2, #7
 800a2f8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	2207      	movs	r2, #7
 800a2fe:	4619      	mov	r1, r3
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f001 fb23 	bl	800b94c <USBH_CtlReq>
 800a306:	4603      	mov	r3, r0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3708      	adds	r7, #8
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2221      	movs	r2, #33	; 0x21
 800a31e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2220      	movs	r2, #32
 800a324:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2207      	movs	r2, #7
 800a336:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	2207      	movs	r2, #7
 800a33c:	4619      	mov	r1, r3
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f001 fb04 	bl	800b94c <USBH_CtlReq>
 800a344:	4603      	mov	r3, r0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3708      	adds	r7, #8
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b086      	sub	sp, #24
 800a352:	af02      	add	r7, sp, #8
 800a354:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a35c:	69db      	ldr	r3, [r3, #28]
 800a35e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a360:	2300      	movs	r3, #0
 800a362:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d002      	beq.n	800a374 <CDC_ProcessTransmission+0x26>
 800a36e:	2b02      	cmp	r3, #2
 800a370:	d023      	beq.n	800a3ba <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a372:	e05e      	b.n	800a432 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a378:	68fa      	ldr	r2, [r7, #12]
 800a37a:	8b12      	ldrh	r2, [r2, #24]
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d90b      	bls.n	800a398 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	69d9      	ldr	r1, [r3, #28]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	8b1a      	ldrh	r2, [r3, #24]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	7b5b      	ldrb	r3, [r3, #13]
 800a38c:	2001      	movs	r0, #1
 800a38e:	9000      	str	r0, [sp, #0]
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f001 fcea 	bl	800bd6a <USBH_BulkSendData>
 800a396:	e00b      	b.n	800a3b0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800a3a0:	b29a      	uxth	r2, r3
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	7b5b      	ldrb	r3, [r3, #13]
 800a3a6:	2001      	movs	r0, #1
 800a3a8:	9000      	str	r0, [sp, #0]
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f001 fcdd 	bl	800bd6a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2202      	movs	r2, #2
 800a3b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a3b8:	e03b      	b.n	800a432 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	7b5b      	ldrb	r3, [r3, #13]
 800a3be:	4619      	mov	r1, r3
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f002 f801 	bl	800c3c8 <USBH_LL_GetURBState>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a3ca:	7afb      	ldrb	r3, [r7, #11]
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d128      	bne.n	800a422 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	8b12      	ldrh	r2, [r2, #24]
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d90e      	bls.n	800a3fa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	8b12      	ldrh	r2, [r2, #24]
 800a3e4:	1a9a      	subs	r2, r3, r2
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	69db      	ldr	r3, [r3, #28]
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	8b12      	ldrh	r2, [r2, #24]
 800a3f2:	441a      	add	r2, r3
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	61da      	str	r2, [r3, #28]
 800a3f8:	e002      	b.n	800a400 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a404:	2b00      	cmp	r3, #0
 800a406:	d004      	beq.n	800a412 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a410:	e00e      	b.n	800a430 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2200      	movs	r2, #0
 800a416:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 f868 	bl	800a4f0 <USBH_CDC_TransmitCallback>
      break;
 800a420:	e006      	b.n	800a430 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a422:	7afb      	ldrb	r3, [r7, #11]
 800a424:	2b02      	cmp	r3, #2
 800a426:	d103      	bne.n	800a430 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2201      	movs	r2, #1
 800a42c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a430:	bf00      	nop
  }
}
 800a432:	bf00      	nop
 800a434:	3710      	adds	r7, #16
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}

0800a43a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a43a:	b580      	push	{r7, lr}
 800a43c:	b086      	sub	sp, #24
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a448:	69db      	ldr	r3, [r3, #28]
 800a44a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a44c:	2300      	movs	r3, #0
 800a44e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a456:	2b03      	cmp	r3, #3
 800a458:	d002      	beq.n	800a460 <CDC_ProcessReception+0x26>
 800a45a:	2b04      	cmp	r3, #4
 800a45c:	d00e      	beq.n	800a47c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a45e:	e043      	b.n	800a4e8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	6a19      	ldr	r1, [r3, #32]
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	8b5a      	ldrh	r2, [r3, #26]
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	7b1b      	ldrb	r3, [r3, #12]
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f001 fca1 	bl	800bdb4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	2204      	movs	r2, #4
 800a476:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a47a:	e035      	b.n	800a4e8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	7b1b      	ldrb	r3, [r3, #12]
 800a480:	4619      	mov	r1, r3
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f001 ffa0 	bl	800c3c8 <USBH_LL_GetURBState>
 800a488:	4603      	mov	r3, r0
 800a48a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a48c:	7cfb      	ldrb	r3, [r7, #19]
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d129      	bne.n	800a4e6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	7b1b      	ldrb	r3, [r3, #12]
 800a496:	4619      	mov	r1, r3
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f001 ff03 	bl	800c2a4 <USBH_LL_GetLastXferSize>
 800a49e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a4:	68fa      	ldr	r2, [r7, #12]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d016      	beq.n	800a4d8 <CDC_ProcessReception+0x9e>
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	8b5b      	ldrh	r3, [r3, #26]
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d910      	bls.n	800a4d8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	1ad2      	subs	r2, r2, r3
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	6a1a      	ldr	r2, [r3, #32]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	441a      	add	r2, r3
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	2203      	movs	r2, #3
 800a4d2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a4d6:	e006      	b.n	800a4e6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 f80f 	bl	800a504 <USBH_CDC_ReceiveCallback>
      break;
 800a4e6:	bf00      	nop
  }
}
 800a4e8:	bf00      	nop
 800a4ea:	3718      	adds	r7, #24
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a4f8:	bf00      	nop
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a50c:	bf00      	nop
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a520:	bf00      	nop
 800a522:	370c      	adds	r7, #12
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	4613      	mov	r3, r2
 800a538:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d101      	bne.n	800a544 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a540:	2302      	movs	r3, #2
 800a542:	e029      	b.n	800a598 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	79fa      	ldrb	r2, [r7, #7]
 800a548:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2200      	movs	r2, #0
 800a550:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2200      	movs	r2, #0
 800a558:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	f000 f81f 	bl	800a5a0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2200      	movs	r2, #0
 800a566:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2200      	movs	r2, #0
 800a56e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2200      	movs	r2, #0
 800a576:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d003      	beq.n	800a590 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f001 fdd3 	bl	800c13c <USBH_LL_Init>

  return USBH_OK;
 800a596:	2300      	movs	r3, #0
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3710      	adds	r7, #16
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	60fb      	str	r3, [r7, #12]
 800a5b0:	e009      	b.n	800a5c6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	33e0      	adds	r3, #224	; 0xe0
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	4413      	add	r3, r2
 800a5bc:	2200      	movs	r2, #0
 800a5be:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	60fb      	str	r3, [r7, #12]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2b0f      	cmp	r3, #15
 800a5ca:	d9f2      	bls.n	800a5b2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	60fb      	str	r3, [r7, #12]
 800a5d0:	e009      	b.n	800a5e6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a5dc:	2200      	movs	r2, #0
 800a5de:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	60fb      	str	r3, [r7, #12]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5ec:	d3f1      	bcc.n	800a5d2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2240      	movs	r2, #64	; 0x40
 800a612:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2200      	movs	r2, #0
 800a618:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2200      	movs	r2, #0
 800a61e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2201      	movs	r2, #1
 800a626:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2200      	movs	r2, #0
 800a636:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	331c      	adds	r3, #28
 800a63e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a642:	2100      	movs	r1, #0
 800a644:	4618      	mov	r0, r3
 800a646:	f002 fff4 	bl	800d632 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a650:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a654:	2100      	movs	r1, #0
 800a656:	4618      	mov	r0, r3
 800a658:	f002 ffeb 	bl	800d632 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f203 3326 	addw	r3, r3, #806	; 0x326
 800a662:	2212      	movs	r2, #18
 800a664:	2100      	movs	r1, #0
 800a666:	4618      	mov	r0, r3
 800a668:	f002 ffe3 	bl	800d632 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a672:	223e      	movs	r2, #62	; 0x3e
 800a674:	2100      	movs	r1, #0
 800a676:	4618      	mov	r0, r3
 800a678:	f002 ffdb 	bl	800d632 <memset>

  return USBH_OK;
 800a67c:	2300      	movs	r3, #0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a686:	b480      	push	{r7}
 800a688:	b085      	sub	sp, #20
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a690:	2300      	movs	r3, #0
 800a692:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d016      	beq.n	800a6c8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d10e      	bne.n	800a6c2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a6aa:	1c59      	adds	r1, r3, #1
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	33de      	adds	r3, #222	; 0xde
 800a6b6:	6839      	ldr	r1, [r7, #0]
 800a6b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	73fb      	strb	r3, [r7, #15]
 800a6c0:	e004      	b.n	800a6cc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a6c2:	2302      	movs	r3, #2
 800a6c4:	73fb      	strb	r3, [r7, #15]
 800a6c6:	e001      	b.n	800a6cc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a6c8:	2302      	movs	r3, #2
 800a6ca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3714      	adds	r7, #20
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr

0800a6da <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a6da:	b480      	push	{r7}
 800a6dc:	b085      	sub	sp, #20
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a6f0:	78fa      	ldrb	r2, [r7, #3]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d204      	bcs.n	800a700 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	78fa      	ldrb	r2, [r7, #3]
 800a6fa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a6fe:	e001      	b.n	800a704 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a700:	2302      	movs	r3, #2
 800a702:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a704:	7bfb      	ldrb	r3, [r7, #15]
}
 800a706:	4618      	mov	r0, r3
 800a708:	3714      	adds	r7, #20
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr

0800a712 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a712:	b480      	push	{r7}
 800a714:	b087      	sub	sp, #28
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
 800a71a:	4608      	mov	r0, r1
 800a71c:	4611      	mov	r1, r2
 800a71e:	461a      	mov	r2, r3
 800a720:	4603      	mov	r3, r0
 800a722:	70fb      	strb	r3, [r7, #3]
 800a724:	460b      	mov	r3, r1
 800a726:	70bb      	strb	r3, [r7, #2]
 800a728:	4613      	mov	r3, r2
 800a72a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a72c:	2300      	movs	r3, #0
 800a72e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a730:	2300      	movs	r3, #0
 800a732:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a73a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a73c:	e025      	b.n	800a78a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a73e:	7dfb      	ldrb	r3, [r7, #23]
 800a740:	221a      	movs	r2, #26
 800a742:	fb02 f303 	mul.w	r3, r2, r3
 800a746:	3308      	adds	r3, #8
 800a748:	68fa      	ldr	r2, [r7, #12]
 800a74a:	4413      	add	r3, r2
 800a74c:	3302      	adds	r3, #2
 800a74e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	795b      	ldrb	r3, [r3, #5]
 800a754:	78fa      	ldrb	r2, [r7, #3]
 800a756:	429a      	cmp	r2, r3
 800a758:	d002      	beq.n	800a760 <USBH_FindInterface+0x4e>
 800a75a:	78fb      	ldrb	r3, [r7, #3]
 800a75c:	2bff      	cmp	r3, #255	; 0xff
 800a75e:	d111      	bne.n	800a784 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a764:	78ba      	ldrb	r2, [r7, #2]
 800a766:	429a      	cmp	r2, r3
 800a768:	d002      	beq.n	800a770 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a76a:	78bb      	ldrb	r3, [r7, #2]
 800a76c:	2bff      	cmp	r3, #255	; 0xff
 800a76e:	d109      	bne.n	800a784 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a774:	787a      	ldrb	r2, [r7, #1]
 800a776:	429a      	cmp	r2, r3
 800a778:	d002      	beq.n	800a780 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a77a:	787b      	ldrb	r3, [r7, #1]
 800a77c:	2bff      	cmp	r3, #255	; 0xff
 800a77e:	d101      	bne.n	800a784 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a780:	7dfb      	ldrb	r3, [r7, #23]
 800a782:	e006      	b.n	800a792 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a784:	7dfb      	ldrb	r3, [r7, #23]
 800a786:	3301      	adds	r3, #1
 800a788:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a78a:	7dfb      	ldrb	r3, [r7, #23]
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d9d6      	bls.n	800a73e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a790:	23ff      	movs	r3, #255	; 0xff
}
 800a792:	4618      	mov	r0, r3
 800a794:	371c      	adds	r7, #28
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr

0800a79e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b082      	sub	sp, #8
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f001 fd04 	bl	800c1b4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a7ac:	2101      	movs	r1, #1
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f001 fe1d 	bl	800c3ee <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3708      	adds	r7, #8
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
	...

0800a7c0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b088      	sub	sp, #32
 800a7c4:	af04      	add	r7, sp, #16
 800a7c6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a7c8:	2302      	movs	r3, #2
 800a7ca:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d102      	bne.n	800a7e2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2203      	movs	r2, #3
 800a7e0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	2b0b      	cmp	r3, #11
 800a7ea:	f200 81be 	bhi.w	800ab6a <USBH_Process+0x3aa>
 800a7ee:	a201      	add	r2, pc, #4	; (adr r2, 800a7f4 <USBH_Process+0x34>)
 800a7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f4:	0800a825 	.word	0x0800a825
 800a7f8:	0800a857 	.word	0x0800a857
 800a7fc:	0800a8bf 	.word	0x0800a8bf
 800a800:	0800ab05 	.word	0x0800ab05
 800a804:	0800ab6b 	.word	0x0800ab6b
 800a808:	0800a963 	.word	0x0800a963
 800a80c:	0800aaab 	.word	0x0800aaab
 800a810:	0800a999 	.word	0x0800a999
 800a814:	0800a9b9 	.word	0x0800a9b9
 800a818:	0800a9d9 	.word	0x0800a9d9
 800a81c:	0800aa1d 	.word	0x0800aa1d
 800a820:	0800aaed 	.word	0x0800aaed
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	f000 819e 	beq.w	800ab6e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2201      	movs	r2, #1
 800a836:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a838:	20c8      	movs	r0, #200	; 0xc8
 800a83a:	f001 fe22 	bl	800c482 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f001 fd15 	bl	800c26e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a854:	e18b      	b.n	800ab6e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d107      	bne.n	800a870 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2200      	movs	r2, #0
 800a864:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2202      	movs	r2, #2
 800a86c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a86e:	e18d      	b.n	800ab8c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a876:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a87a:	d914      	bls.n	800a8a6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a882:	3301      	adds	r3, #1
 800a884:	b2da      	uxtb	r2, r3
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a892:	2b03      	cmp	r3, #3
 800a894:	d903      	bls.n	800a89e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	220d      	movs	r2, #13
 800a89a:	701a      	strb	r2, [r3, #0]
      break;
 800a89c:	e176      	b.n	800ab8c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	701a      	strb	r2, [r3, #0]
      break;
 800a8a4:	e172      	b.n	800ab8c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a8ac:	f103 020a 	add.w	r2, r3, #10
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a8b6:	200a      	movs	r0, #10
 800a8b8:	f001 fde3 	bl	800c482 <USBH_Delay>
      break;
 800a8bc:	e166      	b.n	800ab8c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d005      	beq.n	800a8d4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8ce:	2104      	movs	r1, #4
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a8d4:	2064      	movs	r0, #100	; 0x64
 800a8d6:	f001 fdd4 	bl	800c482 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f001 fca0 	bl	800c220 <USBH_LL_GetSpeed>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2205      	movs	r2, #5
 800a8ee:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f001 faab 	bl	800be4e <USBH_AllocPipe>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a900:	2180      	movs	r1, #128	; 0x80
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f001 faa3 	bl	800be4e <USBH_AllocPipe>
 800a908:	4603      	mov	r3, r0
 800a90a:	461a      	mov	r2, r3
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	7919      	ldrb	r1, [r3, #4]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a924:	b292      	uxth	r2, r2
 800a926:	9202      	str	r2, [sp, #8]
 800a928:	2200      	movs	r2, #0
 800a92a:	9201      	str	r2, [sp, #4]
 800a92c:	9300      	str	r3, [sp, #0]
 800a92e:	4603      	mov	r3, r0
 800a930:	2280      	movs	r2, #128	; 0x80
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f001 fa5c 	bl	800bdf0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	7959      	ldrb	r1, [r3, #5]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a94c:	b292      	uxth	r2, r2
 800a94e:	9202      	str	r2, [sp, #8]
 800a950:	2200      	movs	r2, #0
 800a952:	9201      	str	r2, [sp, #4]
 800a954:	9300      	str	r3, [sp, #0]
 800a956:	4603      	mov	r3, r0
 800a958:	2200      	movs	r2, #0
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f001 fa48 	bl	800bdf0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a960:	e114      	b.n	800ab8c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 f918 	bl	800ab98 <USBH_HandleEnum>
 800a968:	4603      	mov	r3, r0
 800a96a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a96c:	7bbb      	ldrb	r3, [r7, #14]
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	2b00      	cmp	r3, #0
 800a972:	f040 80fe 	bne.w	800ab72 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2200      	movs	r2, #0
 800a97a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a984:	2b01      	cmp	r3, #1
 800a986:	d103      	bne.n	800a990 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2208      	movs	r2, #8
 800a98c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a98e:	e0f0      	b.n	800ab72 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2207      	movs	r2, #7
 800a994:	701a      	strb	r2, [r3, #0]
      break;
 800a996:	e0ec      	b.n	800ab72 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	f000 80e9 	beq.w	800ab76 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a9aa:	2101      	movs	r1, #1
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2208      	movs	r2, #8
 800a9b4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a9b6:	e0de      	b.n	800ab76 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 fc3f 	bl	800b246 <USBH_SetCfg>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	f040 80d5 	bne.w	800ab7a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2209      	movs	r2, #9
 800a9d4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a9d6:	e0d0      	b.n	800ab7a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a9de:	f003 0320 	and.w	r3, r3, #32
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d016      	beq.n	800aa14 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a9e6:	2101      	movs	r1, #1
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 fc4f 	bl	800b28c <USBH_SetFeature>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a9f2:	7bbb      	ldrb	r3, [r7, #14]
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d103      	bne.n	800aa02 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	220a      	movs	r2, #10
 800a9fe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aa00:	e0bd      	b.n	800ab7e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800aa02:	7bbb      	ldrb	r3, [r7, #14]
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	2b03      	cmp	r3, #3
 800aa08:	f040 80b9 	bne.w	800ab7e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	220a      	movs	r2, #10
 800aa10:	701a      	strb	r2, [r3, #0]
      break;
 800aa12:	e0b4      	b.n	800ab7e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	220a      	movs	r2, #10
 800aa18:	701a      	strb	r2, [r3, #0]
      break;
 800aa1a:	e0b0      	b.n	800ab7e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f000 80ad 	beq.w	800ab82 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aa30:	2300      	movs	r3, #0
 800aa32:	73fb      	strb	r3, [r7, #15]
 800aa34:	e016      	b.n	800aa64 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800aa36:	7bfa      	ldrb	r2, [r7, #15]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	32de      	adds	r2, #222	; 0xde
 800aa3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa40:	791a      	ldrb	r2, [r3, #4]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d108      	bne.n	800aa5e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800aa4c:	7bfa      	ldrb	r2, [r7, #15]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	32de      	adds	r2, #222	; 0xde
 800aa52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800aa5c:	e005      	b.n	800aa6a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
 800aa60:	3301      	adds	r3, #1
 800aa62:	73fb      	strb	r3, [r7, #15]
 800aa64:	7bfb      	ldrb	r3, [r7, #15]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d0e5      	beq.n	800aa36 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d016      	beq.n	800aaa2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	4798      	blx	r3
 800aa80:	4603      	mov	r3, r0
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d109      	bne.n	800aa9a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2206      	movs	r2, #6
 800aa8a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa92:	2103      	movs	r1, #3
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aa98:	e073      	b.n	800ab82 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	220d      	movs	r2, #13
 800aa9e:	701a      	strb	r2, [r3, #0]
      break;
 800aaa0:	e06f      	b.n	800ab82 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	220d      	movs	r2, #13
 800aaa6:	701a      	strb	r2, [r3, #0]
      break;
 800aaa8:	e06b      	b.n	800ab82 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d017      	beq.n	800aae4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aaba:	691b      	ldr	r3, [r3, #16]
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	4798      	blx	r3
 800aac0:	4603      	mov	r3, r0
 800aac2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800aac4:	7bbb      	ldrb	r3, [r7, #14]
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d103      	bne.n	800aad4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	220b      	movs	r2, #11
 800aad0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aad2:	e058      	b.n	800ab86 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800aad4:	7bbb      	ldrb	r3, [r7, #14]
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	2b02      	cmp	r3, #2
 800aada:	d154      	bne.n	800ab86 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	220d      	movs	r2, #13
 800aae0:	701a      	strb	r2, [r3, #0]
      break;
 800aae2:	e050      	b.n	800ab86 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	220d      	movs	r2, #13
 800aae8:	701a      	strb	r2, [r3, #0]
      break;
 800aaea:	e04c      	b.n	800ab86 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d049      	beq.n	800ab8a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aafc:	695b      	ldr	r3, [r3, #20]
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	4798      	blx	r3
      }
      break;
 800ab02:	e042      	b.n	800ab8a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f7ff fd47 	bl	800a5a0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d009      	beq.n	800ab30 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d005      	beq.n	800ab46 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab40:	2105      	movs	r1, #5
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d107      	bne.n	800ab62 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2200      	movs	r2, #0
 800ab56:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f7ff fe1f 	bl	800a79e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ab60:	e014      	b.n	800ab8c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f001 fb26 	bl	800c1b4 <USBH_LL_Start>
      break;
 800ab68:	e010      	b.n	800ab8c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800ab6a:	bf00      	nop
 800ab6c:	e00e      	b.n	800ab8c <USBH_Process+0x3cc>
      break;
 800ab6e:	bf00      	nop
 800ab70:	e00c      	b.n	800ab8c <USBH_Process+0x3cc>
      break;
 800ab72:	bf00      	nop
 800ab74:	e00a      	b.n	800ab8c <USBH_Process+0x3cc>
    break;
 800ab76:	bf00      	nop
 800ab78:	e008      	b.n	800ab8c <USBH_Process+0x3cc>
      break;
 800ab7a:	bf00      	nop
 800ab7c:	e006      	b.n	800ab8c <USBH_Process+0x3cc>
      break;
 800ab7e:	bf00      	nop
 800ab80:	e004      	b.n	800ab8c <USBH_Process+0x3cc>
      break;
 800ab82:	bf00      	nop
 800ab84:	e002      	b.n	800ab8c <USBH_Process+0x3cc>
      break;
 800ab86:	bf00      	nop
 800ab88:	e000      	b.n	800ab8c <USBH_Process+0x3cc>
      break;
 800ab8a:	bf00      	nop
  }
  return USBH_OK;
 800ab8c:	2300      	movs	r3, #0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop

0800ab98 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b088      	sub	sp, #32
 800ab9c:	af04      	add	r7, sp, #16
 800ab9e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800aba0:	2301      	movs	r3, #1
 800aba2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800aba4:	2301      	movs	r3, #1
 800aba6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	785b      	ldrb	r3, [r3, #1]
 800abac:	2b07      	cmp	r3, #7
 800abae:	f200 81c1 	bhi.w	800af34 <USBH_HandleEnum+0x39c>
 800abb2:	a201      	add	r2, pc, #4	; (adr r2, 800abb8 <USBH_HandleEnum+0x20>)
 800abb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb8:	0800abd9 	.word	0x0800abd9
 800abbc:	0800ac97 	.word	0x0800ac97
 800abc0:	0800ad01 	.word	0x0800ad01
 800abc4:	0800ad8f 	.word	0x0800ad8f
 800abc8:	0800adf9 	.word	0x0800adf9
 800abcc:	0800ae69 	.word	0x0800ae69
 800abd0:	0800aeaf 	.word	0x0800aeaf
 800abd4:	0800aef5 	.word	0x0800aef5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800abd8:	2108      	movs	r1, #8
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 fa50 	bl	800b080 <USBH_Get_DevDesc>
 800abe0:	4603      	mov	r3, r0
 800abe2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800abe4:	7bbb      	ldrb	r3, [r7, #14]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d130      	bne.n	800ac4c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2201      	movs	r2, #1
 800abf8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	7919      	ldrb	r1, [r3, #4]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ac0e:	b292      	uxth	r2, r2
 800ac10:	9202      	str	r2, [sp, #8]
 800ac12:	2200      	movs	r2, #0
 800ac14:	9201      	str	r2, [sp, #4]
 800ac16:	9300      	str	r3, [sp, #0]
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2280      	movs	r2, #128	; 0x80
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f001 f8e7 	bl	800bdf0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	7959      	ldrb	r1, [r3, #5]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac36:	b292      	uxth	r2, r2
 800ac38:	9202      	str	r2, [sp, #8]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	9201      	str	r2, [sp, #4]
 800ac3e:	9300      	str	r3, [sp, #0]
 800ac40:	4603      	mov	r3, r0
 800ac42:	2200      	movs	r2, #0
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f001 f8d3 	bl	800bdf0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ac4a:	e175      	b.n	800af38 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac4c:	7bbb      	ldrb	r3, [r7, #14]
 800ac4e:	2b03      	cmp	r3, #3
 800ac50:	f040 8172 	bne.w	800af38 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	b2da      	uxtb	r2, r3
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac6a:	2b03      	cmp	r3, #3
 800ac6c:	d903      	bls.n	800ac76 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	220d      	movs	r2, #13
 800ac72:	701a      	strb	r2, [r3, #0]
      break;
 800ac74:	e160      	b.n	800af38 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	795b      	ldrb	r3, [r3, #5]
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f001 f907 	bl	800be90 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	791b      	ldrb	r3, [r3, #4]
 800ac86:	4619      	mov	r1, r3
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f001 f901 	bl	800be90 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	701a      	strb	r2, [r3, #0]
      break;
 800ac94:	e150      	b.n	800af38 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ac96:	2112      	movs	r1, #18
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 f9f1 	bl	800b080 <USBH_Get_DevDesc>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aca2:	7bbb      	ldrb	r3, [r7, #14]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d103      	bne.n	800acb0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2202      	movs	r2, #2
 800acac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800acae:	e145      	b.n	800af3c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800acb0:	7bbb      	ldrb	r3, [r7, #14]
 800acb2:	2b03      	cmp	r3, #3
 800acb4:	f040 8142 	bne.w	800af3c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800acbe:	3301      	adds	r3, #1
 800acc0:	b2da      	uxtb	r2, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800acce:	2b03      	cmp	r3, #3
 800acd0:	d903      	bls.n	800acda <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	220d      	movs	r2, #13
 800acd6:	701a      	strb	r2, [r3, #0]
      break;
 800acd8:	e130      	b.n	800af3c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	795b      	ldrb	r3, [r3, #5]
 800acde:	4619      	mov	r1, r3
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f001 f8d5 	bl	800be90 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	791b      	ldrb	r3, [r3, #4]
 800acea:	4619      	mov	r1, r3
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f001 f8cf 	bl	800be90 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2200      	movs	r2, #0
 800acf6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	701a      	strb	r2, [r3, #0]
      break;
 800acfe:	e11d      	b.n	800af3c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ad00:	2101      	movs	r1, #1
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 fa7b 	bl	800b1fe <USBH_SetAddress>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ad0c:	7bbb      	ldrb	r3, [r7, #14]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d132      	bne.n	800ad78 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800ad12:	2002      	movs	r0, #2
 800ad14:	f001 fbb5 	bl	800c482 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2203      	movs	r2, #3
 800ad24:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	7919      	ldrb	r1, [r3, #4]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ad3a:	b292      	uxth	r2, r2
 800ad3c:	9202      	str	r2, [sp, #8]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	9201      	str	r2, [sp, #4]
 800ad42:	9300      	str	r3, [sp, #0]
 800ad44:	4603      	mov	r3, r0
 800ad46:	2280      	movs	r2, #128	; 0x80
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f001 f851 	bl	800bdf0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	7959      	ldrb	r1, [r3, #5]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ad62:	b292      	uxth	r2, r2
 800ad64:	9202      	str	r2, [sp, #8]
 800ad66:	2200      	movs	r2, #0
 800ad68:	9201      	str	r2, [sp, #4]
 800ad6a:	9300      	str	r3, [sp, #0]
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2200      	movs	r2, #0
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f001 f83d 	bl	800bdf0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ad76:	e0e3      	b.n	800af40 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad78:	7bbb      	ldrb	r3, [r7, #14]
 800ad7a:	2b03      	cmp	r3, #3
 800ad7c:	f040 80e0 	bne.w	800af40 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	220d      	movs	r2, #13
 800ad84:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	705a      	strb	r2, [r3, #1]
      break;
 800ad8c:	e0d8      	b.n	800af40 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ad8e:	2109      	movs	r1, #9
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 f9a1 	bl	800b0d8 <USBH_Get_CfgDesc>
 800ad96:	4603      	mov	r3, r0
 800ad98:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ad9a:	7bbb      	ldrb	r3, [r7, #14]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d103      	bne.n	800ada8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2204      	movs	r2, #4
 800ada4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ada6:	e0cd      	b.n	800af44 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ada8:	7bbb      	ldrb	r3, [r7, #14]
 800adaa:	2b03      	cmp	r3, #3
 800adac:	f040 80ca 	bne.w	800af44 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800adb6:	3301      	adds	r3, #1
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800adc6:	2b03      	cmp	r3, #3
 800adc8:	d903      	bls.n	800add2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	220d      	movs	r2, #13
 800adce:	701a      	strb	r2, [r3, #0]
      break;
 800add0:	e0b8      	b.n	800af44 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	795b      	ldrb	r3, [r3, #5]
 800add6:	4619      	mov	r1, r3
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f001 f859 	bl	800be90 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	791b      	ldrb	r3, [r3, #4]
 800ade2:	4619      	mov	r1, r3
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f001 f853 	bl	800be90 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	701a      	strb	r2, [r3, #0]
      break;
 800adf6:	e0a5      	b.n	800af44 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800adfe:	4619      	mov	r1, r3
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 f969 	bl	800b0d8 <USBH_Get_CfgDesc>
 800ae06:	4603      	mov	r3, r0
 800ae08:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ae0a:	7bbb      	ldrb	r3, [r7, #14]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d103      	bne.n	800ae18 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2205      	movs	r2, #5
 800ae14:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ae16:	e097      	b.n	800af48 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae18:	7bbb      	ldrb	r3, [r7, #14]
 800ae1a:	2b03      	cmp	r3, #3
 800ae1c:	f040 8094 	bne.w	800af48 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ae26:	3301      	adds	r3, #1
 800ae28:	b2da      	uxtb	r2, r3
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ae36:	2b03      	cmp	r3, #3
 800ae38:	d903      	bls.n	800ae42 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	220d      	movs	r2, #13
 800ae3e:	701a      	strb	r2, [r3, #0]
      break;
 800ae40:	e082      	b.n	800af48 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	795b      	ldrb	r3, [r3, #5]
 800ae46:	4619      	mov	r1, r3
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f001 f821 	bl	800be90 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	791b      	ldrb	r3, [r3, #4]
 800ae52:	4619      	mov	r1, r3
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f001 f81b 	bl	800be90 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	701a      	strb	r2, [r3, #0]
      break;
 800ae66:	e06f      	b.n	800af48 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d019      	beq.n	800aea6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ae7e:	23ff      	movs	r3, #255	; 0xff
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 f953 	bl	800b12c <USBH_Get_StringDesc>
 800ae86:	4603      	mov	r3, r0
 800ae88:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ae8a:	7bbb      	ldrb	r3, [r7, #14]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d103      	bne.n	800ae98 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2206      	movs	r2, #6
 800ae94:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ae96:	e059      	b.n	800af4c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae98:	7bbb      	ldrb	r3, [r7, #14]
 800ae9a:	2b03      	cmp	r3, #3
 800ae9c:	d156      	bne.n	800af4c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2206      	movs	r2, #6
 800aea2:	705a      	strb	r2, [r3, #1]
      break;
 800aea4:	e052      	b.n	800af4c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2206      	movs	r2, #6
 800aeaa:	705a      	strb	r2, [r3, #1]
      break;
 800aeac:	e04e      	b.n	800af4c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d019      	beq.n	800aeec <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800aec4:	23ff      	movs	r3, #255	; 0xff
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 f930 	bl	800b12c <USBH_Get_StringDesc>
 800aecc:	4603      	mov	r3, r0
 800aece:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aed0:	7bbb      	ldrb	r3, [r7, #14]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d103      	bne.n	800aede <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2207      	movs	r2, #7
 800aeda:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800aedc:	e038      	b.n	800af50 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aede:	7bbb      	ldrb	r3, [r7, #14]
 800aee0:	2b03      	cmp	r3, #3
 800aee2:	d135      	bne.n	800af50 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2207      	movs	r2, #7
 800aee8:	705a      	strb	r2, [r3, #1]
      break;
 800aeea:	e031      	b.n	800af50 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2207      	movs	r2, #7
 800aef0:	705a      	strb	r2, [r3, #1]
      break;
 800aef2:	e02d      	b.n	800af50 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d017      	beq.n	800af2e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800af0a:	23ff      	movs	r3, #255	; 0xff
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 f90d 	bl	800b12c <USBH_Get_StringDesc>
 800af12:	4603      	mov	r3, r0
 800af14:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800af16:	7bbb      	ldrb	r3, [r7, #14]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d102      	bne.n	800af22 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800af1c:	2300      	movs	r3, #0
 800af1e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800af20:	e018      	b.n	800af54 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af22:	7bbb      	ldrb	r3, [r7, #14]
 800af24:	2b03      	cmp	r3, #3
 800af26:	d115      	bne.n	800af54 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800af28:	2300      	movs	r3, #0
 800af2a:	73fb      	strb	r3, [r7, #15]
      break;
 800af2c:	e012      	b.n	800af54 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800af2e:	2300      	movs	r3, #0
 800af30:	73fb      	strb	r3, [r7, #15]
      break;
 800af32:	e00f      	b.n	800af54 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800af34:	bf00      	nop
 800af36:	e00e      	b.n	800af56 <USBH_HandleEnum+0x3be>
      break;
 800af38:	bf00      	nop
 800af3a:	e00c      	b.n	800af56 <USBH_HandleEnum+0x3be>
      break;
 800af3c:	bf00      	nop
 800af3e:	e00a      	b.n	800af56 <USBH_HandleEnum+0x3be>
      break;
 800af40:	bf00      	nop
 800af42:	e008      	b.n	800af56 <USBH_HandleEnum+0x3be>
      break;
 800af44:	bf00      	nop
 800af46:	e006      	b.n	800af56 <USBH_HandleEnum+0x3be>
      break;
 800af48:	bf00      	nop
 800af4a:	e004      	b.n	800af56 <USBH_HandleEnum+0x3be>
      break;
 800af4c:	bf00      	nop
 800af4e:	e002      	b.n	800af56 <USBH_HandleEnum+0x3be>
      break;
 800af50:	bf00      	nop
 800af52:	e000      	b.n	800af56 <USBH_HandleEnum+0x3be>
      break;
 800af54:	bf00      	nop
  }
  return Status;
 800af56:	7bfb      	ldrb	r3, [r7, #15]
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3710      	adds	r7, #16
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	683a      	ldr	r2, [r7, #0]
 800af6e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800af72:	bf00      	nop
 800af74:	370c      	adds	r7, #12
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr

0800af7e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800af7e:	b580      	push	{r7, lr}
 800af80:	b082      	sub	sp, #8
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800af8c:	1c5a      	adds	r2, r3, #1
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 f804 	bl	800afa2 <USBH_HandleSof>
}
 800af9a:	bf00      	nop
 800af9c:	3708      	adds	r7, #8
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b082      	sub	sp, #8
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	2b0b      	cmp	r3, #11
 800afb2:	d10a      	bne.n	800afca <USBH_HandleSof+0x28>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d005      	beq.n	800afca <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afc4:	699b      	ldr	r3, [r3, #24]
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	4798      	blx	r3
  }
}
 800afca:	bf00      	nop
 800afcc:	3708      	adds	r7, #8
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}

0800afd2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800afd2:	b480      	push	{r7}
 800afd4:	b083      	sub	sp, #12
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2201      	movs	r2, #1
 800afde:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800afe2:	bf00      	nop
}
 800afe4:	370c      	adds	r7, #12
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr

0800afee <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800afee:	b480      	push	{r7}
 800aff0:	b083      	sub	sp, #12
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800affe:	bf00      	nop
}
 800b000:	370c      	adds	r7, #12
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr

0800b00a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b00a:	b480      	push	{r7}
 800b00c:	b083      	sub	sp, #12
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2201      	movs	r2, #1
 800b016:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2200      	movs	r2, #0
 800b01e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2200      	movs	r2, #0
 800b026:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b02a:	2300      	movs	r3, #0
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	370c      	adds	r7, #12
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr

0800b038 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2201      	movs	r2, #1
 800b044:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2200      	movs	r2, #0
 800b04c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2200      	movs	r2, #0
 800b054:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f001 f8c6 	bl	800c1ea <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	791b      	ldrb	r3, [r3, #4]
 800b062:	4619      	mov	r1, r3
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f000 ff13 	bl	800be90 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	795b      	ldrb	r3, [r3, #5]
 800b06e:	4619      	mov	r1, r3
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 ff0d 	bl	800be90 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b076:	2300      	movs	r3, #0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3708      	adds	r7, #8
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b086      	sub	sp, #24
 800b084:	af02      	add	r7, sp, #8
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	460b      	mov	r3, r1
 800b08a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800b08c:	887b      	ldrh	r3, [r7, #2]
 800b08e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b092:	d901      	bls.n	800b098 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b094:	2303      	movs	r3, #3
 800b096:	e01b      	b.n	800b0d0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b09e:	887b      	ldrh	r3, [r7, #2]
 800b0a0:	9300      	str	r3, [sp, #0]
 800b0a2:	4613      	mov	r3, r2
 800b0a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b0a8:	2100      	movs	r1, #0
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 f872 	bl	800b194 <USBH_GetDescriptor>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800b0b4:	7bfb      	ldrb	r3, [r7, #15]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d109      	bne.n	800b0ce <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b0c0:	887a      	ldrh	r2, [r7, #2]
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 f929 	bl	800b31c <USBH_ParseDevDesc>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b0ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3710      	adds	r7, #16
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b086      	sub	sp, #24
 800b0dc:	af02      	add	r7, sp, #8
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	331c      	adds	r3, #28
 800b0e8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800b0ea:	887b      	ldrh	r3, [r7, #2]
 800b0ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0f0:	d901      	bls.n	800b0f6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b0f2:	2303      	movs	r3, #3
 800b0f4:	e016      	b.n	800b124 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b0f6:	887b      	ldrh	r3, [r7, #2]
 800b0f8:	9300      	str	r3, [sp, #0]
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b100:	2100      	movs	r1, #0
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 f846 	bl	800b194 <USBH_GetDescriptor>
 800b108:	4603      	mov	r3, r0
 800b10a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b10c:	7bfb      	ldrb	r3, [r7, #15]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d107      	bne.n	800b122 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b112:	887b      	ldrh	r3, [r7, #2]
 800b114:	461a      	mov	r2, r3
 800b116:	68b9      	ldr	r1, [r7, #8]
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 f9b3 	bl	800b484 <USBH_ParseCfgDesc>
 800b11e:	4603      	mov	r3, r0
 800b120:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b122:	7bfb      	ldrb	r3, [r7, #15]
}
 800b124:	4618      	mov	r0, r3
 800b126:	3710      	adds	r7, #16
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b088      	sub	sp, #32
 800b130:	af02      	add	r7, sp, #8
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	607a      	str	r2, [r7, #4]
 800b136:	461a      	mov	r2, r3
 800b138:	460b      	mov	r3, r1
 800b13a:	72fb      	strb	r3, [r7, #11]
 800b13c:	4613      	mov	r3, r2
 800b13e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800b140:	893b      	ldrh	r3, [r7, #8]
 800b142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b146:	d802      	bhi.n	800b14e <USBH_Get_StringDesc+0x22>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d101      	bne.n	800b152 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b14e:	2303      	movs	r3, #3
 800b150:	e01c      	b.n	800b18c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800b152:	7afb      	ldrb	r3, [r7, #11]
 800b154:	b29b      	uxth	r3, r3
 800b156:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b15a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b162:	893b      	ldrh	r3, [r7, #8]
 800b164:	9300      	str	r3, [sp, #0]
 800b166:	460b      	mov	r3, r1
 800b168:	2100      	movs	r1, #0
 800b16a:	68f8      	ldr	r0, [r7, #12]
 800b16c:	f000 f812 	bl	800b194 <USBH_GetDescriptor>
 800b170:	4603      	mov	r3, r0
 800b172:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b174:	7dfb      	ldrb	r3, [r7, #23]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d107      	bne.n	800b18a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b180:	893a      	ldrh	r2, [r7, #8]
 800b182:	6879      	ldr	r1, [r7, #4]
 800b184:	4618      	mov	r0, r3
 800b186:	f000 fb93 	bl	800b8b0 <USBH_ParseStringDesc>
  }

  return status;
 800b18a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3718      	adds	r7, #24
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	607b      	str	r3, [r7, #4]
 800b19e:	460b      	mov	r3, r1
 800b1a0:	72fb      	strb	r3, [r7, #11]
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	789b      	ldrb	r3, [r3, #2]
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d11c      	bne.n	800b1e8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b1ae:	7afb      	ldrb	r3, [r7, #11]
 800b1b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b1b4:	b2da      	uxtb	r2, r3
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2206      	movs	r2, #6
 800b1be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	893a      	ldrh	r2, [r7, #8]
 800b1c4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b1c6:	893b      	ldrh	r3, [r7, #8]
 800b1c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b1cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1d0:	d104      	bne.n	800b1dc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f240 4209 	movw	r2, #1033	; 0x409
 800b1d8:	829a      	strh	r2, [r3, #20]
 800b1da:	e002      	b.n	800b1e2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	8b3a      	ldrh	r2, [r7, #24]
 800b1e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b1e8:	8b3b      	ldrh	r3, [r7, #24]
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	6879      	ldr	r1, [r7, #4]
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f000 fbac 	bl	800b94c <USBH_CtlReq>
 800b1f4:	4603      	mov	r3, r0
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}

0800b1fe <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b1fe:	b580      	push	{r7, lr}
 800b200:	b082      	sub	sp, #8
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
 800b206:	460b      	mov	r3, r1
 800b208:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	789b      	ldrb	r3, [r3, #2]
 800b20e:	2b01      	cmp	r3, #1
 800b210:	d10f      	bne.n	800b232 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2205      	movs	r2, #5
 800b21c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b21e:	78fb      	ldrb	r3, [r7, #3]
 800b220:	b29a      	uxth	r2, r3
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b232:	2200      	movs	r2, #0
 800b234:	2100      	movs	r1, #0
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 fb88 	bl	800b94c <USBH_CtlReq>
 800b23c:	4603      	mov	r3, r0
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3708      	adds	r7, #8
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}

0800b246 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b246:	b580      	push	{r7, lr}
 800b248:	b082      	sub	sp, #8
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
 800b24e:	460b      	mov	r3, r1
 800b250:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	789b      	ldrb	r3, [r3, #2]
 800b256:	2b01      	cmp	r3, #1
 800b258:	d10e      	bne.n	800b278 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2209      	movs	r2, #9
 800b264:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	887a      	ldrh	r2, [r7, #2]
 800b26a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2200      	movs	r2, #0
 800b270:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2200      	movs	r2, #0
 800b276:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b278:	2200      	movs	r2, #0
 800b27a:	2100      	movs	r1, #0
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 fb65 	bl	800b94c <USBH_CtlReq>
 800b282:	4603      	mov	r3, r0
}
 800b284:	4618      	mov	r0, r3
 800b286:	3708      	adds	r7, #8
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b082      	sub	sp, #8
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	460b      	mov	r3, r1
 800b296:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	789b      	ldrb	r3, [r3, #2]
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d10f      	bne.n	800b2c0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2203      	movs	r2, #3
 800b2aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b2ac:	78fb      	ldrb	r3, [r7, #3]
 800b2ae:	b29a      	uxth	r2, r3
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	2100      	movs	r1, #0
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 fb41 	bl	800b94c <USBH_CtlReq>
 800b2ca:	4603      	mov	r3, r0
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3708      	adds	r7, #8
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	460b      	mov	r3, r1
 800b2de:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	789b      	ldrb	r3, [r3, #2]
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d10f      	bne.n	800b308 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2202      	movs	r2, #2
 800b2ec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b2fa:	78fb      	ldrb	r3, [r7, #3]
 800b2fc:	b29a      	uxth	r2, r3
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b308:	2200      	movs	r2, #0
 800b30a:	2100      	movs	r1, #0
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 fb1d 	bl	800b94c <USBH_CtlReq>
 800b312:	4603      	mov	r3, r0
}
 800b314:	4618      	mov	r0, r3
 800b316:	3708      	adds	r7, #8
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b087      	sub	sp, #28
 800b320:	af00      	add	r7, sp, #0
 800b322:	60f8      	str	r0, [r7, #12]
 800b324:	60b9      	str	r1, [r7, #8]
 800b326:	4613      	mov	r3, r2
 800b328:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f203 3326 	addw	r3, r3, #806	; 0x326
 800b330:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800b332:	2300      	movs	r3, #0
 800b334:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d101      	bne.n	800b340 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800b33c:	2302      	movs	r3, #2
 800b33e:	e098      	b.n	800b472 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	781a      	ldrb	r2, [r3, #0]
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	785a      	ldrb	r2, [r3, #1]
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	3302      	adds	r3, #2
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	b29a      	uxth	r2, r3
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	3303      	adds	r3, #3
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	b29b      	uxth	r3, r3
 800b360:	021b      	lsls	r3, r3, #8
 800b362:	b29b      	uxth	r3, r3
 800b364:	4313      	orrs	r3, r2
 800b366:	b29a      	uxth	r2, r3
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	791a      	ldrb	r2, [r3, #4]
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	795a      	ldrb	r2, [r3, #5]
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	799a      	ldrb	r2, [r3, #6]
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	79da      	ldrb	r2, [r3, #7]
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b392:	2b00      	cmp	r3, #0
 800b394:	d004      	beq.n	800b3a0 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d11b      	bne.n	800b3d8 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	79db      	ldrb	r3, [r3, #7]
 800b3a4:	2b20      	cmp	r3, #32
 800b3a6:	dc0f      	bgt.n	800b3c8 <USBH_ParseDevDesc+0xac>
 800b3a8:	2b08      	cmp	r3, #8
 800b3aa:	db0f      	blt.n	800b3cc <USBH_ParseDevDesc+0xb0>
 800b3ac:	3b08      	subs	r3, #8
 800b3ae:	4a34      	ldr	r2, [pc, #208]	; (800b480 <USBH_ParseDevDesc+0x164>)
 800b3b0:	fa22 f303 	lsr.w	r3, r2, r3
 800b3b4:	f003 0301 	and.w	r3, r3, #1
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	bf14      	ite	ne
 800b3bc:	2301      	movne	r3, #1
 800b3be:	2300      	moveq	r3, #0
 800b3c0:	b2db      	uxtb	r3, r3
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d106      	bne.n	800b3d4 <USBH_ParseDevDesc+0xb8>
 800b3c6:	e001      	b.n	800b3cc <USBH_ParseDevDesc+0xb0>
 800b3c8:	2b40      	cmp	r3, #64	; 0x40
 800b3ca:	d003      	beq.n	800b3d4 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	2208      	movs	r2, #8
 800b3d0:	71da      	strb	r2, [r3, #7]
        break;
 800b3d2:	e000      	b.n	800b3d6 <USBH_ParseDevDesc+0xba>
        break;
 800b3d4:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800b3d6:	e00e      	b.n	800b3f6 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b3de:	2b02      	cmp	r3, #2
 800b3e0:	d107      	bne.n	800b3f2 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	79db      	ldrb	r3, [r3, #7]
 800b3e6:	2b08      	cmp	r3, #8
 800b3e8:	d005      	beq.n	800b3f6 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	2208      	movs	r2, #8
 800b3ee:	71da      	strb	r2, [r3, #7]
 800b3f0:	e001      	b.n	800b3f6 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b3f2:	2303      	movs	r3, #3
 800b3f4:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800b3f6:	88fb      	ldrh	r3, [r7, #6]
 800b3f8:	2b08      	cmp	r3, #8
 800b3fa:	d939      	bls.n	800b470 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	3308      	adds	r3, #8
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	b29a      	uxth	r2, r3
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	3309      	adds	r3, #9
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	021b      	lsls	r3, r3, #8
 800b40e:	b29b      	uxth	r3, r3
 800b410:	4313      	orrs	r3, r2
 800b412:	b29a      	uxth	r2, r3
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	330a      	adds	r3, #10
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	b29a      	uxth	r2, r3
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	330b      	adds	r3, #11
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	b29b      	uxth	r3, r3
 800b428:	021b      	lsls	r3, r3, #8
 800b42a:	b29b      	uxth	r3, r3
 800b42c:	4313      	orrs	r3, r2
 800b42e:	b29a      	uxth	r2, r3
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	330c      	adds	r3, #12
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	b29a      	uxth	r2, r3
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	330d      	adds	r3, #13
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	b29b      	uxth	r3, r3
 800b444:	021b      	lsls	r3, r3, #8
 800b446:	b29b      	uxth	r3, r3
 800b448:	4313      	orrs	r3, r2
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	7b9a      	ldrb	r2, [r3, #14]
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	7bda      	ldrb	r2, [r3, #15]
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	7c1a      	ldrb	r2, [r3, #16]
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	7c5a      	ldrb	r2, [r3, #17]
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800b470:	7dfb      	ldrb	r3, [r7, #23]
}
 800b472:	4618      	mov	r0, r3
 800b474:	371c      	adds	r7, #28
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr
 800b47e:	bf00      	nop
 800b480:	01000101 	.word	0x01000101

0800b484 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b08c      	sub	sp, #48	; 0x30
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	4613      	mov	r3, r2
 800b490:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b498:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b49a:	2300      	movs	r3, #0
 800b49c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d101      	bne.n	800b4b6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800b4b2:	2302      	movs	r3, #2
 800b4b4:	e0db      	b.n	800b66e <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	781a      	ldrb	r2, [r3, #0]
 800b4be:	6a3b      	ldr	r3, [r7, #32]
 800b4c0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	785a      	ldrb	r2, [r3, #1]
 800b4c6:	6a3b      	ldr	r3, [r7, #32]
 800b4c8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	3302      	adds	r3, #2
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	b29a      	uxth	r2, r3
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	3303      	adds	r3, #3
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	021b      	lsls	r3, r3, #8
 800b4dc:	b29b      	uxth	r3, r3
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4e6:	bf28      	it	cs
 800b4e8:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	6a3b      	ldr	r3, [r7, #32]
 800b4f0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	791a      	ldrb	r2, [r3, #4]
 800b4f6:	6a3b      	ldr	r3, [r7, #32]
 800b4f8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	795a      	ldrb	r2, [r3, #5]
 800b4fe:	6a3b      	ldr	r3, [r7, #32]
 800b500:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	799a      	ldrb	r2, [r3, #6]
 800b506:	6a3b      	ldr	r3, [r7, #32]
 800b508:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	79da      	ldrb	r2, [r3, #7]
 800b50e:	6a3b      	ldr	r3, [r7, #32]
 800b510:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	7a1a      	ldrb	r2, [r3, #8]
 800b516:	6a3b      	ldr	r3, [r7, #32]
 800b518:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800b51a:	6a3b      	ldr	r3, [r7, #32]
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	2b09      	cmp	r3, #9
 800b520:	d002      	beq.n	800b528 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b522:	6a3b      	ldr	r3, [r7, #32]
 800b524:	2209      	movs	r2, #9
 800b526:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b528:	88fb      	ldrh	r3, [r7, #6]
 800b52a:	2b09      	cmp	r3, #9
 800b52c:	f240 809d 	bls.w	800b66a <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800b530:	2309      	movs	r3, #9
 800b532:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b534:	2300      	movs	r3, #0
 800b536:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b538:	e081      	b.n	800b63e <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b53a:	f107 0316 	add.w	r3, r7, #22
 800b53e:	4619      	mov	r1, r3
 800b540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b542:	f000 f9e8 	bl	800b916 <USBH_GetNextDesc>
 800b546:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b54a:	785b      	ldrb	r3, [r3, #1]
 800b54c:	2b04      	cmp	r3, #4
 800b54e:	d176      	bne.n	800b63e <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	2b09      	cmp	r3, #9
 800b556:	d002      	beq.n	800b55e <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55a:	2209      	movs	r2, #9
 800b55c:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b55e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b562:	221a      	movs	r2, #26
 800b564:	fb02 f303 	mul.w	r3, r2, r3
 800b568:	3308      	adds	r3, #8
 800b56a:	6a3a      	ldr	r2, [r7, #32]
 800b56c:	4413      	add	r3, r2
 800b56e:	3302      	adds	r3, #2
 800b570:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b572:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b574:	69f8      	ldr	r0, [r7, #28]
 800b576:	f000 f87e 	bl	800b676 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b57a:	2300      	movs	r3, #0
 800b57c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b580:	2300      	movs	r3, #0
 800b582:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b584:	e043      	b.n	800b60e <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b586:	f107 0316 	add.w	r3, r7, #22
 800b58a:	4619      	mov	r1, r3
 800b58c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b58e:	f000 f9c2 	bl	800b916 <USBH_GetNextDesc>
 800b592:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b596:	785b      	ldrb	r3, [r3, #1]
 800b598:	2b05      	cmp	r3, #5
 800b59a:	d138      	bne.n	800b60e <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	795b      	ldrb	r3, [r3, #5]
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d113      	bne.n	800b5cc <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800b5a8:	2b02      	cmp	r3, #2
 800b5aa:	d003      	beq.n	800b5b4 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b5ac:	69fb      	ldr	r3, [r7, #28]
 800b5ae:	799b      	ldrb	r3, [r3, #6]
 800b5b0:	2b03      	cmp	r3, #3
 800b5b2:	d10b      	bne.n	800b5cc <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b5b4:	69fb      	ldr	r3, [r7, #28]
 800b5b6:	79db      	ldrb	r3, [r3, #7]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d10b      	bne.n	800b5d4 <USBH_ParseCfgDesc+0x150>
 800b5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	2b09      	cmp	r3, #9
 800b5c2:	d007      	beq.n	800b5d4 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800b5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c6:	2209      	movs	r2, #9
 800b5c8:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b5ca:	e003      	b.n	800b5d4 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ce:	2207      	movs	r2, #7
 800b5d0:	701a      	strb	r2, [r3, #0]
 800b5d2:	e000      	b.n	800b5d6 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b5d4:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b5d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5da:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b5de:	3201      	adds	r2, #1
 800b5e0:	00d2      	lsls	r2, r2, #3
 800b5e2:	211a      	movs	r1, #26
 800b5e4:	fb01 f303 	mul.w	r3, r1, r3
 800b5e8:	4413      	add	r3, r2
 800b5ea:	3308      	adds	r3, #8
 800b5ec:	6a3a      	ldr	r2, [r7, #32]
 800b5ee:	4413      	add	r3, r2
 800b5f0:	3304      	adds	r3, #4
 800b5f2:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b5f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5f6:	69b9      	ldr	r1, [r7, #24]
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f000 f870 	bl	800b6de <USBH_ParseEPDesc>
 800b5fe:	4603      	mov	r3, r0
 800b600:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800b604:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b608:	3301      	adds	r3, #1
 800b60a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b60e:	69fb      	ldr	r3, [r7, #28]
 800b610:	791b      	ldrb	r3, [r3, #4]
 800b612:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b616:	429a      	cmp	r2, r3
 800b618:	d204      	bcs.n	800b624 <USBH_ParseCfgDesc+0x1a0>
 800b61a:	6a3b      	ldr	r3, [r7, #32]
 800b61c:	885a      	ldrh	r2, [r3, #2]
 800b61e:	8afb      	ldrh	r3, [r7, #22]
 800b620:	429a      	cmp	r2, r3
 800b622:	d8b0      	bhi.n	800b586 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b624:	69fb      	ldr	r3, [r7, #28]
 800b626:	791b      	ldrb	r3, [r3, #4]
 800b628:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d201      	bcs.n	800b634 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800b630:	2303      	movs	r3, #3
 800b632:	e01c      	b.n	800b66e <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800b634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b638:	3301      	adds	r3, #1
 800b63a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b63e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b642:	2b01      	cmp	r3, #1
 800b644:	d805      	bhi.n	800b652 <USBH_ParseCfgDesc+0x1ce>
 800b646:	6a3b      	ldr	r3, [r7, #32]
 800b648:	885a      	ldrh	r2, [r3, #2]
 800b64a:	8afb      	ldrh	r3, [r7, #22]
 800b64c:	429a      	cmp	r2, r3
 800b64e:	f63f af74 	bhi.w	800b53a <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b652:	6a3b      	ldr	r3, [r7, #32]
 800b654:	791b      	ldrb	r3, [r3, #4]
 800b656:	2b02      	cmp	r3, #2
 800b658:	bf28      	it	cs
 800b65a:	2302      	movcs	r3, #2
 800b65c:	b2db      	uxtb	r3, r3
 800b65e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b662:	429a      	cmp	r2, r3
 800b664:	d201      	bcs.n	800b66a <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800b666:	2303      	movs	r3, #3
 800b668:	e001      	b.n	800b66e <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800b66a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3730      	adds	r7, #48	; 0x30
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800b676:	b480      	push	{r7}
 800b678:	b083      	sub	sp, #12
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
 800b67e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	781a      	ldrb	r2, [r3, #0]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	785a      	ldrb	r2, [r3, #1]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	789a      	ldrb	r2, [r3, #2]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	78da      	ldrb	r2, [r3, #3]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	3304      	adds	r3, #4
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	2b02      	cmp	r3, #2
 800b6a8:	bf28      	it	cs
 800b6aa:	2302      	movcs	r3, #2
 800b6ac:	b2da      	uxtb	r2, r3
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	795a      	ldrb	r2, [r3, #5]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	799a      	ldrb	r2, [r3, #6]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	79da      	ldrb	r2, [r3, #7]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	7a1a      	ldrb	r2, [r3, #8]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	721a      	strb	r2, [r3, #8]
}
 800b6d2:	bf00      	nop
 800b6d4:	370c      	adds	r7, #12
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr

0800b6de <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800b6de:	b480      	push	{r7}
 800b6e0:	b087      	sub	sp, #28
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	60f8      	str	r0, [r7, #12]
 800b6e6:	60b9      	str	r1, [r7, #8]
 800b6e8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	781a      	ldrb	r2, [r3, #0]
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	785a      	ldrb	r2, [r3, #1]
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	789a      	ldrb	r2, [r3, #2]
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	78da      	ldrb	r2, [r3, #3]
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	3304      	adds	r3, #4
 800b712:	781b      	ldrb	r3, [r3, #0]
 800b714:	b29a      	uxth	r2, r3
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	3305      	adds	r3, #5
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	021b      	lsls	r3, r3, #8
 800b720:	b29b      	uxth	r3, r3
 800b722:	4313      	orrs	r3, r2
 800b724:	b29a      	uxth	r2, r3
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	799a      	ldrb	r2, [r3, #6]
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	889b      	ldrh	r3, [r3, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d009      	beq.n	800b74e <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b73e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b742:	d804      	bhi.n	800b74e <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b74c:	d901      	bls.n	800b752 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800b74e:	2303      	movs	r3, #3
 800b750:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d136      	bne.n	800b7ca <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	78db      	ldrb	r3, [r3, #3]
 800b760:	f003 0303 	and.w	r3, r3, #3
 800b764:	2b02      	cmp	r3, #2
 800b766:	d108      	bne.n	800b77a <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	889b      	ldrh	r3, [r3, #4]
 800b76c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b770:	f240 8097 	bls.w	800b8a2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800b774:	2303      	movs	r3, #3
 800b776:	75fb      	strb	r3, [r7, #23]
 800b778:	e093      	b.n	800b8a2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	78db      	ldrb	r3, [r3, #3]
 800b77e:	f003 0303 	and.w	r3, r3, #3
 800b782:	2b00      	cmp	r3, #0
 800b784:	d107      	bne.n	800b796 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	889b      	ldrh	r3, [r3, #4]
 800b78a:	2b40      	cmp	r3, #64	; 0x40
 800b78c:	f240 8089 	bls.w	800b8a2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800b790:	2303      	movs	r3, #3
 800b792:	75fb      	strb	r3, [r7, #23]
 800b794:	e085      	b.n	800b8a2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	78db      	ldrb	r3, [r3, #3]
 800b79a:	f003 0303 	and.w	r3, r3, #3
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d005      	beq.n	800b7ae <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	78db      	ldrb	r3, [r3, #3]
 800b7a6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b7aa:	2b03      	cmp	r3, #3
 800b7ac:	d10a      	bne.n	800b7c4 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	799b      	ldrb	r3, [r3, #6]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d003      	beq.n	800b7be <USBH_ParseEPDesc+0xe0>
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	799b      	ldrb	r3, [r3, #6]
 800b7ba:	2b10      	cmp	r3, #16
 800b7bc:	d970      	bls.n	800b8a0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b7be:	2303      	movs	r3, #3
 800b7c0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b7c2:	e06d      	b.n	800b8a0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b7c4:	2303      	movs	r3, #3
 800b7c6:	75fb      	strb	r3, [r7, #23]
 800b7c8:	e06b      	b.n	800b8a2 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d13c      	bne.n	800b84e <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	78db      	ldrb	r3, [r3, #3]
 800b7d8:	f003 0303 	and.w	r3, r3, #3
 800b7dc:	2b02      	cmp	r3, #2
 800b7de:	d005      	beq.n	800b7ec <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	78db      	ldrb	r3, [r3, #3]
 800b7e4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d106      	bne.n	800b7fa <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	889b      	ldrh	r3, [r3, #4]
 800b7f0:	2b40      	cmp	r3, #64	; 0x40
 800b7f2:	d956      	bls.n	800b8a2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800b7f4:	2303      	movs	r3, #3
 800b7f6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b7f8:	e053      	b.n	800b8a2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	78db      	ldrb	r3, [r3, #3]
 800b7fe:	f003 0303 	and.w	r3, r3, #3
 800b802:	2b01      	cmp	r3, #1
 800b804:	d10e      	bne.n	800b824 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	799b      	ldrb	r3, [r3, #6]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d007      	beq.n	800b81e <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800b812:	2b10      	cmp	r3, #16
 800b814:	d803      	bhi.n	800b81e <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800b81a:	2b40      	cmp	r3, #64	; 0x40
 800b81c:	d941      	bls.n	800b8a2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800b81e:	2303      	movs	r3, #3
 800b820:	75fb      	strb	r3, [r7, #23]
 800b822:	e03e      	b.n	800b8a2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	78db      	ldrb	r3, [r3, #3]
 800b828:	f003 0303 	and.w	r3, r3, #3
 800b82c:	2b03      	cmp	r3, #3
 800b82e:	d10b      	bne.n	800b848 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	799b      	ldrb	r3, [r3, #6]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d004      	beq.n	800b842 <USBH_ParseEPDesc+0x164>
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	889b      	ldrh	r3, [r3, #4]
 800b83c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b840:	d32f      	bcc.n	800b8a2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800b842:	2303      	movs	r3, #3
 800b844:	75fb      	strb	r3, [r7, #23]
 800b846:	e02c      	b.n	800b8a2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b848:	2303      	movs	r3, #3
 800b84a:	75fb      	strb	r3, [r7, #23]
 800b84c:	e029      	b.n	800b8a2 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b854:	2b02      	cmp	r3, #2
 800b856:	d120      	bne.n	800b89a <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	78db      	ldrb	r3, [r3, #3]
 800b85c:	f003 0303 	and.w	r3, r3, #3
 800b860:	2b00      	cmp	r3, #0
 800b862:	d106      	bne.n	800b872 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	889b      	ldrh	r3, [r3, #4]
 800b868:	2b08      	cmp	r3, #8
 800b86a:	d01a      	beq.n	800b8a2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800b86c:	2303      	movs	r3, #3
 800b86e:	75fb      	strb	r3, [r7, #23]
 800b870:	e017      	b.n	800b8a2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	78db      	ldrb	r3, [r3, #3]
 800b876:	f003 0303 	and.w	r3, r3, #3
 800b87a:	2b03      	cmp	r3, #3
 800b87c:	d10a      	bne.n	800b894 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	799b      	ldrb	r3, [r3, #6]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d003      	beq.n	800b88e <USBH_ParseEPDesc+0x1b0>
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	889b      	ldrh	r3, [r3, #4]
 800b88a:	2b08      	cmp	r3, #8
 800b88c:	d909      	bls.n	800b8a2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800b88e:	2303      	movs	r3, #3
 800b890:	75fb      	strb	r3, [r7, #23]
 800b892:	e006      	b.n	800b8a2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b894:	2303      	movs	r3, #3
 800b896:	75fb      	strb	r3, [r7, #23]
 800b898:	e003      	b.n	800b8a2 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b89a:	2303      	movs	r3, #3
 800b89c:	75fb      	strb	r3, [r7, #23]
 800b89e:	e000      	b.n	800b8a2 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b8a0:	bf00      	nop
  }

  return status;
 800b8a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	371c      	adds	r7, #28
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b087      	sub	sp, #28
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	60b9      	str	r1, [r7, #8]
 800b8ba:	4613      	mov	r3, r2
 800b8bc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	781b      	ldrb	r3, [r3, #0]
 800b8c4:	2b03      	cmp	r3, #3
 800b8c6:	d120      	bne.n	800b90a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	1e9a      	subs	r2, r3, #2
 800b8ce:	88fb      	ldrh	r3, [r7, #6]
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	bf28      	it	cs
 800b8d4:	4613      	movcs	r3, r2
 800b8d6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	3302      	adds	r3, #2
 800b8dc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b8de:	2300      	movs	r3, #0
 800b8e0:	82fb      	strh	r3, [r7, #22]
 800b8e2:	e00b      	b.n	800b8fc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b8e4:	8afb      	ldrh	r3, [r7, #22]
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	781a      	ldrb	r2, [r3, #0]
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b8f6:	8afb      	ldrh	r3, [r7, #22]
 800b8f8:	3302      	adds	r3, #2
 800b8fa:	82fb      	strh	r3, [r7, #22]
 800b8fc:	8afa      	ldrh	r2, [r7, #22]
 800b8fe:	8abb      	ldrh	r3, [r7, #20]
 800b900:	429a      	cmp	r2, r3
 800b902:	d3ef      	bcc.n	800b8e4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	2200      	movs	r2, #0
 800b908:	701a      	strb	r2, [r3, #0]
  }
}
 800b90a:	bf00      	nop
 800b90c:	371c      	adds	r7, #28
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr

0800b916 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b916:	b480      	push	{r7}
 800b918:	b085      	sub	sp, #20
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
 800b91e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	881a      	ldrh	r2, [r3, #0]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	b29b      	uxth	r3, r3
 800b92a:	4413      	add	r3, r2
 800b92c:	b29a      	uxth	r2, r3
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	4413      	add	r3, r2
 800b93c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b93e:	68fb      	ldr	r3, [r7, #12]
}
 800b940:	4618      	mov	r0, r3
 800b942:	3714      	adds	r7, #20
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b086      	sub	sp, #24
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	4613      	mov	r3, r2
 800b958:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b95a:	2301      	movs	r3, #1
 800b95c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	789b      	ldrb	r3, [r3, #2]
 800b962:	2b01      	cmp	r3, #1
 800b964:	d002      	beq.n	800b96c <USBH_CtlReq+0x20>
 800b966:	2b02      	cmp	r3, #2
 800b968:	d00f      	beq.n	800b98a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b96a:	e027      	b.n	800b9bc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	68ba      	ldr	r2, [r7, #8]
 800b970:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	88fa      	ldrh	r2, [r7, #6]
 800b976:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2201      	movs	r2, #1
 800b97c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2202      	movs	r2, #2
 800b982:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b984:	2301      	movs	r3, #1
 800b986:	75fb      	strb	r3, [r7, #23]
      break;
 800b988:	e018      	b.n	800b9bc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f000 f81c 	bl	800b9c8 <USBH_HandleControl>
 800b990:	4603      	mov	r3, r0
 800b992:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b994:	7dfb      	ldrb	r3, [r7, #23]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d002      	beq.n	800b9a0 <USBH_CtlReq+0x54>
 800b99a:	7dfb      	ldrb	r3, [r7, #23]
 800b99c:	2b03      	cmp	r3, #3
 800b99e:	d106      	bne.n	800b9ae <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	761a      	strb	r2, [r3, #24]
      break;
 800b9ac:	e005      	b.n	800b9ba <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b9ae:	7dfb      	ldrb	r3, [r7, #23]
 800b9b0:	2b02      	cmp	r3, #2
 800b9b2:	d102      	bne.n	800b9ba <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	709a      	strb	r2, [r3, #2]
      break;
 800b9ba:	bf00      	nop
  }
  return status;
 800b9bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3718      	adds	r7, #24
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
	...

0800b9c8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b086      	sub	sp, #24
 800b9cc:	af02      	add	r7, sp, #8
 800b9ce:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	7e1b      	ldrb	r3, [r3, #24]
 800b9dc:	3b01      	subs	r3, #1
 800b9de:	2b0a      	cmp	r3, #10
 800b9e0:	f200 8156 	bhi.w	800bc90 <USBH_HandleControl+0x2c8>
 800b9e4:	a201      	add	r2, pc, #4	; (adr r2, 800b9ec <USBH_HandleControl+0x24>)
 800b9e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ea:	bf00      	nop
 800b9ec:	0800ba19 	.word	0x0800ba19
 800b9f0:	0800ba33 	.word	0x0800ba33
 800b9f4:	0800ba9d 	.word	0x0800ba9d
 800b9f8:	0800bac3 	.word	0x0800bac3
 800b9fc:	0800bafb 	.word	0x0800bafb
 800ba00:	0800bb25 	.word	0x0800bb25
 800ba04:	0800bb77 	.word	0x0800bb77
 800ba08:	0800bb99 	.word	0x0800bb99
 800ba0c:	0800bbd5 	.word	0x0800bbd5
 800ba10:	0800bbfb 	.word	0x0800bbfb
 800ba14:	0800bc39 	.word	0x0800bc39
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f103 0110 	add.w	r1, r3, #16
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	795b      	ldrb	r3, [r3, #5]
 800ba22:	461a      	mov	r2, r3
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f000 f943 	bl	800bcb0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2202      	movs	r2, #2
 800ba2e:	761a      	strb	r2, [r3, #24]
      break;
 800ba30:	e139      	b.n	800bca6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	795b      	ldrb	r3, [r3, #5]
 800ba36:	4619      	mov	r1, r3
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 fcc5 	bl	800c3c8 <USBH_LL_GetURBState>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ba42:	7bbb      	ldrb	r3, [r7, #14]
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d11e      	bne.n	800ba86 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	7c1b      	ldrb	r3, [r3, #16]
 800ba4c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ba50:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	8adb      	ldrh	r3, [r3, #22]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d00a      	beq.n	800ba70 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ba5a:	7b7b      	ldrb	r3, [r7, #13]
 800ba5c:	2b80      	cmp	r3, #128	; 0x80
 800ba5e:	d103      	bne.n	800ba68 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2203      	movs	r2, #3
 800ba64:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ba66:	e115      	b.n	800bc94 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2205      	movs	r2, #5
 800ba6c:	761a      	strb	r2, [r3, #24]
      break;
 800ba6e:	e111      	b.n	800bc94 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ba70:	7b7b      	ldrb	r3, [r7, #13]
 800ba72:	2b80      	cmp	r3, #128	; 0x80
 800ba74:	d103      	bne.n	800ba7e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2209      	movs	r2, #9
 800ba7a:	761a      	strb	r2, [r3, #24]
      break;
 800ba7c:	e10a      	b.n	800bc94 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2207      	movs	r2, #7
 800ba82:	761a      	strb	r2, [r3, #24]
      break;
 800ba84:	e106      	b.n	800bc94 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ba86:	7bbb      	ldrb	r3, [r7, #14]
 800ba88:	2b04      	cmp	r3, #4
 800ba8a:	d003      	beq.n	800ba94 <USBH_HandleControl+0xcc>
 800ba8c:	7bbb      	ldrb	r3, [r7, #14]
 800ba8e:	2b02      	cmp	r3, #2
 800ba90:	f040 8100 	bne.w	800bc94 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	220b      	movs	r2, #11
 800ba98:	761a      	strb	r2, [r3, #24]
      break;
 800ba9a:	e0fb      	b.n	800bc94 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800baa2:	b29a      	uxth	r2, r3
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6899      	ldr	r1, [r3, #8]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	899a      	ldrh	r2, [r3, #12]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	791b      	ldrb	r3, [r3, #4]
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 f93a 	bl	800bd2e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2204      	movs	r2, #4
 800babe:	761a      	strb	r2, [r3, #24]
      break;
 800bac0:	e0f1      	b.n	800bca6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	791b      	ldrb	r3, [r3, #4]
 800bac6:	4619      	mov	r1, r3
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f000 fc7d 	bl	800c3c8 <USBH_LL_GetURBState>
 800bace:	4603      	mov	r3, r0
 800bad0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bad2:	7bbb      	ldrb	r3, [r7, #14]
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	d102      	bne.n	800bade <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2209      	movs	r2, #9
 800badc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bade:	7bbb      	ldrb	r3, [r7, #14]
 800bae0:	2b05      	cmp	r3, #5
 800bae2:	d102      	bne.n	800baea <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bae4:	2303      	movs	r3, #3
 800bae6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bae8:	e0d6      	b.n	800bc98 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800baea:	7bbb      	ldrb	r3, [r7, #14]
 800baec:	2b04      	cmp	r3, #4
 800baee:	f040 80d3 	bne.w	800bc98 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	220b      	movs	r2, #11
 800baf6:	761a      	strb	r2, [r3, #24]
      break;
 800baf8:	e0ce      	b.n	800bc98 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6899      	ldr	r1, [r3, #8]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	899a      	ldrh	r2, [r3, #12]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	795b      	ldrb	r3, [r3, #5]
 800bb06:	2001      	movs	r0, #1
 800bb08:	9000      	str	r0, [sp, #0]
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 f8ea 	bl	800bce4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bb16:	b29a      	uxth	r2, r3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2206      	movs	r2, #6
 800bb20:	761a      	strb	r2, [r3, #24]
      break;
 800bb22:	e0c0      	b.n	800bca6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	795b      	ldrb	r3, [r3, #5]
 800bb28:	4619      	mov	r1, r3
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 fc4c 	bl	800c3c8 <USBH_LL_GetURBState>
 800bb30:	4603      	mov	r3, r0
 800bb32:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bb34:	7bbb      	ldrb	r3, [r7, #14]
 800bb36:	2b01      	cmp	r3, #1
 800bb38:	d103      	bne.n	800bb42 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2207      	movs	r2, #7
 800bb3e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bb40:	e0ac      	b.n	800bc9c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800bb42:	7bbb      	ldrb	r3, [r7, #14]
 800bb44:	2b05      	cmp	r3, #5
 800bb46:	d105      	bne.n	800bb54 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	220c      	movs	r2, #12
 800bb4c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bb4e:	2303      	movs	r3, #3
 800bb50:	73fb      	strb	r3, [r7, #15]
      break;
 800bb52:	e0a3      	b.n	800bc9c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bb54:	7bbb      	ldrb	r3, [r7, #14]
 800bb56:	2b02      	cmp	r3, #2
 800bb58:	d103      	bne.n	800bb62 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2205      	movs	r2, #5
 800bb5e:	761a      	strb	r2, [r3, #24]
      break;
 800bb60:	e09c      	b.n	800bc9c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800bb62:	7bbb      	ldrb	r3, [r7, #14]
 800bb64:	2b04      	cmp	r3, #4
 800bb66:	f040 8099 	bne.w	800bc9c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	220b      	movs	r2, #11
 800bb6e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bb70:	2302      	movs	r3, #2
 800bb72:	73fb      	strb	r3, [r7, #15]
      break;
 800bb74:	e092      	b.n	800bc9c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	791b      	ldrb	r3, [r3, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	2100      	movs	r1, #0
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 f8d5 	bl	800bd2e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bb8a:	b29a      	uxth	r2, r3
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2208      	movs	r2, #8
 800bb94:	761a      	strb	r2, [r3, #24]

      break;
 800bb96:	e086      	b.n	800bca6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	791b      	ldrb	r3, [r3, #4]
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 fc12 	bl	800c3c8 <USBH_LL_GetURBState>
 800bba4:	4603      	mov	r3, r0
 800bba6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bba8:	7bbb      	ldrb	r3, [r7, #14]
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d105      	bne.n	800bbba <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	220d      	movs	r2, #13
 800bbb2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bbb8:	e072      	b.n	800bca0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800bbba:	7bbb      	ldrb	r3, [r7, #14]
 800bbbc:	2b04      	cmp	r3, #4
 800bbbe:	d103      	bne.n	800bbc8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	220b      	movs	r2, #11
 800bbc4:	761a      	strb	r2, [r3, #24]
      break;
 800bbc6:	e06b      	b.n	800bca0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800bbc8:	7bbb      	ldrb	r3, [r7, #14]
 800bbca:	2b05      	cmp	r3, #5
 800bbcc:	d168      	bne.n	800bca0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800bbce:	2303      	movs	r3, #3
 800bbd0:	73fb      	strb	r3, [r7, #15]
      break;
 800bbd2:	e065      	b.n	800bca0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	795b      	ldrb	r3, [r3, #5]
 800bbd8:	2201      	movs	r2, #1
 800bbda:	9200      	str	r2, [sp, #0]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	2100      	movs	r1, #0
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 f87f 	bl	800bce4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bbec:	b29a      	uxth	r2, r3
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	220a      	movs	r2, #10
 800bbf6:	761a      	strb	r2, [r3, #24]
      break;
 800bbf8:	e055      	b.n	800bca6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	795b      	ldrb	r3, [r3, #5]
 800bbfe:	4619      	mov	r1, r3
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 fbe1 	bl	800c3c8 <USBH_LL_GetURBState>
 800bc06:	4603      	mov	r3, r0
 800bc08:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bc0a:	7bbb      	ldrb	r3, [r7, #14]
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d105      	bne.n	800bc1c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800bc10:	2300      	movs	r3, #0
 800bc12:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	220d      	movs	r2, #13
 800bc18:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bc1a:	e043      	b.n	800bca4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bc1c:	7bbb      	ldrb	r3, [r7, #14]
 800bc1e:	2b02      	cmp	r3, #2
 800bc20:	d103      	bne.n	800bc2a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2209      	movs	r2, #9
 800bc26:	761a      	strb	r2, [r3, #24]
      break;
 800bc28:	e03c      	b.n	800bca4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800bc2a:	7bbb      	ldrb	r3, [r7, #14]
 800bc2c:	2b04      	cmp	r3, #4
 800bc2e:	d139      	bne.n	800bca4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	220b      	movs	r2, #11
 800bc34:	761a      	strb	r2, [r3, #24]
      break;
 800bc36:	e035      	b.n	800bca4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	7e5b      	ldrb	r3, [r3, #25]
 800bc3c:	3301      	adds	r3, #1
 800bc3e:	b2da      	uxtb	r2, r3
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	765a      	strb	r2, [r3, #25]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	7e5b      	ldrb	r3, [r3, #25]
 800bc48:	2b02      	cmp	r3, #2
 800bc4a:	d806      	bhi.n	800bc5a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2201      	movs	r2, #1
 800bc56:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bc58:	e025      	b.n	800bca6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bc60:	2106      	movs	r1, #6
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	795b      	ldrb	r3, [r3, #5]
 800bc70:	4619      	mov	r1, r3
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 f90c 	bl	800be90 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	791b      	ldrb	r3, [r3, #4]
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 f906 	bl	800be90 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2200      	movs	r2, #0
 800bc88:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bc8a:	2302      	movs	r3, #2
 800bc8c:	73fb      	strb	r3, [r7, #15]
      break;
 800bc8e:	e00a      	b.n	800bca6 <USBH_HandleControl+0x2de>

    default:
      break;
 800bc90:	bf00      	nop
 800bc92:	e008      	b.n	800bca6 <USBH_HandleControl+0x2de>
      break;
 800bc94:	bf00      	nop
 800bc96:	e006      	b.n	800bca6 <USBH_HandleControl+0x2de>
      break;
 800bc98:	bf00      	nop
 800bc9a:	e004      	b.n	800bca6 <USBH_HandleControl+0x2de>
      break;
 800bc9c:	bf00      	nop
 800bc9e:	e002      	b.n	800bca6 <USBH_HandleControl+0x2de>
      break;
 800bca0:	bf00      	nop
 800bca2:	e000      	b.n	800bca6 <USBH_HandleControl+0x2de>
      break;
 800bca4:	bf00      	nop
  }

  return status;
 800bca6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3710      	adds	r7, #16
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b088      	sub	sp, #32
 800bcb4:	af04      	add	r7, sp, #16
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	4613      	mov	r3, r2
 800bcbc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bcbe:	79f9      	ldrb	r1, [r7, #7]
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	9303      	str	r3, [sp, #12]
 800bcc4:	2308      	movs	r3, #8
 800bcc6:	9302      	str	r3, [sp, #8]
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	9301      	str	r3, [sp, #4]
 800bccc:	2300      	movs	r3, #0
 800bcce:	9300      	str	r3, [sp, #0]
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	68f8      	ldr	r0, [r7, #12]
 800bcd6:	f000 fb46 	bl	800c366 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800bcda:	2300      	movs	r3, #0
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3710      	adds	r7, #16
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b088      	sub	sp, #32
 800bce8:	af04      	add	r7, sp, #16
 800bcea:	60f8      	str	r0, [r7, #12]
 800bcec:	60b9      	str	r1, [r7, #8]
 800bcee:	4611      	mov	r1, r2
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	460b      	mov	r3, r1
 800bcf4:	80fb      	strh	r3, [r7, #6]
 800bcf6:	4613      	mov	r3, r2
 800bcf8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d001      	beq.n	800bd08 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bd04:	2300      	movs	r3, #0
 800bd06:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bd08:	7979      	ldrb	r1, [r7, #5]
 800bd0a:	7e3b      	ldrb	r3, [r7, #24]
 800bd0c:	9303      	str	r3, [sp, #12]
 800bd0e:	88fb      	ldrh	r3, [r7, #6]
 800bd10:	9302      	str	r3, [sp, #8]
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	9301      	str	r3, [sp, #4]
 800bd16:	2301      	movs	r3, #1
 800bd18:	9300      	str	r3, [sp, #0]
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	68f8      	ldr	r0, [r7, #12]
 800bd20:	f000 fb21 	bl	800c366 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bd24:	2300      	movs	r3, #0
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}

0800bd2e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b088      	sub	sp, #32
 800bd32:	af04      	add	r7, sp, #16
 800bd34:	60f8      	str	r0, [r7, #12]
 800bd36:	60b9      	str	r1, [r7, #8]
 800bd38:	4611      	mov	r1, r2
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	80fb      	strh	r3, [r7, #6]
 800bd40:	4613      	mov	r3, r2
 800bd42:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bd44:	7979      	ldrb	r1, [r7, #5]
 800bd46:	2300      	movs	r3, #0
 800bd48:	9303      	str	r3, [sp, #12]
 800bd4a:	88fb      	ldrh	r3, [r7, #6]
 800bd4c:	9302      	str	r3, [sp, #8]
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	9301      	str	r3, [sp, #4]
 800bd52:	2301      	movs	r3, #1
 800bd54:	9300      	str	r3, [sp, #0]
 800bd56:	2300      	movs	r3, #0
 800bd58:	2201      	movs	r2, #1
 800bd5a:	68f8      	ldr	r0, [r7, #12]
 800bd5c:	f000 fb03 	bl	800c366 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bd60:	2300      	movs	r3, #0

}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3710      	adds	r7, #16
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}

0800bd6a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bd6a:	b580      	push	{r7, lr}
 800bd6c:	b088      	sub	sp, #32
 800bd6e:	af04      	add	r7, sp, #16
 800bd70:	60f8      	str	r0, [r7, #12]
 800bd72:	60b9      	str	r1, [r7, #8]
 800bd74:	4611      	mov	r1, r2
 800bd76:	461a      	mov	r2, r3
 800bd78:	460b      	mov	r3, r1
 800bd7a:	80fb      	strh	r3, [r7, #6]
 800bd7c:	4613      	mov	r3, r2
 800bd7e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d001      	beq.n	800bd8e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bd8e:	7979      	ldrb	r1, [r7, #5]
 800bd90:	7e3b      	ldrb	r3, [r7, #24]
 800bd92:	9303      	str	r3, [sp, #12]
 800bd94:	88fb      	ldrh	r3, [r7, #6]
 800bd96:	9302      	str	r3, [sp, #8]
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	9301      	str	r3, [sp, #4]
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	9300      	str	r3, [sp, #0]
 800bda0:	2302      	movs	r3, #2
 800bda2:	2200      	movs	r2, #0
 800bda4:	68f8      	ldr	r0, [r7, #12]
 800bda6:	f000 fade 	bl	800c366 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bdaa:	2300      	movs	r3, #0
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3710      	adds	r7, #16
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b088      	sub	sp, #32
 800bdb8:	af04      	add	r7, sp, #16
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	4611      	mov	r1, r2
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	80fb      	strh	r3, [r7, #6]
 800bdc6:	4613      	mov	r3, r2
 800bdc8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bdca:	7979      	ldrb	r1, [r7, #5]
 800bdcc:	2300      	movs	r3, #0
 800bdce:	9303      	str	r3, [sp, #12]
 800bdd0:	88fb      	ldrh	r3, [r7, #6]
 800bdd2:	9302      	str	r3, [sp, #8]
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	9301      	str	r3, [sp, #4]
 800bdd8:	2301      	movs	r3, #1
 800bdda:	9300      	str	r3, [sp, #0]
 800bddc:	2302      	movs	r3, #2
 800bdde:	2201      	movs	r2, #1
 800bde0:	68f8      	ldr	r0, [r7, #12]
 800bde2:	f000 fac0 	bl	800c366 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bde6:	2300      	movs	r3, #0
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3710      	adds	r7, #16
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b086      	sub	sp, #24
 800bdf4:	af04      	add	r7, sp, #16
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	4608      	mov	r0, r1
 800bdfa:	4611      	mov	r1, r2
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	4603      	mov	r3, r0
 800be00:	70fb      	strb	r3, [r7, #3]
 800be02:	460b      	mov	r3, r1
 800be04:	70bb      	strb	r3, [r7, #2]
 800be06:	4613      	mov	r3, r2
 800be08:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800be0a:	7878      	ldrb	r0, [r7, #1]
 800be0c:	78ba      	ldrb	r2, [r7, #2]
 800be0e:	78f9      	ldrb	r1, [r7, #3]
 800be10:	8b3b      	ldrh	r3, [r7, #24]
 800be12:	9302      	str	r3, [sp, #8]
 800be14:	7d3b      	ldrb	r3, [r7, #20]
 800be16:	9301      	str	r3, [sp, #4]
 800be18:	7c3b      	ldrb	r3, [r7, #16]
 800be1a:	9300      	str	r3, [sp, #0]
 800be1c:	4603      	mov	r3, r0
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 fa53 	bl	800c2ca <USBH_LL_OpenPipe>

  return USBH_OK;
 800be24:	2300      	movs	r3, #0
}
 800be26:	4618      	mov	r0, r3
 800be28:	3708      	adds	r7, #8
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b082      	sub	sp, #8
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
 800be36:	460b      	mov	r3, r1
 800be38:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800be3a:	78fb      	ldrb	r3, [r7, #3]
 800be3c:	4619      	mov	r1, r3
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 fa72 	bl	800c328 <USBH_LL_ClosePipe>

  return USBH_OK;
 800be44:	2300      	movs	r3, #0
}
 800be46:	4618      	mov	r0, r3
 800be48:	3708      	adds	r7, #8
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}

0800be4e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800be4e:	b580      	push	{r7, lr}
 800be50:	b084      	sub	sp, #16
 800be52:	af00      	add	r7, sp, #0
 800be54:	6078      	str	r0, [r7, #4]
 800be56:	460b      	mov	r3, r1
 800be58:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 f836 	bl	800becc <USBH_GetFreePipe>
 800be60:	4603      	mov	r3, r0
 800be62:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800be64:	89fb      	ldrh	r3, [r7, #14]
 800be66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d00a      	beq.n	800be84 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800be6e:	78fa      	ldrb	r2, [r7, #3]
 800be70:	89fb      	ldrh	r3, [r7, #14]
 800be72:	f003 030f 	and.w	r3, r3, #15
 800be76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be7a:	6879      	ldr	r1, [r7, #4]
 800be7c:	33e0      	adds	r3, #224	; 0xe0
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	440b      	add	r3, r1
 800be82:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800be84:	89fb      	ldrh	r3, [r7, #14]
 800be86:	b2db      	uxtb	r3, r3
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3710      	adds	r7, #16
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}

0800be90 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	460b      	mov	r3, r1
 800be9a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800be9c:	78fb      	ldrb	r3, [r7, #3]
 800be9e:	2b0f      	cmp	r3, #15
 800bea0:	d80d      	bhi.n	800bebe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bea2:	78fb      	ldrb	r3, [r7, #3]
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	33e0      	adds	r3, #224	; 0xe0
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	4413      	add	r3, r2
 800beac:	685a      	ldr	r2, [r3, #4]
 800beae:	78fb      	ldrb	r3, [r7, #3]
 800beb0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800beb4:	6879      	ldr	r1, [r7, #4]
 800beb6:	33e0      	adds	r3, #224	; 0xe0
 800beb8:	009b      	lsls	r3, r3, #2
 800beba:	440b      	add	r3, r1
 800bebc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bebe:	2300      	movs	r3, #0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	370c      	adds	r7, #12
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr

0800becc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800becc:	b480      	push	{r7}
 800bece:	b085      	sub	sp, #20
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bed4:	2300      	movs	r3, #0
 800bed6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800bed8:	2300      	movs	r3, #0
 800beda:	73fb      	strb	r3, [r7, #15]
 800bedc:	e00f      	b.n	800befe <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bede:	7bfb      	ldrb	r3, [r7, #15]
 800bee0:	687a      	ldr	r2, [r7, #4]
 800bee2:	33e0      	adds	r3, #224	; 0xe0
 800bee4:	009b      	lsls	r3, r3, #2
 800bee6:	4413      	add	r3, r2
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d102      	bne.n	800bef8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bef2:	7bfb      	ldrb	r3, [r7, #15]
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	e007      	b.n	800bf08 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800bef8:	7bfb      	ldrb	r3, [r7, #15]
 800befa:	3301      	adds	r3, #1
 800befc:	73fb      	strb	r3, [r7, #15]
 800befe:	7bfb      	ldrb	r3, [r7, #15]
 800bf00:	2b0f      	cmp	r3, #15
 800bf02:	d9ec      	bls.n	800bede <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bf04:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3714      	adds	r7, #20
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr

0800bf14 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800bf18:	2201      	movs	r2, #1
 800bf1a:	490e      	ldr	r1, [pc, #56]	; (800bf54 <MX_USB_HOST_Init+0x40>)
 800bf1c:	480e      	ldr	r0, [pc, #56]	; (800bf58 <MX_USB_HOST_Init+0x44>)
 800bf1e:	f7fe fb05 	bl	800a52c <USBH_Init>
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d001      	beq.n	800bf2c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bf28:	f7f5 fca8 	bl	800187c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800bf2c:	490b      	ldr	r1, [pc, #44]	; (800bf5c <MX_USB_HOST_Init+0x48>)
 800bf2e:	480a      	ldr	r0, [pc, #40]	; (800bf58 <MX_USB_HOST_Init+0x44>)
 800bf30:	f7fe fba9 	bl	800a686 <USBH_RegisterClass>
 800bf34:	4603      	mov	r3, r0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d001      	beq.n	800bf3e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800bf3a:	f7f5 fc9f 	bl	800187c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800bf3e:	4806      	ldr	r0, [pc, #24]	; (800bf58 <MX_USB_HOST_Init+0x44>)
 800bf40:	f7fe fc2d 	bl	800a79e <USBH_Start>
 800bf44:	4603      	mov	r3, r0
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d001      	beq.n	800bf4e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bf4a:	f7f5 fc97 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bf4e:	bf00      	nop
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	bf00      	nop
 800bf54:	0800bf75 	.word	0x0800bf75
 800bf58:	2000077c 	.word	0x2000077c
 800bf5c:	2000000c 	.word	0x2000000c

0800bf60 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800bf64:	4802      	ldr	r0, [pc, #8]	; (800bf70 <MX_USB_HOST_Process+0x10>)
 800bf66:	f7fe fc2b 	bl	800a7c0 <USBH_Process>
}
 800bf6a:	bf00      	nop
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	2000077c 	.word	0x2000077c

0800bf74 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bf80:	78fb      	ldrb	r3, [r7, #3]
 800bf82:	3b01      	subs	r3, #1
 800bf84:	2b04      	cmp	r3, #4
 800bf86:	d819      	bhi.n	800bfbc <USBH_UserProcess+0x48>
 800bf88:	a201      	add	r2, pc, #4	; (adr r2, 800bf90 <USBH_UserProcess+0x1c>)
 800bf8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf8e:	bf00      	nop
 800bf90:	0800bfbd 	.word	0x0800bfbd
 800bf94:	0800bfad 	.word	0x0800bfad
 800bf98:	0800bfbd 	.word	0x0800bfbd
 800bf9c:	0800bfb5 	.word	0x0800bfb5
 800bfa0:	0800bfa5 	.word	0x0800bfa5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bfa4:	4b09      	ldr	r3, [pc, #36]	; (800bfcc <USBH_UserProcess+0x58>)
 800bfa6:	2203      	movs	r2, #3
 800bfa8:	701a      	strb	r2, [r3, #0]
  break;
 800bfaa:	e008      	b.n	800bfbe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bfac:	4b07      	ldr	r3, [pc, #28]	; (800bfcc <USBH_UserProcess+0x58>)
 800bfae:	2202      	movs	r2, #2
 800bfb0:	701a      	strb	r2, [r3, #0]
  break;
 800bfb2:	e004      	b.n	800bfbe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bfb4:	4b05      	ldr	r3, [pc, #20]	; (800bfcc <USBH_UserProcess+0x58>)
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	701a      	strb	r2, [r3, #0]
  break;
 800bfba:	e000      	b.n	800bfbe <USBH_UserProcess+0x4a>

  default:
  break;
 800bfbc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bfbe:	bf00      	nop
 800bfc0:	370c      	adds	r7, #12
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc8:	4770      	bx	lr
 800bfca:	bf00      	nop
 800bfcc:	20000b54 	.word	0x20000b54

0800bfd0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b08a      	sub	sp, #40	; 0x28
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfd8:	f107 0314 	add.w	r3, r7, #20
 800bfdc:	2200      	movs	r2, #0
 800bfde:	601a      	str	r2, [r3, #0]
 800bfe0:	605a      	str	r2, [r3, #4]
 800bfe2:	609a      	str	r2, [r3, #8]
 800bfe4:	60da      	str	r2, [r3, #12]
 800bfe6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bff0:	d147      	bne.n	800c082 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bff2:	2300      	movs	r3, #0
 800bff4:	613b      	str	r3, [r7, #16]
 800bff6:	4b25      	ldr	r3, [pc, #148]	; (800c08c <HAL_HCD_MspInit+0xbc>)
 800bff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bffa:	4a24      	ldr	r2, [pc, #144]	; (800c08c <HAL_HCD_MspInit+0xbc>)
 800bffc:	f043 0301 	orr.w	r3, r3, #1
 800c000:	6313      	str	r3, [r2, #48]	; 0x30
 800c002:	4b22      	ldr	r3, [pc, #136]	; (800c08c <HAL_HCD_MspInit+0xbc>)
 800c004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c006:	f003 0301 	and.w	r3, r3, #1
 800c00a:	613b      	str	r3, [r7, #16]
 800c00c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c00e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c014:	2300      	movs	r3, #0
 800c016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c018:	2300      	movs	r3, #0
 800c01a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c01c:	f107 0314 	add.w	r3, r7, #20
 800c020:	4619      	mov	r1, r3
 800c022:	481b      	ldr	r0, [pc, #108]	; (800c090 <HAL_HCD_MspInit+0xc0>)
 800c024:	f7f6 fd94 	bl	8002b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c028:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c02c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c02e:	2302      	movs	r3, #2
 800c030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c032:	2300      	movs	r3, #0
 800c034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c036:	2300      	movs	r3, #0
 800c038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c03a:	230a      	movs	r3, #10
 800c03c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c03e:	f107 0314 	add.w	r3, r7, #20
 800c042:	4619      	mov	r1, r3
 800c044:	4812      	ldr	r0, [pc, #72]	; (800c090 <HAL_HCD_MspInit+0xc0>)
 800c046:	f7f6 fd83 	bl	8002b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c04a:	4b10      	ldr	r3, [pc, #64]	; (800c08c <HAL_HCD_MspInit+0xbc>)
 800c04c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c04e:	4a0f      	ldr	r2, [pc, #60]	; (800c08c <HAL_HCD_MspInit+0xbc>)
 800c050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c054:	6353      	str	r3, [r2, #52]	; 0x34
 800c056:	2300      	movs	r3, #0
 800c058:	60fb      	str	r3, [r7, #12]
 800c05a:	4b0c      	ldr	r3, [pc, #48]	; (800c08c <HAL_HCD_MspInit+0xbc>)
 800c05c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c05e:	4a0b      	ldr	r2, [pc, #44]	; (800c08c <HAL_HCD_MspInit+0xbc>)
 800c060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c064:	6453      	str	r3, [r2, #68]	; 0x44
 800c066:	4b09      	ldr	r3, [pc, #36]	; (800c08c <HAL_HCD_MspInit+0xbc>)
 800c068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c06a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c06e:	60fb      	str	r3, [r7, #12]
 800c070:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c072:	2200      	movs	r2, #0
 800c074:	2100      	movs	r1, #0
 800c076:	2043      	movs	r0, #67	; 0x43
 800c078:	f7f6 f931 	bl	80022de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c07c:	2043      	movs	r0, #67	; 0x43
 800c07e:	f7f6 f94a 	bl	8002316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c082:	bf00      	nop
 800c084:	3728      	adds	r7, #40	; 0x28
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
 800c08a:	bf00      	nop
 800c08c:	40023800 	.word	0x40023800
 800c090:	40020000 	.word	0x40020000

0800c094 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b082      	sub	sp, #8
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7fe ff6b 	bl	800af7e <USBH_LL_IncTimer>
}
 800c0a8:	bf00      	nop
 800c0aa:	3708      	adds	r7, #8
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7fe ffa3 	bl	800b00a <USBH_LL_Connect>
}
 800c0c4:	bf00      	nop
 800c0c6:	3708      	adds	r7, #8
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7fe ffac 	bl	800b038 <USBH_LL_Disconnect>
}
 800c0e0:	bf00      	nop
 800c0e2:	3708      	adds	r7, #8
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	70fb      	strb	r3, [r7, #3]
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c0f8:	bf00      	nop
 800c0fa:	370c      	adds	r7, #12
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr

0800c104 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c112:	4618      	mov	r0, r3
 800c114:	f7fe ff5d 	bl	800afd2 <USBH_LL_PortEnabled>
}
 800c118:	bf00      	nop
 800c11a:	3708      	adds	r7, #8
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c12e:	4618      	mov	r0, r3
 800c130:	f7fe ff5d 	bl	800afee <USBH_LL_PortDisabled>
}
 800c134:	bf00      	nop
 800c136:	3708      	adds	r7, #8
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b082      	sub	sp, #8
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d12a      	bne.n	800c1a4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c14e:	4a18      	ldr	r2, [pc, #96]	; (800c1b0 <USBH_LL_Init+0x74>)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	4a15      	ldr	r2, [pc, #84]	; (800c1b0 <USBH_LL_Init+0x74>)
 800c15a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c15e:	4b14      	ldr	r3, [pc, #80]	; (800c1b0 <USBH_LL_Init+0x74>)
 800c160:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c164:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c166:	4b12      	ldr	r3, [pc, #72]	; (800c1b0 <USBH_LL_Init+0x74>)
 800c168:	2208      	movs	r2, #8
 800c16a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c16c:	4b10      	ldr	r3, [pc, #64]	; (800c1b0 <USBH_LL_Init+0x74>)
 800c16e:	2201      	movs	r2, #1
 800c170:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c172:	4b0f      	ldr	r3, [pc, #60]	; (800c1b0 <USBH_LL_Init+0x74>)
 800c174:	2200      	movs	r2, #0
 800c176:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c178:	4b0d      	ldr	r3, [pc, #52]	; (800c1b0 <USBH_LL_Init+0x74>)
 800c17a:	2202      	movs	r2, #2
 800c17c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c17e:	4b0c      	ldr	r3, [pc, #48]	; (800c1b0 <USBH_LL_Init+0x74>)
 800c180:	2200      	movs	r2, #0
 800c182:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c184:	480a      	ldr	r0, [pc, #40]	; (800c1b0 <USBH_LL_Init+0x74>)
 800c186:	f7f6 fe98 	bl	8002eba <HAL_HCD_Init>
 800c18a:	4603      	mov	r3, r0
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d001      	beq.n	800c194 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c190:	f7f5 fb74 	bl	800187c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c194:	4806      	ldr	r0, [pc, #24]	; (800c1b0 <USBH_LL_Init+0x74>)
 800c196:	f7f7 faf9 	bl	800378c <HAL_HCD_GetCurrentFrame>
 800c19a:	4603      	mov	r3, r0
 800c19c:	4619      	mov	r1, r3
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f7fe fede 	bl	800af60 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c1a4:	2300      	movs	r3, #0
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3708      	adds	r7, #8
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	20000b58 	.word	0x20000b58

0800c1b4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7f7 fa66 	bl	800369c <HAL_HCD_Start>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c1d4:	7bfb      	ldrb	r3, [r7, #15]
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f000 f95e 	bl	800c498 <USBH_Get_USB_Status>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3710      	adds	r7, #16
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c1ea:	b580      	push	{r7, lr}
 800c1ec:	b084      	sub	sp, #16
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c200:	4618      	mov	r0, r3
 800c202:	f7f7 fa6e 	bl	80036e2 <HAL_HCD_Stop>
 800c206:	4603      	mov	r3, r0
 800c208:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c20a:	7bfb      	ldrb	r3, [r7, #15]
 800c20c:	4618      	mov	r0, r3
 800c20e:	f000 f943 	bl	800c498 <USBH_Get_USB_Status>
 800c212:	4603      	mov	r3, r0
 800c214:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c216:	7bbb      	ldrb	r3, [r7, #14]
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3710      	adds	r7, #16
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b084      	sub	sp, #16
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c228:	2301      	movs	r3, #1
 800c22a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c232:	4618      	mov	r0, r3
 800c234:	f7f7 fab8 	bl	80037a8 <HAL_HCD_GetCurrentSpeed>
 800c238:	4603      	mov	r3, r0
 800c23a:	2b02      	cmp	r3, #2
 800c23c:	d00c      	beq.n	800c258 <USBH_LL_GetSpeed+0x38>
 800c23e:	2b02      	cmp	r3, #2
 800c240:	d80d      	bhi.n	800c25e <USBH_LL_GetSpeed+0x3e>
 800c242:	2b00      	cmp	r3, #0
 800c244:	d002      	beq.n	800c24c <USBH_LL_GetSpeed+0x2c>
 800c246:	2b01      	cmp	r3, #1
 800c248:	d003      	beq.n	800c252 <USBH_LL_GetSpeed+0x32>
 800c24a:	e008      	b.n	800c25e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c24c:	2300      	movs	r3, #0
 800c24e:	73fb      	strb	r3, [r7, #15]
    break;
 800c250:	e008      	b.n	800c264 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c252:	2301      	movs	r3, #1
 800c254:	73fb      	strb	r3, [r7, #15]
    break;
 800c256:	e005      	b.n	800c264 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c258:	2302      	movs	r3, #2
 800c25a:	73fb      	strb	r3, [r7, #15]
    break;
 800c25c:	e002      	b.n	800c264 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c25e:	2301      	movs	r3, #1
 800c260:	73fb      	strb	r3, [r7, #15]
    break;
 800c262:	bf00      	nop
  }
  return  speed;
 800c264:	7bfb      	ldrb	r3, [r7, #15]
}
 800c266:	4618      	mov	r0, r3
 800c268:	3710      	adds	r7, #16
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c26e:	b580      	push	{r7, lr}
 800c270:	b084      	sub	sp, #16
 800c272:	af00      	add	r7, sp, #0
 800c274:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c276:	2300      	movs	r3, #0
 800c278:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c27a:	2300      	movs	r3, #0
 800c27c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c284:	4618      	mov	r0, r3
 800c286:	f7f7 fa49 	bl	800371c <HAL_HCD_ResetPort>
 800c28a:	4603      	mov	r3, r0
 800c28c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c28e:	7bfb      	ldrb	r3, [r7, #15]
 800c290:	4618      	mov	r0, r3
 800c292:	f000 f901 	bl	800c498 <USBH_Get_USB_Status>
 800c296:	4603      	mov	r3, r0
 800c298:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c29a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3710      	adds	r7, #16
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b082      	sub	sp, #8
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c2b6:	78fa      	ldrb	r2, [r7, #3]
 800c2b8:	4611      	mov	r1, r2
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7f7 fa51 	bl	8003762 <HAL_HCD_HC_GetXferCount>
 800c2c0:	4603      	mov	r3, r0
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3708      	adds	r7, #8
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c2ca:	b590      	push	{r4, r7, lr}
 800c2cc:	b089      	sub	sp, #36	; 0x24
 800c2ce:	af04      	add	r7, sp, #16
 800c2d0:	6078      	str	r0, [r7, #4]
 800c2d2:	4608      	mov	r0, r1
 800c2d4:	4611      	mov	r1, r2
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	4603      	mov	r3, r0
 800c2da:	70fb      	strb	r3, [r7, #3]
 800c2dc:	460b      	mov	r3, r1
 800c2de:	70bb      	strb	r3, [r7, #2]
 800c2e0:	4613      	mov	r3, r2
 800c2e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c2f2:	787c      	ldrb	r4, [r7, #1]
 800c2f4:	78ba      	ldrb	r2, [r7, #2]
 800c2f6:	78f9      	ldrb	r1, [r7, #3]
 800c2f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c2fa:	9302      	str	r3, [sp, #8]
 800c2fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c300:	9301      	str	r3, [sp, #4]
 800c302:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c306:	9300      	str	r3, [sp, #0]
 800c308:	4623      	mov	r3, r4
 800c30a:	f7f6 fe3d 	bl	8002f88 <HAL_HCD_HC_Init>
 800c30e:	4603      	mov	r3, r0
 800c310:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c312:	7bfb      	ldrb	r3, [r7, #15]
 800c314:	4618      	mov	r0, r3
 800c316:	f000 f8bf 	bl	800c498 <USBH_Get_USB_Status>
 800c31a:	4603      	mov	r3, r0
 800c31c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c31e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c320:	4618      	mov	r0, r3
 800c322:	3714      	adds	r7, #20
 800c324:	46bd      	mov	sp, r7
 800c326:	bd90      	pop	{r4, r7, pc}

0800c328 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b084      	sub	sp, #16
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	460b      	mov	r3, r1
 800c332:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c334:	2300      	movs	r3, #0
 800c336:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c338:	2300      	movs	r3, #0
 800c33a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c342:	78fa      	ldrb	r2, [r7, #3]
 800c344:	4611      	mov	r1, r2
 800c346:	4618      	mov	r0, r3
 800c348:	f7f6 fed6 	bl	80030f8 <HAL_HCD_HC_Halt>
 800c34c:	4603      	mov	r3, r0
 800c34e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c350:	7bfb      	ldrb	r3, [r7, #15]
 800c352:	4618      	mov	r0, r3
 800c354:	f000 f8a0 	bl	800c498 <USBH_Get_USB_Status>
 800c358:	4603      	mov	r3, r0
 800c35a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c35c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c366:	b590      	push	{r4, r7, lr}
 800c368:	b089      	sub	sp, #36	; 0x24
 800c36a:	af04      	add	r7, sp, #16
 800c36c:	6078      	str	r0, [r7, #4]
 800c36e:	4608      	mov	r0, r1
 800c370:	4611      	mov	r1, r2
 800c372:	461a      	mov	r2, r3
 800c374:	4603      	mov	r3, r0
 800c376:	70fb      	strb	r3, [r7, #3]
 800c378:	460b      	mov	r3, r1
 800c37a:	70bb      	strb	r3, [r7, #2]
 800c37c:	4613      	mov	r3, r2
 800c37e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c380:	2300      	movs	r3, #0
 800c382:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c384:	2300      	movs	r3, #0
 800c386:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c38e:	787c      	ldrb	r4, [r7, #1]
 800c390:	78ba      	ldrb	r2, [r7, #2]
 800c392:	78f9      	ldrb	r1, [r7, #3]
 800c394:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c398:	9303      	str	r3, [sp, #12]
 800c39a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c39c:	9302      	str	r3, [sp, #8]
 800c39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a0:	9301      	str	r3, [sp, #4]
 800c3a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3a6:	9300      	str	r3, [sp, #0]
 800c3a8:	4623      	mov	r3, r4
 800c3aa:	f7f6 fec9 	bl	8003140 <HAL_HCD_HC_SubmitRequest>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c3b2:	7bfb      	ldrb	r3, [r7, #15]
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f000 f86f 	bl	800c498 <USBH_Get_USB_Status>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3be:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3714      	adds	r7, #20
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd90      	pop	{r4, r7, pc}

0800c3c8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c3da:	78fa      	ldrb	r2, [r7, #3]
 800c3dc:	4611      	mov	r1, r2
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7f7 f9aa 	bl	8003738 <HAL_HCD_HC_GetURBState>
 800c3e4:	4603      	mov	r3, r0
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3708      	adds	r7, #8
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}

0800c3ee <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b082      	sub	sp, #8
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
 800c3f6:	460b      	mov	r3, r1
 800c3f8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c400:	2b01      	cmp	r3, #1
 800c402:	d103      	bne.n	800c40c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c404:	78fb      	ldrb	r3, [r7, #3]
 800c406:	4618      	mov	r0, r3
 800c408:	f000 f872 	bl	800c4f0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c40c:	20c8      	movs	r0, #200	; 0xc8
 800c40e:	f7f5 fe67 	bl	80020e0 <HAL_Delay>
  return USBH_OK;
 800c412:	2300      	movs	r3, #0
}
 800c414:	4618      	mov	r0, r3
 800c416:	3708      	adds	r7, #8
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b085      	sub	sp, #20
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	460b      	mov	r3, r1
 800c426:	70fb      	strb	r3, [r7, #3]
 800c428:	4613      	mov	r3, r2
 800c42a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c432:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c434:	78fa      	ldrb	r2, [r7, #3]
 800c436:	68f9      	ldr	r1, [r7, #12]
 800c438:	4613      	mov	r3, r2
 800c43a:	011b      	lsls	r3, r3, #4
 800c43c:	1a9b      	subs	r3, r3, r2
 800c43e:	009b      	lsls	r3, r3, #2
 800c440:	440b      	add	r3, r1
 800c442:	3317      	adds	r3, #23
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d00a      	beq.n	800c460 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c44a:	78fa      	ldrb	r2, [r7, #3]
 800c44c:	68f9      	ldr	r1, [r7, #12]
 800c44e:	4613      	mov	r3, r2
 800c450:	011b      	lsls	r3, r3, #4
 800c452:	1a9b      	subs	r3, r3, r2
 800c454:	009b      	lsls	r3, r3, #2
 800c456:	440b      	add	r3, r1
 800c458:	333c      	adds	r3, #60	; 0x3c
 800c45a:	78ba      	ldrb	r2, [r7, #2]
 800c45c:	701a      	strb	r2, [r3, #0]
 800c45e:	e009      	b.n	800c474 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c460:	78fa      	ldrb	r2, [r7, #3]
 800c462:	68f9      	ldr	r1, [r7, #12]
 800c464:	4613      	mov	r3, r2
 800c466:	011b      	lsls	r3, r3, #4
 800c468:	1a9b      	subs	r3, r3, r2
 800c46a:	009b      	lsls	r3, r3, #2
 800c46c:	440b      	add	r3, r1
 800c46e:	333d      	adds	r3, #61	; 0x3d
 800c470:	78ba      	ldrb	r2, [r7, #2]
 800c472:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c474:	2300      	movs	r3, #0
}
 800c476:	4618      	mov	r0, r3
 800c478:	3714      	adds	r7, #20
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr

0800c482 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c482:	b580      	push	{r7, lr}
 800c484:	b082      	sub	sp, #8
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f7f5 fe28 	bl	80020e0 <HAL_Delay>
}
 800c490:	bf00      	nop
 800c492:	3708      	adds	r7, #8
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c498:	b480      	push	{r7}
 800c49a:	b085      	sub	sp, #20
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	4603      	mov	r3, r0
 800c4a0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c4a6:	79fb      	ldrb	r3, [r7, #7]
 800c4a8:	2b03      	cmp	r3, #3
 800c4aa:	d817      	bhi.n	800c4dc <USBH_Get_USB_Status+0x44>
 800c4ac:	a201      	add	r2, pc, #4	; (adr r2, 800c4b4 <USBH_Get_USB_Status+0x1c>)
 800c4ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b2:	bf00      	nop
 800c4b4:	0800c4c5 	.word	0x0800c4c5
 800c4b8:	0800c4cb 	.word	0x0800c4cb
 800c4bc:	0800c4d1 	.word	0x0800c4d1
 800c4c0:	0800c4d7 	.word	0x0800c4d7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	73fb      	strb	r3, [r7, #15]
    break;
 800c4c8:	e00b      	b.n	800c4e2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c4ca:	2302      	movs	r3, #2
 800c4cc:	73fb      	strb	r3, [r7, #15]
    break;
 800c4ce:	e008      	b.n	800c4e2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	73fb      	strb	r3, [r7, #15]
    break;
 800c4d4:	e005      	b.n	800c4e2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c4d6:	2302      	movs	r3, #2
 800c4d8:	73fb      	strb	r3, [r7, #15]
    break;
 800c4da:	e002      	b.n	800c4e2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c4dc:	2302      	movs	r3, #2
 800c4de:	73fb      	strb	r3, [r7, #15]
    break;
 800c4e0:	bf00      	nop
  }
  return usb_status;
 800c4e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3714      	adds	r7, #20
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b084      	sub	sp, #16
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c4fa:	79fb      	ldrb	r3, [r7, #7]
 800c4fc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c4fe:	79fb      	ldrb	r3, [r7, #7]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d102      	bne.n	800c50a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c504:	2300      	movs	r3, #0
 800c506:	73fb      	strb	r3, [r7, #15]
 800c508:	e001      	b.n	800c50e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c50a:	2301      	movs	r3, #1
 800c50c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c50e:	7bfb      	ldrb	r3, [r7, #15]
 800c510:	461a      	mov	r2, r3
 800c512:	2101      	movs	r1, #1
 800c514:	4803      	ldr	r0, [pc, #12]	; (800c524 <MX_DriverVbusFS+0x34>)
 800c516:	f7f6 fcb7 	bl	8002e88 <HAL_GPIO_WritePin>
}
 800c51a:	bf00      	nop
 800c51c:	3710      	adds	r7, #16
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop
 800c524:	40020800 	.word	0x40020800

0800c528 <malloc>:
 800c528:	4b02      	ldr	r3, [pc, #8]	; (800c534 <malloc+0xc>)
 800c52a:	4601      	mov	r1, r0
 800c52c:	6818      	ldr	r0, [r3, #0]
 800c52e:	f000 b82b 	b.w	800c588 <_malloc_r>
 800c532:	bf00      	nop
 800c534:	20000084 	.word	0x20000084

0800c538 <free>:
 800c538:	4b02      	ldr	r3, [pc, #8]	; (800c544 <free+0xc>)
 800c53a:	4601      	mov	r1, r0
 800c53c:	6818      	ldr	r0, [r3, #0]
 800c53e:	f001 bfad 	b.w	800e49c <_free_r>
 800c542:	bf00      	nop
 800c544:	20000084 	.word	0x20000084

0800c548 <sbrk_aligned>:
 800c548:	b570      	push	{r4, r5, r6, lr}
 800c54a:	4e0e      	ldr	r6, [pc, #56]	; (800c584 <sbrk_aligned+0x3c>)
 800c54c:	460c      	mov	r4, r1
 800c54e:	6831      	ldr	r1, [r6, #0]
 800c550:	4605      	mov	r5, r0
 800c552:	b911      	cbnz	r1, 800c55a <sbrk_aligned+0x12>
 800c554:	f001 f8c4 	bl	800d6e0 <_sbrk_r>
 800c558:	6030      	str	r0, [r6, #0]
 800c55a:	4621      	mov	r1, r4
 800c55c:	4628      	mov	r0, r5
 800c55e:	f001 f8bf 	bl	800d6e0 <_sbrk_r>
 800c562:	1c43      	adds	r3, r0, #1
 800c564:	d00a      	beq.n	800c57c <sbrk_aligned+0x34>
 800c566:	1cc4      	adds	r4, r0, #3
 800c568:	f024 0403 	bic.w	r4, r4, #3
 800c56c:	42a0      	cmp	r0, r4
 800c56e:	d007      	beq.n	800c580 <sbrk_aligned+0x38>
 800c570:	1a21      	subs	r1, r4, r0
 800c572:	4628      	mov	r0, r5
 800c574:	f001 f8b4 	bl	800d6e0 <_sbrk_r>
 800c578:	3001      	adds	r0, #1
 800c57a:	d101      	bne.n	800c580 <sbrk_aligned+0x38>
 800c57c:	f04f 34ff 	mov.w	r4, #4294967295
 800c580:	4620      	mov	r0, r4
 800c582:	bd70      	pop	{r4, r5, r6, pc}
 800c584:	20000f3c 	.word	0x20000f3c

0800c588 <_malloc_r>:
 800c588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c58c:	1ccd      	adds	r5, r1, #3
 800c58e:	f025 0503 	bic.w	r5, r5, #3
 800c592:	3508      	adds	r5, #8
 800c594:	2d0c      	cmp	r5, #12
 800c596:	bf38      	it	cc
 800c598:	250c      	movcc	r5, #12
 800c59a:	2d00      	cmp	r5, #0
 800c59c:	4607      	mov	r7, r0
 800c59e:	db01      	blt.n	800c5a4 <_malloc_r+0x1c>
 800c5a0:	42a9      	cmp	r1, r5
 800c5a2:	d905      	bls.n	800c5b0 <_malloc_r+0x28>
 800c5a4:	230c      	movs	r3, #12
 800c5a6:	603b      	str	r3, [r7, #0]
 800c5a8:	2600      	movs	r6, #0
 800c5aa:	4630      	mov	r0, r6
 800c5ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c684 <_malloc_r+0xfc>
 800c5b4:	f000 f868 	bl	800c688 <__malloc_lock>
 800c5b8:	f8d8 3000 	ldr.w	r3, [r8]
 800c5bc:	461c      	mov	r4, r3
 800c5be:	bb5c      	cbnz	r4, 800c618 <_malloc_r+0x90>
 800c5c0:	4629      	mov	r1, r5
 800c5c2:	4638      	mov	r0, r7
 800c5c4:	f7ff ffc0 	bl	800c548 <sbrk_aligned>
 800c5c8:	1c43      	adds	r3, r0, #1
 800c5ca:	4604      	mov	r4, r0
 800c5cc:	d155      	bne.n	800c67a <_malloc_r+0xf2>
 800c5ce:	f8d8 4000 	ldr.w	r4, [r8]
 800c5d2:	4626      	mov	r6, r4
 800c5d4:	2e00      	cmp	r6, #0
 800c5d6:	d145      	bne.n	800c664 <_malloc_r+0xdc>
 800c5d8:	2c00      	cmp	r4, #0
 800c5da:	d048      	beq.n	800c66e <_malloc_r+0xe6>
 800c5dc:	6823      	ldr	r3, [r4, #0]
 800c5de:	4631      	mov	r1, r6
 800c5e0:	4638      	mov	r0, r7
 800c5e2:	eb04 0903 	add.w	r9, r4, r3
 800c5e6:	f001 f87b 	bl	800d6e0 <_sbrk_r>
 800c5ea:	4581      	cmp	r9, r0
 800c5ec:	d13f      	bne.n	800c66e <_malloc_r+0xe6>
 800c5ee:	6821      	ldr	r1, [r4, #0]
 800c5f0:	1a6d      	subs	r5, r5, r1
 800c5f2:	4629      	mov	r1, r5
 800c5f4:	4638      	mov	r0, r7
 800c5f6:	f7ff ffa7 	bl	800c548 <sbrk_aligned>
 800c5fa:	3001      	adds	r0, #1
 800c5fc:	d037      	beq.n	800c66e <_malloc_r+0xe6>
 800c5fe:	6823      	ldr	r3, [r4, #0]
 800c600:	442b      	add	r3, r5
 800c602:	6023      	str	r3, [r4, #0]
 800c604:	f8d8 3000 	ldr.w	r3, [r8]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d038      	beq.n	800c67e <_malloc_r+0xf6>
 800c60c:	685a      	ldr	r2, [r3, #4]
 800c60e:	42a2      	cmp	r2, r4
 800c610:	d12b      	bne.n	800c66a <_malloc_r+0xe2>
 800c612:	2200      	movs	r2, #0
 800c614:	605a      	str	r2, [r3, #4]
 800c616:	e00f      	b.n	800c638 <_malloc_r+0xb0>
 800c618:	6822      	ldr	r2, [r4, #0]
 800c61a:	1b52      	subs	r2, r2, r5
 800c61c:	d41f      	bmi.n	800c65e <_malloc_r+0xd6>
 800c61e:	2a0b      	cmp	r2, #11
 800c620:	d917      	bls.n	800c652 <_malloc_r+0xca>
 800c622:	1961      	adds	r1, r4, r5
 800c624:	42a3      	cmp	r3, r4
 800c626:	6025      	str	r5, [r4, #0]
 800c628:	bf18      	it	ne
 800c62a:	6059      	strne	r1, [r3, #4]
 800c62c:	6863      	ldr	r3, [r4, #4]
 800c62e:	bf08      	it	eq
 800c630:	f8c8 1000 	streq.w	r1, [r8]
 800c634:	5162      	str	r2, [r4, r5]
 800c636:	604b      	str	r3, [r1, #4]
 800c638:	4638      	mov	r0, r7
 800c63a:	f104 060b 	add.w	r6, r4, #11
 800c63e:	f000 f829 	bl	800c694 <__malloc_unlock>
 800c642:	f026 0607 	bic.w	r6, r6, #7
 800c646:	1d23      	adds	r3, r4, #4
 800c648:	1af2      	subs	r2, r6, r3
 800c64a:	d0ae      	beq.n	800c5aa <_malloc_r+0x22>
 800c64c:	1b9b      	subs	r3, r3, r6
 800c64e:	50a3      	str	r3, [r4, r2]
 800c650:	e7ab      	b.n	800c5aa <_malloc_r+0x22>
 800c652:	42a3      	cmp	r3, r4
 800c654:	6862      	ldr	r2, [r4, #4]
 800c656:	d1dd      	bne.n	800c614 <_malloc_r+0x8c>
 800c658:	f8c8 2000 	str.w	r2, [r8]
 800c65c:	e7ec      	b.n	800c638 <_malloc_r+0xb0>
 800c65e:	4623      	mov	r3, r4
 800c660:	6864      	ldr	r4, [r4, #4]
 800c662:	e7ac      	b.n	800c5be <_malloc_r+0x36>
 800c664:	4634      	mov	r4, r6
 800c666:	6876      	ldr	r6, [r6, #4]
 800c668:	e7b4      	b.n	800c5d4 <_malloc_r+0x4c>
 800c66a:	4613      	mov	r3, r2
 800c66c:	e7cc      	b.n	800c608 <_malloc_r+0x80>
 800c66e:	230c      	movs	r3, #12
 800c670:	603b      	str	r3, [r7, #0]
 800c672:	4638      	mov	r0, r7
 800c674:	f000 f80e 	bl	800c694 <__malloc_unlock>
 800c678:	e797      	b.n	800c5aa <_malloc_r+0x22>
 800c67a:	6025      	str	r5, [r4, #0]
 800c67c:	e7dc      	b.n	800c638 <_malloc_r+0xb0>
 800c67e:	605b      	str	r3, [r3, #4]
 800c680:	deff      	udf	#255	; 0xff
 800c682:	bf00      	nop
 800c684:	20000f38 	.word	0x20000f38

0800c688 <__malloc_lock>:
 800c688:	4801      	ldr	r0, [pc, #4]	; (800c690 <__malloc_lock+0x8>)
 800c68a:	f001 b876 	b.w	800d77a <__retarget_lock_acquire_recursive>
 800c68e:	bf00      	nop
 800c690:	20001080 	.word	0x20001080

0800c694 <__malloc_unlock>:
 800c694:	4801      	ldr	r0, [pc, #4]	; (800c69c <__malloc_unlock+0x8>)
 800c696:	f001 b871 	b.w	800d77c <__retarget_lock_release_recursive>
 800c69a:	bf00      	nop
 800c69c:	20001080 	.word	0x20001080

0800c6a0 <__cvt>:
 800c6a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6a4:	ec55 4b10 	vmov	r4, r5, d0
 800c6a8:	2d00      	cmp	r5, #0
 800c6aa:	460e      	mov	r6, r1
 800c6ac:	4619      	mov	r1, r3
 800c6ae:	462b      	mov	r3, r5
 800c6b0:	bfbb      	ittet	lt
 800c6b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c6b6:	461d      	movlt	r5, r3
 800c6b8:	2300      	movge	r3, #0
 800c6ba:	232d      	movlt	r3, #45	; 0x2d
 800c6bc:	700b      	strb	r3, [r1, #0]
 800c6be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c6c4:	4691      	mov	r9, r2
 800c6c6:	f023 0820 	bic.w	r8, r3, #32
 800c6ca:	bfbc      	itt	lt
 800c6cc:	4622      	movlt	r2, r4
 800c6ce:	4614      	movlt	r4, r2
 800c6d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c6d4:	d005      	beq.n	800c6e2 <__cvt+0x42>
 800c6d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c6da:	d100      	bne.n	800c6de <__cvt+0x3e>
 800c6dc:	3601      	adds	r6, #1
 800c6de:	2102      	movs	r1, #2
 800c6e0:	e000      	b.n	800c6e4 <__cvt+0x44>
 800c6e2:	2103      	movs	r1, #3
 800c6e4:	ab03      	add	r3, sp, #12
 800c6e6:	9301      	str	r3, [sp, #4]
 800c6e8:	ab02      	add	r3, sp, #8
 800c6ea:	9300      	str	r3, [sp, #0]
 800c6ec:	ec45 4b10 	vmov	d0, r4, r5
 800c6f0:	4653      	mov	r3, sl
 800c6f2:	4632      	mov	r2, r6
 800c6f4:	f001 f8e0 	bl	800d8b8 <_dtoa_r>
 800c6f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c6fc:	4607      	mov	r7, r0
 800c6fe:	d102      	bne.n	800c706 <__cvt+0x66>
 800c700:	f019 0f01 	tst.w	r9, #1
 800c704:	d022      	beq.n	800c74c <__cvt+0xac>
 800c706:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c70a:	eb07 0906 	add.w	r9, r7, r6
 800c70e:	d110      	bne.n	800c732 <__cvt+0x92>
 800c710:	783b      	ldrb	r3, [r7, #0]
 800c712:	2b30      	cmp	r3, #48	; 0x30
 800c714:	d10a      	bne.n	800c72c <__cvt+0x8c>
 800c716:	2200      	movs	r2, #0
 800c718:	2300      	movs	r3, #0
 800c71a:	4620      	mov	r0, r4
 800c71c:	4629      	mov	r1, r5
 800c71e:	f7f4 f9d3 	bl	8000ac8 <__aeabi_dcmpeq>
 800c722:	b918      	cbnz	r0, 800c72c <__cvt+0x8c>
 800c724:	f1c6 0601 	rsb	r6, r6, #1
 800c728:	f8ca 6000 	str.w	r6, [sl]
 800c72c:	f8da 3000 	ldr.w	r3, [sl]
 800c730:	4499      	add	r9, r3
 800c732:	2200      	movs	r2, #0
 800c734:	2300      	movs	r3, #0
 800c736:	4620      	mov	r0, r4
 800c738:	4629      	mov	r1, r5
 800c73a:	f7f4 f9c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800c73e:	b108      	cbz	r0, 800c744 <__cvt+0xa4>
 800c740:	f8cd 900c 	str.w	r9, [sp, #12]
 800c744:	2230      	movs	r2, #48	; 0x30
 800c746:	9b03      	ldr	r3, [sp, #12]
 800c748:	454b      	cmp	r3, r9
 800c74a:	d307      	bcc.n	800c75c <__cvt+0xbc>
 800c74c:	9b03      	ldr	r3, [sp, #12]
 800c74e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c750:	1bdb      	subs	r3, r3, r7
 800c752:	4638      	mov	r0, r7
 800c754:	6013      	str	r3, [r2, #0]
 800c756:	b004      	add	sp, #16
 800c758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c75c:	1c59      	adds	r1, r3, #1
 800c75e:	9103      	str	r1, [sp, #12]
 800c760:	701a      	strb	r2, [r3, #0]
 800c762:	e7f0      	b.n	800c746 <__cvt+0xa6>

0800c764 <__exponent>:
 800c764:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c766:	4603      	mov	r3, r0
 800c768:	2900      	cmp	r1, #0
 800c76a:	bfb8      	it	lt
 800c76c:	4249      	neglt	r1, r1
 800c76e:	f803 2b02 	strb.w	r2, [r3], #2
 800c772:	bfb4      	ite	lt
 800c774:	222d      	movlt	r2, #45	; 0x2d
 800c776:	222b      	movge	r2, #43	; 0x2b
 800c778:	2909      	cmp	r1, #9
 800c77a:	7042      	strb	r2, [r0, #1]
 800c77c:	dd2a      	ble.n	800c7d4 <__exponent+0x70>
 800c77e:	f10d 0207 	add.w	r2, sp, #7
 800c782:	4617      	mov	r7, r2
 800c784:	260a      	movs	r6, #10
 800c786:	4694      	mov	ip, r2
 800c788:	fb91 f5f6 	sdiv	r5, r1, r6
 800c78c:	fb06 1415 	mls	r4, r6, r5, r1
 800c790:	3430      	adds	r4, #48	; 0x30
 800c792:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c796:	460c      	mov	r4, r1
 800c798:	2c63      	cmp	r4, #99	; 0x63
 800c79a:	f102 32ff 	add.w	r2, r2, #4294967295
 800c79e:	4629      	mov	r1, r5
 800c7a0:	dcf1      	bgt.n	800c786 <__exponent+0x22>
 800c7a2:	3130      	adds	r1, #48	; 0x30
 800c7a4:	f1ac 0402 	sub.w	r4, ip, #2
 800c7a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c7ac:	1c41      	adds	r1, r0, #1
 800c7ae:	4622      	mov	r2, r4
 800c7b0:	42ba      	cmp	r2, r7
 800c7b2:	d30a      	bcc.n	800c7ca <__exponent+0x66>
 800c7b4:	f10d 0209 	add.w	r2, sp, #9
 800c7b8:	eba2 020c 	sub.w	r2, r2, ip
 800c7bc:	42bc      	cmp	r4, r7
 800c7be:	bf88      	it	hi
 800c7c0:	2200      	movhi	r2, #0
 800c7c2:	4413      	add	r3, r2
 800c7c4:	1a18      	subs	r0, r3, r0
 800c7c6:	b003      	add	sp, #12
 800c7c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7ca:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c7ce:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c7d2:	e7ed      	b.n	800c7b0 <__exponent+0x4c>
 800c7d4:	2330      	movs	r3, #48	; 0x30
 800c7d6:	3130      	adds	r1, #48	; 0x30
 800c7d8:	7083      	strb	r3, [r0, #2]
 800c7da:	70c1      	strb	r1, [r0, #3]
 800c7dc:	1d03      	adds	r3, r0, #4
 800c7de:	e7f1      	b.n	800c7c4 <__exponent+0x60>

0800c7e0 <_printf_float>:
 800c7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7e4:	ed2d 8b02 	vpush	{d8}
 800c7e8:	b08d      	sub	sp, #52	; 0x34
 800c7ea:	460c      	mov	r4, r1
 800c7ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c7f0:	4616      	mov	r6, r2
 800c7f2:	461f      	mov	r7, r3
 800c7f4:	4605      	mov	r5, r0
 800c7f6:	f000 ff3b 	bl	800d670 <_localeconv_r>
 800c7fa:	f8d0 a000 	ldr.w	sl, [r0]
 800c7fe:	4650      	mov	r0, sl
 800c800:	f7f3 fd36 	bl	8000270 <strlen>
 800c804:	2300      	movs	r3, #0
 800c806:	930a      	str	r3, [sp, #40]	; 0x28
 800c808:	6823      	ldr	r3, [r4, #0]
 800c80a:	9305      	str	r3, [sp, #20]
 800c80c:	f8d8 3000 	ldr.w	r3, [r8]
 800c810:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c814:	3307      	adds	r3, #7
 800c816:	f023 0307 	bic.w	r3, r3, #7
 800c81a:	f103 0208 	add.w	r2, r3, #8
 800c81e:	f8c8 2000 	str.w	r2, [r8]
 800c822:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c826:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c82a:	9307      	str	r3, [sp, #28]
 800c82c:	f8cd 8018 	str.w	r8, [sp, #24]
 800c830:	ee08 0a10 	vmov	s16, r0
 800c834:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c838:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c83c:	4b9e      	ldr	r3, [pc, #632]	; (800cab8 <_printf_float+0x2d8>)
 800c83e:	f04f 32ff 	mov.w	r2, #4294967295
 800c842:	f7f4 f973 	bl	8000b2c <__aeabi_dcmpun>
 800c846:	bb88      	cbnz	r0, 800c8ac <_printf_float+0xcc>
 800c848:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c84c:	4b9a      	ldr	r3, [pc, #616]	; (800cab8 <_printf_float+0x2d8>)
 800c84e:	f04f 32ff 	mov.w	r2, #4294967295
 800c852:	f7f4 f94d 	bl	8000af0 <__aeabi_dcmple>
 800c856:	bb48      	cbnz	r0, 800c8ac <_printf_float+0xcc>
 800c858:	2200      	movs	r2, #0
 800c85a:	2300      	movs	r3, #0
 800c85c:	4640      	mov	r0, r8
 800c85e:	4649      	mov	r1, r9
 800c860:	f7f4 f93c 	bl	8000adc <__aeabi_dcmplt>
 800c864:	b110      	cbz	r0, 800c86c <_printf_float+0x8c>
 800c866:	232d      	movs	r3, #45	; 0x2d
 800c868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c86c:	4a93      	ldr	r2, [pc, #588]	; (800cabc <_printf_float+0x2dc>)
 800c86e:	4b94      	ldr	r3, [pc, #592]	; (800cac0 <_printf_float+0x2e0>)
 800c870:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c874:	bf94      	ite	ls
 800c876:	4690      	movls	r8, r2
 800c878:	4698      	movhi	r8, r3
 800c87a:	2303      	movs	r3, #3
 800c87c:	6123      	str	r3, [r4, #16]
 800c87e:	9b05      	ldr	r3, [sp, #20]
 800c880:	f023 0304 	bic.w	r3, r3, #4
 800c884:	6023      	str	r3, [r4, #0]
 800c886:	f04f 0900 	mov.w	r9, #0
 800c88a:	9700      	str	r7, [sp, #0]
 800c88c:	4633      	mov	r3, r6
 800c88e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c890:	4621      	mov	r1, r4
 800c892:	4628      	mov	r0, r5
 800c894:	f000 f9da 	bl	800cc4c <_printf_common>
 800c898:	3001      	adds	r0, #1
 800c89a:	f040 8090 	bne.w	800c9be <_printf_float+0x1de>
 800c89e:	f04f 30ff 	mov.w	r0, #4294967295
 800c8a2:	b00d      	add	sp, #52	; 0x34
 800c8a4:	ecbd 8b02 	vpop	{d8}
 800c8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ac:	4642      	mov	r2, r8
 800c8ae:	464b      	mov	r3, r9
 800c8b0:	4640      	mov	r0, r8
 800c8b2:	4649      	mov	r1, r9
 800c8b4:	f7f4 f93a 	bl	8000b2c <__aeabi_dcmpun>
 800c8b8:	b140      	cbz	r0, 800c8cc <_printf_float+0xec>
 800c8ba:	464b      	mov	r3, r9
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	bfbc      	itt	lt
 800c8c0:	232d      	movlt	r3, #45	; 0x2d
 800c8c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c8c6:	4a7f      	ldr	r2, [pc, #508]	; (800cac4 <_printf_float+0x2e4>)
 800c8c8:	4b7f      	ldr	r3, [pc, #508]	; (800cac8 <_printf_float+0x2e8>)
 800c8ca:	e7d1      	b.n	800c870 <_printf_float+0x90>
 800c8cc:	6863      	ldr	r3, [r4, #4]
 800c8ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c8d2:	9206      	str	r2, [sp, #24]
 800c8d4:	1c5a      	adds	r2, r3, #1
 800c8d6:	d13f      	bne.n	800c958 <_printf_float+0x178>
 800c8d8:	2306      	movs	r3, #6
 800c8da:	6063      	str	r3, [r4, #4]
 800c8dc:	9b05      	ldr	r3, [sp, #20]
 800c8de:	6861      	ldr	r1, [r4, #4]
 800c8e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	9303      	str	r3, [sp, #12]
 800c8e8:	ab0a      	add	r3, sp, #40	; 0x28
 800c8ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c8ee:	ab09      	add	r3, sp, #36	; 0x24
 800c8f0:	ec49 8b10 	vmov	d0, r8, r9
 800c8f4:	9300      	str	r3, [sp, #0]
 800c8f6:	6022      	str	r2, [r4, #0]
 800c8f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c8fc:	4628      	mov	r0, r5
 800c8fe:	f7ff fecf 	bl	800c6a0 <__cvt>
 800c902:	9b06      	ldr	r3, [sp, #24]
 800c904:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c906:	2b47      	cmp	r3, #71	; 0x47
 800c908:	4680      	mov	r8, r0
 800c90a:	d108      	bne.n	800c91e <_printf_float+0x13e>
 800c90c:	1cc8      	adds	r0, r1, #3
 800c90e:	db02      	blt.n	800c916 <_printf_float+0x136>
 800c910:	6863      	ldr	r3, [r4, #4]
 800c912:	4299      	cmp	r1, r3
 800c914:	dd41      	ble.n	800c99a <_printf_float+0x1ba>
 800c916:	f1ab 0302 	sub.w	r3, fp, #2
 800c91a:	fa5f fb83 	uxtb.w	fp, r3
 800c91e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c922:	d820      	bhi.n	800c966 <_printf_float+0x186>
 800c924:	3901      	subs	r1, #1
 800c926:	465a      	mov	r2, fp
 800c928:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c92c:	9109      	str	r1, [sp, #36]	; 0x24
 800c92e:	f7ff ff19 	bl	800c764 <__exponent>
 800c932:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c934:	1813      	adds	r3, r2, r0
 800c936:	2a01      	cmp	r2, #1
 800c938:	4681      	mov	r9, r0
 800c93a:	6123      	str	r3, [r4, #16]
 800c93c:	dc02      	bgt.n	800c944 <_printf_float+0x164>
 800c93e:	6822      	ldr	r2, [r4, #0]
 800c940:	07d2      	lsls	r2, r2, #31
 800c942:	d501      	bpl.n	800c948 <_printf_float+0x168>
 800c944:	3301      	adds	r3, #1
 800c946:	6123      	str	r3, [r4, #16]
 800c948:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d09c      	beq.n	800c88a <_printf_float+0xaa>
 800c950:	232d      	movs	r3, #45	; 0x2d
 800c952:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c956:	e798      	b.n	800c88a <_printf_float+0xaa>
 800c958:	9a06      	ldr	r2, [sp, #24]
 800c95a:	2a47      	cmp	r2, #71	; 0x47
 800c95c:	d1be      	bne.n	800c8dc <_printf_float+0xfc>
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d1bc      	bne.n	800c8dc <_printf_float+0xfc>
 800c962:	2301      	movs	r3, #1
 800c964:	e7b9      	b.n	800c8da <_printf_float+0xfa>
 800c966:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c96a:	d118      	bne.n	800c99e <_printf_float+0x1be>
 800c96c:	2900      	cmp	r1, #0
 800c96e:	6863      	ldr	r3, [r4, #4]
 800c970:	dd0b      	ble.n	800c98a <_printf_float+0x1aa>
 800c972:	6121      	str	r1, [r4, #16]
 800c974:	b913      	cbnz	r3, 800c97c <_printf_float+0x19c>
 800c976:	6822      	ldr	r2, [r4, #0]
 800c978:	07d0      	lsls	r0, r2, #31
 800c97a:	d502      	bpl.n	800c982 <_printf_float+0x1a2>
 800c97c:	3301      	adds	r3, #1
 800c97e:	440b      	add	r3, r1
 800c980:	6123      	str	r3, [r4, #16]
 800c982:	65a1      	str	r1, [r4, #88]	; 0x58
 800c984:	f04f 0900 	mov.w	r9, #0
 800c988:	e7de      	b.n	800c948 <_printf_float+0x168>
 800c98a:	b913      	cbnz	r3, 800c992 <_printf_float+0x1b2>
 800c98c:	6822      	ldr	r2, [r4, #0]
 800c98e:	07d2      	lsls	r2, r2, #31
 800c990:	d501      	bpl.n	800c996 <_printf_float+0x1b6>
 800c992:	3302      	adds	r3, #2
 800c994:	e7f4      	b.n	800c980 <_printf_float+0x1a0>
 800c996:	2301      	movs	r3, #1
 800c998:	e7f2      	b.n	800c980 <_printf_float+0x1a0>
 800c99a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c99e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9a0:	4299      	cmp	r1, r3
 800c9a2:	db05      	blt.n	800c9b0 <_printf_float+0x1d0>
 800c9a4:	6823      	ldr	r3, [r4, #0]
 800c9a6:	6121      	str	r1, [r4, #16]
 800c9a8:	07d8      	lsls	r0, r3, #31
 800c9aa:	d5ea      	bpl.n	800c982 <_printf_float+0x1a2>
 800c9ac:	1c4b      	adds	r3, r1, #1
 800c9ae:	e7e7      	b.n	800c980 <_printf_float+0x1a0>
 800c9b0:	2900      	cmp	r1, #0
 800c9b2:	bfd4      	ite	le
 800c9b4:	f1c1 0202 	rsble	r2, r1, #2
 800c9b8:	2201      	movgt	r2, #1
 800c9ba:	4413      	add	r3, r2
 800c9bc:	e7e0      	b.n	800c980 <_printf_float+0x1a0>
 800c9be:	6823      	ldr	r3, [r4, #0]
 800c9c0:	055a      	lsls	r2, r3, #21
 800c9c2:	d407      	bmi.n	800c9d4 <_printf_float+0x1f4>
 800c9c4:	6923      	ldr	r3, [r4, #16]
 800c9c6:	4642      	mov	r2, r8
 800c9c8:	4631      	mov	r1, r6
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	47b8      	blx	r7
 800c9ce:	3001      	adds	r0, #1
 800c9d0:	d12c      	bne.n	800ca2c <_printf_float+0x24c>
 800c9d2:	e764      	b.n	800c89e <_printf_float+0xbe>
 800c9d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c9d8:	f240 80e0 	bls.w	800cb9c <_printf_float+0x3bc>
 800c9dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	f7f4 f870 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9e8:	2800      	cmp	r0, #0
 800c9ea:	d034      	beq.n	800ca56 <_printf_float+0x276>
 800c9ec:	4a37      	ldr	r2, [pc, #220]	; (800cacc <_printf_float+0x2ec>)
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	4631      	mov	r1, r6
 800c9f2:	4628      	mov	r0, r5
 800c9f4:	47b8      	blx	r7
 800c9f6:	3001      	adds	r0, #1
 800c9f8:	f43f af51 	beq.w	800c89e <_printf_float+0xbe>
 800c9fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca00:	429a      	cmp	r2, r3
 800ca02:	db02      	blt.n	800ca0a <_printf_float+0x22a>
 800ca04:	6823      	ldr	r3, [r4, #0]
 800ca06:	07d8      	lsls	r0, r3, #31
 800ca08:	d510      	bpl.n	800ca2c <_printf_float+0x24c>
 800ca0a:	ee18 3a10 	vmov	r3, s16
 800ca0e:	4652      	mov	r2, sl
 800ca10:	4631      	mov	r1, r6
 800ca12:	4628      	mov	r0, r5
 800ca14:	47b8      	blx	r7
 800ca16:	3001      	adds	r0, #1
 800ca18:	f43f af41 	beq.w	800c89e <_printf_float+0xbe>
 800ca1c:	f04f 0800 	mov.w	r8, #0
 800ca20:	f104 091a 	add.w	r9, r4, #26
 800ca24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca26:	3b01      	subs	r3, #1
 800ca28:	4543      	cmp	r3, r8
 800ca2a:	dc09      	bgt.n	800ca40 <_printf_float+0x260>
 800ca2c:	6823      	ldr	r3, [r4, #0]
 800ca2e:	079b      	lsls	r3, r3, #30
 800ca30:	f100 8107 	bmi.w	800cc42 <_printf_float+0x462>
 800ca34:	68e0      	ldr	r0, [r4, #12]
 800ca36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca38:	4298      	cmp	r0, r3
 800ca3a:	bfb8      	it	lt
 800ca3c:	4618      	movlt	r0, r3
 800ca3e:	e730      	b.n	800c8a2 <_printf_float+0xc2>
 800ca40:	2301      	movs	r3, #1
 800ca42:	464a      	mov	r2, r9
 800ca44:	4631      	mov	r1, r6
 800ca46:	4628      	mov	r0, r5
 800ca48:	47b8      	blx	r7
 800ca4a:	3001      	adds	r0, #1
 800ca4c:	f43f af27 	beq.w	800c89e <_printf_float+0xbe>
 800ca50:	f108 0801 	add.w	r8, r8, #1
 800ca54:	e7e6      	b.n	800ca24 <_printf_float+0x244>
 800ca56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	dc39      	bgt.n	800cad0 <_printf_float+0x2f0>
 800ca5c:	4a1b      	ldr	r2, [pc, #108]	; (800cacc <_printf_float+0x2ec>)
 800ca5e:	2301      	movs	r3, #1
 800ca60:	4631      	mov	r1, r6
 800ca62:	4628      	mov	r0, r5
 800ca64:	47b8      	blx	r7
 800ca66:	3001      	adds	r0, #1
 800ca68:	f43f af19 	beq.w	800c89e <_printf_float+0xbe>
 800ca6c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ca70:	4313      	orrs	r3, r2
 800ca72:	d102      	bne.n	800ca7a <_printf_float+0x29a>
 800ca74:	6823      	ldr	r3, [r4, #0]
 800ca76:	07d9      	lsls	r1, r3, #31
 800ca78:	d5d8      	bpl.n	800ca2c <_printf_float+0x24c>
 800ca7a:	ee18 3a10 	vmov	r3, s16
 800ca7e:	4652      	mov	r2, sl
 800ca80:	4631      	mov	r1, r6
 800ca82:	4628      	mov	r0, r5
 800ca84:	47b8      	blx	r7
 800ca86:	3001      	adds	r0, #1
 800ca88:	f43f af09 	beq.w	800c89e <_printf_float+0xbe>
 800ca8c:	f04f 0900 	mov.w	r9, #0
 800ca90:	f104 0a1a 	add.w	sl, r4, #26
 800ca94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca96:	425b      	negs	r3, r3
 800ca98:	454b      	cmp	r3, r9
 800ca9a:	dc01      	bgt.n	800caa0 <_printf_float+0x2c0>
 800ca9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca9e:	e792      	b.n	800c9c6 <_printf_float+0x1e6>
 800caa0:	2301      	movs	r3, #1
 800caa2:	4652      	mov	r2, sl
 800caa4:	4631      	mov	r1, r6
 800caa6:	4628      	mov	r0, r5
 800caa8:	47b8      	blx	r7
 800caaa:	3001      	adds	r0, #1
 800caac:	f43f aef7 	beq.w	800c89e <_printf_float+0xbe>
 800cab0:	f109 0901 	add.w	r9, r9, #1
 800cab4:	e7ee      	b.n	800ca94 <_printf_float+0x2b4>
 800cab6:	bf00      	nop
 800cab8:	7fefffff 	.word	0x7fefffff
 800cabc:	08011614 	.word	0x08011614
 800cac0:	08011618 	.word	0x08011618
 800cac4:	0801161c 	.word	0x0801161c
 800cac8:	08011620 	.word	0x08011620
 800cacc:	080119b0 	.word	0x080119b0
 800cad0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cad2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cad4:	429a      	cmp	r2, r3
 800cad6:	bfa8      	it	ge
 800cad8:	461a      	movge	r2, r3
 800cada:	2a00      	cmp	r2, #0
 800cadc:	4691      	mov	r9, r2
 800cade:	dc37      	bgt.n	800cb50 <_printf_float+0x370>
 800cae0:	f04f 0b00 	mov.w	fp, #0
 800cae4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cae8:	f104 021a 	add.w	r2, r4, #26
 800caec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800caee:	9305      	str	r3, [sp, #20]
 800caf0:	eba3 0309 	sub.w	r3, r3, r9
 800caf4:	455b      	cmp	r3, fp
 800caf6:	dc33      	bgt.n	800cb60 <_printf_float+0x380>
 800caf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cafc:	429a      	cmp	r2, r3
 800cafe:	db3b      	blt.n	800cb78 <_printf_float+0x398>
 800cb00:	6823      	ldr	r3, [r4, #0]
 800cb02:	07da      	lsls	r2, r3, #31
 800cb04:	d438      	bmi.n	800cb78 <_printf_float+0x398>
 800cb06:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cb0a:	eba2 0903 	sub.w	r9, r2, r3
 800cb0e:	9b05      	ldr	r3, [sp, #20]
 800cb10:	1ad2      	subs	r2, r2, r3
 800cb12:	4591      	cmp	r9, r2
 800cb14:	bfa8      	it	ge
 800cb16:	4691      	movge	r9, r2
 800cb18:	f1b9 0f00 	cmp.w	r9, #0
 800cb1c:	dc35      	bgt.n	800cb8a <_printf_float+0x3aa>
 800cb1e:	f04f 0800 	mov.w	r8, #0
 800cb22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb26:	f104 0a1a 	add.w	sl, r4, #26
 800cb2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb2e:	1a9b      	subs	r3, r3, r2
 800cb30:	eba3 0309 	sub.w	r3, r3, r9
 800cb34:	4543      	cmp	r3, r8
 800cb36:	f77f af79 	ble.w	800ca2c <_printf_float+0x24c>
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	4652      	mov	r2, sl
 800cb3e:	4631      	mov	r1, r6
 800cb40:	4628      	mov	r0, r5
 800cb42:	47b8      	blx	r7
 800cb44:	3001      	adds	r0, #1
 800cb46:	f43f aeaa 	beq.w	800c89e <_printf_float+0xbe>
 800cb4a:	f108 0801 	add.w	r8, r8, #1
 800cb4e:	e7ec      	b.n	800cb2a <_printf_float+0x34a>
 800cb50:	4613      	mov	r3, r2
 800cb52:	4631      	mov	r1, r6
 800cb54:	4642      	mov	r2, r8
 800cb56:	4628      	mov	r0, r5
 800cb58:	47b8      	blx	r7
 800cb5a:	3001      	adds	r0, #1
 800cb5c:	d1c0      	bne.n	800cae0 <_printf_float+0x300>
 800cb5e:	e69e      	b.n	800c89e <_printf_float+0xbe>
 800cb60:	2301      	movs	r3, #1
 800cb62:	4631      	mov	r1, r6
 800cb64:	4628      	mov	r0, r5
 800cb66:	9205      	str	r2, [sp, #20]
 800cb68:	47b8      	blx	r7
 800cb6a:	3001      	adds	r0, #1
 800cb6c:	f43f ae97 	beq.w	800c89e <_printf_float+0xbe>
 800cb70:	9a05      	ldr	r2, [sp, #20]
 800cb72:	f10b 0b01 	add.w	fp, fp, #1
 800cb76:	e7b9      	b.n	800caec <_printf_float+0x30c>
 800cb78:	ee18 3a10 	vmov	r3, s16
 800cb7c:	4652      	mov	r2, sl
 800cb7e:	4631      	mov	r1, r6
 800cb80:	4628      	mov	r0, r5
 800cb82:	47b8      	blx	r7
 800cb84:	3001      	adds	r0, #1
 800cb86:	d1be      	bne.n	800cb06 <_printf_float+0x326>
 800cb88:	e689      	b.n	800c89e <_printf_float+0xbe>
 800cb8a:	9a05      	ldr	r2, [sp, #20]
 800cb8c:	464b      	mov	r3, r9
 800cb8e:	4442      	add	r2, r8
 800cb90:	4631      	mov	r1, r6
 800cb92:	4628      	mov	r0, r5
 800cb94:	47b8      	blx	r7
 800cb96:	3001      	adds	r0, #1
 800cb98:	d1c1      	bne.n	800cb1e <_printf_float+0x33e>
 800cb9a:	e680      	b.n	800c89e <_printf_float+0xbe>
 800cb9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb9e:	2a01      	cmp	r2, #1
 800cba0:	dc01      	bgt.n	800cba6 <_printf_float+0x3c6>
 800cba2:	07db      	lsls	r3, r3, #31
 800cba4:	d53a      	bpl.n	800cc1c <_printf_float+0x43c>
 800cba6:	2301      	movs	r3, #1
 800cba8:	4642      	mov	r2, r8
 800cbaa:	4631      	mov	r1, r6
 800cbac:	4628      	mov	r0, r5
 800cbae:	47b8      	blx	r7
 800cbb0:	3001      	adds	r0, #1
 800cbb2:	f43f ae74 	beq.w	800c89e <_printf_float+0xbe>
 800cbb6:	ee18 3a10 	vmov	r3, s16
 800cbba:	4652      	mov	r2, sl
 800cbbc:	4631      	mov	r1, r6
 800cbbe:	4628      	mov	r0, r5
 800cbc0:	47b8      	blx	r7
 800cbc2:	3001      	adds	r0, #1
 800cbc4:	f43f ae6b 	beq.w	800c89e <_printf_float+0xbe>
 800cbc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cbcc:	2200      	movs	r2, #0
 800cbce:	2300      	movs	r3, #0
 800cbd0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800cbd4:	f7f3 ff78 	bl	8000ac8 <__aeabi_dcmpeq>
 800cbd8:	b9d8      	cbnz	r0, 800cc12 <_printf_float+0x432>
 800cbda:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cbde:	f108 0201 	add.w	r2, r8, #1
 800cbe2:	4631      	mov	r1, r6
 800cbe4:	4628      	mov	r0, r5
 800cbe6:	47b8      	blx	r7
 800cbe8:	3001      	adds	r0, #1
 800cbea:	d10e      	bne.n	800cc0a <_printf_float+0x42a>
 800cbec:	e657      	b.n	800c89e <_printf_float+0xbe>
 800cbee:	2301      	movs	r3, #1
 800cbf0:	4652      	mov	r2, sl
 800cbf2:	4631      	mov	r1, r6
 800cbf4:	4628      	mov	r0, r5
 800cbf6:	47b8      	blx	r7
 800cbf8:	3001      	adds	r0, #1
 800cbfa:	f43f ae50 	beq.w	800c89e <_printf_float+0xbe>
 800cbfe:	f108 0801 	add.w	r8, r8, #1
 800cc02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc04:	3b01      	subs	r3, #1
 800cc06:	4543      	cmp	r3, r8
 800cc08:	dcf1      	bgt.n	800cbee <_printf_float+0x40e>
 800cc0a:	464b      	mov	r3, r9
 800cc0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cc10:	e6da      	b.n	800c9c8 <_printf_float+0x1e8>
 800cc12:	f04f 0800 	mov.w	r8, #0
 800cc16:	f104 0a1a 	add.w	sl, r4, #26
 800cc1a:	e7f2      	b.n	800cc02 <_printf_float+0x422>
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	4642      	mov	r2, r8
 800cc20:	e7df      	b.n	800cbe2 <_printf_float+0x402>
 800cc22:	2301      	movs	r3, #1
 800cc24:	464a      	mov	r2, r9
 800cc26:	4631      	mov	r1, r6
 800cc28:	4628      	mov	r0, r5
 800cc2a:	47b8      	blx	r7
 800cc2c:	3001      	adds	r0, #1
 800cc2e:	f43f ae36 	beq.w	800c89e <_printf_float+0xbe>
 800cc32:	f108 0801 	add.w	r8, r8, #1
 800cc36:	68e3      	ldr	r3, [r4, #12]
 800cc38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc3a:	1a5b      	subs	r3, r3, r1
 800cc3c:	4543      	cmp	r3, r8
 800cc3e:	dcf0      	bgt.n	800cc22 <_printf_float+0x442>
 800cc40:	e6f8      	b.n	800ca34 <_printf_float+0x254>
 800cc42:	f04f 0800 	mov.w	r8, #0
 800cc46:	f104 0919 	add.w	r9, r4, #25
 800cc4a:	e7f4      	b.n	800cc36 <_printf_float+0x456>

0800cc4c <_printf_common>:
 800cc4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc50:	4616      	mov	r6, r2
 800cc52:	4699      	mov	r9, r3
 800cc54:	688a      	ldr	r2, [r1, #8]
 800cc56:	690b      	ldr	r3, [r1, #16]
 800cc58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	bfb8      	it	lt
 800cc60:	4613      	movlt	r3, r2
 800cc62:	6033      	str	r3, [r6, #0]
 800cc64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cc68:	4607      	mov	r7, r0
 800cc6a:	460c      	mov	r4, r1
 800cc6c:	b10a      	cbz	r2, 800cc72 <_printf_common+0x26>
 800cc6e:	3301      	adds	r3, #1
 800cc70:	6033      	str	r3, [r6, #0]
 800cc72:	6823      	ldr	r3, [r4, #0]
 800cc74:	0699      	lsls	r1, r3, #26
 800cc76:	bf42      	ittt	mi
 800cc78:	6833      	ldrmi	r3, [r6, #0]
 800cc7a:	3302      	addmi	r3, #2
 800cc7c:	6033      	strmi	r3, [r6, #0]
 800cc7e:	6825      	ldr	r5, [r4, #0]
 800cc80:	f015 0506 	ands.w	r5, r5, #6
 800cc84:	d106      	bne.n	800cc94 <_printf_common+0x48>
 800cc86:	f104 0a19 	add.w	sl, r4, #25
 800cc8a:	68e3      	ldr	r3, [r4, #12]
 800cc8c:	6832      	ldr	r2, [r6, #0]
 800cc8e:	1a9b      	subs	r3, r3, r2
 800cc90:	42ab      	cmp	r3, r5
 800cc92:	dc26      	bgt.n	800cce2 <_printf_common+0x96>
 800cc94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cc98:	1e13      	subs	r3, r2, #0
 800cc9a:	6822      	ldr	r2, [r4, #0]
 800cc9c:	bf18      	it	ne
 800cc9e:	2301      	movne	r3, #1
 800cca0:	0692      	lsls	r2, r2, #26
 800cca2:	d42b      	bmi.n	800ccfc <_printf_common+0xb0>
 800cca4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cca8:	4649      	mov	r1, r9
 800ccaa:	4638      	mov	r0, r7
 800ccac:	47c0      	blx	r8
 800ccae:	3001      	adds	r0, #1
 800ccb0:	d01e      	beq.n	800ccf0 <_printf_common+0xa4>
 800ccb2:	6823      	ldr	r3, [r4, #0]
 800ccb4:	6922      	ldr	r2, [r4, #16]
 800ccb6:	f003 0306 	and.w	r3, r3, #6
 800ccba:	2b04      	cmp	r3, #4
 800ccbc:	bf02      	ittt	eq
 800ccbe:	68e5      	ldreq	r5, [r4, #12]
 800ccc0:	6833      	ldreq	r3, [r6, #0]
 800ccc2:	1aed      	subeq	r5, r5, r3
 800ccc4:	68a3      	ldr	r3, [r4, #8]
 800ccc6:	bf0c      	ite	eq
 800ccc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cccc:	2500      	movne	r5, #0
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	bfc4      	itt	gt
 800ccd2:	1a9b      	subgt	r3, r3, r2
 800ccd4:	18ed      	addgt	r5, r5, r3
 800ccd6:	2600      	movs	r6, #0
 800ccd8:	341a      	adds	r4, #26
 800ccda:	42b5      	cmp	r5, r6
 800ccdc:	d11a      	bne.n	800cd14 <_printf_common+0xc8>
 800ccde:	2000      	movs	r0, #0
 800cce0:	e008      	b.n	800ccf4 <_printf_common+0xa8>
 800cce2:	2301      	movs	r3, #1
 800cce4:	4652      	mov	r2, sl
 800cce6:	4649      	mov	r1, r9
 800cce8:	4638      	mov	r0, r7
 800ccea:	47c0      	blx	r8
 800ccec:	3001      	adds	r0, #1
 800ccee:	d103      	bne.n	800ccf8 <_printf_common+0xac>
 800ccf0:	f04f 30ff 	mov.w	r0, #4294967295
 800ccf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccf8:	3501      	adds	r5, #1
 800ccfa:	e7c6      	b.n	800cc8a <_printf_common+0x3e>
 800ccfc:	18e1      	adds	r1, r4, r3
 800ccfe:	1c5a      	adds	r2, r3, #1
 800cd00:	2030      	movs	r0, #48	; 0x30
 800cd02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd06:	4422      	add	r2, r4
 800cd08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd10:	3302      	adds	r3, #2
 800cd12:	e7c7      	b.n	800cca4 <_printf_common+0x58>
 800cd14:	2301      	movs	r3, #1
 800cd16:	4622      	mov	r2, r4
 800cd18:	4649      	mov	r1, r9
 800cd1a:	4638      	mov	r0, r7
 800cd1c:	47c0      	blx	r8
 800cd1e:	3001      	adds	r0, #1
 800cd20:	d0e6      	beq.n	800ccf0 <_printf_common+0xa4>
 800cd22:	3601      	adds	r6, #1
 800cd24:	e7d9      	b.n	800ccda <_printf_common+0x8e>
	...

0800cd28 <_printf_i>:
 800cd28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd2c:	7e0f      	ldrb	r7, [r1, #24]
 800cd2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cd30:	2f78      	cmp	r7, #120	; 0x78
 800cd32:	4691      	mov	r9, r2
 800cd34:	4680      	mov	r8, r0
 800cd36:	460c      	mov	r4, r1
 800cd38:	469a      	mov	sl, r3
 800cd3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cd3e:	d807      	bhi.n	800cd50 <_printf_i+0x28>
 800cd40:	2f62      	cmp	r7, #98	; 0x62
 800cd42:	d80a      	bhi.n	800cd5a <_printf_i+0x32>
 800cd44:	2f00      	cmp	r7, #0
 800cd46:	f000 80d4 	beq.w	800cef2 <_printf_i+0x1ca>
 800cd4a:	2f58      	cmp	r7, #88	; 0x58
 800cd4c:	f000 80c0 	beq.w	800ced0 <_printf_i+0x1a8>
 800cd50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cd58:	e03a      	b.n	800cdd0 <_printf_i+0xa8>
 800cd5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cd5e:	2b15      	cmp	r3, #21
 800cd60:	d8f6      	bhi.n	800cd50 <_printf_i+0x28>
 800cd62:	a101      	add	r1, pc, #4	; (adr r1, 800cd68 <_printf_i+0x40>)
 800cd64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd68:	0800cdc1 	.word	0x0800cdc1
 800cd6c:	0800cdd5 	.word	0x0800cdd5
 800cd70:	0800cd51 	.word	0x0800cd51
 800cd74:	0800cd51 	.word	0x0800cd51
 800cd78:	0800cd51 	.word	0x0800cd51
 800cd7c:	0800cd51 	.word	0x0800cd51
 800cd80:	0800cdd5 	.word	0x0800cdd5
 800cd84:	0800cd51 	.word	0x0800cd51
 800cd88:	0800cd51 	.word	0x0800cd51
 800cd8c:	0800cd51 	.word	0x0800cd51
 800cd90:	0800cd51 	.word	0x0800cd51
 800cd94:	0800ced9 	.word	0x0800ced9
 800cd98:	0800ce01 	.word	0x0800ce01
 800cd9c:	0800ce93 	.word	0x0800ce93
 800cda0:	0800cd51 	.word	0x0800cd51
 800cda4:	0800cd51 	.word	0x0800cd51
 800cda8:	0800cefb 	.word	0x0800cefb
 800cdac:	0800cd51 	.word	0x0800cd51
 800cdb0:	0800ce01 	.word	0x0800ce01
 800cdb4:	0800cd51 	.word	0x0800cd51
 800cdb8:	0800cd51 	.word	0x0800cd51
 800cdbc:	0800ce9b 	.word	0x0800ce9b
 800cdc0:	682b      	ldr	r3, [r5, #0]
 800cdc2:	1d1a      	adds	r2, r3, #4
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	602a      	str	r2, [r5, #0]
 800cdc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cdcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	e09f      	b.n	800cf14 <_printf_i+0x1ec>
 800cdd4:	6820      	ldr	r0, [r4, #0]
 800cdd6:	682b      	ldr	r3, [r5, #0]
 800cdd8:	0607      	lsls	r7, r0, #24
 800cdda:	f103 0104 	add.w	r1, r3, #4
 800cdde:	6029      	str	r1, [r5, #0]
 800cde0:	d501      	bpl.n	800cde6 <_printf_i+0xbe>
 800cde2:	681e      	ldr	r6, [r3, #0]
 800cde4:	e003      	b.n	800cdee <_printf_i+0xc6>
 800cde6:	0646      	lsls	r6, r0, #25
 800cde8:	d5fb      	bpl.n	800cde2 <_printf_i+0xba>
 800cdea:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cdee:	2e00      	cmp	r6, #0
 800cdf0:	da03      	bge.n	800cdfa <_printf_i+0xd2>
 800cdf2:	232d      	movs	r3, #45	; 0x2d
 800cdf4:	4276      	negs	r6, r6
 800cdf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdfa:	485a      	ldr	r0, [pc, #360]	; (800cf64 <_printf_i+0x23c>)
 800cdfc:	230a      	movs	r3, #10
 800cdfe:	e012      	b.n	800ce26 <_printf_i+0xfe>
 800ce00:	682b      	ldr	r3, [r5, #0]
 800ce02:	6820      	ldr	r0, [r4, #0]
 800ce04:	1d19      	adds	r1, r3, #4
 800ce06:	6029      	str	r1, [r5, #0]
 800ce08:	0605      	lsls	r5, r0, #24
 800ce0a:	d501      	bpl.n	800ce10 <_printf_i+0xe8>
 800ce0c:	681e      	ldr	r6, [r3, #0]
 800ce0e:	e002      	b.n	800ce16 <_printf_i+0xee>
 800ce10:	0641      	lsls	r1, r0, #25
 800ce12:	d5fb      	bpl.n	800ce0c <_printf_i+0xe4>
 800ce14:	881e      	ldrh	r6, [r3, #0]
 800ce16:	4853      	ldr	r0, [pc, #332]	; (800cf64 <_printf_i+0x23c>)
 800ce18:	2f6f      	cmp	r7, #111	; 0x6f
 800ce1a:	bf0c      	ite	eq
 800ce1c:	2308      	moveq	r3, #8
 800ce1e:	230a      	movne	r3, #10
 800ce20:	2100      	movs	r1, #0
 800ce22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce26:	6865      	ldr	r5, [r4, #4]
 800ce28:	60a5      	str	r5, [r4, #8]
 800ce2a:	2d00      	cmp	r5, #0
 800ce2c:	bfa2      	ittt	ge
 800ce2e:	6821      	ldrge	r1, [r4, #0]
 800ce30:	f021 0104 	bicge.w	r1, r1, #4
 800ce34:	6021      	strge	r1, [r4, #0]
 800ce36:	b90e      	cbnz	r6, 800ce3c <_printf_i+0x114>
 800ce38:	2d00      	cmp	r5, #0
 800ce3a:	d04b      	beq.n	800ced4 <_printf_i+0x1ac>
 800ce3c:	4615      	mov	r5, r2
 800ce3e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ce42:	fb03 6711 	mls	r7, r3, r1, r6
 800ce46:	5dc7      	ldrb	r7, [r0, r7]
 800ce48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ce4c:	4637      	mov	r7, r6
 800ce4e:	42bb      	cmp	r3, r7
 800ce50:	460e      	mov	r6, r1
 800ce52:	d9f4      	bls.n	800ce3e <_printf_i+0x116>
 800ce54:	2b08      	cmp	r3, #8
 800ce56:	d10b      	bne.n	800ce70 <_printf_i+0x148>
 800ce58:	6823      	ldr	r3, [r4, #0]
 800ce5a:	07de      	lsls	r6, r3, #31
 800ce5c:	d508      	bpl.n	800ce70 <_printf_i+0x148>
 800ce5e:	6923      	ldr	r3, [r4, #16]
 800ce60:	6861      	ldr	r1, [r4, #4]
 800ce62:	4299      	cmp	r1, r3
 800ce64:	bfde      	ittt	le
 800ce66:	2330      	movle	r3, #48	; 0x30
 800ce68:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ce6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ce70:	1b52      	subs	r2, r2, r5
 800ce72:	6122      	str	r2, [r4, #16]
 800ce74:	f8cd a000 	str.w	sl, [sp]
 800ce78:	464b      	mov	r3, r9
 800ce7a:	aa03      	add	r2, sp, #12
 800ce7c:	4621      	mov	r1, r4
 800ce7e:	4640      	mov	r0, r8
 800ce80:	f7ff fee4 	bl	800cc4c <_printf_common>
 800ce84:	3001      	adds	r0, #1
 800ce86:	d14a      	bne.n	800cf1e <_printf_i+0x1f6>
 800ce88:	f04f 30ff 	mov.w	r0, #4294967295
 800ce8c:	b004      	add	sp, #16
 800ce8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce92:	6823      	ldr	r3, [r4, #0]
 800ce94:	f043 0320 	orr.w	r3, r3, #32
 800ce98:	6023      	str	r3, [r4, #0]
 800ce9a:	4833      	ldr	r0, [pc, #204]	; (800cf68 <_printf_i+0x240>)
 800ce9c:	2778      	movs	r7, #120	; 0x78
 800ce9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cea2:	6823      	ldr	r3, [r4, #0]
 800cea4:	6829      	ldr	r1, [r5, #0]
 800cea6:	061f      	lsls	r7, r3, #24
 800cea8:	f851 6b04 	ldr.w	r6, [r1], #4
 800ceac:	d402      	bmi.n	800ceb4 <_printf_i+0x18c>
 800ceae:	065f      	lsls	r7, r3, #25
 800ceb0:	bf48      	it	mi
 800ceb2:	b2b6      	uxthmi	r6, r6
 800ceb4:	07df      	lsls	r7, r3, #31
 800ceb6:	bf48      	it	mi
 800ceb8:	f043 0320 	orrmi.w	r3, r3, #32
 800cebc:	6029      	str	r1, [r5, #0]
 800cebe:	bf48      	it	mi
 800cec0:	6023      	strmi	r3, [r4, #0]
 800cec2:	b91e      	cbnz	r6, 800cecc <_printf_i+0x1a4>
 800cec4:	6823      	ldr	r3, [r4, #0]
 800cec6:	f023 0320 	bic.w	r3, r3, #32
 800ceca:	6023      	str	r3, [r4, #0]
 800cecc:	2310      	movs	r3, #16
 800cece:	e7a7      	b.n	800ce20 <_printf_i+0xf8>
 800ced0:	4824      	ldr	r0, [pc, #144]	; (800cf64 <_printf_i+0x23c>)
 800ced2:	e7e4      	b.n	800ce9e <_printf_i+0x176>
 800ced4:	4615      	mov	r5, r2
 800ced6:	e7bd      	b.n	800ce54 <_printf_i+0x12c>
 800ced8:	682b      	ldr	r3, [r5, #0]
 800ceda:	6826      	ldr	r6, [r4, #0]
 800cedc:	6961      	ldr	r1, [r4, #20]
 800cede:	1d18      	adds	r0, r3, #4
 800cee0:	6028      	str	r0, [r5, #0]
 800cee2:	0635      	lsls	r5, r6, #24
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	d501      	bpl.n	800ceec <_printf_i+0x1c4>
 800cee8:	6019      	str	r1, [r3, #0]
 800ceea:	e002      	b.n	800cef2 <_printf_i+0x1ca>
 800ceec:	0670      	lsls	r0, r6, #25
 800ceee:	d5fb      	bpl.n	800cee8 <_printf_i+0x1c0>
 800cef0:	8019      	strh	r1, [r3, #0]
 800cef2:	2300      	movs	r3, #0
 800cef4:	6123      	str	r3, [r4, #16]
 800cef6:	4615      	mov	r5, r2
 800cef8:	e7bc      	b.n	800ce74 <_printf_i+0x14c>
 800cefa:	682b      	ldr	r3, [r5, #0]
 800cefc:	1d1a      	adds	r2, r3, #4
 800cefe:	602a      	str	r2, [r5, #0]
 800cf00:	681d      	ldr	r5, [r3, #0]
 800cf02:	6862      	ldr	r2, [r4, #4]
 800cf04:	2100      	movs	r1, #0
 800cf06:	4628      	mov	r0, r5
 800cf08:	f7f3 f962 	bl	80001d0 <memchr>
 800cf0c:	b108      	cbz	r0, 800cf12 <_printf_i+0x1ea>
 800cf0e:	1b40      	subs	r0, r0, r5
 800cf10:	6060      	str	r0, [r4, #4]
 800cf12:	6863      	ldr	r3, [r4, #4]
 800cf14:	6123      	str	r3, [r4, #16]
 800cf16:	2300      	movs	r3, #0
 800cf18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf1c:	e7aa      	b.n	800ce74 <_printf_i+0x14c>
 800cf1e:	6923      	ldr	r3, [r4, #16]
 800cf20:	462a      	mov	r2, r5
 800cf22:	4649      	mov	r1, r9
 800cf24:	4640      	mov	r0, r8
 800cf26:	47d0      	blx	sl
 800cf28:	3001      	adds	r0, #1
 800cf2a:	d0ad      	beq.n	800ce88 <_printf_i+0x160>
 800cf2c:	6823      	ldr	r3, [r4, #0]
 800cf2e:	079b      	lsls	r3, r3, #30
 800cf30:	d413      	bmi.n	800cf5a <_printf_i+0x232>
 800cf32:	68e0      	ldr	r0, [r4, #12]
 800cf34:	9b03      	ldr	r3, [sp, #12]
 800cf36:	4298      	cmp	r0, r3
 800cf38:	bfb8      	it	lt
 800cf3a:	4618      	movlt	r0, r3
 800cf3c:	e7a6      	b.n	800ce8c <_printf_i+0x164>
 800cf3e:	2301      	movs	r3, #1
 800cf40:	4632      	mov	r2, r6
 800cf42:	4649      	mov	r1, r9
 800cf44:	4640      	mov	r0, r8
 800cf46:	47d0      	blx	sl
 800cf48:	3001      	adds	r0, #1
 800cf4a:	d09d      	beq.n	800ce88 <_printf_i+0x160>
 800cf4c:	3501      	adds	r5, #1
 800cf4e:	68e3      	ldr	r3, [r4, #12]
 800cf50:	9903      	ldr	r1, [sp, #12]
 800cf52:	1a5b      	subs	r3, r3, r1
 800cf54:	42ab      	cmp	r3, r5
 800cf56:	dcf2      	bgt.n	800cf3e <_printf_i+0x216>
 800cf58:	e7eb      	b.n	800cf32 <_printf_i+0x20a>
 800cf5a:	2500      	movs	r5, #0
 800cf5c:	f104 0619 	add.w	r6, r4, #25
 800cf60:	e7f5      	b.n	800cf4e <_printf_i+0x226>
 800cf62:	bf00      	nop
 800cf64:	08011624 	.word	0x08011624
 800cf68:	08011635 	.word	0x08011635

0800cf6c <_scanf_float>:
 800cf6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf70:	b087      	sub	sp, #28
 800cf72:	4617      	mov	r7, r2
 800cf74:	9303      	str	r3, [sp, #12]
 800cf76:	688b      	ldr	r3, [r1, #8]
 800cf78:	1e5a      	subs	r2, r3, #1
 800cf7a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cf7e:	bf83      	ittte	hi
 800cf80:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cf84:	195b      	addhi	r3, r3, r5
 800cf86:	9302      	strhi	r3, [sp, #8]
 800cf88:	2300      	movls	r3, #0
 800cf8a:	bf86      	itte	hi
 800cf8c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cf90:	608b      	strhi	r3, [r1, #8]
 800cf92:	9302      	strls	r3, [sp, #8]
 800cf94:	680b      	ldr	r3, [r1, #0]
 800cf96:	468b      	mov	fp, r1
 800cf98:	2500      	movs	r5, #0
 800cf9a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800cf9e:	f84b 3b1c 	str.w	r3, [fp], #28
 800cfa2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cfa6:	4680      	mov	r8, r0
 800cfa8:	460c      	mov	r4, r1
 800cfaa:	465e      	mov	r6, fp
 800cfac:	46aa      	mov	sl, r5
 800cfae:	46a9      	mov	r9, r5
 800cfb0:	9501      	str	r5, [sp, #4]
 800cfb2:	68a2      	ldr	r2, [r4, #8]
 800cfb4:	b152      	cbz	r2, 800cfcc <_scanf_float+0x60>
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	2b4e      	cmp	r3, #78	; 0x4e
 800cfbc:	d864      	bhi.n	800d088 <_scanf_float+0x11c>
 800cfbe:	2b40      	cmp	r3, #64	; 0x40
 800cfc0:	d83c      	bhi.n	800d03c <_scanf_float+0xd0>
 800cfc2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800cfc6:	b2c8      	uxtb	r0, r1
 800cfc8:	280e      	cmp	r0, #14
 800cfca:	d93a      	bls.n	800d042 <_scanf_float+0xd6>
 800cfcc:	f1b9 0f00 	cmp.w	r9, #0
 800cfd0:	d003      	beq.n	800cfda <_scanf_float+0x6e>
 800cfd2:	6823      	ldr	r3, [r4, #0]
 800cfd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cfd8:	6023      	str	r3, [r4, #0]
 800cfda:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cfde:	f1ba 0f01 	cmp.w	sl, #1
 800cfe2:	f200 8113 	bhi.w	800d20c <_scanf_float+0x2a0>
 800cfe6:	455e      	cmp	r6, fp
 800cfe8:	f200 8105 	bhi.w	800d1f6 <_scanf_float+0x28a>
 800cfec:	2501      	movs	r5, #1
 800cfee:	4628      	mov	r0, r5
 800cff0:	b007      	add	sp, #28
 800cff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cff6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800cffa:	2a0d      	cmp	r2, #13
 800cffc:	d8e6      	bhi.n	800cfcc <_scanf_float+0x60>
 800cffe:	a101      	add	r1, pc, #4	; (adr r1, 800d004 <_scanf_float+0x98>)
 800d000:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d004:	0800d143 	.word	0x0800d143
 800d008:	0800cfcd 	.word	0x0800cfcd
 800d00c:	0800cfcd 	.word	0x0800cfcd
 800d010:	0800cfcd 	.word	0x0800cfcd
 800d014:	0800d1a3 	.word	0x0800d1a3
 800d018:	0800d17b 	.word	0x0800d17b
 800d01c:	0800cfcd 	.word	0x0800cfcd
 800d020:	0800cfcd 	.word	0x0800cfcd
 800d024:	0800d151 	.word	0x0800d151
 800d028:	0800cfcd 	.word	0x0800cfcd
 800d02c:	0800cfcd 	.word	0x0800cfcd
 800d030:	0800cfcd 	.word	0x0800cfcd
 800d034:	0800cfcd 	.word	0x0800cfcd
 800d038:	0800d109 	.word	0x0800d109
 800d03c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d040:	e7db      	b.n	800cffa <_scanf_float+0x8e>
 800d042:	290e      	cmp	r1, #14
 800d044:	d8c2      	bhi.n	800cfcc <_scanf_float+0x60>
 800d046:	a001      	add	r0, pc, #4	; (adr r0, 800d04c <_scanf_float+0xe0>)
 800d048:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d04c:	0800d0fb 	.word	0x0800d0fb
 800d050:	0800cfcd 	.word	0x0800cfcd
 800d054:	0800d0fb 	.word	0x0800d0fb
 800d058:	0800d18f 	.word	0x0800d18f
 800d05c:	0800cfcd 	.word	0x0800cfcd
 800d060:	0800d0a9 	.word	0x0800d0a9
 800d064:	0800d0e5 	.word	0x0800d0e5
 800d068:	0800d0e5 	.word	0x0800d0e5
 800d06c:	0800d0e5 	.word	0x0800d0e5
 800d070:	0800d0e5 	.word	0x0800d0e5
 800d074:	0800d0e5 	.word	0x0800d0e5
 800d078:	0800d0e5 	.word	0x0800d0e5
 800d07c:	0800d0e5 	.word	0x0800d0e5
 800d080:	0800d0e5 	.word	0x0800d0e5
 800d084:	0800d0e5 	.word	0x0800d0e5
 800d088:	2b6e      	cmp	r3, #110	; 0x6e
 800d08a:	d809      	bhi.n	800d0a0 <_scanf_float+0x134>
 800d08c:	2b60      	cmp	r3, #96	; 0x60
 800d08e:	d8b2      	bhi.n	800cff6 <_scanf_float+0x8a>
 800d090:	2b54      	cmp	r3, #84	; 0x54
 800d092:	d077      	beq.n	800d184 <_scanf_float+0x218>
 800d094:	2b59      	cmp	r3, #89	; 0x59
 800d096:	d199      	bne.n	800cfcc <_scanf_float+0x60>
 800d098:	2d07      	cmp	r5, #7
 800d09a:	d197      	bne.n	800cfcc <_scanf_float+0x60>
 800d09c:	2508      	movs	r5, #8
 800d09e:	e029      	b.n	800d0f4 <_scanf_float+0x188>
 800d0a0:	2b74      	cmp	r3, #116	; 0x74
 800d0a2:	d06f      	beq.n	800d184 <_scanf_float+0x218>
 800d0a4:	2b79      	cmp	r3, #121	; 0x79
 800d0a6:	e7f6      	b.n	800d096 <_scanf_float+0x12a>
 800d0a8:	6821      	ldr	r1, [r4, #0]
 800d0aa:	05c8      	lsls	r0, r1, #23
 800d0ac:	d51a      	bpl.n	800d0e4 <_scanf_float+0x178>
 800d0ae:	9b02      	ldr	r3, [sp, #8]
 800d0b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d0b4:	6021      	str	r1, [r4, #0]
 800d0b6:	f109 0901 	add.w	r9, r9, #1
 800d0ba:	b11b      	cbz	r3, 800d0c4 <_scanf_float+0x158>
 800d0bc:	3b01      	subs	r3, #1
 800d0be:	3201      	adds	r2, #1
 800d0c0:	9302      	str	r3, [sp, #8]
 800d0c2:	60a2      	str	r2, [r4, #8]
 800d0c4:	68a3      	ldr	r3, [r4, #8]
 800d0c6:	3b01      	subs	r3, #1
 800d0c8:	60a3      	str	r3, [r4, #8]
 800d0ca:	6923      	ldr	r3, [r4, #16]
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	6123      	str	r3, [r4, #16]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	3b01      	subs	r3, #1
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	607b      	str	r3, [r7, #4]
 800d0d8:	f340 8084 	ble.w	800d1e4 <_scanf_float+0x278>
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	3301      	adds	r3, #1
 800d0e0:	603b      	str	r3, [r7, #0]
 800d0e2:	e766      	b.n	800cfb2 <_scanf_float+0x46>
 800d0e4:	eb1a 0f05 	cmn.w	sl, r5
 800d0e8:	f47f af70 	bne.w	800cfcc <_scanf_float+0x60>
 800d0ec:	6822      	ldr	r2, [r4, #0]
 800d0ee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d0f2:	6022      	str	r2, [r4, #0]
 800d0f4:	f806 3b01 	strb.w	r3, [r6], #1
 800d0f8:	e7e4      	b.n	800d0c4 <_scanf_float+0x158>
 800d0fa:	6822      	ldr	r2, [r4, #0]
 800d0fc:	0610      	lsls	r0, r2, #24
 800d0fe:	f57f af65 	bpl.w	800cfcc <_scanf_float+0x60>
 800d102:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d106:	e7f4      	b.n	800d0f2 <_scanf_float+0x186>
 800d108:	f1ba 0f00 	cmp.w	sl, #0
 800d10c:	d10e      	bne.n	800d12c <_scanf_float+0x1c0>
 800d10e:	f1b9 0f00 	cmp.w	r9, #0
 800d112:	d10e      	bne.n	800d132 <_scanf_float+0x1c6>
 800d114:	6822      	ldr	r2, [r4, #0]
 800d116:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d11a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d11e:	d108      	bne.n	800d132 <_scanf_float+0x1c6>
 800d120:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d124:	6022      	str	r2, [r4, #0]
 800d126:	f04f 0a01 	mov.w	sl, #1
 800d12a:	e7e3      	b.n	800d0f4 <_scanf_float+0x188>
 800d12c:	f1ba 0f02 	cmp.w	sl, #2
 800d130:	d055      	beq.n	800d1de <_scanf_float+0x272>
 800d132:	2d01      	cmp	r5, #1
 800d134:	d002      	beq.n	800d13c <_scanf_float+0x1d0>
 800d136:	2d04      	cmp	r5, #4
 800d138:	f47f af48 	bne.w	800cfcc <_scanf_float+0x60>
 800d13c:	3501      	adds	r5, #1
 800d13e:	b2ed      	uxtb	r5, r5
 800d140:	e7d8      	b.n	800d0f4 <_scanf_float+0x188>
 800d142:	f1ba 0f01 	cmp.w	sl, #1
 800d146:	f47f af41 	bne.w	800cfcc <_scanf_float+0x60>
 800d14a:	f04f 0a02 	mov.w	sl, #2
 800d14e:	e7d1      	b.n	800d0f4 <_scanf_float+0x188>
 800d150:	b97d      	cbnz	r5, 800d172 <_scanf_float+0x206>
 800d152:	f1b9 0f00 	cmp.w	r9, #0
 800d156:	f47f af3c 	bne.w	800cfd2 <_scanf_float+0x66>
 800d15a:	6822      	ldr	r2, [r4, #0]
 800d15c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d160:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d164:	f47f af39 	bne.w	800cfda <_scanf_float+0x6e>
 800d168:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d16c:	6022      	str	r2, [r4, #0]
 800d16e:	2501      	movs	r5, #1
 800d170:	e7c0      	b.n	800d0f4 <_scanf_float+0x188>
 800d172:	2d03      	cmp	r5, #3
 800d174:	d0e2      	beq.n	800d13c <_scanf_float+0x1d0>
 800d176:	2d05      	cmp	r5, #5
 800d178:	e7de      	b.n	800d138 <_scanf_float+0x1cc>
 800d17a:	2d02      	cmp	r5, #2
 800d17c:	f47f af26 	bne.w	800cfcc <_scanf_float+0x60>
 800d180:	2503      	movs	r5, #3
 800d182:	e7b7      	b.n	800d0f4 <_scanf_float+0x188>
 800d184:	2d06      	cmp	r5, #6
 800d186:	f47f af21 	bne.w	800cfcc <_scanf_float+0x60>
 800d18a:	2507      	movs	r5, #7
 800d18c:	e7b2      	b.n	800d0f4 <_scanf_float+0x188>
 800d18e:	6822      	ldr	r2, [r4, #0]
 800d190:	0591      	lsls	r1, r2, #22
 800d192:	f57f af1b 	bpl.w	800cfcc <_scanf_float+0x60>
 800d196:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d19a:	6022      	str	r2, [r4, #0]
 800d19c:	f8cd 9004 	str.w	r9, [sp, #4]
 800d1a0:	e7a8      	b.n	800d0f4 <_scanf_float+0x188>
 800d1a2:	6822      	ldr	r2, [r4, #0]
 800d1a4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d1a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d1ac:	d006      	beq.n	800d1bc <_scanf_float+0x250>
 800d1ae:	0550      	lsls	r0, r2, #21
 800d1b0:	f57f af0c 	bpl.w	800cfcc <_scanf_float+0x60>
 800d1b4:	f1b9 0f00 	cmp.w	r9, #0
 800d1b8:	f43f af0f 	beq.w	800cfda <_scanf_float+0x6e>
 800d1bc:	0591      	lsls	r1, r2, #22
 800d1be:	bf58      	it	pl
 800d1c0:	9901      	ldrpl	r1, [sp, #4]
 800d1c2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d1c6:	bf58      	it	pl
 800d1c8:	eba9 0101 	subpl.w	r1, r9, r1
 800d1cc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d1d0:	bf58      	it	pl
 800d1d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d1d6:	6022      	str	r2, [r4, #0]
 800d1d8:	f04f 0900 	mov.w	r9, #0
 800d1dc:	e78a      	b.n	800d0f4 <_scanf_float+0x188>
 800d1de:	f04f 0a03 	mov.w	sl, #3
 800d1e2:	e787      	b.n	800d0f4 <_scanf_float+0x188>
 800d1e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d1e8:	4639      	mov	r1, r7
 800d1ea:	4640      	mov	r0, r8
 800d1ec:	4798      	blx	r3
 800d1ee:	2800      	cmp	r0, #0
 800d1f0:	f43f aedf 	beq.w	800cfb2 <_scanf_float+0x46>
 800d1f4:	e6ea      	b.n	800cfcc <_scanf_float+0x60>
 800d1f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d1fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d1fe:	463a      	mov	r2, r7
 800d200:	4640      	mov	r0, r8
 800d202:	4798      	blx	r3
 800d204:	6923      	ldr	r3, [r4, #16]
 800d206:	3b01      	subs	r3, #1
 800d208:	6123      	str	r3, [r4, #16]
 800d20a:	e6ec      	b.n	800cfe6 <_scanf_float+0x7a>
 800d20c:	1e6b      	subs	r3, r5, #1
 800d20e:	2b06      	cmp	r3, #6
 800d210:	d825      	bhi.n	800d25e <_scanf_float+0x2f2>
 800d212:	2d02      	cmp	r5, #2
 800d214:	d836      	bhi.n	800d284 <_scanf_float+0x318>
 800d216:	455e      	cmp	r6, fp
 800d218:	f67f aee8 	bls.w	800cfec <_scanf_float+0x80>
 800d21c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d220:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d224:	463a      	mov	r2, r7
 800d226:	4640      	mov	r0, r8
 800d228:	4798      	blx	r3
 800d22a:	6923      	ldr	r3, [r4, #16]
 800d22c:	3b01      	subs	r3, #1
 800d22e:	6123      	str	r3, [r4, #16]
 800d230:	e7f1      	b.n	800d216 <_scanf_float+0x2aa>
 800d232:	9802      	ldr	r0, [sp, #8]
 800d234:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d238:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d23c:	9002      	str	r0, [sp, #8]
 800d23e:	463a      	mov	r2, r7
 800d240:	4640      	mov	r0, r8
 800d242:	4798      	blx	r3
 800d244:	6923      	ldr	r3, [r4, #16]
 800d246:	3b01      	subs	r3, #1
 800d248:	6123      	str	r3, [r4, #16]
 800d24a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d24e:	fa5f fa8a 	uxtb.w	sl, sl
 800d252:	f1ba 0f02 	cmp.w	sl, #2
 800d256:	d1ec      	bne.n	800d232 <_scanf_float+0x2c6>
 800d258:	3d03      	subs	r5, #3
 800d25a:	b2ed      	uxtb	r5, r5
 800d25c:	1b76      	subs	r6, r6, r5
 800d25e:	6823      	ldr	r3, [r4, #0]
 800d260:	05da      	lsls	r2, r3, #23
 800d262:	d52f      	bpl.n	800d2c4 <_scanf_float+0x358>
 800d264:	055b      	lsls	r3, r3, #21
 800d266:	d510      	bpl.n	800d28a <_scanf_float+0x31e>
 800d268:	455e      	cmp	r6, fp
 800d26a:	f67f aebf 	bls.w	800cfec <_scanf_float+0x80>
 800d26e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d272:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d276:	463a      	mov	r2, r7
 800d278:	4640      	mov	r0, r8
 800d27a:	4798      	blx	r3
 800d27c:	6923      	ldr	r3, [r4, #16]
 800d27e:	3b01      	subs	r3, #1
 800d280:	6123      	str	r3, [r4, #16]
 800d282:	e7f1      	b.n	800d268 <_scanf_float+0x2fc>
 800d284:	46aa      	mov	sl, r5
 800d286:	9602      	str	r6, [sp, #8]
 800d288:	e7df      	b.n	800d24a <_scanf_float+0x2de>
 800d28a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d28e:	6923      	ldr	r3, [r4, #16]
 800d290:	2965      	cmp	r1, #101	; 0x65
 800d292:	f103 33ff 	add.w	r3, r3, #4294967295
 800d296:	f106 35ff 	add.w	r5, r6, #4294967295
 800d29a:	6123      	str	r3, [r4, #16]
 800d29c:	d00c      	beq.n	800d2b8 <_scanf_float+0x34c>
 800d29e:	2945      	cmp	r1, #69	; 0x45
 800d2a0:	d00a      	beq.n	800d2b8 <_scanf_float+0x34c>
 800d2a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d2a6:	463a      	mov	r2, r7
 800d2a8:	4640      	mov	r0, r8
 800d2aa:	4798      	blx	r3
 800d2ac:	6923      	ldr	r3, [r4, #16]
 800d2ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d2b2:	3b01      	subs	r3, #1
 800d2b4:	1eb5      	subs	r5, r6, #2
 800d2b6:	6123      	str	r3, [r4, #16]
 800d2b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d2bc:	463a      	mov	r2, r7
 800d2be:	4640      	mov	r0, r8
 800d2c0:	4798      	blx	r3
 800d2c2:	462e      	mov	r6, r5
 800d2c4:	6825      	ldr	r5, [r4, #0]
 800d2c6:	f015 0510 	ands.w	r5, r5, #16
 800d2ca:	d158      	bne.n	800d37e <_scanf_float+0x412>
 800d2cc:	7035      	strb	r5, [r6, #0]
 800d2ce:	6823      	ldr	r3, [r4, #0]
 800d2d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d2d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d2d8:	d11c      	bne.n	800d314 <_scanf_float+0x3a8>
 800d2da:	9b01      	ldr	r3, [sp, #4]
 800d2dc:	454b      	cmp	r3, r9
 800d2de:	eba3 0209 	sub.w	r2, r3, r9
 800d2e2:	d124      	bne.n	800d32e <_scanf_float+0x3c2>
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	4659      	mov	r1, fp
 800d2e8:	4640      	mov	r0, r8
 800d2ea:	f002 fbdd 	bl	800faa8 <_strtod_r>
 800d2ee:	9b03      	ldr	r3, [sp, #12]
 800d2f0:	6821      	ldr	r1, [r4, #0]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	f011 0f02 	tst.w	r1, #2
 800d2f8:	ec57 6b10 	vmov	r6, r7, d0
 800d2fc:	f103 0204 	add.w	r2, r3, #4
 800d300:	d020      	beq.n	800d344 <_scanf_float+0x3d8>
 800d302:	9903      	ldr	r1, [sp, #12]
 800d304:	600a      	str	r2, [r1, #0]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	e9c3 6700 	strd	r6, r7, [r3]
 800d30c:	68e3      	ldr	r3, [r4, #12]
 800d30e:	3301      	adds	r3, #1
 800d310:	60e3      	str	r3, [r4, #12]
 800d312:	e66c      	b.n	800cfee <_scanf_float+0x82>
 800d314:	9b04      	ldr	r3, [sp, #16]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d0e4      	beq.n	800d2e4 <_scanf_float+0x378>
 800d31a:	9905      	ldr	r1, [sp, #20]
 800d31c:	230a      	movs	r3, #10
 800d31e:	462a      	mov	r2, r5
 800d320:	3101      	adds	r1, #1
 800d322:	4640      	mov	r0, r8
 800d324:	f002 fc48 	bl	800fbb8 <_strtol_r>
 800d328:	9b04      	ldr	r3, [sp, #16]
 800d32a:	9e05      	ldr	r6, [sp, #20]
 800d32c:	1ac2      	subs	r2, r0, r3
 800d32e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d332:	429e      	cmp	r6, r3
 800d334:	bf28      	it	cs
 800d336:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d33a:	4912      	ldr	r1, [pc, #72]	; (800d384 <_scanf_float+0x418>)
 800d33c:	4630      	mov	r0, r6
 800d33e:	f000 f8e7 	bl	800d510 <siprintf>
 800d342:	e7cf      	b.n	800d2e4 <_scanf_float+0x378>
 800d344:	f011 0f04 	tst.w	r1, #4
 800d348:	9903      	ldr	r1, [sp, #12]
 800d34a:	600a      	str	r2, [r1, #0]
 800d34c:	d1db      	bne.n	800d306 <_scanf_float+0x39a>
 800d34e:	f8d3 8000 	ldr.w	r8, [r3]
 800d352:	ee10 2a10 	vmov	r2, s0
 800d356:	ee10 0a10 	vmov	r0, s0
 800d35a:	463b      	mov	r3, r7
 800d35c:	4639      	mov	r1, r7
 800d35e:	f7f3 fbe5 	bl	8000b2c <__aeabi_dcmpun>
 800d362:	b128      	cbz	r0, 800d370 <_scanf_float+0x404>
 800d364:	4808      	ldr	r0, [pc, #32]	; (800d388 <_scanf_float+0x41c>)
 800d366:	f000 fa19 	bl	800d79c <nanf>
 800d36a:	ed88 0a00 	vstr	s0, [r8]
 800d36e:	e7cd      	b.n	800d30c <_scanf_float+0x3a0>
 800d370:	4630      	mov	r0, r6
 800d372:	4639      	mov	r1, r7
 800d374:	f7f3 fc38 	bl	8000be8 <__aeabi_d2f>
 800d378:	f8c8 0000 	str.w	r0, [r8]
 800d37c:	e7c6      	b.n	800d30c <_scanf_float+0x3a0>
 800d37e:	2500      	movs	r5, #0
 800d380:	e635      	b.n	800cfee <_scanf_float+0x82>
 800d382:	bf00      	nop
 800d384:	08011646 	.word	0x08011646
 800d388:	080119f8 	.word	0x080119f8

0800d38c <std>:
 800d38c:	2300      	movs	r3, #0
 800d38e:	b510      	push	{r4, lr}
 800d390:	4604      	mov	r4, r0
 800d392:	e9c0 3300 	strd	r3, r3, [r0]
 800d396:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d39a:	6083      	str	r3, [r0, #8]
 800d39c:	8181      	strh	r1, [r0, #12]
 800d39e:	6643      	str	r3, [r0, #100]	; 0x64
 800d3a0:	81c2      	strh	r2, [r0, #14]
 800d3a2:	6183      	str	r3, [r0, #24]
 800d3a4:	4619      	mov	r1, r3
 800d3a6:	2208      	movs	r2, #8
 800d3a8:	305c      	adds	r0, #92	; 0x5c
 800d3aa:	f000 f942 	bl	800d632 <memset>
 800d3ae:	4b0d      	ldr	r3, [pc, #52]	; (800d3e4 <std+0x58>)
 800d3b0:	6263      	str	r3, [r4, #36]	; 0x24
 800d3b2:	4b0d      	ldr	r3, [pc, #52]	; (800d3e8 <std+0x5c>)
 800d3b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800d3b6:	4b0d      	ldr	r3, [pc, #52]	; (800d3ec <std+0x60>)
 800d3b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d3ba:	4b0d      	ldr	r3, [pc, #52]	; (800d3f0 <std+0x64>)
 800d3bc:	6323      	str	r3, [r4, #48]	; 0x30
 800d3be:	4b0d      	ldr	r3, [pc, #52]	; (800d3f4 <std+0x68>)
 800d3c0:	6224      	str	r4, [r4, #32]
 800d3c2:	429c      	cmp	r4, r3
 800d3c4:	d006      	beq.n	800d3d4 <std+0x48>
 800d3c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d3ca:	4294      	cmp	r4, r2
 800d3cc:	d002      	beq.n	800d3d4 <std+0x48>
 800d3ce:	33d0      	adds	r3, #208	; 0xd0
 800d3d0:	429c      	cmp	r4, r3
 800d3d2:	d105      	bne.n	800d3e0 <std+0x54>
 800d3d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d3d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3dc:	f000 b9cc 	b.w	800d778 <__retarget_lock_init_recursive>
 800d3e0:	bd10      	pop	{r4, pc}
 800d3e2:	bf00      	nop
 800d3e4:	0800d5a9 	.word	0x0800d5a9
 800d3e8:	0800d5cf 	.word	0x0800d5cf
 800d3ec:	0800d607 	.word	0x0800d607
 800d3f0:	0800d62b 	.word	0x0800d62b
 800d3f4:	20000f40 	.word	0x20000f40

0800d3f8 <stdio_exit_handler>:
 800d3f8:	4a02      	ldr	r2, [pc, #8]	; (800d404 <stdio_exit_handler+0xc>)
 800d3fa:	4903      	ldr	r1, [pc, #12]	; (800d408 <stdio_exit_handler+0x10>)
 800d3fc:	4803      	ldr	r0, [pc, #12]	; (800d40c <stdio_exit_handler+0x14>)
 800d3fe:	f000 b869 	b.w	800d4d4 <_fwalk_sglue>
 800d402:	bf00      	nop
 800d404:	2000002c 	.word	0x2000002c
 800d408:	080105b9 	.word	0x080105b9
 800d40c:	20000038 	.word	0x20000038

0800d410 <cleanup_stdio>:
 800d410:	6841      	ldr	r1, [r0, #4]
 800d412:	4b0c      	ldr	r3, [pc, #48]	; (800d444 <cleanup_stdio+0x34>)
 800d414:	4299      	cmp	r1, r3
 800d416:	b510      	push	{r4, lr}
 800d418:	4604      	mov	r4, r0
 800d41a:	d001      	beq.n	800d420 <cleanup_stdio+0x10>
 800d41c:	f003 f8cc 	bl	80105b8 <_fflush_r>
 800d420:	68a1      	ldr	r1, [r4, #8]
 800d422:	4b09      	ldr	r3, [pc, #36]	; (800d448 <cleanup_stdio+0x38>)
 800d424:	4299      	cmp	r1, r3
 800d426:	d002      	beq.n	800d42e <cleanup_stdio+0x1e>
 800d428:	4620      	mov	r0, r4
 800d42a:	f003 f8c5 	bl	80105b8 <_fflush_r>
 800d42e:	68e1      	ldr	r1, [r4, #12]
 800d430:	4b06      	ldr	r3, [pc, #24]	; (800d44c <cleanup_stdio+0x3c>)
 800d432:	4299      	cmp	r1, r3
 800d434:	d004      	beq.n	800d440 <cleanup_stdio+0x30>
 800d436:	4620      	mov	r0, r4
 800d438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d43c:	f003 b8bc 	b.w	80105b8 <_fflush_r>
 800d440:	bd10      	pop	{r4, pc}
 800d442:	bf00      	nop
 800d444:	20000f40 	.word	0x20000f40
 800d448:	20000fa8 	.word	0x20000fa8
 800d44c:	20001010 	.word	0x20001010

0800d450 <global_stdio_init.part.0>:
 800d450:	b510      	push	{r4, lr}
 800d452:	4b0b      	ldr	r3, [pc, #44]	; (800d480 <global_stdio_init.part.0+0x30>)
 800d454:	4c0b      	ldr	r4, [pc, #44]	; (800d484 <global_stdio_init.part.0+0x34>)
 800d456:	4a0c      	ldr	r2, [pc, #48]	; (800d488 <global_stdio_init.part.0+0x38>)
 800d458:	601a      	str	r2, [r3, #0]
 800d45a:	4620      	mov	r0, r4
 800d45c:	2200      	movs	r2, #0
 800d45e:	2104      	movs	r1, #4
 800d460:	f7ff ff94 	bl	800d38c <std>
 800d464:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d468:	2201      	movs	r2, #1
 800d46a:	2109      	movs	r1, #9
 800d46c:	f7ff ff8e 	bl	800d38c <std>
 800d470:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d474:	2202      	movs	r2, #2
 800d476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d47a:	2112      	movs	r1, #18
 800d47c:	f7ff bf86 	b.w	800d38c <std>
 800d480:	20001078 	.word	0x20001078
 800d484:	20000f40 	.word	0x20000f40
 800d488:	0800d3f9 	.word	0x0800d3f9

0800d48c <__sfp_lock_acquire>:
 800d48c:	4801      	ldr	r0, [pc, #4]	; (800d494 <__sfp_lock_acquire+0x8>)
 800d48e:	f000 b974 	b.w	800d77a <__retarget_lock_acquire_recursive>
 800d492:	bf00      	nop
 800d494:	20001081 	.word	0x20001081

0800d498 <__sfp_lock_release>:
 800d498:	4801      	ldr	r0, [pc, #4]	; (800d4a0 <__sfp_lock_release+0x8>)
 800d49a:	f000 b96f 	b.w	800d77c <__retarget_lock_release_recursive>
 800d49e:	bf00      	nop
 800d4a0:	20001081 	.word	0x20001081

0800d4a4 <__sinit>:
 800d4a4:	b510      	push	{r4, lr}
 800d4a6:	4604      	mov	r4, r0
 800d4a8:	f7ff fff0 	bl	800d48c <__sfp_lock_acquire>
 800d4ac:	6a23      	ldr	r3, [r4, #32]
 800d4ae:	b11b      	cbz	r3, 800d4b8 <__sinit+0x14>
 800d4b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4b4:	f7ff bff0 	b.w	800d498 <__sfp_lock_release>
 800d4b8:	4b04      	ldr	r3, [pc, #16]	; (800d4cc <__sinit+0x28>)
 800d4ba:	6223      	str	r3, [r4, #32]
 800d4bc:	4b04      	ldr	r3, [pc, #16]	; (800d4d0 <__sinit+0x2c>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d1f5      	bne.n	800d4b0 <__sinit+0xc>
 800d4c4:	f7ff ffc4 	bl	800d450 <global_stdio_init.part.0>
 800d4c8:	e7f2      	b.n	800d4b0 <__sinit+0xc>
 800d4ca:	bf00      	nop
 800d4cc:	0800d411 	.word	0x0800d411
 800d4d0:	20001078 	.word	0x20001078

0800d4d4 <_fwalk_sglue>:
 800d4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4d8:	4607      	mov	r7, r0
 800d4da:	4688      	mov	r8, r1
 800d4dc:	4614      	mov	r4, r2
 800d4de:	2600      	movs	r6, #0
 800d4e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d4e4:	f1b9 0901 	subs.w	r9, r9, #1
 800d4e8:	d505      	bpl.n	800d4f6 <_fwalk_sglue+0x22>
 800d4ea:	6824      	ldr	r4, [r4, #0]
 800d4ec:	2c00      	cmp	r4, #0
 800d4ee:	d1f7      	bne.n	800d4e0 <_fwalk_sglue+0xc>
 800d4f0:	4630      	mov	r0, r6
 800d4f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4f6:	89ab      	ldrh	r3, [r5, #12]
 800d4f8:	2b01      	cmp	r3, #1
 800d4fa:	d907      	bls.n	800d50c <_fwalk_sglue+0x38>
 800d4fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d500:	3301      	adds	r3, #1
 800d502:	d003      	beq.n	800d50c <_fwalk_sglue+0x38>
 800d504:	4629      	mov	r1, r5
 800d506:	4638      	mov	r0, r7
 800d508:	47c0      	blx	r8
 800d50a:	4306      	orrs	r6, r0
 800d50c:	3568      	adds	r5, #104	; 0x68
 800d50e:	e7e9      	b.n	800d4e4 <_fwalk_sglue+0x10>

0800d510 <siprintf>:
 800d510:	b40e      	push	{r1, r2, r3}
 800d512:	b500      	push	{lr}
 800d514:	b09c      	sub	sp, #112	; 0x70
 800d516:	ab1d      	add	r3, sp, #116	; 0x74
 800d518:	9002      	str	r0, [sp, #8]
 800d51a:	9006      	str	r0, [sp, #24]
 800d51c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d520:	4809      	ldr	r0, [pc, #36]	; (800d548 <siprintf+0x38>)
 800d522:	9107      	str	r1, [sp, #28]
 800d524:	9104      	str	r1, [sp, #16]
 800d526:	4909      	ldr	r1, [pc, #36]	; (800d54c <siprintf+0x3c>)
 800d528:	f853 2b04 	ldr.w	r2, [r3], #4
 800d52c:	9105      	str	r1, [sp, #20]
 800d52e:	6800      	ldr	r0, [r0, #0]
 800d530:	9301      	str	r3, [sp, #4]
 800d532:	a902      	add	r1, sp, #8
 800d534:	f002 fb9c 	bl	800fc70 <_svfiprintf_r>
 800d538:	9b02      	ldr	r3, [sp, #8]
 800d53a:	2200      	movs	r2, #0
 800d53c:	701a      	strb	r2, [r3, #0]
 800d53e:	b01c      	add	sp, #112	; 0x70
 800d540:	f85d eb04 	ldr.w	lr, [sp], #4
 800d544:	b003      	add	sp, #12
 800d546:	4770      	bx	lr
 800d548:	20000084 	.word	0x20000084
 800d54c:	ffff0208 	.word	0xffff0208

0800d550 <siscanf>:
 800d550:	b40e      	push	{r1, r2, r3}
 800d552:	b510      	push	{r4, lr}
 800d554:	b09f      	sub	sp, #124	; 0x7c
 800d556:	ac21      	add	r4, sp, #132	; 0x84
 800d558:	f44f 7101 	mov.w	r1, #516	; 0x204
 800d55c:	f854 2b04 	ldr.w	r2, [r4], #4
 800d560:	9201      	str	r2, [sp, #4]
 800d562:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d566:	9004      	str	r0, [sp, #16]
 800d568:	9008      	str	r0, [sp, #32]
 800d56a:	f7f2 fe81 	bl	8000270 <strlen>
 800d56e:	4b0c      	ldr	r3, [pc, #48]	; (800d5a0 <siscanf+0x50>)
 800d570:	9005      	str	r0, [sp, #20]
 800d572:	9009      	str	r0, [sp, #36]	; 0x24
 800d574:	930d      	str	r3, [sp, #52]	; 0x34
 800d576:	480b      	ldr	r0, [pc, #44]	; (800d5a4 <siscanf+0x54>)
 800d578:	9a01      	ldr	r2, [sp, #4]
 800d57a:	6800      	ldr	r0, [r0, #0]
 800d57c:	9403      	str	r4, [sp, #12]
 800d57e:	2300      	movs	r3, #0
 800d580:	9311      	str	r3, [sp, #68]	; 0x44
 800d582:	9316      	str	r3, [sp, #88]	; 0x58
 800d584:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d588:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d58c:	a904      	add	r1, sp, #16
 800d58e:	4623      	mov	r3, r4
 800d590:	f002 fcc6 	bl	800ff20 <__ssvfiscanf_r>
 800d594:	b01f      	add	sp, #124	; 0x7c
 800d596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d59a:	b003      	add	sp, #12
 800d59c:	4770      	bx	lr
 800d59e:	bf00      	nop
 800d5a0:	0800d5cb 	.word	0x0800d5cb
 800d5a4:	20000084 	.word	0x20000084

0800d5a8 <__sread>:
 800d5a8:	b510      	push	{r4, lr}
 800d5aa:	460c      	mov	r4, r1
 800d5ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5b0:	f000 f884 	bl	800d6bc <_read_r>
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	bfab      	itete	ge
 800d5b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d5ba:	89a3      	ldrhlt	r3, [r4, #12]
 800d5bc:	181b      	addge	r3, r3, r0
 800d5be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d5c2:	bfac      	ite	ge
 800d5c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d5c6:	81a3      	strhlt	r3, [r4, #12]
 800d5c8:	bd10      	pop	{r4, pc}

0800d5ca <__seofread>:
 800d5ca:	2000      	movs	r0, #0
 800d5cc:	4770      	bx	lr

0800d5ce <__swrite>:
 800d5ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5d2:	461f      	mov	r7, r3
 800d5d4:	898b      	ldrh	r3, [r1, #12]
 800d5d6:	05db      	lsls	r3, r3, #23
 800d5d8:	4605      	mov	r5, r0
 800d5da:	460c      	mov	r4, r1
 800d5dc:	4616      	mov	r6, r2
 800d5de:	d505      	bpl.n	800d5ec <__swrite+0x1e>
 800d5e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5e4:	2302      	movs	r3, #2
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	f000 f856 	bl	800d698 <_lseek_r>
 800d5ec:	89a3      	ldrh	r3, [r4, #12]
 800d5ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d5f6:	81a3      	strh	r3, [r4, #12]
 800d5f8:	4632      	mov	r2, r6
 800d5fa:	463b      	mov	r3, r7
 800d5fc:	4628      	mov	r0, r5
 800d5fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d602:	f000 b87d 	b.w	800d700 <_write_r>

0800d606 <__sseek>:
 800d606:	b510      	push	{r4, lr}
 800d608:	460c      	mov	r4, r1
 800d60a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d60e:	f000 f843 	bl	800d698 <_lseek_r>
 800d612:	1c43      	adds	r3, r0, #1
 800d614:	89a3      	ldrh	r3, [r4, #12]
 800d616:	bf15      	itete	ne
 800d618:	6560      	strne	r0, [r4, #84]	; 0x54
 800d61a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d61e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d622:	81a3      	strheq	r3, [r4, #12]
 800d624:	bf18      	it	ne
 800d626:	81a3      	strhne	r3, [r4, #12]
 800d628:	bd10      	pop	{r4, pc}

0800d62a <__sclose>:
 800d62a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d62e:	f000 b823 	b.w	800d678 <_close_r>

0800d632 <memset>:
 800d632:	4402      	add	r2, r0
 800d634:	4603      	mov	r3, r0
 800d636:	4293      	cmp	r3, r2
 800d638:	d100      	bne.n	800d63c <memset+0xa>
 800d63a:	4770      	bx	lr
 800d63c:	f803 1b01 	strb.w	r1, [r3], #1
 800d640:	e7f9      	b.n	800d636 <memset+0x4>

0800d642 <strstr>:
 800d642:	780a      	ldrb	r2, [r1, #0]
 800d644:	b570      	push	{r4, r5, r6, lr}
 800d646:	b96a      	cbnz	r2, 800d664 <strstr+0x22>
 800d648:	bd70      	pop	{r4, r5, r6, pc}
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d109      	bne.n	800d662 <strstr+0x20>
 800d64e:	460c      	mov	r4, r1
 800d650:	4605      	mov	r5, r0
 800d652:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d656:	2b00      	cmp	r3, #0
 800d658:	d0f6      	beq.n	800d648 <strstr+0x6>
 800d65a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d65e:	429e      	cmp	r6, r3
 800d660:	d0f7      	beq.n	800d652 <strstr+0x10>
 800d662:	3001      	adds	r0, #1
 800d664:	7803      	ldrb	r3, [r0, #0]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d1ef      	bne.n	800d64a <strstr+0x8>
 800d66a:	4618      	mov	r0, r3
 800d66c:	e7ec      	b.n	800d648 <strstr+0x6>
	...

0800d670 <_localeconv_r>:
 800d670:	4800      	ldr	r0, [pc, #0]	; (800d674 <_localeconv_r+0x4>)
 800d672:	4770      	bx	lr
 800d674:	20000178 	.word	0x20000178

0800d678 <_close_r>:
 800d678:	b538      	push	{r3, r4, r5, lr}
 800d67a:	4d06      	ldr	r5, [pc, #24]	; (800d694 <_close_r+0x1c>)
 800d67c:	2300      	movs	r3, #0
 800d67e:	4604      	mov	r4, r0
 800d680:	4608      	mov	r0, r1
 800d682:	602b      	str	r3, [r5, #0]
 800d684:	f7f4 fc13 	bl	8001eae <_close>
 800d688:	1c43      	adds	r3, r0, #1
 800d68a:	d102      	bne.n	800d692 <_close_r+0x1a>
 800d68c:	682b      	ldr	r3, [r5, #0]
 800d68e:	b103      	cbz	r3, 800d692 <_close_r+0x1a>
 800d690:	6023      	str	r3, [r4, #0]
 800d692:	bd38      	pop	{r3, r4, r5, pc}
 800d694:	2000107c 	.word	0x2000107c

0800d698 <_lseek_r>:
 800d698:	b538      	push	{r3, r4, r5, lr}
 800d69a:	4d07      	ldr	r5, [pc, #28]	; (800d6b8 <_lseek_r+0x20>)
 800d69c:	4604      	mov	r4, r0
 800d69e:	4608      	mov	r0, r1
 800d6a0:	4611      	mov	r1, r2
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	602a      	str	r2, [r5, #0]
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	f7f4 fc28 	bl	8001efc <_lseek>
 800d6ac:	1c43      	adds	r3, r0, #1
 800d6ae:	d102      	bne.n	800d6b6 <_lseek_r+0x1e>
 800d6b0:	682b      	ldr	r3, [r5, #0]
 800d6b2:	b103      	cbz	r3, 800d6b6 <_lseek_r+0x1e>
 800d6b4:	6023      	str	r3, [r4, #0]
 800d6b6:	bd38      	pop	{r3, r4, r5, pc}
 800d6b8:	2000107c 	.word	0x2000107c

0800d6bc <_read_r>:
 800d6bc:	b538      	push	{r3, r4, r5, lr}
 800d6be:	4d07      	ldr	r5, [pc, #28]	; (800d6dc <_read_r+0x20>)
 800d6c0:	4604      	mov	r4, r0
 800d6c2:	4608      	mov	r0, r1
 800d6c4:	4611      	mov	r1, r2
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	602a      	str	r2, [r5, #0]
 800d6ca:	461a      	mov	r2, r3
 800d6cc:	f7f4 fbb6 	bl	8001e3c <_read>
 800d6d0:	1c43      	adds	r3, r0, #1
 800d6d2:	d102      	bne.n	800d6da <_read_r+0x1e>
 800d6d4:	682b      	ldr	r3, [r5, #0]
 800d6d6:	b103      	cbz	r3, 800d6da <_read_r+0x1e>
 800d6d8:	6023      	str	r3, [r4, #0]
 800d6da:	bd38      	pop	{r3, r4, r5, pc}
 800d6dc:	2000107c 	.word	0x2000107c

0800d6e0 <_sbrk_r>:
 800d6e0:	b538      	push	{r3, r4, r5, lr}
 800d6e2:	4d06      	ldr	r5, [pc, #24]	; (800d6fc <_sbrk_r+0x1c>)
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	4604      	mov	r4, r0
 800d6e8:	4608      	mov	r0, r1
 800d6ea:	602b      	str	r3, [r5, #0]
 800d6ec:	f7f4 fc14 	bl	8001f18 <_sbrk>
 800d6f0:	1c43      	adds	r3, r0, #1
 800d6f2:	d102      	bne.n	800d6fa <_sbrk_r+0x1a>
 800d6f4:	682b      	ldr	r3, [r5, #0]
 800d6f6:	b103      	cbz	r3, 800d6fa <_sbrk_r+0x1a>
 800d6f8:	6023      	str	r3, [r4, #0]
 800d6fa:	bd38      	pop	{r3, r4, r5, pc}
 800d6fc:	2000107c 	.word	0x2000107c

0800d700 <_write_r>:
 800d700:	b538      	push	{r3, r4, r5, lr}
 800d702:	4d07      	ldr	r5, [pc, #28]	; (800d720 <_write_r+0x20>)
 800d704:	4604      	mov	r4, r0
 800d706:	4608      	mov	r0, r1
 800d708:	4611      	mov	r1, r2
 800d70a:	2200      	movs	r2, #0
 800d70c:	602a      	str	r2, [r5, #0]
 800d70e:	461a      	mov	r2, r3
 800d710:	f7f4 fbb1 	bl	8001e76 <_write>
 800d714:	1c43      	adds	r3, r0, #1
 800d716:	d102      	bne.n	800d71e <_write_r+0x1e>
 800d718:	682b      	ldr	r3, [r5, #0]
 800d71a:	b103      	cbz	r3, 800d71e <_write_r+0x1e>
 800d71c:	6023      	str	r3, [r4, #0]
 800d71e:	bd38      	pop	{r3, r4, r5, pc}
 800d720:	2000107c 	.word	0x2000107c

0800d724 <__errno>:
 800d724:	4b01      	ldr	r3, [pc, #4]	; (800d72c <__errno+0x8>)
 800d726:	6818      	ldr	r0, [r3, #0]
 800d728:	4770      	bx	lr
 800d72a:	bf00      	nop
 800d72c:	20000084 	.word	0x20000084

0800d730 <__libc_init_array>:
 800d730:	b570      	push	{r4, r5, r6, lr}
 800d732:	4d0d      	ldr	r5, [pc, #52]	; (800d768 <__libc_init_array+0x38>)
 800d734:	4c0d      	ldr	r4, [pc, #52]	; (800d76c <__libc_init_array+0x3c>)
 800d736:	1b64      	subs	r4, r4, r5
 800d738:	10a4      	asrs	r4, r4, #2
 800d73a:	2600      	movs	r6, #0
 800d73c:	42a6      	cmp	r6, r4
 800d73e:	d109      	bne.n	800d754 <__libc_init_array+0x24>
 800d740:	4d0b      	ldr	r5, [pc, #44]	; (800d770 <__libc_init_array+0x40>)
 800d742:	4c0c      	ldr	r4, [pc, #48]	; (800d774 <__libc_init_array+0x44>)
 800d744:	f003 ff18 	bl	8011578 <_init>
 800d748:	1b64      	subs	r4, r4, r5
 800d74a:	10a4      	asrs	r4, r4, #2
 800d74c:	2600      	movs	r6, #0
 800d74e:	42a6      	cmp	r6, r4
 800d750:	d105      	bne.n	800d75e <__libc_init_array+0x2e>
 800d752:	bd70      	pop	{r4, r5, r6, pc}
 800d754:	f855 3b04 	ldr.w	r3, [r5], #4
 800d758:	4798      	blx	r3
 800d75a:	3601      	adds	r6, #1
 800d75c:	e7ee      	b.n	800d73c <__libc_init_array+0xc>
 800d75e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d762:	4798      	blx	r3
 800d764:	3601      	adds	r6, #1
 800d766:	e7f2      	b.n	800d74e <__libc_init_array+0x1e>
 800d768:	08011a64 	.word	0x08011a64
 800d76c:	08011a64 	.word	0x08011a64
 800d770:	08011a64 	.word	0x08011a64
 800d774:	08011a68 	.word	0x08011a68

0800d778 <__retarget_lock_init_recursive>:
 800d778:	4770      	bx	lr

0800d77a <__retarget_lock_acquire_recursive>:
 800d77a:	4770      	bx	lr

0800d77c <__retarget_lock_release_recursive>:
 800d77c:	4770      	bx	lr

0800d77e <memcpy>:
 800d77e:	440a      	add	r2, r1
 800d780:	4291      	cmp	r1, r2
 800d782:	f100 33ff 	add.w	r3, r0, #4294967295
 800d786:	d100      	bne.n	800d78a <memcpy+0xc>
 800d788:	4770      	bx	lr
 800d78a:	b510      	push	{r4, lr}
 800d78c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d790:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d794:	4291      	cmp	r1, r2
 800d796:	d1f9      	bne.n	800d78c <memcpy+0xe>
 800d798:	bd10      	pop	{r4, pc}
	...

0800d79c <nanf>:
 800d79c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d7a4 <nanf+0x8>
 800d7a0:	4770      	bx	lr
 800d7a2:	bf00      	nop
 800d7a4:	7fc00000 	.word	0x7fc00000

0800d7a8 <quorem>:
 800d7a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7ac:	6903      	ldr	r3, [r0, #16]
 800d7ae:	690c      	ldr	r4, [r1, #16]
 800d7b0:	42a3      	cmp	r3, r4
 800d7b2:	4607      	mov	r7, r0
 800d7b4:	db7e      	blt.n	800d8b4 <quorem+0x10c>
 800d7b6:	3c01      	subs	r4, #1
 800d7b8:	f101 0814 	add.w	r8, r1, #20
 800d7bc:	f100 0514 	add.w	r5, r0, #20
 800d7c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d7c4:	9301      	str	r3, [sp, #4]
 800d7c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d7ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d7d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d7da:	fbb2 f6f3 	udiv	r6, r2, r3
 800d7de:	d331      	bcc.n	800d844 <quorem+0x9c>
 800d7e0:	f04f 0e00 	mov.w	lr, #0
 800d7e4:	4640      	mov	r0, r8
 800d7e6:	46ac      	mov	ip, r5
 800d7e8:	46f2      	mov	sl, lr
 800d7ea:	f850 2b04 	ldr.w	r2, [r0], #4
 800d7ee:	b293      	uxth	r3, r2
 800d7f0:	fb06 e303 	mla	r3, r6, r3, lr
 800d7f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d7f8:	0c1a      	lsrs	r2, r3, #16
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	ebaa 0303 	sub.w	r3, sl, r3
 800d800:	f8dc a000 	ldr.w	sl, [ip]
 800d804:	fa13 f38a 	uxtah	r3, r3, sl
 800d808:	fb06 220e 	mla	r2, r6, lr, r2
 800d80c:	9300      	str	r3, [sp, #0]
 800d80e:	9b00      	ldr	r3, [sp, #0]
 800d810:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d814:	b292      	uxth	r2, r2
 800d816:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d81a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d81e:	f8bd 3000 	ldrh.w	r3, [sp]
 800d822:	4581      	cmp	r9, r0
 800d824:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d828:	f84c 3b04 	str.w	r3, [ip], #4
 800d82c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d830:	d2db      	bcs.n	800d7ea <quorem+0x42>
 800d832:	f855 300b 	ldr.w	r3, [r5, fp]
 800d836:	b92b      	cbnz	r3, 800d844 <quorem+0x9c>
 800d838:	9b01      	ldr	r3, [sp, #4]
 800d83a:	3b04      	subs	r3, #4
 800d83c:	429d      	cmp	r5, r3
 800d83e:	461a      	mov	r2, r3
 800d840:	d32c      	bcc.n	800d89c <quorem+0xf4>
 800d842:	613c      	str	r4, [r7, #16]
 800d844:	4638      	mov	r0, r7
 800d846:	f001 f93b 	bl	800eac0 <__mcmp>
 800d84a:	2800      	cmp	r0, #0
 800d84c:	db22      	blt.n	800d894 <quorem+0xec>
 800d84e:	3601      	adds	r6, #1
 800d850:	4629      	mov	r1, r5
 800d852:	2000      	movs	r0, #0
 800d854:	f858 2b04 	ldr.w	r2, [r8], #4
 800d858:	f8d1 c000 	ldr.w	ip, [r1]
 800d85c:	b293      	uxth	r3, r2
 800d85e:	1ac3      	subs	r3, r0, r3
 800d860:	0c12      	lsrs	r2, r2, #16
 800d862:	fa13 f38c 	uxtah	r3, r3, ip
 800d866:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d86a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d86e:	b29b      	uxth	r3, r3
 800d870:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d874:	45c1      	cmp	r9, r8
 800d876:	f841 3b04 	str.w	r3, [r1], #4
 800d87a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d87e:	d2e9      	bcs.n	800d854 <quorem+0xac>
 800d880:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d884:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d888:	b922      	cbnz	r2, 800d894 <quorem+0xec>
 800d88a:	3b04      	subs	r3, #4
 800d88c:	429d      	cmp	r5, r3
 800d88e:	461a      	mov	r2, r3
 800d890:	d30a      	bcc.n	800d8a8 <quorem+0x100>
 800d892:	613c      	str	r4, [r7, #16]
 800d894:	4630      	mov	r0, r6
 800d896:	b003      	add	sp, #12
 800d898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d89c:	6812      	ldr	r2, [r2, #0]
 800d89e:	3b04      	subs	r3, #4
 800d8a0:	2a00      	cmp	r2, #0
 800d8a2:	d1ce      	bne.n	800d842 <quorem+0x9a>
 800d8a4:	3c01      	subs	r4, #1
 800d8a6:	e7c9      	b.n	800d83c <quorem+0x94>
 800d8a8:	6812      	ldr	r2, [r2, #0]
 800d8aa:	3b04      	subs	r3, #4
 800d8ac:	2a00      	cmp	r2, #0
 800d8ae:	d1f0      	bne.n	800d892 <quorem+0xea>
 800d8b0:	3c01      	subs	r4, #1
 800d8b2:	e7eb      	b.n	800d88c <quorem+0xe4>
 800d8b4:	2000      	movs	r0, #0
 800d8b6:	e7ee      	b.n	800d896 <quorem+0xee>

0800d8b8 <_dtoa_r>:
 800d8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8bc:	ed2d 8b04 	vpush	{d8-d9}
 800d8c0:	69c5      	ldr	r5, [r0, #28]
 800d8c2:	b093      	sub	sp, #76	; 0x4c
 800d8c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d8c8:	ec57 6b10 	vmov	r6, r7, d0
 800d8cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d8d0:	9107      	str	r1, [sp, #28]
 800d8d2:	4604      	mov	r4, r0
 800d8d4:	920a      	str	r2, [sp, #40]	; 0x28
 800d8d6:	930d      	str	r3, [sp, #52]	; 0x34
 800d8d8:	b975      	cbnz	r5, 800d8f8 <_dtoa_r+0x40>
 800d8da:	2010      	movs	r0, #16
 800d8dc:	f7fe fe24 	bl	800c528 <malloc>
 800d8e0:	4602      	mov	r2, r0
 800d8e2:	61e0      	str	r0, [r4, #28]
 800d8e4:	b920      	cbnz	r0, 800d8f0 <_dtoa_r+0x38>
 800d8e6:	4bae      	ldr	r3, [pc, #696]	; (800dba0 <_dtoa_r+0x2e8>)
 800d8e8:	21ef      	movs	r1, #239	; 0xef
 800d8ea:	48ae      	ldr	r0, [pc, #696]	; (800dba4 <_dtoa_r+0x2ec>)
 800d8ec:	f002 ff34 	bl	8010758 <__assert_func>
 800d8f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d8f4:	6005      	str	r5, [r0, #0]
 800d8f6:	60c5      	str	r5, [r0, #12]
 800d8f8:	69e3      	ldr	r3, [r4, #28]
 800d8fa:	6819      	ldr	r1, [r3, #0]
 800d8fc:	b151      	cbz	r1, 800d914 <_dtoa_r+0x5c>
 800d8fe:	685a      	ldr	r2, [r3, #4]
 800d900:	604a      	str	r2, [r1, #4]
 800d902:	2301      	movs	r3, #1
 800d904:	4093      	lsls	r3, r2
 800d906:	608b      	str	r3, [r1, #8]
 800d908:	4620      	mov	r0, r4
 800d90a:	f000 fe53 	bl	800e5b4 <_Bfree>
 800d90e:	69e3      	ldr	r3, [r4, #28]
 800d910:	2200      	movs	r2, #0
 800d912:	601a      	str	r2, [r3, #0]
 800d914:	1e3b      	subs	r3, r7, #0
 800d916:	bfbb      	ittet	lt
 800d918:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d91c:	9303      	strlt	r3, [sp, #12]
 800d91e:	2300      	movge	r3, #0
 800d920:	2201      	movlt	r2, #1
 800d922:	bfac      	ite	ge
 800d924:	f8c8 3000 	strge.w	r3, [r8]
 800d928:	f8c8 2000 	strlt.w	r2, [r8]
 800d92c:	4b9e      	ldr	r3, [pc, #632]	; (800dba8 <_dtoa_r+0x2f0>)
 800d92e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d932:	ea33 0308 	bics.w	r3, r3, r8
 800d936:	d11b      	bne.n	800d970 <_dtoa_r+0xb8>
 800d938:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d93a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d93e:	6013      	str	r3, [r2, #0]
 800d940:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d944:	4333      	orrs	r3, r6
 800d946:	f000 8593 	beq.w	800e470 <_dtoa_r+0xbb8>
 800d94a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d94c:	b963      	cbnz	r3, 800d968 <_dtoa_r+0xb0>
 800d94e:	4b97      	ldr	r3, [pc, #604]	; (800dbac <_dtoa_r+0x2f4>)
 800d950:	e027      	b.n	800d9a2 <_dtoa_r+0xea>
 800d952:	4b97      	ldr	r3, [pc, #604]	; (800dbb0 <_dtoa_r+0x2f8>)
 800d954:	9300      	str	r3, [sp, #0]
 800d956:	3308      	adds	r3, #8
 800d958:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d95a:	6013      	str	r3, [r2, #0]
 800d95c:	9800      	ldr	r0, [sp, #0]
 800d95e:	b013      	add	sp, #76	; 0x4c
 800d960:	ecbd 8b04 	vpop	{d8-d9}
 800d964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d968:	4b90      	ldr	r3, [pc, #576]	; (800dbac <_dtoa_r+0x2f4>)
 800d96a:	9300      	str	r3, [sp, #0]
 800d96c:	3303      	adds	r3, #3
 800d96e:	e7f3      	b.n	800d958 <_dtoa_r+0xa0>
 800d970:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d974:	2200      	movs	r2, #0
 800d976:	ec51 0b17 	vmov	r0, r1, d7
 800d97a:	eeb0 8a47 	vmov.f32	s16, s14
 800d97e:	eef0 8a67 	vmov.f32	s17, s15
 800d982:	2300      	movs	r3, #0
 800d984:	f7f3 f8a0 	bl	8000ac8 <__aeabi_dcmpeq>
 800d988:	4681      	mov	r9, r0
 800d98a:	b160      	cbz	r0, 800d9a6 <_dtoa_r+0xee>
 800d98c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d98e:	2301      	movs	r3, #1
 800d990:	6013      	str	r3, [r2, #0]
 800d992:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d994:	2b00      	cmp	r3, #0
 800d996:	f000 8568 	beq.w	800e46a <_dtoa_r+0xbb2>
 800d99a:	4b86      	ldr	r3, [pc, #536]	; (800dbb4 <_dtoa_r+0x2fc>)
 800d99c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d99e:	6013      	str	r3, [r2, #0]
 800d9a0:	3b01      	subs	r3, #1
 800d9a2:	9300      	str	r3, [sp, #0]
 800d9a4:	e7da      	b.n	800d95c <_dtoa_r+0xa4>
 800d9a6:	aa10      	add	r2, sp, #64	; 0x40
 800d9a8:	a911      	add	r1, sp, #68	; 0x44
 800d9aa:	4620      	mov	r0, r4
 800d9ac:	eeb0 0a48 	vmov.f32	s0, s16
 800d9b0:	eef0 0a68 	vmov.f32	s1, s17
 800d9b4:	f001 f99a 	bl	800ecec <__d2b>
 800d9b8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d9bc:	4682      	mov	sl, r0
 800d9be:	2d00      	cmp	r5, #0
 800d9c0:	d07f      	beq.n	800dac2 <_dtoa_r+0x20a>
 800d9c2:	ee18 3a90 	vmov	r3, s17
 800d9c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d9ca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d9ce:	ec51 0b18 	vmov	r0, r1, d8
 800d9d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d9d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d9da:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d9de:	4619      	mov	r1, r3
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	4b75      	ldr	r3, [pc, #468]	; (800dbb8 <_dtoa_r+0x300>)
 800d9e4:	f7f2 fc50 	bl	8000288 <__aeabi_dsub>
 800d9e8:	a367      	add	r3, pc, #412	; (adr r3, 800db88 <_dtoa_r+0x2d0>)
 800d9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ee:	f7f2 fe03 	bl	80005f8 <__aeabi_dmul>
 800d9f2:	a367      	add	r3, pc, #412	; (adr r3, 800db90 <_dtoa_r+0x2d8>)
 800d9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f8:	f7f2 fc48 	bl	800028c <__adddf3>
 800d9fc:	4606      	mov	r6, r0
 800d9fe:	4628      	mov	r0, r5
 800da00:	460f      	mov	r7, r1
 800da02:	f7f2 fd8f 	bl	8000524 <__aeabi_i2d>
 800da06:	a364      	add	r3, pc, #400	; (adr r3, 800db98 <_dtoa_r+0x2e0>)
 800da08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da0c:	f7f2 fdf4 	bl	80005f8 <__aeabi_dmul>
 800da10:	4602      	mov	r2, r0
 800da12:	460b      	mov	r3, r1
 800da14:	4630      	mov	r0, r6
 800da16:	4639      	mov	r1, r7
 800da18:	f7f2 fc38 	bl	800028c <__adddf3>
 800da1c:	4606      	mov	r6, r0
 800da1e:	460f      	mov	r7, r1
 800da20:	f7f3 f89a 	bl	8000b58 <__aeabi_d2iz>
 800da24:	2200      	movs	r2, #0
 800da26:	4683      	mov	fp, r0
 800da28:	2300      	movs	r3, #0
 800da2a:	4630      	mov	r0, r6
 800da2c:	4639      	mov	r1, r7
 800da2e:	f7f3 f855 	bl	8000adc <__aeabi_dcmplt>
 800da32:	b148      	cbz	r0, 800da48 <_dtoa_r+0x190>
 800da34:	4658      	mov	r0, fp
 800da36:	f7f2 fd75 	bl	8000524 <__aeabi_i2d>
 800da3a:	4632      	mov	r2, r6
 800da3c:	463b      	mov	r3, r7
 800da3e:	f7f3 f843 	bl	8000ac8 <__aeabi_dcmpeq>
 800da42:	b908      	cbnz	r0, 800da48 <_dtoa_r+0x190>
 800da44:	f10b 3bff 	add.w	fp, fp, #4294967295
 800da48:	f1bb 0f16 	cmp.w	fp, #22
 800da4c:	d857      	bhi.n	800dafe <_dtoa_r+0x246>
 800da4e:	4b5b      	ldr	r3, [pc, #364]	; (800dbbc <_dtoa_r+0x304>)
 800da50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800da54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da58:	ec51 0b18 	vmov	r0, r1, d8
 800da5c:	f7f3 f83e 	bl	8000adc <__aeabi_dcmplt>
 800da60:	2800      	cmp	r0, #0
 800da62:	d04e      	beq.n	800db02 <_dtoa_r+0x24a>
 800da64:	f10b 3bff 	add.w	fp, fp, #4294967295
 800da68:	2300      	movs	r3, #0
 800da6a:	930c      	str	r3, [sp, #48]	; 0x30
 800da6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da6e:	1b5b      	subs	r3, r3, r5
 800da70:	1e5a      	subs	r2, r3, #1
 800da72:	bf45      	ittet	mi
 800da74:	f1c3 0301 	rsbmi	r3, r3, #1
 800da78:	9305      	strmi	r3, [sp, #20]
 800da7a:	2300      	movpl	r3, #0
 800da7c:	2300      	movmi	r3, #0
 800da7e:	9206      	str	r2, [sp, #24]
 800da80:	bf54      	ite	pl
 800da82:	9305      	strpl	r3, [sp, #20]
 800da84:	9306      	strmi	r3, [sp, #24]
 800da86:	f1bb 0f00 	cmp.w	fp, #0
 800da8a:	db3c      	blt.n	800db06 <_dtoa_r+0x24e>
 800da8c:	9b06      	ldr	r3, [sp, #24]
 800da8e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800da92:	445b      	add	r3, fp
 800da94:	9306      	str	r3, [sp, #24]
 800da96:	2300      	movs	r3, #0
 800da98:	9308      	str	r3, [sp, #32]
 800da9a:	9b07      	ldr	r3, [sp, #28]
 800da9c:	2b09      	cmp	r3, #9
 800da9e:	d868      	bhi.n	800db72 <_dtoa_r+0x2ba>
 800daa0:	2b05      	cmp	r3, #5
 800daa2:	bfc4      	itt	gt
 800daa4:	3b04      	subgt	r3, #4
 800daa6:	9307      	strgt	r3, [sp, #28]
 800daa8:	9b07      	ldr	r3, [sp, #28]
 800daaa:	f1a3 0302 	sub.w	r3, r3, #2
 800daae:	bfcc      	ite	gt
 800dab0:	2500      	movgt	r5, #0
 800dab2:	2501      	movle	r5, #1
 800dab4:	2b03      	cmp	r3, #3
 800dab6:	f200 8085 	bhi.w	800dbc4 <_dtoa_r+0x30c>
 800daba:	e8df f003 	tbb	[pc, r3]
 800dabe:	3b2e      	.short	0x3b2e
 800dac0:	5839      	.short	0x5839
 800dac2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800dac6:	441d      	add	r5, r3
 800dac8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dacc:	2b20      	cmp	r3, #32
 800dace:	bfc1      	itttt	gt
 800dad0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dad4:	fa08 f803 	lslgt.w	r8, r8, r3
 800dad8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800dadc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800dae0:	bfd6      	itet	le
 800dae2:	f1c3 0320 	rsble	r3, r3, #32
 800dae6:	ea48 0003 	orrgt.w	r0, r8, r3
 800daea:	fa06 f003 	lslle.w	r0, r6, r3
 800daee:	f7f2 fd09 	bl	8000504 <__aeabi_ui2d>
 800daf2:	2201      	movs	r2, #1
 800daf4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800daf8:	3d01      	subs	r5, #1
 800dafa:	920e      	str	r2, [sp, #56]	; 0x38
 800dafc:	e76f      	b.n	800d9de <_dtoa_r+0x126>
 800dafe:	2301      	movs	r3, #1
 800db00:	e7b3      	b.n	800da6a <_dtoa_r+0x1b2>
 800db02:	900c      	str	r0, [sp, #48]	; 0x30
 800db04:	e7b2      	b.n	800da6c <_dtoa_r+0x1b4>
 800db06:	9b05      	ldr	r3, [sp, #20]
 800db08:	eba3 030b 	sub.w	r3, r3, fp
 800db0c:	9305      	str	r3, [sp, #20]
 800db0e:	f1cb 0300 	rsb	r3, fp, #0
 800db12:	9308      	str	r3, [sp, #32]
 800db14:	2300      	movs	r3, #0
 800db16:	930b      	str	r3, [sp, #44]	; 0x2c
 800db18:	e7bf      	b.n	800da9a <_dtoa_r+0x1e2>
 800db1a:	2300      	movs	r3, #0
 800db1c:	9309      	str	r3, [sp, #36]	; 0x24
 800db1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db20:	2b00      	cmp	r3, #0
 800db22:	dc52      	bgt.n	800dbca <_dtoa_r+0x312>
 800db24:	2301      	movs	r3, #1
 800db26:	9301      	str	r3, [sp, #4]
 800db28:	9304      	str	r3, [sp, #16]
 800db2a:	461a      	mov	r2, r3
 800db2c:	920a      	str	r2, [sp, #40]	; 0x28
 800db2e:	e00b      	b.n	800db48 <_dtoa_r+0x290>
 800db30:	2301      	movs	r3, #1
 800db32:	e7f3      	b.n	800db1c <_dtoa_r+0x264>
 800db34:	2300      	movs	r3, #0
 800db36:	9309      	str	r3, [sp, #36]	; 0x24
 800db38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db3a:	445b      	add	r3, fp
 800db3c:	9301      	str	r3, [sp, #4]
 800db3e:	3301      	adds	r3, #1
 800db40:	2b01      	cmp	r3, #1
 800db42:	9304      	str	r3, [sp, #16]
 800db44:	bfb8      	it	lt
 800db46:	2301      	movlt	r3, #1
 800db48:	69e0      	ldr	r0, [r4, #28]
 800db4a:	2100      	movs	r1, #0
 800db4c:	2204      	movs	r2, #4
 800db4e:	f102 0614 	add.w	r6, r2, #20
 800db52:	429e      	cmp	r6, r3
 800db54:	d93d      	bls.n	800dbd2 <_dtoa_r+0x31a>
 800db56:	6041      	str	r1, [r0, #4]
 800db58:	4620      	mov	r0, r4
 800db5a:	f000 fceb 	bl	800e534 <_Balloc>
 800db5e:	9000      	str	r0, [sp, #0]
 800db60:	2800      	cmp	r0, #0
 800db62:	d139      	bne.n	800dbd8 <_dtoa_r+0x320>
 800db64:	4b16      	ldr	r3, [pc, #88]	; (800dbc0 <_dtoa_r+0x308>)
 800db66:	4602      	mov	r2, r0
 800db68:	f240 11af 	movw	r1, #431	; 0x1af
 800db6c:	e6bd      	b.n	800d8ea <_dtoa_r+0x32>
 800db6e:	2301      	movs	r3, #1
 800db70:	e7e1      	b.n	800db36 <_dtoa_r+0x27e>
 800db72:	2501      	movs	r5, #1
 800db74:	2300      	movs	r3, #0
 800db76:	9307      	str	r3, [sp, #28]
 800db78:	9509      	str	r5, [sp, #36]	; 0x24
 800db7a:	f04f 33ff 	mov.w	r3, #4294967295
 800db7e:	9301      	str	r3, [sp, #4]
 800db80:	9304      	str	r3, [sp, #16]
 800db82:	2200      	movs	r2, #0
 800db84:	2312      	movs	r3, #18
 800db86:	e7d1      	b.n	800db2c <_dtoa_r+0x274>
 800db88:	636f4361 	.word	0x636f4361
 800db8c:	3fd287a7 	.word	0x3fd287a7
 800db90:	8b60c8b3 	.word	0x8b60c8b3
 800db94:	3fc68a28 	.word	0x3fc68a28
 800db98:	509f79fb 	.word	0x509f79fb
 800db9c:	3fd34413 	.word	0x3fd34413
 800dba0:	08011658 	.word	0x08011658
 800dba4:	0801166f 	.word	0x0801166f
 800dba8:	7ff00000 	.word	0x7ff00000
 800dbac:	08011654 	.word	0x08011654
 800dbb0:	0801164b 	.word	0x0801164b
 800dbb4:	080119b1 	.word	0x080119b1
 800dbb8:	3ff80000 	.word	0x3ff80000
 800dbbc:	08011760 	.word	0x08011760
 800dbc0:	080116c7 	.word	0x080116c7
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	9309      	str	r3, [sp, #36]	; 0x24
 800dbc8:	e7d7      	b.n	800db7a <_dtoa_r+0x2c2>
 800dbca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbcc:	9301      	str	r3, [sp, #4]
 800dbce:	9304      	str	r3, [sp, #16]
 800dbd0:	e7ba      	b.n	800db48 <_dtoa_r+0x290>
 800dbd2:	3101      	adds	r1, #1
 800dbd4:	0052      	lsls	r2, r2, #1
 800dbd6:	e7ba      	b.n	800db4e <_dtoa_r+0x296>
 800dbd8:	69e3      	ldr	r3, [r4, #28]
 800dbda:	9a00      	ldr	r2, [sp, #0]
 800dbdc:	601a      	str	r2, [r3, #0]
 800dbde:	9b04      	ldr	r3, [sp, #16]
 800dbe0:	2b0e      	cmp	r3, #14
 800dbe2:	f200 80a8 	bhi.w	800dd36 <_dtoa_r+0x47e>
 800dbe6:	2d00      	cmp	r5, #0
 800dbe8:	f000 80a5 	beq.w	800dd36 <_dtoa_r+0x47e>
 800dbec:	f1bb 0f00 	cmp.w	fp, #0
 800dbf0:	dd38      	ble.n	800dc64 <_dtoa_r+0x3ac>
 800dbf2:	4bc0      	ldr	r3, [pc, #768]	; (800def4 <_dtoa_r+0x63c>)
 800dbf4:	f00b 020f 	and.w	r2, fp, #15
 800dbf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dbfc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800dc00:	e9d3 6700 	ldrd	r6, r7, [r3]
 800dc04:	ea4f 182b 	mov.w	r8, fp, asr #4
 800dc08:	d019      	beq.n	800dc3e <_dtoa_r+0x386>
 800dc0a:	4bbb      	ldr	r3, [pc, #748]	; (800def8 <_dtoa_r+0x640>)
 800dc0c:	ec51 0b18 	vmov	r0, r1, d8
 800dc10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dc14:	f7f2 fe1a 	bl	800084c <__aeabi_ddiv>
 800dc18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc1c:	f008 080f 	and.w	r8, r8, #15
 800dc20:	2503      	movs	r5, #3
 800dc22:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800def8 <_dtoa_r+0x640>
 800dc26:	f1b8 0f00 	cmp.w	r8, #0
 800dc2a:	d10a      	bne.n	800dc42 <_dtoa_r+0x38a>
 800dc2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc30:	4632      	mov	r2, r6
 800dc32:	463b      	mov	r3, r7
 800dc34:	f7f2 fe0a 	bl	800084c <__aeabi_ddiv>
 800dc38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc3c:	e02b      	b.n	800dc96 <_dtoa_r+0x3de>
 800dc3e:	2502      	movs	r5, #2
 800dc40:	e7ef      	b.n	800dc22 <_dtoa_r+0x36a>
 800dc42:	f018 0f01 	tst.w	r8, #1
 800dc46:	d008      	beq.n	800dc5a <_dtoa_r+0x3a2>
 800dc48:	4630      	mov	r0, r6
 800dc4a:	4639      	mov	r1, r7
 800dc4c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800dc50:	f7f2 fcd2 	bl	80005f8 <__aeabi_dmul>
 800dc54:	3501      	adds	r5, #1
 800dc56:	4606      	mov	r6, r0
 800dc58:	460f      	mov	r7, r1
 800dc5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800dc5e:	f109 0908 	add.w	r9, r9, #8
 800dc62:	e7e0      	b.n	800dc26 <_dtoa_r+0x36e>
 800dc64:	f000 809f 	beq.w	800dda6 <_dtoa_r+0x4ee>
 800dc68:	f1cb 0600 	rsb	r6, fp, #0
 800dc6c:	4ba1      	ldr	r3, [pc, #644]	; (800def4 <_dtoa_r+0x63c>)
 800dc6e:	4fa2      	ldr	r7, [pc, #648]	; (800def8 <_dtoa_r+0x640>)
 800dc70:	f006 020f 	and.w	r2, r6, #15
 800dc74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7c:	ec51 0b18 	vmov	r0, r1, d8
 800dc80:	f7f2 fcba 	bl	80005f8 <__aeabi_dmul>
 800dc84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc88:	1136      	asrs	r6, r6, #4
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	2502      	movs	r5, #2
 800dc8e:	2e00      	cmp	r6, #0
 800dc90:	d17e      	bne.n	800dd90 <_dtoa_r+0x4d8>
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d1d0      	bne.n	800dc38 <_dtoa_r+0x380>
 800dc96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc98:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	f000 8084 	beq.w	800ddaa <_dtoa_r+0x4f2>
 800dca2:	4b96      	ldr	r3, [pc, #600]	; (800defc <_dtoa_r+0x644>)
 800dca4:	2200      	movs	r2, #0
 800dca6:	4640      	mov	r0, r8
 800dca8:	4649      	mov	r1, r9
 800dcaa:	f7f2 ff17 	bl	8000adc <__aeabi_dcmplt>
 800dcae:	2800      	cmp	r0, #0
 800dcb0:	d07b      	beq.n	800ddaa <_dtoa_r+0x4f2>
 800dcb2:	9b04      	ldr	r3, [sp, #16]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d078      	beq.n	800ddaa <_dtoa_r+0x4f2>
 800dcb8:	9b01      	ldr	r3, [sp, #4]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	dd39      	ble.n	800dd32 <_dtoa_r+0x47a>
 800dcbe:	4b90      	ldr	r3, [pc, #576]	; (800df00 <_dtoa_r+0x648>)
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	4640      	mov	r0, r8
 800dcc4:	4649      	mov	r1, r9
 800dcc6:	f7f2 fc97 	bl	80005f8 <__aeabi_dmul>
 800dcca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcce:	9e01      	ldr	r6, [sp, #4]
 800dcd0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800dcd4:	3501      	adds	r5, #1
 800dcd6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dcda:	4628      	mov	r0, r5
 800dcdc:	f7f2 fc22 	bl	8000524 <__aeabi_i2d>
 800dce0:	4642      	mov	r2, r8
 800dce2:	464b      	mov	r3, r9
 800dce4:	f7f2 fc88 	bl	80005f8 <__aeabi_dmul>
 800dce8:	4b86      	ldr	r3, [pc, #536]	; (800df04 <_dtoa_r+0x64c>)
 800dcea:	2200      	movs	r2, #0
 800dcec:	f7f2 face 	bl	800028c <__adddf3>
 800dcf0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800dcf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcf8:	9303      	str	r3, [sp, #12]
 800dcfa:	2e00      	cmp	r6, #0
 800dcfc:	d158      	bne.n	800ddb0 <_dtoa_r+0x4f8>
 800dcfe:	4b82      	ldr	r3, [pc, #520]	; (800df08 <_dtoa_r+0x650>)
 800dd00:	2200      	movs	r2, #0
 800dd02:	4640      	mov	r0, r8
 800dd04:	4649      	mov	r1, r9
 800dd06:	f7f2 fabf 	bl	8000288 <__aeabi_dsub>
 800dd0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd0e:	4680      	mov	r8, r0
 800dd10:	4689      	mov	r9, r1
 800dd12:	f7f2 ff01 	bl	8000b18 <__aeabi_dcmpgt>
 800dd16:	2800      	cmp	r0, #0
 800dd18:	f040 8296 	bne.w	800e248 <_dtoa_r+0x990>
 800dd1c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800dd20:	4640      	mov	r0, r8
 800dd22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd26:	4649      	mov	r1, r9
 800dd28:	f7f2 fed8 	bl	8000adc <__aeabi_dcmplt>
 800dd2c:	2800      	cmp	r0, #0
 800dd2e:	f040 8289 	bne.w	800e244 <_dtoa_r+0x98c>
 800dd32:	ed8d 8b02 	vstr	d8, [sp, #8]
 800dd36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	f2c0 814e 	blt.w	800dfda <_dtoa_r+0x722>
 800dd3e:	f1bb 0f0e 	cmp.w	fp, #14
 800dd42:	f300 814a 	bgt.w	800dfda <_dtoa_r+0x722>
 800dd46:	4b6b      	ldr	r3, [pc, #428]	; (800def4 <_dtoa_r+0x63c>)
 800dd48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dd4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dd50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	f280 80dc 	bge.w	800df10 <_dtoa_r+0x658>
 800dd58:	9b04      	ldr	r3, [sp, #16]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	f300 80d8 	bgt.w	800df10 <_dtoa_r+0x658>
 800dd60:	f040 826f 	bne.w	800e242 <_dtoa_r+0x98a>
 800dd64:	4b68      	ldr	r3, [pc, #416]	; (800df08 <_dtoa_r+0x650>)
 800dd66:	2200      	movs	r2, #0
 800dd68:	4640      	mov	r0, r8
 800dd6a:	4649      	mov	r1, r9
 800dd6c:	f7f2 fc44 	bl	80005f8 <__aeabi_dmul>
 800dd70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd74:	f7f2 fec6 	bl	8000b04 <__aeabi_dcmpge>
 800dd78:	9e04      	ldr	r6, [sp, #16]
 800dd7a:	4637      	mov	r7, r6
 800dd7c:	2800      	cmp	r0, #0
 800dd7e:	f040 8245 	bne.w	800e20c <_dtoa_r+0x954>
 800dd82:	9d00      	ldr	r5, [sp, #0]
 800dd84:	2331      	movs	r3, #49	; 0x31
 800dd86:	f805 3b01 	strb.w	r3, [r5], #1
 800dd8a:	f10b 0b01 	add.w	fp, fp, #1
 800dd8e:	e241      	b.n	800e214 <_dtoa_r+0x95c>
 800dd90:	07f2      	lsls	r2, r6, #31
 800dd92:	d505      	bpl.n	800dda0 <_dtoa_r+0x4e8>
 800dd94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd98:	f7f2 fc2e 	bl	80005f8 <__aeabi_dmul>
 800dd9c:	3501      	adds	r5, #1
 800dd9e:	2301      	movs	r3, #1
 800dda0:	1076      	asrs	r6, r6, #1
 800dda2:	3708      	adds	r7, #8
 800dda4:	e773      	b.n	800dc8e <_dtoa_r+0x3d6>
 800dda6:	2502      	movs	r5, #2
 800dda8:	e775      	b.n	800dc96 <_dtoa_r+0x3de>
 800ddaa:	9e04      	ldr	r6, [sp, #16]
 800ddac:	465f      	mov	r7, fp
 800ddae:	e792      	b.n	800dcd6 <_dtoa_r+0x41e>
 800ddb0:	9900      	ldr	r1, [sp, #0]
 800ddb2:	4b50      	ldr	r3, [pc, #320]	; (800def4 <_dtoa_r+0x63c>)
 800ddb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ddb8:	4431      	add	r1, r6
 800ddba:	9102      	str	r1, [sp, #8]
 800ddbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ddbe:	eeb0 9a47 	vmov.f32	s18, s14
 800ddc2:	eef0 9a67 	vmov.f32	s19, s15
 800ddc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ddca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ddce:	2900      	cmp	r1, #0
 800ddd0:	d044      	beq.n	800de5c <_dtoa_r+0x5a4>
 800ddd2:	494e      	ldr	r1, [pc, #312]	; (800df0c <_dtoa_r+0x654>)
 800ddd4:	2000      	movs	r0, #0
 800ddd6:	f7f2 fd39 	bl	800084c <__aeabi_ddiv>
 800ddda:	ec53 2b19 	vmov	r2, r3, d9
 800ddde:	f7f2 fa53 	bl	8000288 <__aeabi_dsub>
 800dde2:	9d00      	ldr	r5, [sp, #0]
 800dde4:	ec41 0b19 	vmov	d9, r0, r1
 800dde8:	4649      	mov	r1, r9
 800ddea:	4640      	mov	r0, r8
 800ddec:	f7f2 feb4 	bl	8000b58 <__aeabi_d2iz>
 800ddf0:	4606      	mov	r6, r0
 800ddf2:	f7f2 fb97 	bl	8000524 <__aeabi_i2d>
 800ddf6:	4602      	mov	r2, r0
 800ddf8:	460b      	mov	r3, r1
 800ddfa:	4640      	mov	r0, r8
 800ddfc:	4649      	mov	r1, r9
 800ddfe:	f7f2 fa43 	bl	8000288 <__aeabi_dsub>
 800de02:	3630      	adds	r6, #48	; 0x30
 800de04:	f805 6b01 	strb.w	r6, [r5], #1
 800de08:	ec53 2b19 	vmov	r2, r3, d9
 800de0c:	4680      	mov	r8, r0
 800de0e:	4689      	mov	r9, r1
 800de10:	f7f2 fe64 	bl	8000adc <__aeabi_dcmplt>
 800de14:	2800      	cmp	r0, #0
 800de16:	d164      	bne.n	800dee2 <_dtoa_r+0x62a>
 800de18:	4642      	mov	r2, r8
 800de1a:	464b      	mov	r3, r9
 800de1c:	4937      	ldr	r1, [pc, #220]	; (800defc <_dtoa_r+0x644>)
 800de1e:	2000      	movs	r0, #0
 800de20:	f7f2 fa32 	bl	8000288 <__aeabi_dsub>
 800de24:	ec53 2b19 	vmov	r2, r3, d9
 800de28:	f7f2 fe58 	bl	8000adc <__aeabi_dcmplt>
 800de2c:	2800      	cmp	r0, #0
 800de2e:	f040 80b6 	bne.w	800df9e <_dtoa_r+0x6e6>
 800de32:	9b02      	ldr	r3, [sp, #8]
 800de34:	429d      	cmp	r5, r3
 800de36:	f43f af7c 	beq.w	800dd32 <_dtoa_r+0x47a>
 800de3a:	4b31      	ldr	r3, [pc, #196]	; (800df00 <_dtoa_r+0x648>)
 800de3c:	ec51 0b19 	vmov	r0, r1, d9
 800de40:	2200      	movs	r2, #0
 800de42:	f7f2 fbd9 	bl	80005f8 <__aeabi_dmul>
 800de46:	4b2e      	ldr	r3, [pc, #184]	; (800df00 <_dtoa_r+0x648>)
 800de48:	ec41 0b19 	vmov	d9, r0, r1
 800de4c:	2200      	movs	r2, #0
 800de4e:	4640      	mov	r0, r8
 800de50:	4649      	mov	r1, r9
 800de52:	f7f2 fbd1 	bl	80005f8 <__aeabi_dmul>
 800de56:	4680      	mov	r8, r0
 800de58:	4689      	mov	r9, r1
 800de5a:	e7c5      	b.n	800dde8 <_dtoa_r+0x530>
 800de5c:	ec51 0b17 	vmov	r0, r1, d7
 800de60:	f7f2 fbca 	bl	80005f8 <__aeabi_dmul>
 800de64:	9b02      	ldr	r3, [sp, #8]
 800de66:	9d00      	ldr	r5, [sp, #0]
 800de68:	930f      	str	r3, [sp, #60]	; 0x3c
 800de6a:	ec41 0b19 	vmov	d9, r0, r1
 800de6e:	4649      	mov	r1, r9
 800de70:	4640      	mov	r0, r8
 800de72:	f7f2 fe71 	bl	8000b58 <__aeabi_d2iz>
 800de76:	4606      	mov	r6, r0
 800de78:	f7f2 fb54 	bl	8000524 <__aeabi_i2d>
 800de7c:	3630      	adds	r6, #48	; 0x30
 800de7e:	4602      	mov	r2, r0
 800de80:	460b      	mov	r3, r1
 800de82:	4640      	mov	r0, r8
 800de84:	4649      	mov	r1, r9
 800de86:	f7f2 f9ff 	bl	8000288 <__aeabi_dsub>
 800de8a:	f805 6b01 	strb.w	r6, [r5], #1
 800de8e:	9b02      	ldr	r3, [sp, #8]
 800de90:	429d      	cmp	r5, r3
 800de92:	4680      	mov	r8, r0
 800de94:	4689      	mov	r9, r1
 800de96:	f04f 0200 	mov.w	r2, #0
 800de9a:	d124      	bne.n	800dee6 <_dtoa_r+0x62e>
 800de9c:	4b1b      	ldr	r3, [pc, #108]	; (800df0c <_dtoa_r+0x654>)
 800de9e:	ec51 0b19 	vmov	r0, r1, d9
 800dea2:	f7f2 f9f3 	bl	800028c <__adddf3>
 800dea6:	4602      	mov	r2, r0
 800dea8:	460b      	mov	r3, r1
 800deaa:	4640      	mov	r0, r8
 800deac:	4649      	mov	r1, r9
 800deae:	f7f2 fe33 	bl	8000b18 <__aeabi_dcmpgt>
 800deb2:	2800      	cmp	r0, #0
 800deb4:	d173      	bne.n	800df9e <_dtoa_r+0x6e6>
 800deb6:	ec53 2b19 	vmov	r2, r3, d9
 800deba:	4914      	ldr	r1, [pc, #80]	; (800df0c <_dtoa_r+0x654>)
 800debc:	2000      	movs	r0, #0
 800debe:	f7f2 f9e3 	bl	8000288 <__aeabi_dsub>
 800dec2:	4602      	mov	r2, r0
 800dec4:	460b      	mov	r3, r1
 800dec6:	4640      	mov	r0, r8
 800dec8:	4649      	mov	r1, r9
 800deca:	f7f2 fe07 	bl	8000adc <__aeabi_dcmplt>
 800dece:	2800      	cmp	r0, #0
 800ded0:	f43f af2f 	beq.w	800dd32 <_dtoa_r+0x47a>
 800ded4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ded6:	1e6b      	subs	r3, r5, #1
 800ded8:	930f      	str	r3, [sp, #60]	; 0x3c
 800deda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dede:	2b30      	cmp	r3, #48	; 0x30
 800dee0:	d0f8      	beq.n	800ded4 <_dtoa_r+0x61c>
 800dee2:	46bb      	mov	fp, r7
 800dee4:	e04a      	b.n	800df7c <_dtoa_r+0x6c4>
 800dee6:	4b06      	ldr	r3, [pc, #24]	; (800df00 <_dtoa_r+0x648>)
 800dee8:	f7f2 fb86 	bl	80005f8 <__aeabi_dmul>
 800deec:	4680      	mov	r8, r0
 800deee:	4689      	mov	r9, r1
 800def0:	e7bd      	b.n	800de6e <_dtoa_r+0x5b6>
 800def2:	bf00      	nop
 800def4:	08011760 	.word	0x08011760
 800def8:	08011738 	.word	0x08011738
 800defc:	3ff00000 	.word	0x3ff00000
 800df00:	40240000 	.word	0x40240000
 800df04:	401c0000 	.word	0x401c0000
 800df08:	40140000 	.word	0x40140000
 800df0c:	3fe00000 	.word	0x3fe00000
 800df10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800df14:	9d00      	ldr	r5, [sp, #0]
 800df16:	4642      	mov	r2, r8
 800df18:	464b      	mov	r3, r9
 800df1a:	4630      	mov	r0, r6
 800df1c:	4639      	mov	r1, r7
 800df1e:	f7f2 fc95 	bl	800084c <__aeabi_ddiv>
 800df22:	f7f2 fe19 	bl	8000b58 <__aeabi_d2iz>
 800df26:	9001      	str	r0, [sp, #4]
 800df28:	f7f2 fafc 	bl	8000524 <__aeabi_i2d>
 800df2c:	4642      	mov	r2, r8
 800df2e:	464b      	mov	r3, r9
 800df30:	f7f2 fb62 	bl	80005f8 <__aeabi_dmul>
 800df34:	4602      	mov	r2, r0
 800df36:	460b      	mov	r3, r1
 800df38:	4630      	mov	r0, r6
 800df3a:	4639      	mov	r1, r7
 800df3c:	f7f2 f9a4 	bl	8000288 <__aeabi_dsub>
 800df40:	9e01      	ldr	r6, [sp, #4]
 800df42:	9f04      	ldr	r7, [sp, #16]
 800df44:	3630      	adds	r6, #48	; 0x30
 800df46:	f805 6b01 	strb.w	r6, [r5], #1
 800df4a:	9e00      	ldr	r6, [sp, #0]
 800df4c:	1bae      	subs	r6, r5, r6
 800df4e:	42b7      	cmp	r7, r6
 800df50:	4602      	mov	r2, r0
 800df52:	460b      	mov	r3, r1
 800df54:	d134      	bne.n	800dfc0 <_dtoa_r+0x708>
 800df56:	f7f2 f999 	bl	800028c <__adddf3>
 800df5a:	4642      	mov	r2, r8
 800df5c:	464b      	mov	r3, r9
 800df5e:	4606      	mov	r6, r0
 800df60:	460f      	mov	r7, r1
 800df62:	f7f2 fdd9 	bl	8000b18 <__aeabi_dcmpgt>
 800df66:	b9c8      	cbnz	r0, 800df9c <_dtoa_r+0x6e4>
 800df68:	4642      	mov	r2, r8
 800df6a:	464b      	mov	r3, r9
 800df6c:	4630      	mov	r0, r6
 800df6e:	4639      	mov	r1, r7
 800df70:	f7f2 fdaa 	bl	8000ac8 <__aeabi_dcmpeq>
 800df74:	b110      	cbz	r0, 800df7c <_dtoa_r+0x6c4>
 800df76:	9b01      	ldr	r3, [sp, #4]
 800df78:	07db      	lsls	r3, r3, #31
 800df7a:	d40f      	bmi.n	800df9c <_dtoa_r+0x6e4>
 800df7c:	4651      	mov	r1, sl
 800df7e:	4620      	mov	r0, r4
 800df80:	f000 fb18 	bl	800e5b4 <_Bfree>
 800df84:	2300      	movs	r3, #0
 800df86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800df88:	702b      	strb	r3, [r5, #0]
 800df8a:	f10b 0301 	add.w	r3, fp, #1
 800df8e:	6013      	str	r3, [r2, #0]
 800df90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df92:	2b00      	cmp	r3, #0
 800df94:	f43f ace2 	beq.w	800d95c <_dtoa_r+0xa4>
 800df98:	601d      	str	r5, [r3, #0]
 800df9a:	e4df      	b.n	800d95c <_dtoa_r+0xa4>
 800df9c:	465f      	mov	r7, fp
 800df9e:	462b      	mov	r3, r5
 800dfa0:	461d      	mov	r5, r3
 800dfa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dfa6:	2a39      	cmp	r2, #57	; 0x39
 800dfa8:	d106      	bne.n	800dfb8 <_dtoa_r+0x700>
 800dfaa:	9a00      	ldr	r2, [sp, #0]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d1f7      	bne.n	800dfa0 <_dtoa_r+0x6e8>
 800dfb0:	9900      	ldr	r1, [sp, #0]
 800dfb2:	2230      	movs	r2, #48	; 0x30
 800dfb4:	3701      	adds	r7, #1
 800dfb6:	700a      	strb	r2, [r1, #0]
 800dfb8:	781a      	ldrb	r2, [r3, #0]
 800dfba:	3201      	adds	r2, #1
 800dfbc:	701a      	strb	r2, [r3, #0]
 800dfbe:	e790      	b.n	800dee2 <_dtoa_r+0x62a>
 800dfc0:	4ba3      	ldr	r3, [pc, #652]	; (800e250 <_dtoa_r+0x998>)
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	f7f2 fb18 	bl	80005f8 <__aeabi_dmul>
 800dfc8:	2200      	movs	r2, #0
 800dfca:	2300      	movs	r3, #0
 800dfcc:	4606      	mov	r6, r0
 800dfce:	460f      	mov	r7, r1
 800dfd0:	f7f2 fd7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800dfd4:	2800      	cmp	r0, #0
 800dfd6:	d09e      	beq.n	800df16 <_dtoa_r+0x65e>
 800dfd8:	e7d0      	b.n	800df7c <_dtoa_r+0x6c4>
 800dfda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfdc:	2a00      	cmp	r2, #0
 800dfde:	f000 80ca 	beq.w	800e176 <_dtoa_r+0x8be>
 800dfe2:	9a07      	ldr	r2, [sp, #28]
 800dfe4:	2a01      	cmp	r2, #1
 800dfe6:	f300 80ad 	bgt.w	800e144 <_dtoa_r+0x88c>
 800dfea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dfec:	2a00      	cmp	r2, #0
 800dfee:	f000 80a5 	beq.w	800e13c <_dtoa_r+0x884>
 800dff2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dff6:	9e08      	ldr	r6, [sp, #32]
 800dff8:	9d05      	ldr	r5, [sp, #20]
 800dffa:	9a05      	ldr	r2, [sp, #20]
 800dffc:	441a      	add	r2, r3
 800dffe:	9205      	str	r2, [sp, #20]
 800e000:	9a06      	ldr	r2, [sp, #24]
 800e002:	2101      	movs	r1, #1
 800e004:	441a      	add	r2, r3
 800e006:	4620      	mov	r0, r4
 800e008:	9206      	str	r2, [sp, #24]
 800e00a:	f000 fbd3 	bl	800e7b4 <__i2b>
 800e00e:	4607      	mov	r7, r0
 800e010:	b165      	cbz	r5, 800e02c <_dtoa_r+0x774>
 800e012:	9b06      	ldr	r3, [sp, #24]
 800e014:	2b00      	cmp	r3, #0
 800e016:	dd09      	ble.n	800e02c <_dtoa_r+0x774>
 800e018:	42ab      	cmp	r3, r5
 800e01a:	9a05      	ldr	r2, [sp, #20]
 800e01c:	bfa8      	it	ge
 800e01e:	462b      	movge	r3, r5
 800e020:	1ad2      	subs	r2, r2, r3
 800e022:	9205      	str	r2, [sp, #20]
 800e024:	9a06      	ldr	r2, [sp, #24]
 800e026:	1aed      	subs	r5, r5, r3
 800e028:	1ad3      	subs	r3, r2, r3
 800e02a:	9306      	str	r3, [sp, #24]
 800e02c:	9b08      	ldr	r3, [sp, #32]
 800e02e:	b1f3      	cbz	r3, 800e06e <_dtoa_r+0x7b6>
 800e030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e032:	2b00      	cmp	r3, #0
 800e034:	f000 80a3 	beq.w	800e17e <_dtoa_r+0x8c6>
 800e038:	2e00      	cmp	r6, #0
 800e03a:	dd10      	ble.n	800e05e <_dtoa_r+0x7a6>
 800e03c:	4639      	mov	r1, r7
 800e03e:	4632      	mov	r2, r6
 800e040:	4620      	mov	r0, r4
 800e042:	f000 fc77 	bl	800e934 <__pow5mult>
 800e046:	4652      	mov	r2, sl
 800e048:	4601      	mov	r1, r0
 800e04a:	4607      	mov	r7, r0
 800e04c:	4620      	mov	r0, r4
 800e04e:	f000 fbc7 	bl	800e7e0 <__multiply>
 800e052:	4651      	mov	r1, sl
 800e054:	4680      	mov	r8, r0
 800e056:	4620      	mov	r0, r4
 800e058:	f000 faac 	bl	800e5b4 <_Bfree>
 800e05c:	46c2      	mov	sl, r8
 800e05e:	9b08      	ldr	r3, [sp, #32]
 800e060:	1b9a      	subs	r2, r3, r6
 800e062:	d004      	beq.n	800e06e <_dtoa_r+0x7b6>
 800e064:	4651      	mov	r1, sl
 800e066:	4620      	mov	r0, r4
 800e068:	f000 fc64 	bl	800e934 <__pow5mult>
 800e06c:	4682      	mov	sl, r0
 800e06e:	2101      	movs	r1, #1
 800e070:	4620      	mov	r0, r4
 800e072:	f000 fb9f 	bl	800e7b4 <__i2b>
 800e076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e078:	2b00      	cmp	r3, #0
 800e07a:	4606      	mov	r6, r0
 800e07c:	f340 8081 	ble.w	800e182 <_dtoa_r+0x8ca>
 800e080:	461a      	mov	r2, r3
 800e082:	4601      	mov	r1, r0
 800e084:	4620      	mov	r0, r4
 800e086:	f000 fc55 	bl	800e934 <__pow5mult>
 800e08a:	9b07      	ldr	r3, [sp, #28]
 800e08c:	2b01      	cmp	r3, #1
 800e08e:	4606      	mov	r6, r0
 800e090:	dd7a      	ble.n	800e188 <_dtoa_r+0x8d0>
 800e092:	f04f 0800 	mov.w	r8, #0
 800e096:	6933      	ldr	r3, [r6, #16]
 800e098:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e09c:	6918      	ldr	r0, [r3, #16]
 800e09e:	f000 fb3b 	bl	800e718 <__hi0bits>
 800e0a2:	f1c0 0020 	rsb	r0, r0, #32
 800e0a6:	9b06      	ldr	r3, [sp, #24]
 800e0a8:	4418      	add	r0, r3
 800e0aa:	f010 001f 	ands.w	r0, r0, #31
 800e0ae:	f000 8094 	beq.w	800e1da <_dtoa_r+0x922>
 800e0b2:	f1c0 0320 	rsb	r3, r0, #32
 800e0b6:	2b04      	cmp	r3, #4
 800e0b8:	f340 8085 	ble.w	800e1c6 <_dtoa_r+0x90e>
 800e0bc:	9b05      	ldr	r3, [sp, #20]
 800e0be:	f1c0 001c 	rsb	r0, r0, #28
 800e0c2:	4403      	add	r3, r0
 800e0c4:	9305      	str	r3, [sp, #20]
 800e0c6:	9b06      	ldr	r3, [sp, #24]
 800e0c8:	4403      	add	r3, r0
 800e0ca:	4405      	add	r5, r0
 800e0cc:	9306      	str	r3, [sp, #24]
 800e0ce:	9b05      	ldr	r3, [sp, #20]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	dd05      	ble.n	800e0e0 <_dtoa_r+0x828>
 800e0d4:	4651      	mov	r1, sl
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	4620      	mov	r0, r4
 800e0da:	f000 fc85 	bl	800e9e8 <__lshift>
 800e0de:	4682      	mov	sl, r0
 800e0e0:	9b06      	ldr	r3, [sp, #24]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	dd05      	ble.n	800e0f2 <_dtoa_r+0x83a>
 800e0e6:	4631      	mov	r1, r6
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	f000 fc7c 	bl	800e9e8 <__lshift>
 800e0f0:	4606      	mov	r6, r0
 800e0f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d072      	beq.n	800e1de <_dtoa_r+0x926>
 800e0f8:	4631      	mov	r1, r6
 800e0fa:	4650      	mov	r0, sl
 800e0fc:	f000 fce0 	bl	800eac0 <__mcmp>
 800e100:	2800      	cmp	r0, #0
 800e102:	da6c      	bge.n	800e1de <_dtoa_r+0x926>
 800e104:	2300      	movs	r3, #0
 800e106:	4651      	mov	r1, sl
 800e108:	220a      	movs	r2, #10
 800e10a:	4620      	mov	r0, r4
 800e10c:	f000 fa74 	bl	800e5f8 <__multadd>
 800e110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e112:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e116:	4682      	mov	sl, r0
 800e118:	2b00      	cmp	r3, #0
 800e11a:	f000 81b0 	beq.w	800e47e <_dtoa_r+0xbc6>
 800e11e:	2300      	movs	r3, #0
 800e120:	4639      	mov	r1, r7
 800e122:	220a      	movs	r2, #10
 800e124:	4620      	mov	r0, r4
 800e126:	f000 fa67 	bl	800e5f8 <__multadd>
 800e12a:	9b01      	ldr	r3, [sp, #4]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	4607      	mov	r7, r0
 800e130:	f300 8096 	bgt.w	800e260 <_dtoa_r+0x9a8>
 800e134:	9b07      	ldr	r3, [sp, #28]
 800e136:	2b02      	cmp	r3, #2
 800e138:	dc59      	bgt.n	800e1ee <_dtoa_r+0x936>
 800e13a:	e091      	b.n	800e260 <_dtoa_r+0x9a8>
 800e13c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e13e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e142:	e758      	b.n	800dff6 <_dtoa_r+0x73e>
 800e144:	9b04      	ldr	r3, [sp, #16]
 800e146:	1e5e      	subs	r6, r3, #1
 800e148:	9b08      	ldr	r3, [sp, #32]
 800e14a:	42b3      	cmp	r3, r6
 800e14c:	bfbf      	itttt	lt
 800e14e:	9b08      	ldrlt	r3, [sp, #32]
 800e150:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e152:	9608      	strlt	r6, [sp, #32]
 800e154:	1af3      	sublt	r3, r6, r3
 800e156:	bfb4      	ite	lt
 800e158:	18d2      	addlt	r2, r2, r3
 800e15a:	1b9e      	subge	r6, r3, r6
 800e15c:	9b04      	ldr	r3, [sp, #16]
 800e15e:	bfbc      	itt	lt
 800e160:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e162:	2600      	movlt	r6, #0
 800e164:	2b00      	cmp	r3, #0
 800e166:	bfb7      	itett	lt
 800e168:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e16c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e170:	1a9d      	sublt	r5, r3, r2
 800e172:	2300      	movlt	r3, #0
 800e174:	e741      	b.n	800dffa <_dtoa_r+0x742>
 800e176:	9e08      	ldr	r6, [sp, #32]
 800e178:	9d05      	ldr	r5, [sp, #20]
 800e17a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e17c:	e748      	b.n	800e010 <_dtoa_r+0x758>
 800e17e:	9a08      	ldr	r2, [sp, #32]
 800e180:	e770      	b.n	800e064 <_dtoa_r+0x7ac>
 800e182:	9b07      	ldr	r3, [sp, #28]
 800e184:	2b01      	cmp	r3, #1
 800e186:	dc19      	bgt.n	800e1bc <_dtoa_r+0x904>
 800e188:	9b02      	ldr	r3, [sp, #8]
 800e18a:	b9bb      	cbnz	r3, 800e1bc <_dtoa_r+0x904>
 800e18c:	9b03      	ldr	r3, [sp, #12]
 800e18e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e192:	b99b      	cbnz	r3, 800e1bc <_dtoa_r+0x904>
 800e194:	9b03      	ldr	r3, [sp, #12]
 800e196:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e19a:	0d1b      	lsrs	r3, r3, #20
 800e19c:	051b      	lsls	r3, r3, #20
 800e19e:	b183      	cbz	r3, 800e1c2 <_dtoa_r+0x90a>
 800e1a0:	9b05      	ldr	r3, [sp, #20]
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	9305      	str	r3, [sp, #20]
 800e1a6:	9b06      	ldr	r3, [sp, #24]
 800e1a8:	3301      	adds	r3, #1
 800e1aa:	9306      	str	r3, [sp, #24]
 800e1ac:	f04f 0801 	mov.w	r8, #1
 800e1b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	f47f af6f 	bne.w	800e096 <_dtoa_r+0x7de>
 800e1b8:	2001      	movs	r0, #1
 800e1ba:	e774      	b.n	800e0a6 <_dtoa_r+0x7ee>
 800e1bc:	f04f 0800 	mov.w	r8, #0
 800e1c0:	e7f6      	b.n	800e1b0 <_dtoa_r+0x8f8>
 800e1c2:	4698      	mov	r8, r3
 800e1c4:	e7f4      	b.n	800e1b0 <_dtoa_r+0x8f8>
 800e1c6:	d082      	beq.n	800e0ce <_dtoa_r+0x816>
 800e1c8:	9a05      	ldr	r2, [sp, #20]
 800e1ca:	331c      	adds	r3, #28
 800e1cc:	441a      	add	r2, r3
 800e1ce:	9205      	str	r2, [sp, #20]
 800e1d0:	9a06      	ldr	r2, [sp, #24]
 800e1d2:	441a      	add	r2, r3
 800e1d4:	441d      	add	r5, r3
 800e1d6:	9206      	str	r2, [sp, #24]
 800e1d8:	e779      	b.n	800e0ce <_dtoa_r+0x816>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	e7f4      	b.n	800e1c8 <_dtoa_r+0x910>
 800e1de:	9b04      	ldr	r3, [sp, #16]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	dc37      	bgt.n	800e254 <_dtoa_r+0x99c>
 800e1e4:	9b07      	ldr	r3, [sp, #28]
 800e1e6:	2b02      	cmp	r3, #2
 800e1e8:	dd34      	ble.n	800e254 <_dtoa_r+0x99c>
 800e1ea:	9b04      	ldr	r3, [sp, #16]
 800e1ec:	9301      	str	r3, [sp, #4]
 800e1ee:	9b01      	ldr	r3, [sp, #4]
 800e1f0:	b963      	cbnz	r3, 800e20c <_dtoa_r+0x954>
 800e1f2:	4631      	mov	r1, r6
 800e1f4:	2205      	movs	r2, #5
 800e1f6:	4620      	mov	r0, r4
 800e1f8:	f000 f9fe 	bl	800e5f8 <__multadd>
 800e1fc:	4601      	mov	r1, r0
 800e1fe:	4606      	mov	r6, r0
 800e200:	4650      	mov	r0, sl
 800e202:	f000 fc5d 	bl	800eac0 <__mcmp>
 800e206:	2800      	cmp	r0, #0
 800e208:	f73f adbb 	bgt.w	800dd82 <_dtoa_r+0x4ca>
 800e20c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e20e:	9d00      	ldr	r5, [sp, #0]
 800e210:	ea6f 0b03 	mvn.w	fp, r3
 800e214:	f04f 0800 	mov.w	r8, #0
 800e218:	4631      	mov	r1, r6
 800e21a:	4620      	mov	r0, r4
 800e21c:	f000 f9ca 	bl	800e5b4 <_Bfree>
 800e220:	2f00      	cmp	r7, #0
 800e222:	f43f aeab 	beq.w	800df7c <_dtoa_r+0x6c4>
 800e226:	f1b8 0f00 	cmp.w	r8, #0
 800e22a:	d005      	beq.n	800e238 <_dtoa_r+0x980>
 800e22c:	45b8      	cmp	r8, r7
 800e22e:	d003      	beq.n	800e238 <_dtoa_r+0x980>
 800e230:	4641      	mov	r1, r8
 800e232:	4620      	mov	r0, r4
 800e234:	f000 f9be 	bl	800e5b4 <_Bfree>
 800e238:	4639      	mov	r1, r7
 800e23a:	4620      	mov	r0, r4
 800e23c:	f000 f9ba 	bl	800e5b4 <_Bfree>
 800e240:	e69c      	b.n	800df7c <_dtoa_r+0x6c4>
 800e242:	2600      	movs	r6, #0
 800e244:	4637      	mov	r7, r6
 800e246:	e7e1      	b.n	800e20c <_dtoa_r+0x954>
 800e248:	46bb      	mov	fp, r7
 800e24a:	4637      	mov	r7, r6
 800e24c:	e599      	b.n	800dd82 <_dtoa_r+0x4ca>
 800e24e:	bf00      	nop
 800e250:	40240000 	.word	0x40240000
 800e254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e256:	2b00      	cmp	r3, #0
 800e258:	f000 80c8 	beq.w	800e3ec <_dtoa_r+0xb34>
 800e25c:	9b04      	ldr	r3, [sp, #16]
 800e25e:	9301      	str	r3, [sp, #4]
 800e260:	2d00      	cmp	r5, #0
 800e262:	dd05      	ble.n	800e270 <_dtoa_r+0x9b8>
 800e264:	4639      	mov	r1, r7
 800e266:	462a      	mov	r2, r5
 800e268:	4620      	mov	r0, r4
 800e26a:	f000 fbbd 	bl	800e9e8 <__lshift>
 800e26e:	4607      	mov	r7, r0
 800e270:	f1b8 0f00 	cmp.w	r8, #0
 800e274:	d05b      	beq.n	800e32e <_dtoa_r+0xa76>
 800e276:	6879      	ldr	r1, [r7, #4]
 800e278:	4620      	mov	r0, r4
 800e27a:	f000 f95b 	bl	800e534 <_Balloc>
 800e27e:	4605      	mov	r5, r0
 800e280:	b928      	cbnz	r0, 800e28e <_dtoa_r+0x9d6>
 800e282:	4b83      	ldr	r3, [pc, #524]	; (800e490 <_dtoa_r+0xbd8>)
 800e284:	4602      	mov	r2, r0
 800e286:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e28a:	f7ff bb2e 	b.w	800d8ea <_dtoa_r+0x32>
 800e28e:	693a      	ldr	r2, [r7, #16]
 800e290:	3202      	adds	r2, #2
 800e292:	0092      	lsls	r2, r2, #2
 800e294:	f107 010c 	add.w	r1, r7, #12
 800e298:	300c      	adds	r0, #12
 800e29a:	f7ff fa70 	bl	800d77e <memcpy>
 800e29e:	2201      	movs	r2, #1
 800e2a0:	4629      	mov	r1, r5
 800e2a2:	4620      	mov	r0, r4
 800e2a4:	f000 fba0 	bl	800e9e8 <__lshift>
 800e2a8:	9b00      	ldr	r3, [sp, #0]
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	9304      	str	r3, [sp, #16]
 800e2ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2b2:	4413      	add	r3, r2
 800e2b4:	9308      	str	r3, [sp, #32]
 800e2b6:	9b02      	ldr	r3, [sp, #8]
 800e2b8:	f003 0301 	and.w	r3, r3, #1
 800e2bc:	46b8      	mov	r8, r7
 800e2be:	9306      	str	r3, [sp, #24]
 800e2c0:	4607      	mov	r7, r0
 800e2c2:	9b04      	ldr	r3, [sp, #16]
 800e2c4:	4631      	mov	r1, r6
 800e2c6:	3b01      	subs	r3, #1
 800e2c8:	4650      	mov	r0, sl
 800e2ca:	9301      	str	r3, [sp, #4]
 800e2cc:	f7ff fa6c 	bl	800d7a8 <quorem>
 800e2d0:	4641      	mov	r1, r8
 800e2d2:	9002      	str	r0, [sp, #8]
 800e2d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e2d8:	4650      	mov	r0, sl
 800e2da:	f000 fbf1 	bl	800eac0 <__mcmp>
 800e2de:	463a      	mov	r2, r7
 800e2e0:	9005      	str	r0, [sp, #20]
 800e2e2:	4631      	mov	r1, r6
 800e2e4:	4620      	mov	r0, r4
 800e2e6:	f000 fc07 	bl	800eaf8 <__mdiff>
 800e2ea:	68c2      	ldr	r2, [r0, #12]
 800e2ec:	4605      	mov	r5, r0
 800e2ee:	bb02      	cbnz	r2, 800e332 <_dtoa_r+0xa7a>
 800e2f0:	4601      	mov	r1, r0
 800e2f2:	4650      	mov	r0, sl
 800e2f4:	f000 fbe4 	bl	800eac0 <__mcmp>
 800e2f8:	4602      	mov	r2, r0
 800e2fa:	4629      	mov	r1, r5
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	9209      	str	r2, [sp, #36]	; 0x24
 800e300:	f000 f958 	bl	800e5b4 <_Bfree>
 800e304:	9b07      	ldr	r3, [sp, #28]
 800e306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e308:	9d04      	ldr	r5, [sp, #16]
 800e30a:	ea43 0102 	orr.w	r1, r3, r2
 800e30e:	9b06      	ldr	r3, [sp, #24]
 800e310:	4319      	orrs	r1, r3
 800e312:	d110      	bne.n	800e336 <_dtoa_r+0xa7e>
 800e314:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e318:	d029      	beq.n	800e36e <_dtoa_r+0xab6>
 800e31a:	9b05      	ldr	r3, [sp, #20]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	dd02      	ble.n	800e326 <_dtoa_r+0xa6e>
 800e320:	9b02      	ldr	r3, [sp, #8]
 800e322:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e326:	9b01      	ldr	r3, [sp, #4]
 800e328:	f883 9000 	strb.w	r9, [r3]
 800e32c:	e774      	b.n	800e218 <_dtoa_r+0x960>
 800e32e:	4638      	mov	r0, r7
 800e330:	e7ba      	b.n	800e2a8 <_dtoa_r+0x9f0>
 800e332:	2201      	movs	r2, #1
 800e334:	e7e1      	b.n	800e2fa <_dtoa_r+0xa42>
 800e336:	9b05      	ldr	r3, [sp, #20]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	db04      	blt.n	800e346 <_dtoa_r+0xa8e>
 800e33c:	9907      	ldr	r1, [sp, #28]
 800e33e:	430b      	orrs	r3, r1
 800e340:	9906      	ldr	r1, [sp, #24]
 800e342:	430b      	orrs	r3, r1
 800e344:	d120      	bne.n	800e388 <_dtoa_r+0xad0>
 800e346:	2a00      	cmp	r2, #0
 800e348:	dded      	ble.n	800e326 <_dtoa_r+0xa6e>
 800e34a:	4651      	mov	r1, sl
 800e34c:	2201      	movs	r2, #1
 800e34e:	4620      	mov	r0, r4
 800e350:	f000 fb4a 	bl	800e9e8 <__lshift>
 800e354:	4631      	mov	r1, r6
 800e356:	4682      	mov	sl, r0
 800e358:	f000 fbb2 	bl	800eac0 <__mcmp>
 800e35c:	2800      	cmp	r0, #0
 800e35e:	dc03      	bgt.n	800e368 <_dtoa_r+0xab0>
 800e360:	d1e1      	bne.n	800e326 <_dtoa_r+0xa6e>
 800e362:	f019 0f01 	tst.w	r9, #1
 800e366:	d0de      	beq.n	800e326 <_dtoa_r+0xa6e>
 800e368:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e36c:	d1d8      	bne.n	800e320 <_dtoa_r+0xa68>
 800e36e:	9a01      	ldr	r2, [sp, #4]
 800e370:	2339      	movs	r3, #57	; 0x39
 800e372:	7013      	strb	r3, [r2, #0]
 800e374:	462b      	mov	r3, r5
 800e376:	461d      	mov	r5, r3
 800e378:	3b01      	subs	r3, #1
 800e37a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e37e:	2a39      	cmp	r2, #57	; 0x39
 800e380:	d06c      	beq.n	800e45c <_dtoa_r+0xba4>
 800e382:	3201      	adds	r2, #1
 800e384:	701a      	strb	r2, [r3, #0]
 800e386:	e747      	b.n	800e218 <_dtoa_r+0x960>
 800e388:	2a00      	cmp	r2, #0
 800e38a:	dd07      	ble.n	800e39c <_dtoa_r+0xae4>
 800e38c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e390:	d0ed      	beq.n	800e36e <_dtoa_r+0xab6>
 800e392:	9a01      	ldr	r2, [sp, #4]
 800e394:	f109 0301 	add.w	r3, r9, #1
 800e398:	7013      	strb	r3, [r2, #0]
 800e39a:	e73d      	b.n	800e218 <_dtoa_r+0x960>
 800e39c:	9b04      	ldr	r3, [sp, #16]
 800e39e:	9a08      	ldr	r2, [sp, #32]
 800e3a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e3a4:	4293      	cmp	r3, r2
 800e3a6:	d043      	beq.n	800e430 <_dtoa_r+0xb78>
 800e3a8:	4651      	mov	r1, sl
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	220a      	movs	r2, #10
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	f000 f922 	bl	800e5f8 <__multadd>
 800e3b4:	45b8      	cmp	r8, r7
 800e3b6:	4682      	mov	sl, r0
 800e3b8:	f04f 0300 	mov.w	r3, #0
 800e3bc:	f04f 020a 	mov.w	r2, #10
 800e3c0:	4641      	mov	r1, r8
 800e3c2:	4620      	mov	r0, r4
 800e3c4:	d107      	bne.n	800e3d6 <_dtoa_r+0xb1e>
 800e3c6:	f000 f917 	bl	800e5f8 <__multadd>
 800e3ca:	4680      	mov	r8, r0
 800e3cc:	4607      	mov	r7, r0
 800e3ce:	9b04      	ldr	r3, [sp, #16]
 800e3d0:	3301      	adds	r3, #1
 800e3d2:	9304      	str	r3, [sp, #16]
 800e3d4:	e775      	b.n	800e2c2 <_dtoa_r+0xa0a>
 800e3d6:	f000 f90f 	bl	800e5f8 <__multadd>
 800e3da:	4639      	mov	r1, r7
 800e3dc:	4680      	mov	r8, r0
 800e3de:	2300      	movs	r3, #0
 800e3e0:	220a      	movs	r2, #10
 800e3e2:	4620      	mov	r0, r4
 800e3e4:	f000 f908 	bl	800e5f8 <__multadd>
 800e3e8:	4607      	mov	r7, r0
 800e3ea:	e7f0      	b.n	800e3ce <_dtoa_r+0xb16>
 800e3ec:	9b04      	ldr	r3, [sp, #16]
 800e3ee:	9301      	str	r3, [sp, #4]
 800e3f0:	9d00      	ldr	r5, [sp, #0]
 800e3f2:	4631      	mov	r1, r6
 800e3f4:	4650      	mov	r0, sl
 800e3f6:	f7ff f9d7 	bl	800d7a8 <quorem>
 800e3fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e3fe:	9b00      	ldr	r3, [sp, #0]
 800e400:	f805 9b01 	strb.w	r9, [r5], #1
 800e404:	1aea      	subs	r2, r5, r3
 800e406:	9b01      	ldr	r3, [sp, #4]
 800e408:	4293      	cmp	r3, r2
 800e40a:	dd07      	ble.n	800e41c <_dtoa_r+0xb64>
 800e40c:	4651      	mov	r1, sl
 800e40e:	2300      	movs	r3, #0
 800e410:	220a      	movs	r2, #10
 800e412:	4620      	mov	r0, r4
 800e414:	f000 f8f0 	bl	800e5f8 <__multadd>
 800e418:	4682      	mov	sl, r0
 800e41a:	e7ea      	b.n	800e3f2 <_dtoa_r+0xb3a>
 800e41c:	9b01      	ldr	r3, [sp, #4]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	bfc8      	it	gt
 800e422:	461d      	movgt	r5, r3
 800e424:	9b00      	ldr	r3, [sp, #0]
 800e426:	bfd8      	it	le
 800e428:	2501      	movle	r5, #1
 800e42a:	441d      	add	r5, r3
 800e42c:	f04f 0800 	mov.w	r8, #0
 800e430:	4651      	mov	r1, sl
 800e432:	2201      	movs	r2, #1
 800e434:	4620      	mov	r0, r4
 800e436:	f000 fad7 	bl	800e9e8 <__lshift>
 800e43a:	4631      	mov	r1, r6
 800e43c:	4682      	mov	sl, r0
 800e43e:	f000 fb3f 	bl	800eac0 <__mcmp>
 800e442:	2800      	cmp	r0, #0
 800e444:	dc96      	bgt.n	800e374 <_dtoa_r+0xabc>
 800e446:	d102      	bne.n	800e44e <_dtoa_r+0xb96>
 800e448:	f019 0f01 	tst.w	r9, #1
 800e44c:	d192      	bne.n	800e374 <_dtoa_r+0xabc>
 800e44e:	462b      	mov	r3, r5
 800e450:	461d      	mov	r5, r3
 800e452:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e456:	2a30      	cmp	r2, #48	; 0x30
 800e458:	d0fa      	beq.n	800e450 <_dtoa_r+0xb98>
 800e45a:	e6dd      	b.n	800e218 <_dtoa_r+0x960>
 800e45c:	9a00      	ldr	r2, [sp, #0]
 800e45e:	429a      	cmp	r2, r3
 800e460:	d189      	bne.n	800e376 <_dtoa_r+0xabe>
 800e462:	f10b 0b01 	add.w	fp, fp, #1
 800e466:	2331      	movs	r3, #49	; 0x31
 800e468:	e796      	b.n	800e398 <_dtoa_r+0xae0>
 800e46a:	4b0a      	ldr	r3, [pc, #40]	; (800e494 <_dtoa_r+0xbdc>)
 800e46c:	f7ff ba99 	b.w	800d9a2 <_dtoa_r+0xea>
 800e470:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e472:	2b00      	cmp	r3, #0
 800e474:	f47f aa6d 	bne.w	800d952 <_dtoa_r+0x9a>
 800e478:	4b07      	ldr	r3, [pc, #28]	; (800e498 <_dtoa_r+0xbe0>)
 800e47a:	f7ff ba92 	b.w	800d9a2 <_dtoa_r+0xea>
 800e47e:	9b01      	ldr	r3, [sp, #4]
 800e480:	2b00      	cmp	r3, #0
 800e482:	dcb5      	bgt.n	800e3f0 <_dtoa_r+0xb38>
 800e484:	9b07      	ldr	r3, [sp, #28]
 800e486:	2b02      	cmp	r3, #2
 800e488:	f73f aeb1 	bgt.w	800e1ee <_dtoa_r+0x936>
 800e48c:	e7b0      	b.n	800e3f0 <_dtoa_r+0xb38>
 800e48e:	bf00      	nop
 800e490:	080116c7 	.word	0x080116c7
 800e494:	080119b0 	.word	0x080119b0
 800e498:	0801164b 	.word	0x0801164b

0800e49c <_free_r>:
 800e49c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e49e:	2900      	cmp	r1, #0
 800e4a0:	d044      	beq.n	800e52c <_free_r+0x90>
 800e4a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4a6:	9001      	str	r0, [sp, #4]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	f1a1 0404 	sub.w	r4, r1, #4
 800e4ae:	bfb8      	it	lt
 800e4b0:	18e4      	addlt	r4, r4, r3
 800e4b2:	f7fe f8e9 	bl	800c688 <__malloc_lock>
 800e4b6:	4a1e      	ldr	r2, [pc, #120]	; (800e530 <_free_r+0x94>)
 800e4b8:	9801      	ldr	r0, [sp, #4]
 800e4ba:	6813      	ldr	r3, [r2, #0]
 800e4bc:	b933      	cbnz	r3, 800e4cc <_free_r+0x30>
 800e4be:	6063      	str	r3, [r4, #4]
 800e4c0:	6014      	str	r4, [r2, #0]
 800e4c2:	b003      	add	sp, #12
 800e4c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4c8:	f7fe b8e4 	b.w	800c694 <__malloc_unlock>
 800e4cc:	42a3      	cmp	r3, r4
 800e4ce:	d908      	bls.n	800e4e2 <_free_r+0x46>
 800e4d0:	6825      	ldr	r5, [r4, #0]
 800e4d2:	1961      	adds	r1, r4, r5
 800e4d4:	428b      	cmp	r3, r1
 800e4d6:	bf01      	itttt	eq
 800e4d8:	6819      	ldreq	r1, [r3, #0]
 800e4da:	685b      	ldreq	r3, [r3, #4]
 800e4dc:	1949      	addeq	r1, r1, r5
 800e4de:	6021      	streq	r1, [r4, #0]
 800e4e0:	e7ed      	b.n	800e4be <_free_r+0x22>
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	685b      	ldr	r3, [r3, #4]
 800e4e6:	b10b      	cbz	r3, 800e4ec <_free_r+0x50>
 800e4e8:	42a3      	cmp	r3, r4
 800e4ea:	d9fa      	bls.n	800e4e2 <_free_r+0x46>
 800e4ec:	6811      	ldr	r1, [r2, #0]
 800e4ee:	1855      	adds	r5, r2, r1
 800e4f0:	42a5      	cmp	r5, r4
 800e4f2:	d10b      	bne.n	800e50c <_free_r+0x70>
 800e4f4:	6824      	ldr	r4, [r4, #0]
 800e4f6:	4421      	add	r1, r4
 800e4f8:	1854      	adds	r4, r2, r1
 800e4fa:	42a3      	cmp	r3, r4
 800e4fc:	6011      	str	r1, [r2, #0]
 800e4fe:	d1e0      	bne.n	800e4c2 <_free_r+0x26>
 800e500:	681c      	ldr	r4, [r3, #0]
 800e502:	685b      	ldr	r3, [r3, #4]
 800e504:	6053      	str	r3, [r2, #4]
 800e506:	440c      	add	r4, r1
 800e508:	6014      	str	r4, [r2, #0]
 800e50a:	e7da      	b.n	800e4c2 <_free_r+0x26>
 800e50c:	d902      	bls.n	800e514 <_free_r+0x78>
 800e50e:	230c      	movs	r3, #12
 800e510:	6003      	str	r3, [r0, #0]
 800e512:	e7d6      	b.n	800e4c2 <_free_r+0x26>
 800e514:	6825      	ldr	r5, [r4, #0]
 800e516:	1961      	adds	r1, r4, r5
 800e518:	428b      	cmp	r3, r1
 800e51a:	bf04      	itt	eq
 800e51c:	6819      	ldreq	r1, [r3, #0]
 800e51e:	685b      	ldreq	r3, [r3, #4]
 800e520:	6063      	str	r3, [r4, #4]
 800e522:	bf04      	itt	eq
 800e524:	1949      	addeq	r1, r1, r5
 800e526:	6021      	streq	r1, [r4, #0]
 800e528:	6054      	str	r4, [r2, #4]
 800e52a:	e7ca      	b.n	800e4c2 <_free_r+0x26>
 800e52c:	b003      	add	sp, #12
 800e52e:	bd30      	pop	{r4, r5, pc}
 800e530:	20000f38 	.word	0x20000f38

0800e534 <_Balloc>:
 800e534:	b570      	push	{r4, r5, r6, lr}
 800e536:	69c6      	ldr	r6, [r0, #28]
 800e538:	4604      	mov	r4, r0
 800e53a:	460d      	mov	r5, r1
 800e53c:	b976      	cbnz	r6, 800e55c <_Balloc+0x28>
 800e53e:	2010      	movs	r0, #16
 800e540:	f7fd fff2 	bl	800c528 <malloc>
 800e544:	4602      	mov	r2, r0
 800e546:	61e0      	str	r0, [r4, #28]
 800e548:	b920      	cbnz	r0, 800e554 <_Balloc+0x20>
 800e54a:	4b18      	ldr	r3, [pc, #96]	; (800e5ac <_Balloc+0x78>)
 800e54c:	4818      	ldr	r0, [pc, #96]	; (800e5b0 <_Balloc+0x7c>)
 800e54e:	216b      	movs	r1, #107	; 0x6b
 800e550:	f002 f902 	bl	8010758 <__assert_func>
 800e554:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e558:	6006      	str	r6, [r0, #0]
 800e55a:	60c6      	str	r6, [r0, #12]
 800e55c:	69e6      	ldr	r6, [r4, #28]
 800e55e:	68f3      	ldr	r3, [r6, #12]
 800e560:	b183      	cbz	r3, 800e584 <_Balloc+0x50>
 800e562:	69e3      	ldr	r3, [r4, #28]
 800e564:	68db      	ldr	r3, [r3, #12]
 800e566:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e56a:	b9b8      	cbnz	r0, 800e59c <_Balloc+0x68>
 800e56c:	2101      	movs	r1, #1
 800e56e:	fa01 f605 	lsl.w	r6, r1, r5
 800e572:	1d72      	adds	r2, r6, #5
 800e574:	0092      	lsls	r2, r2, #2
 800e576:	4620      	mov	r0, r4
 800e578:	f002 f90c 	bl	8010794 <_calloc_r>
 800e57c:	b160      	cbz	r0, 800e598 <_Balloc+0x64>
 800e57e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e582:	e00e      	b.n	800e5a2 <_Balloc+0x6e>
 800e584:	2221      	movs	r2, #33	; 0x21
 800e586:	2104      	movs	r1, #4
 800e588:	4620      	mov	r0, r4
 800e58a:	f002 f903 	bl	8010794 <_calloc_r>
 800e58e:	69e3      	ldr	r3, [r4, #28]
 800e590:	60f0      	str	r0, [r6, #12]
 800e592:	68db      	ldr	r3, [r3, #12]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d1e4      	bne.n	800e562 <_Balloc+0x2e>
 800e598:	2000      	movs	r0, #0
 800e59a:	bd70      	pop	{r4, r5, r6, pc}
 800e59c:	6802      	ldr	r2, [r0, #0]
 800e59e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e5a8:	e7f7      	b.n	800e59a <_Balloc+0x66>
 800e5aa:	bf00      	nop
 800e5ac:	08011658 	.word	0x08011658
 800e5b0:	080116d8 	.word	0x080116d8

0800e5b4 <_Bfree>:
 800e5b4:	b570      	push	{r4, r5, r6, lr}
 800e5b6:	69c6      	ldr	r6, [r0, #28]
 800e5b8:	4605      	mov	r5, r0
 800e5ba:	460c      	mov	r4, r1
 800e5bc:	b976      	cbnz	r6, 800e5dc <_Bfree+0x28>
 800e5be:	2010      	movs	r0, #16
 800e5c0:	f7fd ffb2 	bl	800c528 <malloc>
 800e5c4:	4602      	mov	r2, r0
 800e5c6:	61e8      	str	r0, [r5, #28]
 800e5c8:	b920      	cbnz	r0, 800e5d4 <_Bfree+0x20>
 800e5ca:	4b09      	ldr	r3, [pc, #36]	; (800e5f0 <_Bfree+0x3c>)
 800e5cc:	4809      	ldr	r0, [pc, #36]	; (800e5f4 <_Bfree+0x40>)
 800e5ce:	218f      	movs	r1, #143	; 0x8f
 800e5d0:	f002 f8c2 	bl	8010758 <__assert_func>
 800e5d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e5d8:	6006      	str	r6, [r0, #0]
 800e5da:	60c6      	str	r6, [r0, #12]
 800e5dc:	b13c      	cbz	r4, 800e5ee <_Bfree+0x3a>
 800e5de:	69eb      	ldr	r3, [r5, #28]
 800e5e0:	6862      	ldr	r2, [r4, #4]
 800e5e2:	68db      	ldr	r3, [r3, #12]
 800e5e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e5e8:	6021      	str	r1, [r4, #0]
 800e5ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e5ee:	bd70      	pop	{r4, r5, r6, pc}
 800e5f0:	08011658 	.word	0x08011658
 800e5f4:	080116d8 	.word	0x080116d8

0800e5f8 <__multadd>:
 800e5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5fc:	690d      	ldr	r5, [r1, #16]
 800e5fe:	4607      	mov	r7, r0
 800e600:	460c      	mov	r4, r1
 800e602:	461e      	mov	r6, r3
 800e604:	f101 0c14 	add.w	ip, r1, #20
 800e608:	2000      	movs	r0, #0
 800e60a:	f8dc 3000 	ldr.w	r3, [ip]
 800e60e:	b299      	uxth	r1, r3
 800e610:	fb02 6101 	mla	r1, r2, r1, r6
 800e614:	0c1e      	lsrs	r6, r3, #16
 800e616:	0c0b      	lsrs	r3, r1, #16
 800e618:	fb02 3306 	mla	r3, r2, r6, r3
 800e61c:	b289      	uxth	r1, r1
 800e61e:	3001      	adds	r0, #1
 800e620:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e624:	4285      	cmp	r5, r0
 800e626:	f84c 1b04 	str.w	r1, [ip], #4
 800e62a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e62e:	dcec      	bgt.n	800e60a <__multadd+0x12>
 800e630:	b30e      	cbz	r6, 800e676 <__multadd+0x7e>
 800e632:	68a3      	ldr	r3, [r4, #8]
 800e634:	42ab      	cmp	r3, r5
 800e636:	dc19      	bgt.n	800e66c <__multadd+0x74>
 800e638:	6861      	ldr	r1, [r4, #4]
 800e63a:	4638      	mov	r0, r7
 800e63c:	3101      	adds	r1, #1
 800e63e:	f7ff ff79 	bl	800e534 <_Balloc>
 800e642:	4680      	mov	r8, r0
 800e644:	b928      	cbnz	r0, 800e652 <__multadd+0x5a>
 800e646:	4602      	mov	r2, r0
 800e648:	4b0c      	ldr	r3, [pc, #48]	; (800e67c <__multadd+0x84>)
 800e64a:	480d      	ldr	r0, [pc, #52]	; (800e680 <__multadd+0x88>)
 800e64c:	21ba      	movs	r1, #186	; 0xba
 800e64e:	f002 f883 	bl	8010758 <__assert_func>
 800e652:	6922      	ldr	r2, [r4, #16]
 800e654:	3202      	adds	r2, #2
 800e656:	f104 010c 	add.w	r1, r4, #12
 800e65a:	0092      	lsls	r2, r2, #2
 800e65c:	300c      	adds	r0, #12
 800e65e:	f7ff f88e 	bl	800d77e <memcpy>
 800e662:	4621      	mov	r1, r4
 800e664:	4638      	mov	r0, r7
 800e666:	f7ff ffa5 	bl	800e5b4 <_Bfree>
 800e66a:	4644      	mov	r4, r8
 800e66c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e670:	3501      	adds	r5, #1
 800e672:	615e      	str	r6, [r3, #20]
 800e674:	6125      	str	r5, [r4, #16]
 800e676:	4620      	mov	r0, r4
 800e678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e67c:	080116c7 	.word	0x080116c7
 800e680:	080116d8 	.word	0x080116d8

0800e684 <__s2b>:
 800e684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e688:	460c      	mov	r4, r1
 800e68a:	4615      	mov	r5, r2
 800e68c:	461f      	mov	r7, r3
 800e68e:	2209      	movs	r2, #9
 800e690:	3308      	adds	r3, #8
 800e692:	4606      	mov	r6, r0
 800e694:	fb93 f3f2 	sdiv	r3, r3, r2
 800e698:	2100      	movs	r1, #0
 800e69a:	2201      	movs	r2, #1
 800e69c:	429a      	cmp	r2, r3
 800e69e:	db09      	blt.n	800e6b4 <__s2b+0x30>
 800e6a0:	4630      	mov	r0, r6
 800e6a2:	f7ff ff47 	bl	800e534 <_Balloc>
 800e6a6:	b940      	cbnz	r0, 800e6ba <__s2b+0x36>
 800e6a8:	4602      	mov	r2, r0
 800e6aa:	4b19      	ldr	r3, [pc, #100]	; (800e710 <__s2b+0x8c>)
 800e6ac:	4819      	ldr	r0, [pc, #100]	; (800e714 <__s2b+0x90>)
 800e6ae:	21d3      	movs	r1, #211	; 0xd3
 800e6b0:	f002 f852 	bl	8010758 <__assert_func>
 800e6b4:	0052      	lsls	r2, r2, #1
 800e6b6:	3101      	adds	r1, #1
 800e6b8:	e7f0      	b.n	800e69c <__s2b+0x18>
 800e6ba:	9b08      	ldr	r3, [sp, #32]
 800e6bc:	6143      	str	r3, [r0, #20]
 800e6be:	2d09      	cmp	r5, #9
 800e6c0:	f04f 0301 	mov.w	r3, #1
 800e6c4:	6103      	str	r3, [r0, #16]
 800e6c6:	dd16      	ble.n	800e6f6 <__s2b+0x72>
 800e6c8:	f104 0909 	add.w	r9, r4, #9
 800e6cc:	46c8      	mov	r8, r9
 800e6ce:	442c      	add	r4, r5
 800e6d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e6d4:	4601      	mov	r1, r0
 800e6d6:	3b30      	subs	r3, #48	; 0x30
 800e6d8:	220a      	movs	r2, #10
 800e6da:	4630      	mov	r0, r6
 800e6dc:	f7ff ff8c 	bl	800e5f8 <__multadd>
 800e6e0:	45a0      	cmp	r8, r4
 800e6e2:	d1f5      	bne.n	800e6d0 <__s2b+0x4c>
 800e6e4:	f1a5 0408 	sub.w	r4, r5, #8
 800e6e8:	444c      	add	r4, r9
 800e6ea:	1b2d      	subs	r5, r5, r4
 800e6ec:	1963      	adds	r3, r4, r5
 800e6ee:	42bb      	cmp	r3, r7
 800e6f0:	db04      	blt.n	800e6fc <__s2b+0x78>
 800e6f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6f6:	340a      	adds	r4, #10
 800e6f8:	2509      	movs	r5, #9
 800e6fa:	e7f6      	b.n	800e6ea <__s2b+0x66>
 800e6fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e700:	4601      	mov	r1, r0
 800e702:	3b30      	subs	r3, #48	; 0x30
 800e704:	220a      	movs	r2, #10
 800e706:	4630      	mov	r0, r6
 800e708:	f7ff ff76 	bl	800e5f8 <__multadd>
 800e70c:	e7ee      	b.n	800e6ec <__s2b+0x68>
 800e70e:	bf00      	nop
 800e710:	080116c7 	.word	0x080116c7
 800e714:	080116d8 	.word	0x080116d8

0800e718 <__hi0bits>:
 800e718:	0c03      	lsrs	r3, r0, #16
 800e71a:	041b      	lsls	r3, r3, #16
 800e71c:	b9d3      	cbnz	r3, 800e754 <__hi0bits+0x3c>
 800e71e:	0400      	lsls	r0, r0, #16
 800e720:	2310      	movs	r3, #16
 800e722:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e726:	bf04      	itt	eq
 800e728:	0200      	lsleq	r0, r0, #8
 800e72a:	3308      	addeq	r3, #8
 800e72c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e730:	bf04      	itt	eq
 800e732:	0100      	lsleq	r0, r0, #4
 800e734:	3304      	addeq	r3, #4
 800e736:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e73a:	bf04      	itt	eq
 800e73c:	0080      	lsleq	r0, r0, #2
 800e73e:	3302      	addeq	r3, #2
 800e740:	2800      	cmp	r0, #0
 800e742:	db05      	blt.n	800e750 <__hi0bits+0x38>
 800e744:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e748:	f103 0301 	add.w	r3, r3, #1
 800e74c:	bf08      	it	eq
 800e74e:	2320      	moveq	r3, #32
 800e750:	4618      	mov	r0, r3
 800e752:	4770      	bx	lr
 800e754:	2300      	movs	r3, #0
 800e756:	e7e4      	b.n	800e722 <__hi0bits+0xa>

0800e758 <__lo0bits>:
 800e758:	6803      	ldr	r3, [r0, #0]
 800e75a:	f013 0207 	ands.w	r2, r3, #7
 800e75e:	d00c      	beq.n	800e77a <__lo0bits+0x22>
 800e760:	07d9      	lsls	r1, r3, #31
 800e762:	d422      	bmi.n	800e7aa <__lo0bits+0x52>
 800e764:	079a      	lsls	r2, r3, #30
 800e766:	bf49      	itett	mi
 800e768:	085b      	lsrmi	r3, r3, #1
 800e76a:	089b      	lsrpl	r3, r3, #2
 800e76c:	6003      	strmi	r3, [r0, #0]
 800e76e:	2201      	movmi	r2, #1
 800e770:	bf5c      	itt	pl
 800e772:	6003      	strpl	r3, [r0, #0]
 800e774:	2202      	movpl	r2, #2
 800e776:	4610      	mov	r0, r2
 800e778:	4770      	bx	lr
 800e77a:	b299      	uxth	r1, r3
 800e77c:	b909      	cbnz	r1, 800e782 <__lo0bits+0x2a>
 800e77e:	0c1b      	lsrs	r3, r3, #16
 800e780:	2210      	movs	r2, #16
 800e782:	b2d9      	uxtb	r1, r3
 800e784:	b909      	cbnz	r1, 800e78a <__lo0bits+0x32>
 800e786:	3208      	adds	r2, #8
 800e788:	0a1b      	lsrs	r3, r3, #8
 800e78a:	0719      	lsls	r1, r3, #28
 800e78c:	bf04      	itt	eq
 800e78e:	091b      	lsreq	r3, r3, #4
 800e790:	3204      	addeq	r2, #4
 800e792:	0799      	lsls	r1, r3, #30
 800e794:	bf04      	itt	eq
 800e796:	089b      	lsreq	r3, r3, #2
 800e798:	3202      	addeq	r2, #2
 800e79a:	07d9      	lsls	r1, r3, #31
 800e79c:	d403      	bmi.n	800e7a6 <__lo0bits+0x4e>
 800e79e:	085b      	lsrs	r3, r3, #1
 800e7a0:	f102 0201 	add.w	r2, r2, #1
 800e7a4:	d003      	beq.n	800e7ae <__lo0bits+0x56>
 800e7a6:	6003      	str	r3, [r0, #0]
 800e7a8:	e7e5      	b.n	800e776 <__lo0bits+0x1e>
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	e7e3      	b.n	800e776 <__lo0bits+0x1e>
 800e7ae:	2220      	movs	r2, #32
 800e7b0:	e7e1      	b.n	800e776 <__lo0bits+0x1e>
	...

0800e7b4 <__i2b>:
 800e7b4:	b510      	push	{r4, lr}
 800e7b6:	460c      	mov	r4, r1
 800e7b8:	2101      	movs	r1, #1
 800e7ba:	f7ff febb 	bl	800e534 <_Balloc>
 800e7be:	4602      	mov	r2, r0
 800e7c0:	b928      	cbnz	r0, 800e7ce <__i2b+0x1a>
 800e7c2:	4b05      	ldr	r3, [pc, #20]	; (800e7d8 <__i2b+0x24>)
 800e7c4:	4805      	ldr	r0, [pc, #20]	; (800e7dc <__i2b+0x28>)
 800e7c6:	f240 1145 	movw	r1, #325	; 0x145
 800e7ca:	f001 ffc5 	bl	8010758 <__assert_func>
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	6144      	str	r4, [r0, #20]
 800e7d2:	6103      	str	r3, [r0, #16]
 800e7d4:	bd10      	pop	{r4, pc}
 800e7d6:	bf00      	nop
 800e7d8:	080116c7 	.word	0x080116c7
 800e7dc:	080116d8 	.word	0x080116d8

0800e7e0 <__multiply>:
 800e7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7e4:	4691      	mov	r9, r2
 800e7e6:	690a      	ldr	r2, [r1, #16]
 800e7e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	bfb8      	it	lt
 800e7f0:	460b      	movlt	r3, r1
 800e7f2:	460c      	mov	r4, r1
 800e7f4:	bfbc      	itt	lt
 800e7f6:	464c      	movlt	r4, r9
 800e7f8:	4699      	movlt	r9, r3
 800e7fa:	6927      	ldr	r7, [r4, #16]
 800e7fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e800:	68a3      	ldr	r3, [r4, #8]
 800e802:	6861      	ldr	r1, [r4, #4]
 800e804:	eb07 060a 	add.w	r6, r7, sl
 800e808:	42b3      	cmp	r3, r6
 800e80a:	b085      	sub	sp, #20
 800e80c:	bfb8      	it	lt
 800e80e:	3101      	addlt	r1, #1
 800e810:	f7ff fe90 	bl	800e534 <_Balloc>
 800e814:	b930      	cbnz	r0, 800e824 <__multiply+0x44>
 800e816:	4602      	mov	r2, r0
 800e818:	4b44      	ldr	r3, [pc, #272]	; (800e92c <__multiply+0x14c>)
 800e81a:	4845      	ldr	r0, [pc, #276]	; (800e930 <__multiply+0x150>)
 800e81c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e820:	f001 ff9a 	bl	8010758 <__assert_func>
 800e824:	f100 0514 	add.w	r5, r0, #20
 800e828:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e82c:	462b      	mov	r3, r5
 800e82e:	2200      	movs	r2, #0
 800e830:	4543      	cmp	r3, r8
 800e832:	d321      	bcc.n	800e878 <__multiply+0x98>
 800e834:	f104 0314 	add.w	r3, r4, #20
 800e838:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e83c:	f109 0314 	add.w	r3, r9, #20
 800e840:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e844:	9202      	str	r2, [sp, #8]
 800e846:	1b3a      	subs	r2, r7, r4
 800e848:	3a15      	subs	r2, #21
 800e84a:	f022 0203 	bic.w	r2, r2, #3
 800e84e:	3204      	adds	r2, #4
 800e850:	f104 0115 	add.w	r1, r4, #21
 800e854:	428f      	cmp	r7, r1
 800e856:	bf38      	it	cc
 800e858:	2204      	movcc	r2, #4
 800e85a:	9201      	str	r2, [sp, #4]
 800e85c:	9a02      	ldr	r2, [sp, #8]
 800e85e:	9303      	str	r3, [sp, #12]
 800e860:	429a      	cmp	r2, r3
 800e862:	d80c      	bhi.n	800e87e <__multiply+0x9e>
 800e864:	2e00      	cmp	r6, #0
 800e866:	dd03      	ble.n	800e870 <__multiply+0x90>
 800e868:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d05b      	beq.n	800e928 <__multiply+0x148>
 800e870:	6106      	str	r6, [r0, #16]
 800e872:	b005      	add	sp, #20
 800e874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e878:	f843 2b04 	str.w	r2, [r3], #4
 800e87c:	e7d8      	b.n	800e830 <__multiply+0x50>
 800e87e:	f8b3 a000 	ldrh.w	sl, [r3]
 800e882:	f1ba 0f00 	cmp.w	sl, #0
 800e886:	d024      	beq.n	800e8d2 <__multiply+0xf2>
 800e888:	f104 0e14 	add.w	lr, r4, #20
 800e88c:	46a9      	mov	r9, r5
 800e88e:	f04f 0c00 	mov.w	ip, #0
 800e892:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e896:	f8d9 1000 	ldr.w	r1, [r9]
 800e89a:	fa1f fb82 	uxth.w	fp, r2
 800e89e:	b289      	uxth	r1, r1
 800e8a0:	fb0a 110b 	mla	r1, sl, fp, r1
 800e8a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e8a8:	f8d9 2000 	ldr.w	r2, [r9]
 800e8ac:	4461      	add	r1, ip
 800e8ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e8b2:	fb0a c20b 	mla	r2, sl, fp, ip
 800e8b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e8ba:	b289      	uxth	r1, r1
 800e8bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e8c0:	4577      	cmp	r7, lr
 800e8c2:	f849 1b04 	str.w	r1, [r9], #4
 800e8c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e8ca:	d8e2      	bhi.n	800e892 <__multiply+0xb2>
 800e8cc:	9a01      	ldr	r2, [sp, #4]
 800e8ce:	f845 c002 	str.w	ip, [r5, r2]
 800e8d2:	9a03      	ldr	r2, [sp, #12]
 800e8d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e8d8:	3304      	adds	r3, #4
 800e8da:	f1b9 0f00 	cmp.w	r9, #0
 800e8de:	d021      	beq.n	800e924 <__multiply+0x144>
 800e8e0:	6829      	ldr	r1, [r5, #0]
 800e8e2:	f104 0c14 	add.w	ip, r4, #20
 800e8e6:	46ae      	mov	lr, r5
 800e8e8:	f04f 0a00 	mov.w	sl, #0
 800e8ec:	f8bc b000 	ldrh.w	fp, [ip]
 800e8f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e8f4:	fb09 220b 	mla	r2, r9, fp, r2
 800e8f8:	4452      	add	r2, sl
 800e8fa:	b289      	uxth	r1, r1
 800e8fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e900:	f84e 1b04 	str.w	r1, [lr], #4
 800e904:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e908:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e90c:	f8be 1000 	ldrh.w	r1, [lr]
 800e910:	fb09 110a 	mla	r1, r9, sl, r1
 800e914:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e918:	4567      	cmp	r7, ip
 800e91a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e91e:	d8e5      	bhi.n	800e8ec <__multiply+0x10c>
 800e920:	9a01      	ldr	r2, [sp, #4]
 800e922:	50a9      	str	r1, [r5, r2]
 800e924:	3504      	adds	r5, #4
 800e926:	e799      	b.n	800e85c <__multiply+0x7c>
 800e928:	3e01      	subs	r6, #1
 800e92a:	e79b      	b.n	800e864 <__multiply+0x84>
 800e92c:	080116c7 	.word	0x080116c7
 800e930:	080116d8 	.word	0x080116d8

0800e934 <__pow5mult>:
 800e934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e938:	4615      	mov	r5, r2
 800e93a:	f012 0203 	ands.w	r2, r2, #3
 800e93e:	4606      	mov	r6, r0
 800e940:	460f      	mov	r7, r1
 800e942:	d007      	beq.n	800e954 <__pow5mult+0x20>
 800e944:	4c25      	ldr	r4, [pc, #148]	; (800e9dc <__pow5mult+0xa8>)
 800e946:	3a01      	subs	r2, #1
 800e948:	2300      	movs	r3, #0
 800e94a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e94e:	f7ff fe53 	bl	800e5f8 <__multadd>
 800e952:	4607      	mov	r7, r0
 800e954:	10ad      	asrs	r5, r5, #2
 800e956:	d03d      	beq.n	800e9d4 <__pow5mult+0xa0>
 800e958:	69f4      	ldr	r4, [r6, #28]
 800e95a:	b97c      	cbnz	r4, 800e97c <__pow5mult+0x48>
 800e95c:	2010      	movs	r0, #16
 800e95e:	f7fd fde3 	bl	800c528 <malloc>
 800e962:	4602      	mov	r2, r0
 800e964:	61f0      	str	r0, [r6, #28]
 800e966:	b928      	cbnz	r0, 800e974 <__pow5mult+0x40>
 800e968:	4b1d      	ldr	r3, [pc, #116]	; (800e9e0 <__pow5mult+0xac>)
 800e96a:	481e      	ldr	r0, [pc, #120]	; (800e9e4 <__pow5mult+0xb0>)
 800e96c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e970:	f001 fef2 	bl	8010758 <__assert_func>
 800e974:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e978:	6004      	str	r4, [r0, #0]
 800e97a:	60c4      	str	r4, [r0, #12]
 800e97c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e980:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e984:	b94c      	cbnz	r4, 800e99a <__pow5mult+0x66>
 800e986:	f240 2171 	movw	r1, #625	; 0x271
 800e98a:	4630      	mov	r0, r6
 800e98c:	f7ff ff12 	bl	800e7b4 <__i2b>
 800e990:	2300      	movs	r3, #0
 800e992:	f8c8 0008 	str.w	r0, [r8, #8]
 800e996:	4604      	mov	r4, r0
 800e998:	6003      	str	r3, [r0, #0]
 800e99a:	f04f 0900 	mov.w	r9, #0
 800e99e:	07eb      	lsls	r3, r5, #31
 800e9a0:	d50a      	bpl.n	800e9b8 <__pow5mult+0x84>
 800e9a2:	4639      	mov	r1, r7
 800e9a4:	4622      	mov	r2, r4
 800e9a6:	4630      	mov	r0, r6
 800e9a8:	f7ff ff1a 	bl	800e7e0 <__multiply>
 800e9ac:	4639      	mov	r1, r7
 800e9ae:	4680      	mov	r8, r0
 800e9b0:	4630      	mov	r0, r6
 800e9b2:	f7ff fdff 	bl	800e5b4 <_Bfree>
 800e9b6:	4647      	mov	r7, r8
 800e9b8:	106d      	asrs	r5, r5, #1
 800e9ba:	d00b      	beq.n	800e9d4 <__pow5mult+0xa0>
 800e9bc:	6820      	ldr	r0, [r4, #0]
 800e9be:	b938      	cbnz	r0, 800e9d0 <__pow5mult+0x9c>
 800e9c0:	4622      	mov	r2, r4
 800e9c2:	4621      	mov	r1, r4
 800e9c4:	4630      	mov	r0, r6
 800e9c6:	f7ff ff0b 	bl	800e7e0 <__multiply>
 800e9ca:	6020      	str	r0, [r4, #0]
 800e9cc:	f8c0 9000 	str.w	r9, [r0]
 800e9d0:	4604      	mov	r4, r0
 800e9d2:	e7e4      	b.n	800e99e <__pow5mult+0x6a>
 800e9d4:	4638      	mov	r0, r7
 800e9d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9da:	bf00      	nop
 800e9dc:	08011828 	.word	0x08011828
 800e9e0:	08011658 	.word	0x08011658
 800e9e4:	080116d8 	.word	0x080116d8

0800e9e8 <__lshift>:
 800e9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9ec:	460c      	mov	r4, r1
 800e9ee:	6849      	ldr	r1, [r1, #4]
 800e9f0:	6923      	ldr	r3, [r4, #16]
 800e9f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e9f6:	68a3      	ldr	r3, [r4, #8]
 800e9f8:	4607      	mov	r7, r0
 800e9fa:	4691      	mov	r9, r2
 800e9fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ea00:	f108 0601 	add.w	r6, r8, #1
 800ea04:	42b3      	cmp	r3, r6
 800ea06:	db0b      	blt.n	800ea20 <__lshift+0x38>
 800ea08:	4638      	mov	r0, r7
 800ea0a:	f7ff fd93 	bl	800e534 <_Balloc>
 800ea0e:	4605      	mov	r5, r0
 800ea10:	b948      	cbnz	r0, 800ea26 <__lshift+0x3e>
 800ea12:	4602      	mov	r2, r0
 800ea14:	4b28      	ldr	r3, [pc, #160]	; (800eab8 <__lshift+0xd0>)
 800ea16:	4829      	ldr	r0, [pc, #164]	; (800eabc <__lshift+0xd4>)
 800ea18:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ea1c:	f001 fe9c 	bl	8010758 <__assert_func>
 800ea20:	3101      	adds	r1, #1
 800ea22:	005b      	lsls	r3, r3, #1
 800ea24:	e7ee      	b.n	800ea04 <__lshift+0x1c>
 800ea26:	2300      	movs	r3, #0
 800ea28:	f100 0114 	add.w	r1, r0, #20
 800ea2c:	f100 0210 	add.w	r2, r0, #16
 800ea30:	4618      	mov	r0, r3
 800ea32:	4553      	cmp	r3, sl
 800ea34:	db33      	blt.n	800ea9e <__lshift+0xb6>
 800ea36:	6920      	ldr	r0, [r4, #16]
 800ea38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ea3c:	f104 0314 	add.w	r3, r4, #20
 800ea40:	f019 091f 	ands.w	r9, r9, #31
 800ea44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ea48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ea4c:	d02b      	beq.n	800eaa6 <__lshift+0xbe>
 800ea4e:	f1c9 0e20 	rsb	lr, r9, #32
 800ea52:	468a      	mov	sl, r1
 800ea54:	2200      	movs	r2, #0
 800ea56:	6818      	ldr	r0, [r3, #0]
 800ea58:	fa00 f009 	lsl.w	r0, r0, r9
 800ea5c:	4310      	orrs	r0, r2
 800ea5e:	f84a 0b04 	str.w	r0, [sl], #4
 800ea62:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea66:	459c      	cmp	ip, r3
 800ea68:	fa22 f20e 	lsr.w	r2, r2, lr
 800ea6c:	d8f3      	bhi.n	800ea56 <__lshift+0x6e>
 800ea6e:	ebac 0304 	sub.w	r3, ip, r4
 800ea72:	3b15      	subs	r3, #21
 800ea74:	f023 0303 	bic.w	r3, r3, #3
 800ea78:	3304      	adds	r3, #4
 800ea7a:	f104 0015 	add.w	r0, r4, #21
 800ea7e:	4584      	cmp	ip, r0
 800ea80:	bf38      	it	cc
 800ea82:	2304      	movcc	r3, #4
 800ea84:	50ca      	str	r2, [r1, r3]
 800ea86:	b10a      	cbz	r2, 800ea8c <__lshift+0xa4>
 800ea88:	f108 0602 	add.w	r6, r8, #2
 800ea8c:	3e01      	subs	r6, #1
 800ea8e:	4638      	mov	r0, r7
 800ea90:	612e      	str	r6, [r5, #16]
 800ea92:	4621      	mov	r1, r4
 800ea94:	f7ff fd8e 	bl	800e5b4 <_Bfree>
 800ea98:	4628      	mov	r0, r5
 800ea9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea9e:	f842 0f04 	str.w	r0, [r2, #4]!
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	e7c5      	b.n	800ea32 <__lshift+0x4a>
 800eaa6:	3904      	subs	r1, #4
 800eaa8:	f853 2b04 	ldr.w	r2, [r3], #4
 800eaac:	f841 2f04 	str.w	r2, [r1, #4]!
 800eab0:	459c      	cmp	ip, r3
 800eab2:	d8f9      	bhi.n	800eaa8 <__lshift+0xc0>
 800eab4:	e7ea      	b.n	800ea8c <__lshift+0xa4>
 800eab6:	bf00      	nop
 800eab8:	080116c7 	.word	0x080116c7
 800eabc:	080116d8 	.word	0x080116d8

0800eac0 <__mcmp>:
 800eac0:	b530      	push	{r4, r5, lr}
 800eac2:	6902      	ldr	r2, [r0, #16]
 800eac4:	690c      	ldr	r4, [r1, #16]
 800eac6:	1b12      	subs	r2, r2, r4
 800eac8:	d10e      	bne.n	800eae8 <__mcmp+0x28>
 800eaca:	f100 0314 	add.w	r3, r0, #20
 800eace:	3114      	adds	r1, #20
 800ead0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ead4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ead8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800eadc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800eae0:	42a5      	cmp	r5, r4
 800eae2:	d003      	beq.n	800eaec <__mcmp+0x2c>
 800eae4:	d305      	bcc.n	800eaf2 <__mcmp+0x32>
 800eae6:	2201      	movs	r2, #1
 800eae8:	4610      	mov	r0, r2
 800eaea:	bd30      	pop	{r4, r5, pc}
 800eaec:	4283      	cmp	r3, r0
 800eaee:	d3f3      	bcc.n	800ead8 <__mcmp+0x18>
 800eaf0:	e7fa      	b.n	800eae8 <__mcmp+0x28>
 800eaf2:	f04f 32ff 	mov.w	r2, #4294967295
 800eaf6:	e7f7      	b.n	800eae8 <__mcmp+0x28>

0800eaf8 <__mdiff>:
 800eaf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eafc:	460c      	mov	r4, r1
 800eafe:	4606      	mov	r6, r0
 800eb00:	4611      	mov	r1, r2
 800eb02:	4620      	mov	r0, r4
 800eb04:	4690      	mov	r8, r2
 800eb06:	f7ff ffdb 	bl	800eac0 <__mcmp>
 800eb0a:	1e05      	subs	r5, r0, #0
 800eb0c:	d110      	bne.n	800eb30 <__mdiff+0x38>
 800eb0e:	4629      	mov	r1, r5
 800eb10:	4630      	mov	r0, r6
 800eb12:	f7ff fd0f 	bl	800e534 <_Balloc>
 800eb16:	b930      	cbnz	r0, 800eb26 <__mdiff+0x2e>
 800eb18:	4b3a      	ldr	r3, [pc, #232]	; (800ec04 <__mdiff+0x10c>)
 800eb1a:	4602      	mov	r2, r0
 800eb1c:	f240 2137 	movw	r1, #567	; 0x237
 800eb20:	4839      	ldr	r0, [pc, #228]	; (800ec08 <__mdiff+0x110>)
 800eb22:	f001 fe19 	bl	8010758 <__assert_func>
 800eb26:	2301      	movs	r3, #1
 800eb28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eb2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb30:	bfa4      	itt	ge
 800eb32:	4643      	movge	r3, r8
 800eb34:	46a0      	movge	r8, r4
 800eb36:	4630      	mov	r0, r6
 800eb38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800eb3c:	bfa6      	itte	ge
 800eb3e:	461c      	movge	r4, r3
 800eb40:	2500      	movge	r5, #0
 800eb42:	2501      	movlt	r5, #1
 800eb44:	f7ff fcf6 	bl	800e534 <_Balloc>
 800eb48:	b920      	cbnz	r0, 800eb54 <__mdiff+0x5c>
 800eb4a:	4b2e      	ldr	r3, [pc, #184]	; (800ec04 <__mdiff+0x10c>)
 800eb4c:	4602      	mov	r2, r0
 800eb4e:	f240 2145 	movw	r1, #581	; 0x245
 800eb52:	e7e5      	b.n	800eb20 <__mdiff+0x28>
 800eb54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800eb58:	6926      	ldr	r6, [r4, #16]
 800eb5a:	60c5      	str	r5, [r0, #12]
 800eb5c:	f104 0914 	add.w	r9, r4, #20
 800eb60:	f108 0514 	add.w	r5, r8, #20
 800eb64:	f100 0e14 	add.w	lr, r0, #20
 800eb68:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800eb6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800eb70:	f108 0210 	add.w	r2, r8, #16
 800eb74:	46f2      	mov	sl, lr
 800eb76:	2100      	movs	r1, #0
 800eb78:	f859 3b04 	ldr.w	r3, [r9], #4
 800eb7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800eb80:	fa11 f88b 	uxtah	r8, r1, fp
 800eb84:	b299      	uxth	r1, r3
 800eb86:	0c1b      	lsrs	r3, r3, #16
 800eb88:	eba8 0801 	sub.w	r8, r8, r1
 800eb8c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800eb90:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800eb94:	fa1f f888 	uxth.w	r8, r8
 800eb98:	1419      	asrs	r1, r3, #16
 800eb9a:	454e      	cmp	r6, r9
 800eb9c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800eba0:	f84a 3b04 	str.w	r3, [sl], #4
 800eba4:	d8e8      	bhi.n	800eb78 <__mdiff+0x80>
 800eba6:	1b33      	subs	r3, r6, r4
 800eba8:	3b15      	subs	r3, #21
 800ebaa:	f023 0303 	bic.w	r3, r3, #3
 800ebae:	3304      	adds	r3, #4
 800ebb0:	3415      	adds	r4, #21
 800ebb2:	42a6      	cmp	r6, r4
 800ebb4:	bf38      	it	cc
 800ebb6:	2304      	movcc	r3, #4
 800ebb8:	441d      	add	r5, r3
 800ebba:	4473      	add	r3, lr
 800ebbc:	469e      	mov	lr, r3
 800ebbe:	462e      	mov	r6, r5
 800ebc0:	4566      	cmp	r6, ip
 800ebc2:	d30e      	bcc.n	800ebe2 <__mdiff+0xea>
 800ebc4:	f10c 0203 	add.w	r2, ip, #3
 800ebc8:	1b52      	subs	r2, r2, r5
 800ebca:	f022 0203 	bic.w	r2, r2, #3
 800ebce:	3d03      	subs	r5, #3
 800ebd0:	45ac      	cmp	ip, r5
 800ebd2:	bf38      	it	cc
 800ebd4:	2200      	movcc	r2, #0
 800ebd6:	4413      	add	r3, r2
 800ebd8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ebdc:	b17a      	cbz	r2, 800ebfe <__mdiff+0x106>
 800ebde:	6107      	str	r7, [r0, #16]
 800ebe0:	e7a4      	b.n	800eb2c <__mdiff+0x34>
 800ebe2:	f856 8b04 	ldr.w	r8, [r6], #4
 800ebe6:	fa11 f288 	uxtah	r2, r1, r8
 800ebea:	1414      	asrs	r4, r2, #16
 800ebec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ebf0:	b292      	uxth	r2, r2
 800ebf2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ebf6:	f84e 2b04 	str.w	r2, [lr], #4
 800ebfa:	1421      	asrs	r1, r4, #16
 800ebfc:	e7e0      	b.n	800ebc0 <__mdiff+0xc8>
 800ebfe:	3f01      	subs	r7, #1
 800ec00:	e7ea      	b.n	800ebd8 <__mdiff+0xe0>
 800ec02:	bf00      	nop
 800ec04:	080116c7 	.word	0x080116c7
 800ec08:	080116d8 	.word	0x080116d8

0800ec0c <__ulp>:
 800ec0c:	b082      	sub	sp, #8
 800ec0e:	ed8d 0b00 	vstr	d0, [sp]
 800ec12:	9a01      	ldr	r2, [sp, #4]
 800ec14:	4b0f      	ldr	r3, [pc, #60]	; (800ec54 <__ulp+0x48>)
 800ec16:	4013      	ands	r3, r2
 800ec18:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	dc08      	bgt.n	800ec32 <__ulp+0x26>
 800ec20:	425b      	negs	r3, r3
 800ec22:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ec26:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ec2a:	da04      	bge.n	800ec36 <__ulp+0x2a>
 800ec2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ec30:	4113      	asrs	r3, r2
 800ec32:	2200      	movs	r2, #0
 800ec34:	e008      	b.n	800ec48 <__ulp+0x3c>
 800ec36:	f1a2 0314 	sub.w	r3, r2, #20
 800ec3a:	2b1e      	cmp	r3, #30
 800ec3c:	bfda      	itte	le
 800ec3e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ec42:	40da      	lsrle	r2, r3
 800ec44:	2201      	movgt	r2, #1
 800ec46:	2300      	movs	r3, #0
 800ec48:	4619      	mov	r1, r3
 800ec4a:	4610      	mov	r0, r2
 800ec4c:	ec41 0b10 	vmov	d0, r0, r1
 800ec50:	b002      	add	sp, #8
 800ec52:	4770      	bx	lr
 800ec54:	7ff00000 	.word	0x7ff00000

0800ec58 <__b2d>:
 800ec58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec5c:	6906      	ldr	r6, [r0, #16]
 800ec5e:	f100 0814 	add.w	r8, r0, #20
 800ec62:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ec66:	1f37      	subs	r7, r6, #4
 800ec68:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ec6c:	4610      	mov	r0, r2
 800ec6e:	f7ff fd53 	bl	800e718 <__hi0bits>
 800ec72:	f1c0 0320 	rsb	r3, r0, #32
 800ec76:	280a      	cmp	r0, #10
 800ec78:	600b      	str	r3, [r1, #0]
 800ec7a:	491b      	ldr	r1, [pc, #108]	; (800ece8 <__b2d+0x90>)
 800ec7c:	dc15      	bgt.n	800ecaa <__b2d+0x52>
 800ec7e:	f1c0 0c0b 	rsb	ip, r0, #11
 800ec82:	fa22 f30c 	lsr.w	r3, r2, ip
 800ec86:	45b8      	cmp	r8, r7
 800ec88:	ea43 0501 	orr.w	r5, r3, r1
 800ec8c:	bf34      	ite	cc
 800ec8e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ec92:	2300      	movcs	r3, #0
 800ec94:	3015      	adds	r0, #21
 800ec96:	fa02 f000 	lsl.w	r0, r2, r0
 800ec9a:	fa23 f30c 	lsr.w	r3, r3, ip
 800ec9e:	4303      	orrs	r3, r0
 800eca0:	461c      	mov	r4, r3
 800eca2:	ec45 4b10 	vmov	d0, r4, r5
 800eca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecaa:	45b8      	cmp	r8, r7
 800ecac:	bf3a      	itte	cc
 800ecae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ecb2:	f1a6 0708 	subcc.w	r7, r6, #8
 800ecb6:	2300      	movcs	r3, #0
 800ecb8:	380b      	subs	r0, #11
 800ecba:	d012      	beq.n	800ece2 <__b2d+0x8a>
 800ecbc:	f1c0 0120 	rsb	r1, r0, #32
 800ecc0:	fa23 f401 	lsr.w	r4, r3, r1
 800ecc4:	4082      	lsls	r2, r0
 800ecc6:	4322      	orrs	r2, r4
 800ecc8:	4547      	cmp	r7, r8
 800ecca:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800ecce:	bf8c      	ite	hi
 800ecd0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ecd4:	2200      	movls	r2, #0
 800ecd6:	4083      	lsls	r3, r0
 800ecd8:	40ca      	lsrs	r2, r1
 800ecda:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ecde:	4313      	orrs	r3, r2
 800ece0:	e7de      	b.n	800eca0 <__b2d+0x48>
 800ece2:	ea42 0501 	orr.w	r5, r2, r1
 800ece6:	e7db      	b.n	800eca0 <__b2d+0x48>
 800ece8:	3ff00000 	.word	0x3ff00000

0800ecec <__d2b>:
 800ecec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ecf0:	460f      	mov	r7, r1
 800ecf2:	2101      	movs	r1, #1
 800ecf4:	ec59 8b10 	vmov	r8, r9, d0
 800ecf8:	4616      	mov	r6, r2
 800ecfa:	f7ff fc1b 	bl	800e534 <_Balloc>
 800ecfe:	4604      	mov	r4, r0
 800ed00:	b930      	cbnz	r0, 800ed10 <__d2b+0x24>
 800ed02:	4602      	mov	r2, r0
 800ed04:	4b24      	ldr	r3, [pc, #144]	; (800ed98 <__d2b+0xac>)
 800ed06:	4825      	ldr	r0, [pc, #148]	; (800ed9c <__d2b+0xb0>)
 800ed08:	f240 310f 	movw	r1, #783	; 0x30f
 800ed0c:	f001 fd24 	bl	8010758 <__assert_func>
 800ed10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ed14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ed18:	bb2d      	cbnz	r5, 800ed66 <__d2b+0x7a>
 800ed1a:	9301      	str	r3, [sp, #4]
 800ed1c:	f1b8 0300 	subs.w	r3, r8, #0
 800ed20:	d026      	beq.n	800ed70 <__d2b+0x84>
 800ed22:	4668      	mov	r0, sp
 800ed24:	9300      	str	r3, [sp, #0]
 800ed26:	f7ff fd17 	bl	800e758 <__lo0bits>
 800ed2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ed2e:	b1e8      	cbz	r0, 800ed6c <__d2b+0x80>
 800ed30:	f1c0 0320 	rsb	r3, r0, #32
 800ed34:	fa02 f303 	lsl.w	r3, r2, r3
 800ed38:	430b      	orrs	r3, r1
 800ed3a:	40c2      	lsrs	r2, r0
 800ed3c:	6163      	str	r3, [r4, #20]
 800ed3e:	9201      	str	r2, [sp, #4]
 800ed40:	9b01      	ldr	r3, [sp, #4]
 800ed42:	61a3      	str	r3, [r4, #24]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	bf14      	ite	ne
 800ed48:	2202      	movne	r2, #2
 800ed4a:	2201      	moveq	r2, #1
 800ed4c:	6122      	str	r2, [r4, #16]
 800ed4e:	b1bd      	cbz	r5, 800ed80 <__d2b+0x94>
 800ed50:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ed54:	4405      	add	r5, r0
 800ed56:	603d      	str	r5, [r7, #0]
 800ed58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ed5c:	6030      	str	r0, [r6, #0]
 800ed5e:	4620      	mov	r0, r4
 800ed60:	b003      	add	sp, #12
 800ed62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ed6a:	e7d6      	b.n	800ed1a <__d2b+0x2e>
 800ed6c:	6161      	str	r1, [r4, #20]
 800ed6e:	e7e7      	b.n	800ed40 <__d2b+0x54>
 800ed70:	a801      	add	r0, sp, #4
 800ed72:	f7ff fcf1 	bl	800e758 <__lo0bits>
 800ed76:	9b01      	ldr	r3, [sp, #4]
 800ed78:	6163      	str	r3, [r4, #20]
 800ed7a:	3020      	adds	r0, #32
 800ed7c:	2201      	movs	r2, #1
 800ed7e:	e7e5      	b.n	800ed4c <__d2b+0x60>
 800ed80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ed84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ed88:	6038      	str	r0, [r7, #0]
 800ed8a:	6918      	ldr	r0, [r3, #16]
 800ed8c:	f7ff fcc4 	bl	800e718 <__hi0bits>
 800ed90:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ed94:	e7e2      	b.n	800ed5c <__d2b+0x70>
 800ed96:	bf00      	nop
 800ed98:	080116c7 	.word	0x080116c7
 800ed9c:	080116d8 	.word	0x080116d8

0800eda0 <__ratio>:
 800eda0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eda4:	4688      	mov	r8, r1
 800eda6:	4669      	mov	r1, sp
 800eda8:	4681      	mov	r9, r0
 800edaa:	f7ff ff55 	bl	800ec58 <__b2d>
 800edae:	a901      	add	r1, sp, #4
 800edb0:	4640      	mov	r0, r8
 800edb2:	ec55 4b10 	vmov	r4, r5, d0
 800edb6:	f7ff ff4f 	bl	800ec58 <__b2d>
 800edba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800edbe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800edc2:	eba3 0c02 	sub.w	ip, r3, r2
 800edc6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800edca:	1a9b      	subs	r3, r3, r2
 800edcc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800edd0:	ec51 0b10 	vmov	r0, r1, d0
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	bfd6      	itet	le
 800edd8:	460a      	movle	r2, r1
 800edda:	462a      	movgt	r2, r5
 800eddc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ede0:	468b      	mov	fp, r1
 800ede2:	462f      	mov	r7, r5
 800ede4:	bfd4      	ite	le
 800ede6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800edea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800edee:	4620      	mov	r0, r4
 800edf0:	ee10 2a10 	vmov	r2, s0
 800edf4:	465b      	mov	r3, fp
 800edf6:	4639      	mov	r1, r7
 800edf8:	f7f1 fd28 	bl	800084c <__aeabi_ddiv>
 800edfc:	ec41 0b10 	vmov	d0, r0, r1
 800ee00:	b003      	add	sp, #12
 800ee02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ee06 <__copybits>:
 800ee06:	3901      	subs	r1, #1
 800ee08:	b570      	push	{r4, r5, r6, lr}
 800ee0a:	1149      	asrs	r1, r1, #5
 800ee0c:	6914      	ldr	r4, [r2, #16]
 800ee0e:	3101      	adds	r1, #1
 800ee10:	f102 0314 	add.w	r3, r2, #20
 800ee14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ee18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ee1c:	1f05      	subs	r5, r0, #4
 800ee1e:	42a3      	cmp	r3, r4
 800ee20:	d30c      	bcc.n	800ee3c <__copybits+0x36>
 800ee22:	1aa3      	subs	r3, r4, r2
 800ee24:	3b11      	subs	r3, #17
 800ee26:	f023 0303 	bic.w	r3, r3, #3
 800ee2a:	3211      	adds	r2, #17
 800ee2c:	42a2      	cmp	r2, r4
 800ee2e:	bf88      	it	hi
 800ee30:	2300      	movhi	r3, #0
 800ee32:	4418      	add	r0, r3
 800ee34:	2300      	movs	r3, #0
 800ee36:	4288      	cmp	r0, r1
 800ee38:	d305      	bcc.n	800ee46 <__copybits+0x40>
 800ee3a:	bd70      	pop	{r4, r5, r6, pc}
 800ee3c:	f853 6b04 	ldr.w	r6, [r3], #4
 800ee40:	f845 6f04 	str.w	r6, [r5, #4]!
 800ee44:	e7eb      	b.n	800ee1e <__copybits+0x18>
 800ee46:	f840 3b04 	str.w	r3, [r0], #4
 800ee4a:	e7f4      	b.n	800ee36 <__copybits+0x30>

0800ee4c <__any_on>:
 800ee4c:	f100 0214 	add.w	r2, r0, #20
 800ee50:	6900      	ldr	r0, [r0, #16]
 800ee52:	114b      	asrs	r3, r1, #5
 800ee54:	4298      	cmp	r0, r3
 800ee56:	b510      	push	{r4, lr}
 800ee58:	db11      	blt.n	800ee7e <__any_on+0x32>
 800ee5a:	dd0a      	ble.n	800ee72 <__any_on+0x26>
 800ee5c:	f011 011f 	ands.w	r1, r1, #31
 800ee60:	d007      	beq.n	800ee72 <__any_on+0x26>
 800ee62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ee66:	fa24 f001 	lsr.w	r0, r4, r1
 800ee6a:	fa00 f101 	lsl.w	r1, r0, r1
 800ee6e:	428c      	cmp	r4, r1
 800ee70:	d10b      	bne.n	800ee8a <__any_on+0x3e>
 800ee72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ee76:	4293      	cmp	r3, r2
 800ee78:	d803      	bhi.n	800ee82 <__any_on+0x36>
 800ee7a:	2000      	movs	r0, #0
 800ee7c:	bd10      	pop	{r4, pc}
 800ee7e:	4603      	mov	r3, r0
 800ee80:	e7f7      	b.n	800ee72 <__any_on+0x26>
 800ee82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ee86:	2900      	cmp	r1, #0
 800ee88:	d0f5      	beq.n	800ee76 <__any_on+0x2a>
 800ee8a:	2001      	movs	r0, #1
 800ee8c:	e7f6      	b.n	800ee7c <__any_on+0x30>

0800ee8e <sulp>:
 800ee8e:	b570      	push	{r4, r5, r6, lr}
 800ee90:	4604      	mov	r4, r0
 800ee92:	460d      	mov	r5, r1
 800ee94:	ec45 4b10 	vmov	d0, r4, r5
 800ee98:	4616      	mov	r6, r2
 800ee9a:	f7ff feb7 	bl	800ec0c <__ulp>
 800ee9e:	ec51 0b10 	vmov	r0, r1, d0
 800eea2:	b17e      	cbz	r6, 800eec4 <sulp+0x36>
 800eea4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800eea8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	dd09      	ble.n	800eec4 <sulp+0x36>
 800eeb0:	051b      	lsls	r3, r3, #20
 800eeb2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800eeb6:	2400      	movs	r4, #0
 800eeb8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800eebc:	4622      	mov	r2, r4
 800eebe:	462b      	mov	r3, r5
 800eec0:	f7f1 fb9a 	bl	80005f8 <__aeabi_dmul>
 800eec4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eec8 <_strtod_l>:
 800eec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eecc:	ed2d 8b02 	vpush	{d8}
 800eed0:	b09b      	sub	sp, #108	; 0x6c
 800eed2:	4604      	mov	r4, r0
 800eed4:	9213      	str	r2, [sp, #76]	; 0x4c
 800eed6:	2200      	movs	r2, #0
 800eed8:	9216      	str	r2, [sp, #88]	; 0x58
 800eeda:	460d      	mov	r5, r1
 800eedc:	f04f 0800 	mov.w	r8, #0
 800eee0:	f04f 0900 	mov.w	r9, #0
 800eee4:	460a      	mov	r2, r1
 800eee6:	9215      	str	r2, [sp, #84]	; 0x54
 800eee8:	7811      	ldrb	r1, [r2, #0]
 800eeea:	292b      	cmp	r1, #43	; 0x2b
 800eeec:	d04c      	beq.n	800ef88 <_strtod_l+0xc0>
 800eeee:	d83a      	bhi.n	800ef66 <_strtod_l+0x9e>
 800eef0:	290d      	cmp	r1, #13
 800eef2:	d834      	bhi.n	800ef5e <_strtod_l+0x96>
 800eef4:	2908      	cmp	r1, #8
 800eef6:	d834      	bhi.n	800ef62 <_strtod_l+0x9a>
 800eef8:	2900      	cmp	r1, #0
 800eefa:	d03d      	beq.n	800ef78 <_strtod_l+0xb0>
 800eefc:	2200      	movs	r2, #0
 800eefe:	920a      	str	r2, [sp, #40]	; 0x28
 800ef00:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800ef02:	7832      	ldrb	r2, [r6, #0]
 800ef04:	2a30      	cmp	r2, #48	; 0x30
 800ef06:	f040 80b4 	bne.w	800f072 <_strtod_l+0x1aa>
 800ef0a:	7872      	ldrb	r2, [r6, #1]
 800ef0c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ef10:	2a58      	cmp	r2, #88	; 0x58
 800ef12:	d170      	bne.n	800eff6 <_strtod_l+0x12e>
 800ef14:	9302      	str	r3, [sp, #8]
 800ef16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef18:	9301      	str	r3, [sp, #4]
 800ef1a:	ab16      	add	r3, sp, #88	; 0x58
 800ef1c:	9300      	str	r3, [sp, #0]
 800ef1e:	4a8e      	ldr	r2, [pc, #568]	; (800f158 <_strtod_l+0x290>)
 800ef20:	ab17      	add	r3, sp, #92	; 0x5c
 800ef22:	a915      	add	r1, sp, #84	; 0x54
 800ef24:	4620      	mov	r0, r4
 800ef26:	f001 fcb3 	bl	8010890 <__gethex>
 800ef2a:	f010 070f 	ands.w	r7, r0, #15
 800ef2e:	4605      	mov	r5, r0
 800ef30:	d005      	beq.n	800ef3e <_strtod_l+0x76>
 800ef32:	2f06      	cmp	r7, #6
 800ef34:	d12a      	bne.n	800ef8c <_strtod_l+0xc4>
 800ef36:	3601      	adds	r6, #1
 800ef38:	2300      	movs	r3, #0
 800ef3a:	9615      	str	r6, [sp, #84]	; 0x54
 800ef3c:	930a      	str	r3, [sp, #40]	; 0x28
 800ef3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	f040 857f 	bne.w	800fa44 <_strtod_l+0xb7c>
 800ef46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef48:	b1db      	cbz	r3, 800ef82 <_strtod_l+0xba>
 800ef4a:	4642      	mov	r2, r8
 800ef4c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ef50:	ec43 2b10 	vmov	d0, r2, r3
 800ef54:	b01b      	add	sp, #108	; 0x6c
 800ef56:	ecbd 8b02 	vpop	{d8}
 800ef5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef5e:	2920      	cmp	r1, #32
 800ef60:	d1cc      	bne.n	800eefc <_strtod_l+0x34>
 800ef62:	3201      	adds	r2, #1
 800ef64:	e7bf      	b.n	800eee6 <_strtod_l+0x1e>
 800ef66:	292d      	cmp	r1, #45	; 0x2d
 800ef68:	d1c8      	bne.n	800eefc <_strtod_l+0x34>
 800ef6a:	2101      	movs	r1, #1
 800ef6c:	910a      	str	r1, [sp, #40]	; 0x28
 800ef6e:	1c51      	adds	r1, r2, #1
 800ef70:	9115      	str	r1, [sp, #84]	; 0x54
 800ef72:	7852      	ldrb	r2, [r2, #1]
 800ef74:	2a00      	cmp	r2, #0
 800ef76:	d1c3      	bne.n	800ef00 <_strtod_l+0x38>
 800ef78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ef7a:	9515      	str	r5, [sp, #84]	; 0x54
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	f040 855f 	bne.w	800fa40 <_strtod_l+0xb78>
 800ef82:	4642      	mov	r2, r8
 800ef84:	464b      	mov	r3, r9
 800ef86:	e7e3      	b.n	800ef50 <_strtod_l+0x88>
 800ef88:	2100      	movs	r1, #0
 800ef8a:	e7ef      	b.n	800ef6c <_strtod_l+0xa4>
 800ef8c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ef8e:	b13a      	cbz	r2, 800efa0 <_strtod_l+0xd8>
 800ef90:	2135      	movs	r1, #53	; 0x35
 800ef92:	a818      	add	r0, sp, #96	; 0x60
 800ef94:	f7ff ff37 	bl	800ee06 <__copybits>
 800ef98:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	f7ff fb0a 	bl	800e5b4 <_Bfree>
 800efa0:	3f01      	subs	r7, #1
 800efa2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800efa4:	2f04      	cmp	r7, #4
 800efa6:	d806      	bhi.n	800efb6 <_strtod_l+0xee>
 800efa8:	e8df f007 	tbb	[pc, r7]
 800efac:	201d0314 	.word	0x201d0314
 800efb0:	14          	.byte	0x14
 800efb1:	00          	.byte	0x00
 800efb2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800efb6:	05e9      	lsls	r1, r5, #23
 800efb8:	bf48      	it	mi
 800efba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800efbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800efc2:	0d1b      	lsrs	r3, r3, #20
 800efc4:	051b      	lsls	r3, r3, #20
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d1b9      	bne.n	800ef3e <_strtod_l+0x76>
 800efca:	f7fe fbab 	bl	800d724 <__errno>
 800efce:	2322      	movs	r3, #34	; 0x22
 800efd0:	6003      	str	r3, [r0, #0]
 800efd2:	e7b4      	b.n	800ef3e <_strtod_l+0x76>
 800efd4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800efd8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800efdc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800efe0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800efe4:	e7e7      	b.n	800efb6 <_strtod_l+0xee>
 800efe6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f160 <_strtod_l+0x298>
 800efea:	e7e4      	b.n	800efb6 <_strtod_l+0xee>
 800efec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800eff0:	f04f 38ff 	mov.w	r8, #4294967295
 800eff4:	e7df      	b.n	800efb6 <_strtod_l+0xee>
 800eff6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eff8:	1c5a      	adds	r2, r3, #1
 800effa:	9215      	str	r2, [sp, #84]	; 0x54
 800effc:	785b      	ldrb	r3, [r3, #1]
 800effe:	2b30      	cmp	r3, #48	; 0x30
 800f000:	d0f9      	beq.n	800eff6 <_strtod_l+0x12e>
 800f002:	2b00      	cmp	r3, #0
 800f004:	d09b      	beq.n	800ef3e <_strtod_l+0x76>
 800f006:	2301      	movs	r3, #1
 800f008:	f04f 0a00 	mov.w	sl, #0
 800f00c:	9304      	str	r3, [sp, #16]
 800f00e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f010:	930b      	str	r3, [sp, #44]	; 0x2c
 800f012:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f016:	46d3      	mov	fp, sl
 800f018:	220a      	movs	r2, #10
 800f01a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800f01c:	7806      	ldrb	r6, [r0, #0]
 800f01e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f022:	b2d9      	uxtb	r1, r3
 800f024:	2909      	cmp	r1, #9
 800f026:	d926      	bls.n	800f076 <_strtod_l+0x1ae>
 800f028:	494c      	ldr	r1, [pc, #304]	; (800f15c <_strtod_l+0x294>)
 800f02a:	2201      	movs	r2, #1
 800f02c:	f001 fb79 	bl	8010722 <strncmp>
 800f030:	2800      	cmp	r0, #0
 800f032:	d030      	beq.n	800f096 <_strtod_l+0x1ce>
 800f034:	2000      	movs	r0, #0
 800f036:	4632      	mov	r2, r6
 800f038:	9005      	str	r0, [sp, #20]
 800f03a:	465e      	mov	r6, fp
 800f03c:	4603      	mov	r3, r0
 800f03e:	2a65      	cmp	r2, #101	; 0x65
 800f040:	d001      	beq.n	800f046 <_strtod_l+0x17e>
 800f042:	2a45      	cmp	r2, #69	; 0x45
 800f044:	d113      	bne.n	800f06e <_strtod_l+0x1a6>
 800f046:	b91e      	cbnz	r6, 800f050 <_strtod_l+0x188>
 800f048:	9a04      	ldr	r2, [sp, #16]
 800f04a:	4302      	orrs	r2, r0
 800f04c:	d094      	beq.n	800ef78 <_strtod_l+0xb0>
 800f04e:	2600      	movs	r6, #0
 800f050:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800f052:	1c6a      	adds	r2, r5, #1
 800f054:	9215      	str	r2, [sp, #84]	; 0x54
 800f056:	786a      	ldrb	r2, [r5, #1]
 800f058:	2a2b      	cmp	r2, #43	; 0x2b
 800f05a:	d074      	beq.n	800f146 <_strtod_l+0x27e>
 800f05c:	2a2d      	cmp	r2, #45	; 0x2d
 800f05e:	d078      	beq.n	800f152 <_strtod_l+0x28a>
 800f060:	f04f 0c00 	mov.w	ip, #0
 800f064:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f068:	2909      	cmp	r1, #9
 800f06a:	d97f      	bls.n	800f16c <_strtod_l+0x2a4>
 800f06c:	9515      	str	r5, [sp, #84]	; 0x54
 800f06e:	2700      	movs	r7, #0
 800f070:	e09e      	b.n	800f1b0 <_strtod_l+0x2e8>
 800f072:	2300      	movs	r3, #0
 800f074:	e7c8      	b.n	800f008 <_strtod_l+0x140>
 800f076:	f1bb 0f08 	cmp.w	fp, #8
 800f07a:	bfd8      	it	le
 800f07c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f07e:	f100 0001 	add.w	r0, r0, #1
 800f082:	bfda      	itte	le
 800f084:	fb02 3301 	mlale	r3, r2, r1, r3
 800f088:	9309      	strle	r3, [sp, #36]	; 0x24
 800f08a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800f08e:	f10b 0b01 	add.w	fp, fp, #1
 800f092:	9015      	str	r0, [sp, #84]	; 0x54
 800f094:	e7c1      	b.n	800f01a <_strtod_l+0x152>
 800f096:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f098:	1c5a      	adds	r2, r3, #1
 800f09a:	9215      	str	r2, [sp, #84]	; 0x54
 800f09c:	785a      	ldrb	r2, [r3, #1]
 800f09e:	f1bb 0f00 	cmp.w	fp, #0
 800f0a2:	d037      	beq.n	800f114 <_strtod_l+0x24c>
 800f0a4:	9005      	str	r0, [sp, #20]
 800f0a6:	465e      	mov	r6, fp
 800f0a8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f0ac:	2b09      	cmp	r3, #9
 800f0ae:	d912      	bls.n	800f0d6 <_strtod_l+0x20e>
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	e7c4      	b.n	800f03e <_strtod_l+0x176>
 800f0b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f0b6:	1c5a      	adds	r2, r3, #1
 800f0b8:	9215      	str	r2, [sp, #84]	; 0x54
 800f0ba:	785a      	ldrb	r2, [r3, #1]
 800f0bc:	3001      	adds	r0, #1
 800f0be:	2a30      	cmp	r2, #48	; 0x30
 800f0c0:	d0f8      	beq.n	800f0b4 <_strtod_l+0x1ec>
 800f0c2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f0c6:	2b08      	cmp	r3, #8
 800f0c8:	f200 84c1 	bhi.w	800fa4e <_strtod_l+0xb86>
 800f0cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f0ce:	9005      	str	r0, [sp, #20]
 800f0d0:	2000      	movs	r0, #0
 800f0d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800f0d4:	4606      	mov	r6, r0
 800f0d6:	3a30      	subs	r2, #48	; 0x30
 800f0d8:	f100 0301 	add.w	r3, r0, #1
 800f0dc:	d014      	beq.n	800f108 <_strtod_l+0x240>
 800f0de:	9905      	ldr	r1, [sp, #20]
 800f0e0:	4419      	add	r1, r3
 800f0e2:	9105      	str	r1, [sp, #20]
 800f0e4:	4633      	mov	r3, r6
 800f0e6:	eb00 0c06 	add.w	ip, r0, r6
 800f0ea:	210a      	movs	r1, #10
 800f0ec:	4563      	cmp	r3, ip
 800f0ee:	d113      	bne.n	800f118 <_strtod_l+0x250>
 800f0f0:	1833      	adds	r3, r6, r0
 800f0f2:	2b08      	cmp	r3, #8
 800f0f4:	f106 0601 	add.w	r6, r6, #1
 800f0f8:	4406      	add	r6, r0
 800f0fa:	dc1a      	bgt.n	800f132 <_strtod_l+0x26a>
 800f0fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f0fe:	230a      	movs	r3, #10
 800f100:	fb03 2301 	mla	r3, r3, r1, r2
 800f104:	9309      	str	r3, [sp, #36]	; 0x24
 800f106:	2300      	movs	r3, #0
 800f108:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f10a:	1c51      	adds	r1, r2, #1
 800f10c:	9115      	str	r1, [sp, #84]	; 0x54
 800f10e:	7852      	ldrb	r2, [r2, #1]
 800f110:	4618      	mov	r0, r3
 800f112:	e7c9      	b.n	800f0a8 <_strtod_l+0x1e0>
 800f114:	4658      	mov	r0, fp
 800f116:	e7d2      	b.n	800f0be <_strtod_l+0x1f6>
 800f118:	2b08      	cmp	r3, #8
 800f11a:	f103 0301 	add.w	r3, r3, #1
 800f11e:	dc03      	bgt.n	800f128 <_strtod_l+0x260>
 800f120:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f122:	434f      	muls	r7, r1
 800f124:	9709      	str	r7, [sp, #36]	; 0x24
 800f126:	e7e1      	b.n	800f0ec <_strtod_l+0x224>
 800f128:	2b10      	cmp	r3, #16
 800f12a:	bfd8      	it	le
 800f12c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800f130:	e7dc      	b.n	800f0ec <_strtod_l+0x224>
 800f132:	2e10      	cmp	r6, #16
 800f134:	bfdc      	itt	le
 800f136:	230a      	movle	r3, #10
 800f138:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800f13c:	e7e3      	b.n	800f106 <_strtod_l+0x23e>
 800f13e:	2300      	movs	r3, #0
 800f140:	9305      	str	r3, [sp, #20]
 800f142:	2301      	movs	r3, #1
 800f144:	e780      	b.n	800f048 <_strtod_l+0x180>
 800f146:	f04f 0c00 	mov.w	ip, #0
 800f14a:	1caa      	adds	r2, r5, #2
 800f14c:	9215      	str	r2, [sp, #84]	; 0x54
 800f14e:	78aa      	ldrb	r2, [r5, #2]
 800f150:	e788      	b.n	800f064 <_strtod_l+0x19c>
 800f152:	f04f 0c01 	mov.w	ip, #1
 800f156:	e7f8      	b.n	800f14a <_strtod_l+0x282>
 800f158:	08011838 	.word	0x08011838
 800f15c:	08011834 	.word	0x08011834
 800f160:	7ff00000 	.word	0x7ff00000
 800f164:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f166:	1c51      	adds	r1, r2, #1
 800f168:	9115      	str	r1, [sp, #84]	; 0x54
 800f16a:	7852      	ldrb	r2, [r2, #1]
 800f16c:	2a30      	cmp	r2, #48	; 0x30
 800f16e:	d0f9      	beq.n	800f164 <_strtod_l+0x29c>
 800f170:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f174:	2908      	cmp	r1, #8
 800f176:	f63f af7a 	bhi.w	800f06e <_strtod_l+0x1a6>
 800f17a:	3a30      	subs	r2, #48	; 0x30
 800f17c:	9208      	str	r2, [sp, #32]
 800f17e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f180:	920c      	str	r2, [sp, #48]	; 0x30
 800f182:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f184:	1c57      	adds	r7, r2, #1
 800f186:	9715      	str	r7, [sp, #84]	; 0x54
 800f188:	7852      	ldrb	r2, [r2, #1]
 800f18a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f18e:	f1be 0f09 	cmp.w	lr, #9
 800f192:	d938      	bls.n	800f206 <_strtod_l+0x33e>
 800f194:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f196:	1a7f      	subs	r7, r7, r1
 800f198:	2f08      	cmp	r7, #8
 800f19a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800f19e:	dc03      	bgt.n	800f1a8 <_strtod_l+0x2e0>
 800f1a0:	9908      	ldr	r1, [sp, #32]
 800f1a2:	428f      	cmp	r7, r1
 800f1a4:	bfa8      	it	ge
 800f1a6:	460f      	movge	r7, r1
 800f1a8:	f1bc 0f00 	cmp.w	ip, #0
 800f1ac:	d000      	beq.n	800f1b0 <_strtod_l+0x2e8>
 800f1ae:	427f      	negs	r7, r7
 800f1b0:	2e00      	cmp	r6, #0
 800f1b2:	d14f      	bne.n	800f254 <_strtod_l+0x38c>
 800f1b4:	9904      	ldr	r1, [sp, #16]
 800f1b6:	4301      	orrs	r1, r0
 800f1b8:	f47f aec1 	bne.w	800ef3e <_strtod_l+0x76>
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	f47f aedb 	bne.w	800ef78 <_strtod_l+0xb0>
 800f1c2:	2a69      	cmp	r2, #105	; 0x69
 800f1c4:	d029      	beq.n	800f21a <_strtod_l+0x352>
 800f1c6:	dc26      	bgt.n	800f216 <_strtod_l+0x34e>
 800f1c8:	2a49      	cmp	r2, #73	; 0x49
 800f1ca:	d026      	beq.n	800f21a <_strtod_l+0x352>
 800f1cc:	2a4e      	cmp	r2, #78	; 0x4e
 800f1ce:	f47f aed3 	bne.w	800ef78 <_strtod_l+0xb0>
 800f1d2:	499b      	ldr	r1, [pc, #620]	; (800f440 <_strtod_l+0x578>)
 800f1d4:	a815      	add	r0, sp, #84	; 0x54
 800f1d6:	f001 fd9b 	bl	8010d10 <__match>
 800f1da:	2800      	cmp	r0, #0
 800f1dc:	f43f aecc 	beq.w	800ef78 <_strtod_l+0xb0>
 800f1e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1e2:	781b      	ldrb	r3, [r3, #0]
 800f1e4:	2b28      	cmp	r3, #40	; 0x28
 800f1e6:	d12f      	bne.n	800f248 <_strtod_l+0x380>
 800f1e8:	4996      	ldr	r1, [pc, #600]	; (800f444 <_strtod_l+0x57c>)
 800f1ea:	aa18      	add	r2, sp, #96	; 0x60
 800f1ec:	a815      	add	r0, sp, #84	; 0x54
 800f1ee:	f001 fda3 	bl	8010d38 <__hexnan>
 800f1f2:	2805      	cmp	r0, #5
 800f1f4:	d128      	bne.n	800f248 <_strtod_l+0x380>
 800f1f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f1f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f1fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800f200:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800f204:	e69b      	b.n	800ef3e <_strtod_l+0x76>
 800f206:	9f08      	ldr	r7, [sp, #32]
 800f208:	210a      	movs	r1, #10
 800f20a:	fb01 2107 	mla	r1, r1, r7, r2
 800f20e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800f212:	9208      	str	r2, [sp, #32]
 800f214:	e7b5      	b.n	800f182 <_strtod_l+0x2ba>
 800f216:	2a6e      	cmp	r2, #110	; 0x6e
 800f218:	e7d9      	b.n	800f1ce <_strtod_l+0x306>
 800f21a:	498b      	ldr	r1, [pc, #556]	; (800f448 <_strtod_l+0x580>)
 800f21c:	a815      	add	r0, sp, #84	; 0x54
 800f21e:	f001 fd77 	bl	8010d10 <__match>
 800f222:	2800      	cmp	r0, #0
 800f224:	f43f aea8 	beq.w	800ef78 <_strtod_l+0xb0>
 800f228:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f22a:	4988      	ldr	r1, [pc, #544]	; (800f44c <_strtod_l+0x584>)
 800f22c:	3b01      	subs	r3, #1
 800f22e:	a815      	add	r0, sp, #84	; 0x54
 800f230:	9315      	str	r3, [sp, #84]	; 0x54
 800f232:	f001 fd6d 	bl	8010d10 <__match>
 800f236:	b910      	cbnz	r0, 800f23e <_strtod_l+0x376>
 800f238:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f23a:	3301      	adds	r3, #1
 800f23c:	9315      	str	r3, [sp, #84]	; 0x54
 800f23e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800f45c <_strtod_l+0x594>
 800f242:	f04f 0800 	mov.w	r8, #0
 800f246:	e67a      	b.n	800ef3e <_strtod_l+0x76>
 800f248:	4881      	ldr	r0, [pc, #516]	; (800f450 <_strtod_l+0x588>)
 800f24a:	f001 fa7d 	bl	8010748 <nan>
 800f24e:	ec59 8b10 	vmov	r8, r9, d0
 800f252:	e674      	b.n	800ef3e <_strtod_l+0x76>
 800f254:	9b05      	ldr	r3, [sp, #20]
 800f256:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f258:	1afb      	subs	r3, r7, r3
 800f25a:	f1bb 0f00 	cmp.w	fp, #0
 800f25e:	bf08      	it	eq
 800f260:	46b3      	moveq	fp, r6
 800f262:	2e10      	cmp	r6, #16
 800f264:	9308      	str	r3, [sp, #32]
 800f266:	4635      	mov	r5, r6
 800f268:	bfa8      	it	ge
 800f26a:	2510      	movge	r5, #16
 800f26c:	f7f1 f94a 	bl	8000504 <__aeabi_ui2d>
 800f270:	2e09      	cmp	r6, #9
 800f272:	4680      	mov	r8, r0
 800f274:	4689      	mov	r9, r1
 800f276:	dd13      	ble.n	800f2a0 <_strtod_l+0x3d8>
 800f278:	4b76      	ldr	r3, [pc, #472]	; (800f454 <_strtod_l+0x58c>)
 800f27a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f27e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f282:	f7f1 f9b9 	bl	80005f8 <__aeabi_dmul>
 800f286:	4680      	mov	r8, r0
 800f288:	4650      	mov	r0, sl
 800f28a:	4689      	mov	r9, r1
 800f28c:	f7f1 f93a 	bl	8000504 <__aeabi_ui2d>
 800f290:	4602      	mov	r2, r0
 800f292:	460b      	mov	r3, r1
 800f294:	4640      	mov	r0, r8
 800f296:	4649      	mov	r1, r9
 800f298:	f7f0 fff8 	bl	800028c <__adddf3>
 800f29c:	4680      	mov	r8, r0
 800f29e:	4689      	mov	r9, r1
 800f2a0:	2e0f      	cmp	r6, #15
 800f2a2:	dc38      	bgt.n	800f316 <_strtod_l+0x44e>
 800f2a4:	9b08      	ldr	r3, [sp, #32]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	f43f ae49 	beq.w	800ef3e <_strtod_l+0x76>
 800f2ac:	dd24      	ble.n	800f2f8 <_strtod_l+0x430>
 800f2ae:	2b16      	cmp	r3, #22
 800f2b0:	dc0b      	bgt.n	800f2ca <_strtod_l+0x402>
 800f2b2:	4968      	ldr	r1, [pc, #416]	; (800f454 <_strtod_l+0x58c>)
 800f2b4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f2b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2bc:	4642      	mov	r2, r8
 800f2be:	464b      	mov	r3, r9
 800f2c0:	f7f1 f99a 	bl	80005f8 <__aeabi_dmul>
 800f2c4:	4680      	mov	r8, r0
 800f2c6:	4689      	mov	r9, r1
 800f2c8:	e639      	b.n	800ef3e <_strtod_l+0x76>
 800f2ca:	9a08      	ldr	r2, [sp, #32]
 800f2cc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800f2d0:	4293      	cmp	r3, r2
 800f2d2:	db20      	blt.n	800f316 <_strtod_l+0x44e>
 800f2d4:	4c5f      	ldr	r4, [pc, #380]	; (800f454 <_strtod_l+0x58c>)
 800f2d6:	f1c6 060f 	rsb	r6, r6, #15
 800f2da:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800f2de:	4642      	mov	r2, r8
 800f2e0:	464b      	mov	r3, r9
 800f2e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2e6:	f7f1 f987 	bl	80005f8 <__aeabi_dmul>
 800f2ea:	9b08      	ldr	r3, [sp, #32]
 800f2ec:	1b9e      	subs	r6, r3, r6
 800f2ee:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800f2f2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f2f6:	e7e3      	b.n	800f2c0 <_strtod_l+0x3f8>
 800f2f8:	9b08      	ldr	r3, [sp, #32]
 800f2fa:	3316      	adds	r3, #22
 800f2fc:	db0b      	blt.n	800f316 <_strtod_l+0x44e>
 800f2fe:	9b05      	ldr	r3, [sp, #20]
 800f300:	1bdf      	subs	r7, r3, r7
 800f302:	4b54      	ldr	r3, [pc, #336]	; (800f454 <_strtod_l+0x58c>)
 800f304:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f308:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f30c:	4640      	mov	r0, r8
 800f30e:	4649      	mov	r1, r9
 800f310:	f7f1 fa9c 	bl	800084c <__aeabi_ddiv>
 800f314:	e7d6      	b.n	800f2c4 <_strtod_l+0x3fc>
 800f316:	9b08      	ldr	r3, [sp, #32]
 800f318:	1b75      	subs	r5, r6, r5
 800f31a:	441d      	add	r5, r3
 800f31c:	2d00      	cmp	r5, #0
 800f31e:	dd70      	ble.n	800f402 <_strtod_l+0x53a>
 800f320:	f015 030f 	ands.w	r3, r5, #15
 800f324:	d00a      	beq.n	800f33c <_strtod_l+0x474>
 800f326:	494b      	ldr	r1, [pc, #300]	; (800f454 <_strtod_l+0x58c>)
 800f328:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f32c:	4642      	mov	r2, r8
 800f32e:	464b      	mov	r3, r9
 800f330:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f334:	f7f1 f960 	bl	80005f8 <__aeabi_dmul>
 800f338:	4680      	mov	r8, r0
 800f33a:	4689      	mov	r9, r1
 800f33c:	f035 050f 	bics.w	r5, r5, #15
 800f340:	d04d      	beq.n	800f3de <_strtod_l+0x516>
 800f342:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800f346:	dd22      	ble.n	800f38e <_strtod_l+0x4c6>
 800f348:	2500      	movs	r5, #0
 800f34a:	46ab      	mov	fp, r5
 800f34c:	9509      	str	r5, [sp, #36]	; 0x24
 800f34e:	9505      	str	r5, [sp, #20]
 800f350:	2322      	movs	r3, #34	; 0x22
 800f352:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800f45c <_strtod_l+0x594>
 800f356:	6023      	str	r3, [r4, #0]
 800f358:	f04f 0800 	mov.w	r8, #0
 800f35c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f35e:	2b00      	cmp	r3, #0
 800f360:	f43f aded 	beq.w	800ef3e <_strtod_l+0x76>
 800f364:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f366:	4620      	mov	r0, r4
 800f368:	f7ff f924 	bl	800e5b4 <_Bfree>
 800f36c:	9905      	ldr	r1, [sp, #20]
 800f36e:	4620      	mov	r0, r4
 800f370:	f7ff f920 	bl	800e5b4 <_Bfree>
 800f374:	4659      	mov	r1, fp
 800f376:	4620      	mov	r0, r4
 800f378:	f7ff f91c 	bl	800e5b4 <_Bfree>
 800f37c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f37e:	4620      	mov	r0, r4
 800f380:	f7ff f918 	bl	800e5b4 <_Bfree>
 800f384:	4629      	mov	r1, r5
 800f386:	4620      	mov	r0, r4
 800f388:	f7ff f914 	bl	800e5b4 <_Bfree>
 800f38c:	e5d7      	b.n	800ef3e <_strtod_l+0x76>
 800f38e:	4b32      	ldr	r3, [pc, #200]	; (800f458 <_strtod_l+0x590>)
 800f390:	9304      	str	r3, [sp, #16]
 800f392:	2300      	movs	r3, #0
 800f394:	112d      	asrs	r5, r5, #4
 800f396:	4640      	mov	r0, r8
 800f398:	4649      	mov	r1, r9
 800f39a:	469a      	mov	sl, r3
 800f39c:	2d01      	cmp	r5, #1
 800f39e:	dc21      	bgt.n	800f3e4 <_strtod_l+0x51c>
 800f3a0:	b10b      	cbz	r3, 800f3a6 <_strtod_l+0x4de>
 800f3a2:	4680      	mov	r8, r0
 800f3a4:	4689      	mov	r9, r1
 800f3a6:	492c      	ldr	r1, [pc, #176]	; (800f458 <_strtod_l+0x590>)
 800f3a8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800f3ac:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f3b0:	4642      	mov	r2, r8
 800f3b2:	464b      	mov	r3, r9
 800f3b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3b8:	f7f1 f91e 	bl	80005f8 <__aeabi_dmul>
 800f3bc:	4b27      	ldr	r3, [pc, #156]	; (800f45c <_strtod_l+0x594>)
 800f3be:	460a      	mov	r2, r1
 800f3c0:	400b      	ands	r3, r1
 800f3c2:	4927      	ldr	r1, [pc, #156]	; (800f460 <_strtod_l+0x598>)
 800f3c4:	428b      	cmp	r3, r1
 800f3c6:	4680      	mov	r8, r0
 800f3c8:	d8be      	bhi.n	800f348 <_strtod_l+0x480>
 800f3ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f3ce:	428b      	cmp	r3, r1
 800f3d0:	bf86      	itte	hi
 800f3d2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800f464 <_strtod_l+0x59c>
 800f3d6:	f04f 38ff 	movhi.w	r8, #4294967295
 800f3da:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800f3de:	2300      	movs	r3, #0
 800f3e0:	9304      	str	r3, [sp, #16]
 800f3e2:	e07b      	b.n	800f4dc <_strtod_l+0x614>
 800f3e4:	07ea      	lsls	r2, r5, #31
 800f3e6:	d505      	bpl.n	800f3f4 <_strtod_l+0x52c>
 800f3e8:	9b04      	ldr	r3, [sp, #16]
 800f3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ee:	f7f1 f903 	bl	80005f8 <__aeabi_dmul>
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	9a04      	ldr	r2, [sp, #16]
 800f3f6:	3208      	adds	r2, #8
 800f3f8:	f10a 0a01 	add.w	sl, sl, #1
 800f3fc:	106d      	asrs	r5, r5, #1
 800f3fe:	9204      	str	r2, [sp, #16]
 800f400:	e7cc      	b.n	800f39c <_strtod_l+0x4d4>
 800f402:	d0ec      	beq.n	800f3de <_strtod_l+0x516>
 800f404:	426d      	negs	r5, r5
 800f406:	f015 020f 	ands.w	r2, r5, #15
 800f40a:	d00a      	beq.n	800f422 <_strtod_l+0x55a>
 800f40c:	4b11      	ldr	r3, [pc, #68]	; (800f454 <_strtod_l+0x58c>)
 800f40e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f412:	4640      	mov	r0, r8
 800f414:	4649      	mov	r1, r9
 800f416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f41a:	f7f1 fa17 	bl	800084c <__aeabi_ddiv>
 800f41e:	4680      	mov	r8, r0
 800f420:	4689      	mov	r9, r1
 800f422:	112d      	asrs	r5, r5, #4
 800f424:	d0db      	beq.n	800f3de <_strtod_l+0x516>
 800f426:	2d1f      	cmp	r5, #31
 800f428:	dd1e      	ble.n	800f468 <_strtod_l+0x5a0>
 800f42a:	2500      	movs	r5, #0
 800f42c:	46ab      	mov	fp, r5
 800f42e:	9509      	str	r5, [sp, #36]	; 0x24
 800f430:	9505      	str	r5, [sp, #20]
 800f432:	2322      	movs	r3, #34	; 0x22
 800f434:	f04f 0800 	mov.w	r8, #0
 800f438:	f04f 0900 	mov.w	r9, #0
 800f43c:	6023      	str	r3, [r4, #0]
 800f43e:	e78d      	b.n	800f35c <_strtod_l+0x494>
 800f440:	08011621 	.word	0x08011621
 800f444:	0801184c 	.word	0x0801184c
 800f448:	08011619 	.word	0x08011619
 800f44c:	0801164e 	.word	0x0801164e
 800f450:	080119f8 	.word	0x080119f8
 800f454:	08011760 	.word	0x08011760
 800f458:	08011738 	.word	0x08011738
 800f45c:	7ff00000 	.word	0x7ff00000
 800f460:	7ca00000 	.word	0x7ca00000
 800f464:	7fefffff 	.word	0x7fefffff
 800f468:	f015 0310 	ands.w	r3, r5, #16
 800f46c:	bf18      	it	ne
 800f46e:	236a      	movne	r3, #106	; 0x6a
 800f470:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800f814 <_strtod_l+0x94c>
 800f474:	9304      	str	r3, [sp, #16]
 800f476:	4640      	mov	r0, r8
 800f478:	4649      	mov	r1, r9
 800f47a:	2300      	movs	r3, #0
 800f47c:	07ea      	lsls	r2, r5, #31
 800f47e:	d504      	bpl.n	800f48a <_strtod_l+0x5c2>
 800f480:	e9da 2300 	ldrd	r2, r3, [sl]
 800f484:	f7f1 f8b8 	bl	80005f8 <__aeabi_dmul>
 800f488:	2301      	movs	r3, #1
 800f48a:	106d      	asrs	r5, r5, #1
 800f48c:	f10a 0a08 	add.w	sl, sl, #8
 800f490:	d1f4      	bne.n	800f47c <_strtod_l+0x5b4>
 800f492:	b10b      	cbz	r3, 800f498 <_strtod_l+0x5d0>
 800f494:	4680      	mov	r8, r0
 800f496:	4689      	mov	r9, r1
 800f498:	9b04      	ldr	r3, [sp, #16]
 800f49a:	b1bb      	cbz	r3, 800f4cc <_strtod_l+0x604>
 800f49c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800f4a0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	4649      	mov	r1, r9
 800f4a8:	dd10      	ble.n	800f4cc <_strtod_l+0x604>
 800f4aa:	2b1f      	cmp	r3, #31
 800f4ac:	f340 811e 	ble.w	800f6ec <_strtod_l+0x824>
 800f4b0:	2b34      	cmp	r3, #52	; 0x34
 800f4b2:	bfde      	ittt	le
 800f4b4:	f04f 33ff 	movle.w	r3, #4294967295
 800f4b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f4bc:	4093      	lslle	r3, r2
 800f4be:	f04f 0800 	mov.w	r8, #0
 800f4c2:	bfcc      	ite	gt
 800f4c4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800f4c8:	ea03 0901 	andle.w	r9, r3, r1
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	4640      	mov	r0, r8
 800f4d2:	4649      	mov	r1, r9
 800f4d4:	f7f1 faf8 	bl	8000ac8 <__aeabi_dcmpeq>
 800f4d8:	2800      	cmp	r0, #0
 800f4da:	d1a6      	bne.n	800f42a <_strtod_l+0x562>
 800f4dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4de:	9300      	str	r3, [sp, #0]
 800f4e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f4e2:	4633      	mov	r3, r6
 800f4e4:	465a      	mov	r2, fp
 800f4e6:	4620      	mov	r0, r4
 800f4e8:	f7ff f8cc 	bl	800e684 <__s2b>
 800f4ec:	9009      	str	r0, [sp, #36]	; 0x24
 800f4ee:	2800      	cmp	r0, #0
 800f4f0:	f43f af2a 	beq.w	800f348 <_strtod_l+0x480>
 800f4f4:	9a08      	ldr	r2, [sp, #32]
 800f4f6:	9b05      	ldr	r3, [sp, #20]
 800f4f8:	2a00      	cmp	r2, #0
 800f4fa:	eba3 0307 	sub.w	r3, r3, r7
 800f4fe:	bfa8      	it	ge
 800f500:	2300      	movge	r3, #0
 800f502:	930c      	str	r3, [sp, #48]	; 0x30
 800f504:	2500      	movs	r5, #0
 800f506:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f50a:	9312      	str	r3, [sp, #72]	; 0x48
 800f50c:	46ab      	mov	fp, r5
 800f50e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f510:	4620      	mov	r0, r4
 800f512:	6859      	ldr	r1, [r3, #4]
 800f514:	f7ff f80e 	bl	800e534 <_Balloc>
 800f518:	9005      	str	r0, [sp, #20]
 800f51a:	2800      	cmp	r0, #0
 800f51c:	f43f af18 	beq.w	800f350 <_strtod_l+0x488>
 800f520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f522:	691a      	ldr	r2, [r3, #16]
 800f524:	3202      	adds	r2, #2
 800f526:	f103 010c 	add.w	r1, r3, #12
 800f52a:	0092      	lsls	r2, r2, #2
 800f52c:	300c      	adds	r0, #12
 800f52e:	f7fe f926 	bl	800d77e <memcpy>
 800f532:	ec49 8b10 	vmov	d0, r8, r9
 800f536:	aa18      	add	r2, sp, #96	; 0x60
 800f538:	a917      	add	r1, sp, #92	; 0x5c
 800f53a:	4620      	mov	r0, r4
 800f53c:	f7ff fbd6 	bl	800ecec <__d2b>
 800f540:	ec49 8b18 	vmov	d8, r8, r9
 800f544:	9016      	str	r0, [sp, #88]	; 0x58
 800f546:	2800      	cmp	r0, #0
 800f548:	f43f af02 	beq.w	800f350 <_strtod_l+0x488>
 800f54c:	2101      	movs	r1, #1
 800f54e:	4620      	mov	r0, r4
 800f550:	f7ff f930 	bl	800e7b4 <__i2b>
 800f554:	4683      	mov	fp, r0
 800f556:	2800      	cmp	r0, #0
 800f558:	f43f aefa 	beq.w	800f350 <_strtod_l+0x488>
 800f55c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f55e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f560:	2e00      	cmp	r6, #0
 800f562:	bfab      	itete	ge
 800f564:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800f566:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800f568:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f56a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800f56e:	bfac      	ite	ge
 800f570:	eb06 0a03 	addge.w	sl, r6, r3
 800f574:	1b9f      	sublt	r7, r3, r6
 800f576:	9b04      	ldr	r3, [sp, #16]
 800f578:	1af6      	subs	r6, r6, r3
 800f57a:	4416      	add	r6, r2
 800f57c:	4ba0      	ldr	r3, [pc, #640]	; (800f800 <_strtod_l+0x938>)
 800f57e:	3e01      	subs	r6, #1
 800f580:	429e      	cmp	r6, r3
 800f582:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f586:	f280 80c4 	bge.w	800f712 <_strtod_l+0x84a>
 800f58a:	1b9b      	subs	r3, r3, r6
 800f58c:	2b1f      	cmp	r3, #31
 800f58e:	eba2 0203 	sub.w	r2, r2, r3
 800f592:	f04f 0101 	mov.w	r1, #1
 800f596:	f300 80b0 	bgt.w	800f6fa <_strtod_l+0x832>
 800f59a:	fa01 f303 	lsl.w	r3, r1, r3
 800f59e:	930e      	str	r3, [sp, #56]	; 0x38
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	930d      	str	r3, [sp, #52]	; 0x34
 800f5a4:	eb0a 0602 	add.w	r6, sl, r2
 800f5a8:	9b04      	ldr	r3, [sp, #16]
 800f5aa:	45b2      	cmp	sl, r6
 800f5ac:	4417      	add	r7, r2
 800f5ae:	441f      	add	r7, r3
 800f5b0:	4653      	mov	r3, sl
 800f5b2:	bfa8      	it	ge
 800f5b4:	4633      	movge	r3, r6
 800f5b6:	42bb      	cmp	r3, r7
 800f5b8:	bfa8      	it	ge
 800f5ba:	463b      	movge	r3, r7
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	bfc2      	ittt	gt
 800f5c0:	1af6      	subgt	r6, r6, r3
 800f5c2:	1aff      	subgt	r7, r7, r3
 800f5c4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800f5c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	dd17      	ble.n	800f5fe <_strtod_l+0x736>
 800f5ce:	4659      	mov	r1, fp
 800f5d0:	461a      	mov	r2, r3
 800f5d2:	4620      	mov	r0, r4
 800f5d4:	f7ff f9ae 	bl	800e934 <__pow5mult>
 800f5d8:	4683      	mov	fp, r0
 800f5da:	2800      	cmp	r0, #0
 800f5dc:	f43f aeb8 	beq.w	800f350 <_strtod_l+0x488>
 800f5e0:	4601      	mov	r1, r0
 800f5e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f5e4:	4620      	mov	r0, r4
 800f5e6:	f7ff f8fb 	bl	800e7e0 <__multiply>
 800f5ea:	900b      	str	r0, [sp, #44]	; 0x2c
 800f5ec:	2800      	cmp	r0, #0
 800f5ee:	f43f aeaf 	beq.w	800f350 <_strtod_l+0x488>
 800f5f2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f5f4:	4620      	mov	r0, r4
 800f5f6:	f7fe ffdd 	bl	800e5b4 <_Bfree>
 800f5fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5fc:	9316      	str	r3, [sp, #88]	; 0x58
 800f5fe:	2e00      	cmp	r6, #0
 800f600:	f300 808c 	bgt.w	800f71c <_strtod_l+0x854>
 800f604:	9b08      	ldr	r3, [sp, #32]
 800f606:	2b00      	cmp	r3, #0
 800f608:	dd08      	ble.n	800f61c <_strtod_l+0x754>
 800f60a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f60c:	9905      	ldr	r1, [sp, #20]
 800f60e:	4620      	mov	r0, r4
 800f610:	f7ff f990 	bl	800e934 <__pow5mult>
 800f614:	9005      	str	r0, [sp, #20]
 800f616:	2800      	cmp	r0, #0
 800f618:	f43f ae9a 	beq.w	800f350 <_strtod_l+0x488>
 800f61c:	2f00      	cmp	r7, #0
 800f61e:	dd08      	ble.n	800f632 <_strtod_l+0x76a>
 800f620:	9905      	ldr	r1, [sp, #20]
 800f622:	463a      	mov	r2, r7
 800f624:	4620      	mov	r0, r4
 800f626:	f7ff f9df 	bl	800e9e8 <__lshift>
 800f62a:	9005      	str	r0, [sp, #20]
 800f62c:	2800      	cmp	r0, #0
 800f62e:	f43f ae8f 	beq.w	800f350 <_strtod_l+0x488>
 800f632:	f1ba 0f00 	cmp.w	sl, #0
 800f636:	dd08      	ble.n	800f64a <_strtod_l+0x782>
 800f638:	4659      	mov	r1, fp
 800f63a:	4652      	mov	r2, sl
 800f63c:	4620      	mov	r0, r4
 800f63e:	f7ff f9d3 	bl	800e9e8 <__lshift>
 800f642:	4683      	mov	fp, r0
 800f644:	2800      	cmp	r0, #0
 800f646:	f43f ae83 	beq.w	800f350 <_strtod_l+0x488>
 800f64a:	9a05      	ldr	r2, [sp, #20]
 800f64c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f64e:	4620      	mov	r0, r4
 800f650:	f7ff fa52 	bl	800eaf8 <__mdiff>
 800f654:	4605      	mov	r5, r0
 800f656:	2800      	cmp	r0, #0
 800f658:	f43f ae7a 	beq.w	800f350 <_strtod_l+0x488>
 800f65c:	68c3      	ldr	r3, [r0, #12]
 800f65e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f660:	2300      	movs	r3, #0
 800f662:	60c3      	str	r3, [r0, #12]
 800f664:	4659      	mov	r1, fp
 800f666:	f7ff fa2b 	bl	800eac0 <__mcmp>
 800f66a:	2800      	cmp	r0, #0
 800f66c:	da60      	bge.n	800f730 <_strtod_l+0x868>
 800f66e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f670:	ea53 0308 	orrs.w	r3, r3, r8
 800f674:	f040 8084 	bne.w	800f780 <_strtod_l+0x8b8>
 800f678:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d17f      	bne.n	800f780 <_strtod_l+0x8b8>
 800f680:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f684:	0d1b      	lsrs	r3, r3, #20
 800f686:	051b      	lsls	r3, r3, #20
 800f688:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f68c:	d978      	bls.n	800f780 <_strtod_l+0x8b8>
 800f68e:	696b      	ldr	r3, [r5, #20]
 800f690:	b913      	cbnz	r3, 800f698 <_strtod_l+0x7d0>
 800f692:	692b      	ldr	r3, [r5, #16]
 800f694:	2b01      	cmp	r3, #1
 800f696:	dd73      	ble.n	800f780 <_strtod_l+0x8b8>
 800f698:	4629      	mov	r1, r5
 800f69a:	2201      	movs	r2, #1
 800f69c:	4620      	mov	r0, r4
 800f69e:	f7ff f9a3 	bl	800e9e8 <__lshift>
 800f6a2:	4659      	mov	r1, fp
 800f6a4:	4605      	mov	r5, r0
 800f6a6:	f7ff fa0b 	bl	800eac0 <__mcmp>
 800f6aa:	2800      	cmp	r0, #0
 800f6ac:	dd68      	ble.n	800f780 <_strtod_l+0x8b8>
 800f6ae:	9904      	ldr	r1, [sp, #16]
 800f6b0:	4a54      	ldr	r2, [pc, #336]	; (800f804 <_strtod_l+0x93c>)
 800f6b2:	464b      	mov	r3, r9
 800f6b4:	2900      	cmp	r1, #0
 800f6b6:	f000 8084 	beq.w	800f7c2 <_strtod_l+0x8fa>
 800f6ba:	ea02 0109 	and.w	r1, r2, r9
 800f6be:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f6c2:	dc7e      	bgt.n	800f7c2 <_strtod_l+0x8fa>
 800f6c4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f6c8:	f77f aeb3 	ble.w	800f432 <_strtod_l+0x56a>
 800f6cc:	4b4e      	ldr	r3, [pc, #312]	; (800f808 <_strtod_l+0x940>)
 800f6ce:	4640      	mov	r0, r8
 800f6d0:	4649      	mov	r1, r9
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	f7f0 ff90 	bl	80005f8 <__aeabi_dmul>
 800f6d8:	4b4a      	ldr	r3, [pc, #296]	; (800f804 <_strtod_l+0x93c>)
 800f6da:	400b      	ands	r3, r1
 800f6dc:	4680      	mov	r8, r0
 800f6de:	4689      	mov	r9, r1
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	f47f ae3f 	bne.w	800f364 <_strtod_l+0x49c>
 800f6e6:	2322      	movs	r3, #34	; 0x22
 800f6e8:	6023      	str	r3, [r4, #0]
 800f6ea:	e63b      	b.n	800f364 <_strtod_l+0x49c>
 800f6ec:	f04f 32ff 	mov.w	r2, #4294967295
 800f6f0:	fa02 f303 	lsl.w	r3, r2, r3
 800f6f4:	ea03 0808 	and.w	r8, r3, r8
 800f6f8:	e6e8      	b.n	800f4cc <_strtod_l+0x604>
 800f6fa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800f6fe:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800f702:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800f706:	36e2      	adds	r6, #226	; 0xe2
 800f708:	fa01 f306 	lsl.w	r3, r1, r6
 800f70c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800f710:	e748      	b.n	800f5a4 <_strtod_l+0x6dc>
 800f712:	2100      	movs	r1, #0
 800f714:	2301      	movs	r3, #1
 800f716:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800f71a:	e743      	b.n	800f5a4 <_strtod_l+0x6dc>
 800f71c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f71e:	4632      	mov	r2, r6
 800f720:	4620      	mov	r0, r4
 800f722:	f7ff f961 	bl	800e9e8 <__lshift>
 800f726:	9016      	str	r0, [sp, #88]	; 0x58
 800f728:	2800      	cmp	r0, #0
 800f72a:	f47f af6b 	bne.w	800f604 <_strtod_l+0x73c>
 800f72e:	e60f      	b.n	800f350 <_strtod_l+0x488>
 800f730:	46ca      	mov	sl, r9
 800f732:	d171      	bne.n	800f818 <_strtod_l+0x950>
 800f734:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f736:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f73a:	b352      	cbz	r2, 800f792 <_strtod_l+0x8ca>
 800f73c:	4a33      	ldr	r2, [pc, #204]	; (800f80c <_strtod_l+0x944>)
 800f73e:	4293      	cmp	r3, r2
 800f740:	d12a      	bne.n	800f798 <_strtod_l+0x8d0>
 800f742:	9b04      	ldr	r3, [sp, #16]
 800f744:	4641      	mov	r1, r8
 800f746:	b1fb      	cbz	r3, 800f788 <_strtod_l+0x8c0>
 800f748:	4b2e      	ldr	r3, [pc, #184]	; (800f804 <_strtod_l+0x93c>)
 800f74a:	ea09 0303 	and.w	r3, r9, r3
 800f74e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f752:	f04f 32ff 	mov.w	r2, #4294967295
 800f756:	d81a      	bhi.n	800f78e <_strtod_l+0x8c6>
 800f758:	0d1b      	lsrs	r3, r3, #20
 800f75a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f75e:	fa02 f303 	lsl.w	r3, r2, r3
 800f762:	4299      	cmp	r1, r3
 800f764:	d118      	bne.n	800f798 <_strtod_l+0x8d0>
 800f766:	4b2a      	ldr	r3, [pc, #168]	; (800f810 <_strtod_l+0x948>)
 800f768:	459a      	cmp	sl, r3
 800f76a:	d102      	bne.n	800f772 <_strtod_l+0x8aa>
 800f76c:	3101      	adds	r1, #1
 800f76e:	f43f adef 	beq.w	800f350 <_strtod_l+0x488>
 800f772:	4b24      	ldr	r3, [pc, #144]	; (800f804 <_strtod_l+0x93c>)
 800f774:	ea0a 0303 	and.w	r3, sl, r3
 800f778:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800f77c:	f04f 0800 	mov.w	r8, #0
 800f780:	9b04      	ldr	r3, [sp, #16]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d1a2      	bne.n	800f6cc <_strtod_l+0x804>
 800f786:	e5ed      	b.n	800f364 <_strtod_l+0x49c>
 800f788:	f04f 33ff 	mov.w	r3, #4294967295
 800f78c:	e7e9      	b.n	800f762 <_strtod_l+0x89a>
 800f78e:	4613      	mov	r3, r2
 800f790:	e7e7      	b.n	800f762 <_strtod_l+0x89a>
 800f792:	ea53 0308 	orrs.w	r3, r3, r8
 800f796:	d08a      	beq.n	800f6ae <_strtod_l+0x7e6>
 800f798:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f79a:	b1e3      	cbz	r3, 800f7d6 <_strtod_l+0x90e>
 800f79c:	ea13 0f0a 	tst.w	r3, sl
 800f7a0:	d0ee      	beq.n	800f780 <_strtod_l+0x8b8>
 800f7a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7a4:	9a04      	ldr	r2, [sp, #16]
 800f7a6:	4640      	mov	r0, r8
 800f7a8:	4649      	mov	r1, r9
 800f7aa:	b1c3      	cbz	r3, 800f7de <_strtod_l+0x916>
 800f7ac:	f7ff fb6f 	bl	800ee8e <sulp>
 800f7b0:	4602      	mov	r2, r0
 800f7b2:	460b      	mov	r3, r1
 800f7b4:	ec51 0b18 	vmov	r0, r1, d8
 800f7b8:	f7f0 fd68 	bl	800028c <__adddf3>
 800f7bc:	4680      	mov	r8, r0
 800f7be:	4689      	mov	r9, r1
 800f7c0:	e7de      	b.n	800f780 <_strtod_l+0x8b8>
 800f7c2:	4013      	ands	r3, r2
 800f7c4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f7c8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800f7cc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800f7d0:	f04f 38ff 	mov.w	r8, #4294967295
 800f7d4:	e7d4      	b.n	800f780 <_strtod_l+0x8b8>
 800f7d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7d8:	ea13 0f08 	tst.w	r3, r8
 800f7dc:	e7e0      	b.n	800f7a0 <_strtod_l+0x8d8>
 800f7de:	f7ff fb56 	bl	800ee8e <sulp>
 800f7e2:	4602      	mov	r2, r0
 800f7e4:	460b      	mov	r3, r1
 800f7e6:	ec51 0b18 	vmov	r0, r1, d8
 800f7ea:	f7f0 fd4d 	bl	8000288 <__aeabi_dsub>
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	4680      	mov	r8, r0
 800f7f4:	4689      	mov	r9, r1
 800f7f6:	f7f1 f967 	bl	8000ac8 <__aeabi_dcmpeq>
 800f7fa:	2800      	cmp	r0, #0
 800f7fc:	d0c0      	beq.n	800f780 <_strtod_l+0x8b8>
 800f7fe:	e618      	b.n	800f432 <_strtod_l+0x56a>
 800f800:	fffffc02 	.word	0xfffffc02
 800f804:	7ff00000 	.word	0x7ff00000
 800f808:	39500000 	.word	0x39500000
 800f80c:	000fffff 	.word	0x000fffff
 800f810:	7fefffff 	.word	0x7fefffff
 800f814:	08011860 	.word	0x08011860
 800f818:	4659      	mov	r1, fp
 800f81a:	4628      	mov	r0, r5
 800f81c:	f7ff fac0 	bl	800eda0 <__ratio>
 800f820:	ec57 6b10 	vmov	r6, r7, d0
 800f824:	ee10 0a10 	vmov	r0, s0
 800f828:	2200      	movs	r2, #0
 800f82a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f82e:	4639      	mov	r1, r7
 800f830:	f7f1 f95e 	bl	8000af0 <__aeabi_dcmple>
 800f834:	2800      	cmp	r0, #0
 800f836:	d071      	beq.n	800f91c <_strtod_l+0xa54>
 800f838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d17c      	bne.n	800f938 <_strtod_l+0xa70>
 800f83e:	f1b8 0f00 	cmp.w	r8, #0
 800f842:	d15a      	bne.n	800f8fa <_strtod_l+0xa32>
 800f844:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d15d      	bne.n	800f908 <_strtod_l+0xa40>
 800f84c:	4b90      	ldr	r3, [pc, #576]	; (800fa90 <_strtod_l+0xbc8>)
 800f84e:	2200      	movs	r2, #0
 800f850:	4630      	mov	r0, r6
 800f852:	4639      	mov	r1, r7
 800f854:	f7f1 f942 	bl	8000adc <__aeabi_dcmplt>
 800f858:	2800      	cmp	r0, #0
 800f85a:	d15c      	bne.n	800f916 <_strtod_l+0xa4e>
 800f85c:	4630      	mov	r0, r6
 800f85e:	4639      	mov	r1, r7
 800f860:	4b8c      	ldr	r3, [pc, #560]	; (800fa94 <_strtod_l+0xbcc>)
 800f862:	2200      	movs	r2, #0
 800f864:	f7f0 fec8 	bl	80005f8 <__aeabi_dmul>
 800f868:	4606      	mov	r6, r0
 800f86a:	460f      	mov	r7, r1
 800f86c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800f870:	9606      	str	r6, [sp, #24]
 800f872:	9307      	str	r3, [sp, #28]
 800f874:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f878:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800f87c:	4b86      	ldr	r3, [pc, #536]	; (800fa98 <_strtod_l+0xbd0>)
 800f87e:	ea0a 0303 	and.w	r3, sl, r3
 800f882:	930d      	str	r3, [sp, #52]	; 0x34
 800f884:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f886:	4b85      	ldr	r3, [pc, #532]	; (800fa9c <_strtod_l+0xbd4>)
 800f888:	429a      	cmp	r2, r3
 800f88a:	f040 8090 	bne.w	800f9ae <_strtod_l+0xae6>
 800f88e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800f892:	ec49 8b10 	vmov	d0, r8, r9
 800f896:	f7ff f9b9 	bl	800ec0c <__ulp>
 800f89a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f89e:	ec51 0b10 	vmov	r0, r1, d0
 800f8a2:	f7f0 fea9 	bl	80005f8 <__aeabi_dmul>
 800f8a6:	4642      	mov	r2, r8
 800f8a8:	464b      	mov	r3, r9
 800f8aa:	f7f0 fcef 	bl	800028c <__adddf3>
 800f8ae:	460b      	mov	r3, r1
 800f8b0:	4979      	ldr	r1, [pc, #484]	; (800fa98 <_strtod_l+0xbd0>)
 800f8b2:	4a7b      	ldr	r2, [pc, #492]	; (800faa0 <_strtod_l+0xbd8>)
 800f8b4:	4019      	ands	r1, r3
 800f8b6:	4291      	cmp	r1, r2
 800f8b8:	4680      	mov	r8, r0
 800f8ba:	d944      	bls.n	800f946 <_strtod_l+0xa7e>
 800f8bc:	ee18 2a90 	vmov	r2, s17
 800f8c0:	4b78      	ldr	r3, [pc, #480]	; (800faa4 <_strtod_l+0xbdc>)
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d104      	bne.n	800f8d0 <_strtod_l+0xa08>
 800f8c6:	ee18 3a10 	vmov	r3, s16
 800f8ca:	3301      	adds	r3, #1
 800f8cc:	f43f ad40 	beq.w	800f350 <_strtod_l+0x488>
 800f8d0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800faa4 <_strtod_l+0xbdc>
 800f8d4:	f04f 38ff 	mov.w	r8, #4294967295
 800f8d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f8da:	4620      	mov	r0, r4
 800f8dc:	f7fe fe6a 	bl	800e5b4 <_Bfree>
 800f8e0:	9905      	ldr	r1, [sp, #20]
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	f7fe fe66 	bl	800e5b4 <_Bfree>
 800f8e8:	4659      	mov	r1, fp
 800f8ea:	4620      	mov	r0, r4
 800f8ec:	f7fe fe62 	bl	800e5b4 <_Bfree>
 800f8f0:	4629      	mov	r1, r5
 800f8f2:	4620      	mov	r0, r4
 800f8f4:	f7fe fe5e 	bl	800e5b4 <_Bfree>
 800f8f8:	e609      	b.n	800f50e <_strtod_l+0x646>
 800f8fa:	f1b8 0f01 	cmp.w	r8, #1
 800f8fe:	d103      	bne.n	800f908 <_strtod_l+0xa40>
 800f900:	f1b9 0f00 	cmp.w	r9, #0
 800f904:	f43f ad95 	beq.w	800f432 <_strtod_l+0x56a>
 800f908:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800fa60 <_strtod_l+0xb98>
 800f90c:	4f60      	ldr	r7, [pc, #384]	; (800fa90 <_strtod_l+0xbc8>)
 800f90e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f912:	2600      	movs	r6, #0
 800f914:	e7ae      	b.n	800f874 <_strtod_l+0x9ac>
 800f916:	4f5f      	ldr	r7, [pc, #380]	; (800fa94 <_strtod_l+0xbcc>)
 800f918:	2600      	movs	r6, #0
 800f91a:	e7a7      	b.n	800f86c <_strtod_l+0x9a4>
 800f91c:	4b5d      	ldr	r3, [pc, #372]	; (800fa94 <_strtod_l+0xbcc>)
 800f91e:	4630      	mov	r0, r6
 800f920:	4639      	mov	r1, r7
 800f922:	2200      	movs	r2, #0
 800f924:	f7f0 fe68 	bl	80005f8 <__aeabi_dmul>
 800f928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f92a:	4606      	mov	r6, r0
 800f92c:	460f      	mov	r7, r1
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d09c      	beq.n	800f86c <_strtod_l+0x9a4>
 800f932:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f936:	e79d      	b.n	800f874 <_strtod_l+0x9ac>
 800f938:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800fa68 <_strtod_l+0xba0>
 800f93c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f940:	ec57 6b17 	vmov	r6, r7, d7
 800f944:	e796      	b.n	800f874 <_strtod_l+0x9ac>
 800f946:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800f94a:	9b04      	ldr	r3, [sp, #16]
 800f94c:	46ca      	mov	sl, r9
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d1c2      	bne.n	800f8d8 <_strtod_l+0xa10>
 800f952:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f956:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f958:	0d1b      	lsrs	r3, r3, #20
 800f95a:	051b      	lsls	r3, r3, #20
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d1bb      	bne.n	800f8d8 <_strtod_l+0xa10>
 800f960:	4630      	mov	r0, r6
 800f962:	4639      	mov	r1, r7
 800f964:	f7f1 f9a8 	bl	8000cb8 <__aeabi_d2lz>
 800f968:	f7f0 fe18 	bl	800059c <__aeabi_l2d>
 800f96c:	4602      	mov	r2, r0
 800f96e:	460b      	mov	r3, r1
 800f970:	4630      	mov	r0, r6
 800f972:	4639      	mov	r1, r7
 800f974:	f7f0 fc88 	bl	8000288 <__aeabi_dsub>
 800f978:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f97a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f97e:	ea43 0308 	orr.w	r3, r3, r8
 800f982:	4313      	orrs	r3, r2
 800f984:	4606      	mov	r6, r0
 800f986:	460f      	mov	r7, r1
 800f988:	d054      	beq.n	800fa34 <_strtod_l+0xb6c>
 800f98a:	a339      	add	r3, pc, #228	; (adr r3, 800fa70 <_strtod_l+0xba8>)
 800f98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f990:	f7f1 f8a4 	bl	8000adc <__aeabi_dcmplt>
 800f994:	2800      	cmp	r0, #0
 800f996:	f47f ace5 	bne.w	800f364 <_strtod_l+0x49c>
 800f99a:	a337      	add	r3, pc, #220	; (adr r3, 800fa78 <_strtod_l+0xbb0>)
 800f99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9a0:	4630      	mov	r0, r6
 800f9a2:	4639      	mov	r1, r7
 800f9a4:	f7f1 f8b8 	bl	8000b18 <__aeabi_dcmpgt>
 800f9a8:	2800      	cmp	r0, #0
 800f9aa:	d095      	beq.n	800f8d8 <_strtod_l+0xa10>
 800f9ac:	e4da      	b.n	800f364 <_strtod_l+0x49c>
 800f9ae:	9b04      	ldr	r3, [sp, #16]
 800f9b0:	b333      	cbz	r3, 800fa00 <_strtod_l+0xb38>
 800f9b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f9b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f9b8:	d822      	bhi.n	800fa00 <_strtod_l+0xb38>
 800f9ba:	a331      	add	r3, pc, #196	; (adr r3, 800fa80 <_strtod_l+0xbb8>)
 800f9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c0:	4630      	mov	r0, r6
 800f9c2:	4639      	mov	r1, r7
 800f9c4:	f7f1 f894 	bl	8000af0 <__aeabi_dcmple>
 800f9c8:	b1a0      	cbz	r0, 800f9f4 <_strtod_l+0xb2c>
 800f9ca:	4639      	mov	r1, r7
 800f9cc:	4630      	mov	r0, r6
 800f9ce:	f7f1 f8eb 	bl	8000ba8 <__aeabi_d2uiz>
 800f9d2:	2801      	cmp	r0, #1
 800f9d4:	bf38      	it	cc
 800f9d6:	2001      	movcc	r0, #1
 800f9d8:	f7f0 fd94 	bl	8000504 <__aeabi_ui2d>
 800f9dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9de:	4606      	mov	r6, r0
 800f9e0:	460f      	mov	r7, r1
 800f9e2:	bb23      	cbnz	r3, 800fa2e <_strtod_l+0xb66>
 800f9e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f9e8:	9010      	str	r0, [sp, #64]	; 0x40
 800f9ea:	9311      	str	r3, [sp, #68]	; 0x44
 800f9ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f9f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800f9f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f9f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f9f8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f9fc:	1a9b      	subs	r3, r3, r2
 800f9fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800fa00:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800fa04:	eeb0 0a48 	vmov.f32	s0, s16
 800fa08:	eef0 0a68 	vmov.f32	s1, s17
 800fa0c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800fa10:	f7ff f8fc 	bl	800ec0c <__ulp>
 800fa14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800fa18:	ec53 2b10 	vmov	r2, r3, d0
 800fa1c:	f7f0 fdec 	bl	80005f8 <__aeabi_dmul>
 800fa20:	ec53 2b18 	vmov	r2, r3, d8
 800fa24:	f7f0 fc32 	bl	800028c <__adddf3>
 800fa28:	4680      	mov	r8, r0
 800fa2a:	4689      	mov	r9, r1
 800fa2c:	e78d      	b.n	800f94a <_strtod_l+0xa82>
 800fa2e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800fa32:	e7db      	b.n	800f9ec <_strtod_l+0xb24>
 800fa34:	a314      	add	r3, pc, #80	; (adr r3, 800fa88 <_strtod_l+0xbc0>)
 800fa36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa3a:	f7f1 f84f 	bl	8000adc <__aeabi_dcmplt>
 800fa3e:	e7b3      	b.n	800f9a8 <_strtod_l+0xae0>
 800fa40:	2300      	movs	r3, #0
 800fa42:	930a      	str	r3, [sp, #40]	; 0x28
 800fa44:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fa46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fa48:	6013      	str	r3, [r2, #0]
 800fa4a:	f7ff ba7c 	b.w	800ef46 <_strtod_l+0x7e>
 800fa4e:	2a65      	cmp	r2, #101	; 0x65
 800fa50:	f43f ab75 	beq.w	800f13e <_strtod_l+0x276>
 800fa54:	2a45      	cmp	r2, #69	; 0x45
 800fa56:	f43f ab72 	beq.w	800f13e <_strtod_l+0x276>
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	f7ff bbaa 	b.w	800f1b4 <_strtod_l+0x2ec>
 800fa60:	00000000 	.word	0x00000000
 800fa64:	bff00000 	.word	0xbff00000
 800fa68:	00000000 	.word	0x00000000
 800fa6c:	3ff00000 	.word	0x3ff00000
 800fa70:	94a03595 	.word	0x94a03595
 800fa74:	3fdfffff 	.word	0x3fdfffff
 800fa78:	35afe535 	.word	0x35afe535
 800fa7c:	3fe00000 	.word	0x3fe00000
 800fa80:	ffc00000 	.word	0xffc00000
 800fa84:	41dfffff 	.word	0x41dfffff
 800fa88:	94a03595 	.word	0x94a03595
 800fa8c:	3fcfffff 	.word	0x3fcfffff
 800fa90:	3ff00000 	.word	0x3ff00000
 800fa94:	3fe00000 	.word	0x3fe00000
 800fa98:	7ff00000 	.word	0x7ff00000
 800fa9c:	7fe00000 	.word	0x7fe00000
 800faa0:	7c9fffff 	.word	0x7c9fffff
 800faa4:	7fefffff 	.word	0x7fefffff

0800faa8 <_strtod_r>:
 800faa8:	4b01      	ldr	r3, [pc, #4]	; (800fab0 <_strtod_r+0x8>)
 800faaa:	f7ff ba0d 	b.w	800eec8 <_strtod_l>
 800faae:	bf00      	nop
 800fab0:	20000088 	.word	0x20000088

0800fab4 <_strtol_l.constprop.0>:
 800fab4:	2b01      	cmp	r3, #1
 800fab6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800faba:	d001      	beq.n	800fac0 <_strtol_l.constprop.0+0xc>
 800fabc:	2b24      	cmp	r3, #36	; 0x24
 800fabe:	d906      	bls.n	800face <_strtol_l.constprop.0+0x1a>
 800fac0:	f7fd fe30 	bl	800d724 <__errno>
 800fac4:	2316      	movs	r3, #22
 800fac6:	6003      	str	r3, [r0, #0]
 800fac8:	2000      	movs	r0, #0
 800faca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800face:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fbb4 <_strtol_l.constprop.0+0x100>
 800fad2:	460d      	mov	r5, r1
 800fad4:	462e      	mov	r6, r5
 800fad6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fada:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800fade:	f017 0708 	ands.w	r7, r7, #8
 800fae2:	d1f7      	bne.n	800fad4 <_strtol_l.constprop.0+0x20>
 800fae4:	2c2d      	cmp	r4, #45	; 0x2d
 800fae6:	d132      	bne.n	800fb4e <_strtol_l.constprop.0+0x9a>
 800fae8:	782c      	ldrb	r4, [r5, #0]
 800faea:	2701      	movs	r7, #1
 800faec:	1cb5      	adds	r5, r6, #2
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d05b      	beq.n	800fbaa <_strtol_l.constprop.0+0xf6>
 800faf2:	2b10      	cmp	r3, #16
 800faf4:	d109      	bne.n	800fb0a <_strtol_l.constprop.0+0x56>
 800faf6:	2c30      	cmp	r4, #48	; 0x30
 800faf8:	d107      	bne.n	800fb0a <_strtol_l.constprop.0+0x56>
 800fafa:	782c      	ldrb	r4, [r5, #0]
 800fafc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fb00:	2c58      	cmp	r4, #88	; 0x58
 800fb02:	d14d      	bne.n	800fba0 <_strtol_l.constprop.0+0xec>
 800fb04:	786c      	ldrb	r4, [r5, #1]
 800fb06:	2310      	movs	r3, #16
 800fb08:	3502      	adds	r5, #2
 800fb0a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fb0e:	f108 38ff 	add.w	r8, r8, #4294967295
 800fb12:	f04f 0e00 	mov.w	lr, #0
 800fb16:	fbb8 f9f3 	udiv	r9, r8, r3
 800fb1a:	4676      	mov	r6, lr
 800fb1c:	fb03 8a19 	mls	sl, r3, r9, r8
 800fb20:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800fb24:	f1bc 0f09 	cmp.w	ip, #9
 800fb28:	d816      	bhi.n	800fb58 <_strtol_l.constprop.0+0xa4>
 800fb2a:	4664      	mov	r4, ip
 800fb2c:	42a3      	cmp	r3, r4
 800fb2e:	dd24      	ble.n	800fb7a <_strtol_l.constprop.0+0xc6>
 800fb30:	f1be 3fff 	cmp.w	lr, #4294967295
 800fb34:	d008      	beq.n	800fb48 <_strtol_l.constprop.0+0x94>
 800fb36:	45b1      	cmp	r9, r6
 800fb38:	d31c      	bcc.n	800fb74 <_strtol_l.constprop.0+0xc0>
 800fb3a:	d101      	bne.n	800fb40 <_strtol_l.constprop.0+0x8c>
 800fb3c:	45a2      	cmp	sl, r4
 800fb3e:	db19      	blt.n	800fb74 <_strtol_l.constprop.0+0xc0>
 800fb40:	fb06 4603 	mla	r6, r6, r3, r4
 800fb44:	f04f 0e01 	mov.w	lr, #1
 800fb48:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fb4c:	e7e8      	b.n	800fb20 <_strtol_l.constprop.0+0x6c>
 800fb4e:	2c2b      	cmp	r4, #43	; 0x2b
 800fb50:	bf04      	itt	eq
 800fb52:	782c      	ldrbeq	r4, [r5, #0]
 800fb54:	1cb5      	addeq	r5, r6, #2
 800fb56:	e7ca      	b.n	800faee <_strtol_l.constprop.0+0x3a>
 800fb58:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800fb5c:	f1bc 0f19 	cmp.w	ip, #25
 800fb60:	d801      	bhi.n	800fb66 <_strtol_l.constprop.0+0xb2>
 800fb62:	3c37      	subs	r4, #55	; 0x37
 800fb64:	e7e2      	b.n	800fb2c <_strtol_l.constprop.0+0x78>
 800fb66:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800fb6a:	f1bc 0f19 	cmp.w	ip, #25
 800fb6e:	d804      	bhi.n	800fb7a <_strtol_l.constprop.0+0xc6>
 800fb70:	3c57      	subs	r4, #87	; 0x57
 800fb72:	e7db      	b.n	800fb2c <_strtol_l.constprop.0+0x78>
 800fb74:	f04f 3eff 	mov.w	lr, #4294967295
 800fb78:	e7e6      	b.n	800fb48 <_strtol_l.constprop.0+0x94>
 800fb7a:	f1be 3fff 	cmp.w	lr, #4294967295
 800fb7e:	d105      	bne.n	800fb8c <_strtol_l.constprop.0+0xd8>
 800fb80:	2322      	movs	r3, #34	; 0x22
 800fb82:	6003      	str	r3, [r0, #0]
 800fb84:	4646      	mov	r6, r8
 800fb86:	b942      	cbnz	r2, 800fb9a <_strtol_l.constprop.0+0xe6>
 800fb88:	4630      	mov	r0, r6
 800fb8a:	e79e      	b.n	800faca <_strtol_l.constprop.0+0x16>
 800fb8c:	b107      	cbz	r7, 800fb90 <_strtol_l.constprop.0+0xdc>
 800fb8e:	4276      	negs	r6, r6
 800fb90:	2a00      	cmp	r2, #0
 800fb92:	d0f9      	beq.n	800fb88 <_strtol_l.constprop.0+0xd4>
 800fb94:	f1be 0f00 	cmp.w	lr, #0
 800fb98:	d000      	beq.n	800fb9c <_strtol_l.constprop.0+0xe8>
 800fb9a:	1e69      	subs	r1, r5, #1
 800fb9c:	6011      	str	r1, [r2, #0]
 800fb9e:	e7f3      	b.n	800fb88 <_strtol_l.constprop.0+0xd4>
 800fba0:	2430      	movs	r4, #48	; 0x30
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d1b1      	bne.n	800fb0a <_strtol_l.constprop.0+0x56>
 800fba6:	2308      	movs	r3, #8
 800fba8:	e7af      	b.n	800fb0a <_strtol_l.constprop.0+0x56>
 800fbaa:	2c30      	cmp	r4, #48	; 0x30
 800fbac:	d0a5      	beq.n	800fafa <_strtol_l.constprop.0+0x46>
 800fbae:	230a      	movs	r3, #10
 800fbb0:	e7ab      	b.n	800fb0a <_strtol_l.constprop.0+0x56>
 800fbb2:	bf00      	nop
 800fbb4:	08011889 	.word	0x08011889

0800fbb8 <_strtol_r>:
 800fbb8:	f7ff bf7c 	b.w	800fab4 <_strtol_l.constprop.0>

0800fbbc <__ssputs_r>:
 800fbbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbc0:	688e      	ldr	r6, [r1, #8]
 800fbc2:	461f      	mov	r7, r3
 800fbc4:	42be      	cmp	r6, r7
 800fbc6:	680b      	ldr	r3, [r1, #0]
 800fbc8:	4682      	mov	sl, r0
 800fbca:	460c      	mov	r4, r1
 800fbcc:	4690      	mov	r8, r2
 800fbce:	d82c      	bhi.n	800fc2a <__ssputs_r+0x6e>
 800fbd0:	898a      	ldrh	r2, [r1, #12]
 800fbd2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fbd6:	d026      	beq.n	800fc26 <__ssputs_r+0x6a>
 800fbd8:	6965      	ldr	r5, [r4, #20]
 800fbda:	6909      	ldr	r1, [r1, #16]
 800fbdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fbe0:	eba3 0901 	sub.w	r9, r3, r1
 800fbe4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fbe8:	1c7b      	adds	r3, r7, #1
 800fbea:	444b      	add	r3, r9
 800fbec:	106d      	asrs	r5, r5, #1
 800fbee:	429d      	cmp	r5, r3
 800fbf0:	bf38      	it	cc
 800fbf2:	461d      	movcc	r5, r3
 800fbf4:	0553      	lsls	r3, r2, #21
 800fbf6:	d527      	bpl.n	800fc48 <__ssputs_r+0x8c>
 800fbf8:	4629      	mov	r1, r5
 800fbfa:	f7fc fcc5 	bl	800c588 <_malloc_r>
 800fbfe:	4606      	mov	r6, r0
 800fc00:	b360      	cbz	r0, 800fc5c <__ssputs_r+0xa0>
 800fc02:	6921      	ldr	r1, [r4, #16]
 800fc04:	464a      	mov	r2, r9
 800fc06:	f7fd fdba 	bl	800d77e <memcpy>
 800fc0a:	89a3      	ldrh	r3, [r4, #12]
 800fc0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fc10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc14:	81a3      	strh	r3, [r4, #12]
 800fc16:	6126      	str	r6, [r4, #16]
 800fc18:	6165      	str	r5, [r4, #20]
 800fc1a:	444e      	add	r6, r9
 800fc1c:	eba5 0509 	sub.w	r5, r5, r9
 800fc20:	6026      	str	r6, [r4, #0]
 800fc22:	60a5      	str	r5, [r4, #8]
 800fc24:	463e      	mov	r6, r7
 800fc26:	42be      	cmp	r6, r7
 800fc28:	d900      	bls.n	800fc2c <__ssputs_r+0x70>
 800fc2a:	463e      	mov	r6, r7
 800fc2c:	6820      	ldr	r0, [r4, #0]
 800fc2e:	4632      	mov	r2, r6
 800fc30:	4641      	mov	r1, r8
 800fc32:	f000 fd5c 	bl	80106ee <memmove>
 800fc36:	68a3      	ldr	r3, [r4, #8]
 800fc38:	1b9b      	subs	r3, r3, r6
 800fc3a:	60a3      	str	r3, [r4, #8]
 800fc3c:	6823      	ldr	r3, [r4, #0]
 800fc3e:	4433      	add	r3, r6
 800fc40:	6023      	str	r3, [r4, #0]
 800fc42:	2000      	movs	r0, #0
 800fc44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc48:	462a      	mov	r2, r5
 800fc4a:	f001 f922 	bl	8010e92 <_realloc_r>
 800fc4e:	4606      	mov	r6, r0
 800fc50:	2800      	cmp	r0, #0
 800fc52:	d1e0      	bne.n	800fc16 <__ssputs_r+0x5a>
 800fc54:	6921      	ldr	r1, [r4, #16]
 800fc56:	4650      	mov	r0, sl
 800fc58:	f7fe fc20 	bl	800e49c <_free_r>
 800fc5c:	230c      	movs	r3, #12
 800fc5e:	f8ca 3000 	str.w	r3, [sl]
 800fc62:	89a3      	ldrh	r3, [r4, #12]
 800fc64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc68:	81a3      	strh	r3, [r4, #12]
 800fc6a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc6e:	e7e9      	b.n	800fc44 <__ssputs_r+0x88>

0800fc70 <_svfiprintf_r>:
 800fc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc74:	4698      	mov	r8, r3
 800fc76:	898b      	ldrh	r3, [r1, #12]
 800fc78:	061b      	lsls	r3, r3, #24
 800fc7a:	b09d      	sub	sp, #116	; 0x74
 800fc7c:	4607      	mov	r7, r0
 800fc7e:	460d      	mov	r5, r1
 800fc80:	4614      	mov	r4, r2
 800fc82:	d50e      	bpl.n	800fca2 <_svfiprintf_r+0x32>
 800fc84:	690b      	ldr	r3, [r1, #16]
 800fc86:	b963      	cbnz	r3, 800fca2 <_svfiprintf_r+0x32>
 800fc88:	2140      	movs	r1, #64	; 0x40
 800fc8a:	f7fc fc7d 	bl	800c588 <_malloc_r>
 800fc8e:	6028      	str	r0, [r5, #0]
 800fc90:	6128      	str	r0, [r5, #16]
 800fc92:	b920      	cbnz	r0, 800fc9e <_svfiprintf_r+0x2e>
 800fc94:	230c      	movs	r3, #12
 800fc96:	603b      	str	r3, [r7, #0]
 800fc98:	f04f 30ff 	mov.w	r0, #4294967295
 800fc9c:	e0d0      	b.n	800fe40 <_svfiprintf_r+0x1d0>
 800fc9e:	2340      	movs	r3, #64	; 0x40
 800fca0:	616b      	str	r3, [r5, #20]
 800fca2:	2300      	movs	r3, #0
 800fca4:	9309      	str	r3, [sp, #36]	; 0x24
 800fca6:	2320      	movs	r3, #32
 800fca8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fcac:	f8cd 800c 	str.w	r8, [sp, #12]
 800fcb0:	2330      	movs	r3, #48	; 0x30
 800fcb2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fe58 <_svfiprintf_r+0x1e8>
 800fcb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fcba:	f04f 0901 	mov.w	r9, #1
 800fcbe:	4623      	mov	r3, r4
 800fcc0:	469a      	mov	sl, r3
 800fcc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fcc6:	b10a      	cbz	r2, 800fccc <_svfiprintf_r+0x5c>
 800fcc8:	2a25      	cmp	r2, #37	; 0x25
 800fcca:	d1f9      	bne.n	800fcc0 <_svfiprintf_r+0x50>
 800fccc:	ebba 0b04 	subs.w	fp, sl, r4
 800fcd0:	d00b      	beq.n	800fcea <_svfiprintf_r+0x7a>
 800fcd2:	465b      	mov	r3, fp
 800fcd4:	4622      	mov	r2, r4
 800fcd6:	4629      	mov	r1, r5
 800fcd8:	4638      	mov	r0, r7
 800fcda:	f7ff ff6f 	bl	800fbbc <__ssputs_r>
 800fcde:	3001      	adds	r0, #1
 800fce0:	f000 80a9 	beq.w	800fe36 <_svfiprintf_r+0x1c6>
 800fce4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fce6:	445a      	add	r2, fp
 800fce8:	9209      	str	r2, [sp, #36]	; 0x24
 800fcea:	f89a 3000 	ldrb.w	r3, [sl]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	f000 80a1 	beq.w	800fe36 <_svfiprintf_r+0x1c6>
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	f04f 32ff 	mov.w	r2, #4294967295
 800fcfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fcfe:	f10a 0a01 	add.w	sl, sl, #1
 800fd02:	9304      	str	r3, [sp, #16]
 800fd04:	9307      	str	r3, [sp, #28]
 800fd06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd0a:	931a      	str	r3, [sp, #104]	; 0x68
 800fd0c:	4654      	mov	r4, sl
 800fd0e:	2205      	movs	r2, #5
 800fd10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd14:	4850      	ldr	r0, [pc, #320]	; (800fe58 <_svfiprintf_r+0x1e8>)
 800fd16:	f7f0 fa5b 	bl	80001d0 <memchr>
 800fd1a:	9a04      	ldr	r2, [sp, #16]
 800fd1c:	b9d8      	cbnz	r0, 800fd56 <_svfiprintf_r+0xe6>
 800fd1e:	06d0      	lsls	r0, r2, #27
 800fd20:	bf44      	itt	mi
 800fd22:	2320      	movmi	r3, #32
 800fd24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd28:	0711      	lsls	r1, r2, #28
 800fd2a:	bf44      	itt	mi
 800fd2c:	232b      	movmi	r3, #43	; 0x2b
 800fd2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd32:	f89a 3000 	ldrb.w	r3, [sl]
 800fd36:	2b2a      	cmp	r3, #42	; 0x2a
 800fd38:	d015      	beq.n	800fd66 <_svfiprintf_r+0xf6>
 800fd3a:	9a07      	ldr	r2, [sp, #28]
 800fd3c:	4654      	mov	r4, sl
 800fd3e:	2000      	movs	r0, #0
 800fd40:	f04f 0c0a 	mov.w	ip, #10
 800fd44:	4621      	mov	r1, r4
 800fd46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd4a:	3b30      	subs	r3, #48	; 0x30
 800fd4c:	2b09      	cmp	r3, #9
 800fd4e:	d94d      	bls.n	800fdec <_svfiprintf_r+0x17c>
 800fd50:	b1b0      	cbz	r0, 800fd80 <_svfiprintf_r+0x110>
 800fd52:	9207      	str	r2, [sp, #28]
 800fd54:	e014      	b.n	800fd80 <_svfiprintf_r+0x110>
 800fd56:	eba0 0308 	sub.w	r3, r0, r8
 800fd5a:	fa09 f303 	lsl.w	r3, r9, r3
 800fd5e:	4313      	orrs	r3, r2
 800fd60:	9304      	str	r3, [sp, #16]
 800fd62:	46a2      	mov	sl, r4
 800fd64:	e7d2      	b.n	800fd0c <_svfiprintf_r+0x9c>
 800fd66:	9b03      	ldr	r3, [sp, #12]
 800fd68:	1d19      	adds	r1, r3, #4
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	9103      	str	r1, [sp, #12]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	bfbb      	ittet	lt
 800fd72:	425b      	neglt	r3, r3
 800fd74:	f042 0202 	orrlt.w	r2, r2, #2
 800fd78:	9307      	strge	r3, [sp, #28]
 800fd7a:	9307      	strlt	r3, [sp, #28]
 800fd7c:	bfb8      	it	lt
 800fd7e:	9204      	strlt	r2, [sp, #16]
 800fd80:	7823      	ldrb	r3, [r4, #0]
 800fd82:	2b2e      	cmp	r3, #46	; 0x2e
 800fd84:	d10c      	bne.n	800fda0 <_svfiprintf_r+0x130>
 800fd86:	7863      	ldrb	r3, [r4, #1]
 800fd88:	2b2a      	cmp	r3, #42	; 0x2a
 800fd8a:	d134      	bne.n	800fdf6 <_svfiprintf_r+0x186>
 800fd8c:	9b03      	ldr	r3, [sp, #12]
 800fd8e:	1d1a      	adds	r2, r3, #4
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	9203      	str	r2, [sp, #12]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	bfb8      	it	lt
 800fd98:	f04f 33ff 	movlt.w	r3, #4294967295
 800fd9c:	3402      	adds	r4, #2
 800fd9e:	9305      	str	r3, [sp, #20]
 800fda0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fe68 <_svfiprintf_r+0x1f8>
 800fda4:	7821      	ldrb	r1, [r4, #0]
 800fda6:	2203      	movs	r2, #3
 800fda8:	4650      	mov	r0, sl
 800fdaa:	f7f0 fa11 	bl	80001d0 <memchr>
 800fdae:	b138      	cbz	r0, 800fdc0 <_svfiprintf_r+0x150>
 800fdb0:	9b04      	ldr	r3, [sp, #16]
 800fdb2:	eba0 000a 	sub.w	r0, r0, sl
 800fdb6:	2240      	movs	r2, #64	; 0x40
 800fdb8:	4082      	lsls	r2, r0
 800fdba:	4313      	orrs	r3, r2
 800fdbc:	3401      	adds	r4, #1
 800fdbe:	9304      	str	r3, [sp, #16]
 800fdc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdc4:	4825      	ldr	r0, [pc, #148]	; (800fe5c <_svfiprintf_r+0x1ec>)
 800fdc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fdca:	2206      	movs	r2, #6
 800fdcc:	f7f0 fa00 	bl	80001d0 <memchr>
 800fdd0:	2800      	cmp	r0, #0
 800fdd2:	d038      	beq.n	800fe46 <_svfiprintf_r+0x1d6>
 800fdd4:	4b22      	ldr	r3, [pc, #136]	; (800fe60 <_svfiprintf_r+0x1f0>)
 800fdd6:	bb1b      	cbnz	r3, 800fe20 <_svfiprintf_r+0x1b0>
 800fdd8:	9b03      	ldr	r3, [sp, #12]
 800fdda:	3307      	adds	r3, #7
 800fddc:	f023 0307 	bic.w	r3, r3, #7
 800fde0:	3308      	adds	r3, #8
 800fde2:	9303      	str	r3, [sp, #12]
 800fde4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fde6:	4433      	add	r3, r6
 800fde8:	9309      	str	r3, [sp, #36]	; 0x24
 800fdea:	e768      	b.n	800fcbe <_svfiprintf_r+0x4e>
 800fdec:	fb0c 3202 	mla	r2, ip, r2, r3
 800fdf0:	460c      	mov	r4, r1
 800fdf2:	2001      	movs	r0, #1
 800fdf4:	e7a6      	b.n	800fd44 <_svfiprintf_r+0xd4>
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	3401      	adds	r4, #1
 800fdfa:	9305      	str	r3, [sp, #20]
 800fdfc:	4619      	mov	r1, r3
 800fdfe:	f04f 0c0a 	mov.w	ip, #10
 800fe02:	4620      	mov	r0, r4
 800fe04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe08:	3a30      	subs	r2, #48	; 0x30
 800fe0a:	2a09      	cmp	r2, #9
 800fe0c:	d903      	bls.n	800fe16 <_svfiprintf_r+0x1a6>
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d0c6      	beq.n	800fda0 <_svfiprintf_r+0x130>
 800fe12:	9105      	str	r1, [sp, #20]
 800fe14:	e7c4      	b.n	800fda0 <_svfiprintf_r+0x130>
 800fe16:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe1a:	4604      	mov	r4, r0
 800fe1c:	2301      	movs	r3, #1
 800fe1e:	e7f0      	b.n	800fe02 <_svfiprintf_r+0x192>
 800fe20:	ab03      	add	r3, sp, #12
 800fe22:	9300      	str	r3, [sp, #0]
 800fe24:	462a      	mov	r2, r5
 800fe26:	4b0f      	ldr	r3, [pc, #60]	; (800fe64 <_svfiprintf_r+0x1f4>)
 800fe28:	a904      	add	r1, sp, #16
 800fe2a:	4638      	mov	r0, r7
 800fe2c:	f7fc fcd8 	bl	800c7e0 <_printf_float>
 800fe30:	1c42      	adds	r2, r0, #1
 800fe32:	4606      	mov	r6, r0
 800fe34:	d1d6      	bne.n	800fde4 <_svfiprintf_r+0x174>
 800fe36:	89ab      	ldrh	r3, [r5, #12]
 800fe38:	065b      	lsls	r3, r3, #25
 800fe3a:	f53f af2d 	bmi.w	800fc98 <_svfiprintf_r+0x28>
 800fe3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe40:	b01d      	add	sp, #116	; 0x74
 800fe42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe46:	ab03      	add	r3, sp, #12
 800fe48:	9300      	str	r3, [sp, #0]
 800fe4a:	462a      	mov	r2, r5
 800fe4c:	4b05      	ldr	r3, [pc, #20]	; (800fe64 <_svfiprintf_r+0x1f4>)
 800fe4e:	a904      	add	r1, sp, #16
 800fe50:	4638      	mov	r0, r7
 800fe52:	f7fc ff69 	bl	800cd28 <_printf_i>
 800fe56:	e7eb      	b.n	800fe30 <_svfiprintf_r+0x1c0>
 800fe58:	08011989 	.word	0x08011989
 800fe5c:	08011993 	.word	0x08011993
 800fe60:	0800c7e1 	.word	0x0800c7e1
 800fe64:	0800fbbd 	.word	0x0800fbbd
 800fe68:	0801198f 	.word	0x0801198f

0800fe6c <_sungetc_r>:
 800fe6c:	b538      	push	{r3, r4, r5, lr}
 800fe6e:	1c4b      	adds	r3, r1, #1
 800fe70:	4614      	mov	r4, r2
 800fe72:	d103      	bne.n	800fe7c <_sungetc_r+0x10>
 800fe74:	f04f 35ff 	mov.w	r5, #4294967295
 800fe78:	4628      	mov	r0, r5
 800fe7a:	bd38      	pop	{r3, r4, r5, pc}
 800fe7c:	8993      	ldrh	r3, [r2, #12]
 800fe7e:	f023 0320 	bic.w	r3, r3, #32
 800fe82:	8193      	strh	r3, [r2, #12]
 800fe84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fe86:	6852      	ldr	r2, [r2, #4]
 800fe88:	b2cd      	uxtb	r5, r1
 800fe8a:	b18b      	cbz	r3, 800feb0 <_sungetc_r+0x44>
 800fe8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fe8e:	4293      	cmp	r3, r2
 800fe90:	dd08      	ble.n	800fea4 <_sungetc_r+0x38>
 800fe92:	6823      	ldr	r3, [r4, #0]
 800fe94:	1e5a      	subs	r2, r3, #1
 800fe96:	6022      	str	r2, [r4, #0]
 800fe98:	f803 5c01 	strb.w	r5, [r3, #-1]
 800fe9c:	6863      	ldr	r3, [r4, #4]
 800fe9e:	3301      	adds	r3, #1
 800fea0:	6063      	str	r3, [r4, #4]
 800fea2:	e7e9      	b.n	800fe78 <_sungetc_r+0xc>
 800fea4:	4621      	mov	r1, r4
 800fea6:	f000 fbe8 	bl	801067a <__submore>
 800feaa:	2800      	cmp	r0, #0
 800feac:	d0f1      	beq.n	800fe92 <_sungetc_r+0x26>
 800feae:	e7e1      	b.n	800fe74 <_sungetc_r+0x8>
 800feb0:	6921      	ldr	r1, [r4, #16]
 800feb2:	6823      	ldr	r3, [r4, #0]
 800feb4:	b151      	cbz	r1, 800fecc <_sungetc_r+0x60>
 800feb6:	4299      	cmp	r1, r3
 800feb8:	d208      	bcs.n	800fecc <_sungetc_r+0x60>
 800feba:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800febe:	42a9      	cmp	r1, r5
 800fec0:	d104      	bne.n	800fecc <_sungetc_r+0x60>
 800fec2:	3b01      	subs	r3, #1
 800fec4:	3201      	adds	r2, #1
 800fec6:	6023      	str	r3, [r4, #0]
 800fec8:	6062      	str	r2, [r4, #4]
 800feca:	e7d5      	b.n	800fe78 <_sungetc_r+0xc>
 800fecc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800fed0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fed4:	6363      	str	r3, [r4, #52]	; 0x34
 800fed6:	2303      	movs	r3, #3
 800fed8:	63a3      	str	r3, [r4, #56]	; 0x38
 800feda:	4623      	mov	r3, r4
 800fedc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800fee0:	6023      	str	r3, [r4, #0]
 800fee2:	2301      	movs	r3, #1
 800fee4:	e7dc      	b.n	800fea0 <_sungetc_r+0x34>

0800fee6 <__ssrefill_r>:
 800fee6:	b510      	push	{r4, lr}
 800fee8:	460c      	mov	r4, r1
 800feea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800feec:	b169      	cbz	r1, 800ff0a <__ssrefill_r+0x24>
 800feee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fef2:	4299      	cmp	r1, r3
 800fef4:	d001      	beq.n	800fefa <__ssrefill_r+0x14>
 800fef6:	f7fe fad1 	bl	800e49c <_free_r>
 800fefa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fefc:	6063      	str	r3, [r4, #4]
 800fefe:	2000      	movs	r0, #0
 800ff00:	6360      	str	r0, [r4, #52]	; 0x34
 800ff02:	b113      	cbz	r3, 800ff0a <__ssrefill_r+0x24>
 800ff04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ff06:	6023      	str	r3, [r4, #0]
 800ff08:	bd10      	pop	{r4, pc}
 800ff0a:	6923      	ldr	r3, [r4, #16]
 800ff0c:	6023      	str	r3, [r4, #0]
 800ff0e:	2300      	movs	r3, #0
 800ff10:	6063      	str	r3, [r4, #4]
 800ff12:	89a3      	ldrh	r3, [r4, #12]
 800ff14:	f043 0320 	orr.w	r3, r3, #32
 800ff18:	81a3      	strh	r3, [r4, #12]
 800ff1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ff1e:	e7f3      	b.n	800ff08 <__ssrefill_r+0x22>

0800ff20 <__ssvfiscanf_r>:
 800ff20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff24:	460c      	mov	r4, r1
 800ff26:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800ff2a:	2100      	movs	r1, #0
 800ff2c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800ff30:	49a6      	ldr	r1, [pc, #664]	; (80101cc <__ssvfiscanf_r+0x2ac>)
 800ff32:	91a0      	str	r1, [sp, #640]	; 0x280
 800ff34:	f10d 0804 	add.w	r8, sp, #4
 800ff38:	49a5      	ldr	r1, [pc, #660]	; (80101d0 <__ssvfiscanf_r+0x2b0>)
 800ff3a:	4fa6      	ldr	r7, [pc, #664]	; (80101d4 <__ssvfiscanf_r+0x2b4>)
 800ff3c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80101d8 <__ssvfiscanf_r+0x2b8>
 800ff40:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ff44:	4606      	mov	r6, r0
 800ff46:	91a1      	str	r1, [sp, #644]	; 0x284
 800ff48:	9300      	str	r3, [sp, #0]
 800ff4a:	7813      	ldrb	r3, [r2, #0]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	f000 815a 	beq.w	8010206 <__ssvfiscanf_r+0x2e6>
 800ff52:	5cf9      	ldrb	r1, [r7, r3]
 800ff54:	f011 0108 	ands.w	r1, r1, #8
 800ff58:	f102 0501 	add.w	r5, r2, #1
 800ff5c:	d019      	beq.n	800ff92 <__ssvfiscanf_r+0x72>
 800ff5e:	6863      	ldr	r3, [r4, #4]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	dd0f      	ble.n	800ff84 <__ssvfiscanf_r+0x64>
 800ff64:	6823      	ldr	r3, [r4, #0]
 800ff66:	781a      	ldrb	r2, [r3, #0]
 800ff68:	5cba      	ldrb	r2, [r7, r2]
 800ff6a:	0712      	lsls	r2, r2, #28
 800ff6c:	d401      	bmi.n	800ff72 <__ssvfiscanf_r+0x52>
 800ff6e:	462a      	mov	r2, r5
 800ff70:	e7eb      	b.n	800ff4a <__ssvfiscanf_r+0x2a>
 800ff72:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ff74:	3201      	adds	r2, #1
 800ff76:	9245      	str	r2, [sp, #276]	; 0x114
 800ff78:	6862      	ldr	r2, [r4, #4]
 800ff7a:	3301      	adds	r3, #1
 800ff7c:	3a01      	subs	r2, #1
 800ff7e:	6062      	str	r2, [r4, #4]
 800ff80:	6023      	str	r3, [r4, #0]
 800ff82:	e7ec      	b.n	800ff5e <__ssvfiscanf_r+0x3e>
 800ff84:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ff86:	4621      	mov	r1, r4
 800ff88:	4630      	mov	r0, r6
 800ff8a:	4798      	blx	r3
 800ff8c:	2800      	cmp	r0, #0
 800ff8e:	d0e9      	beq.n	800ff64 <__ssvfiscanf_r+0x44>
 800ff90:	e7ed      	b.n	800ff6e <__ssvfiscanf_r+0x4e>
 800ff92:	2b25      	cmp	r3, #37	; 0x25
 800ff94:	d012      	beq.n	800ffbc <__ssvfiscanf_r+0x9c>
 800ff96:	469a      	mov	sl, r3
 800ff98:	6863      	ldr	r3, [r4, #4]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	f340 8091 	ble.w	80100c2 <__ssvfiscanf_r+0x1a2>
 800ffa0:	6822      	ldr	r2, [r4, #0]
 800ffa2:	7813      	ldrb	r3, [r2, #0]
 800ffa4:	4553      	cmp	r3, sl
 800ffa6:	f040 812e 	bne.w	8010206 <__ssvfiscanf_r+0x2e6>
 800ffaa:	6863      	ldr	r3, [r4, #4]
 800ffac:	3b01      	subs	r3, #1
 800ffae:	6063      	str	r3, [r4, #4]
 800ffb0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ffb2:	3201      	adds	r2, #1
 800ffb4:	3301      	adds	r3, #1
 800ffb6:	6022      	str	r2, [r4, #0]
 800ffb8:	9345      	str	r3, [sp, #276]	; 0x114
 800ffba:	e7d8      	b.n	800ff6e <__ssvfiscanf_r+0x4e>
 800ffbc:	9141      	str	r1, [sp, #260]	; 0x104
 800ffbe:	9143      	str	r1, [sp, #268]	; 0x10c
 800ffc0:	7853      	ldrb	r3, [r2, #1]
 800ffc2:	2b2a      	cmp	r3, #42	; 0x2a
 800ffc4:	bf02      	ittt	eq
 800ffc6:	2310      	moveq	r3, #16
 800ffc8:	1c95      	addeq	r5, r2, #2
 800ffca:	9341      	streq	r3, [sp, #260]	; 0x104
 800ffcc:	220a      	movs	r2, #10
 800ffce:	46aa      	mov	sl, r5
 800ffd0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ffd4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ffd8:	2b09      	cmp	r3, #9
 800ffda:	d91c      	bls.n	8010016 <__ssvfiscanf_r+0xf6>
 800ffdc:	487e      	ldr	r0, [pc, #504]	; (80101d8 <__ssvfiscanf_r+0x2b8>)
 800ffde:	2203      	movs	r2, #3
 800ffe0:	f7f0 f8f6 	bl	80001d0 <memchr>
 800ffe4:	b138      	cbz	r0, 800fff6 <__ssvfiscanf_r+0xd6>
 800ffe6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ffe8:	eba0 0009 	sub.w	r0, r0, r9
 800ffec:	2301      	movs	r3, #1
 800ffee:	4083      	lsls	r3, r0
 800fff0:	4313      	orrs	r3, r2
 800fff2:	9341      	str	r3, [sp, #260]	; 0x104
 800fff4:	4655      	mov	r5, sl
 800fff6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fffa:	2b78      	cmp	r3, #120	; 0x78
 800fffc:	d806      	bhi.n	801000c <__ssvfiscanf_r+0xec>
 800fffe:	2b57      	cmp	r3, #87	; 0x57
 8010000:	d810      	bhi.n	8010024 <__ssvfiscanf_r+0x104>
 8010002:	2b25      	cmp	r3, #37	; 0x25
 8010004:	d0c7      	beq.n	800ff96 <__ssvfiscanf_r+0x76>
 8010006:	d857      	bhi.n	80100b8 <__ssvfiscanf_r+0x198>
 8010008:	2b00      	cmp	r3, #0
 801000a:	d065      	beq.n	80100d8 <__ssvfiscanf_r+0x1b8>
 801000c:	2303      	movs	r3, #3
 801000e:	9347      	str	r3, [sp, #284]	; 0x11c
 8010010:	230a      	movs	r3, #10
 8010012:	9342      	str	r3, [sp, #264]	; 0x108
 8010014:	e076      	b.n	8010104 <__ssvfiscanf_r+0x1e4>
 8010016:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010018:	fb02 1103 	mla	r1, r2, r3, r1
 801001c:	3930      	subs	r1, #48	; 0x30
 801001e:	9143      	str	r1, [sp, #268]	; 0x10c
 8010020:	4655      	mov	r5, sl
 8010022:	e7d4      	b.n	800ffce <__ssvfiscanf_r+0xae>
 8010024:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8010028:	2a20      	cmp	r2, #32
 801002a:	d8ef      	bhi.n	801000c <__ssvfiscanf_r+0xec>
 801002c:	a101      	add	r1, pc, #4	; (adr r1, 8010034 <__ssvfiscanf_r+0x114>)
 801002e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010032:	bf00      	nop
 8010034:	080100e7 	.word	0x080100e7
 8010038:	0801000d 	.word	0x0801000d
 801003c:	0801000d 	.word	0x0801000d
 8010040:	08010145 	.word	0x08010145
 8010044:	0801000d 	.word	0x0801000d
 8010048:	0801000d 	.word	0x0801000d
 801004c:	0801000d 	.word	0x0801000d
 8010050:	0801000d 	.word	0x0801000d
 8010054:	0801000d 	.word	0x0801000d
 8010058:	0801000d 	.word	0x0801000d
 801005c:	0801000d 	.word	0x0801000d
 8010060:	0801015b 	.word	0x0801015b
 8010064:	08010141 	.word	0x08010141
 8010068:	080100bf 	.word	0x080100bf
 801006c:	080100bf 	.word	0x080100bf
 8010070:	080100bf 	.word	0x080100bf
 8010074:	0801000d 	.word	0x0801000d
 8010078:	080100fd 	.word	0x080100fd
 801007c:	0801000d 	.word	0x0801000d
 8010080:	0801000d 	.word	0x0801000d
 8010084:	0801000d 	.word	0x0801000d
 8010088:	0801000d 	.word	0x0801000d
 801008c:	0801016b 	.word	0x0801016b
 8010090:	08010139 	.word	0x08010139
 8010094:	080100df 	.word	0x080100df
 8010098:	0801000d 	.word	0x0801000d
 801009c:	0801000d 	.word	0x0801000d
 80100a0:	08010167 	.word	0x08010167
 80100a4:	0801000d 	.word	0x0801000d
 80100a8:	08010141 	.word	0x08010141
 80100ac:	0801000d 	.word	0x0801000d
 80100b0:	0801000d 	.word	0x0801000d
 80100b4:	080100e7 	.word	0x080100e7
 80100b8:	3b45      	subs	r3, #69	; 0x45
 80100ba:	2b02      	cmp	r3, #2
 80100bc:	d8a6      	bhi.n	801000c <__ssvfiscanf_r+0xec>
 80100be:	2305      	movs	r3, #5
 80100c0:	e01f      	b.n	8010102 <__ssvfiscanf_r+0x1e2>
 80100c2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80100c4:	4621      	mov	r1, r4
 80100c6:	4630      	mov	r0, r6
 80100c8:	4798      	blx	r3
 80100ca:	2800      	cmp	r0, #0
 80100cc:	f43f af68 	beq.w	800ffa0 <__ssvfiscanf_r+0x80>
 80100d0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80100d2:	2800      	cmp	r0, #0
 80100d4:	f040 808d 	bne.w	80101f2 <__ssvfiscanf_r+0x2d2>
 80100d8:	f04f 30ff 	mov.w	r0, #4294967295
 80100dc:	e08f      	b.n	80101fe <__ssvfiscanf_r+0x2de>
 80100de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80100e0:	f042 0220 	orr.w	r2, r2, #32
 80100e4:	9241      	str	r2, [sp, #260]	; 0x104
 80100e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80100e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80100ec:	9241      	str	r2, [sp, #260]	; 0x104
 80100ee:	2210      	movs	r2, #16
 80100f0:	2b6f      	cmp	r3, #111	; 0x6f
 80100f2:	9242      	str	r2, [sp, #264]	; 0x108
 80100f4:	bf34      	ite	cc
 80100f6:	2303      	movcc	r3, #3
 80100f8:	2304      	movcs	r3, #4
 80100fa:	e002      	b.n	8010102 <__ssvfiscanf_r+0x1e2>
 80100fc:	2300      	movs	r3, #0
 80100fe:	9342      	str	r3, [sp, #264]	; 0x108
 8010100:	2303      	movs	r3, #3
 8010102:	9347      	str	r3, [sp, #284]	; 0x11c
 8010104:	6863      	ldr	r3, [r4, #4]
 8010106:	2b00      	cmp	r3, #0
 8010108:	dd3d      	ble.n	8010186 <__ssvfiscanf_r+0x266>
 801010a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801010c:	0659      	lsls	r1, r3, #25
 801010e:	d404      	bmi.n	801011a <__ssvfiscanf_r+0x1fa>
 8010110:	6823      	ldr	r3, [r4, #0]
 8010112:	781a      	ldrb	r2, [r3, #0]
 8010114:	5cba      	ldrb	r2, [r7, r2]
 8010116:	0712      	lsls	r2, r2, #28
 8010118:	d43c      	bmi.n	8010194 <__ssvfiscanf_r+0x274>
 801011a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801011c:	2b02      	cmp	r3, #2
 801011e:	dc4b      	bgt.n	80101b8 <__ssvfiscanf_r+0x298>
 8010120:	466b      	mov	r3, sp
 8010122:	4622      	mov	r2, r4
 8010124:	a941      	add	r1, sp, #260	; 0x104
 8010126:	4630      	mov	r0, r6
 8010128:	f000 f872 	bl	8010210 <_scanf_chars>
 801012c:	2801      	cmp	r0, #1
 801012e:	d06a      	beq.n	8010206 <__ssvfiscanf_r+0x2e6>
 8010130:	2802      	cmp	r0, #2
 8010132:	f47f af1c 	bne.w	800ff6e <__ssvfiscanf_r+0x4e>
 8010136:	e7cb      	b.n	80100d0 <__ssvfiscanf_r+0x1b0>
 8010138:	2308      	movs	r3, #8
 801013a:	9342      	str	r3, [sp, #264]	; 0x108
 801013c:	2304      	movs	r3, #4
 801013e:	e7e0      	b.n	8010102 <__ssvfiscanf_r+0x1e2>
 8010140:	220a      	movs	r2, #10
 8010142:	e7d5      	b.n	80100f0 <__ssvfiscanf_r+0x1d0>
 8010144:	4629      	mov	r1, r5
 8010146:	4640      	mov	r0, r8
 8010148:	f000 fa5e 	bl	8010608 <__sccl>
 801014c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801014e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010152:	9341      	str	r3, [sp, #260]	; 0x104
 8010154:	4605      	mov	r5, r0
 8010156:	2301      	movs	r3, #1
 8010158:	e7d3      	b.n	8010102 <__ssvfiscanf_r+0x1e2>
 801015a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801015c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010160:	9341      	str	r3, [sp, #260]	; 0x104
 8010162:	2300      	movs	r3, #0
 8010164:	e7cd      	b.n	8010102 <__ssvfiscanf_r+0x1e2>
 8010166:	2302      	movs	r3, #2
 8010168:	e7cb      	b.n	8010102 <__ssvfiscanf_r+0x1e2>
 801016a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801016c:	06c3      	lsls	r3, r0, #27
 801016e:	f53f aefe 	bmi.w	800ff6e <__ssvfiscanf_r+0x4e>
 8010172:	9b00      	ldr	r3, [sp, #0]
 8010174:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010176:	1d19      	adds	r1, r3, #4
 8010178:	9100      	str	r1, [sp, #0]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	07c0      	lsls	r0, r0, #31
 801017e:	bf4c      	ite	mi
 8010180:	801a      	strhmi	r2, [r3, #0]
 8010182:	601a      	strpl	r2, [r3, #0]
 8010184:	e6f3      	b.n	800ff6e <__ssvfiscanf_r+0x4e>
 8010186:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010188:	4621      	mov	r1, r4
 801018a:	4630      	mov	r0, r6
 801018c:	4798      	blx	r3
 801018e:	2800      	cmp	r0, #0
 8010190:	d0bb      	beq.n	801010a <__ssvfiscanf_r+0x1ea>
 8010192:	e79d      	b.n	80100d0 <__ssvfiscanf_r+0x1b0>
 8010194:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010196:	3201      	adds	r2, #1
 8010198:	9245      	str	r2, [sp, #276]	; 0x114
 801019a:	6862      	ldr	r2, [r4, #4]
 801019c:	3a01      	subs	r2, #1
 801019e:	2a00      	cmp	r2, #0
 80101a0:	6062      	str	r2, [r4, #4]
 80101a2:	dd02      	ble.n	80101aa <__ssvfiscanf_r+0x28a>
 80101a4:	3301      	adds	r3, #1
 80101a6:	6023      	str	r3, [r4, #0]
 80101a8:	e7b2      	b.n	8010110 <__ssvfiscanf_r+0x1f0>
 80101aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80101ac:	4621      	mov	r1, r4
 80101ae:	4630      	mov	r0, r6
 80101b0:	4798      	blx	r3
 80101b2:	2800      	cmp	r0, #0
 80101b4:	d0ac      	beq.n	8010110 <__ssvfiscanf_r+0x1f0>
 80101b6:	e78b      	b.n	80100d0 <__ssvfiscanf_r+0x1b0>
 80101b8:	2b04      	cmp	r3, #4
 80101ba:	dc0f      	bgt.n	80101dc <__ssvfiscanf_r+0x2bc>
 80101bc:	466b      	mov	r3, sp
 80101be:	4622      	mov	r2, r4
 80101c0:	a941      	add	r1, sp, #260	; 0x104
 80101c2:	4630      	mov	r0, r6
 80101c4:	f000 f87e 	bl	80102c4 <_scanf_i>
 80101c8:	e7b0      	b.n	801012c <__ssvfiscanf_r+0x20c>
 80101ca:	bf00      	nop
 80101cc:	0800fe6d 	.word	0x0800fe6d
 80101d0:	0800fee7 	.word	0x0800fee7
 80101d4:	08011889 	.word	0x08011889
 80101d8:	0801198f 	.word	0x0801198f
 80101dc:	4b0b      	ldr	r3, [pc, #44]	; (801020c <__ssvfiscanf_r+0x2ec>)
 80101de:	2b00      	cmp	r3, #0
 80101e0:	f43f aec5 	beq.w	800ff6e <__ssvfiscanf_r+0x4e>
 80101e4:	466b      	mov	r3, sp
 80101e6:	4622      	mov	r2, r4
 80101e8:	a941      	add	r1, sp, #260	; 0x104
 80101ea:	4630      	mov	r0, r6
 80101ec:	f7fc febe 	bl	800cf6c <_scanf_float>
 80101f0:	e79c      	b.n	801012c <__ssvfiscanf_r+0x20c>
 80101f2:	89a3      	ldrh	r3, [r4, #12]
 80101f4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80101f8:	bf18      	it	ne
 80101fa:	f04f 30ff 	movne.w	r0, #4294967295
 80101fe:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8010202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010206:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010208:	e7f9      	b.n	80101fe <__ssvfiscanf_r+0x2de>
 801020a:	bf00      	nop
 801020c:	0800cf6d 	.word	0x0800cf6d

08010210 <_scanf_chars>:
 8010210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010214:	4615      	mov	r5, r2
 8010216:	688a      	ldr	r2, [r1, #8]
 8010218:	4680      	mov	r8, r0
 801021a:	460c      	mov	r4, r1
 801021c:	b932      	cbnz	r2, 801022c <_scanf_chars+0x1c>
 801021e:	698a      	ldr	r2, [r1, #24]
 8010220:	2a00      	cmp	r2, #0
 8010222:	bf0c      	ite	eq
 8010224:	2201      	moveq	r2, #1
 8010226:	f04f 32ff 	movne.w	r2, #4294967295
 801022a:	608a      	str	r2, [r1, #8]
 801022c:	6822      	ldr	r2, [r4, #0]
 801022e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80102c0 <_scanf_chars+0xb0>
 8010232:	06d1      	lsls	r1, r2, #27
 8010234:	bf5f      	itttt	pl
 8010236:	681a      	ldrpl	r2, [r3, #0]
 8010238:	1d11      	addpl	r1, r2, #4
 801023a:	6019      	strpl	r1, [r3, #0]
 801023c:	6816      	ldrpl	r6, [r2, #0]
 801023e:	2700      	movs	r7, #0
 8010240:	69a0      	ldr	r0, [r4, #24]
 8010242:	b188      	cbz	r0, 8010268 <_scanf_chars+0x58>
 8010244:	2801      	cmp	r0, #1
 8010246:	d107      	bne.n	8010258 <_scanf_chars+0x48>
 8010248:	682a      	ldr	r2, [r5, #0]
 801024a:	7811      	ldrb	r1, [r2, #0]
 801024c:	6962      	ldr	r2, [r4, #20]
 801024e:	5c52      	ldrb	r2, [r2, r1]
 8010250:	b952      	cbnz	r2, 8010268 <_scanf_chars+0x58>
 8010252:	2f00      	cmp	r7, #0
 8010254:	d031      	beq.n	80102ba <_scanf_chars+0xaa>
 8010256:	e022      	b.n	801029e <_scanf_chars+0x8e>
 8010258:	2802      	cmp	r0, #2
 801025a:	d120      	bne.n	801029e <_scanf_chars+0x8e>
 801025c:	682b      	ldr	r3, [r5, #0]
 801025e:	781b      	ldrb	r3, [r3, #0]
 8010260:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010264:	071b      	lsls	r3, r3, #28
 8010266:	d41a      	bmi.n	801029e <_scanf_chars+0x8e>
 8010268:	6823      	ldr	r3, [r4, #0]
 801026a:	06da      	lsls	r2, r3, #27
 801026c:	bf5e      	ittt	pl
 801026e:	682b      	ldrpl	r3, [r5, #0]
 8010270:	781b      	ldrbpl	r3, [r3, #0]
 8010272:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010276:	682a      	ldr	r2, [r5, #0]
 8010278:	686b      	ldr	r3, [r5, #4]
 801027a:	3201      	adds	r2, #1
 801027c:	602a      	str	r2, [r5, #0]
 801027e:	68a2      	ldr	r2, [r4, #8]
 8010280:	3b01      	subs	r3, #1
 8010282:	3a01      	subs	r2, #1
 8010284:	606b      	str	r3, [r5, #4]
 8010286:	3701      	adds	r7, #1
 8010288:	60a2      	str	r2, [r4, #8]
 801028a:	b142      	cbz	r2, 801029e <_scanf_chars+0x8e>
 801028c:	2b00      	cmp	r3, #0
 801028e:	dcd7      	bgt.n	8010240 <_scanf_chars+0x30>
 8010290:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010294:	4629      	mov	r1, r5
 8010296:	4640      	mov	r0, r8
 8010298:	4798      	blx	r3
 801029a:	2800      	cmp	r0, #0
 801029c:	d0d0      	beq.n	8010240 <_scanf_chars+0x30>
 801029e:	6823      	ldr	r3, [r4, #0]
 80102a0:	f013 0310 	ands.w	r3, r3, #16
 80102a4:	d105      	bne.n	80102b2 <_scanf_chars+0xa2>
 80102a6:	68e2      	ldr	r2, [r4, #12]
 80102a8:	3201      	adds	r2, #1
 80102aa:	60e2      	str	r2, [r4, #12]
 80102ac:	69a2      	ldr	r2, [r4, #24]
 80102ae:	b102      	cbz	r2, 80102b2 <_scanf_chars+0xa2>
 80102b0:	7033      	strb	r3, [r6, #0]
 80102b2:	6923      	ldr	r3, [r4, #16]
 80102b4:	443b      	add	r3, r7
 80102b6:	6123      	str	r3, [r4, #16]
 80102b8:	2000      	movs	r0, #0
 80102ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102be:	bf00      	nop
 80102c0:	08011889 	.word	0x08011889

080102c4 <_scanf_i>:
 80102c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102c8:	4698      	mov	r8, r3
 80102ca:	4b74      	ldr	r3, [pc, #464]	; (801049c <_scanf_i+0x1d8>)
 80102cc:	460c      	mov	r4, r1
 80102ce:	4682      	mov	sl, r0
 80102d0:	4616      	mov	r6, r2
 80102d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80102d6:	b087      	sub	sp, #28
 80102d8:	ab03      	add	r3, sp, #12
 80102da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80102de:	4b70      	ldr	r3, [pc, #448]	; (80104a0 <_scanf_i+0x1dc>)
 80102e0:	69a1      	ldr	r1, [r4, #24]
 80102e2:	4a70      	ldr	r2, [pc, #448]	; (80104a4 <_scanf_i+0x1e0>)
 80102e4:	2903      	cmp	r1, #3
 80102e6:	bf18      	it	ne
 80102e8:	461a      	movne	r2, r3
 80102ea:	68a3      	ldr	r3, [r4, #8]
 80102ec:	9201      	str	r2, [sp, #4]
 80102ee:	1e5a      	subs	r2, r3, #1
 80102f0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80102f4:	bf88      	it	hi
 80102f6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80102fa:	4627      	mov	r7, r4
 80102fc:	bf82      	ittt	hi
 80102fe:	eb03 0905 	addhi.w	r9, r3, r5
 8010302:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010306:	60a3      	strhi	r3, [r4, #8]
 8010308:	f857 3b1c 	ldr.w	r3, [r7], #28
 801030c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8010310:	bf98      	it	ls
 8010312:	f04f 0900 	movls.w	r9, #0
 8010316:	6023      	str	r3, [r4, #0]
 8010318:	463d      	mov	r5, r7
 801031a:	f04f 0b00 	mov.w	fp, #0
 801031e:	6831      	ldr	r1, [r6, #0]
 8010320:	ab03      	add	r3, sp, #12
 8010322:	7809      	ldrb	r1, [r1, #0]
 8010324:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010328:	2202      	movs	r2, #2
 801032a:	f7ef ff51 	bl	80001d0 <memchr>
 801032e:	b328      	cbz	r0, 801037c <_scanf_i+0xb8>
 8010330:	f1bb 0f01 	cmp.w	fp, #1
 8010334:	d159      	bne.n	80103ea <_scanf_i+0x126>
 8010336:	6862      	ldr	r2, [r4, #4]
 8010338:	b92a      	cbnz	r2, 8010346 <_scanf_i+0x82>
 801033a:	6822      	ldr	r2, [r4, #0]
 801033c:	2308      	movs	r3, #8
 801033e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010342:	6063      	str	r3, [r4, #4]
 8010344:	6022      	str	r2, [r4, #0]
 8010346:	6822      	ldr	r2, [r4, #0]
 8010348:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801034c:	6022      	str	r2, [r4, #0]
 801034e:	68a2      	ldr	r2, [r4, #8]
 8010350:	1e51      	subs	r1, r2, #1
 8010352:	60a1      	str	r1, [r4, #8]
 8010354:	b192      	cbz	r2, 801037c <_scanf_i+0xb8>
 8010356:	6832      	ldr	r2, [r6, #0]
 8010358:	1c51      	adds	r1, r2, #1
 801035a:	6031      	str	r1, [r6, #0]
 801035c:	7812      	ldrb	r2, [r2, #0]
 801035e:	f805 2b01 	strb.w	r2, [r5], #1
 8010362:	6872      	ldr	r2, [r6, #4]
 8010364:	3a01      	subs	r2, #1
 8010366:	2a00      	cmp	r2, #0
 8010368:	6072      	str	r2, [r6, #4]
 801036a:	dc07      	bgt.n	801037c <_scanf_i+0xb8>
 801036c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8010370:	4631      	mov	r1, r6
 8010372:	4650      	mov	r0, sl
 8010374:	4790      	blx	r2
 8010376:	2800      	cmp	r0, #0
 8010378:	f040 8085 	bne.w	8010486 <_scanf_i+0x1c2>
 801037c:	f10b 0b01 	add.w	fp, fp, #1
 8010380:	f1bb 0f03 	cmp.w	fp, #3
 8010384:	d1cb      	bne.n	801031e <_scanf_i+0x5a>
 8010386:	6863      	ldr	r3, [r4, #4]
 8010388:	b90b      	cbnz	r3, 801038e <_scanf_i+0xca>
 801038a:	230a      	movs	r3, #10
 801038c:	6063      	str	r3, [r4, #4]
 801038e:	6863      	ldr	r3, [r4, #4]
 8010390:	4945      	ldr	r1, [pc, #276]	; (80104a8 <_scanf_i+0x1e4>)
 8010392:	6960      	ldr	r0, [r4, #20]
 8010394:	1ac9      	subs	r1, r1, r3
 8010396:	f000 f937 	bl	8010608 <__sccl>
 801039a:	f04f 0b00 	mov.w	fp, #0
 801039e:	68a3      	ldr	r3, [r4, #8]
 80103a0:	6822      	ldr	r2, [r4, #0]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d03d      	beq.n	8010422 <_scanf_i+0x15e>
 80103a6:	6831      	ldr	r1, [r6, #0]
 80103a8:	6960      	ldr	r0, [r4, #20]
 80103aa:	f891 c000 	ldrb.w	ip, [r1]
 80103ae:	f810 000c 	ldrb.w	r0, [r0, ip]
 80103b2:	2800      	cmp	r0, #0
 80103b4:	d035      	beq.n	8010422 <_scanf_i+0x15e>
 80103b6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80103ba:	d124      	bne.n	8010406 <_scanf_i+0x142>
 80103bc:	0510      	lsls	r0, r2, #20
 80103be:	d522      	bpl.n	8010406 <_scanf_i+0x142>
 80103c0:	f10b 0b01 	add.w	fp, fp, #1
 80103c4:	f1b9 0f00 	cmp.w	r9, #0
 80103c8:	d003      	beq.n	80103d2 <_scanf_i+0x10e>
 80103ca:	3301      	adds	r3, #1
 80103cc:	f109 39ff 	add.w	r9, r9, #4294967295
 80103d0:	60a3      	str	r3, [r4, #8]
 80103d2:	6873      	ldr	r3, [r6, #4]
 80103d4:	3b01      	subs	r3, #1
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	6073      	str	r3, [r6, #4]
 80103da:	dd1b      	ble.n	8010414 <_scanf_i+0x150>
 80103dc:	6833      	ldr	r3, [r6, #0]
 80103de:	3301      	adds	r3, #1
 80103e0:	6033      	str	r3, [r6, #0]
 80103e2:	68a3      	ldr	r3, [r4, #8]
 80103e4:	3b01      	subs	r3, #1
 80103e6:	60a3      	str	r3, [r4, #8]
 80103e8:	e7d9      	b.n	801039e <_scanf_i+0xda>
 80103ea:	f1bb 0f02 	cmp.w	fp, #2
 80103ee:	d1ae      	bne.n	801034e <_scanf_i+0x8a>
 80103f0:	6822      	ldr	r2, [r4, #0]
 80103f2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80103f6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80103fa:	d1bf      	bne.n	801037c <_scanf_i+0xb8>
 80103fc:	2310      	movs	r3, #16
 80103fe:	6063      	str	r3, [r4, #4]
 8010400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010404:	e7a2      	b.n	801034c <_scanf_i+0x88>
 8010406:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801040a:	6022      	str	r2, [r4, #0]
 801040c:	780b      	ldrb	r3, [r1, #0]
 801040e:	f805 3b01 	strb.w	r3, [r5], #1
 8010412:	e7de      	b.n	80103d2 <_scanf_i+0x10e>
 8010414:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010418:	4631      	mov	r1, r6
 801041a:	4650      	mov	r0, sl
 801041c:	4798      	blx	r3
 801041e:	2800      	cmp	r0, #0
 8010420:	d0df      	beq.n	80103e2 <_scanf_i+0x11e>
 8010422:	6823      	ldr	r3, [r4, #0]
 8010424:	05d9      	lsls	r1, r3, #23
 8010426:	d50d      	bpl.n	8010444 <_scanf_i+0x180>
 8010428:	42bd      	cmp	r5, r7
 801042a:	d909      	bls.n	8010440 <_scanf_i+0x17c>
 801042c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010430:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010434:	4632      	mov	r2, r6
 8010436:	4650      	mov	r0, sl
 8010438:	4798      	blx	r3
 801043a:	f105 39ff 	add.w	r9, r5, #4294967295
 801043e:	464d      	mov	r5, r9
 8010440:	42bd      	cmp	r5, r7
 8010442:	d028      	beq.n	8010496 <_scanf_i+0x1d2>
 8010444:	6822      	ldr	r2, [r4, #0]
 8010446:	f012 0210 	ands.w	r2, r2, #16
 801044a:	d113      	bne.n	8010474 <_scanf_i+0x1b0>
 801044c:	702a      	strb	r2, [r5, #0]
 801044e:	6863      	ldr	r3, [r4, #4]
 8010450:	9e01      	ldr	r6, [sp, #4]
 8010452:	4639      	mov	r1, r7
 8010454:	4650      	mov	r0, sl
 8010456:	47b0      	blx	r6
 8010458:	f8d8 3000 	ldr.w	r3, [r8]
 801045c:	6821      	ldr	r1, [r4, #0]
 801045e:	1d1a      	adds	r2, r3, #4
 8010460:	f8c8 2000 	str.w	r2, [r8]
 8010464:	f011 0f20 	tst.w	r1, #32
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	d00f      	beq.n	801048c <_scanf_i+0x1c8>
 801046c:	6018      	str	r0, [r3, #0]
 801046e:	68e3      	ldr	r3, [r4, #12]
 8010470:	3301      	adds	r3, #1
 8010472:	60e3      	str	r3, [r4, #12]
 8010474:	6923      	ldr	r3, [r4, #16]
 8010476:	1bed      	subs	r5, r5, r7
 8010478:	445d      	add	r5, fp
 801047a:	442b      	add	r3, r5
 801047c:	6123      	str	r3, [r4, #16]
 801047e:	2000      	movs	r0, #0
 8010480:	b007      	add	sp, #28
 8010482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010486:	f04f 0b00 	mov.w	fp, #0
 801048a:	e7ca      	b.n	8010422 <_scanf_i+0x15e>
 801048c:	07ca      	lsls	r2, r1, #31
 801048e:	bf4c      	ite	mi
 8010490:	8018      	strhmi	r0, [r3, #0]
 8010492:	6018      	strpl	r0, [r3, #0]
 8010494:	e7eb      	b.n	801046e <_scanf_i+0x1aa>
 8010496:	2001      	movs	r0, #1
 8010498:	e7f2      	b.n	8010480 <_scanf_i+0x1bc>
 801049a:	bf00      	nop
 801049c:	080115e8 	.word	0x080115e8
 80104a0:	08010fd5 	.word	0x08010fd5
 80104a4:	0800fbb9 	.word	0x0800fbb9
 80104a8:	080119aa 	.word	0x080119aa

080104ac <__sflush_r>:
 80104ac:	898a      	ldrh	r2, [r1, #12]
 80104ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104b2:	4605      	mov	r5, r0
 80104b4:	0710      	lsls	r0, r2, #28
 80104b6:	460c      	mov	r4, r1
 80104b8:	d458      	bmi.n	801056c <__sflush_r+0xc0>
 80104ba:	684b      	ldr	r3, [r1, #4]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	dc05      	bgt.n	80104cc <__sflush_r+0x20>
 80104c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	dc02      	bgt.n	80104cc <__sflush_r+0x20>
 80104c6:	2000      	movs	r0, #0
 80104c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80104ce:	2e00      	cmp	r6, #0
 80104d0:	d0f9      	beq.n	80104c6 <__sflush_r+0x1a>
 80104d2:	2300      	movs	r3, #0
 80104d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80104d8:	682f      	ldr	r7, [r5, #0]
 80104da:	6a21      	ldr	r1, [r4, #32]
 80104dc:	602b      	str	r3, [r5, #0]
 80104de:	d032      	beq.n	8010546 <__sflush_r+0x9a>
 80104e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80104e2:	89a3      	ldrh	r3, [r4, #12]
 80104e4:	075a      	lsls	r2, r3, #29
 80104e6:	d505      	bpl.n	80104f4 <__sflush_r+0x48>
 80104e8:	6863      	ldr	r3, [r4, #4]
 80104ea:	1ac0      	subs	r0, r0, r3
 80104ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80104ee:	b10b      	cbz	r3, 80104f4 <__sflush_r+0x48>
 80104f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80104f2:	1ac0      	subs	r0, r0, r3
 80104f4:	2300      	movs	r3, #0
 80104f6:	4602      	mov	r2, r0
 80104f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80104fa:	6a21      	ldr	r1, [r4, #32]
 80104fc:	4628      	mov	r0, r5
 80104fe:	47b0      	blx	r6
 8010500:	1c43      	adds	r3, r0, #1
 8010502:	89a3      	ldrh	r3, [r4, #12]
 8010504:	d106      	bne.n	8010514 <__sflush_r+0x68>
 8010506:	6829      	ldr	r1, [r5, #0]
 8010508:	291d      	cmp	r1, #29
 801050a:	d82b      	bhi.n	8010564 <__sflush_r+0xb8>
 801050c:	4a29      	ldr	r2, [pc, #164]	; (80105b4 <__sflush_r+0x108>)
 801050e:	410a      	asrs	r2, r1
 8010510:	07d6      	lsls	r6, r2, #31
 8010512:	d427      	bmi.n	8010564 <__sflush_r+0xb8>
 8010514:	2200      	movs	r2, #0
 8010516:	6062      	str	r2, [r4, #4]
 8010518:	04d9      	lsls	r1, r3, #19
 801051a:	6922      	ldr	r2, [r4, #16]
 801051c:	6022      	str	r2, [r4, #0]
 801051e:	d504      	bpl.n	801052a <__sflush_r+0x7e>
 8010520:	1c42      	adds	r2, r0, #1
 8010522:	d101      	bne.n	8010528 <__sflush_r+0x7c>
 8010524:	682b      	ldr	r3, [r5, #0]
 8010526:	b903      	cbnz	r3, 801052a <__sflush_r+0x7e>
 8010528:	6560      	str	r0, [r4, #84]	; 0x54
 801052a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801052c:	602f      	str	r7, [r5, #0]
 801052e:	2900      	cmp	r1, #0
 8010530:	d0c9      	beq.n	80104c6 <__sflush_r+0x1a>
 8010532:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010536:	4299      	cmp	r1, r3
 8010538:	d002      	beq.n	8010540 <__sflush_r+0x94>
 801053a:	4628      	mov	r0, r5
 801053c:	f7fd ffae 	bl	800e49c <_free_r>
 8010540:	2000      	movs	r0, #0
 8010542:	6360      	str	r0, [r4, #52]	; 0x34
 8010544:	e7c0      	b.n	80104c8 <__sflush_r+0x1c>
 8010546:	2301      	movs	r3, #1
 8010548:	4628      	mov	r0, r5
 801054a:	47b0      	blx	r6
 801054c:	1c41      	adds	r1, r0, #1
 801054e:	d1c8      	bne.n	80104e2 <__sflush_r+0x36>
 8010550:	682b      	ldr	r3, [r5, #0]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d0c5      	beq.n	80104e2 <__sflush_r+0x36>
 8010556:	2b1d      	cmp	r3, #29
 8010558:	d001      	beq.n	801055e <__sflush_r+0xb2>
 801055a:	2b16      	cmp	r3, #22
 801055c:	d101      	bne.n	8010562 <__sflush_r+0xb6>
 801055e:	602f      	str	r7, [r5, #0]
 8010560:	e7b1      	b.n	80104c6 <__sflush_r+0x1a>
 8010562:	89a3      	ldrh	r3, [r4, #12]
 8010564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010568:	81a3      	strh	r3, [r4, #12]
 801056a:	e7ad      	b.n	80104c8 <__sflush_r+0x1c>
 801056c:	690f      	ldr	r7, [r1, #16]
 801056e:	2f00      	cmp	r7, #0
 8010570:	d0a9      	beq.n	80104c6 <__sflush_r+0x1a>
 8010572:	0793      	lsls	r3, r2, #30
 8010574:	680e      	ldr	r6, [r1, #0]
 8010576:	bf08      	it	eq
 8010578:	694b      	ldreq	r3, [r1, #20]
 801057a:	600f      	str	r7, [r1, #0]
 801057c:	bf18      	it	ne
 801057e:	2300      	movne	r3, #0
 8010580:	eba6 0807 	sub.w	r8, r6, r7
 8010584:	608b      	str	r3, [r1, #8]
 8010586:	f1b8 0f00 	cmp.w	r8, #0
 801058a:	dd9c      	ble.n	80104c6 <__sflush_r+0x1a>
 801058c:	6a21      	ldr	r1, [r4, #32]
 801058e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010590:	4643      	mov	r3, r8
 8010592:	463a      	mov	r2, r7
 8010594:	4628      	mov	r0, r5
 8010596:	47b0      	blx	r6
 8010598:	2800      	cmp	r0, #0
 801059a:	dc06      	bgt.n	80105aa <__sflush_r+0xfe>
 801059c:	89a3      	ldrh	r3, [r4, #12]
 801059e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105a2:	81a3      	strh	r3, [r4, #12]
 80105a4:	f04f 30ff 	mov.w	r0, #4294967295
 80105a8:	e78e      	b.n	80104c8 <__sflush_r+0x1c>
 80105aa:	4407      	add	r7, r0
 80105ac:	eba8 0800 	sub.w	r8, r8, r0
 80105b0:	e7e9      	b.n	8010586 <__sflush_r+0xda>
 80105b2:	bf00      	nop
 80105b4:	dfbffffe 	.word	0xdfbffffe

080105b8 <_fflush_r>:
 80105b8:	b538      	push	{r3, r4, r5, lr}
 80105ba:	690b      	ldr	r3, [r1, #16]
 80105bc:	4605      	mov	r5, r0
 80105be:	460c      	mov	r4, r1
 80105c0:	b913      	cbnz	r3, 80105c8 <_fflush_r+0x10>
 80105c2:	2500      	movs	r5, #0
 80105c4:	4628      	mov	r0, r5
 80105c6:	bd38      	pop	{r3, r4, r5, pc}
 80105c8:	b118      	cbz	r0, 80105d2 <_fflush_r+0x1a>
 80105ca:	6a03      	ldr	r3, [r0, #32]
 80105cc:	b90b      	cbnz	r3, 80105d2 <_fflush_r+0x1a>
 80105ce:	f7fc ff69 	bl	800d4a4 <__sinit>
 80105d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d0f3      	beq.n	80105c2 <_fflush_r+0xa>
 80105da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80105dc:	07d0      	lsls	r0, r2, #31
 80105de:	d404      	bmi.n	80105ea <_fflush_r+0x32>
 80105e0:	0599      	lsls	r1, r3, #22
 80105e2:	d402      	bmi.n	80105ea <_fflush_r+0x32>
 80105e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105e6:	f7fd f8c8 	bl	800d77a <__retarget_lock_acquire_recursive>
 80105ea:	4628      	mov	r0, r5
 80105ec:	4621      	mov	r1, r4
 80105ee:	f7ff ff5d 	bl	80104ac <__sflush_r>
 80105f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80105f4:	07da      	lsls	r2, r3, #31
 80105f6:	4605      	mov	r5, r0
 80105f8:	d4e4      	bmi.n	80105c4 <_fflush_r+0xc>
 80105fa:	89a3      	ldrh	r3, [r4, #12]
 80105fc:	059b      	lsls	r3, r3, #22
 80105fe:	d4e1      	bmi.n	80105c4 <_fflush_r+0xc>
 8010600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010602:	f7fd f8bb 	bl	800d77c <__retarget_lock_release_recursive>
 8010606:	e7dd      	b.n	80105c4 <_fflush_r+0xc>

08010608 <__sccl>:
 8010608:	b570      	push	{r4, r5, r6, lr}
 801060a:	780b      	ldrb	r3, [r1, #0]
 801060c:	4604      	mov	r4, r0
 801060e:	2b5e      	cmp	r3, #94	; 0x5e
 8010610:	bf0b      	itete	eq
 8010612:	784b      	ldrbeq	r3, [r1, #1]
 8010614:	1c4a      	addne	r2, r1, #1
 8010616:	1c8a      	addeq	r2, r1, #2
 8010618:	2100      	movne	r1, #0
 801061a:	bf08      	it	eq
 801061c:	2101      	moveq	r1, #1
 801061e:	3801      	subs	r0, #1
 8010620:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8010624:	f800 1f01 	strb.w	r1, [r0, #1]!
 8010628:	42a8      	cmp	r0, r5
 801062a:	d1fb      	bne.n	8010624 <__sccl+0x1c>
 801062c:	b90b      	cbnz	r3, 8010632 <__sccl+0x2a>
 801062e:	1e50      	subs	r0, r2, #1
 8010630:	bd70      	pop	{r4, r5, r6, pc}
 8010632:	f081 0101 	eor.w	r1, r1, #1
 8010636:	54e1      	strb	r1, [r4, r3]
 8010638:	4610      	mov	r0, r2
 801063a:	4602      	mov	r2, r0
 801063c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010640:	2d2d      	cmp	r5, #45	; 0x2d
 8010642:	d005      	beq.n	8010650 <__sccl+0x48>
 8010644:	2d5d      	cmp	r5, #93	; 0x5d
 8010646:	d016      	beq.n	8010676 <__sccl+0x6e>
 8010648:	2d00      	cmp	r5, #0
 801064a:	d0f1      	beq.n	8010630 <__sccl+0x28>
 801064c:	462b      	mov	r3, r5
 801064e:	e7f2      	b.n	8010636 <__sccl+0x2e>
 8010650:	7846      	ldrb	r6, [r0, #1]
 8010652:	2e5d      	cmp	r6, #93	; 0x5d
 8010654:	d0fa      	beq.n	801064c <__sccl+0x44>
 8010656:	42b3      	cmp	r3, r6
 8010658:	dcf8      	bgt.n	801064c <__sccl+0x44>
 801065a:	3002      	adds	r0, #2
 801065c:	461a      	mov	r2, r3
 801065e:	3201      	adds	r2, #1
 8010660:	4296      	cmp	r6, r2
 8010662:	54a1      	strb	r1, [r4, r2]
 8010664:	dcfb      	bgt.n	801065e <__sccl+0x56>
 8010666:	1af2      	subs	r2, r6, r3
 8010668:	3a01      	subs	r2, #1
 801066a:	1c5d      	adds	r5, r3, #1
 801066c:	42b3      	cmp	r3, r6
 801066e:	bfa8      	it	ge
 8010670:	2200      	movge	r2, #0
 8010672:	18ab      	adds	r3, r5, r2
 8010674:	e7e1      	b.n	801063a <__sccl+0x32>
 8010676:	4610      	mov	r0, r2
 8010678:	e7da      	b.n	8010630 <__sccl+0x28>

0801067a <__submore>:
 801067a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801067e:	460c      	mov	r4, r1
 8010680:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010682:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010686:	4299      	cmp	r1, r3
 8010688:	d11d      	bne.n	80106c6 <__submore+0x4c>
 801068a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801068e:	f7fb ff7b 	bl	800c588 <_malloc_r>
 8010692:	b918      	cbnz	r0, 801069c <__submore+0x22>
 8010694:	f04f 30ff 	mov.w	r0, #4294967295
 8010698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801069c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106a0:	63a3      	str	r3, [r4, #56]	; 0x38
 80106a2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80106a6:	6360      	str	r0, [r4, #52]	; 0x34
 80106a8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80106ac:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80106b0:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80106b4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80106b8:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80106bc:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80106c0:	6020      	str	r0, [r4, #0]
 80106c2:	2000      	movs	r0, #0
 80106c4:	e7e8      	b.n	8010698 <__submore+0x1e>
 80106c6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80106c8:	0077      	lsls	r7, r6, #1
 80106ca:	463a      	mov	r2, r7
 80106cc:	f000 fbe1 	bl	8010e92 <_realloc_r>
 80106d0:	4605      	mov	r5, r0
 80106d2:	2800      	cmp	r0, #0
 80106d4:	d0de      	beq.n	8010694 <__submore+0x1a>
 80106d6:	eb00 0806 	add.w	r8, r0, r6
 80106da:	4601      	mov	r1, r0
 80106dc:	4632      	mov	r2, r6
 80106de:	4640      	mov	r0, r8
 80106e0:	f7fd f84d 	bl	800d77e <memcpy>
 80106e4:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80106e8:	f8c4 8000 	str.w	r8, [r4]
 80106ec:	e7e9      	b.n	80106c2 <__submore+0x48>

080106ee <memmove>:
 80106ee:	4288      	cmp	r0, r1
 80106f0:	b510      	push	{r4, lr}
 80106f2:	eb01 0402 	add.w	r4, r1, r2
 80106f6:	d902      	bls.n	80106fe <memmove+0x10>
 80106f8:	4284      	cmp	r4, r0
 80106fa:	4623      	mov	r3, r4
 80106fc:	d807      	bhi.n	801070e <memmove+0x20>
 80106fe:	1e43      	subs	r3, r0, #1
 8010700:	42a1      	cmp	r1, r4
 8010702:	d008      	beq.n	8010716 <memmove+0x28>
 8010704:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010708:	f803 2f01 	strb.w	r2, [r3, #1]!
 801070c:	e7f8      	b.n	8010700 <memmove+0x12>
 801070e:	4402      	add	r2, r0
 8010710:	4601      	mov	r1, r0
 8010712:	428a      	cmp	r2, r1
 8010714:	d100      	bne.n	8010718 <memmove+0x2a>
 8010716:	bd10      	pop	{r4, pc}
 8010718:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801071c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010720:	e7f7      	b.n	8010712 <memmove+0x24>

08010722 <strncmp>:
 8010722:	b510      	push	{r4, lr}
 8010724:	b16a      	cbz	r2, 8010742 <strncmp+0x20>
 8010726:	3901      	subs	r1, #1
 8010728:	1884      	adds	r4, r0, r2
 801072a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801072e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010732:	429a      	cmp	r2, r3
 8010734:	d103      	bne.n	801073e <strncmp+0x1c>
 8010736:	42a0      	cmp	r0, r4
 8010738:	d001      	beq.n	801073e <strncmp+0x1c>
 801073a:	2a00      	cmp	r2, #0
 801073c:	d1f5      	bne.n	801072a <strncmp+0x8>
 801073e:	1ad0      	subs	r0, r2, r3
 8010740:	bd10      	pop	{r4, pc}
 8010742:	4610      	mov	r0, r2
 8010744:	e7fc      	b.n	8010740 <strncmp+0x1e>
	...

08010748 <nan>:
 8010748:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010750 <nan+0x8>
 801074c:	4770      	bx	lr
 801074e:	bf00      	nop
 8010750:	00000000 	.word	0x00000000
 8010754:	7ff80000 	.word	0x7ff80000

08010758 <__assert_func>:
 8010758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801075a:	4614      	mov	r4, r2
 801075c:	461a      	mov	r2, r3
 801075e:	4b09      	ldr	r3, [pc, #36]	; (8010784 <__assert_func+0x2c>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	4605      	mov	r5, r0
 8010764:	68d8      	ldr	r0, [r3, #12]
 8010766:	b14c      	cbz	r4, 801077c <__assert_func+0x24>
 8010768:	4b07      	ldr	r3, [pc, #28]	; (8010788 <__assert_func+0x30>)
 801076a:	9100      	str	r1, [sp, #0]
 801076c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010770:	4906      	ldr	r1, [pc, #24]	; (801078c <__assert_func+0x34>)
 8010772:	462b      	mov	r3, r5
 8010774:	f000 fc3e 	bl	8010ff4 <fiprintf>
 8010778:	f000 fc4e 	bl	8011018 <abort>
 801077c:	4b04      	ldr	r3, [pc, #16]	; (8010790 <__assert_func+0x38>)
 801077e:	461c      	mov	r4, r3
 8010780:	e7f3      	b.n	801076a <__assert_func+0x12>
 8010782:	bf00      	nop
 8010784:	20000084 	.word	0x20000084
 8010788:	080119bd 	.word	0x080119bd
 801078c:	080119ca 	.word	0x080119ca
 8010790:	080119f8 	.word	0x080119f8

08010794 <_calloc_r>:
 8010794:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010796:	fba1 2402 	umull	r2, r4, r1, r2
 801079a:	b94c      	cbnz	r4, 80107b0 <_calloc_r+0x1c>
 801079c:	4611      	mov	r1, r2
 801079e:	9201      	str	r2, [sp, #4]
 80107a0:	f7fb fef2 	bl	800c588 <_malloc_r>
 80107a4:	9a01      	ldr	r2, [sp, #4]
 80107a6:	4605      	mov	r5, r0
 80107a8:	b930      	cbnz	r0, 80107b8 <_calloc_r+0x24>
 80107aa:	4628      	mov	r0, r5
 80107ac:	b003      	add	sp, #12
 80107ae:	bd30      	pop	{r4, r5, pc}
 80107b0:	220c      	movs	r2, #12
 80107b2:	6002      	str	r2, [r0, #0]
 80107b4:	2500      	movs	r5, #0
 80107b6:	e7f8      	b.n	80107aa <_calloc_r+0x16>
 80107b8:	4621      	mov	r1, r4
 80107ba:	f7fc ff3a 	bl	800d632 <memset>
 80107be:	e7f4      	b.n	80107aa <_calloc_r+0x16>

080107c0 <rshift>:
 80107c0:	6903      	ldr	r3, [r0, #16]
 80107c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80107c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80107ca:	ea4f 1261 	mov.w	r2, r1, asr #5
 80107ce:	f100 0414 	add.w	r4, r0, #20
 80107d2:	dd45      	ble.n	8010860 <rshift+0xa0>
 80107d4:	f011 011f 	ands.w	r1, r1, #31
 80107d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80107dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80107e0:	d10c      	bne.n	80107fc <rshift+0x3c>
 80107e2:	f100 0710 	add.w	r7, r0, #16
 80107e6:	4629      	mov	r1, r5
 80107e8:	42b1      	cmp	r1, r6
 80107ea:	d334      	bcc.n	8010856 <rshift+0x96>
 80107ec:	1a9b      	subs	r3, r3, r2
 80107ee:	009b      	lsls	r3, r3, #2
 80107f0:	1eea      	subs	r2, r5, #3
 80107f2:	4296      	cmp	r6, r2
 80107f4:	bf38      	it	cc
 80107f6:	2300      	movcc	r3, #0
 80107f8:	4423      	add	r3, r4
 80107fa:	e015      	b.n	8010828 <rshift+0x68>
 80107fc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010800:	f1c1 0820 	rsb	r8, r1, #32
 8010804:	40cf      	lsrs	r7, r1
 8010806:	f105 0e04 	add.w	lr, r5, #4
 801080a:	46a1      	mov	r9, r4
 801080c:	4576      	cmp	r6, lr
 801080e:	46f4      	mov	ip, lr
 8010810:	d815      	bhi.n	801083e <rshift+0x7e>
 8010812:	1a9a      	subs	r2, r3, r2
 8010814:	0092      	lsls	r2, r2, #2
 8010816:	3a04      	subs	r2, #4
 8010818:	3501      	adds	r5, #1
 801081a:	42ae      	cmp	r6, r5
 801081c:	bf38      	it	cc
 801081e:	2200      	movcc	r2, #0
 8010820:	18a3      	adds	r3, r4, r2
 8010822:	50a7      	str	r7, [r4, r2]
 8010824:	b107      	cbz	r7, 8010828 <rshift+0x68>
 8010826:	3304      	adds	r3, #4
 8010828:	1b1a      	subs	r2, r3, r4
 801082a:	42a3      	cmp	r3, r4
 801082c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010830:	bf08      	it	eq
 8010832:	2300      	moveq	r3, #0
 8010834:	6102      	str	r2, [r0, #16]
 8010836:	bf08      	it	eq
 8010838:	6143      	streq	r3, [r0, #20]
 801083a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801083e:	f8dc c000 	ldr.w	ip, [ip]
 8010842:	fa0c fc08 	lsl.w	ip, ip, r8
 8010846:	ea4c 0707 	orr.w	r7, ip, r7
 801084a:	f849 7b04 	str.w	r7, [r9], #4
 801084e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010852:	40cf      	lsrs	r7, r1
 8010854:	e7da      	b.n	801080c <rshift+0x4c>
 8010856:	f851 cb04 	ldr.w	ip, [r1], #4
 801085a:	f847 cf04 	str.w	ip, [r7, #4]!
 801085e:	e7c3      	b.n	80107e8 <rshift+0x28>
 8010860:	4623      	mov	r3, r4
 8010862:	e7e1      	b.n	8010828 <rshift+0x68>

08010864 <__hexdig_fun>:
 8010864:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010868:	2b09      	cmp	r3, #9
 801086a:	d802      	bhi.n	8010872 <__hexdig_fun+0xe>
 801086c:	3820      	subs	r0, #32
 801086e:	b2c0      	uxtb	r0, r0
 8010870:	4770      	bx	lr
 8010872:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010876:	2b05      	cmp	r3, #5
 8010878:	d801      	bhi.n	801087e <__hexdig_fun+0x1a>
 801087a:	3847      	subs	r0, #71	; 0x47
 801087c:	e7f7      	b.n	801086e <__hexdig_fun+0xa>
 801087e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010882:	2b05      	cmp	r3, #5
 8010884:	d801      	bhi.n	801088a <__hexdig_fun+0x26>
 8010886:	3827      	subs	r0, #39	; 0x27
 8010888:	e7f1      	b.n	801086e <__hexdig_fun+0xa>
 801088a:	2000      	movs	r0, #0
 801088c:	4770      	bx	lr
	...

08010890 <__gethex>:
 8010890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010894:	4617      	mov	r7, r2
 8010896:	680a      	ldr	r2, [r1, #0]
 8010898:	b085      	sub	sp, #20
 801089a:	f102 0b02 	add.w	fp, r2, #2
 801089e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80108a2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80108a6:	4681      	mov	r9, r0
 80108a8:	468a      	mov	sl, r1
 80108aa:	9302      	str	r3, [sp, #8]
 80108ac:	32fe      	adds	r2, #254	; 0xfe
 80108ae:	eb02 030b 	add.w	r3, r2, fp
 80108b2:	46d8      	mov	r8, fp
 80108b4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80108b8:	9301      	str	r3, [sp, #4]
 80108ba:	2830      	cmp	r0, #48	; 0x30
 80108bc:	d0f7      	beq.n	80108ae <__gethex+0x1e>
 80108be:	f7ff ffd1 	bl	8010864 <__hexdig_fun>
 80108c2:	4604      	mov	r4, r0
 80108c4:	2800      	cmp	r0, #0
 80108c6:	d138      	bne.n	801093a <__gethex+0xaa>
 80108c8:	49a7      	ldr	r1, [pc, #668]	; (8010b68 <__gethex+0x2d8>)
 80108ca:	2201      	movs	r2, #1
 80108cc:	4640      	mov	r0, r8
 80108ce:	f7ff ff28 	bl	8010722 <strncmp>
 80108d2:	4606      	mov	r6, r0
 80108d4:	2800      	cmp	r0, #0
 80108d6:	d169      	bne.n	80109ac <__gethex+0x11c>
 80108d8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80108dc:	465d      	mov	r5, fp
 80108de:	f7ff ffc1 	bl	8010864 <__hexdig_fun>
 80108e2:	2800      	cmp	r0, #0
 80108e4:	d064      	beq.n	80109b0 <__gethex+0x120>
 80108e6:	465a      	mov	r2, fp
 80108e8:	7810      	ldrb	r0, [r2, #0]
 80108ea:	2830      	cmp	r0, #48	; 0x30
 80108ec:	4690      	mov	r8, r2
 80108ee:	f102 0201 	add.w	r2, r2, #1
 80108f2:	d0f9      	beq.n	80108e8 <__gethex+0x58>
 80108f4:	f7ff ffb6 	bl	8010864 <__hexdig_fun>
 80108f8:	2301      	movs	r3, #1
 80108fa:	fab0 f480 	clz	r4, r0
 80108fe:	0964      	lsrs	r4, r4, #5
 8010900:	465e      	mov	r6, fp
 8010902:	9301      	str	r3, [sp, #4]
 8010904:	4642      	mov	r2, r8
 8010906:	4615      	mov	r5, r2
 8010908:	3201      	adds	r2, #1
 801090a:	7828      	ldrb	r0, [r5, #0]
 801090c:	f7ff ffaa 	bl	8010864 <__hexdig_fun>
 8010910:	2800      	cmp	r0, #0
 8010912:	d1f8      	bne.n	8010906 <__gethex+0x76>
 8010914:	4994      	ldr	r1, [pc, #592]	; (8010b68 <__gethex+0x2d8>)
 8010916:	2201      	movs	r2, #1
 8010918:	4628      	mov	r0, r5
 801091a:	f7ff ff02 	bl	8010722 <strncmp>
 801091e:	b978      	cbnz	r0, 8010940 <__gethex+0xb0>
 8010920:	b946      	cbnz	r6, 8010934 <__gethex+0xa4>
 8010922:	1c6e      	adds	r6, r5, #1
 8010924:	4632      	mov	r2, r6
 8010926:	4615      	mov	r5, r2
 8010928:	3201      	adds	r2, #1
 801092a:	7828      	ldrb	r0, [r5, #0]
 801092c:	f7ff ff9a 	bl	8010864 <__hexdig_fun>
 8010930:	2800      	cmp	r0, #0
 8010932:	d1f8      	bne.n	8010926 <__gethex+0x96>
 8010934:	1b73      	subs	r3, r6, r5
 8010936:	009e      	lsls	r6, r3, #2
 8010938:	e004      	b.n	8010944 <__gethex+0xb4>
 801093a:	2400      	movs	r4, #0
 801093c:	4626      	mov	r6, r4
 801093e:	e7e1      	b.n	8010904 <__gethex+0x74>
 8010940:	2e00      	cmp	r6, #0
 8010942:	d1f7      	bne.n	8010934 <__gethex+0xa4>
 8010944:	782b      	ldrb	r3, [r5, #0]
 8010946:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801094a:	2b50      	cmp	r3, #80	; 0x50
 801094c:	d13d      	bne.n	80109ca <__gethex+0x13a>
 801094e:	786b      	ldrb	r3, [r5, #1]
 8010950:	2b2b      	cmp	r3, #43	; 0x2b
 8010952:	d02f      	beq.n	80109b4 <__gethex+0x124>
 8010954:	2b2d      	cmp	r3, #45	; 0x2d
 8010956:	d031      	beq.n	80109bc <__gethex+0x12c>
 8010958:	1c69      	adds	r1, r5, #1
 801095a:	f04f 0b00 	mov.w	fp, #0
 801095e:	7808      	ldrb	r0, [r1, #0]
 8010960:	f7ff ff80 	bl	8010864 <__hexdig_fun>
 8010964:	1e42      	subs	r2, r0, #1
 8010966:	b2d2      	uxtb	r2, r2
 8010968:	2a18      	cmp	r2, #24
 801096a:	d82e      	bhi.n	80109ca <__gethex+0x13a>
 801096c:	f1a0 0210 	sub.w	r2, r0, #16
 8010970:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010974:	f7ff ff76 	bl	8010864 <__hexdig_fun>
 8010978:	f100 3cff 	add.w	ip, r0, #4294967295
 801097c:	fa5f fc8c 	uxtb.w	ip, ip
 8010980:	f1bc 0f18 	cmp.w	ip, #24
 8010984:	d91d      	bls.n	80109c2 <__gethex+0x132>
 8010986:	f1bb 0f00 	cmp.w	fp, #0
 801098a:	d000      	beq.n	801098e <__gethex+0xfe>
 801098c:	4252      	negs	r2, r2
 801098e:	4416      	add	r6, r2
 8010990:	f8ca 1000 	str.w	r1, [sl]
 8010994:	b1dc      	cbz	r4, 80109ce <__gethex+0x13e>
 8010996:	9b01      	ldr	r3, [sp, #4]
 8010998:	2b00      	cmp	r3, #0
 801099a:	bf14      	ite	ne
 801099c:	f04f 0800 	movne.w	r8, #0
 80109a0:	f04f 0806 	moveq.w	r8, #6
 80109a4:	4640      	mov	r0, r8
 80109a6:	b005      	add	sp, #20
 80109a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109ac:	4645      	mov	r5, r8
 80109ae:	4626      	mov	r6, r4
 80109b0:	2401      	movs	r4, #1
 80109b2:	e7c7      	b.n	8010944 <__gethex+0xb4>
 80109b4:	f04f 0b00 	mov.w	fp, #0
 80109b8:	1ca9      	adds	r1, r5, #2
 80109ba:	e7d0      	b.n	801095e <__gethex+0xce>
 80109bc:	f04f 0b01 	mov.w	fp, #1
 80109c0:	e7fa      	b.n	80109b8 <__gethex+0x128>
 80109c2:	230a      	movs	r3, #10
 80109c4:	fb03 0002 	mla	r0, r3, r2, r0
 80109c8:	e7d0      	b.n	801096c <__gethex+0xdc>
 80109ca:	4629      	mov	r1, r5
 80109cc:	e7e0      	b.n	8010990 <__gethex+0x100>
 80109ce:	eba5 0308 	sub.w	r3, r5, r8
 80109d2:	3b01      	subs	r3, #1
 80109d4:	4621      	mov	r1, r4
 80109d6:	2b07      	cmp	r3, #7
 80109d8:	dc0a      	bgt.n	80109f0 <__gethex+0x160>
 80109da:	4648      	mov	r0, r9
 80109dc:	f7fd fdaa 	bl	800e534 <_Balloc>
 80109e0:	4604      	mov	r4, r0
 80109e2:	b940      	cbnz	r0, 80109f6 <__gethex+0x166>
 80109e4:	4b61      	ldr	r3, [pc, #388]	; (8010b6c <__gethex+0x2dc>)
 80109e6:	4602      	mov	r2, r0
 80109e8:	21e4      	movs	r1, #228	; 0xe4
 80109ea:	4861      	ldr	r0, [pc, #388]	; (8010b70 <__gethex+0x2e0>)
 80109ec:	f7ff feb4 	bl	8010758 <__assert_func>
 80109f0:	3101      	adds	r1, #1
 80109f2:	105b      	asrs	r3, r3, #1
 80109f4:	e7ef      	b.n	80109d6 <__gethex+0x146>
 80109f6:	f100 0a14 	add.w	sl, r0, #20
 80109fa:	2300      	movs	r3, #0
 80109fc:	495a      	ldr	r1, [pc, #360]	; (8010b68 <__gethex+0x2d8>)
 80109fe:	f8cd a004 	str.w	sl, [sp, #4]
 8010a02:	469b      	mov	fp, r3
 8010a04:	45a8      	cmp	r8, r5
 8010a06:	d342      	bcc.n	8010a8e <__gethex+0x1fe>
 8010a08:	9801      	ldr	r0, [sp, #4]
 8010a0a:	f840 bb04 	str.w	fp, [r0], #4
 8010a0e:	eba0 000a 	sub.w	r0, r0, sl
 8010a12:	1080      	asrs	r0, r0, #2
 8010a14:	6120      	str	r0, [r4, #16]
 8010a16:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8010a1a:	4658      	mov	r0, fp
 8010a1c:	f7fd fe7c 	bl	800e718 <__hi0bits>
 8010a20:	683d      	ldr	r5, [r7, #0]
 8010a22:	eba8 0000 	sub.w	r0, r8, r0
 8010a26:	42a8      	cmp	r0, r5
 8010a28:	dd59      	ble.n	8010ade <__gethex+0x24e>
 8010a2a:	eba0 0805 	sub.w	r8, r0, r5
 8010a2e:	4641      	mov	r1, r8
 8010a30:	4620      	mov	r0, r4
 8010a32:	f7fe fa0b 	bl	800ee4c <__any_on>
 8010a36:	4683      	mov	fp, r0
 8010a38:	b1b8      	cbz	r0, 8010a6a <__gethex+0x1da>
 8010a3a:	f108 33ff 	add.w	r3, r8, #4294967295
 8010a3e:	1159      	asrs	r1, r3, #5
 8010a40:	f003 021f 	and.w	r2, r3, #31
 8010a44:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010a48:	f04f 0b01 	mov.w	fp, #1
 8010a4c:	fa0b f202 	lsl.w	r2, fp, r2
 8010a50:	420a      	tst	r2, r1
 8010a52:	d00a      	beq.n	8010a6a <__gethex+0x1da>
 8010a54:	455b      	cmp	r3, fp
 8010a56:	dd06      	ble.n	8010a66 <__gethex+0x1d6>
 8010a58:	f1a8 0102 	sub.w	r1, r8, #2
 8010a5c:	4620      	mov	r0, r4
 8010a5e:	f7fe f9f5 	bl	800ee4c <__any_on>
 8010a62:	2800      	cmp	r0, #0
 8010a64:	d138      	bne.n	8010ad8 <__gethex+0x248>
 8010a66:	f04f 0b02 	mov.w	fp, #2
 8010a6a:	4641      	mov	r1, r8
 8010a6c:	4620      	mov	r0, r4
 8010a6e:	f7ff fea7 	bl	80107c0 <rshift>
 8010a72:	4446      	add	r6, r8
 8010a74:	68bb      	ldr	r3, [r7, #8]
 8010a76:	42b3      	cmp	r3, r6
 8010a78:	da41      	bge.n	8010afe <__gethex+0x26e>
 8010a7a:	4621      	mov	r1, r4
 8010a7c:	4648      	mov	r0, r9
 8010a7e:	f7fd fd99 	bl	800e5b4 <_Bfree>
 8010a82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010a84:	2300      	movs	r3, #0
 8010a86:	6013      	str	r3, [r2, #0]
 8010a88:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8010a8c:	e78a      	b.n	80109a4 <__gethex+0x114>
 8010a8e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8010a92:	2a2e      	cmp	r2, #46	; 0x2e
 8010a94:	d014      	beq.n	8010ac0 <__gethex+0x230>
 8010a96:	2b20      	cmp	r3, #32
 8010a98:	d106      	bne.n	8010aa8 <__gethex+0x218>
 8010a9a:	9b01      	ldr	r3, [sp, #4]
 8010a9c:	f843 bb04 	str.w	fp, [r3], #4
 8010aa0:	f04f 0b00 	mov.w	fp, #0
 8010aa4:	9301      	str	r3, [sp, #4]
 8010aa6:	465b      	mov	r3, fp
 8010aa8:	7828      	ldrb	r0, [r5, #0]
 8010aaa:	9303      	str	r3, [sp, #12]
 8010aac:	f7ff feda 	bl	8010864 <__hexdig_fun>
 8010ab0:	9b03      	ldr	r3, [sp, #12]
 8010ab2:	f000 000f 	and.w	r0, r0, #15
 8010ab6:	4098      	lsls	r0, r3
 8010ab8:	ea4b 0b00 	orr.w	fp, fp, r0
 8010abc:	3304      	adds	r3, #4
 8010abe:	e7a1      	b.n	8010a04 <__gethex+0x174>
 8010ac0:	45a8      	cmp	r8, r5
 8010ac2:	d8e8      	bhi.n	8010a96 <__gethex+0x206>
 8010ac4:	2201      	movs	r2, #1
 8010ac6:	4628      	mov	r0, r5
 8010ac8:	9303      	str	r3, [sp, #12]
 8010aca:	f7ff fe2a 	bl	8010722 <strncmp>
 8010ace:	4926      	ldr	r1, [pc, #152]	; (8010b68 <__gethex+0x2d8>)
 8010ad0:	9b03      	ldr	r3, [sp, #12]
 8010ad2:	2800      	cmp	r0, #0
 8010ad4:	d1df      	bne.n	8010a96 <__gethex+0x206>
 8010ad6:	e795      	b.n	8010a04 <__gethex+0x174>
 8010ad8:	f04f 0b03 	mov.w	fp, #3
 8010adc:	e7c5      	b.n	8010a6a <__gethex+0x1da>
 8010ade:	da0b      	bge.n	8010af8 <__gethex+0x268>
 8010ae0:	eba5 0800 	sub.w	r8, r5, r0
 8010ae4:	4621      	mov	r1, r4
 8010ae6:	4642      	mov	r2, r8
 8010ae8:	4648      	mov	r0, r9
 8010aea:	f7fd ff7d 	bl	800e9e8 <__lshift>
 8010aee:	eba6 0608 	sub.w	r6, r6, r8
 8010af2:	4604      	mov	r4, r0
 8010af4:	f100 0a14 	add.w	sl, r0, #20
 8010af8:	f04f 0b00 	mov.w	fp, #0
 8010afc:	e7ba      	b.n	8010a74 <__gethex+0x1e4>
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	42b3      	cmp	r3, r6
 8010b02:	dd73      	ble.n	8010bec <__gethex+0x35c>
 8010b04:	1b9e      	subs	r6, r3, r6
 8010b06:	42b5      	cmp	r5, r6
 8010b08:	dc34      	bgt.n	8010b74 <__gethex+0x2e4>
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	2b02      	cmp	r3, #2
 8010b0e:	d023      	beq.n	8010b58 <__gethex+0x2c8>
 8010b10:	2b03      	cmp	r3, #3
 8010b12:	d025      	beq.n	8010b60 <__gethex+0x2d0>
 8010b14:	2b01      	cmp	r3, #1
 8010b16:	d115      	bne.n	8010b44 <__gethex+0x2b4>
 8010b18:	42b5      	cmp	r5, r6
 8010b1a:	d113      	bne.n	8010b44 <__gethex+0x2b4>
 8010b1c:	2d01      	cmp	r5, #1
 8010b1e:	d10b      	bne.n	8010b38 <__gethex+0x2a8>
 8010b20:	9a02      	ldr	r2, [sp, #8]
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	6013      	str	r3, [r2, #0]
 8010b26:	2301      	movs	r3, #1
 8010b28:	6123      	str	r3, [r4, #16]
 8010b2a:	f8ca 3000 	str.w	r3, [sl]
 8010b2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b30:	f04f 0862 	mov.w	r8, #98	; 0x62
 8010b34:	601c      	str	r4, [r3, #0]
 8010b36:	e735      	b.n	80109a4 <__gethex+0x114>
 8010b38:	1e69      	subs	r1, r5, #1
 8010b3a:	4620      	mov	r0, r4
 8010b3c:	f7fe f986 	bl	800ee4c <__any_on>
 8010b40:	2800      	cmp	r0, #0
 8010b42:	d1ed      	bne.n	8010b20 <__gethex+0x290>
 8010b44:	4621      	mov	r1, r4
 8010b46:	4648      	mov	r0, r9
 8010b48:	f7fd fd34 	bl	800e5b4 <_Bfree>
 8010b4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010b4e:	2300      	movs	r3, #0
 8010b50:	6013      	str	r3, [r2, #0]
 8010b52:	f04f 0850 	mov.w	r8, #80	; 0x50
 8010b56:	e725      	b.n	80109a4 <__gethex+0x114>
 8010b58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d1f2      	bne.n	8010b44 <__gethex+0x2b4>
 8010b5e:	e7df      	b.n	8010b20 <__gethex+0x290>
 8010b60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d1dc      	bne.n	8010b20 <__gethex+0x290>
 8010b66:	e7ed      	b.n	8010b44 <__gethex+0x2b4>
 8010b68:	08011834 	.word	0x08011834
 8010b6c:	080116c7 	.word	0x080116c7
 8010b70:	080119f9 	.word	0x080119f9
 8010b74:	f106 38ff 	add.w	r8, r6, #4294967295
 8010b78:	f1bb 0f00 	cmp.w	fp, #0
 8010b7c:	d133      	bne.n	8010be6 <__gethex+0x356>
 8010b7e:	f1b8 0f00 	cmp.w	r8, #0
 8010b82:	d004      	beq.n	8010b8e <__gethex+0x2fe>
 8010b84:	4641      	mov	r1, r8
 8010b86:	4620      	mov	r0, r4
 8010b88:	f7fe f960 	bl	800ee4c <__any_on>
 8010b8c:	4683      	mov	fp, r0
 8010b8e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8010b92:	2301      	movs	r3, #1
 8010b94:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010b98:	f008 081f 	and.w	r8, r8, #31
 8010b9c:	fa03 f308 	lsl.w	r3, r3, r8
 8010ba0:	4213      	tst	r3, r2
 8010ba2:	4631      	mov	r1, r6
 8010ba4:	4620      	mov	r0, r4
 8010ba6:	bf18      	it	ne
 8010ba8:	f04b 0b02 	orrne.w	fp, fp, #2
 8010bac:	1bad      	subs	r5, r5, r6
 8010bae:	f7ff fe07 	bl	80107c0 <rshift>
 8010bb2:	687e      	ldr	r6, [r7, #4]
 8010bb4:	f04f 0802 	mov.w	r8, #2
 8010bb8:	f1bb 0f00 	cmp.w	fp, #0
 8010bbc:	d04a      	beq.n	8010c54 <__gethex+0x3c4>
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	2b02      	cmp	r3, #2
 8010bc2:	d016      	beq.n	8010bf2 <__gethex+0x362>
 8010bc4:	2b03      	cmp	r3, #3
 8010bc6:	d018      	beq.n	8010bfa <__gethex+0x36a>
 8010bc8:	2b01      	cmp	r3, #1
 8010bca:	d109      	bne.n	8010be0 <__gethex+0x350>
 8010bcc:	f01b 0f02 	tst.w	fp, #2
 8010bd0:	d006      	beq.n	8010be0 <__gethex+0x350>
 8010bd2:	f8da 3000 	ldr.w	r3, [sl]
 8010bd6:	ea4b 0b03 	orr.w	fp, fp, r3
 8010bda:	f01b 0f01 	tst.w	fp, #1
 8010bde:	d10f      	bne.n	8010c00 <__gethex+0x370>
 8010be0:	f048 0810 	orr.w	r8, r8, #16
 8010be4:	e036      	b.n	8010c54 <__gethex+0x3c4>
 8010be6:	f04f 0b01 	mov.w	fp, #1
 8010bea:	e7d0      	b.n	8010b8e <__gethex+0x2fe>
 8010bec:	f04f 0801 	mov.w	r8, #1
 8010bf0:	e7e2      	b.n	8010bb8 <__gethex+0x328>
 8010bf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010bf4:	f1c3 0301 	rsb	r3, r3, #1
 8010bf8:	930f      	str	r3, [sp, #60]	; 0x3c
 8010bfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d0ef      	beq.n	8010be0 <__gethex+0x350>
 8010c00:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010c04:	f104 0214 	add.w	r2, r4, #20
 8010c08:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8010c0c:	9301      	str	r3, [sp, #4]
 8010c0e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8010c12:	2300      	movs	r3, #0
 8010c14:	4694      	mov	ip, r2
 8010c16:	f852 1b04 	ldr.w	r1, [r2], #4
 8010c1a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8010c1e:	d01e      	beq.n	8010c5e <__gethex+0x3ce>
 8010c20:	3101      	adds	r1, #1
 8010c22:	f8cc 1000 	str.w	r1, [ip]
 8010c26:	f1b8 0f02 	cmp.w	r8, #2
 8010c2a:	f104 0214 	add.w	r2, r4, #20
 8010c2e:	d13d      	bne.n	8010cac <__gethex+0x41c>
 8010c30:	683b      	ldr	r3, [r7, #0]
 8010c32:	3b01      	subs	r3, #1
 8010c34:	42ab      	cmp	r3, r5
 8010c36:	d10b      	bne.n	8010c50 <__gethex+0x3c0>
 8010c38:	1169      	asrs	r1, r5, #5
 8010c3a:	2301      	movs	r3, #1
 8010c3c:	f005 051f 	and.w	r5, r5, #31
 8010c40:	fa03 f505 	lsl.w	r5, r3, r5
 8010c44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010c48:	421d      	tst	r5, r3
 8010c4a:	bf18      	it	ne
 8010c4c:	f04f 0801 	movne.w	r8, #1
 8010c50:	f048 0820 	orr.w	r8, r8, #32
 8010c54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c56:	601c      	str	r4, [r3, #0]
 8010c58:	9b02      	ldr	r3, [sp, #8]
 8010c5a:	601e      	str	r6, [r3, #0]
 8010c5c:	e6a2      	b.n	80109a4 <__gethex+0x114>
 8010c5e:	4290      	cmp	r0, r2
 8010c60:	f842 3c04 	str.w	r3, [r2, #-4]
 8010c64:	d8d6      	bhi.n	8010c14 <__gethex+0x384>
 8010c66:	68a2      	ldr	r2, [r4, #8]
 8010c68:	4593      	cmp	fp, r2
 8010c6a:	db17      	blt.n	8010c9c <__gethex+0x40c>
 8010c6c:	6861      	ldr	r1, [r4, #4]
 8010c6e:	4648      	mov	r0, r9
 8010c70:	3101      	adds	r1, #1
 8010c72:	f7fd fc5f 	bl	800e534 <_Balloc>
 8010c76:	4682      	mov	sl, r0
 8010c78:	b918      	cbnz	r0, 8010c82 <__gethex+0x3f2>
 8010c7a:	4b1b      	ldr	r3, [pc, #108]	; (8010ce8 <__gethex+0x458>)
 8010c7c:	4602      	mov	r2, r0
 8010c7e:	2184      	movs	r1, #132	; 0x84
 8010c80:	e6b3      	b.n	80109ea <__gethex+0x15a>
 8010c82:	6922      	ldr	r2, [r4, #16]
 8010c84:	3202      	adds	r2, #2
 8010c86:	f104 010c 	add.w	r1, r4, #12
 8010c8a:	0092      	lsls	r2, r2, #2
 8010c8c:	300c      	adds	r0, #12
 8010c8e:	f7fc fd76 	bl	800d77e <memcpy>
 8010c92:	4621      	mov	r1, r4
 8010c94:	4648      	mov	r0, r9
 8010c96:	f7fd fc8d 	bl	800e5b4 <_Bfree>
 8010c9a:	4654      	mov	r4, sl
 8010c9c:	6922      	ldr	r2, [r4, #16]
 8010c9e:	1c51      	adds	r1, r2, #1
 8010ca0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010ca4:	6121      	str	r1, [r4, #16]
 8010ca6:	2101      	movs	r1, #1
 8010ca8:	6151      	str	r1, [r2, #20]
 8010caa:	e7bc      	b.n	8010c26 <__gethex+0x396>
 8010cac:	6921      	ldr	r1, [r4, #16]
 8010cae:	4559      	cmp	r1, fp
 8010cb0:	dd0b      	ble.n	8010cca <__gethex+0x43a>
 8010cb2:	2101      	movs	r1, #1
 8010cb4:	4620      	mov	r0, r4
 8010cb6:	f7ff fd83 	bl	80107c0 <rshift>
 8010cba:	68bb      	ldr	r3, [r7, #8]
 8010cbc:	3601      	adds	r6, #1
 8010cbe:	42b3      	cmp	r3, r6
 8010cc0:	f6ff aedb 	blt.w	8010a7a <__gethex+0x1ea>
 8010cc4:	f04f 0801 	mov.w	r8, #1
 8010cc8:	e7c2      	b.n	8010c50 <__gethex+0x3c0>
 8010cca:	f015 051f 	ands.w	r5, r5, #31
 8010cce:	d0f9      	beq.n	8010cc4 <__gethex+0x434>
 8010cd0:	9b01      	ldr	r3, [sp, #4]
 8010cd2:	441a      	add	r2, r3
 8010cd4:	f1c5 0520 	rsb	r5, r5, #32
 8010cd8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8010cdc:	f7fd fd1c 	bl	800e718 <__hi0bits>
 8010ce0:	42a8      	cmp	r0, r5
 8010ce2:	dbe6      	blt.n	8010cb2 <__gethex+0x422>
 8010ce4:	e7ee      	b.n	8010cc4 <__gethex+0x434>
 8010ce6:	bf00      	nop
 8010ce8:	080116c7 	.word	0x080116c7

08010cec <L_shift>:
 8010cec:	f1c2 0208 	rsb	r2, r2, #8
 8010cf0:	0092      	lsls	r2, r2, #2
 8010cf2:	b570      	push	{r4, r5, r6, lr}
 8010cf4:	f1c2 0620 	rsb	r6, r2, #32
 8010cf8:	6843      	ldr	r3, [r0, #4]
 8010cfa:	6804      	ldr	r4, [r0, #0]
 8010cfc:	fa03 f506 	lsl.w	r5, r3, r6
 8010d00:	432c      	orrs	r4, r5
 8010d02:	40d3      	lsrs	r3, r2
 8010d04:	6004      	str	r4, [r0, #0]
 8010d06:	f840 3f04 	str.w	r3, [r0, #4]!
 8010d0a:	4288      	cmp	r0, r1
 8010d0c:	d3f4      	bcc.n	8010cf8 <L_shift+0xc>
 8010d0e:	bd70      	pop	{r4, r5, r6, pc}

08010d10 <__match>:
 8010d10:	b530      	push	{r4, r5, lr}
 8010d12:	6803      	ldr	r3, [r0, #0]
 8010d14:	3301      	adds	r3, #1
 8010d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d1a:	b914      	cbnz	r4, 8010d22 <__match+0x12>
 8010d1c:	6003      	str	r3, [r0, #0]
 8010d1e:	2001      	movs	r0, #1
 8010d20:	bd30      	pop	{r4, r5, pc}
 8010d22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010d2a:	2d19      	cmp	r5, #25
 8010d2c:	bf98      	it	ls
 8010d2e:	3220      	addls	r2, #32
 8010d30:	42a2      	cmp	r2, r4
 8010d32:	d0f0      	beq.n	8010d16 <__match+0x6>
 8010d34:	2000      	movs	r0, #0
 8010d36:	e7f3      	b.n	8010d20 <__match+0x10>

08010d38 <__hexnan>:
 8010d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d3c:	680b      	ldr	r3, [r1, #0]
 8010d3e:	6801      	ldr	r1, [r0, #0]
 8010d40:	115e      	asrs	r6, r3, #5
 8010d42:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010d46:	f013 031f 	ands.w	r3, r3, #31
 8010d4a:	b087      	sub	sp, #28
 8010d4c:	bf18      	it	ne
 8010d4e:	3604      	addne	r6, #4
 8010d50:	2500      	movs	r5, #0
 8010d52:	1f37      	subs	r7, r6, #4
 8010d54:	4682      	mov	sl, r0
 8010d56:	4690      	mov	r8, r2
 8010d58:	9301      	str	r3, [sp, #4]
 8010d5a:	f846 5c04 	str.w	r5, [r6, #-4]
 8010d5e:	46b9      	mov	r9, r7
 8010d60:	463c      	mov	r4, r7
 8010d62:	9502      	str	r5, [sp, #8]
 8010d64:	46ab      	mov	fp, r5
 8010d66:	784a      	ldrb	r2, [r1, #1]
 8010d68:	1c4b      	adds	r3, r1, #1
 8010d6a:	9303      	str	r3, [sp, #12]
 8010d6c:	b342      	cbz	r2, 8010dc0 <__hexnan+0x88>
 8010d6e:	4610      	mov	r0, r2
 8010d70:	9105      	str	r1, [sp, #20]
 8010d72:	9204      	str	r2, [sp, #16]
 8010d74:	f7ff fd76 	bl	8010864 <__hexdig_fun>
 8010d78:	2800      	cmp	r0, #0
 8010d7a:	d14f      	bne.n	8010e1c <__hexnan+0xe4>
 8010d7c:	9a04      	ldr	r2, [sp, #16]
 8010d7e:	9905      	ldr	r1, [sp, #20]
 8010d80:	2a20      	cmp	r2, #32
 8010d82:	d818      	bhi.n	8010db6 <__hexnan+0x7e>
 8010d84:	9b02      	ldr	r3, [sp, #8]
 8010d86:	459b      	cmp	fp, r3
 8010d88:	dd13      	ble.n	8010db2 <__hexnan+0x7a>
 8010d8a:	454c      	cmp	r4, r9
 8010d8c:	d206      	bcs.n	8010d9c <__hexnan+0x64>
 8010d8e:	2d07      	cmp	r5, #7
 8010d90:	dc04      	bgt.n	8010d9c <__hexnan+0x64>
 8010d92:	462a      	mov	r2, r5
 8010d94:	4649      	mov	r1, r9
 8010d96:	4620      	mov	r0, r4
 8010d98:	f7ff ffa8 	bl	8010cec <L_shift>
 8010d9c:	4544      	cmp	r4, r8
 8010d9e:	d950      	bls.n	8010e42 <__hexnan+0x10a>
 8010da0:	2300      	movs	r3, #0
 8010da2:	f1a4 0904 	sub.w	r9, r4, #4
 8010da6:	f844 3c04 	str.w	r3, [r4, #-4]
 8010daa:	f8cd b008 	str.w	fp, [sp, #8]
 8010dae:	464c      	mov	r4, r9
 8010db0:	461d      	mov	r5, r3
 8010db2:	9903      	ldr	r1, [sp, #12]
 8010db4:	e7d7      	b.n	8010d66 <__hexnan+0x2e>
 8010db6:	2a29      	cmp	r2, #41	; 0x29
 8010db8:	d155      	bne.n	8010e66 <__hexnan+0x12e>
 8010dba:	3102      	adds	r1, #2
 8010dbc:	f8ca 1000 	str.w	r1, [sl]
 8010dc0:	f1bb 0f00 	cmp.w	fp, #0
 8010dc4:	d04f      	beq.n	8010e66 <__hexnan+0x12e>
 8010dc6:	454c      	cmp	r4, r9
 8010dc8:	d206      	bcs.n	8010dd8 <__hexnan+0xa0>
 8010dca:	2d07      	cmp	r5, #7
 8010dcc:	dc04      	bgt.n	8010dd8 <__hexnan+0xa0>
 8010dce:	462a      	mov	r2, r5
 8010dd0:	4649      	mov	r1, r9
 8010dd2:	4620      	mov	r0, r4
 8010dd4:	f7ff ff8a 	bl	8010cec <L_shift>
 8010dd8:	4544      	cmp	r4, r8
 8010dda:	d934      	bls.n	8010e46 <__hexnan+0x10e>
 8010ddc:	f1a8 0204 	sub.w	r2, r8, #4
 8010de0:	4623      	mov	r3, r4
 8010de2:	f853 1b04 	ldr.w	r1, [r3], #4
 8010de6:	f842 1f04 	str.w	r1, [r2, #4]!
 8010dea:	429f      	cmp	r7, r3
 8010dec:	d2f9      	bcs.n	8010de2 <__hexnan+0xaa>
 8010dee:	1b3b      	subs	r3, r7, r4
 8010df0:	f023 0303 	bic.w	r3, r3, #3
 8010df4:	3304      	adds	r3, #4
 8010df6:	3e03      	subs	r6, #3
 8010df8:	3401      	adds	r4, #1
 8010dfa:	42a6      	cmp	r6, r4
 8010dfc:	bf38      	it	cc
 8010dfe:	2304      	movcc	r3, #4
 8010e00:	4443      	add	r3, r8
 8010e02:	2200      	movs	r2, #0
 8010e04:	f843 2b04 	str.w	r2, [r3], #4
 8010e08:	429f      	cmp	r7, r3
 8010e0a:	d2fb      	bcs.n	8010e04 <__hexnan+0xcc>
 8010e0c:	683b      	ldr	r3, [r7, #0]
 8010e0e:	b91b      	cbnz	r3, 8010e18 <__hexnan+0xe0>
 8010e10:	4547      	cmp	r7, r8
 8010e12:	d126      	bne.n	8010e62 <__hexnan+0x12a>
 8010e14:	2301      	movs	r3, #1
 8010e16:	603b      	str	r3, [r7, #0]
 8010e18:	2005      	movs	r0, #5
 8010e1a:	e025      	b.n	8010e68 <__hexnan+0x130>
 8010e1c:	3501      	adds	r5, #1
 8010e1e:	2d08      	cmp	r5, #8
 8010e20:	f10b 0b01 	add.w	fp, fp, #1
 8010e24:	dd06      	ble.n	8010e34 <__hexnan+0xfc>
 8010e26:	4544      	cmp	r4, r8
 8010e28:	d9c3      	bls.n	8010db2 <__hexnan+0x7a>
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	f844 3c04 	str.w	r3, [r4, #-4]
 8010e30:	2501      	movs	r5, #1
 8010e32:	3c04      	subs	r4, #4
 8010e34:	6822      	ldr	r2, [r4, #0]
 8010e36:	f000 000f 	and.w	r0, r0, #15
 8010e3a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010e3e:	6020      	str	r0, [r4, #0]
 8010e40:	e7b7      	b.n	8010db2 <__hexnan+0x7a>
 8010e42:	2508      	movs	r5, #8
 8010e44:	e7b5      	b.n	8010db2 <__hexnan+0x7a>
 8010e46:	9b01      	ldr	r3, [sp, #4]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d0df      	beq.n	8010e0c <__hexnan+0xd4>
 8010e4c:	f1c3 0320 	rsb	r3, r3, #32
 8010e50:	f04f 32ff 	mov.w	r2, #4294967295
 8010e54:	40da      	lsrs	r2, r3
 8010e56:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010e5a:	4013      	ands	r3, r2
 8010e5c:	f846 3c04 	str.w	r3, [r6, #-4]
 8010e60:	e7d4      	b.n	8010e0c <__hexnan+0xd4>
 8010e62:	3f04      	subs	r7, #4
 8010e64:	e7d2      	b.n	8010e0c <__hexnan+0xd4>
 8010e66:	2004      	movs	r0, #4
 8010e68:	b007      	add	sp, #28
 8010e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010e6e <__ascii_mbtowc>:
 8010e6e:	b082      	sub	sp, #8
 8010e70:	b901      	cbnz	r1, 8010e74 <__ascii_mbtowc+0x6>
 8010e72:	a901      	add	r1, sp, #4
 8010e74:	b142      	cbz	r2, 8010e88 <__ascii_mbtowc+0x1a>
 8010e76:	b14b      	cbz	r3, 8010e8c <__ascii_mbtowc+0x1e>
 8010e78:	7813      	ldrb	r3, [r2, #0]
 8010e7a:	600b      	str	r3, [r1, #0]
 8010e7c:	7812      	ldrb	r2, [r2, #0]
 8010e7e:	1e10      	subs	r0, r2, #0
 8010e80:	bf18      	it	ne
 8010e82:	2001      	movne	r0, #1
 8010e84:	b002      	add	sp, #8
 8010e86:	4770      	bx	lr
 8010e88:	4610      	mov	r0, r2
 8010e8a:	e7fb      	b.n	8010e84 <__ascii_mbtowc+0x16>
 8010e8c:	f06f 0001 	mvn.w	r0, #1
 8010e90:	e7f8      	b.n	8010e84 <__ascii_mbtowc+0x16>

08010e92 <_realloc_r>:
 8010e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e96:	4680      	mov	r8, r0
 8010e98:	4614      	mov	r4, r2
 8010e9a:	460e      	mov	r6, r1
 8010e9c:	b921      	cbnz	r1, 8010ea8 <_realloc_r+0x16>
 8010e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ea2:	4611      	mov	r1, r2
 8010ea4:	f7fb bb70 	b.w	800c588 <_malloc_r>
 8010ea8:	b92a      	cbnz	r2, 8010eb6 <_realloc_r+0x24>
 8010eaa:	f7fd faf7 	bl	800e49c <_free_r>
 8010eae:	4625      	mov	r5, r4
 8010eb0:	4628      	mov	r0, r5
 8010eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eb6:	f000 f8b6 	bl	8011026 <_malloc_usable_size_r>
 8010eba:	4284      	cmp	r4, r0
 8010ebc:	4607      	mov	r7, r0
 8010ebe:	d802      	bhi.n	8010ec6 <_realloc_r+0x34>
 8010ec0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010ec4:	d812      	bhi.n	8010eec <_realloc_r+0x5a>
 8010ec6:	4621      	mov	r1, r4
 8010ec8:	4640      	mov	r0, r8
 8010eca:	f7fb fb5d 	bl	800c588 <_malloc_r>
 8010ece:	4605      	mov	r5, r0
 8010ed0:	2800      	cmp	r0, #0
 8010ed2:	d0ed      	beq.n	8010eb0 <_realloc_r+0x1e>
 8010ed4:	42bc      	cmp	r4, r7
 8010ed6:	4622      	mov	r2, r4
 8010ed8:	4631      	mov	r1, r6
 8010eda:	bf28      	it	cs
 8010edc:	463a      	movcs	r2, r7
 8010ede:	f7fc fc4e 	bl	800d77e <memcpy>
 8010ee2:	4631      	mov	r1, r6
 8010ee4:	4640      	mov	r0, r8
 8010ee6:	f7fd fad9 	bl	800e49c <_free_r>
 8010eea:	e7e1      	b.n	8010eb0 <_realloc_r+0x1e>
 8010eec:	4635      	mov	r5, r6
 8010eee:	e7df      	b.n	8010eb0 <_realloc_r+0x1e>

08010ef0 <_strtoul_l.constprop.0>:
 8010ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ef4:	4f36      	ldr	r7, [pc, #216]	; (8010fd0 <_strtoul_l.constprop.0+0xe0>)
 8010ef6:	4686      	mov	lr, r0
 8010ef8:	460d      	mov	r5, r1
 8010efa:	4628      	mov	r0, r5
 8010efc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010f00:	5d3e      	ldrb	r6, [r7, r4]
 8010f02:	f016 0608 	ands.w	r6, r6, #8
 8010f06:	d1f8      	bne.n	8010efa <_strtoul_l.constprop.0+0xa>
 8010f08:	2c2d      	cmp	r4, #45	; 0x2d
 8010f0a:	d130      	bne.n	8010f6e <_strtoul_l.constprop.0+0x7e>
 8010f0c:	782c      	ldrb	r4, [r5, #0]
 8010f0e:	2601      	movs	r6, #1
 8010f10:	1c85      	adds	r5, r0, #2
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d057      	beq.n	8010fc6 <_strtoul_l.constprop.0+0xd6>
 8010f16:	2b10      	cmp	r3, #16
 8010f18:	d109      	bne.n	8010f2e <_strtoul_l.constprop.0+0x3e>
 8010f1a:	2c30      	cmp	r4, #48	; 0x30
 8010f1c:	d107      	bne.n	8010f2e <_strtoul_l.constprop.0+0x3e>
 8010f1e:	7828      	ldrb	r0, [r5, #0]
 8010f20:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010f24:	2858      	cmp	r0, #88	; 0x58
 8010f26:	d149      	bne.n	8010fbc <_strtoul_l.constprop.0+0xcc>
 8010f28:	786c      	ldrb	r4, [r5, #1]
 8010f2a:	2310      	movs	r3, #16
 8010f2c:	3502      	adds	r5, #2
 8010f2e:	f04f 38ff 	mov.w	r8, #4294967295
 8010f32:	2700      	movs	r7, #0
 8010f34:	fbb8 f8f3 	udiv	r8, r8, r3
 8010f38:	fb03 f908 	mul.w	r9, r3, r8
 8010f3c:	ea6f 0909 	mvn.w	r9, r9
 8010f40:	4638      	mov	r0, r7
 8010f42:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010f46:	f1bc 0f09 	cmp.w	ip, #9
 8010f4a:	d815      	bhi.n	8010f78 <_strtoul_l.constprop.0+0x88>
 8010f4c:	4664      	mov	r4, ip
 8010f4e:	42a3      	cmp	r3, r4
 8010f50:	dd23      	ble.n	8010f9a <_strtoul_l.constprop.0+0xaa>
 8010f52:	f1b7 3fff 	cmp.w	r7, #4294967295
 8010f56:	d007      	beq.n	8010f68 <_strtoul_l.constprop.0+0x78>
 8010f58:	4580      	cmp	r8, r0
 8010f5a:	d31b      	bcc.n	8010f94 <_strtoul_l.constprop.0+0xa4>
 8010f5c:	d101      	bne.n	8010f62 <_strtoul_l.constprop.0+0x72>
 8010f5e:	45a1      	cmp	r9, r4
 8010f60:	db18      	blt.n	8010f94 <_strtoul_l.constprop.0+0xa4>
 8010f62:	fb00 4003 	mla	r0, r0, r3, r4
 8010f66:	2701      	movs	r7, #1
 8010f68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010f6c:	e7e9      	b.n	8010f42 <_strtoul_l.constprop.0+0x52>
 8010f6e:	2c2b      	cmp	r4, #43	; 0x2b
 8010f70:	bf04      	itt	eq
 8010f72:	782c      	ldrbeq	r4, [r5, #0]
 8010f74:	1c85      	addeq	r5, r0, #2
 8010f76:	e7cc      	b.n	8010f12 <_strtoul_l.constprop.0+0x22>
 8010f78:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010f7c:	f1bc 0f19 	cmp.w	ip, #25
 8010f80:	d801      	bhi.n	8010f86 <_strtoul_l.constprop.0+0x96>
 8010f82:	3c37      	subs	r4, #55	; 0x37
 8010f84:	e7e3      	b.n	8010f4e <_strtoul_l.constprop.0+0x5e>
 8010f86:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010f8a:	f1bc 0f19 	cmp.w	ip, #25
 8010f8e:	d804      	bhi.n	8010f9a <_strtoul_l.constprop.0+0xaa>
 8010f90:	3c57      	subs	r4, #87	; 0x57
 8010f92:	e7dc      	b.n	8010f4e <_strtoul_l.constprop.0+0x5e>
 8010f94:	f04f 37ff 	mov.w	r7, #4294967295
 8010f98:	e7e6      	b.n	8010f68 <_strtoul_l.constprop.0+0x78>
 8010f9a:	1c7b      	adds	r3, r7, #1
 8010f9c:	d106      	bne.n	8010fac <_strtoul_l.constprop.0+0xbc>
 8010f9e:	2322      	movs	r3, #34	; 0x22
 8010fa0:	f8ce 3000 	str.w	r3, [lr]
 8010fa4:	4638      	mov	r0, r7
 8010fa6:	b932      	cbnz	r2, 8010fb6 <_strtoul_l.constprop.0+0xc6>
 8010fa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010fac:	b106      	cbz	r6, 8010fb0 <_strtoul_l.constprop.0+0xc0>
 8010fae:	4240      	negs	r0, r0
 8010fb0:	2a00      	cmp	r2, #0
 8010fb2:	d0f9      	beq.n	8010fa8 <_strtoul_l.constprop.0+0xb8>
 8010fb4:	b107      	cbz	r7, 8010fb8 <_strtoul_l.constprop.0+0xc8>
 8010fb6:	1e69      	subs	r1, r5, #1
 8010fb8:	6011      	str	r1, [r2, #0]
 8010fba:	e7f5      	b.n	8010fa8 <_strtoul_l.constprop.0+0xb8>
 8010fbc:	2430      	movs	r4, #48	; 0x30
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d1b5      	bne.n	8010f2e <_strtoul_l.constprop.0+0x3e>
 8010fc2:	2308      	movs	r3, #8
 8010fc4:	e7b3      	b.n	8010f2e <_strtoul_l.constprop.0+0x3e>
 8010fc6:	2c30      	cmp	r4, #48	; 0x30
 8010fc8:	d0a9      	beq.n	8010f1e <_strtoul_l.constprop.0+0x2e>
 8010fca:	230a      	movs	r3, #10
 8010fcc:	e7af      	b.n	8010f2e <_strtoul_l.constprop.0+0x3e>
 8010fce:	bf00      	nop
 8010fd0:	08011889 	.word	0x08011889

08010fd4 <_strtoul_r>:
 8010fd4:	f7ff bf8c 	b.w	8010ef0 <_strtoul_l.constprop.0>

08010fd8 <__ascii_wctomb>:
 8010fd8:	b149      	cbz	r1, 8010fee <__ascii_wctomb+0x16>
 8010fda:	2aff      	cmp	r2, #255	; 0xff
 8010fdc:	bf85      	ittet	hi
 8010fde:	238a      	movhi	r3, #138	; 0x8a
 8010fe0:	6003      	strhi	r3, [r0, #0]
 8010fe2:	700a      	strbls	r2, [r1, #0]
 8010fe4:	f04f 30ff 	movhi.w	r0, #4294967295
 8010fe8:	bf98      	it	ls
 8010fea:	2001      	movls	r0, #1
 8010fec:	4770      	bx	lr
 8010fee:	4608      	mov	r0, r1
 8010ff0:	4770      	bx	lr
	...

08010ff4 <fiprintf>:
 8010ff4:	b40e      	push	{r1, r2, r3}
 8010ff6:	b503      	push	{r0, r1, lr}
 8010ff8:	4601      	mov	r1, r0
 8010ffa:	ab03      	add	r3, sp, #12
 8010ffc:	4805      	ldr	r0, [pc, #20]	; (8011014 <fiprintf+0x20>)
 8010ffe:	f853 2b04 	ldr.w	r2, [r3], #4
 8011002:	6800      	ldr	r0, [r0, #0]
 8011004:	9301      	str	r3, [sp, #4]
 8011006:	f000 f83f 	bl	8011088 <_vfiprintf_r>
 801100a:	b002      	add	sp, #8
 801100c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011010:	b003      	add	sp, #12
 8011012:	4770      	bx	lr
 8011014:	20000084 	.word	0x20000084

08011018 <abort>:
 8011018:	b508      	push	{r3, lr}
 801101a:	2006      	movs	r0, #6
 801101c:	f000 fa0c 	bl	8011438 <raise>
 8011020:	2001      	movs	r0, #1
 8011022:	f7f0 ff01 	bl	8001e28 <_exit>

08011026 <_malloc_usable_size_r>:
 8011026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801102a:	1f18      	subs	r0, r3, #4
 801102c:	2b00      	cmp	r3, #0
 801102e:	bfbc      	itt	lt
 8011030:	580b      	ldrlt	r3, [r1, r0]
 8011032:	18c0      	addlt	r0, r0, r3
 8011034:	4770      	bx	lr

08011036 <__sfputc_r>:
 8011036:	6893      	ldr	r3, [r2, #8]
 8011038:	3b01      	subs	r3, #1
 801103a:	2b00      	cmp	r3, #0
 801103c:	b410      	push	{r4}
 801103e:	6093      	str	r3, [r2, #8]
 8011040:	da08      	bge.n	8011054 <__sfputc_r+0x1e>
 8011042:	6994      	ldr	r4, [r2, #24]
 8011044:	42a3      	cmp	r3, r4
 8011046:	db01      	blt.n	801104c <__sfputc_r+0x16>
 8011048:	290a      	cmp	r1, #10
 801104a:	d103      	bne.n	8011054 <__sfputc_r+0x1e>
 801104c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011050:	f000 b934 	b.w	80112bc <__swbuf_r>
 8011054:	6813      	ldr	r3, [r2, #0]
 8011056:	1c58      	adds	r0, r3, #1
 8011058:	6010      	str	r0, [r2, #0]
 801105a:	7019      	strb	r1, [r3, #0]
 801105c:	4608      	mov	r0, r1
 801105e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011062:	4770      	bx	lr

08011064 <__sfputs_r>:
 8011064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011066:	4606      	mov	r6, r0
 8011068:	460f      	mov	r7, r1
 801106a:	4614      	mov	r4, r2
 801106c:	18d5      	adds	r5, r2, r3
 801106e:	42ac      	cmp	r4, r5
 8011070:	d101      	bne.n	8011076 <__sfputs_r+0x12>
 8011072:	2000      	movs	r0, #0
 8011074:	e007      	b.n	8011086 <__sfputs_r+0x22>
 8011076:	f814 1b01 	ldrb.w	r1, [r4], #1
 801107a:	463a      	mov	r2, r7
 801107c:	4630      	mov	r0, r6
 801107e:	f7ff ffda 	bl	8011036 <__sfputc_r>
 8011082:	1c43      	adds	r3, r0, #1
 8011084:	d1f3      	bne.n	801106e <__sfputs_r+0xa>
 8011086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011088 <_vfiprintf_r>:
 8011088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801108c:	460d      	mov	r5, r1
 801108e:	b09d      	sub	sp, #116	; 0x74
 8011090:	4614      	mov	r4, r2
 8011092:	4698      	mov	r8, r3
 8011094:	4606      	mov	r6, r0
 8011096:	b118      	cbz	r0, 80110a0 <_vfiprintf_r+0x18>
 8011098:	6a03      	ldr	r3, [r0, #32]
 801109a:	b90b      	cbnz	r3, 80110a0 <_vfiprintf_r+0x18>
 801109c:	f7fc fa02 	bl	800d4a4 <__sinit>
 80110a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80110a2:	07d9      	lsls	r1, r3, #31
 80110a4:	d405      	bmi.n	80110b2 <_vfiprintf_r+0x2a>
 80110a6:	89ab      	ldrh	r3, [r5, #12]
 80110a8:	059a      	lsls	r2, r3, #22
 80110aa:	d402      	bmi.n	80110b2 <_vfiprintf_r+0x2a>
 80110ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80110ae:	f7fc fb64 	bl	800d77a <__retarget_lock_acquire_recursive>
 80110b2:	89ab      	ldrh	r3, [r5, #12]
 80110b4:	071b      	lsls	r3, r3, #28
 80110b6:	d501      	bpl.n	80110bc <_vfiprintf_r+0x34>
 80110b8:	692b      	ldr	r3, [r5, #16]
 80110ba:	b99b      	cbnz	r3, 80110e4 <_vfiprintf_r+0x5c>
 80110bc:	4629      	mov	r1, r5
 80110be:	4630      	mov	r0, r6
 80110c0:	f000 f93a 	bl	8011338 <__swsetup_r>
 80110c4:	b170      	cbz	r0, 80110e4 <_vfiprintf_r+0x5c>
 80110c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80110c8:	07dc      	lsls	r4, r3, #31
 80110ca:	d504      	bpl.n	80110d6 <_vfiprintf_r+0x4e>
 80110cc:	f04f 30ff 	mov.w	r0, #4294967295
 80110d0:	b01d      	add	sp, #116	; 0x74
 80110d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110d6:	89ab      	ldrh	r3, [r5, #12]
 80110d8:	0598      	lsls	r0, r3, #22
 80110da:	d4f7      	bmi.n	80110cc <_vfiprintf_r+0x44>
 80110dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80110de:	f7fc fb4d 	bl	800d77c <__retarget_lock_release_recursive>
 80110e2:	e7f3      	b.n	80110cc <_vfiprintf_r+0x44>
 80110e4:	2300      	movs	r3, #0
 80110e6:	9309      	str	r3, [sp, #36]	; 0x24
 80110e8:	2320      	movs	r3, #32
 80110ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80110ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80110f2:	2330      	movs	r3, #48	; 0x30
 80110f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80112a8 <_vfiprintf_r+0x220>
 80110f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80110fc:	f04f 0901 	mov.w	r9, #1
 8011100:	4623      	mov	r3, r4
 8011102:	469a      	mov	sl, r3
 8011104:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011108:	b10a      	cbz	r2, 801110e <_vfiprintf_r+0x86>
 801110a:	2a25      	cmp	r2, #37	; 0x25
 801110c:	d1f9      	bne.n	8011102 <_vfiprintf_r+0x7a>
 801110e:	ebba 0b04 	subs.w	fp, sl, r4
 8011112:	d00b      	beq.n	801112c <_vfiprintf_r+0xa4>
 8011114:	465b      	mov	r3, fp
 8011116:	4622      	mov	r2, r4
 8011118:	4629      	mov	r1, r5
 801111a:	4630      	mov	r0, r6
 801111c:	f7ff ffa2 	bl	8011064 <__sfputs_r>
 8011120:	3001      	adds	r0, #1
 8011122:	f000 80a9 	beq.w	8011278 <_vfiprintf_r+0x1f0>
 8011126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011128:	445a      	add	r2, fp
 801112a:	9209      	str	r2, [sp, #36]	; 0x24
 801112c:	f89a 3000 	ldrb.w	r3, [sl]
 8011130:	2b00      	cmp	r3, #0
 8011132:	f000 80a1 	beq.w	8011278 <_vfiprintf_r+0x1f0>
 8011136:	2300      	movs	r3, #0
 8011138:	f04f 32ff 	mov.w	r2, #4294967295
 801113c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011140:	f10a 0a01 	add.w	sl, sl, #1
 8011144:	9304      	str	r3, [sp, #16]
 8011146:	9307      	str	r3, [sp, #28]
 8011148:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801114c:	931a      	str	r3, [sp, #104]	; 0x68
 801114e:	4654      	mov	r4, sl
 8011150:	2205      	movs	r2, #5
 8011152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011156:	4854      	ldr	r0, [pc, #336]	; (80112a8 <_vfiprintf_r+0x220>)
 8011158:	f7ef f83a 	bl	80001d0 <memchr>
 801115c:	9a04      	ldr	r2, [sp, #16]
 801115e:	b9d8      	cbnz	r0, 8011198 <_vfiprintf_r+0x110>
 8011160:	06d1      	lsls	r1, r2, #27
 8011162:	bf44      	itt	mi
 8011164:	2320      	movmi	r3, #32
 8011166:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801116a:	0713      	lsls	r3, r2, #28
 801116c:	bf44      	itt	mi
 801116e:	232b      	movmi	r3, #43	; 0x2b
 8011170:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011174:	f89a 3000 	ldrb.w	r3, [sl]
 8011178:	2b2a      	cmp	r3, #42	; 0x2a
 801117a:	d015      	beq.n	80111a8 <_vfiprintf_r+0x120>
 801117c:	9a07      	ldr	r2, [sp, #28]
 801117e:	4654      	mov	r4, sl
 8011180:	2000      	movs	r0, #0
 8011182:	f04f 0c0a 	mov.w	ip, #10
 8011186:	4621      	mov	r1, r4
 8011188:	f811 3b01 	ldrb.w	r3, [r1], #1
 801118c:	3b30      	subs	r3, #48	; 0x30
 801118e:	2b09      	cmp	r3, #9
 8011190:	d94d      	bls.n	801122e <_vfiprintf_r+0x1a6>
 8011192:	b1b0      	cbz	r0, 80111c2 <_vfiprintf_r+0x13a>
 8011194:	9207      	str	r2, [sp, #28]
 8011196:	e014      	b.n	80111c2 <_vfiprintf_r+0x13a>
 8011198:	eba0 0308 	sub.w	r3, r0, r8
 801119c:	fa09 f303 	lsl.w	r3, r9, r3
 80111a0:	4313      	orrs	r3, r2
 80111a2:	9304      	str	r3, [sp, #16]
 80111a4:	46a2      	mov	sl, r4
 80111a6:	e7d2      	b.n	801114e <_vfiprintf_r+0xc6>
 80111a8:	9b03      	ldr	r3, [sp, #12]
 80111aa:	1d19      	adds	r1, r3, #4
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	9103      	str	r1, [sp, #12]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	bfbb      	ittet	lt
 80111b4:	425b      	neglt	r3, r3
 80111b6:	f042 0202 	orrlt.w	r2, r2, #2
 80111ba:	9307      	strge	r3, [sp, #28]
 80111bc:	9307      	strlt	r3, [sp, #28]
 80111be:	bfb8      	it	lt
 80111c0:	9204      	strlt	r2, [sp, #16]
 80111c2:	7823      	ldrb	r3, [r4, #0]
 80111c4:	2b2e      	cmp	r3, #46	; 0x2e
 80111c6:	d10c      	bne.n	80111e2 <_vfiprintf_r+0x15a>
 80111c8:	7863      	ldrb	r3, [r4, #1]
 80111ca:	2b2a      	cmp	r3, #42	; 0x2a
 80111cc:	d134      	bne.n	8011238 <_vfiprintf_r+0x1b0>
 80111ce:	9b03      	ldr	r3, [sp, #12]
 80111d0:	1d1a      	adds	r2, r3, #4
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	9203      	str	r2, [sp, #12]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	bfb8      	it	lt
 80111da:	f04f 33ff 	movlt.w	r3, #4294967295
 80111de:	3402      	adds	r4, #2
 80111e0:	9305      	str	r3, [sp, #20]
 80111e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80112b8 <_vfiprintf_r+0x230>
 80111e6:	7821      	ldrb	r1, [r4, #0]
 80111e8:	2203      	movs	r2, #3
 80111ea:	4650      	mov	r0, sl
 80111ec:	f7ee fff0 	bl	80001d0 <memchr>
 80111f0:	b138      	cbz	r0, 8011202 <_vfiprintf_r+0x17a>
 80111f2:	9b04      	ldr	r3, [sp, #16]
 80111f4:	eba0 000a 	sub.w	r0, r0, sl
 80111f8:	2240      	movs	r2, #64	; 0x40
 80111fa:	4082      	lsls	r2, r0
 80111fc:	4313      	orrs	r3, r2
 80111fe:	3401      	adds	r4, #1
 8011200:	9304      	str	r3, [sp, #16]
 8011202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011206:	4829      	ldr	r0, [pc, #164]	; (80112ac <_vfiprintf_r+0x224>)
 8011208:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801120c:	2206      	movs	r2, #6
 801120e:	f7ee ffdf 	bl	80001d0 <memchr>
 8011212:	2800      	cmp	r0, #0
 8011214:	d03f      	beq.n	8011296 <_vfiprintf_r+0x20e>
 8011216:	4b26      	ldr	r3, [pc, #152]	; (80112b0 <_vfiprintf_r+0x228>)
 8011218:	bb1b      	cbnz	r3, 8011262 <_vfiprintf_r+0x1da>
 801121a:	9b03      	ldr	r3, [sp, #12]
 801121c:	3307      	adds	r3, #7
 801121e:	f023 0307 	bic.w	r3, r3, #7
 8011222:	3308      	adds	r3, #8
 8011224:	9303      	str	r3, [sp, #12]
 8011226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011228:	443b      	add	r3, r7
 801122a:	9309      	str	r3, [sp, #36]	; 0x24
 801122c:	e768      	b.n	8011100 <_vfiprintf_r+0x78>
 801122e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011232:	460c      	mov	r4, r1
 8011234:	2001      	movs	r0, #1
 8011236:	e7a6      	b.n	8011186 <_vfiprintf_r+0xfe>
 8011238:	2300      	movs	r3, #0
 801123a:	3401      	adds	r4, #1
 801123c:	9305      	str	r3, [sp, #20]
 801123e:	4619      	mov	r1, r3
 8011240:	f04f 0c0a 	mov.w	ip, #10
 8011244:	4620      	mov	r0, r4
 8011246:	f810 2b01 	ldrb.w	r2, [r0], #1
 801124a:	3a30      	subs	r2, #48	; 0x30
 801124c:	2a09      	cmp	r2, #9
 801124e:	d903      	bls.n	8011258 <_vfiprintf_r+0x1d0>
 8011250:	2b00      	cmp	r3, #0
 8011252:	d0c6      	beq.n	80111e2 <_vfiprintf_r+0x15a>
 8011254:	9105      	str	r1, [sp, #20]
 8011256:	e7c4      	b.n	80111e2 <_vfiprintf_r+0x15a>
 8011258:	fb0c 2101 	mla	r1, ip, r1, r2
 801125c:	4604      	mov	r4, r0
 801125e:	2301      	movs	r3, #1
 8011260:	e7f0      	b.n	8011244 <_vfiprintf_r+0x1bc>
 8011262:	ab03      	add	r3, sp, #12
 8011264:	9300      	str	r3, [sp, #0]
 8011266:	462a      	mov	r2, r5
 8011268:	4b12      	ldr	r3, [pc, #72]	; (80112b4 <_vfiprintf_r+0x22c>)
 801126a:	a904      	add	r1, sp, #16
 801126c:	4630      	mov	r0, r6
 801126e:	f7fb fab7 	bl	800c7e0 <_printf_float>
 8011272:	4607      	mov	r7, r0
 8011274:	1c78      	adds	r0, r7, #1
 8011276:	d1d6      	bne.n	8011226 <_vfiprintf_r+0x19e>
 8011278:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801127a:	07d9      	lsls	r1, r3, #31
 801127c:	d405      	bmi.n	801128a <_vfiprintf_r+0x202>
 801127e:	89ab      	ldrh	r3, [r5, #12]
 8011280:	059a      	lsls	r2, r3, #22
 8011282:	d402      	bmi.n	801128a <_vfiprintf_r+0x202>
 8011284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011286:	f7fc fa79 	bl	800d77c <__retarget_lock_release_recursive>
 801128a:	89ab      	ldrh	r3, [r5, #12]
 801128c:	065b      	lsls	r3, r3, #25
 801128e:	f53f af1d 	bmi.w	80110cc <_vfiprintf_r+0x44>
 8011292:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011294:	e71c      	b.n	80110d0 <_vfiprintf_r+0x48>
 8011296:	ab03      	add	r3, sp, #12
 8011298:	9300      	str	r3, [sp, #0]
 801129a:	462a      	mov	r2, r5
 801129c:	4b05      	ldr	r3, [pc, #20]	; (80112b4 <_vfiprintf_r+0x22c>)
 801129e:	a904      	add	r1, sp, #16
 80112a0:	4630      	mov	r0, r6
 80112a2:	f7fb fd41 	bl	800cd28 <_printf_i>
 80112a6:	e7e4      	b.n	8011272 <_vfiprintf_r+0x1ea>
 80112a8:	08011989 	.word	0x08011989
 80112ac:	08011993 	.word	0x08011993
 80112b0:	0800c7e1 	.word	0x0800c7e1
 80112b4:	08011065 	.word	0x08011065
 80112b8:	0801198f 	.word	0x0801198f

080112bc <__swbuf_r>:
 80112bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112be:	460e      	mov	r6, r1
 80112c0:	4614      	mov	r4, r2
 80112c2:	4605      	mov	r5, r0
 80112c4:	b118      	cbz	r0, 80112ce <__swbuf_r+0x12>
 80112c6:	6a03      	ldr	r3, [r0, #32]
 80112c8:	b90b      	cbnz	r3, 80112ce <__swbuf_r+0x12>
 80112ca:	f7fc f8eb 	bl	800d4a4 <__sinit>
 80112ce:	69a3      	ldr	r3, [r4, #24]
 80112d0:	60a3      	str	r3, [r4, #8]
 80112d2:	89a3      	ldrh	r3, [r4, #12]
 80112d4:	071a      	lsls	r2, r3, #28
 80112d6:	d525      	bpl.n	8011324 <__swbuf_r+0x68>
 80112d8:	6923      	ldr	r3, [r4, #16]
 80112da:	b31b      	cbz	r3, 8011324 <__swbuf_r+0x68>
 80112dc:	6823      	ldr	r3, [r4, #0]
 80112de:	6922      	ldr	r2, [r4, #16]
 80112e0:	1a98      	subs	r0, r3, r2
 80112e2:	6963      	ldr	r3, [r4, #20]
 80112e4:	b2f6      	uxtb	r6, r6
 80112e6:	4283      	cmp	r3, r0
 80112e8:	4637      	mov	r7, r6
 80112ea:	dc04      	bgt.n	80112f6 <__swbuf_r+0x3a>
 80112ec:	4621      	mov	r1, r4
 80112ee:	4628      	mov	r0, r5
 80112f0:	f7ff f962 	bl	80105b8 <_fflush_r>
 80112f4:	b9e0      	cbnz	r0, 8011330 <__swbuf_r+0x74>
 80112f6:	68a3      	ldr	r3, [r4, #8]
 80112f8:	3b01      	subs	r3, #1
 80112fa:	60a3      	str	r3, [r4, #8]
 80112fc:	6823      	ldr	r3, [r4, #0]
 80112fe:	1c5a      	adds	r2, r3, #1
 8011300:	6022      	str	r2, [r4, #0]
 8011302:	701e      	strb	r6, [r3, #0]
 8011304:	6962      	ldr	r2, [r4, #20]
 8011306:	1c43      	adds	r3, r0, #1
 8011308:	429a      	cmp	r2, r3
 801130a:	d004      	beq.n	8011316 <__swbuf_r+0x5a>
 801130c:	89a3      	ldrh	r3, [r4, #12]
 801130e:	07db      	lsls	r3, r3, #31
 8011310:	d506      	bpl.n	8011320 <__swbuf_r+0x64>
 8011312:	2e0a      	cmp	r6, #10
 8011314:	d104      	bne.n	8011320 <__swbuf_r+0x64>
 8011316:	4621      	mov	r1, r4
 8011318:	4628      	mov	r0, r5
 801131a:	f7ff f94d 	bl	80105b8 <_fflush_r>
 801131e:	b938      	cbnz	r0, 8011330 <__swbuf_r+0x74>
 8011320:	4638      	mov	r0, r7
 8011322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011324:	4621      	mov	r1, r4
 8011326:	4628      	mov	r0, r5
 8011328:	f000 f806 	bl	8011338 <__swsetup_r>
 801132c:	2800      	cmp	r0, #0
 801132e:	d0d5      	beq.n	80112dc <__swbuf_r+0x20>
 8011330:	f04f 37ff 	mov.w	r7, #4294967295
 8011334:	e7f4      	b.n	8011320 <__swbuf_r+0x64>
	...

08011338 <__swsetup_r>:
 8011338:	b538      	push	{r3, r4, r5, lr}
 801133a:	4b2a      	ldr	r3, [pc, #168]	; (80113e4 <__swsetup_r+0xac>)
 801133c:	4605      	mov	r5, r0
 801133e:	6818      	ldr	r0, [r3, #0]
 8011340:	460c      	mov	r4, r1
 8011342:	b118      	cbz	r0, 801134c <__swsetup_r+0x14>
 8011344:	6a03      	ldr	r3, [r0, #32]
 8011346:	b90b      	cbnz	r3, 801134c <__swsetup_r+0x14>
 8011348:	f7fc f8ac 	bl	800d4a4 <__sinit>
 801134c:	89a3      	ldrh	r3, [r4, #12]
 801134e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011352:	0718      	lsls	r0, r3, #28
 8011354:	d422      	bmi.n	801139c <__swsetup_r+0x64>
 8011356:	06d9      	lsls	r1, r3, #27
 8011358:	d407      	bmi.n	801136a <__swsetup_r+0x32>
 801135a:	2309      	movs	r3, #9
 801135c:	602b      	str	r3, [r5, #0]
 801135e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011362:	81a3      	strh	r3, [r4, #12]
 8011364:	f04f 30ff 	mov.w	r0, #4294967295
 8011368:	e034      	b.n	80113d4 <__swsetup_r+0x9c>
 801136a:	0758      	lsls	r0, r3, #29
 801136c:	d512      	bpl.n	8011394 <__swsetup_r+0x5c>
 801136e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011370:	b141      	cbz	r1, 8011384 <__swsetup_r+0x4c>
 8011372:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011376:	4299      	cmp	r1, r3
 8011378:	d002      	beq.n	8011380 <__swsetup_r+0x48>
 801137a:	4628      	mov	r0, r5
 801137c:	f7fd f88e 	bl	800e49c <_free_r>
 8011380:	2300      	movs	r3, #0
 8011382:	6363      	str	r3, [r4, #52]	; 0x34
 8011384:	89a3      	ldrh	r3, [r4, #12]
 8011386:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801138a:	81a3      	strh	r3, [r4, #12]
 801138c:	2300      	movs	r3, #0
 801138e:	6063      	str	r3, [r4, #4]
 8011390:	6923      	ldr	r3, [r4, #16]
 8011392:	6023      	str	r3, [r4, #0]
 8011394:	89a3      	ldrh	r3, [r4, #12]
 8011396:	f043 0308 	orr.w	r3, r3, #8
 801139a:	81a3      	strh	r3, [r4, #12]
 801139c:	6923      	ldr	r3, [r4, #16]
 801139e:	b94b      	cbnz	r3, 80113b4 <__swsetup_r+0x7c>
 80113a0:	89a3      	ldrh	r3, [r4, #12]
 80113a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80113a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80113aa:	d003      	beq.n	80113b4 <__swsetup_r+0x7c>
 80113ac:	4621      	mov	r1, r4
 80113ae:	4628      	mov	r0, r5
 80113b0:	f000 f884 	bl	80114bc <__smakebuf_r>
 80113b4:	89a0      	ldrh	r0, [r4, #12]
 80113b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80113ba:	f010 0301 	ands.w	r3, r0, #1
 80113be:	d00a      	beq.n	80113d6 <__swsetup_r+0x9e>
 80113c0:	2300      	movs	r3, #0
 80113c2:	60a3      	str	r3, [r4, #8]
 80113c4:	6963      	ldr	r3, [r4, #20]
 80113c6:	425b      	negs	r3, r3
 80113c8:	61a3      	str	r3, [r4, #24]
 80113ca:	6923      	ldr	r3, [r4, #16]
 80113cc:	b943      	cbnz	r3, 80113e0 <__swsetup_r+0xa8>
 80113ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80113d2:	d1c4      	bne.n	801135e <__swsetup_r+0x26>
 80113d4:	bd38      	pop	{r3, r4, r5, pc}
 80113d6:	0781      	lsls	r1, r0, #30
 80113d8:	bf58      	it	pl
 80113da:	6963      	ldrpl	r3, [r4, #20]
 80113dc:	60a3      	str	r3, [r4, #8]
 80113de:	e7f4      	b.n	80113ca <__swsetup_r+0x92>
 80113e0:	2000      	movs	r0, #0
 80113e2:	e7f7      	b.n	80113d4 <__swsetup_r+0x9c>
 80113e4:	20000084 	.word	0x20000084

080113e8 <_raise_r>:
 80113e8:	291f      	cmp	r1, #31
 80113ea:	b538      	push	{r3, r4, r5, lr}
 80113ec:	4604      	mov	r4, r0
 80113ee:	460d      	mov	r5, r1
 80113f0:	d904      	bls.n	80113fc <_raise_r+0x14>
 80113f2:	2316      	movs	r3, #22
 80113f4:	6003      	str	r3, [r0, #0]
 80113f6:	f04f 30ff 	mov.w	r0, #4294967295
 80113fa:	bd38      	pop	{r3, r4, r5, pc}
 80113fc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80113fe:	b112      	cbz	r2, 8011406 <_raise_r+0x1e>
 8011400:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011404:	b94b      	cbnz	r3, 801141a <_raise_r+0x32>
 8011406:	4620      	mov	r0, r4
 8011408:	f000 f830 	bl	801146c <_getpid_r>
 801140c:	462a      	mov	r2, r5
 801140e:	4601      	mov	r1, r0
 8011410:	4620      	mov	r0, r4
 8011412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011416:	f000 b817 	b.w	8011448 <_kill_r>
 801141a:	2b01      	cmp	r3, #1
 801141c:	d00a      	beq.n	8011434 <_raise_r+0x4c>
 801141e:	1c59      	adds	r1, r3, #1
 8011420:	d103      	bne.n	801142a <_raise_r+0x42>
 8011422:	2316      	movs	r3, #22
 8011424:	6003      	str	r3, [r0, #0]
 8011426:	2001      	movs	r0, #1
 8011428:	e7e7      	b.n	80113fa <_raise_r+0x12>
 801142a:	2400      	movs	r4, #0
 801142c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011430:	4628      	mov	r0, r5
 8011432:	4798      	blx	r3
 8011434:	2000      	movs	r0, #0
 8011436:	e7e0      	b.n	80113fa <_raise_r+0x12>

08011438 <raise>:
 8011438:	4b02      	ldr	r3, [pc, #8]	; (8011444 <raise+0xc>)
 801143a:	4601      	mov	r1, r0
 801143c:	6818      	ldr	r0, [r3, #0]
 801143e:	f7ff bfd3 	b.w	80113e8 <_raise_r>
 8011442:	bf00      	nop
 8011444:	20000084 	.word	0x20000084

08011448 <_kill_r>:
 8011448:	b538      	push	{r3, r4, r5, lr}
 801144a:	4d07      	ldr	r5, [pc, #28]	; (8011468 <_kill_r+0x20>)
 801144c:	2300      	movs	r3, #0
 801144e:	4604      	mov	r4, r0
 8011450:	4608      	mov	r0, r1
 8011452:	4611      	mov	r1, r2
 8011454:	602b      	str	r3, [r5, #0]
 8011456:	f7f0 fcd7 	bl	8001e08 <_kill>
 801145a:	1c43      	adds	r3, r0, #1
 801145c:	d102      	bne.n	8011464 <_kill_r+0x1c>
 801145e:	682b      	ldr	r3, [r5, #0]
 8011460:	b103      	cbz	r3, 8011464 <_kill_r+0x1c>
 8011462:	6023      	str	r3, [r4, #0]
 8011464:	bd38      	pop	{r3, r4, r5, pc}
 8011466:	bf00      	nop
 8011468:	2000107c 	.word	0x2000107c

0801146c <_getpid_r>:
 801146c:	f7f0 bcc4 	b.w	8001df8 <_getpid>

08011470 <__swhatbuf_r>:
 8011470:	b570      	push	{r4, r5, r6, lr}
 8011472:	460c      	mov	r4, r1
 8011474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011478:	2900      	cmp	r1, #0
 801147a:	b096      	sub	sp, #88	; 0x58
 801147c:	4615      	mov	r5, r2
 801147e:	461e      	mov	r6, r3
 8011480:	da0d      	bge.n	801149e <__swhatbuf_r+0x2e>
 8011482:	89a3      	ldrh	r3, [r4, #12]
 8011484:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011488:	f04f 0100 	mov.w	r1, #0
 801148c:	bf0c      	ite	eq
 801148e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011492:	2340      	movne	r3, #64	; 0x40
 8011494:	2000      	movs	r0, #0
 8011496:	6031      	str	r1, [r6, #0]
 8011498:	602b      	str	r3, [r5, #0]
 801149a:	b016      	add	sp, #88	; 0x58
 801149c:	bd70      	pop	{r4, r5, r6, pc}
 801149e:	466a      	mov	r2, sp
 80114a0:	f000 f848 	bl	8011534 <_fstat_r>
 80114a4:	2800      	cmp	r0, #0
 80114a6:	dbec      	blt.n	8011482 <__swhatbuf_r+0x12>
 80114a8:	9901      	ldr	r1, [sp, #4]
 80114aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80114ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80114b2:	4259      	negs	r1, r3
 80114b4:	4159      	adcs	r1, r3
 80114b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114ba:	e7eb      	b.n	8011494 <__swhatbuf_r+0x24>

080114bc <__smakebuf_r>:
 80114bc:	898b      	ldrh	r3, [r1, #12]
 80114be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80114c0:	079d      	lsls	r5, r3, #30
 80114c2:	4606      	mov	r6, r0
 80114c4:	460c      	mov	r4, r1
 80114c6:	d507      	bpl.n	80114d8 <__smakebuf_r+0x1c>
 80114c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80114cc:	6023      	str	r3, [r4, #0]
 80114ce:	6123      	str	r3, [r4, #16]
 80114d0:	2301      	movs	r3, #1
 80114d2:	6163      	str	r3, [r4, #20]
 80114d4:	b002      	add	sp, #8
 80114d6:	bd70      	pop	{r4, r5, r6, pc}
 80114d8:	ab01      	add	r3, sp, #4
 80114da:	466a      	mov	r2, sp
 80114dc:	f7ff ffc8 	bl	8011470 <__swhatbuf_r>
 80114e0:	9900      	ldr	r1, [sp, #0]
 80114e2:	4605      	mov	r5, r0
 80114e4:	4630      	mov	r0, r6
 80114e6:	f7fb f84f 	bl	800c588 <_malloc_r>
 80114ea:	b948      	cbnz	r0, 8011500 <__smakebuf_r+0x44>
 80114ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114f0:	059a      	lsls	r2, r3, #22
 80114f2:	d4ef      	bmi.n	80114d4 <__smakebuf_r+0x18>
 80114f4:	f023 0303 	bic.w	r3, r3, #3
 80114f8:	f043 0302 	orr.w	r3, r3, #2
 80114fc:	81a3      	strh	r3, [r4, #12]
 80114fe:	e7e3      	b.n	80114c8 <__smakebuf_r+0xc>
 8011500:	89a3      	ldrh	r3, [r4, #12]
 8011502:	6020      	str	r0, [r4, #0]
 8011504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011508:	81a3      	strh	r3, [r4, #12]
 801150a:	9b00      	ldr	r3, [sp, #0]
 801150c:	6163      	str	r3, [r4, #20]
 801150e:	9b01      	ldr	r3, [sp, #4]
 8011510:	6120      	str	r0, [r4, #16]
 8011512:	b15b      	cbz	r3, 801152c <__smakebuf_r+0x70>
 8011514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011518:	4630      	mov	r0, r6
 801151a:	f000 f81d 	bl	8011558 <_isatty_r>
 801151e:	b128      	cbz	r0, 801152c <__smakebuf_r+0x70>
 8011520:	89a3      	ldrh	r3, [r4, #12]
 8011522:	f023 0303 	bic.w	r3, r3, #3
 8011526:	f043 0301 	orr.w	r3, r3, #1
 801152a:	81a3      	strh	r3, [r4, #12]
 801152c:	89a3      	ldrh	r3, [r4, #12]
 801152e:	431d      	orrs	r5, r3
 8011530:	81a5      	strh	r5, [r4, #12]
 8011532:	e7cf      	b.n	80114d4 <__smakebuf_r+0x18>

08011534 <_fstat_r>:
 8011534:	b538      	push	{r3, r4, r5, lr}
 8011536:	4d07      	ldr	r5, [pc, #28]	; (8011554 <_fstat_r+0x20>)
 8011538:	2300      	movs	r3, #0
 801153a:	4604      	mov	r4, r0
 801153c:	4608      	mov	r0, r1
 801153e:	4611      	mov	r1, r2
 8011540:	602b      	str	r3, [r5, #0]
 8011542:	f7f0 fcc0 	bl	8001ec6 <_fstat>
 8011546:	1c43      	adds	r3, r0, #1
 8011548:	d102      	bne.n	8011550 <_fstat_r+0x1c>
 801154a:	682b      	ldr	r3, [r5, #0]
 801154c:	b103      	cbz	r3, 8011550 <_fstat_r+0x1c>
 801154e:	6023      	str	r3, [r4, #0]
 8011550:	bd38      	pop	{r3, r4, r5, pc}
 8011552:	bf00      	nop
 8011554:	2000107c 	.word	0x2000107c

08011558 <_isatty_r>:
 8011558:	b538      	push	{r3, r4, r5, lr}
 801155a:	4d06      	ldr	r5, [pc, #24]	; (8011574 <_isatty_r+0x1c>)
 801155c:	2300      	movs	r3, #0
 801155e:	4604      	mov	r4, r0
 8011560:	4608      	mov	r0, r1
 8011562:	602b      	str	r3, [r5, #0]
 8011564:	f7f0 fcbf 	bl	8001ee6 <_isatty>
 8011568:	1c43      	adds	r3, r0, #1
 801156a:	d102      	bne.n	8011572 <_isatty_r+0x1a>
 801156c:	682b      	ldr	r3, [r5, #0]
 801156e:	b103      	cbz	r3, 8011572 <_isatty_r+0x1a>
 8011570:	6023      	str	r3, [r4, #0]
 8011572:	bd38      	pop	{r3, r4, r5, pc}
 8011574:	2000107c 	.word	0x2000107c

08011578 <_init>:
 8011578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801157a:	bf00      	nop
 801157c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801157e:	bc08      	pop	{r3}
 8011580:	469e      	mov	lr, r3
 8011582:	4770      	bx	lr

08011584 <_fini>:
 8011584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011586:	bf00      	nop
 8011588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801158a:	bc08      	pop	{r3}
 801158c:	469e      	mov	lr, r3
 801158e:	4770      	bx	lr
