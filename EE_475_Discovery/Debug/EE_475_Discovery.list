
EE_475_Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012400  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08012590  08012590  00022590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012a64  08012a64  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  08012a64  08012a64  00022a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012a6c  08012a6c  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012a6c  08012a6c  00022a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012a70  08012a70  00022a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08012a74  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f4  2**0
                  CONTENTS
 10 .bss          00000fd8  200001f4  200001f4  000301f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200011cc  200011cc  000301f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e5c4  00000000  00000000  00030267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004602  00000000  00000000  0004e82b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a28  00000000  00000000  00052e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000145d  00000000  00000000  00054858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002637c  00000000  00000000  00055cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000222e0  00000000  00000000  0007c031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d8c87  00000000  00000000  0009e311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000087ac  00000000  00000000  00176f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  0017f744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012578 	.word	0x08012578

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	08012578 	.word	0x08012578

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	6078      	str	r0, [r7, #4]
	if (huart == &huart3) {
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a1a      	ldr	r2, [pc, #104]	; (8001064 <HAL_UART_RxCpltCallback+0x74>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d12e      	bne.n	800105e <HAL_UART_RxCpltCallback+0x6e>
		memcpy(GPS_Buf, UART3_Rx_buf+1, GPS_BUF_N-1);
 8001000:	4b19      	ldr	r3, [pc, #100]	; (8001068 <HAL_UART_RxCpltCallback+0x78>)
 8001002:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001006:	4619      	mov	r1, r3
 8001008:	4818      	ldr	r0, [pc, #96]	; (800106c <HAL_UART_RxCpltCallback+0x7c>)
 800100a:	f00d fbaa 	bl	800e762 <memcpy>
		GPS_Buf[GPS_BUF_N-1] = '\0';
 800100e:	4b17      	ldr	r3, [pc, #92]	; (800106c <HAL_UART_RxCpltCallback+0x7c>)
 8001010:	2200      	movs	r2, #0
 8001012:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
		// HAL_UART_Transmit(&huart2, GPS_Buf, strlen((char*) GPS_Buf), HAL_MAX_DELAY);
		char* Data_Buffer_ptr = strnstr((char*) GPS_Buf, "GPGGA", 5);
 8001016:	2205      	movs	r2, #5
 8001018:	4915      	ldr	r1, [pc, #84]	; (8001070 <HAL_UART_RxCpltCallback+0x80>)
 800101a:	4814      	ldr	r0, [pc, #80]	; (800106c <HAL_UART_RxCpltCallback+0x7c>)
 800101c:	f00d fad7 	bl	800e5ce <strnstr>
 8001020:	61f8      	str	r0, [r7, #28]
		if (Data_Buffer_ptr == 0) return;
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d019      	beq.n	800105c <HAL_UART_RxCpltCallback+0x6c>

		// HAL_UART_Transmit(&huart2, Data_Buffer_ptr, strlen(Data_Buffer_ptr), HAL_MAX_DELAY);
		float t, lat, lon;
		int res = sscanf((char*) Data_Buffer_ptr, "GPGGA,%f,%f,N,%f,W", &t, &lat, &lon);
 8001028:	f107 0110 	add.w	r1, r7, #16
 800102c:	f107 0214 	add.w	r2, r7, #20
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	460b      	mov	r3, r1
 8001038:	490e      	ldr	r1, [pc, #56]	; (8001074 <HAL_UART_RxCpltCallback+0x84>)
 800103a:	69f8      	ldr	r0, [r7, #28]
 800103c:	f00d fa4e 	bl	800e4dc <siscanf>
 8001040:	61b8      	str	r0, [r7, #24]
		if (res == 3) {
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	2b03      	cmp	r3, #3
 8001046:	d10a      	bne.n	800105e <HAL_UART_RxCpltCallback+0x6e>
			Time = t;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <HAL_UART_RxCpltCallback+0x88>)
 800104c:	6013      	str	r3, [r2, #0]
			Latitude = lat;
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	4a0a      	ldr	r2, [pc, #40]	; (800107c <HAL_UART_RxCpltCallback+0x8c>)
 8001052:	6013      	str	r3, [r2, #0]
			Longitude = lon;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_UART_RxCpltCallback+0x90>)
 8001058:	6013      	str	r3, [r2, #0]
 800105a:	e000      	b.n	800105e <HAL_UART_RxCpltCallback+0x6e>
		if (Data_Buffer_ptr == 0) return;
 800105c:	bf00      	nop
		}
	}
}
 800105e:	3720      	adds	r7, #32
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000394 	.word	0x20000394
 8001068:	20000659 	.word	0x20000659
 800106c:	2000043c 	.word	0x2000043c
 8001070:	08012590 	.word	0x08012590
 8001074:	08012598 	.word	0x08012598
 8001078:	2000063c 	.word	0x2000063c
 800107c:	20000640 	.word	0x20000640
 8001080:	20000644 	.word	0x20000644

08001084 <format_data>:

void format_data(float Time, float Lat, float Long) {
 8001084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001088:	b08a      	sub	sp, #40	; 0x28
 800108a:	af06      	add	r7, sp, #24
 800108c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001090:	edc7 0a02 	vstr	s1, [r7, #8]
 8001094:	ed87 1a01 	vstr	s2, [r7, #4]
	Hours = (int)Time / 10000;
 8001098:	edd7 7a03 	vldr	s15, [r7, #12]
 800109c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010a0:	ee17 1a90 	vmov	r1, s15
 80010a4:	4b30      	ldr	r3, [pc, #192]	; (8001168 <format_data+0xe4>)
 80010a6:	fb83 2301 	smull	r2, r3, r3, r1
 80010aa:	131a      	asrs	r2, r3, #12
 80010ac:	17cb      	asrs	r3, r1, #31
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	4a2e      	ldr	r2, [pc, #184]	; (800116c <format_data+0xe8>)
 80010b2:	6013      	str	r3, [r2, #0]
	Min = (int)(Time - (Hours * 10000)) / 100;
 80010b4:	4b2d      	ldr	r3, [pc, #180]	; (800116c <format_data+0xe8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f242 7210 	movw	r2, #10000	; 0x2710
 80010bc:	fb02 f303 	mul.w	r3, r2, r3
 80010c0:	ee07 3a90 	vmov	s15, r3
 80010c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80010cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010d4:	ee17 1a90 	vmov	r1, s15
 80010d8:	4b25      	ldr	r3, [pc, #148]	; (8001170 <format_data+0xec>)
 80010da:	fb83 2301 	smull	r2, r3, r3, r1
 80010de:	115a      	asrs	r2, r3, #5
 80010e0:	17cb      	asrs	r3, r1, #31
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	4a23      	ldr	r2, [pc, #140]	; (8001174 <format_data+0xf0>)
 80010e6:	6013      	str	r3, [r2, #0]
	Sec = (int)(Time - ((Hours * 10000) + (Min * 100)));
 80010e8:	4b20      	ldr	r3, [pc, #128]	; (800116c <format_data+0xe8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f242 7210 	movw	r2, #10000	; 0x2710
 80010f0:	fb03 f202 	mul.w	r2, r3, r2
 80010f4:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <format_data+0xf0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2164      	movs	r1, #100	; 0x64
 80010fa:	fb01 f303 	mul.w	r3, r1, r3
 80010fe:	4413      	add	r3, r2
 8001100:	ee07 3a90 	vmov	s15, r3
 8001104:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001108:	ed97 7a03 	vldr	s14, [r7, #12]
 800110c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001114:	ee17 2a90 	vmov	r2, s15
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <format_data+0xf4>)
 800111a:	601a      	str	r2, [r3, #0]
	sprintf((char*) UART2_Tx_buf, "Time=%d:%d:%d Latitude=%f, Longitude=%f\r\n",
 800111c:	4b13      	ldr	r3, [pc, #76]	; (800116c <format_data+0xe8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f1a3 0808 	sub.w	r8, r3, #8
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <format_data+0xf0>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <format_data+0xf4>)
 800112c:	681e      	ldr	r6, [r3, #0]
 800112e:	68b8      	ldr	r0, [r7, #8]
 8001130:	f7ff fa0a 	bl	8000548 <__aeabi_f2d>
 8001134:	4604      	mov	r4, r0
 8001136:	460d      	mov	r5, r1
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff fa05 	bl	8000548 <__aeabi_f2d>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001146:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800114a:	9600      	str	r6, [sp, #0]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	4642      	mov	r2, r8
 8001150:	490a      	ldr	r1, [pc, #40]	; (800117c <format_data+0xf8>)
 8001152:	480b      	ldr	r0, [pc, #44]	; (8001180 <format_data+0xfc>)
 8001154:	f00d f9a2 	bl	800e49c <siprintf>
			Hours-8, Min, Sec, Lat, Long);
	printd();
 8001158:	f000 f870 	bl	800123c <printd>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001166:	bf00      	nop
 8001168:	68db8bad 	.word	0x68db8bad
 800116c:	2000064c 	.word	0x2000064c
 8001170:	51eb851f 	.word	0x51eb851f
 8001174:	20000650 	.word	0x20000650
 8001178:	20000654 	.word	0x20000654
 800117c:	080125ac 	.word	0x080125ac
 8001180:	20000858 	.word	0x20000858

08001184 <read_heading>:

void read_heading() {
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af04      	add	r7, sp, #16
	uint8_t data[2];
	HAL_I2C_Mem_Read(&hi2c1, BNO055_ADDRESS << 1, BNO055_ADDR_HEADING, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	2302      	movs	r3, #2
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	221a      	movs	r2, #26
 800119c:	2150      	movs	r1, #80	; 0x50
 800119e:	480c      	ldr	r0, [pc, #48]	; (80011d0 <read_heading+0x4c>)
 80011a0:	f004 faca 	bl	8005738 <HAL_I2C_Mem_Read>
	Heading = (float)((int16_t)(data[1] << 8 | data[0])) / 16.0;
 80011a4:	797b      	ldrb	r3, [r7, #5]
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	793b      	ldrb	r3, [r7, #4]
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	4313      	orrs	r3, r2
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ba:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80011be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011c2:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <read_heading+0x50>)
 80011c4:	edc3 7a00 	vstr	s15, [r3]
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000210 	.word	0x20000210
 80011d4:	20000648 	.word	0x20000648

080011d8 <set_steering>:

void set_steering(float direction) {
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	ed87 0a01 	vstr	s0, [r7, #4]
	int pulse = direction*500+1500;
 80011e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80011e6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001230 <set_steering+0x58>
 80011ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ee:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001234 <set_steering+0x5c>
 80011f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011fa:	ee17 3a90 	vmov	r3, s15
 80011fe:	60fb      	str	r3, [r7, #12]
	if (pulse > 2000) pulse = 2000;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001206:	dd02      	ble.n	800120e <set_steering+0x36>
 8001208:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800120c:	60fb      	str	r3, [r7, #12]
	if (pulse < 1000) pulse = 1000;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001214:	da02      	bge.n	800121c <set_steering+0x44>
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <set_steering+0x60>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68fa      	ldr	r2, [r7, #12]
 8001222:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	43fa0000 	.word	0x43fa0000
 8001234:	44bb8000 	.word	0x44bb8000
 8001238:	20000304 	.word	0x20000304

0800123c <printd>:

void printd() {
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, UART2_Tx_buf, strlen((char*) UART2_Tx_buf), HAL_MAX_DELAY);
 8001240:	4806      	ldr	r0, [pc, #24]	; (800125c <printd+0x20>)
 8001242:	f7ff f815 	bl	8000270 <strlen>
 8001246:	4603      	mov	r3, r0
 8001248:	b29a      	uxth	r2, r3
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	4903      	ldr	r1, [pc, #12]	; (800125c <printd+0x20>)
 8001250:	4803      	ldr	r0, [pc, #12]	; (8001260 <printd+0x24>)
 8001252:	f007 fa8f 	bl	8008774 <HAL_UART_Transmit>
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000858 	.word	0x20000858
 8001260:	2000034c 	.word	0x2000034c
 8001264:	00000000 	.word	0x00000000

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	b5b0      	push	{r4, r5, r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126e:	f000 ffab 	bl	80021c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001272:	f000 f8d7 	bl	8001424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001276:	f000 fae9 	bl	800184c <MX_GPIO_Init>
  MX_DMA_Init();
 800127a:	f000 fac7 	bl	800180c <MX_DMA_Init>
  MX_I2C1_Init();
 800127e:	f000 f93b 	bl	80014f8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001282:	f000 f967 	bl	8001554 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001286:	f000 f995 	bl	80015b4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800128a:	f00b fe09 	bl	800cea0 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 800128e:	f000 fa69 	bl	8001764 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001292:	f000 f9c5 	bl	8001620 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001296:	f000 fa8f 	bl	80017b8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  int i = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
  float comp_f = 0;
 800129e:	f04f 0300 	mov.w	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
  memset(UART3_Rx_buf, 0, GPS_BUF_N);
 80012a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012a8:	2100      	movs	r1, #0
 80012aa:	484f      	ldr	r0, [pc, #316]	; (80013e8 <main+0x180>)
 80012ac:	f00d f987 	bl	800e5be <memset>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80012b0:	2100      	movs	r1, #0
 80012b2:	484e      	ldr	r0, [pc, #312]	; (80013ec <main+0x184>)
 80012b4:	f006 fbd2 	bl	8007a5c <HAL_TIM_PWM_Start>
  HAL_UART_Receive_DMA(&huart3, UART3_Rx_buf, GPS_BUF_N);
 80012b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012bc:	494a      	ldr	r1, [pc, #296]	; (80013e8 <main+0x180>)
 80012be:	484c      	ldr	r0, [pc, #304]	; (80013f0 <main+0x188>)
 80012c0:	f007 fae3 	bl	800888a <HAL_UART_Receive_DMA>
  uint8_t mode = BNO055_MODE_COMPASS;
 80012c4:	2309      	movs	r3, #9
 80012c6:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Mem_Write(&hi2c1, BNO055_ADDRESS << 1, BNO055_ADDR_OPRMODE, I2C_MEMADD_SIZE_8BIT, &mode, 1, HAL_MAX_DELAY);
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295
 80012cc:	9302      	str	r3, [sp, #8]
 80012ce:	2301      	movs	r3, #1
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	1cfb      	adds	r3, r7, #3
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2301      	movs	r3, #1
 80012d8:	223d      	movs	r2, #61	; 0x3d
 80012da:	2150      	movs	r1, #80	; 0x50
 80012dc:	4845      	ldr	r0, [pc, #276]	; (80013f4 <main+0x18c>)
 80012de:	f004 f931 	bl	8005544 <HAL_I2C_Mem_Write>
  HAL_UART_Transmit(&huart2, (uint8_t*) "Hello!\r\n", 8, HAL_MAX_DELAY);
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	2208      	movs	r2, #8
 80012e8:	4943      	ldr	r1, [pc, #268]	; (80013f8 <main+0x190>)
 80012ea:	4844      	ldr	r0, [pc, #272]	; (80013fc <main+0x194>)
 80012ec:	f007 fa42 	bl	8008774 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80012f0:	f00b fdfc 	bl	800ceec <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (i % 10 == 0) format_data(Time, Latitude, Longitude);
 80012f4:	68f9      	ldr	r1, [r7, #12]
 80012f6:	4b42      	ldr	r3, [pc, #264]	; (8001400 <main+0x198>)
 80012f8:	fb83 2301 	smull	r2, r3, r3, r1
 80012fc:	109a      	asrs	r2, r3, #2
 80012fe:	17cb      	asrs	r3, r1, #31
 8001300:	1ad2      	subs	r2, r2, r3
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	1aca      	subs	r2, r1, r3
 800130c:	2a00      	cmp	r2, #0
 800130e:	d110      	bne.n	8001332 <main+0xca>
 8001310:	4b3c      	ldr	r3, [pc, #240]	; (8001404 <main+0x19c>)
 8001312:	edd3 7a00 	vldr	s15, [r3]
 8001316:	4b3c      	ldr	r3, [pc, #240]	; (8001408 <main+0x1a0>)
 8001318:	ed93 7a00 	vldr	s14, [r3]
 800131c:	4b3b      	ldr	r3, [pc, #236]	; (800140c <main+0x1a4>)
 800131e:	edd3 6a00 	vldr	s13, [r3]
 8001322:	eeb0 1a66 	vmov.f32	s2, s13
 8001326:	eef0 0a47 	vmov.f32	s1, s14
 800132a:	eeb0 0a67 	vmov.f32	s0, s15
 800132e:	f7ff fea9 	bl	8001084 <format_data>
    read_heading();
 8001332:	f7ff ff27 	bl	8001184 <read_heading>
    sprintf((char*) UART2_Tx_buf, "%f\r\n", Heading);
 8001336:	4b36      	ldr	r3, [pc, #216]	; (8001410 <main+0x1a8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f904 	bl	8000548 <__aeabi_f2d>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4933      	ldr	r1, [pc, #204]	; (8001414 <main+0x1ac>)
 8001346:	4834      	ldr	r0, [pc, #208]	; (8001418 <main+0x1b0>)
 8001348:	f00d f8a8 	bl	800e49c <siprintf>
    printd();
 800134c:	f7ff ff76 	bl	800123c <printd>

    float comp = (Heading > 180 ? Heading-360 : Heading)/180.0;
 8001350:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <main+0x1a8>)
 8001352:	edd3 7a00 	vldr	s15, [r3]
 8001356:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800141c <main+0x1b4>
 800135a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800135e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001362:	dd07      	ble.n	8001374 <main+0x10c>
 8001364:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <main+0x1a8>)
 8001366:	edd3 7a00 	vldr	s15, [r3]
 800136a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001420 <main+0x1b8>
 800136e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001372:	e002      	b.n	800137a <main+0x112>
 8001374:	4b26      	ldr	r3, [pc, #152]	; (8001410 <main+0x1a8>)
 8001376:	edd3 7a00 	vldr	s15, [r3]
 800137a:	eddf 6a28 	vldr	s13, [pc, #160]	; 800141c <main+0x1b4>
 800137e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001382:	ed87 7a01 	vstr	s14, [r7, #4]
    comp_f += (comp-comp_f)*.01;
 8001386:	68b8      	ldr	r0, [r7, #8]
 8001388:	f7ff f8de 	bl	8000548 <__aeabi_f2d>
 800138c:	4604      	mov	r4, r0
 800138e:	460d      	mov	r5, r1
 8001390:	ed97 7a01 	vldr	s14, [r7, #4]
 8001394:	edd7 7a02 	vldr	s15, [r7, #8]
 8001398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800139c:	ee17 0a90 	vmov	r0, s15
 80013a0:	f7ff f8d2 	bl	8000548 <__aeabi_f2d>
 80013a4:	a30e      	add	r3, pc, #56	; (adr r3, 80013e0 <main+0x178>)
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	f7ff f925 	bl	80005f8 <__aeabi_dmul>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4620      	mov	r0, r4
 80013b4:	4629      	mov	r1, r5
 80013b6:	f7fe ff69 	bl	800028c <__adddf3>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	f7ff fc11 	bl	8000be8 <__aeabi_d2f>
 80013c6:	4603      	mov	r3, r0
 80013c8:	60bb      	str	r3, [r7, #8]

    set_steering(comp_f);
 80013ca:	ed97 0a02 	vldr	s0, [r7, #8]
 80013ce:	f7ff ff03 	bl	80011d8 <set_steering>
    HAL_Delay(LOOP_DELAY);
 80013d2:	200a      	movs	r0, #10
 80013d4:	f000 ff6a 	bl	80022ac <HAL_Delay>
    i++;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	3301      	adds	r3, #1
 80013dc:	60fb      	str	r3, [r7, #12]
  {
 80013de:	e787      	b.n	80012f0 <main+0x88>
 80013e0:	47ae147b 	.word	0x47ae147b
 80013e4:	3f847ae1 	.word	0x3f847ae1
 80013e8:	20000658 	.word	0x20000658
 80013ec:	20000304 	.word	0x20000304
 80013f0:	20000394 	.word	0x20000394
 80013f4:	20000210 	.word	0x20000210
 80013f8:	080125d8 	.word	0x080125d8
 80013fc:	2000034c 	.word	0x2000034c
 8001400:	66666667 	.word	0x66666667
 8001404:	2000063c 	.word	0x2000063c
 8001408:	20000640 	.word	0x20000640
 800140c:	20000644 	.word	0x20000644
 8001410:	20000648 	.word	0x20000648
 8001414:	080125e4 	.word	0x080125e4
 8001418:	20000858 	.word	0x20000858
 800141c:	43340000 	.word	0x43340000
 8001420:	43b40000 	.word	0x43b40000

08001424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b094      	sub	sp, #80	; 0x50
 8001428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142a:	f107 0320 	add.w	r3, r7, #32
 800142e:	2230      	movs	r2, #48	; 0x30
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f00d f8c3 	bl	800e5be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <SystemClock_Config+0xcc>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	4a27      	ldr	r2, [pc, #156]	; (80014f0 <SystemClock_Config+0xcc>)
 8001452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001456:	6413      	str	r3, [r2, #64]	; 0x40
 8001458:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <SystemClock_Config+0xcc>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001464:	2300      	movs	r3, #0
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <SystemClock_Config+0xd0>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a21      	ldr	r2, [pc, #132]	; (80014f4 <SystemClock_Config+0xd0>)
 800146e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <SystemClock_Config+0xd0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001480:	2301      	movs	r3, #1
 8001482:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001484:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800148a:	2302      	movs	r3, #2
 800148c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800148e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001492:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001494:	2308      	movs	r3, #8
 8001496:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001498:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800149c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800149e:	2302      	movs	r3, #2
 80014a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014a2:	2307      	movs	r3, #7
 80014a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a6:	f107 0320 	add.w	r3, r7, #32
 80014aa:	4618      	mov	r0, r3
 80014ac:	f005 fbca 	bl	8006c44 <HAL_RCC_OscConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80014b6:	f000 fac7 	bl	8001a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ba:	230f      	movs	r3, #15
 80014bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014be:	2302      	movs	r3, #2
 80014c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	2105      	movs	r1, #5
 80014d8:	4618      	mov	r0, r3
 80014da:	f005 fe2b 	bl	8007134 <HAL_RCC_ClockConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80014e4:	f000 fab0 	bl	8001a48 <Error_Handler>
  }
}
 80014e8:	bf00      	nop
 80014ea:	3750      	adds	r7, #80	; 0x50
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40007000 	.word	0x40007000

080014f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <MX_I2C1_Init+0x50>)
 80014fe:	4a13      	ldr	r2, [pc, #76]	; (800154c <MX_I2C1_Init+0x54>)
 8001500:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <MX_I2C1_Init+0x50>)
 8001504:	4a12      	ldr	r2, [pc, #72]	; (8001550 <MX_I2C1_Init+0x58>)
 8001506:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <MX_I2C1_Init+0x50>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <MX_I2C1_Init+0x50>)
 8001510:	2200      	movs	r2, #0
 8001512:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <MX_I2C1_Init+0x50>)
 8001516:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800151a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800151c:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <MX_I2C1_Init+0x50>)
 800151e:	2200      	movs	r2, #0
 8001520:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <MX_I2C1_Init+0x50>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001528:	4b07      	ldr	r3, [pc, #28]	; (8001548 <MX_I2C1_Init+0x50>)
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <MX_I2C1_Init+0x50>)
 8001530:	2200      	movs	r2, #0
 8001532:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001534:	4804      	ldr	r0, [pc, #16]	; (8001548 <MX_I2C1_Init+0x50>)
 8001536:	f003 fec1 	bl	80052bc <HAL_I2C_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001540:	f000 fa82 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000210 	.word	0x20000210
 800154c:	40005400 	.word	0x40005400
 8001550:	000186a0 	.word	0x000186a0

08001554 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <MX_I2S3_Init+0x54>)
 800155a:	4a14      	ldr	r2, [pc, #80]	; (80015ac <MX_I2S3_Init+0x58>)
 800155c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800155e:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <MX_I2S3_Init+0x54>)
 8001560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001564:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <MX_I2S3_Init+0x54>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800156c:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_I2S3_Init+0x54>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001572:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <MX_I2S3_Init+0x54>)
 8001574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001578:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <MX_I2S3_Init+0x54>)
 800157c:	4a0c      	ldr	r2, [pc, #48]	; (80015b0 <MX_I2S3_Init+0x5c>)
 800157e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_I2S3_Init+0x54>)
 8001582:	2200      	movs	r2, #0
 8001584:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <MX_I2S3_Init+0x54>)
 8001588:	2200      	movs	r2, #0
 800158a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_I2S3_Init+0x54>)
 800158e:	2200      	movs	r2, #0
 8001590:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_I2S3_Init+0x54>)
 8001594:	f004 feb6 	bl	8006304 <HAL_I2S_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800159e:	f000 fa53 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000264 	.word	0x20000264
 80015ac:	40003c00 	.word	0x40003c00
 80015b0:	00017700 	.word	0x00017700

080015b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015b8:	4b17      	ldr	r3, [pc, #92]	; (8001618 <MX_SPI1_Init+0x64>)
 80015ba:	4a18      	ldr	r2, [pc, #96]	; (800161c <MX_SPI1_Init+0x68>)
 80015bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015be:	4b16      	ldr	r3, [pc, #88]	; (8001618 <MX_SPI1_Init+0x64>)
 80015c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015c6:	4b14      	ldr	r3, [pc, #80]	; (8001618 <MX_SPI1_Init+0x64>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <MX_SPI1_Init+0x64>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_SPI1_Init+0x64>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <MX_SPI1_Init+0x64>)
 80015da:	2200      	movs	r2, #0
 80015dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <MX_SPI1_Init+0x64>)
 80015e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <MX_SPI1_Init+0x64>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ec:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <MX_SPI1_Init+0x64>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <MX_SPI1_Init+0x64>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015f8:	4b07      	ldr	r3, [pc, #28]	; (8001618 <MX_SPI1_Init+0x64>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <MX_SPI1_Init+0x64>)
 8001600:	220a      	movs	r2, #10
 8001602:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001604:	4804      	ldr	r0, [pc, #16]	; (8001618 <MX_SPI1_Init+0x64>)
 8001606:	f006 f8f7 	bl	80077f8 <HAL_SPI_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001610:	f000 fa1a 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200002ac 	.word	0x200002ac
 800161c:	40013000 	.word	0x40013000

08001620 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b096      	sub	sp, #88	; 0x58
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001626:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001634:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800163e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]
 800164e:	615a      	str	r2, [r3, #20]
 8001650:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2220      	movs	r2, #32
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f00c ffb0 	bl	800e5be <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800165e:	4b3f      	ldr	r3, [pc, #252]	; (800175c <MX_TIM1_Init+0x13c>)
 8001660:	4a3f      	ldr	r2, [pc, #252]	; (8001760 <MX_TIM1_Init+0x140>)
 8001662:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168;
 8001664:	4b3d      	ldr	r3, [pc, #244]	; (800175c <MX_TIM1_Init+0x13c>)
 8001666:	22a8      	movs	r2, #168	; 0xa8
 8001668:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166a:	4b3c      	ldr	r3, [pc, #240]	; (800175c <MX_TIM1_Init+0x13c>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001670:	4b3a      	ldr	r3, [pc, #232]	; (800175c <MX_TIM1_Init+0x13c>)
 8001672:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001676:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001678:	4b38      	ldr	r3, [pc, #224]	; (800175c <MX_TIM1_Init+0x13c>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800167e:	4b37      	ldr	r3, [pc, #220]	; (800175c <MX_TIM1_Init+0x13c>)
 8001680:	2200      	movs	r2, #0
 8001682:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001684:	4b35      	ldr	r3, [pc, #212]	; (800175c <MX_TIM1_Init+0x13c>)
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800168a:	4834      	ldr	r0, [pc, #208]	; (800175c <MX_TIM1_Init+0x13c>)
 800168c:	f006 f93d 	bl	800790a <HAL_TIM_Base_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001696:	f000 f9d7 	bl	8001a48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800169a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016a4:	4619      	mov	r1, r3
 80016a6:	482d      	ldr	r0, [pc, #180]	; (800175c <MX_TIM1_Init+0x13c>)
 80016a8:	f006 fb62 	bl	8007d70 <HAL_TIM_ConfigClockSource>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016b2:	f000 f9c9 	bl	8001a48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016b6:	4829      	ldr	r0, [pc, #164]	; (800175c <MX_TIM1_Init+0x13c>)
 80016b8:	f006 f976 	bl	80079a8 <HAL_TIM_PWM_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80016c2:	f000 f9c1 	bl	8001a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016d2:	4619      	mov	r1, r3
 80016d4:	4821      	ldr	r0, [pc, #132]	; (800175c <MX_TIM1_Init+0x13c>)
 80016d6:	f006 ff2f 	bl	8008538 <HAL_TIMEx_MasterConfigSynchronization>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80016e0:	f000 f9b2 	bl	8001a48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e4:	2360      	movs	r3, #96	; 0x60
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 80016e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016f2:	2300      	movs	r3, #0
 80016f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016fa:	2300      	movs	r3, #0
 80016fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016fe:	2300      	movs	r3, #0
 8001700:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001706:	2200      	movs	r2, #0
 8001708:	4619      	mov	r1, r3
 800170a:	4814      	ldr	r0, [pc, #80]	; (800175c <MX_TIM1_Init+0x13c>)
 800170c:	f006 fa6e 	bl	8007bec <HAL_TIM_PWM_ConfigChannel>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001716:	f000 f997 	bl	8001a48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800172e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001732:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	4619      	mov	r1, r3
 800173c:	4807      	ldr	r0, [pc, #28]	; (800175c <MX_TIM1_Init+0x13c>)
 800173e:	f006 ff77 	bl	8008630 <HAL_TIMEx_ConfigBreakDeadTime>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001748:	f000 f97e 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800174c:	4803      	ldr	r0, [pc, #12]	; (800175c <MX_TIM1_Init+0x13c>)
 800174e:	f000 fadb 	bl	8001d08 <HAL_TIM_MspPostInit>

}
 8001752:	bf00      	nop
 8001754:	3758      	adds	r7, #88	; 0x58
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000304 	.word	0x20000304
 8001760:	40010000 	.word	0x40010000

08001764 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_USART2_UART_Init+0x4c>)
 800176a:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <MX_USART2_UART_Init+0x50>)
 800176c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <MX_USART2_UART_Init+0x4c>)
 8001770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001774:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_USART2_UART_Init+0x4c>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_USART2_UART_Init+0x4c>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <MX_USART2_UART_Init+0x4c>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_USART2_UART_Init+0x4c>)
 800178a:	220c      	movs	r2, #12
 800178c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <MX_USART2_UART_Init+0x4c>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_USART2_UART_Init+0x4c>)
 8001796:	2200      	movs	r2, #0
 8001798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_USART2_UART_Init+0x4c>)
 800179c:	f006 ff9a 	bl	80086d4 <HAL_UART_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017a6:	f000 f94f 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	2000034c 	.word	0x2000034c
 80017b4:	40004400 	.word	0x40004400

080017b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <MX_USART3_UART_Init+0x4c>)
 80017be:	4a12      	ldr	r2, [pc, #72]	; (8001808 <MX_USART3_UART_Init+0x50>)
 80017c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <MX_USART3_UART_Init+0x4c>)
 80017c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <MX_USART3_UART_Init+0x4c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <MX_USART3_UART_Init+0x4c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <MX_USART3_UART_Init+0x4c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <MX_USART3_UART_Init+0x4c>)
 80017de:	220c      	movs	r2, #12
 80017e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <MX_USART3_UART_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <MX_USART3_UART_Init+0x4c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <MX_USART3_UART_Init+0x4c>)
 80017f0:	f006 ff70 	bl	80086d4 <HAL_UART_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017fa:	f000 f925 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000394 	.word	0x20000394
 8001808:	40004800 	.word	0x40004800

0800180c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <MX_DMA_Init+0x3c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <MX_DMA_Init+0x3c>)
 800181c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <MX_DMA_Init+0x3c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	200c      	movs	r0, #12
 8001834:	f000 fe39 	bl	80024aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001838:	200c      	movs	r0, #12
 800183a:	f000 fe52 	bl	80024e2 <HAL_NVIC_EnableIRQ>

}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800

0800184c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08c      	sub	sp, #48	; 0x30
 8001850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001852:	f107 031c 	add.w	r3, r7, #28
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]
 8001866:	4b72      	ldr	r3, [pc, #456]	; (8001a30 <MX_GPIO_Init+0x1e4>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a71      	ldr	r2, [pc, #452]	; (8001a30 <MX_GPIO_Init+0x1e4>)
 800186c:	f043 0310 	orr.w	r3, r3, #16
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b6f      	ldr	r3, [pc, #444]	; (8001a30 <MX_GPIO_Init+0x1e4>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0310 	and.w	r3, r3, #16
 800187a:	61bb      	str	r3, [r7, #24]
 800187c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	4b6b      	ldr	r3, [pc, #428]	; (8001a30 <MX_GPIO_Init+0x1e4>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a6a      	ldr	r2, [pc, #424]	; (8001a30 <MX_GPIO_Init+0x1e4>)
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b68      	ldr	r3, [pc, #416]	; (8001a30 <MX_GPIO_Init+0x1e4>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	4b64      	ldr	r3, [pc, #400]	; (8001a30 <MX_GPIO_Init+0x1e4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a63      	ldr	r2, [pc, #396]	; (8001a30 <MX_GPIO_Init+0x1e4>)
 80018a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b61      	ldr	r3, [pc, #388]	; (8001a30 <MX_GPIO_Init+0x1e4>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b5d      	ldr	r3, [pc, #372]	; (8001a30 <MX_GPIO_Init+0x1e4>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a5c      	ldr	r2, [pc, #368]	; (8001a30 <MX_GPIO_Init+0x1e4>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b5a      	ldr	r3, [pc, #360]	; (8001a30 <MX_GPIO_Init+0x1e4>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	4b56      	ldr	r3, [pc, #344]	; (8001a30 <MX_GPIO_Init+0x1e4>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a55      	ldr	r2, [pc, #340]	; (8001a30 <MX_GPIO_Init+0x1e4>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b53      	ldr	r3, [pc, #332]	; (8001a30 <MX_GPIO_Init+0x1e4>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	4b4f      	ldr	r3, [pc, #316]	; (8001a30 <MX_GPIO_Init+0x1e4>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a4e      	ldr	r2, [pc, #312]	; (8001a30 <MX_GPIO_Init+0x1e4>)
 80018f8:	f043 0308 	orr.w	r3, r3, #8
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b4c      	ldr	r3, [pc, #304]	; (8001a30 <MX_GPIO_Init+0x1e4>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800190a:	2200      	movs	r2, #0
 800190c:	2108      	movs	r1, #8
 800190e:	4849      	ldr	r0, [pc, #292]	; (8001a34 <MX_GPIO_Init+0x1e8>)
 8001910:	f001 fba0 	bl	8003054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001914:	2201      	movs	r2, #1
 8001916:	2101      	movs	r1, #1
 8001918:	4847      	ldr	r0, [pc, #284]	; (8001a38 <MX_GPIO_Init+0x1ec>)
 800191a:	f001 fb9b 	bl	8003054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800191e:	2200      	movs	r2, #0
 8001920:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001924:	4845      	ldr	r0, [pc, #276]	; (8001a3c <MX_GPIO_Init+0x1f0>)
 8001926:	f001 fb95 	bl	8003054 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800192a:	2308      	movs	r3, #8
 800192c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192e:	2301      	movs	r3, #1
 8001930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2300      	movs	r3, #0
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800193a:	f107 031c 	add.w	r3, r7, #28
 800193e:	4619      	mov	r1, r3
 8001940:	483c      	ldr	r0, [pc, #240]	; (8001a34 <MX_GPIO_Init+0x1e8>)
 8001942:	f001 f9eb 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001946:	2301      	movs	r3, #1
 8001948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194a:	2301      	movs	r3, #1
 800194c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2300      	movs	r3, #0
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001956:	f107 031c 	add.w	r3, r7, #28
 800195a:	4619      	mov	r1, r3
 800195c:	4836      	ldr	r0, [pc, #216]	; (8001a38 <MX_GPIO_Init+0x1ec>)
 800195e:	f001 f9dd 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001962:	2308      	movs	r3, #8
 8001964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	2300      	movs	r3, #0
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001972:	2305      	movs	r3, #5
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001976:	f107 031c 	add.w	r3, r7, #28
 800197a:	4619      	mov	r1, r3
 800197c:	482e      	ldr	r0, [pc, #184]	; (8001a38 <MX_GPIO_Init+0x1ec>)
 800197e:	f001 f9cd 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001982:	2301      	movs	r3, #1
 8001984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001986:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800198a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001990:	f107 031c 	add.w	r3, r7, #28
 8001994:	4619      	mov	r1, r3
 8001996:	482a      	ldr	r0, [pc, #168]	; (8001a40 <MX_GPIO_Init+0x1f4>)
 8001998:	f001 f9c0 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800199c:	2304      	movs	r3, #4
 800199e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a0:	2300      	movs	r3, #0
 80019a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80019a8:	f107 031c 	add.w	r3, r7, #28
 80019ac:	4619      	mov	r1, r3
 80019ae:	4825      	ldr	r0, [pc, #148]	; (8001a44 <MX_GPIO_Init+0x1f8>)
 80019b0:	f001 f9b4 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80019b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019c6:	2305      	movs	r3, #5
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80019ca:	f107 031c 	add.w	r3, r7, #28
 80019ce:	4619      	mov	r1, r3
 80019d0:	481c      	ldr	r0, [pc, #112]	; (8001a44 <MX_GPIO_Init+0x1f8>)
 80019d2:	f001 f9a3 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80019d6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80019da:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019dc:	2301      	movs	r3, #1
 80019de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	2300      	movs	r3, #0
 80019e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019e8:	f107 031c 	add.w	r3, r7, #28
 80019ec:	4619      	mov	r1, r3
 80019ee:	4813      	ldr	r0, [pc, #76]	; (8001a3c <MX_GPIO_Init+0x1f0>)
 80019f0:	f001 f994 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80019f4:	2320      	movs	r3, #32
 80019f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f8:	2300      	movs	r3, #0
 80019fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a00:	f107 031c 	add.w	r3, r7, #28
 8001a04:	4619      	mov	r1, r3
 8001a06:	480d      	ldr	r0, [pc, #52]	; (8001a3c <MX_GPIO_Init+0x1f0>)
 8001a08:	f001 f988 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a10:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4804      	ldr	r0, [pc, #16]	; (8001a34 <MX_GPIO_Init+0x1e8>)
 8001a22:	f001 f97b 	bl	8002d1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a26:	bf00      	nop
 8001a28:	3730      	adds	r7, #48	; 0x30
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40020800 	.word	0x40020800
 8001a3c:	40020c00 	.word	0x40020c00
 8001a40:	40020000 	.word	0x40020000
 8001a44:	40020400 	.word	0x40020400

08001a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a4c:	b672      	cpsid	i
}
 8001a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <Error_Handler+0x8>
	...

08001a54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <HAL_MspInit+0x4c>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	4a0f      	ldr	r2, [pc, #60]	; (8001aa0 <HAL_MspInit+0x4c>)
 8001a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a68:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <HAL_MspInit+0x4c>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_MspInit+0x4c>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	4a08      	ldr	r2, [pc, #32]	; (8001aa0 <HAL_MspInit+0x4c>)
 8001a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a84:	6413      	str	r3, [r2, #64]	; 0x40
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_MspInit+0x4c>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a92:	2007      	movs	r0, #7
 8001a94:	f000 fcfe 	bl	8002494 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40023800 	.word	0x40023800

08001aa4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a19      	ldr	r2, [pc, #100]	; (8001b28 <HAL_I2C_MspInit+0x84>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d12c      	bne.n	8001b20 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <HAL_I2C_MspInit+0x88>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a17      	ldr	r2, [pc, #92]	; (8001b2c <HAL_I2C_MspInit+0x88>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <HAL_I2C_MspInit+0x88>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001ae2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ae8:	2312      	movs	r3, #18
 8001aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aec:	2301      	movs	r3, #1
 8001aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2300      	movs	r3, #0
 8001af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001af4:	2304      	movs	r3, #4
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4619      	mov	r1, r3
 8001afe:	480c      	ldr	r0, [pc, #48]	; (8001b30 <HAL_I2C_MspInit+0x8c>)
 8001b00:	f001 f90c 	bl	8002d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <HAL_I2C_MspInit+0x88>)
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	4a07      	ldr	r2, [pc, #28]	; (8001b2c <HAL_I2C_MspInit+0x88>)
 8001b0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b12:	6413      	str	r3, [r2, #64]	; 0x40
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <HAL_I2C_MspInit+0x88>)
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b20:	bf00      	nop
 8001b22:	3728      	adds	r7, #40	; 0x28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40005400 	.word	0x40005400
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40020400 	.word	0x40020400

08001b34 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08e      	sub	sp, #56	; 0x38
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a31      	ldr	r2, [pc, #196]	; (8001c24 <HAL_I2S_MspInit+0xf0>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d15a      	bne.n	8001c1a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001b64:	2301      	movs	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001b68:	23c0      	movs	r3, #192	; 0xc0
 8001b6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	4618      	mov	r0, r3
 8001b76:	f005 fcfd 	bl	8007574 <HAL_RCCEx_PeriphCLKConfig>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001b80:	f7ff ff62 	bl	8001a48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b84:	2300      	movs	r3, #0
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <HAL_I2S_MspInit+0xf4>)
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	4a26      	ldr	r2, [pc, #152]	; (8001c28 <HAL_I2S_MspInit+0xf4>)
 8001b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b92:	6413      	str	r3, [r2, #64]	; 0x40
 8001b94:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <HAL_I2S_MspInit+0xf4>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <HAL_I2S_MspInit+0xf4>)
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	4a1f      	ldr	r2, [pc, #124]	; (8001c28 <HAL_I2S_MspInit+0xf4>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <HAL_I2S_MspInit+0xf4>)
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <HAL_I2S_MspInit+0xf4>)
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc4:	4a18      	ldr	r2, [pc, #96]	; (8001c28 <HAL_I2S_MspInit+0xf4>)
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	6313      	str	r3, [r2, #48]	; 0x30
 8001bcc:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <HAL_I2S_MspInit+0xf4>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001bd8:	2310      	movs	r3, #16
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001be8:	2306      	movs	r3, #6
 8001bea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	480e      	ldr	r0, [pc, #56]	; (8001c2c <HAL_I2S_MspInit+0xf8>)
 8001bf4:	f001 f892 	bl	8002d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001bf8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2300      	movs	r3, #0
 8001c08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c0a:	2306      	movs	r3, #6
 8001c0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c12:	4619      	mov	r1, r3
 8001c14:	4806      	ldr	r0, [pc, #24]	; (8001c30 <HAL_I2S_MspInit+0xfc>)
 8001c16:	f001 f881 	bl	8002d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c1a:	bf00      	nop
 8001c1c:	3738      	adds	r7, #56	; 0x38
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40003c00 	.word	0x40003c00
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40020000 	.word	0x40020000
 8001c30:	40020800 	.word	0x40020800

08001c34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a19      	ldr	r2, [pc, #100]	; (8001cb8 <HAL_SPI_MspInit+0x84>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d12b      	bne.n	8001cae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <HAL_SPI_MspInit+0x88>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	4a17      	ldr	r2, [pc, #92]	; (8001cbc <HAL_SPI_MspInit+0x88>)
 8001c60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c64:	6453      	str	r3, [r2, #68]	; 0x44
 8001c66:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <HAL_SPI_MspInit+0x88>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <HAL_SPI_MspInit+0x88>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a10      	ldr	r2, [pc, #64]	; (8001cbc <HAL_SPI_MspInit+0x88>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <HAL_SPI_MspInit+0x88>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001c8e:	23e0      	movs	r3, #224	; 0xe0
 8001c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c9e:	2305      	movs	r3, #5
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <HAL_SPI_MspInit+0x8c>)
 8001caa:	f001 f837 	bl	8002d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001cae:	bf00      	nop
 8001cb0:	3728      	adds	r7, #40	; 0x28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40013000 	.word	0x40013000
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40020000 	.word	0x40020000

08001cc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <HAL_TIM_Base_MspInit+0x3c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d10d      	bne.n	8001cf2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <HAL_TIM_Base_MspInit+0x40>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	4a09      	ldr	r2, [pc, #36]	; (8001d04 <HAL_TIM_Base_MspInit+0x40>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce6:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <HAL_TIM_Base_MspInit+0x40>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40010000 	.word	0x40010000
 8001d04:	40023800 	.word	0x40023800

08001d08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <HAL_TIM_MspPostInit+0x68>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d11e      	bne.n	8001d68 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <HAL_TIM_MspPostInit+0x6c>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a10      	ldr	r2, [pc, #64]	; (8001d74 <HAL_TIM_MspPostInit+0x6c>)
 8001d34:	f043 0310 	orr.w	r3, r3, #16
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <HAL_TIM_MspPostInit+0x6c>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0310 	and.w	r3, r3, #16
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d4a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d5c:	f107 030c 	add.w	r3, r7, #12
 8001d60:	4619      	mov	r1, r3
 8001d62:	4805      	ldr	r0, [pc, #20]	; (8001d78 <HAL_TIM_MspPostInit+0x70>)
 8001d64:	f000 ffda 	bl	8002d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d68:	bf00      	nop
 8001d6a:	3720      	adds	r7, #32
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40010000 	.word	0x40010000
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40021000 	.word	0x40021000

08001d7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08c      	sub	sp, #48	; 0x30
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 031c 	add.w	r3, r7, #28
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a5e      	ldr	r2, [pc, #376]	; (8001f14 <HAL_UART_MspInit+0x198>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d12c      	bne.n	8001df8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61bb      	str	r3, [r7, #24]
 8001da2:	4b5d      	ldr	r3, [pc, #372]	; (8001f18 <HAL_UART_MspInit+0x19c>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	4a5c      	ldr	r2, [pc, #368]	; (8001f18 <HAL_UART_MspInit+0x19c>)
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dac:	6413      	str	r3, [r2, #64]	; 0x40
 8001dae:	4b5a      	ldr	r3, [pc, #360]	; (8001f18 <HAL_UART_MspInit+0x19c>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	61bb      	str	r3, [r7, #24]
 8001db8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	4b56      	ldr	r3, [pc, #344]	; (8001f18 <HAL_UART_MspInit+0x19c>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a55      	ldr	r2, [pc, #340]	; (8001f18 <HAL_UART_MspInit+0x19c>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b53      	ldr	r3, [pc, #332]	; (8001f18 <HAL_UART_MspInit+0x19c>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dd6:	230c      	movs	r3, #12
 8001dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de2:	2303      	movs	r3, #3
 8001de4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001de6:	2307      	movs	r3, #7
 8001de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dea:	f107 031c 	add.w	r3, r7, #28
 8001dee:	4619      	mov	r1, r3
 8001df0:	484a      	ldr	r0, [pc, #296]	; (8001f1c <HAL_UART_MspInit+0x1a0>)
 8001df2:	f000 ff93 	bl	8002d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001df6:	e088      	b.n	8001f0a <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART3)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a48      	ldr	r2, [pc, #288]	; (8001f20 <HAL_UART_MspInit+0x1a4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	f040 8083 	bne.w	8001f0a <HAL_UART_MspInit+0x18e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e04:	2300      	movs	r3, #0
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	4b43      	ldr	r3, [pc, #268]	; (8001f18 <HAL_UART_MspInit+0x19c>)
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	4a42      	ldr	r2, [pc, #264]	; (8001f18 <HAL_UART_MspInit+0x19c>)
 8001e0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e12:	6413      	str	r3, [r2, #64]	; 0x40
 8001e14:	4b40      	ldr	r3, [pc, #256]	; (8001f18 <HAL_UART_MspInit+0x19c>)
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	4b3c      	ldr	r3, [pc, #240]	; (8001f18 <HAL_UART_MspInit+0x19c>)
 8001e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e28:	4a3b      	ldr	r2, [pc, #236]	; (8001f18 <HAL_UART_MspInit+0x19c>)
 8001e2a:	f043 0302 	orr.w	r3, r3, #2
 8001e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e30:	4b39      	ldr	r3, [pc, #228]	; (8001f18 <HAL_UART_MspInit+0x19c>)
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	4b35      	ldr	r3, [pc, #212]	; (8001f18 <HAL_UART_MspInit+0x19c>)
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	4a34      	ldr	r2, [pc, #208]	; (8001f18 <HAL_UART_MspInit+0x19c>)
 8001e46:	f043 0308 	orr.w	r3, r3, #8
 8001e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4c:	4b32      	ldr	r3, [pc, #200]	; (8001f18 <HAL_UART_MspInit+0x19c>)
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e66:	2303      	movs	r3, #3
 8001e68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e6a:	2307      	movs	r3, #7
 8001e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6e:	f107 031c 	add.w	r3, r7, #28
 8001e72:	4619      	mov	r1, r3
 8001e74:	482b      	ldr	r0, [pc, #172]	; (8001f24 <HAL_UART_MspInit+0x1a8>)
 8001e76:	f000 ff51 	bl	8002d1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e8c:	2307      	movs	r3, #7
 8001e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e90:	f107 031c 	add.w	r3, r7, #28
 8001e94:	4619      	mov	r1, r3
 8001e96:	4824      	ldr	r0, [pc, #144]	; (8001f28 <HAL_UART_MspInit+0x1ac>)
 8001e98:	f000 ff40 	bl	8002d1c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001e9c:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <HAL_UART_MspInit+0x1b0>)
 8001e9e:	4a24      	ldr	r2, [pc, #144]	; (8001f30 <HAL_UART_MspInit+0x1b4>)
 8001ea0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001ea2:	4b22      	ldr	r3, [pc, #136]	; (8001f2c <HAL_UART_MspInit+0x1b0>)
 8001ea4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ea8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eaa:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <HAL_UART_MspInit+0x1b0>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eb0:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <HAL_UART_MspInit+0x1b0>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <HAL_UART_MspInit+0x1b0>)
 8001eb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ebc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ebe:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <HAL_UART_MspInit+0x1b0>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ec4:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_UART_MspInit+0x1b0>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001eca:	4b18      	ldr	r3, [pc, #96]	; (8001f2c <HAL_UART_MspInit+0x1b0>)
 8001ecc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ed0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ed2:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <HAL_UART_MspInit+0x1b0>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ed8:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <HAL_UART_MspInit+0x1b0>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001ede:	4813      	ldr	r0, [pc, #76]	; (8001f2c <HAL_UART_MspInit+0x1b0>)
 8001ee0:	f000 fb1a 	bl	8002518 <HAL_DMA_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_UART_MspInit+0x172>
      Error_Handler();
 8001eea:	f7ff fdad 	bl	8001a48 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <HAL_UART_MspInit+0x1b0>)
 8001ef2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ef4:	4a0d      	ldr	r2, [pc, #52]	; (8001f2c <HAL_UART_MspInit+0x1b0>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2100      	movs	r1, #0
 8001efe:	2027      	movs	r0, #39	; 0x27
 8001f00:	f000 fad3 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f04:	2027      	movs	r0, #39	; 0x27
 8001f06:	f000 faec 	bl	80024e2 <HAL_NVIC_EnableIRQ>
}
 8001f0a:	bf00      	nop
 8001f0c:	3730      	adds	r7, #48	; 0x30
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40004400 	.word	0x40004400
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40020000 	.word	0x40020000
 8001f20:	40004800 	.word	0x40004800
 8001f24:	40020400 	.word	0x40020400
 8001f28:	40020c00 	.word	0x40020c00
 8001f2c:	200003dc 	.word	0x200003dc
 8001f30:	40026028 	.word	0x40026028

08001f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f38:	e7fe      	b.n	8001f38 <NMI_Handler+0x4>

08001f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f3e:	e7fe      	b.n	8001f3e <HardFault_Handler+0x4>

08001f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <MemManage_Handler+0x4>

08001f46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f4a:	e7fe      	b.n	8001f4a <BusFault_Handler+0x4>

08001f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <UsageFault_Handler+0x4>

08001f52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f80:	f000 f974 	bl	800226c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001f8c:	4802      	ldr	r0, [pc, #8]	; (8001f98 <DMA1_Stream1_IRQHandler+0x10>)
 8001f8e:	f000 fc5b 	bl	8002848 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	200003dc 	.word	0x200003dc

08001f9c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001fa0:	4802      	ldr	r0, [pc, #8]	; (8001fac <USART3_IRQHandler+0x10>)
 8001fa2:	f006 fc97 	bl	80088d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000394 	.word	0x20000394

08001fb0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <OTG_FS_IRQHandler+0x10>)
 8001fb6:	f001 fb47 	bl	8003648 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000ca0 	.word	0x20000ca0

08001fc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return 1;
 8001fc8:	2301      	movs	r3, #1
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <_kill>:

int _kill(int pid, int sig)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fde:	f00c fb93 	bl	800e708 <__errno>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2216      	movs	r2, #22
 8001fe6:	601a      	str	r2, [r3, #0]
  return -1;
 8001fe8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <_exit>:

void _exit (int status)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff ffe7 	bl	8001fd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002006:	e7fe      	b.n	8002006 <_exit+0x12>

08002008 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	e00a      	b.n	8002030 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800201a:	f3af 8000 	nop.w
 800201e:	4601      	mov	r1, r0
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	60ba      	str	r2, [r7, #8]
 8002026:	b2ca      	uxtb	r2, r1
 8002028:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	3301      	adds	r3, #1
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	429a      	cmp	r2, r3
 8002036:	dbf0      	blt.n	800201a <_read+0x12>
  }

  return len;
 8002038:	687b      	ldr	r3, [r7, #4]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b086      	sub	sp, #24
 8002046:	af00      	add	r7, sp, #0
 8002048:	60f8      	str	r0, [r7, #12]
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	e009      	b.n	8002068 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	60ba      	str	r2, [r7, #8]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	3301      	adds	r3, #1
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	429a      	cmp	r2, r3
 800206e:	dbf1      	blt.n	8002054 <_write+0x12>
  }
  return len;
 8002070:	687b      	ldr	r3, [r7, #4]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <_close>:

int _close(int file)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002082:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020a2:	605a      	str	r2, [r3, #4]
  return 0;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <_isatty>:

int _isatty(int file)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020ba:	2301      	movs	r3, #1
}
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020ec:	4a14      	ldr	r2, [pc, #80]	; (8002140 <_sbrk+0x5c>)
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <_sbrk+0x60>)
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020f8:	4b13      	ldr	r3, [pc, #76]	; (8002148 <_sbrk+0x64>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d102      	bne.n	8002106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <_sbrk+0x64>)
 8002102:	4a12      	ldr	r2, [pc, #72]	; (800214c <_sbrk+0x68>)
 8002104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <_sbrk+0x64>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	429a      	cmp	r2, r3
 8002112:	d207      	bcs.n	8002124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002114:	f00c faf8 	bl	800e708 <__errno>
 8002118:	4603      	mov	r3, r0
 800211a:	220c      	movs	r2, #12
 800211c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800211e:	f04f 33ff 	mov.w	r3, #4294967295
 8002122:	e009      	b.n	8002138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <_sbrk+0x64>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800212a:	4b07      	ldr	r3, [pc, #28]	; (8002148 <_sbrk+0x64>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	4a05      	ldr	r2, [pc, #20]	; (8002148 <_sbrk+0x64>)
 8002134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002136:	68fb      	ldr	r3, [r7, #12]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20020000 	.word	0x20020000
 8002144:	00000400 	.word	0x00000400
 8002148:	200008bc 	.word	0x200008bc
 800214c:	200011d0 	.word	0x200011d0

08002150 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <SystemInit+0x20>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215a:	4a05      	ldr	r2, [pc, #20]	; (8002170 <SystemInit+0x20>)
 800215c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002178:	f7ff ffea 	bl	8002150 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800217c:	480c      	ldr	r0, [pc, #48]	; (80021b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800217e:	490d      	ldr	r1, [pc, #52]	; (80021b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002180:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002184:	e002      	b.n	800218c <LoopCopyDataInit>

08002186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218a:	3304      	adds	r3, #4

0800218c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800218c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002190:	d3f9      	bcc.n	8002186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002192:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002194:	4c0a      	ldr	r4, [pc, #40]	; (80021c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002198:	e001      	b.n	800219e <LoopFillZerobss>

0800219a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800219c:	3204      	adds	r2, #4

0800219e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a0:	d3fb      	bcc.n	800219a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021a2:	f00c fab7 	bl	800e714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021a6:	f7ff f85f 	bl	8001268 <main>
  bx  lr    
 80021aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b4:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80021b8:	08012a74 	.word	0x08012a74
  ldr r2, =_sbss
 80021bc:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80021c0:	200011cc 	.word	0x200011cc

080021c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c4:	e7fe      	b.n	80021c4 <ADC_IRQHandler>
	...

080021c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021cc:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <HAL_Init+0x40>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a0d      	ldr	r2, [pc, #52]	; (8002208 <HAL_Init+0x40>)
 80021d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_Init+0x40>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <HAL_Init+0x40>)
 80021de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e4:	4b08      	ldr	r3, [pc, #32]	; (8002208 <HAL_Init+0x40>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a07      	ldr	r2, [pc, #28]	; (8002208 <HAL_Init+0x40>)
 80021ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f0:	2003      	movs	r0, #3
 80021f2:	f000 f94f 	bl	8002494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021f6:	2000      	movs	r0, #0
 80021f8:	f000 f808 	bl	800220c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021fc:	f7ff fc2a 	bl	8001a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40023c00 	.word	0x40023c00

0800220c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002214:	4b12      	ldr	r3, [pc, #72]	; (8002260 <HAL_InitTick+0x54>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_InitTick+0x58>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	4619      	mov	r1, r3
 800221e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002222:	fbb3 f3f1 	udiv	r3, r3, r1
 8002226:	fbb2 f3f3 	udiv	r3, r2, r3
 800222a:	4618      	mov	r0, r3
 800222c:	f000 f967 	bl	80024fe <HAL_SYSTICK_Config>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e00e      	b.n	8002258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b0f      	cmp	r3, #15
 800223e:	d80a      	bhi.n	8002256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002240:	2200      	movs	r2, #0
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	f04f 30ff 	mov.w	r0, #4294967295
 8002248:	f000 f92f 	bl	80024aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800224c:	4a06      	ldr	r2, [pc, #24]	; (8002268 <HAL_InitTick+0x5c>)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	e000      	b.n	8002258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
}
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000000 	.word	0x20000000
 8002264:	20000008 	.word	0x20000008
 8002268:	20000004 	.word	0x20000004

0800226c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_IncTick+0x20>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	461a      	mov	r2, r3
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_IncTick+0x24>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4413      	add	r3, r2
 800227c:	4a04      	ldr	r2, [pc, #16]	; (8002290 <HAL_IncTick+0x24>)
 800227e:	6013      	str	r3, [r2, #0]
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	20000008 	.word	0x20000008
 8002290:	200008c0 	.word	0x200008c0

08002294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return uwTick;
 8002298:	4b03      	ldr	r3, [pc, #12]	; (80022a8 <HAL_GetTick+0x14>)
 800229a:	681b      	ldr	r3, [r3, #0]
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	200008c0 	.word	0x200008c0

080022ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b4:	f7ff ffee 	bl	8002294 <HAL_GetTick>
 80022b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c4:	d005      	beq.n	80022d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022c6:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <HAL_Delay+0x44>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4413      	add	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022d2:	bf00      	nop
 80022d4:	f7ff ffde 	bl	8002294 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d8f7      	bhi.n	80022d4 <HAL_Delay+0x28>
  {
  }
}
 80022e4:	bf00      	nop
 80022e6:	bf00      	nop
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000008 	.word	0x20000008

080022f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002304:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002310:	4013      	ands	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800231c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002326:	4a04      	ldr	r2, [pc, #16]	; (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	60d3      	str	r3, [r2, #12]
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <__NVIC_GetPriorityGrouping+0x18>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	0a1b      	lsrs	r3, r3, #8
 8002346:	f003 0307 	and.w	r3, r3, #7
}
 800234a:	4618      	mov	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	2b00      	cmp	r3, #0
 8002368:	db0b      	blt.n	8002382 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	f003 021f 	and.w	r2, r3, #31
 8002370:	4907      	ldr	r1, [pc, #28]	; (8002390 <__NVIC_EnableIRQ+0x38>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	2001      	movs	r0, #1
 800237a:	fa00 f202 	lsl.w	r2, r0, r2
 800237e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000e100 	.word	0xe000e100

08002394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	db0a      	blt.n	80023be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	490c      	ldr	r1, [pc, #48]	; (80023e0 <__NVIC_SetPriority+0x4c>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	0112      	lsls	r2, r2, #4
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	440b      	add	r3, r1
 80023b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023bc:	e00a      	b.n	80023d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4908      	ldr	r1, [pc, #32]	; (80023e4 <__NVIC_SetPriority+0x50>)
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	3b04      	subs	r3, #4
 80023cc:	0112      	lsls	r2, r2, #4
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	440b      	add	r3, r1
 80023d2:	761a      	strb	r2, [r3, #24]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000e100 	.word	0xe000e100
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	; 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f1c3 0307 	rsb	r3, r3, #7
 8002402:	2b04      	cmp	r3, #4
 8002404:	bf28      	it	cs
 8002406:	2304      	movcs	r3, #4
 8002408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3304      	adds	r3, #4
 800240e:	2b06      	cmp	r3, #6
 8002410:	d902      	bls.n	8002418 <NVIC_EncodePriority+0x30>
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3b03      	subs	r3, #3
 8002416:	e000      	b.n	800241a <NVIC_EncodePriority+0x32>
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	f04f 32ff 	mov.w	r2, #4294967295
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	401a      	ands	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002430:	f04f 31ff 	mov.w	r1, #4294967295
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	43d9      	mvns	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	4313      	orrs	r3, r2
         );
}
 8002442:	4618      	mov	r0, r3
 8002444:	3724      	adds	r7, #36	; 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002460:	d301      	bcc.n	8002466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002462:	2301      	movs	r3, #1
 8002464:	e00f      	b.n	8002486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002466:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <SysTick_Config+0x40>)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3b01      	subs	r3, #1
 800246c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800246e:	210f      	movs	r1, #15
 8002470:	f04f 30ff 	mov.w	r0, #4294967295
 8002474:	f7ff ff8e 	bl	8002394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <SysTick_Config+0x40>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247e:	4b04      	ldr	r3, [pc, #16]	; (8002490 <SysTick_Config+0x40>)
 8002480:	2207      	movs	r2, #7
 8002482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	e000e010 	.word	0xe000e010

08002494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff ff29 	bl	80022f4 <__NVIC_SetPriorityGrouping>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b086      	sub	sp, #24
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4603      	mov	r3, r0
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
 80024b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024bc:	f7ff ff3e 	bl	800233c <__NVIC_GetPriorityGrouping>
 80024c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68b9      	ldr	r1, [r7, #8]
 80024c6:	6978      	ldr	r0, [r7, #20]
 80024c8:	f7ff ff8e 	bl	80023e8 <NVIC_EncodePriority>
 80024cc:	4602      	mov	r2, r0
 80024ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d2:	4611      	mov	r1, r2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff5d 	bl	8002394 <__NVIC_SetPriority>
}
 80024da:	bf00      	nop
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff31 	bl	8002358 <__NVIC_EnableIRQ>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff ffa2 	bl	8002450 <SysTick_Config>
 800250c:	4603      	mov	r3, r0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002524:	f7ff feb6 	bl	8002294 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e099      	b.n	8002668 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0201 	bic.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002554:	e00f      	b.n	8002576 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002556:	f7ff fe9d 	bl	8002294 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b05      	cmp	r3, #5
 8002562:	d908      	bls.n	8002576 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2220      	movs	r2, #32
 8002568:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2203      	movs	r2, #3
 800256e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e078      	b.n	8002668 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1e8      	bne.n	8002556 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	4b38      	ldr	r3, [pc, #224]	; (8002670 <HAL_DMA_Init+0x158>)
 8002590:	4013      	ands	r3, r2
 8002592:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d107      	bne.n	80025e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	4313      	orrs	r3, r2
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	4313      	orrs	r3, r2
 80025de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f023 0307 	bic.w	r3, r3, #7
 80025f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	4313      	orrs	r3, r2
 8002600:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	2b04      	cmp	r3, #4
 8002608:	d117      	bne.n	800263a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00e      	beq.n	800263a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 fb01 	bl	8002c24 <DMA_CheckFifoParam>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2240      	movs	r2, #64	; 0x40
 800262c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002636:	2301      	movs	r3, #1
 8002638:	e016      	b.n	8002668 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fab8 	bl	8002bb8 <DMA_CalcBaseAndBitshift>
 8002648:	4603      	mov	r3, r0
 800264a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	223f      	movs	r2, #63	; 0x3f
 8002652:	409a      	lsls	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	f010803f 	.word	0xf010803f

08002674 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_DMA_Start_IT+0x26>
 8002696:	2302      	movs	r3, #2
 8002698:	e040      	b.n	800271c <HAL_DMA_Start_IT+0xa8>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d12f      	bne.n	800270e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2202      	movs	r2, #2
 80026b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	68b9      	ldr	r1, [r7, #8]
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 fa4a 	bl	8002b5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026cc:	223f      	movs	r2, #63	; 0x3f
 80026ce:	409a      	lsls	r2, r3
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0216 	orr.w	r2, r2, #22
 80026e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d007      	beq.n	80026fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 0208 	orr.w	r2, r2, #8
 80026fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	e005      	b.n	800271a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002716:	2302      	movs	r3, #2
 8002718:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800271a:	7dfb      	ldrb	r3, [r7, #23]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002730:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002732:	f7ff fdaf 	bl	8002294 <HAL_GetTick>
 8002736:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d008      	beq.n	8002756 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2280      	movs	r2, #128	; 0x80
 8002748:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e052      	b.n	80027fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0216 	bic.w	r2, r2, #22
 8002764:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695a      	ldr	r2, [r3, #20]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002774:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	2b00      	cmp	r3, #0
 800277c:	d103      	bne.n	8002786 <HAL_DMA_Abort+0x62>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002782:	2b00      	cmp	r3, #0
 8002784:	d007      	beq.n	8002796 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0208 	bic.w	r2, r2, #8
 8002794:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0201 	bic.w	r2, r2, #1
 80027a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027a6:	e013      	b.n	80027d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027a8:	f7ff fd74 	bl	8002294 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b05      	cmp	r3, #5
 80027b4:	d90c      	bls.n	80027d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2220      	movs	r2, #32
 80027ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2203      	movs	r2, #3
 80027c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e015      	b.n	80027fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1e4      	bne.n	80027a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e2:	223f      	movs	r2, #63	; 0x3f
 80027e4:	409a      	lsls	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d004      	beq.n	8002822 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2280      	movs	r2, #128	; 0x80
 800281c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e00c      	b.n	800283c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2205      	movs	r2, #5
 8002826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0201 	bic.w	r2, r2, #1
 8002838:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002854:	4b8e      	ldr	r3, [pc, #568]	; (8002a90 <HAL_DMA_IRQHandler+0x248>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a8e      	ldr	r2, [pc, #568]	; (8002a94 <HAL_DMA_IRQHandler+0x24c>)
 800285a:	fba2 2303 	umull	r2, r3, r2, r3
 800285e:	0a9b      	lsrs	r3, r3, #10
 8002860:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002866:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002872:	2208      	movs	r2, #8
 8002874:	409a      	lsls	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4013      	ands	r3, r2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d01a      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d013      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0204 	bic.w	r2, r2, #4
 800289a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a0:	2208      	movs	r2, #8
 80028a2:	409a      	lsls	r2, r3
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ac:	f043 0201 	orr.w	r2, r3, #1
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b8:	2201      	movs	r2, #1
 80028ba:	409a      	lsls	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4013      	ands	r3, r2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d012      	beq.n	80028ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00b      	beq.n	80028ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d6:	2201      	movs	r2, #1
 80028d8:	409a      	lsls	r2, r3
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e2:	f043 0202 	orr.w	r2, r3, #2
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ee:	2204      	movs	r2, #4
 80028f0:	409a      	lsls	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4013      	ands	r3, r2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d012      	beq.n	8002920 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00b      	beq.n	8002920 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290c:	2204      	movs	r2, #4
 800290e:	409a      	lsls	r2, r3
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002918:	f043 0204 	orr.w	r2, r3, #4
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002924:	2210      	movs	r2, #16
 8002926:	409a      	lsls	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4013      	ands	r3, r2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d043      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b00      	cmp	r3, #0
 800293c:	d03c      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002942:	2210      	movs	r2, #16
 8002944:	409a      	lsls	r2, r3
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d018      	beq.n	800298a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d108      	bne.n	8002978 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	2b00      	cmp	r3, #0
 800296c:	d024      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	4798      	blx	r3
 8002976:	e01f      	b.n	80029b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800297c:	2b00      	cmp	r3, #0
 800297e:	d01b      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	4798      	blx	r3
 8002988:	e016      	b.n	80029b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002994:	2b00      	cmp	r3, #0
 8002996:	d107      	bne.n	80029a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0208 	bic.w	r2, r2, #8
 80029a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029bc:	2220      	movs	r2, #32
 80029be:	409a      	lsls	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 808f 	beq.w	8002ae8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0310 	and.w	r3, r3, #16
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 8087 	beq.w	8002ae8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029de:	2220      	movs	r2, #32
 80029e0:	409a      	lsls	r2, r3
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b05      	cmp	r3, #5
 80029f0:	d136      	bne.n	8002a60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0216 	bic.w	r2, r2, #22
 8002a00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695a      	ldr	r2, [r3, #20]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d103      	bne.n	8002a22 <HAL_DMA_IRQHandler+0x1da>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d007      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0208 	bic.w	r2, r2, #8
 8002a30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a36:	223f      	movs	r2, #63	; 0x3f
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d07e      	beq.n	8002b54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	4798      	blx	r3
        }
        return;
 8002a5e:	e079      	b.n	8002b54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d01d      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10d      	bne.n	8002a98 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d031      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	4798      	blx	r3
 8002a8c:	e02c      	b.n	8002ae8 <HAL_DMA_IRQHandler+0x2a0>
 8002a8e:	bf00      	nop
 8002a90:	20000000 	.word	0x20000000
 8002a94:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d023      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	4798      	blx	r3
 8002aa8:	e01e      	b.n	8002ae8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10f      	bne.n	8002ad8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0210 	bic.w	r2, r2, #16
 8002ac6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d032      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d022      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2205      	movs	r2, #5
 8002b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0201 	bic.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	3301      	adds	r3, #1
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d307      	bcc.n	8002b30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f2      	bne.n	8002b14 <HAL_DMA_IRQHandler+0x2cc>
 8002b2e:	e000      	b.n	8002b32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d005      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	4798      	blx	r3
 8002b52:	e000      	b.n	8002b56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b54:	bf00      	nop
    }
  }
}
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
 8002b68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b40      	cmp	r3, #64	; 0x40
 8002b88:	d108      	bne.n	8002b9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b9a:	e007      	b.n	8002bac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	60da      	str	r2, [r3, #12]
}
 8002bac:	bf00      	nop
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	3b10      	subs	r3, #16
 8002bc8:	4a14      	ldr	r2, [pc, #80]	; (8002c1c <DMA_CalcBaseAndBitshift+0x64>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	091b      	lsrs	r3, r3, #4
 8002bd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bd2:	4a13      	ldr	r2, [pc, #76]	; (8002c20 <DMA_CalcBaseAndBitshift+0x68>)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d909      	bls.n	8002bfa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bee:	f023 0303 	bic.w	r3, r3, #3
 8002bf2:	1d1a      	adds	r2, r3, #4
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	659a      	str	r2, [r3, #88]	; 0x58
 8002bf8:	e007      	b.n	8002c0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c02:	f023 0303 	bic.w	r3, r3, #3
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	aaaaaaab 	.word	0xaaaaaaab
 8002c20:	08012614 	.word	0x08012614

08002c24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d11f      	bne.n	8002c7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	d856      	bhi.n	8002cf2 <DMA_CheckFifoParam+0xce>
 8002c44:	a201      	add	r2, pc, #4	; (adr r2, 8002c4c <DMA_CheckFifoParam+0x28>)
 8002c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4a:	bf00      	nop
 8002c4c:	08002c5d 	.word	0x08002c5d
 8002c50:	08002c6f 	.word	0x08002c6f
 8002c54:	08002c5d 	.word	0x08002c5d
 8002c58:	08002cf3 	.word	0x08002cf3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d046      	beq.n	8002cf6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c6c:	e043      	b.n	8002cf6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c76:	d140      	bne.n	8002cfa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c7c:	e03d      	b.n	8002cfa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c86:	d121      	bne.n	8002ccc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	d837      	bhi.n	8002cfe <DMA_CheckFifoParam+0xda>
 8002c8e:	a201      	add	r2, pc, #4	; (adr r2, 8002c94 <DMA_CheckFifoParam+0x70>)
 8002c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c94:	08002ca5 	.word	0x08002ca5
 8002c98:	08002cab 	.word	0x08002cab
 8002c9c:	08002ca5 	.word	0x08002ca5
 8002ca0:	08002cbd 	.word	0x08002cbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca8:	e030      	b.n	8002d0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d025      	beq.n	8002d02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cba:	e022      	b.n	8002d02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cc4:	d11f      	bne.n	8002d06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cca:	e01c      	b.n	8002d06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d903      	bls.n	8002cda <DMA_CheckFifoParam+0xb6>
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d003      	beq.n	8002ce0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cd8:	e018      	b.n	8002d0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
      break;
 8002cde:	e015      	b.n	8002d0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00e      	beq.n	8002d0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf0:	e00b      	b.n	8002d0a <DMA_CheckFifoParam+0xe6>
      break;
 8002cf2:	bf00      	nop
 8002cf4:	e00a      	b.n	8002d0c <DMA_CheckFifoParam+0xe8>
      break;
 8002cf6:	bf00      	nop
 8002cf8:	e008      	b.n	8002d0c <DMA_CheckFifoParam+0xe8>
      break;
 8002cfa:	bf00      	nop
 8002cfc:	e006      	b.n	8002d0c <DMA_CheckFifoParam+0xe8>
      break;
 8002cfe:	bf00      	nop
 8002d00:	e004      	b.n	8002d0c <DMA_CheckFifoParam+0xe8>
      break;
 8002d02:	bf00      	nop
 8002d04:	e002      	b.n	8002d0c <DMA_CheckFifoParam+0xe8>
      break;   
 8002d06:	bf00      	nop
 8002d08:	e000      	b.n	8002d0c <DMA_CheckFifoParam+0xe8>
      break;
 8002d0a:	bf00      	nop
    }
  } 
  
  return status; 
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop

08002d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b089      	sub	sp, #36	; 0x24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d32:	2300      	movs	r3, #0
 8002d34:	61fb      	str	r3, [r7, #28]
 8002d36:	e16b      	b.n	8003010 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d38:	2201      	movs	r2, #1
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	f040 815a 	bne.w	800300a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d005      	beq.n	8002d6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d130      	bne.n	8002dd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	2203      	movs	r2, #3
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68da      	ldr	r2, [r3, #12]
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002da4:	2201      	movs	r2, #1
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	091b      	lsrs	r3, r3, #4
 8002dba:	f003 0201 	and.w	r2, r3, #1
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	2b03      	cmp	r3, #3
 8002dda:	d017      	beq.n	8002e0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	2203      	movs	r2, #3
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d123      	bne.n	8002e60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	08da      	lsrs	r2, r3, #3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3208      	adds	r2, #8
 8002e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	220f      	movs	r2, #15
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	08da      	lsrs	r2, r3, #3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3208      	adds	r2, #8
 8002e5a:	69b9      	ldr	r1, [r7, #24]
 8002e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 0203 	and.w	r2, r3, #3
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80b4 	beq.w	800300a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	4b60      	ldr	r3, [pc, #384]	; (8003028 <HAL_GPIO_Init+0x30c>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	4a5f      	ldr	r2, [pc, #380]	; (8003028 <HAL_GPIO_Init+0x30c>)
 8002eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002eb2:	4b5d      	ldr	r3, [pc, #372]	; (8003028 <HAL_GPIO_Init+0x30c>)
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ebe:	4a5b      	ldr	r2, [pc, #364]	; (800302c <HAL_GPIO_Init+0x310>)
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	089b      	lsrs	r3, r3, #2
 8002ec4:	3302      	adds	r3, #2
 8002ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	220f      	movs	r2, #15
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a52      	ldr	r2, [pc, #328]	; (8003030 <HAL_GPIO_Init+0x314>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d02b      	beq.n	8002f42 <HAL_GPIO_Init+0x226>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a51      	ldr	r2, [pc, #324]	; (8003034 <HAL_GPIO_Init+0x318>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d025      	beq.n	8002f3e <HAL_GPIO_Init+0x222>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a50      	ldr	r2, [pc, #320]	; (8003038 <HAL_GPIO_Init+0x31c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d01f      	beq.n	8002f3a <HAL_GPIO_Init+0x21e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a4f      	ldr	r2, [pc, #316]	; (800303c <HAL_GPIO_Init+0x320>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d019      	beq.n	8002f36 <HAL_GPIO_Init+0x21a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4e      	ldr	r2, [pc, #312]	; (8003040 <HAL_GPIO_Init+0x324>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d013      	beq.n	8002f32 <HAL_GPIO_Init+0x216>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a4d      	ldr	r2, [pc, #308]	; (8003044 <HAL_GPIO_Init+0x328>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00d      	beq.n	8002f2e <HAL_GPIO_Init+0x212>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a4c      	ldr	r2, [pc, #304]	; (8003048 <HAL_GPIO_Init+0x32c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d007      	beq.n	8002f2a <HAL_GPIO_Init+0x20e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a4b      	ldr	r2, [pc, #300]	; (800304c <HAL_GPIO_Init+0x330>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d101      	bne.n	8002f26 <HAL_GPIO_Init+0x20a>
 8002f22:	2307      	movs	r3, #7
 8002f24:	e00e      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f26:	2308      	movs	r3, #8
 8002f28:	e00c      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f2a:	2306      	movs	r3, #6
 8002f2c:	e00a      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f2e:	2305      	movs	r3, #5
 8002f30:	e008      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f32:	2304      	movs	r3, #4
 8002f34:	e006      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f36:	2303      	movs	r3, #3
 8002f38:	e004      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e002      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f42:	2300      	movs	r3, #0
 8002f44:	69fa      	ldr	r2, [r7, #28]
 8002f46:	f002 0203 	and.w	r2, r2, #3
 8002f4a:	0092      	lsls	r2, r2, #2
 8002f4c:	4093      	lsls	r3, r2
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f54:	4935      	ldr	r1, [pc, #212]	; (800302c <HAL_GPIO_Init+0x310>)
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	089b      	lsrs	r3, r3, #2
 8002f5a:	3302      	adds	r3, #2
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f62:	4b3b      	ldr	r3, [pc, #236]	; (8003050 <HAL_GPIO_Init+0x334>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f86:	4a32      	ldr	r2, [pc, #200]	; (8003050 <HAL_GPIO_Init+0x334>)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f8c:	4b30      	ldr	r3, [pc, #192]	; (8003050 <HAL_GPIO_Init+0x334>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fb0:	4a27      	ldr	r2, [pc, #156]	; (8003050 <HAL_GPIO_Init+0x334>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fb6:	4b26      	ldr	r3, [pc, #152]	; (8003050 <HAL_GPIO_Init+0x334>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fda:	4a1d      	ldr	r2, [pc, #116]	; (8003050 <HAL_GPIO_Init+0x334>)
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	; (8003050 <HAL_GPIO_Init+0x334>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003004:	4a12      	ldr	r2, [pc, #72]	; (8003050 <HAL_GPIO_Init+0x334>)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3301      	adds	r3, #1
 800300e:	61fb      	str	r3, [r7, #28]
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	2b0f      	cmp	r3, #15
 8003014:	f67f ae90 	bls.w	8002d38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003018:	bf00      	nop
 800301a:	bf00      	nop
 800301c:	3724      	adds	r7, #36	; 0x24
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40023800 	.word	0x40023800
 800302c:	40013800 	.word	0x40013800
 8003030:	40020000 	.word	0x40020000
 8003034:	40020400 	.word	0x40020400
 8003038:	40020800 	.word	0x40020800
 800303c:	40020c00 	.word	0x40020c00
 8003040:	40021000 	.word	0x40021000
 8003044:	40021400 	.word	0x40021400
 8003048:	40021800 	.word	0x40021800
 800304c:	40021c00 	.word	0x40021c00
 8003050:	40013c00 	.word	0x40013c00

08003054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	807b      	strh	r3, [r7, #2]
 8003060:	4613      	mov	r3, r2
 8003062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003064:	787b      	ldrb	r3, [r7, #1]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800306a:	887a      	ldrh	r2, [r7, #2]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003070:	e003      	b.n	800307a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003072:	887b      	ldrh	r3, [r7, #2]
 8003074:	041a      	lsls	r2, r3, #16
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	619a      	str	r2, [r3, #24]
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b086      	sub	sp, #24
 800308a:	af02      	add	r7, sp, #8
 800308c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e059      	b.n	800314c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f009 ff52 	bl	800cf5c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2203      	movs	r2, #3
 80030bc:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030c6:	d102      	bne.n	80030ce <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f006 fd5b 	bl	8009b8e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6818      	ldr	r0, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	7c1a      	ldrb	r2, [r3, #16]
 80030e0:	f88d 2000 	strb.w	r2, [sp]
 80030e4:	3304      	adds	r3, #4
 80030e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030e8:	f006 fcdc 	bl	8009aa4 <USB_CoreInit>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2202      	movs	r2, #2
 80030f6:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e026      	b.n	800314c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2101      	movs	r1, #1
 8003104:	4618      	mov	r0, r3
 8003106:	f006 fd53 	bl	8009bb0 <USB_SetCurrentMode>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e017      	b.n	800314c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	7c1a      	ldrb	r2, [r3, #16]
 8003124:	f88d 2000 	strb.w	r2, [sp]
 8003128:	3304      	adds	r3, #4
 800312a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800312c:	f006 fef6 	bl	8009f1c <USB_HostInit>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d005      	beq.n	8003142 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2202      	movs	r2, #2
 800313a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e004      	b.n	800314c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003154:	b590      	push	{r4, r7, lr}
 8003156:	b08b      	sub	sp, #44	; 0x2c
 8003158:	af04      	add	r7, sp, #16
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	4608      	mov	r0, r1
 800315e:	4611      	mov	r1, r2
 8003160:	461a      	mov	r2, r3
 8003162:	4603      	mov	r3, r0
 8003164:	70fb      	strb	r3, [r7, #3]
 8003166:	460b      	mov	r3, r1
 8003168:	70bb      	strb	r3, [r7, #2]
 800316a:	4613      	mov	r3, r2
 800316c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800316e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003170:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_HCD_HC_Init+0x2c>
 800317c:	2302      	movs	r3, #2
 800317e:	e09d      	b.n	80032bc <HAL_HCD_HC_Init+0x168>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	3319      	adds	r3, #25
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	3314      	adds	r3, #20
 80031ac:	787a      	ldrb	r2, [r7, #1]
 80031ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80031b0:	78fa      	ldrb	r2, [r7, #3]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	3315      	adds	r3, #21
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80031c4:	78fa      	ldrb	r2, [r7, #3]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	3326      	adds	r3, #38	; 0x26
 80031d4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80031d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	78bb      	ldrb	r3, [r7, #2]
 80031de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031e2:	b2d8      	uxtb	r0, r3
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	3316      	adds	r3, #22
 80031f2:	4602      	mov	r2, r0
 80031f4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80031f6:	78fb      	ldrb	r3, [r7, #3]
 80031f8:	4619      	mov	r1, r3
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fbc8 	bl	8003990 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003200:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003204:	2b00      	cmp	r3, #0
 8003206:	da0a      	bge.n	800321e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003208:	78fa      	ldrb	r2, [r7, #3]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	1a9b      	subs	r3, r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	3317      	adds	r3, #23
 8003218:	2201      	movs	r2, #1
 800321a:	701a      	strb	r2, [r3, #0]
 800321c:	e009      	b.n	8003232 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	3317      	adds	r3, #23
 800322e:	2200      	movs	r2, #0
 8003230:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f006 ffd4 	bl	800a1e4 <USB_GetHostSpeed>
 800323c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800323e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003242:	2b01      	cmp	r3, #1
 8003244:	d10b      	bne.n	800325e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003246:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800324a:	2b01      	cmp	r3, #1
 800324c:	d107      	bne.n	800325e <HAL_HCD_HC_Init+0x10a>
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d104      	bne.n	800325e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2bbc      	cmp	r3, #188	; 0xbc
 8003258:	d901      	bls.n	800325e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800325a:	23bc      	movs	r3, #188	; 0xbc
 800325c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800325e:	78fa      	ldrb	r2, [r7, #3]
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	1a9b      	subs	r3, r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	440b      	add	r3, r1
 800326c:	3318      	adds	r3, #24
 800326e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003272:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003274:	78fa      	ldrb	r2, [r7, #3]
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	b298      	uxth	r0, r3
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	3328      	adds	r3, #40	; 0x28
 8003288:	4602      	mov	r2, r0
 800328a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6818      	ldr	r0, [r3, #0]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	b29b      	uxth	r3, r3
 8003294:	787c      	ldrb	r4, [r7, #1]
 8003296:	78ba      	ldrb	r2, [r7, #2]
 8003298:	78f9      	ldrb	r1, [r7, #3]
 800329a:	9302      	str	r3, [sp, #8]
 800329c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80032a0:	9301      	str	r3, [sp, #4]
 80032a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	4623      	mov	r3, r4
 80032aa:	f006 ffc3 	bl	800a234 <USB_HC_Init>
 80032ae:	4603      	mov	r3, r0
 80032b0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	371c      	adds	r7, #28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd90      	pop	{r4, r7, pc}

080032c4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_HCD_HC_Halt+0x1e>
 80032de:	2302      	movs	r3, #2
 80032e0:	e00f      	b.n	8003302 <HAL_HCD_HC_Halt+0x3e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	4611      	mov	r1, r2
 80032f2:	4618      	mov	r0, r3
 80032f4:	f007 fb55 	bl	800a9a2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8003300:	7bfb      	ldrb	r3, [r7, #15]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
	...

0800330c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	4608      	mov	r0, r1
 8003316:	4611      	mov	r1, r2
 8003318:	461a      	mov	r2, r3
 800331a:	4603      	mov	r3, r0
 800331c:	70fb      	strb	r3, [r7, #3]
 800331e:	460b      	mov	r3, r1
 8003320:	70bb      	strb	r3, [r7, #2]
 8003322:	4613      	mov	r3, r2
 8003324:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	3317      	adds	r3, #23
 8003336:	78ba      	ldrb	r2, [r7, #2]
 8003338:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	3326      	adds	r3, #38	; 0x26
 800334a:	787a      	ldrb	r2, [r7, #1]
 800334c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800334e:	7c3b      	ldrb	r3, [r7, #16]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d114      	bne.n	800337e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003354:	78fa      	ldrb	r2, [r7, #3]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	332a      	adds	r3, #42	; 0x2a
 8003364:	2203      	movs	r2, #3
 8003366:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003368:	78fa      	ldrb	r2, [r7, #3]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	3319      	adds	r3, #25
 8003378:	7f3a      	ldrb	r2, [r7, #28]
 800337a:	701a      	strb	r2, [r3, #0]
 800337c:	e009      	b.n	8003392 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800337e:	78fa      	ldrb	r2, [r7, #3]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	1a9b      	subs	r3, r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	440b      	add	r3, r1
 800338c:	332a      	adds	r3, #42	; 0x2a
 800338e:	2202      	movs	r2, #2
 8003390:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003392:	787b      	ldrb	r3, [r7, #1]
 8003394:	2b03      	cmp	r3, #3
 8003396:	f200 8102 	bhi.w	800359e <HAL_HCD_HC_SubmitRequest+0x292>
 800339a:	a201      	add	r2, pc, #4	; (adr r2, 80033a0 <HAL_HCD_HC_SubmitRequest+0x94>)
 800339c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a0:	080033b1 	.word	0x080033b1
 80033a4:	08003589 	.word	0x08003589
 80033a8:	08003475 	.word	0x08003475
 80033ac:	080034ff 	.word	0x080034ff
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80033b0:	7c3b      	ldrb	r3, [r7, #16]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	f040 80f5 	bne.w	80035a2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80033b8:	78bb      	ldrb	r3, [r7, #2]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d12d      	bne.n	800341a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80033be:	8b3b      	ldrh	r3, [r7, #24]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d109      	bne.n	80033d8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80033c4:	78fa      	ldrb	r2, [r7, #3]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	1a9b      	subs	r3, r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	333d      	adds	r3, #61	; 0x3d
 80033d4:	2201      	movs	r2, #1
 80033d6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80033d8:	78fa      	ldrb	r2, [r7, #3]
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	1a9b      	subs	r3, r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	333d      	adds	r3, #61	; 0x3d
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10a      	bne.n	8003404 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033ee:	78fa      	ldrb	r2, [r7, #3]
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	1a9b      	subs	r3, r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	332a      	adds	r3, #42	; 0x2a
 80033fe:	2200      	movs	r2, #0
 8003400:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003402:	e0ce      	b.n	80035a2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003404:	78fa      	ldrb	r2, [r7, #3]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	332a      	adds	r3, #42	; 0x2a
 8003414:	2202      	movs	r2, #2
 8003416:	701a      	strb	r2, [r3, #0]
      break;
 8003418:	e0c3      	b.n	80035a2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800341a:	78fa      	ldrb	r2, [r7, #3]
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	4613      	mov	r3, r2
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	1a9b      	subs	r3, r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	440b      	add	r3, r1
 8003428:	331a      	adds	r3, #26
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b01      	cmp	r3, #1
 800342e:	f040 80b8 	bne.w	80035a2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	333c      	adds	r3, #60	; 0x3c
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10a      	bne.n	800345e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003448:	78fa      	ldrb	r2, [r7, #3]
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	332a      	adds	r3, #42	; 0x2a
 8003458:	2200      	movs	r2, #0
 800345a:	701a      	strb	r2, [r3, #0]
      break;
 800345c:	e0a1      	b.n	80035a2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800345e:	78fa      	ldrb	r2, [r7, #3]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	332a      	adds	r3, #42	; 0x2a
 800346e:	2202      	movs	r2, #2
 8003470:	701a      	strb	r2, [r3, #0]
      break;
 8003472:	e096      	b.n	80035a2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003474:	78bb      	ldrb	r3, [r7, #2]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d120      	bne.n	80034bc <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	333d      	adds	r3, #61	; 0x3d
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10a      	bne.n	80034a6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	332a      	adds	r3, #42	; 0x2a
 80034a0:	2200      	movs	r2, #0
 80034a2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80034a4:	e07e      	b.n	80035a4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	332a      	adds	r3, #42	; 0x2a
 80034b6:	2202      	movs	r2, #2
 80034b8:	701a      	strb	r2, [r3, #0]
      break;
 80034ba:	e073      	b.n	80035a4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80034bc:	78fa      	ldrb	r2, [r7, #3]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	333c      	adds	r3, #60	; 0x3c
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10a      	bne.n	80034e8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034d2:	78fa      	ldrb	r2, [r7, #3]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	332a      	adds	r3, #42	; 0x2a
 80034e2:	2200      	movs	r2, #0
 80034e4:	701a      	strb	r2, [r3, #0]
      break;
 80034e6:	e05d      	b.n	80035a4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034e8:	78fa      	ldrb	r2, [r7, #3]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	332a      	adds	r3, #42	; 0x2a
 80034f8:	2202      	movs	r2, #2
 80034fa:	701a      	strb	r2, [r3, #0]
      break;
 80034fc:	e052      	b.n	80035a4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80034fe:	78bb      	ldrb	r3, [r7, #2]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d120      	bne.n	8003546 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003504:	78fa      	ldrb	r2, [r7, #3]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	333d      	adds	r3, #61	; 0x3d
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10a      	bne.n	8003530 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800351a:	78fa      	ldrb	r2, [r7, #3]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	332a      	adds	r3, #42	; 0x2a
 800352a:	2200      	movs	r2, #0
 800352c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800352e:	e039      	b.n	80035a4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003530:	78fa      	ldrb	r2, [r7, #3]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	1a9b      	subs	r3, r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	332a      	adds	r3, #42	; 0x2a
 8003540:	2202      	movs	r2, #2
 8003542:	701a      	strb	r2, [r3, #0]
      break;
 8003544:	e02e      	b.n	80035a4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003546:	78fa      	ldrb	r2, [r7, #3]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	333c      	adds	r3, #60	; 0x3c
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10a      	bne.n	8003572 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800355c:	78fa      	ldrb	r2, [r7, #3]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	332a      	adds	r3, #42	; 0x2a
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]
      break;
 8003570:	e018      	b.n	80035a4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003572:	78fa      	ldrb	r2, [r7, #3]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	332a      	adds	r3, #42	; 0x2a
 8003582:	2202      	movs	r2, #2
 8003584:	701a      	strb	r2, [r3, #0]
      break;
 8003586:	e00d      	b.n	80035a4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003588:	78fa      	ldrb	r2, [r7, #3]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	332a      	adds	r3, #42	; 0x2a
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]
      break;
 800359c:	e002      	b.n	80035a4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800359e:	bf00      	nop
 80035a0:	e000      	b.n	80035a4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80035a2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	332c      	adds	r3, #44	; 0x2c
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	8b39      	ldrh	r1, [r7, #24]
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	1a9b      	subs	r3, r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4403      	add	r3, r0
 80035c8:	3334      	adds	r3, #52	; 0x34
 80035ca:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80035cc:	78fa      	ldrb	r2, [r7, #3]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	334c      	adds	r3, #76	; 0x4c
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80035e0:	78fa      	ldrb	r2, [r7, #3]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	1a9b      	subs	r3, r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	3338      	adds	r3, #56	; 0x38
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80035f4:	78fa      	ldrb	r2, [r7, #3]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	3315      	adds	r3, #21
 8003604:	78fa      	ldrb	r2, [r7, #3]
 8003606:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003608:	78fa      	ldrb	r2, [r7, #3]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	334d      	adds	r3, #77	; 0x4d
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	78fa      	ldrb	r2, [r7, #3]
 8003622:	4613      	mov	r3, r2
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	1a9b      	subs	r3, r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	3310      	adds	r3, #16
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	4413      	add	r3, r2
 8003630:	1d19      	adds	r1, r3, #4
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	799b      	ldrb	r3, [r3, #6]
 8003636:	461a      	mov	r2, r3
 8003638:	f006 ff28 	bl	800a48c <USB_HC_StartXfer>
 800363c:	4603      	mov	r3, r0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop

08003648 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f006 fc1c 	bl	8009e9c <USB_GetMode>
 8003664:	4603      	mov	r3, r0
 8003666:	2b01      	cmp	r3, #1
 8003668:	f040 80fb 	bne.w	8003862 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f006 fbdf 	bl	8009e34 <USB_ReadInterrupts>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80f1 	beq.w	8003860 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f006 fbd6 	bl	8009e34 <USB_ReadInterrupts>
 8003688:	4603      	mov	r3, r0
 800368a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800368e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003692:	d104      	bne.n	800369e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800369c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f006 fbc6 	bl	8009e34 <USB_ReadInterrupts>
 80036a8:	4603      	mov	r3, r0
 80036aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036b2:	d104      	bne.n	80036be <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80036bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f006 fbb6 	bl	8009e34 <USB_ReadInterrupts>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036d2:	d104      	bne.n	80036de <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80036dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f006 fba6 	bl	8009e34 <USB_ReadInterrupts>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d103      	bne.n	80036fa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2202      	movs	r2, #2
 80036f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f006 fb98 	bl	8009e34 <USB_ReadInterrupts>
 8003704:	4603      	mov	r3, r0
 8003706:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800370a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800370e:	d120      	bne.n	8003752 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003718:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d113      	bne.n	8003752 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800372a:	2110      	movs	r1, #16
 800372c:	6938      	ldr	r0, [r7, #16]
 800372e:	f006 fa8b 	bl	8009c48 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003732:	6938      	ldr	r0, [r7, #16]
 8003734:	f006 faba 	bl	8009cac <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	7a5b      	ldrb	r3, [r3, #9]
 800373c:	2b02      	cmp	r3, #2
 800373e:	d105      	bne.n	800374c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2101      	movs	r1, #1
 8003746:	4618      	mov	r0, r3
 8003748:	f006 fcac 	bl	800a0a4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f009 fc83 	bl	800d058 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f006 fb6c 	bl	8009e34 <USB_ReadInterrupts>
 800375c:	4603      	mov	r3, r0
 800375e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003762:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003766:	d102      	bne.n	800376e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f001 fd33 	bl	80051d4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f006 fb5e 	bl	8009e34 <USB_ReadInterrupts>
 8003778:	4603      	mov	r3, r0
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b08      	cmp	r3, #8
 8003780:	d106      	bne.n	8003790 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f009 fc4c 	bl	800d020 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2208      	movs	r2, #8
 800378e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f006 fb4d 	bl	8009e34 <USB_ReadInterrupts>
 800379a:	4603      	mov	r3, r0
 800379c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037a4:	d139      	bne.n	800381a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f007 f8e8 	bl	800a980 <USB_HC_ReadInterrupt>
 80037b0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80037b2:	2300      	movs	r3, #0
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	e025      	b.n	8003804 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	fa22 f303 	lsr.w	r3, r2, r3
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d018      	beq.n	80037fe <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037e2:	d106      	bne.n	80037f2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	4619      	mov	r1, r3
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f905 	bl	80039fa <HCD_HC_IN_IRQHandler>
 80037f0:	e005      	b.n	80037fe <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	4619      	mov	r1, r3
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 ff67 	bl	80046cc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	3301      	adds	r3, #1
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	795b      	ldrb	r3, [r3, #5]
 8003808:	461a      	mov	r2, r3
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	4293      	cmp	r3, r2
 800380e:	d3d3      	bcc.n	80037b8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003818:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f006 fb08 	bl	8009e34 <USB_ReadInterrupts>
 8003824:	4603      	mov	r3, r0
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b10      	cmp	r3, #16
 800382c:	d101      	bne.n	8003832 <HAL_HCD_IRQHandler+0x1ea>
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <HAL_HCD_IRQHandler+0x1ec>
 8003832:	2300      	movs	r3, #0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d014      	beq.n	8003862 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699a      	ldr	r2, [r3, #24]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0210 	bic.w	r2, r2, #16
 8003846:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f001 fbe4 	bl	8005016 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	699a      	ldr	r2, [r3, #24]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 0210 	orr.w	r2, r2, #16
 800385c:	619a      	str	r2, [r3, #24]
 800385e:	e000      	b.n	8003862 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003860:	bf00      	nop
    }
  }
}
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_HCD_Start+0x16>
 800387a:	2302      	movs	r3, #2
 800387c:	e013      	b.n	80038a6 <HAL_HCD_Start+0x3e>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2101      	movs	r1, #1
 800388c:	4618      	mov	r0, r3
 800388e:	f006 fc70 	bl	800a172 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f006 f968 	bl	8009b6c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b082      	sub	sp, #8
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_HCD_Stop+0x16>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e00d      	b.n	80038e0 <HAL_HCD_Stop+0x32>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f007 f9c3 	bl	800ac5c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f006 fc12 	bl	800a11e <USB_ResetPort>
 80038fa:	4603      	mov	r3, r0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003910:	78fa      	ldrb	r2, [r7, #3]
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	4613      	mov	r3, r2
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	1a9b      	subs	r3, r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	334c      	adds	r3, #76	; 0x4c
 8003920:	781b      	ldrb	r3, [r3, #0]
}
 8003922:	4618      	mov	r0, r3
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	460b      	mov	r3, r1
 8003938:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800393a:	78fa      	ldrb	r2, [r7, #3]
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	1a9b      	subs	r3, r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	3338      	adds	r3, #56	; 0x38
 800394a:	681b      	ldr	r3, [r3, #0]
}
 800394c:	4618      	mov	r0, r3
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f006 fc54 	bl	800a212 <USB_GetCurrentFrame>
 800396a:	4603      	mov	r3, r0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f006 fc2f 	bl	800a1e4 <USB_GetHostSpeed>
 8003986:	4603      	mov	r3, r0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 800399c:	78fa      	ldrb	r2, [r7, #3]
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	1a9b      	subs	r3, r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	331a      	adds	r3, #26
 80039ac:	2200      	movs	r2, #0
 80039ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80039b0:	78fa      	ldrb	r2, [r7, #3]
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	331b      	adds	r3, #27
 80039c0:	2200      	movs	r2, #0
 80039c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80039c4:	78fa      	ldrb	r2, [r7, #3]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	3325      	adds	r3, #37	; 0x25
 80039d4:	2200      	movs	r2, #0
 80039d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80039d8:	78fa      	ldrb	r2, [r7, #3]
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	4613      	mov	r3, r2
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	1a9b      	subs	r3, r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	3324      	adds	r3, #36	; 0x24
 80039e8:	2200      	movs	r2, #0
 80039ea:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b086      	sub	sp, #24
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	460b      	mov	r3, r1
 8003a04:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	78fa      	ldrb	r2, [r7, #3]
 8003a16:	4611      	mov	r1, r2
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f006 fa1e 	bl	8009e5a <USB_ReadChInterrupts>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d11a      	bne.n	8003a5e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a34:	461a      	mov	r2, r3
 8003a36:	2304      	movs	r3, #4
 8003a38:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003a3a:	78fa      	ldrb	r2, [r7, #3]
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	1a9b      	subs	r3, r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	440b      	add	r3, r1
 8003a48:	334d      	adds	r3, #77	; 0x4d
 8003a4a:	2207      	movs	r2, #7
 8003a4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	78fa      	ldrb	r2, [r7, #3]
 8003a54:	4611      	mov	r1, r2
 8003a56:	4618      	mov	r0, r3
 8003a58:	f006 ffa3 	bl	800a9a2 <USB_HC_Halt>
 8003a5c:	e09e      	b.n	8003b9c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	78fa      	ldrb	r2, [r7, #3]
 8003a64:	4611      	mov	r1, r2
 8003a66:	4618      	mov	r0, r3
 8003a68:	f006 f9f7 	bl	8009e5a <USB_ReadChInterrupts>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a76:	d11b      	bne.n	8003ab0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003a78:	78fb      	ldrb	r3, [r7, #3]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a84:	461a      	mov	r2, r3
 8003a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a8a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003a8c:	78fa      	ldrb	r2, [r7, #3]
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	1a9b      	subs	r3, r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	334d      	adds	r3, #77	; 0x4d
 8003a9c:	2208      	movs	r2, #8
 8003a9e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	78fa      	ldrb	r2, [r7, #3]
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f006 ff7a 	bl	800a9a2 <USB_HC_Halt>
 8003aae:	e075      	b.n	8003b9c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	78fa      	ldrb	r2, [r7, #3]
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f006 f9ce 	bl	8009e5a <USB_ReadChInterrupts>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d11a      	bne.n	8003afe <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003ac8:	78fb      	ldrb	r3, [r7, #3]
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	2308      	movs	r3, #8
 8003ad8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003ada:	78fa      	ldrb	r2, [r7, #3]
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	334d      	adds	r3, #77	; 0x4d
 8003aea:	2206      	movs	r2, #6
 8003aec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	78fa      	ldrb	r2, [r7, #3]
 8003af4:	4611      	mov	r1, r2
 8003af6:	4618      	mov	r0, r3
 8003af8:	f006 ff53 	bl	800a9a2 <USB_HC_Halt>
 8003afc:	e04e      	b.n	8003b9c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	78fa      	ldrb	r2, [r7, #3]
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f006 f9a7 	bl	8009e5a <USB_ReadChInterrupts>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b16:	d11b      	bne.n	8003b50 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b24:	461a      	mov	r2, r3
 8003b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003b2c:	78fa      	ldrb	r2, [r7, #3]
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	4613      	mov	r3, r2
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	1a9b      	subs	r3, r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	334d      	adds	r3, #77	; 0x4d
 8003b3c:	2209      	movs	r2, #9
 8003b3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	78fa      	ldrb	r2, [r7, #3]
 8003b46:	4611      	mov	r1, r2
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f006 ff2a 	bl	800a9a2 <USB_HC_Halt>
 8003b4e:	e025      	b.n	8003b9c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	78fa      	ldrb	r2, [r7, #3]
 8003b56:	4611      	mov	r1, r2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f006 f97e 	bl	8009e5a <USB_ReadChInterrupts>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b64:	2b80      	cmp	r3, #128	; 0x80
 8003b66:	d119      	bne.n	8003b9c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b74:	461a      	mov	r2, r3
 8003b76:	2380      	movs	r3, #128	; 0x80
 8003b78:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003b7a:	78fa      	ldrb	r2, [r7, #3]
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	1a9b      	subs	r3, r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	334d      	adds	r3, #77	; 0x4d
 8003b8a:	2207      	movs	r2, #7
 8003b8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	78fa      	ldrb	r2, [r7, #3]
 8003b94:	4611      	mov	r1, r2
 8003b96:	4618      	mov	r0, r3
 8003b98:	f006 ff03 	bl	800a9a2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	78fa      	ldrb	r2, [r7, #3]
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f006 f958 	bl	8009e5a <USB_ReadChInterrupts>
 8003baa:	4603      	mov	r3, r0
 8003bac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bb4:	d112      	bne.n	8003bdc <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	78fa      	ldrb	r2, [r7, #3]
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f006 feef 	bl	800a9a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bd6:	6093      	str	r3, [r2, #8]
 8003bd8:	f000 bd75 	b.w	80046c6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	78fa      	ldrb	r2, [r7, #3]
 8003be2:	4611      	mov	r1, r2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f006 f938 	bl	8009e5a <USB_ReadChInterrupts>
 8003bea:	4603      	mov	r3, r0
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	f040 8128 	bne.w	8003e46 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003bf6:	78fb      	ldrb	r3, [r7, #3]
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c02:	461a      	mov	r2, r3
 8003c04:	2320      	movs	r3, #32
 8003c06:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003c08:	78fa      	ldrb	r2, [r7, #3]
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	1a9b      	subs	r3, r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	331b      	adds	r3, #27
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d119      	bne.n	8003c52 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003c1e:	78fa      	ldrb	r2, [r7, #3]
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	4613      	mov	r3, r2
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	1a9b      	subs	r3, r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	331b      	adds	r3, #27
 8003c2e:	2200      	movs	r2, #0
 8003c30:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003c32:	78fb      	ldrb	r3, [r7, #3]
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	78fa      	ldrb	r2, [r7, #3]
 8003c42:	0151      	lsls	r1, r2, #5
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	440a      	add	r2, r1
 8003c48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c50:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	799b      	ldrb	r3, [r3, #6]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d01b      	beq.n	8003c92 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003c5a:	78fa      	ldrb	r2, [r7, #3]
 8003c5c:	6879      	ldr	r1, [r7, #4]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	1a9b      	subs	r3, r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	440b      	add	r3, r1
 8003c68:	3330      	adds	r3, #48	; 0x30
 8003c6a:	6819      	ldr	r1, [r3, #0]
 8003c6c:	78fb      	ldrb	r3, [r7, #3]
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c7e:	78fa      	ldrb	r2, [r7, #3]
 8003c80:	1ac9      	subs	r1, r1, r3
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	1a9b      	subs	r3, r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4403      	add	r3, r0
 8003c8e:	3338      	adds	r3, #56	; 0x38
 8003c90:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003c92:	78fa      	ldrb	r2, [r7, #3]
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	1a9b      	subs	r3, r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	334d      	adds	r3, #77	; 0x4d
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003ca6:	78fa      	ldrb	r2, [r7, #3]
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	3344      	adds	r3, #68	; 0x44
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003cba:	78fb      	ldrb	r3, [r7, #3]
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	2301      	movs	r3, #1
 8003cca:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	1a9b      	subs	r3, r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	3326      	adds	r3, #38	; 0x26
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ce2:	78fa      	ldrb	r2, [r7, #3]
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	1a9b      	subs	r3, r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	3326      	adds	r3, #38	; 0x26
 8003cf2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d110      	bne.n	8003d1a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	78fa      	ldrb	r2, [r7, #3]
 8003cfe:	4611      	mov	r1, r2
 8003d00:	4618      	mov	r0, r3
 8003d02:	f006 fe4e 	bl	800a9a2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003d06:	78fb      	ldrb	r3, [r7, #3]
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d12:	461a      	mov	r2, r3
 8003d14:	2310      	movs	r3, #16
 8003d16:	6093      	str	r3, [r2, #8]
 8003d18:	e03d      	b.n	8003d96 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003d1a:	78fa      	ldrb	r2, [r7, #3]
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	3326      	adds	r3, #38	; 0x26
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b03      	cmp	r3, #3
 8003d2e:	d00a      	beq.n	8003d46 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003d30:	78fa      	ldrb	r2, [r7, #3]
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	4613      	mov	r3, r2
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	1a9b      	subs	r3, r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	3326      	adds	r3, #38	; 0x26
 8003d40:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d127      	bne.n	8003d96 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	78fa      	ldrb	r2, [r7, #3]
 8003d56:	0151      	lsls	r1, r2, #5
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	440a      	add	r2, r1
 8003d5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d64:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003d66:	78fa      	ldrb	r2, [r7, #3]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	334c      	adds	r3, #76	; 0x4c
 8003d76:	2201      	movs	r2, #1
 8003d78:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003d7a:	78fa      	ldrb	r2, [r7, #3]
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	334c      	adds	r3, #76	; 0x4c
 8003d8a:	781a      	ldrb	r2, [r3, #0]
 8003d8c:	78fb      	ldrb	r3, [r7, #3]
 8003d8e:	4619      	mov	r1, r3
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f009 f96f 	bl	800d074 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	799b      	ldrb	r3, [r3, #6]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d13b      	bne.n	8003e16 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003d9e:	78fa      	ldrb	r2, [r7, #3]
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	4613      	mov	r3, r2
 8003da4:	011b      	lsls	r3, r3, #4
 8003da6:	1a9b      	subs	r3, r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	440b      	add	r3, r1
 8003dac:	3338      	adds	r3, #56	; 0x38
 8003dae:	6819      	ldr	r1, [r3, #0]
 8003db0:	78fa      	ldrb	r2, [r7, #3]
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	4613      	mov	r3, r2
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	1a9b      	subs	r3, r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4403      	add	r3, r0
 8003dbe:	3328      	adds	r3, #40	; 0x28
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	440b      	add	r3, r1
 8003dc4:	1e59      	subs	r1, r3, #1
 8003dc6:	78fa      	ldrb	r2, [r7, #3]
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	1a9b      	subs	r3, r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4403      	add	r3, r0
 8003dd4:	3328      	adds	r3, #40	; 0x28
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 8470 	beq.w	80046c6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003de6:	78fa      	ldrb	r2, [r7, #3]
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	4613      	mov	r3, r2
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	1a9b      	subs	r3, r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	440b      	add	r3, r1
 8003df4:	333c      	adds	r3, #60	; 0x3c
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	78fa      	ldrb	r2, [r7, #3]
 8003dfa:	f083 0301 	eor.w	r3, r3, #1
 8003dfe:	b2d8      	uxtb	r0, r3
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	4613      	mov	r3, r2
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	1a9b      	subs	r3, r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	333c      	adds	r3, #60	; 0x3c
 8003e0e:	4602      	mov	r2, r0
 8003e10:	701a      	strb	r2, [r3, #0]
 8003e12:	f000 bc58 	b.w	80046c6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003e16:	78fa      	ldrb	r2, [r7, #3]
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	1a9b      	subs	r3, r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	440b      	add	r3, r1
 8003e24:	333c      	adds	r3, #60	; 0x3c
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	78fa      	ldrb	r2, [r7, #3]
 8003e2a:	f083 0301 	eor.w	r3, r3, #1
 8003e2e:	b2d8      	uxtb	r0, r3
 8003e30:	6879      	ldr	r1, [r7, #4]
 8003e32:	4613      	mov	r3, r2
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	1a9b      	subs	r3, r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	440b      	add	r3, r1
 8003e3c:	333c      	adds	r3, #60	; 0x3c
 8003e3e:	4602      	mov	r2, r0
 8003e40:	701a      	strb	r2, [r3, #0]
 8003e42:	f000 bc40 	b.w	80046c6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	78fa      	ldrb	r2, [r7, #3]
 8003e4c:	4611      	mov	r1, r2
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f006 f803 	bl	8009e5a <USB_ReadChInterrupts>
 8003e54:	4603      	mov	r3, r0
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	d131      	bne.n	8003ec2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003e5e:	78fb      	ldrb	r3, [r7, #3]
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	2320      	movs	r3, #32
 8003e6e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003e70:	78fa      	ldrb	r2, [r7, #3]
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	4613      	mov	r3, r2
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	331a      	adds	r3, #26
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	f040 841f 	bne.w	80046c6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003e88:	78fa      	ldrb	r2, [r7, #3]
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	1a9b      	subs	r3, r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	331b      	adds	r3, #27
 8003e98:	2201      	movs	r2, #1
 8003e9a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003e9c:	78fa      	ldrb	r2, [r7, #3]
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	334d      	adds	r3, #77	; 0x4d
 8003eac:	2203      	movs	r2, #3
 8003eae:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	78fa      	ldrb	r2, [r7, #3]
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f006 fd72 	bl	800a9a2 <USB_HC_Halt>
 8003ebe:	f000 bc02 	b.w	80046c6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	78fa      	ldrb	r2, [r7, #3]
 8003ec8:	4611      	mov	r1, r2
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f005 ffc5 	bl	8009e5a <USB_ReadChInterrupts>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	f040 8305 	bne.w	80044e6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee8:	461a      	mov	r2, r3
 8003eea:	2302      	movs	r3, #2
 8003eec:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003eee:	78fa      	ldrb	r2, [r7, #3]
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	334d      	adds	r3, #77	; 0x4d
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d114      	bne.n	8003f2e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f04:	78fa      	ldrb	r2, [r7, #3]
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	1a9b      	subs	r3, r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	334d      	adds	r3, #77	; 0x4d
 8003f14:	2202      	movs	r2, #2
 8003f16:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003f18:	78fa      	ldrb	r2, [r7, #3]
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	1a9b      	subs	r3, r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	440b      	add	r3, r1
 8003f26:	334c      	adds	r3, #76	; 0x4c
 8003f28:	2201      	movs	r2, #1
 8003f2a:	701a      	strb	r2, [r3, #0]
 8003f2c:	e2cc      	b.n	80044c8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003f2e:	78fa      	ldrb	r2, [r7, #3]
 8003f30:	6879      	ldr	r1, [r7, #4]
 8003f32:	4613      	mov	r3, r2
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	1a9b      	subs	r3, r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	334d      	adds	r3, #77	; 0x4d
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	2b06      	cmp	r3, #6
 8003f42:	d114      	bne.n	8003f6e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f44:	78fa      	ldrb	r2, [r7, #3]
 8003f46:	6879      	ldr	r1, [r7, #4]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	1a9b      	subs	r3, r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	334d      	adds	r3, #77	; 0x4d
 8003f54:	2202      	movs	r2, #2
 8003f56:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003f58:	78fa      	ldrb	r2, [r7, #3]
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	334c      	adds	r3, #76	; 0x4c
 8003f68:	2205      	movs	r2, #5
 8003f6a:	701a      	strb	r2, [r3, #0]
 8003f6c:	e2ac      	b.n	80044c8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f6e:	78fa      	ldrb	r2, [r7, #3]
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	334d      	adds	r3, #77	; 0x4d
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	2b07      	cmp	r3, #7
 8003f82:	d00b      	beq.n	8003f9c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003f84:	78fa      	ldrb	r2, [r7, #3]
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	1a9b      	subs	r3, r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	334d      	adds	r3, #77	; 0x4d
 8003f94:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f96:	2b09      	cmp	r3, #9
 8003f98:	f040 80a6 	bne.w	80040e8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f9c:	78fa      	ldrb	r2, [r7, #3]
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	334d      	adds	r3, #77	; 0x4d
 8003fac:	2202      	movs	r2, #2
 8003fae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003fb0:	78fa      	ldrb	r2, [r7, #3]
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	1a9b      	subs	r3, r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	3344      	adds	r3, #68	; 0x44
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	1c59      	adds	r1, r3, #1
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	1a9b      	subs	r3, r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4403      	add	r3, r0
 8003fd0:	3344      	adds	r3, #68	; 0x44
 8003fd2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fd4:	78fa      	ldrb	r2, [r7, #3]
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	1a9b      	subs	r3, r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	3344      	adds	r3, #68	; 0x44
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d943      	bls.n	8004072 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003fea:	78fa      	ldrb	r2, [r7, #3]
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	1a9b      	subs	r3, r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	3344      	adds	r3, #68	; 0x44
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003ffe:	78fa      	ldrb	r2, [r7, #3]
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	331a      	adds	r3, #26
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d123      	bne.n	800405c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004014:	78fa      	ldrb	r2, [r7, #3]
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	4613      	mov	r3, r2
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	1a9b      	subs	r3, r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	331b      	adds	r3, #27
 8004024:	2200      	movs	r2, #0
 8004026:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004028:	78fa      	ldrb	r2, [r7, #3]
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	1a9b      	subs	r3, r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	331c      	adds	r3, #28
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	4413      	add	r3, r2
 8004044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	78fa      	ldrb	r2, [r7, #3]
 800404c:	0151      	lsls	r1, r2, #5
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	440a      	add	r2, r1
 8004052:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800405a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800405c:	78fa      	ldrb	r2, [r7, #3]
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	1a9b      	subs	r3, r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	334c      	adds	r3, #76	; 0x4c
 800406c:	2204      	movs	r2, #4
 800406e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004070:	e229      	b.n	80044c6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004072:	78fa      	ldrb	r2, [r7, #3]
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	4613      	mov	r3, r2
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	1a9b      	subs	r3, r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	440b      	add	r3, r1
 8004080:	334c      	adds	r3, #76	; 0x4c
 8004082:	2202      	movs	r2, #2
 8004084:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004086:	78fa      	ldrb	r2, [r7, #3]
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	1a9b      	subs	r3, r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	3326      	adds	r3, #38	; 0x26
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00b      	beq.n	80040b4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800409c:	78fa      	ldrb	r2, [r7, #3]
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	3326      	adds	r3, #38	; 0x26
 80040ac:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	f040 8209 	bne.w	80044c6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80040b4:	78fb      	ldrb	r3, [r7, #3]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040ca:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040d2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80040d4:	78fb      	ldrb	r3, [r7, #3]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e0:	461a      	mov	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80040e6:	e1ee      	b.n	80044c6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80040e8:	78fa      	ldrb	r2, [r7, #3]
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	4613      	mov	r3, r2
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	1a9b      	subs	r3, r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	334d      	adds	r3, #77	; 0x4d
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b05      	cmp	r3, #5
 80040fc:	f040 80c8 	bne.w	8004290 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004100:	78fa      	ldrb	r2, [r7, #3]
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	4613      	mov	r3, r2
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	334d      	adds	r3, #77	; 0x4d
 8004110:	2202      	movs	r2, #2
 8004112:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004114:	78fa      	ldrb	r2, [r7, #3]
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	4613      	mov	r3, r2
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	1a9b      	subs	r3, r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	331b      	adds	r3, #27
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	2b01      	cmp	r3, #1
 8004128:	f040 81ce 	bne.w	80044c8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800412c:	78fa      	ldrb	r2, [r7, #3]
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	3326      	adds	r3, #38	; 0x26
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b03      	cmp	r3, #3
 8004140:	d16b      	bne.n	800421a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004142:	78fa      	ldrb	r2, [r7, #3]
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	440b      	add	r3, r1
 8004150:	3348      	adds	r3, #72	; 0x48
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	1c59      	adds	r1, r3, #1
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	1a9b      	subs	r3, r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4403      	add	r3, r0
 8004162:	3348      	adds	r3, #72	; 0x48
 8004164:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004166:	78fa      	ldrb	r2, [r7, #3]
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	4613      	mov	r3, r2
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	1a9b      	subs	r3, r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	3348      	adds	r3, #72	; 0x48
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b02      	cmp	r3, #2
 800417a:	d943      	bls.n	8004204 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800417c:	78fa      	ldrb	r2, [r7, #3]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	1a9b      	subs	r3, r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	3348      	adds	r3, #72	; 0x48
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004190:	78fa      	ldrb	r2, [r7, #3]
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	1a9b      	subs	r3, r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	331b      	adds	r3, #27
 80041a0:	2200      	movs	r2, #0
 80041a2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80041a4:	78fa      	ldrb	r2, [r7, #3]
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	3344      	adds	r3, #68	; 0x44
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d809      	bhi.n	80041ce <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80041ba:	78fa      	ldrb	r2, [r7, #3]
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	440b      	add	r3, r1
 80041c8:	331c      	adds	r3, #28
 80041ca:	2201      	movs	r2, #1
 80041cc:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80041ce:	78fb      	ldrb	r3, [r7, #3]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	78fa      	ldrb	r2, [r7, #3]
 80041de:	0151      	lsls	r1, r2, #5
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	440a      	add	r2, r1
 80041e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ec:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80041ee:	78fa      	ldrb	r2, [r7, #3]
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	4613      	mov	r3, r2
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	440b      	add	r3, r1
 80041fc:	334c      	adds	r3, #76	; 0x4c
 80041fe:	2204      	movs	r2, #4
 8004200:	701a      	strb	r2, [r3, #0]
 8004202:	e014      	b.n	800422e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004204:	78fa      	ldrb	r2, [r7, #3]
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	4613      	mov	r3, r2
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	1a9b      	subs	r3, r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	334c      	adds	r3, #76	; 0x4c
 8004214:	2202      	movs	r2, #2
 8004216:	701a      	strb	r2, [r3, #0]
 8004218:	e009      	b.n	800422e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800421a:	78fa      	ldrb	r2, [r7, #3]
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	4613      	mov	r3, r2
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	1a9b      	subs	r3, r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	440b      	add	r3, r1
 8004228:	334c      	adds	r3, #76	; 0x4c
 800422a:	2202      	movs	r2, #2
 800422c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800422e:	78fa      	ldrb	r2, [r7, #3]
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	4613      	mov	r3, r2
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	1a9b      	subs	r3, r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	440b      	add	r3, r1
 800423c:	3326      	adds	r3, #38	; 0x26
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00b      	beq.n	800425c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004244:	78fa      	ldrb	r2, [r7, #3]
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	4613      	mov	r3, r2
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	1a9b      	subs	r3, r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	3326      	adds	r3, #38	; 0x26
 8004254:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004256:	2b02      	cmp	r3, #2
 8004258:	f040 8136 	bne.w	80044c8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800425c:	78fb      	ldrb	r3, [r7, #3]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	4413      	add	r3, r2
 8004264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004272:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800427a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800427c:	78fb      	ldrb	r3, [r7, #3]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	4413      	add	r3, r2
 8004284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004288:	461a      	mov	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	e11b      	b.n	80044c8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004290:	78fa      	ldrb	r2, [r7, #3]
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	4613      	mov	r3, r2
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	1a9b      	subs	r3, r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	440b      	add	r3, r1
 800429e:	334d      	adds	r3, #77	; 0x4d
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b03      	cmp	r3, #3
 80042a4:	f040 8081 	bne.w	80043aa <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042a8:	78fa      	ldrb	r2, [r7, #3]
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	4613      	mov	r3, r2
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	1a9b      	subs	r3, r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	334d      	adds	r3, #77	; 0x4d
 80042b8:	2202      	movs	r2, #2
 80042ba:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80042bc:	78fa      	ldrb	r2, [r7, #3]
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	331b      	adds	r3, #27
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	f040 80fa 	bne.w	80044c8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042d4:	78fa      	ldrb	r2, [r7, #3]
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	4613      	mov	r3, r2
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	1a9b      	subs	r3, r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	334c      	adds	r3, #76	; 0x4c
 80042e4:	2202      	movs	r2, #2
 80042e6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	78fa      	ldrb	r2, [r7, #3]
 80042f8:	0151      	lsls	r1, r2, #5
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	440a      	add	r2, r1
 80042fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004306:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	4413      	add	r3, r2
 8004310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	78fa      	ldrb	r2, [r7, #3]
 8004318:	0151      	lsls	r1, r2, #5
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	440a      	add	r2, r1
 800431e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004326:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	4413      	add	r3, r2
 8004330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	78fa      	ldrb	r2, [r7, #3]
 8004338:	0151      	lsls	r1, r2, #5
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	440a      	add	r2, r1
 800433e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004342:	f023 0320 	bic.w	r3, r3, #32
 8004346:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004348:	78fa      	ldrb	r2, [r7, #3]
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	4613      	mov	r3, r2
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	1a9b      	subs	r3, r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	3326      	adds	r3, #38	; 0x26
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00b      	beq.n	8004376 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800435e:	78fa      	ldrb	r2, [r7, #3]
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	4613      	mov	r3, r2
 8004364:	011b      	lsls	r3, r3, #4
 8004366:	1a9b      	subs	r3, r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	440b      	add	r3, r1
 800436c:	3326      	adds	r3, #38	; 0x26
 800436e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004370:	2b02      	cmp	r3, #2
 8004372:	f040 80a9 	bne.w	80044c8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004376:	78fb      	ldrb	r3, [r7, #3]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	4413      	add	r3, r2
 800437e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800438c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004394:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004396:	78fb      	ldrb	r3, [r7, #3]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	4413      	add	r3, r2
 800439e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a2:	461a      	mov	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6013      	str	r3, [r2, #0]
 80043a8:	e08e      	b.n	80044c8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80043aa:	78fa      	ldrb	r2, [r7, #3]
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	1a9b      	subs	r3, r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	440b      	add	r3, r1
 80043b8:	334d      	adds	r3, #77	; 0x4d
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d143      	bne.n	8004448 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043c0:	78fa      	ldrb	r2, [r7, #3]
 80043c2:	6879      	ldr	r1, [r7, #4]
 80043c4:	4613      	mov	r3, r2
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	1a9b      	subs	r3, r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	440b      	add	r3, r1
 80043ce:	334d      	adds	r3, #77	; 0x4d
 80043d0:	2202      	movs	r2, #2
 80043d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043d4:	78fa      	ldrb	r2, [r7, #3]
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	4613      	mov	r3, r2
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	334c      	adds	r3, #76	; 0x4c
 80043e4:	2202      	movs	r2, #2
 80043e6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043e8:	78fa      	ldrb	r2, [r7, #3]
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	3326      	adds	r3, #38	; 0x26
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80043fe:	78fa      	ldrb	r2, [r7, #3]
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	4613      	mov	r3, r2
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	1a9b      	subs	r3, r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	440b      	add	r3, r1
 800440c:	3326      	adds	r3, #38	; 0x26
 800440e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004410:	2b02      	cmp	r3, #2
 8004412:	d159      	bne.n	80044c8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	4413      	add	r3, r2
 800441c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800442a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004432:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004434:	78fb      	ldrb	r3, [r7, #3]
 8004436:	015a      	lsls	r2, r3, #5
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	4413      	add	r3, r2
 800443c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004440:	461a      	mov	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	e03f      	b.n	80044c8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004448:	78fa      	ldrb	r2, [r7, #3]
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	1a9b      	subs	r3, r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	334d      	adds	r3, #77	; 0x4d
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2b08      	cmp	r3, #8
 800445c:	d126      	bne.n	80044ac <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800445e:	78fa      	ldrb	r2, [r7, #3]
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	4613      	mov	r3, r2
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	1a9b      	subs	r3, r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	440b      	add	r3, r1
 800446c:	334d      	adds	r3, #77	; 0x4d
 800446e:	2202      	movs	r2, #2
 8004470:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004472:	78fa      	ldrb	r2, [r7, #3]
 8004474:	6879      	ldr	r1, [r7, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	440b      	add	r3, r1
 8004480:	3344      	adds	r3, #68	; 0x44
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	1c59      	adds	r1, r3, #1
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	4613      	mov	r3, r2
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	1a9b      	subs	r3, r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4403      	add	r3, r0
 8004492:	3344      	adds	r3, #68	; 0x44
 8004494:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004496:	78fa      	ldrb	r2, [r7, #3]
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	1a9b      	subs	r3, r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	440b      	add	r3, r1
 80044a4:	334c      	adds	r3, #76	; 0x4c
 80044a6:	2204      	movs	r2, #4
 80044a8:	701a      	strb	r2, [r3, #0]
 80044aa:	e00d      	b.n	80044c8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80044ac:	78fa      	ldrb	r2, [r7, #3]
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	4613      	mov	r3, r2
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	1a9b      	subs	r3, r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	440b      	add	r3, r1
 80044ba:	334d      	adds	r3, #77	; 0x4d
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	f000 8100 	beq.w	80046c4 <HCD_HC_IN_IRQHandler+0xcca>
 80044c4:	e000      	b.n	80044c8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044c6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80044c8:	78fa      	ldrb	r2, [r7, #3]
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	4613      	mov	r3, r2
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	1a9b      	subs	r3, r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	440b      	add	r3, r1
 80044d6:	334c      	adds	r3, #76	; 0x4c
 80044d8:	781a      	ldrb	r2, [r3, #0]
 80044da:	78fb      	ldrb	r3, [r7, #3]
 80044dc:	4619      	mov	r1, r3
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f008 fdc8 	bl	800d074 <HAL_HCD_HC_NotifyURBChange_Callback>
 80044e4:	e0ef      	b.n	80046c6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	78fa      	ldrb	r2, [r7, #3]
 80044ec:	4611      	mov	r1, r2
 80044ee:	4618      	mov	r0, r3
 80044f0:	f005 fcb3 	bl	8009e5a <USB_ReadChInterrupts>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fa:	2b40      	cmp	r3, #64	; 0x40
 80044fc:	d12f      	bne.n	800455e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80044fe:	78fb      	ldrb	r3, [r7, #3]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	4413      	add	r3, r2
 8004506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800450a:	461a      	mov	r2, r3
 800450c:	2340      	movs	r3, #64	; 0x40
 800450e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004510:	78fa      	ldrb	r2, [r7, #3]
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	4613      	mov	r3, r2
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	1a9b      	subs	r3, r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	440b      	add	r3, r1
 800451e:	334d      	adds	r3, #77	; 0x4d
 8004520:	2205      	movs	r2, #5
 8004522:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004524:	78fa      	ldrb	r2, [r7, #3]
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	4613      	mov	r3, r2
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	1a9b      	subs	r3, r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	440b      	add	r3, r1
 8004532:	331a      	adds	r3, #26
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d109      	bne.n	800454e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800453a:	78fa      	ldrb	r2, [r7, #3]
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	4613      	mov	r3, r2
 8004540:	011b      	lsls	r3, r3, #4
 8004542:	1a9b      	subs	r3, r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	440b      	add	r3, r1
 8004548:	3344      	adds	r3, #68	; 0x44
 800454a:	2200      	movs	r2, #0
 800454c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	78fa      	ldrb	r2, [r7, #3]
 8004554:	4611      	mov	r1, r2
 8004556:	4618      	mov	r0, r3
 8004558:	f006 fa23 	bl	800a9a2 <USB_HC_Halt>
 800455c:	e0b3      	b.n	80046c6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	78fa      	ldrb	r2, [r7, #3]
 8004564:	4611      	mov	r1, r2
 8004566:	4618      	mov	r0, r3
 8004568:	f005 fc77 	bl	8009e5a <USB_ReadChInterrupts>
 800456c:	4603      	mov	r3, r0
 800456e:	f003 0310 	and.w	r3, r3, #16
 8004572:	2b10      	cmp	r3, #16
 8004574:	f040 80a7 	bne.w	80046c6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004578:	78fa      	ldrb	r2, [r7, #3]
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	4613      	mov	r3, r2
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	1a9b      	subs	r3, r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	3326      	adds	r3, #38	; 0x26
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b03      	cmp	r3, #3
 800458c:	d11b      	bne.n	80045c6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800458e:	78fa      	ldrb	r2, [r7, #3]
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	1a9b      	subs	r3, r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	3344      	adds	r3, #68	; 0x44
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80045a2:	78fa      	ldrb	r2, [r7, #3]
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	4613      	mov	r3, r2
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	440b      	add	r3, r1
 80045b0:	334d      	adds	r3, #77	; 0x4d
 80045b2:	2204      	movs	r2, #4
 80045b4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	78fa      	ldrb	r2, [r7, #3]
 80045bc:	4611      	mov	r1, r2
 80045be:	4618      	mov	r0, r3
 80045c0:	f006 f9ef 	bl	800a9a2 <USB_HC_Halt>
 80045c4:	e03f      	b.n	8004646 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045c6:	78fa      	ldrb	r2, [r7, #3]
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	4613      	mov	r3, r2
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	1a9b      	subs	r3, r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	440b      	add	r3, r1
 80045d4:	3326      	adds	r3, #38	; 0x26
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00a      	beq.n	80045f2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80045dc:	78fa      	ldrb	r2, [r7, #3]
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	1a9b      	subs	r3, r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	3326      	adds	r3, #38	; 0x26
 80045ec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d129      	bne.n	8004646 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80045f2:	78fa      	ldrb	r2, [r7, #3]
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	440b      	add	r3, r1
 8004600:	3344      	adds	r3, #68	; 0x44
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	799b      	ldrb	r3, [r3, #6]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <HCD_HC_IN_IRQHandler+0xc2a>
 800460e:	78fa      	ldrb	r2, [r7, #3]
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	1a9b      	subs	r3, r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	331b      	adds	r3, #27
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d110      	bne.n	8004646 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004624:	78fa      	ldrb	r2, [r7, #3]
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	4613      	mov	r3, r2
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	1a9b      	subs	r3, r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	334d      	adds	r3, #77	; 0x4d
 8004634:	2204      	movs	r2, #4
 8004636:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	78fa      	ldrb	r2, [r7, #3]
 800463e:	4611      	mov	r1, r2
 8004640:	4618      	mov	r0, r3
 8004642:	f006 f9ae 	bl	800a9a2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004646:	78fa      	ldrb	r2, [r7, #3]
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	4613      	mov	r3, r2
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	1a9b      	subs	r3, r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	440b      	add	r3, r1
 8004654:	331b      	adds	r3, #27
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d129      	bne.n	80046b0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800465c:	78fa      	ldrb	r2, [r7, #3]
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	4613      	mov	r3, r2
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	1a9b      	subs	r3, r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	331b      	adds	r3, #27
 800466c:	2200      	movs	r2, #0
 800466e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004670:	78fb      	ldrb	r3, [r7, #3]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	4413      	add	r3, r2
 8004678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	78fa      	ldrb	r2, [r7, #3]
 8004680:	0151      	lsls	r1, r2, #5
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	440a      	add	r2, r1
 8004686:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800468a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800468e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004690:	78fb      	ldrb	r3, [r7, #3]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	4413      	add	r3, r2
 8004698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	78fa      	ldrb	r2, [r7, #3]
 80046a0:	0151      	lsls	r1, r2, #5
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	440a      	add	r2, r1
 80046a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046aa:	f043 0320 	orr.w	r3, r3, #32
 80046ae:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046bc:	461a      	mov	r2, r3
 80046be:	2310      	movs	r3, #16
 80046c0:	6093      	str	r3, [r2, #8]
 80046c2:	e000      	b.n	80046c6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80046c4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	460b      	mov	r3, r1
 80046d6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	78fa      	ldrb	r2, [r7, #3]
 80046e8:	4611      	mov	r1, r2
 80046ea:	4618      	mov	r0, r3
 80046ec:	f005 fbb5 	bl	8009e5a <USB_ReadChInterrupts>
 80046f0:	4603      	mov	r3, r0
 80046f2:	f003 0304 	and.w	r3, r3, #4
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d11b      	bne.n	8004732 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80046fa:	78fb      	ldrb	r3, [r7, #3]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	4413      	add	r3, r2
 8004702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004706:	461a      	mov	r2, r3
 8004708:	2304      	movs	r3, #4
 800470a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800470c:	78fa      	ldrb	r2, [r7, #3]
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	4613      	mov	r3, r2
 8004712:	011b      	lsls	r3, r3, #4
 8004714:	1a9b      	subs	r3, r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	334d      	adds	r3, #77	; 0x4d
 800471c:	2207      	movs	r2, #7
 800471e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	78fa      	ldrb	r2, [r7, #3]
 8004726:	4611      	mov	r1, r2
 8004728:	4618      	mov	r0, r3
 800472a:	f006 f93a 	bl	800a9a2 <USB_HC_Halt>
 800472e:	f000 bc6f 	b.w	8005010 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	78fa      	ldrb	r2, [r7, #3]
 8004738:	4611      	mov	r1, r2
 800473a:	4618      	mov	r0, r3
 800473c:	f005 fb8d 	bl	8009e5a <USB_ReadChInterrupts>
 8004740:	4603      	mov	r3, r0
 8004742:	f003 0320 	and.w	r3, r3, #32
 8004746:	2b20      	cmp	r3, #32
 8004748:	f040 8082 	bne.w	8004850 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800474c:	78fb      	ldrb	r3, [r7, #3]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	4413      	add	r3, r2
 8004754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004758:	461a      	mov	r2, r3
 800475a:	2320      	movs	r3, #32
 800475c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800475e:	78fa      	ldrb	r2, [r7, #3]
 8004760:	6879      	ldr	r1, [r7, #4]
 8004762:	4613      	mov	r3, r2
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	1a9b      	subs	r3, r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	440b      	add	r3, r1
 800476c:	3319      	adds	r3, #25
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d124      	bne.n	80047be <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004774:	78fa      	ldrb	r2, [r7, #3]
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	4613      	mov	r3, r2
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	1a9b      	subs	r3, r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	440b      	add	r3, r1
 8004782:	3319      	adds	r3, #25
 8004784:	2200      	movs	r2, #0
 8004786:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004788:	78fa      	ldrb	r2, [r7, #3]
 800478a:	6879      	ldr	r1, [r7, #4]
 800478c:	4613      	mov	r3, r2
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	334c      	adds	r3, #76	; 0x4c
 8004798:	2202      	movs	r2, #2
 800479a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800479c:	78fa      	ldrb	r2, [r7, #3]
 800479e:	6879      	ldr	r1, [r7, #4]
 80047a0:	4613      	mov	r3, r2
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	1a9b      	subs	r3, r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	440b      	add	r3, r1
 80047aa:	334d      	adds	r3, #77	; 0x4d
 80047ac:	2203      	movs	r2, #3
 80047ae:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	78fa      	ldrb	r2, [r7, #3]
 80047b6:	4611      	mov	r1, r2
 80047b8:	4618      	mov	r0, r3
 80047ba:	f006 f8f2 	bl	800a9a2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80047be:	78fa      	ldrb	r2, [r7, #3]
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	4613      	mov	r3, r2
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	1a9b      	subs	r3, r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	331a      	adds	r3, #26
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	f040 841d 	bne.w	8005010 <HCD_HC_OUT_IRQHandler+0x944>
 80047d6:	78fa      	ldrb	r2, [r7, #3]
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	4613      	mov	r3, r2
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	1a9b      	subs	r3, r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	440b      	add	r3, r1
 80047e4:	331b      	adds	r3, #27
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f040 8411 	bne.w	8005010 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80047ee:	78fa      	ldrb	r2, [r7, #3]
 80047f0:	6879      	ldr	r1, [r7, #4]
 80047f2:	4613      	mov	r3, r2
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	1a9b      	subs	r3, r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	440b      	add	r3, r1
 80047fc:	3326      	adds	r3, #38	; 0x26
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d009      	beq.n	8004818 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004804:	78fa      	ldrb	r2, [r7, #3]
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	4613      	mov	r3, r2
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	331b      	adds	r3, #27
 8004814:	2201      	movs	r2, #1
 8004816:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004818:	78fa      	ldrb	r2, [r7, #3]
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	4613      	mov	r3, r2
 800481e:	011b      	lsls	r3, r3, #4
 8004820:	1a9b      	subs	r3, r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	334d      	adds	r3, #77	; 0x4d
 8004828:	2203      	movs	r2, #3
 800482a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	78fa      	ldrb	r2, [r7, #3]
 8004832:	4611      	mov	r1, r2
 8004834:	4618      	mov	r0, r3
 8004836:	f006 f8b4 	bl	800a9a2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800483a:	78fa      	ldrb	r2, [r7, #3]
 800483c:	6879      	ldr	r1, [r7, #4]
 800483e:	4613      	mov	r3, r2
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	1a9b      	subs	r3, r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	440b      	add	r3, r1
 8004848:	3344      	adds	r3, #68	; 0x44
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	e3df      	b.n	8005010 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	78fa      	ldrb	r2, [r7, #3]
 8004856:	4611      	mov	r1, r2
 8004858:	4618      	mov	r0, r3
 800485a:	f005 fafe 	bl	8009e5a <USB_ReadChInterrupts>
 800485e:	4603      	mov	r3, r0
 8004860:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004868:	d111      	bne.n	800488e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800486a:	78fb      	ldrb	r3, [r7, #3]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	4413      	add	r3, r2
 8004872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004876:	461a      	mov	r2, r3
 8004878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800487c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	78fa      	ldrb	r2, [r7, #3]
 8004884:	4611      	mov	r1, r2
 8004886:	4618      	mov	r0, r3
 8004888:	f006 f88b 	bl	800a9a2 <USB_HC_Halt>
 800488c:	e3c0      	b.n	8005010 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	78fa      	ldrb	r2, [r7, #3]
 8004894:	4611      	mov	r1, r2
 8004896:	4618      	mov	r0, r3
 8004898:	f005 fadf 	bl	8009e5a <USB_ReadChInterrupts>
 800489c:	4603      	mov	r3, r0
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d168      	bne.n	8004978 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80048a6:	78fa      	ldrb	r2, [r7, #3]
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	4613      	mov	r3, r2
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	1a9b      	subs	r3, r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	440b      	add	r3, r1
 80048b4:	3344      	adds	r3, #68	; 0x44
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	78fa      	ldrb	r2, [r7, #3]
 80048c0:	4611      	mov	r1, r2
 80048c2:	4618      	mov	r0, r3
 80048c4:	f005 fac9 	bl	8009e5a <USB_ReadChInterrupts>
 80048c8:	4603      	mov	r3, r0
 80048ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ce:	2b40      	cmp	r3, #64	; 0x40
 80048d0:	d112      	bne.n	80048f8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80048d2:	78fa      	ldrb	r2, [r7, #3]
 80048d4:	6879      	ldr	r1, [r7, #4]
 80048d6:	4613      	mov	r3, r2
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	1a9b      	subs	r3, r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	440b      	add	r3, r1
 80048e0:	3319      	adds	r3, #25
 80048e2:	2201      	movs	r2, #1
 80048e4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80048e6:	78fb      	ldrb	r3, [r7, #3]
 80048e8:	015a      	lsls	r2, r3, #5
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f2:	461a      	mov	r2, r3
 80048f4:	2340      	movs	r3, #64	; 0x40
 80048f6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80048f8:	78fa      	ldrb	r2, [r7, #3]
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	4613      	mov	r3, r2
 80048fe:	011b      	lsls	r3, r3, #4
 8004900:	1a9b      	subs	r3, r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	440b      	add	r3, r1
 8004906:	331b      	adds	r3, #27
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d019      	beq.n	8004942 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800490e:	78fa      	ldrb	r2, [r7, #3]
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	4613      	mov	r3, r2
 8004914:	011b      	lsls	r3, r3, #4
 8004916:	1a9b      	subs	r3, r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	440b      	add	r3, r1
 800491c:	331b      	adds	r3, #27
 800491e:	2200      	movs	r2, #0
 8004920:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004922:	78fb      	ldrb	r3, [r7, #3]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4413      	add	r3, r2
 800492a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	78fa      	ldrb	r2, [r7, #3]
 8004932:	0151      	lsls	r1, r2, #5
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	440a      	add	r2, r1
 8004938:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800493c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004940:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004942:	78fb      	ldrb	r3, [r7, #3]
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	4413      	add	r3, r2
 800494a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800494e:	461a      	mov	r2, r3
 8004950:	2301      	movs	r3, #1
 8004952:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004954:	78fa      	ldrb	r2, [r7, #3]
 8004956:	6879      	ldr	r1, [r7, #4]
 8004958:	4613      	mov	r3, r2
 800495a:	011b      	lsls	r3, r3, #4
 800495c:	1a9b      	subs	r3, r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	440b      	add	r3, r1
 8004962:	334d      	adds	r3, #77	; 0x4d
 8004964:	2201      	movs	r2, #1
 8004966:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	78fa      	ldrb	r2, [r7, #3]
 800496e:	4611      	mov	r1, r2
 8004970:	4618      	mov	r0, r3
 8004972:	f006 f816 	bl	800a9a2 <USB_HC_Halt>
 8004976:	e34b      	b.n	8005010 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	78fa      	ldrb	r2, [r7, #3]
 800497e:	4611      	mov	r1, r2
 8004980:	4618      	mov	r0, r3
 8004982:	f005 fa6a 	bl	8009e5a <USB_ReadChInterrupts>
 8004986:	4603      	mov	r3, r0
 8004988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498c:	2b40      	cmp	r3, #64	; 0x40
 800498e:	d139      	bne.n	8004a04 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004990:	78fa      	ldrb	r2, [r7, #3]
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	4613      	mov	r3, r2
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	1a9b      	subs	r3, r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	334d      	adds	r3, #77	; 0x4d
 80049a0:	2205      	movs	r2, #5
 80049a2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80049a4:	78fa      	ldrb	r2, [r7, #3]
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	4613      	mov	r3, r2
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	1a9b      	subs	r3, r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	440b      	add	r3, r1
 80049b2:	331a      	adds	r3, #26
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d109      	bne.n	80049ce <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80049ba:	78fa      	ldrb	r2, [r7, #3]
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	4613      	mov	r3, r2
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	3319      	adds	r3, #25
 80049ca:	2201      	movs	r2, #1
 80049cc:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80049ce:	78fa      	ldrb	r2, [r7, #3]
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	4613      	mov	r3, r2
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	1a9b      	subs	r3, r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	440b      	add	r3, r1
 80049dc:	3344      	adds	r3, #68	; 0x44
 80049de:	2200      	movs	r2, #0
 80049e0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	78fa      	ldrb	r2, [r7, #3]
 80049e8:	4611      	mov	r1, r2
 80049ea:	4618      	mov	r0, r3
 80049ec:	f005 ffd9 	bl	800a9a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80049f0:	78fb      	ldrb	r3, [r7, #3]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049fc:	461a      	mov	r2, r3
 80049fe:	2340      	movs	r3, #64	; 0x40
 8004a00:	6093      	str	r3, [r2, #8]
 8004a02:	e305      	b.n	8005010 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	78fa      	ldrb	r2, [r7, #3]
 8004a0a:	4611      	mov	r1, r2
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f005 fa24 	bl	8009e5a <USB_ReadChInterrupts>
 8004a12:	4603      	mov	r3, r0
 8004a14:	f003 0308 	and.w	r3, r3, #8
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d11a      	bne.n	8004a52 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004a1c:	78fb      	ldrb	r3, [r7, #3]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a28:	461a      	mov	r2, r3
 8004a2a:	2308      	movs	r3, #8
 8004a2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004a2e:	78fa      	ldrb	r2, [r7, #3]
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	4613      	mov	r3, r2
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	334d      	adds	r3, #77	; 0x4d
 8004a3e:	2206      	movs	r2, #6
 8004a40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	78fa      	ldrb	r2, [r7, #3]
 8004a48:	4611      	mov	r1, r2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f005 ffa9 	bl	800a9a2 <USB_HC_Halt>
 8004a50:	e2de      	b.n	8005010 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	78fa      	ldrb	r2, [r7, #3]
 8004a58:	4611      	mov	r1, r2
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f005 f9fd 	bl	8009e5a <USB_ReadChInterrupts>
 8004a60:	4603      	mov	r3, r0
 8004a62:	f003 0310 	and.w	r3, r3, #16
 8004a66:	2b10      	cmp	r3, #16
 8004a68:	d144      	bne.n	8004af4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004a6a:	78fa      	ldrb	r2, [r7, #3]
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	1a9b      	subs	r3, r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	440b      	add	r3, r1
 8004a78:	3344      	adds	r3, #68	; 0x44
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004a7e:	78fa      	ldrb	r2, [r7, #3]
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	4613      	mov	r3, r2
 8004a84:	011b      	lsls	r3, r3, #4
 8004a86:	1a9b      	subs	r3, r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	334d      	adds	r3, #77	; 0x4d
 8004a8e:	2204      	movs	r2, #4
 8004a90:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004a92:	78fa      	ldrb	r2, [r7, #3]
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	3319      	adds	r3, #25
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d114      	bne.n	8004ad2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004aa8:	78fa      	ldrb	r2, [r7, #3]
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	4613      	mov	r3, r2
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	1a9b      	subs	r3, r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	3318      	adds	r3, #24
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d109      	bne.n	8004ad2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004abe:	78fa      	ldrb	r2, [r7, #3]
 8004ac0:	6879      	ldr	r1, [r7, #4]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	1a9b      	subs	r3, r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	440b      	add	r3, r1
 8004acc:	3319      	adds	r3, #25
 8004ace:	2201      	movs	r2, #1
 8004ad0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	78fa      	ldrb	r2, [r7, #3]
 8004ad8:	4611      	mov	r1, r2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f005 ff61 	bl	800a9a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aec:	461a      	mov	r2, r3
 8004aee:	2310      	movs	r3, #16
 8004af0:	6093      	str	r3, [r2, #8]
 8004af2:	e28d      	b.n	8005010 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	78fa      	ldrb	r2, [r7, #3]
 8004afa:	4611      	mov	r1, r2
 8004afc:	4618      	mov	r0, r3
 8004afe:	f005 f9ac 	bl	8009e5a <USB_ReadChInterrupts>
 8004b02:	4603      	mov	r3, r0
 8004b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b08:	2b80      	cmp	r3, #128	; 0x80
 8004b0a:	d169      	bne.n	8004be0 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	799b      	ldrb	r3, [r3, #6]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d111      	bne.n	8004b38 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004b14:	78fa      	ldrb	r2, [r7, #3]
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	1a9b      	subs	r3, r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	334d      	adds	r3, #77	; 0x4d
 8004b24:	2207      	movs	r2, #7
 8004b26:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	78fa      	ldrb	r2, [r7, #3]
 8004b2e:	4611      	mov	r1, r2
 8004b30:	4618      	mov	r0, r3
 8004b32:	f005 ff36 	bl	800a9a2 <USB_HC_Halt>
 8004b36:	e049      	b.n	8004bcc <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004b38:	78fa      	ldrb	r2, [r7, #3]
 8004b3a:	6879      	ldr	r1, [r7, #4]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	1a9b      	subs	r3, r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	440b      	add	r3, r1
 8004b46:	3344      	adds	r3, #68	; 0x44
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	1c59      	adds	r1, r3, #1
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	1a9b      	subs	r3, r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4403      	add	r3, r0
 8004b58:	3344      	adds	r3, #68	; 0x44
 8004b5a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b5c:	78fa      	ldrb	r2, [r7, #3]
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	4613      	mov	r3, r2
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	1a9b      	subs	r3, r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	3344      	adds	r3, #68	; 0x44
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d922      	bls.n	8004bb8 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004b72:	78fa      	ldrb	r2, [r7, #3]
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	4613      	mov	r3, r2
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	1a9b      	subs	r3, r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	440b      	add	r3, r1
 8004b80:	3344      	adds	r3, #68	; 0x44
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b86:	78fa      	ldrb	r2, [r7, #3]
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	1a9b      	subs	r3, r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	440b      	add	r3, r1
 8004b94:	334c      	adds	r3, #76	; 0x4c
 8004b96:	2204      	movs	r2, #4
 8004b98:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004b9a:	78fa      	ldrb	r2, [r7, #3]
 8004b9c:	6879      	ldr	r1, [r7, #4]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	011b      	lsls	r3, r3, #4
 8004ba2:	1a9b      	subs	r3, r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	440b      	add	r3, r1
 8004ba8:	334c      	adds	r3, #76	; 0x4c
 8004baa:	781a      	ldrb	r2, [r3, #0]
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	4619      	mov	r1, r3
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f008 fa5f 	bl	800d074 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004bb6:	e009      	b.n	8004bcc <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004bb8:	78fa      	ldrb	r2, [r7, #3]
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	1a9b      	subs	r3, r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	334c      	adds	r3, #76	; 0x4c
 8004bc8:	2202      	movs	r2, #2
 8004bca:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd8:	461a      	mov	r2, r3
 8004bda:	2380      	movs	r3, #128	; 0x80
 8004bdc:	6093      	str	r3, [r2, #8]
 8004bde:	e217      	b.n	8005010 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	78fa      	ldrb	r2, [r7, #3]
 8004be6:	4611      	mov	r1, r2
 8004be8:	4618      	mov	r0, r3
 8004bea:	f005 f936 	bl	8009e5a <USB_ReadChInterrupts>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf8:	d11b      	bne.n	8004c32 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004bfa:	78fa      	ldrb	r2, [r7, #3]
 8004bfc:	6879      	ldr	r1, [r7, #4]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	011b      	lsls	r3, r3, #4
 8004c02:	1a9b      	subs	r3, r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	440b      	add	r3, r1
 8004c08:	334d      	adds	r3, #77	; 0x4d
 8004c0a:	2209      	movs	r2, #9
 8004c0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	78fa      	ldrb	r2, [r7, #3]
 8004c14:	4611      	mov	r1, r2
 8004c16:	4618      	mov	r0, r3
 8004c18:	f005 fec3 	bl	800a9a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004c1c:	78fb      	ldrb	r3, [r7, #3]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c28:	461a      	mov	r2, r3
 8004c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c2e:	6093      	str	r3, [r2, #8]
 8004c30:	e1ee      	b.n	8005010 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	78fa      	ldrb	r2, [r7, #3]
 8004c38:	4611      	mov	r1, r2
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f005 f90d 	bl	8009e5a <USB_ReadChInterrupts>
 8004c40:	4603      	mov	r3, r0
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	f040 81df 	bne.w	800500a <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c58:	461a      	mov	r2, r3
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004c5e:	78fa      	ldrb	r2, [r7, #3]
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	4613      	mov	r3, r2
 8004c64:	011b      	lsls	r3, r3, #4
 8004c66:	1a9b      	subs	r3, r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	334d      	adds	r3, #77	; 0x4d
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	f040 8093 	bne.w	8004d9c <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c76:	78fa      	ldrb	r2, [r7, #3]
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	1a9b      	subs	r3, r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	440b      	add	r3, r1
 8004c84:	334d      	adds	r3, #77	; 0x4d
 8004c86:	2202      	movs	r2, #2
 8004c88:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004c8a:	78fa      	ldrb	r2, [r7, #3]
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	011b      	lsls	r3, r3, #4
 8004c92:	1a9b      	subs	r3, r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	440b      	add	r3, r1
 8004c98:	334c      	adds	r3, #76	; 0x4c
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004c9e:	78fa      	ldrb	r2, [r7, #3]
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	1a9b      	subs	r3, r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	440b      	add	r3, r1
 8004cac:	3326      	adds	r3, #38	; 0x26
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d00b      	beq.n	8004ccc <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004cb4:	78fa      	ldrb	r2, [r7, #3]
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	1a9b      	subs	r3, r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	3326      	adds	r3, #38	; 0x26
 8004cc4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	f040 8190 	bne.w	8004fec <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	799b      	ldrb	r3, [r3, #6]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d115      	bne.n	8004d00 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004cd4:	78fa      	ldrb	r2, [r7, #3]
 8004cd6:	6879      	ldr	r1, [r7, #4]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	1a9b      	subs	r3, r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	440b      	add	r3, r1
 8004ce2:	333d      	adds	r3, #61	; 0x3d
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	78fa      	ldrb	r2, [r7, #3]
 8004ce8:	f083 0301 	eor.w	r3, r3, #1
 8004cec:	b2d8      	uxtb	r0, r3
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	011b      	lsls	r3, r3, #4
 8004cf4:	1a9b      	subs	r3, r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	333d      	adds	r3, #61	; 0x3d
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	799b      	ldrb	r3, [r3, #6]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	f040 8171 	bne.w	8004fec <HCD_HC_OUT_IRQHandler+0x920>
 8004d0a:	78fa      	ldrb	r2, [r7, #3]
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	011b      	lsls	r3, r3, #4
 8004d12:	1a9b      	subs	r3, r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	440b      	add	r3, r1
 8004d18:	3334      	adds	r3, #52	; 0x34
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 8165 	beq.w	8004fec <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004d22:	78fa      	ldrb	r2, [r7, #3]
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	4613      	mov	r3, r2
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	1a9b      	subs	r3, r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	440b      	add	r3, r1
 8004d30:	3334      	adds	r3, #52	; 0x34
 8004d32:	6819      	ldr	r1, [r3, #0]
 8004d34:	78fa      	ldrb	r2, [r7, #3]
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	1a9b      	subs	r3, r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4403      	add	r3, r0
 8004d42:	3328      	adds	r3, #40	; 0x28
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	440b      	add	r3, r1
 8004d48:	1e59      	subs	r1, r3, #1
 8004d4a:	78fa      	ldrb	r2, [r7, #3]
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	1a9b      	subs	r3, r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4403      	add	r3, r0
 8004d58:	3328      	adds	r3, #40	; 0x28
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d60:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 813f 	beq.w	8004fec <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004d6e:	78fa      	ldrb	r2, [r7, #3]
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	4613      	mov	r3, r2
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	1a9b      	subs	r3, r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	440b      	add	r3, r1
 8004d7c:	333d      	adds	r3, #61	; 0x3d
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	78fa      	ldrb	r2, [r7, #3]
 8004d82:	f083 0301 	eor.w	r3, r3, #1
 8004d86:	b2d8      	uxtb	r0, r3
 8004d88:	6879      	ldr	r1, [r7, #4]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	1a9b      	subs	r3, r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	440b      	add	r3, r1
 8004d94:	333d      	adds	r3, #61	; 0x3d
 8004d96:	4602      	mov	r2, r0
 8004d98:	701a      	strb	r2, [r3, #0]
 8004d9a:	e127      	b.n	8004fec <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004d9c:	78fa      	ldrb	r2, [r7, #3]
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	4613      	mov	r3, r2
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	1a9b      	subs	r3, r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	440b      	add	r3, r1
 8004daa:	334d      	adds	r3, #77	; 0x4d
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d120      	bne.n	8004df4 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004db2:	78fa      	ldrb	r2, [r7, #3]
 8004db4:	6879      	ldr	r1, [r7, #4]
 8004db6:	4613      	mov	r3, r2
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	1a9b      	subs	r3, r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	440b      	add	r3, r1
 8004dc0:	334d      	adds	r3, #77	; 0x4d
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004dc6:	78fa      	ldrb	r2, [r7, #3]
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	011b      	lsls	r3, r3, #4
 8004dce:	1a9b      	subs	r3, r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	440b      	add	r3, r1
 8004dd4:	331b      	adds	r3, #27
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	f040 8107 	bne.w	8004fec <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004dde:	78fa      	ldrb	r2, [r7, #3]
 8004de0:	6879      	ldr	r1, [r7, #4]
 8004de2:	4613      	mov	r3, r2
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	1a9b      	subs	r3, r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	440b      	add	r3, r1
 8004dec:	334c      	adds	r3, #76	; 0x4c
 8004dee:	2202      	movs	r2, #2
 8004df0:	701a      	strb	r2, [r3, #0]
 8004df2:	e0fb      	b.n	8004fec <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004df4:	78fa      	ldrb	r2, [r7, #3]
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	011b      	lsls	r3, r3, #4
 8004dfc:	1a9b      	subs	r3, r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	440b      	add	r3, r1
 8004e02:	334d      	adds	r3, #77	; 0x4d
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d13a      	bne.n	8004e80 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e0a:	78fa      	ldrb	r2, [r7, #3]
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	1a9b      	subs	r3, r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	440b      	add	r3, r1
 8004e18:	334d      	adds	r3, #77	; 0x4d
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004e1e:	78fa      	ldrb	r2, [r7, #3]
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	4613      	mov	r3, r2
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	1a9b      	subs	r3, r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	440b      	add	r3, r1
 8004e2c:	334c      	adds	r3, #76	; 0x4c
 8004e2e:	2202      	movs	r2, #2
 8004e30:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004e32:	78fa      	ldrb	r2, [r7, #3]
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	4613      	mov	r3, r2
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	1a9b      	subs	r3, r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	440b      	add	r3, r1
 8004e40:	331b      	adds	r3, #27
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	f040 80d1 	bne.w	8004fec <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004e4a:	78fa      	ldrb	r2, [r7, #3]
 8004e4c:	6879      	ldr	r1, [r7, #4]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	011b      	lsls	r3, r3, #4
 8004e52:	1a9b      	subs	r3, r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	440b      	add	r3, r1
 8004e58:	331b      	adds	r3, #27
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004e5e:	78fb      	ldrb	r3, [r7, #3]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	78fa      	ldrb	r2, [r7, #3]
 8004e6e:	0151      	lsls	r1, r2, #5
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	440a      	add	r2, r1
 8004e74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e7c:	6053      	str	r3, [r2, #4]
 8004e7e:	e0b5      	b.n	8004fec <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004e80:	78fa      	ldrb	r2, [r7, #3]
 8004e82:	6879      	ldr	r1, [r7, #4]
 8004e84:	4613      	mov	r3, r2
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	1a9b      	subs	r3, r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	440b      	add	r3, r1
 8004e8e:	334d      	adds	r3, #77	; 0x4d
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b05      	cmp	r3, #5
 8004e94:	d114      	bne.n	8004ec0 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e96:	78fa      	ldrb	r2, [r7, #3]
 8004e98:	6879      	ldr	r1, [r7, #4]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	011b      	lsls	r3, r3, #4
 8004e9e:	1a9b      	subs	r3, r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	440b      	add	r3, r1
 8004ea4:	334d      	adds	r3, #77	; 0x4d
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004eaa:	78fa      	ldrb	r2, [r7, #3]
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	1a9b      	subs	r3, r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	440b      	add	r3, r1
 8004eb8:	334c      	adds	r3, #76	; 0x4c
 8004eba:	2202      	movs	r2, #2
 8004ebc:	701a      	strb	r2, [r3, #0]
 8004ebe:	e095      	b.n	8004fec <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004ec0:	78fa      	ldrb	r2, [r7, #3]
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	1a9b      	subs	r3, r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	440b      	add	r3, r1
 8004ece:	334d      	adds	r3, #77	; 0x4d
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b06      	cmp	r3, #6
 8004ed4:	d114      	bne.n	8004f00 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ed6:	78fa      	ldrb	r2, [r7, #3]
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	1a9b      	subs	r3, r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	334d      	adds	r3, #77	; 0x4d
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004eea:	78fa      	ldrb	r2, [r7, #3]
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	1a9b      	subs	r3, r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	334c      	adds	r3, #76	; 0x4c
 8004efa:	2205      	movs	r2, #5
 8004efc:	701a      	strb	r2, [r3, #0]
 8004efe:	e075      	b.n	8004fec <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004f00:	78fa      	ldrb	r2, [r7, #3]
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	4613      	mov	r3, r2
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	1a9b      	subs	r3, r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	334d      	adds	r3, #77	; 0x4d
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	2b07      	cmp	r3, #7
 8004f14:	d00a      	beq.n	8004f2c <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004f16:	78fa      	ldrb	r2, [r7, #3]
 8004f18:	6879      	ldr	r1, [r7, #4]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	011b      	lsls	r3, r3, #4
 8004f1e:	1a9b      	subs	r3, r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	440b      	add	r3, r1
 8004f24:	334d      	adds	r3, #77	; 0x4d
 8004f26:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004f28:	2b09      	cmp	r3, #9
 8004f2a:	d170      	bne.n	800500e <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f2c:	78fa      	ldrb	r2, [r7, #3]
 8004f2e:	6879      	ldr	r1, [r7, #4]
 8004f30:	4613      	mov	r3, r2
 8004f32:	011b      	lsls	r3, r3, #4
 8004f34:	1a9b      	subs	r3, r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	440b      	add	r3, r1
 8004f3a:	334d      	adds	r3, #77	; 0x4d
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004f40:	78fa      	ldrb	r2, [r7, #3]
 8004f42:	6879      	ldr	r1, [r7, #4]
 8004f44:	4613      	mov	r3, r2
 8004f46:	011b      	lsls	r3, r3, #4
 8004f48:	1a9b      	subs	r3, r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	440b      	add	r3, r1
 8004f4e:	3344      	adds	r3, #68	; 0x44
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	1c59      	adds	r1, r3, #1
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	4613      	mov	r3, r2
 8004f58:	011b      	lsls	r3, r3, #4
 8004f5a:	1a9b      	subs	r3, r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4403      	add	r3, r0
 8004f60:	3344      	adds	r3, #68	; 0x44
 8004f62:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004f64:	78fa      	ldrb	r2, [r7, #3]
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	1a9b      	subs	r3, r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	440b      	add	r3, r1
 8004f72:	3344      	adds	r3, #68	; 0x44
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d914      	bls.n	8004fa4 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004f7a:	78fa      	ldrb	r2, [r7, #3]
 8004f7c:	6879      	ldr	r1, [r7, #4]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	1a9b      	subs	r3, r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	440b      	add	r3, r1
 8004f88:	3344      	adds	r3, #68	; 0x44
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004f8e:	78fa      	ldrb	r2, [r7, #3]
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	4613      	mov	r3, r2
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	1a9b      	subs	r3, r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	440b      	add	r3, r1
 8004f9c:	334c      	adds	r3, #76	; 0x4c
 8004f9e:	2204      	movs	r2, #4
 8004fa0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004fa2:	e022      	b.n	8004fea <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004fa4:	78fa      	ldrb	r2, [r7, #3]
 8004fa6:	6879      	ldr	r1, [r7, #4]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	1a9b      	subs	r3, r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	440b      	add	r3, r1
 8004fb2:	334c      	adds	r3, #76	; 0x4c
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004fb8:	78fb      	ldrb	r3, [r7, #3]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fce:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fd6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004fd8:	78fb      	ldrb	r3, [r7, #3]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004fea:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004fec:	78fa      	ldrb	r2, [r7, #3]
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	1a9b      	subs	r3, r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	334c      	adds	r3, #76	; 0x4c
 8004ffc:	781a      	ldrb	r2, [r3, #0]
 8004ffe:	78fb      	ldrb	r3, [r7, #3]
 8005000:	4619      	mov	r1, r3
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f008 f836 	bl	800d074 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005008:	e002      	b.n	8005010 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800500a:	bf00      	nop
 800500c:	e000      	b.n	8005010 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800500e:	bf00      	nop
  }
}
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b08a      	sub	sp, #40	; 0x28
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	0c5b      	lsrs	r3, r3, #17
 800503c:	f003 030f 	and.w	r3, r3, #15
 8005040:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	091b      	lsrs	r3, r3, #4
 8005046:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800504a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2b02      	cmp	r3, #2
 8005050:	d004      	beq.n	800505c <HCD_RXQLVL_IRQHandler+0x46>
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2b05      	cmp	r3, #5
 8005056:	f000 80b6 	beq.w	80051c6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800505a:	e0b7      	b.n	80051cc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 80b3 	beq.w	80051ca <HCD_RXQLVL_IRQHandler+0x1b4>
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	4613      	mov	r3, r2
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	1a9b      	subs	r3, r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	440b      	add	r3, r1
 8005072:	332c      	adds	r3, #44	; 0x2c
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 80a7 	beq.w	80051ca <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800507c:	6879      	ldr	r1, [r7, #4]
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	4613      	mov	r3, r2
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	1a9b      	subs	r3, r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	440b      	add	r3, r1
 800508a:	3338      	adds	r3, #56	; 0x38
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	18d1      	adds	r1, r2, r3
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	4613      	mov	r3, r2
 8005098:	011b      	lsls	r3, r3, #4
 800509a:	1a9b      	subs	r3, r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4403      	add	r3, r0
 80050a0:	3334      	adds	r3, #52	; 0x34
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4299      	cmp	r1, r3
 80050a6:	f200 8083 	bhi.w	80051b0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6818      	ldr	r0, [r3, #0]
 80050ae:	6879      	ldr	r1, [r7, #4]
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	4613      	mov	r3, r2
 80050b4:	011b      	lsls	r3, r3, #4
 80050b6:	1a9b      	subs	r3, r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	440b      	add	r3, r1
 80050bc:	332c      	adds	r3, #44	; 0x2c
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	b292      	uxth	r2, r2
 80050c4:	4619      	mov	r1, r3
 80050c6:	f004 fe5d 	bl	8009d84 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	4613      	mov	r3, r2
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	1a9b      	subs	r3, r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	440b      	add	r3, r1
 80050d8:	332c      	adds	r3, #44	; 0x2c
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	18d1      	adds	r1, r2, r3
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	4613      	mov	r3, r2
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	1a9b      	subs	r3, r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4403      	add	r3, r0
 80050ee:	332c      	adds	r3, #44	; 0x2c
 80050f0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	4613      	mov	r3, r2
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	1a9b      	subs	r3, r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	440b      	add	r3, r1
 8005100:	3338      	adds	r3, #56	; 0x38
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	18d1      	adds	r1, r2, r3
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	4613      	mov	r3, r2
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	1a9b      	subs	r3, r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4403      	add	r3, r0
 8005116:	3338      	adds	r3, #56	; 0x38
 8005118:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	4413      	add	r3, r2
 8005122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	0cdb      	lsrs	r3, r3, #19
 800512a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800512e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005130:	6879      	ldr	r1, [r7, #4]
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	4613      	mov	r3, r2
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	1a9b      	subs	r3, r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	440b      	add	r3, r1
 800513e:	3328      	adds	r3, #40	; 0x28
 8005140:	881b      	ldrh	r3, [r3, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	4293      	cmp	r3, r2
 8005148:	d13f      	bne.n	80051ca <HCD_RXQLVL_IRQHandler+0x1b4>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d03c      	beq.n	80051ca <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	4413      	add	r3, r2
 8005158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005166:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800516e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	4413      	add	r3, r2
 8005178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517c:	461a      	mov	r2, r3
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	4613      	mov	r3, r2
 8005188:	011b      	lsls	r3, r3, #4
 800518a:	1a9b      	subs	r3, r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	440b      	add	r3, r1
 8005190:	333c      	adds	r3, #60	; 0x3c
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	f083 0301 	eor.w	r3, r3, #1
 8005198:	b2d8      	uxtb	r0, r3
 800519a:	6879      	ldr	r1, [r7, #4]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	4613      	mov	r3, r2
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	1a9b      	subs	r3, r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	440b      	add	r3, r1
 80051a8:	333c      	adds	r3, #60	; 0x3c
 80051aa:	4602      	mov	r2, r0
 80051ac:	701a      	strb	r2, [r3, #0]
      break;
 80051ae:	e00c      	b.n	80051ca <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	4613      	mov	r3, r2
 80051b6:	011b      	lsls	r3, r3, #4
 80051b8:	1a9b      	subs	r3, r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	440b      	add	r3, r1
 80051be:	334c      	adds	r3, #76	; 0x4c
 80051c0:	2204      	movs	r2, #4
 80051c2:	701a      	strb	r2, [r3, #0]
      break;
 80051c4:	e001      	b.n	80051ca <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80051c6:	bf00      	nop
 80051c8:	e000      	b.n	80051cc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80051ca:	bf00      	nop
  }
}
 80051cc:	bf00      	nop
 80051ce:	3728      	adds	r7, #40	; 0x28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005200:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b02      	cmp	r3, #2
 800520a:	d10b      	bne.n	8005224 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b01      	cmp	r3, #1
 8005214:	d102      	bne.n	800521c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f007 ff10 	bl	800d03c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f043 0302 	orr.w	r3, r3, #2
 8005222:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f003 0308 	and.w	r3, r3, #8
 800522a:	2b08      	cmp	r3, #8
 800522c:	d132      	bne.n	8005294 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f043 0308 	orr.w	r3, r3, #8
 8005234:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f003 0304 	and.w	r3, r3, #4
 800523c:	2b04      	cmp	r3, #4
 800523e:	d126      	bne.n	800528e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	7a5b      	ldrb	r3, [r3, #9]
 8005244:	2b02      	cmp	r3, #2
 8005246:	d113      	bne.n	8005270 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800524e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005252:	d106      	bne.n	8005262 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2102      	movs	r1, #2
 800525a:	4618      	mov	r0, r3
 800525c:	f004 ff22 	bl	800a0a4 <USB_InitFSLSPClkSel>
 8005260:	e011      	b.n	8005286 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2101      	movs	r1, #1
 8005268:	4618      	mov	r0, r3
 800526a:	f004 ff1b 	bl	800a0a4 <USB_InitFSLSPClkSel>
 800526e:	e00a      	b.n	8005286 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	79db      	ldrb	r3, [r3, #7]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d106      	bne.n	8005286 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800527e:	461a      	mov	r2, r3
 8005280:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005284:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f007 ff02 	bl	800d090 <HAL_HCD_PortEnabled_Callback>
 800528c:	e002      	b.n	8005294 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f007 ff0c 	bl	800d0ac <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f003 0320 	and.w	r3, r3, #32
 800529a:	2b20      	cmp	r3, #32
 800529c:	d103      	bne.n	80052a6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	f043 0320 	orr.w	r3, r3, #32
 80052a4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052ac:	461a      	mov	r2, r3
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	6013      	str	r3, [r2, #0]
}
 80052b2:	bf00      	nop
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e12b      	b.n	8005526 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d106      	bne.n	80052e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7fc fbde 	bl	8001aa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2224      	movs	r2, #36	; 0x24
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0201 	bic.w	r2, r2, #1
 80052fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800530e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800531e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005320:	f002 f900 	bl	8007524 <HAL_RCC_GetPCLK1Freq>
 8005324:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	4a81      	ldr	r2, [pc, #516]	; (8005530 <HAL_I2C_Init+0x274>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d807      	bhi.n	8005340 <HAL_I2C_Init+0x84>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4a80      	ldr	r2, [pc, #512]	; (8005534 <HAL_I2C_Init+0x278>)
 8005334:	4293      	cmp	r3, r2
 8005336:	bf94      	ite	ls
 8005338:	2301      	movls	r3, #1
 800533a:	2300      	movhi	r3, #0
 800533c:	b2db      	uxtb	r3, r3
 800533e:	e006      	b.n	800534e <HAL_I2C_Init+0x92>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4a7d      	ldr	r2, [pc, #500]	; (8005538 <HAL_I2C_Init+0x27c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	bf94      	ite	ls
 8005348:	2301      	movls	r3, #1
 800534a:	2300      	movhi	r3, #0
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e0e7      	b.n	8005526 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4a78      	ldr	r2, [pc, #480]	; (800553c <HAL_I2C_Init+0x280>)
 800535a:	fba2 2303 	umull	r2, r3, r2, r3
 800535e:	0c9b      	lsrs	r3, r3, #18
 8005360:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	430a      	orrs	r2, r1
 8005374:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	4a6a      	ldr	r2, [pc, #424]	; (8005530 <HAL_I2C_Init+0x274>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d802      	bhi.n	8005390 <HAL_I2C_Init+0xd4>
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	3301      	adds	r3, #1
 800538e:	e009      	b.n	80053a4 <HAL_I2C_Init+0xe8>
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005396:	fb02 f303 	mul.w	r3, r2, r3
 800539a:	4a69      	ldr	r2, [pc, #420]	; (8005540 <HAL_I2C_Init+0x284>)
 800539c:	fba2 2303 	umull	r2, r3, r2, r3
 80053a0:	099b      	lsrs	r3, r3, #6
 80053a2:	3301      	adds	r3, #1
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6812      	ldr	r2, [r2, #0]
 80053a8:	430b      	orrs	r3, r1
 80053aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80053b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	495c      	ldr	r1, [pc, #368]	; (8005530 <HAL_I2C_Init+0x274>)
 80053c0:	428b      	cmp	r3, r1
 80053c2:	d819      	bhi.n	80053f8 <HAL_I2C_Init+0x13c>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	1e59      	subs	r1, r3, #1
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	005b      	lsls	r3, r3, #1
 80053ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80053d2:	1c59      	adds	r1, r3, #1
 80053d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80053d8:	400b      	ands	r3, r1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00a      	beq.n	80053f4 <HAL_I2C_Init+0x138>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	1e59      	subs	r1, r3, #1
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80053ec:	3301      	adds	r3, #1
 80053ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053f2:	e051      	b.n	8005498 <HAL_I2C_Init+0x1dc>
 80053f4:	2304      	movs	r3, #4
 80053f6:	e04f      	b.n	8005498 <HAL_I2C_Init+0x1dc>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d111      	bne.n	8005424 <HAL_I2C_Init+0x168>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	1e58      	subs	r0, r3, #1
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6859      	ldr	r1, [r3, #4]
 8005408:	460b      	mov	r3, r1
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	440b      	add	r3, r1
 800540e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005412:	3301      	adds	r3, #1
 8005414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005418:	2b00      	cmp	r3, #0
 800541a:	bf0c      	ite	eq
 800541c:	2301      	moveq	r3, #1
 800541e:	2300      	movne	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	e012      	b.n	800544a <HAL_I2C_Init+0x18e>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	1e58      	subs	r0, r3, #1
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6859      	ldr	r1, [r3, #4]
 800542c:	460b      	mov	r3, r1
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	440b      	add	r3, r1
 8005432:	0099      	lsls	r1, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	fbb0 f3f3 	udiv	r3, r0, r3
 800543a:	3301      	adds	r3, #1
 800543c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005440:	2b00      	cmp	r3, #0
 8005442:	bf0c      	ite	eq
 8005444:	2301      	moveq	r3, #1
 8005446:	2300      	movne	r3, #0
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <HAL_I2C_Init+0x196>
 800544e:	2301      	movs	r3, #1
 8005450:	e022      	b.n	8005498 <HAL_I2C_Init+0x1dc>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10e      	bne.n	8005478 <HAL_I2C_Init+0x1bc>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	1e58      	subs	r0, r3, #1
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6859      	ldr	r1, [r3, #4]
 8005462:	460b      	mov	r3, r1
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	440b      	add	r3, r1
 8005468:	fbb0 f3f3 	udiv	r3, r0, r3
 800546c:	3301      	adds	r3, #1
 800546e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005476:	e00f      	b.n	8005498 <HAL_I2C_Init+0x1dc>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	1e58      	subs	r0, r3, #1
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6859      	ldr	r1, [r3, #4]
 8005480:	460b      	mov	r3, r1
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	0099      	lsls	r1, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	fbb0 f3f3 	udiv	r3, r0, r3
 800548e:	3301      	adds	r3, #1
 8005490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005494:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005498:	6879      	ldr	r1, [r7, #4]
 800549a:	6809      	ldr	r1, [r1, #0]
 800549c:	4313      	orrs	r3, r2
 800549e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	69da      	ldr	r2, [r3, #28]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80054c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6911      	ldr	r1, [r2, #16]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	68d2      	ldr	r2, [r2, #12]
 80054d2:	4311      	orrs	r1, r2
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6812      	ldr	r2, [r2, #0]
 80054d8:	430b      	orrs	r3, r1
 80054da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	695a      	ldr	r2, [r3, #20]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 0201 	orr.w	r2, r2, #1
 8005506:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2220      	movs	r2, #32
 8005512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	000186a0 	.word	0x000186a0
 8005534:	001e847f 	.word	0x001e847f
 8005538:	003d08ff 	.word	0x003d08ff
 800553c:	431bde83 	.word	0x431bde83
 8005540:	10624dd3 	.word	0x10624dd3

08005544 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af02      	add	r7, sp, #8
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	4608      	mov	r0, r1
 800554e:	4611      	mov	r1, r2
 8005550:	461a      	mov	r2, r3
 8005552:	4603      	mov	r3, r0
 8005554:	817b      	strh	r3, [r7, #10]
 8005556:	460b      	mov	r3, r1
 8005558:	813b      	strh	r3, [r7, #8]
 800555a:	4613      	mov	r3, r2
 800555c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800555e:	f7fc fe99 	bl	8002294 <HAL_GetTick>
 8005562:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b20      	cmp	r3, #32
 800556e:	f040 80d9 	bne.w	8005724 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	2319      	movs	r3, #25
 8005578:	2201      	movs	r2, #1
 800557a:	496d      	ldr	r1, [pc, #436]	; (8005730 <HAL_I2C_Mem_Write+0x1ec>)
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 fc8b 	bl	8005e98 <I2C_WaitOnFlagUntilTimeout>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005588:	2302      	movs	r3, #2
 800558a:	e0cc      	b.n	8005726 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005592:	2b01      	cmp	r3, #1
 8005594:	d101      	bne.n	800559a <HAL_I2C_Mem_Write+0x56>
 8005596:	2302      	movs	r3, #2
 8005598:	e0c5      	b.n	8005726 <HAL_I2C_Mem_Write+0x1e2>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d007      	beq.n	80055c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 0201 	orr.w	r2, r2, #1
 80055be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2221      	movs	r2, #33	; 0x21
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2240      	movs	r2, #64	; 0x40
 80055dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a3a      	ldr	r2, [r7, #32]
 80055ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80055f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4a4d      	ldr	r2, [pc, #308]	; (8005734 <HAL_I2C_Mem_Write+0x1f0>)
 8005600:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005602:	88f8      	ldrh	r0, [r7, #6]
 8005604:	893a      	ldrh	r2, [r7, #8]
 8005606:	8979      	ldrh	r1, [r7, #10]
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	9301      	str	r3, [sp, #4]
 800560c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	4603      	mov	r3, r0
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 fac2 	bl	8005b9c <I2C_RequestMemoryWrite>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d052      	beq.n	80056c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e081      	b.n	8005726 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 fd50 	bl	80060cc <I2C_WaitOnTXEFlagUntilTimeout>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00d      	beq.n	800564e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	2b04      	cmp	r3, #4
 8005638:	d107      	bne.n	800564a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005648:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e06b      	b.n	8005726 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	781a      	ldrb	r2, [r3, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005668:	3b01      	subs	r3, #1
 800566a:	b29a      	uxth	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005674:	b29b      	uxth	r3, r3
 8005676:	3b01      	subs	r3, #1
 8005678:	b29a      	uxth	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b04      	cmp	r3, #4
 800568a:	d11b      	bne.n	80056c4 <HAL_I2C_Mem_Write+0x180>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005690:	2b00      	cmp	r3, #0
 8005692:	d017      	beq.n	80056c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	781a      	ldrb	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	3b01      	subs	r3, #1
 80056be:	b29a      	uxth	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1aa      	bne.n	8005622 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 fd43 	bl	800615c <I2C_WaitOnBTFFlagUntilTimeout>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00d      	beq.n	80056f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d107      	bne.n	80056f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e016      	b.n	8005726 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005720:	2300      	movs	r3, #0
 8005722:	e000      	b.n	8005726 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005724:	2302      	movs	r3, #2
  }
}
 8005726:	4618      	mov	r0, r3
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	00100002 	.word	0x00100002
 8005734:	ffff0000 	.word	0xffff0000

08005738 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08c      	sub	sp, #48	; 0x30
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	4608      	mov	r0, r1
 8005742:	4611      	mov	r1, r2
 8005744:	461a      	mov	r2, r3
 8005746:	4603      	mov	r3, r0
 8005748:	817b      	strh	r3, [r7, #10]
 800574a:	460b      	mov	r3, r1
 800574c:	813b      	strh	r3, [r7, #8]
 800574e:	4613      	mov	r3, r2
 8005750:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005752:	f7fc fd9f 	bl	8002294 <HAL_GetTick>
 8005756:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b20      	cmp	r3, #32
 8005762:	f040 8214 	bne.w	8005b8e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	2319      	movs	r3, #25
 800576c:	2201      	movs	r2, #1
 800576e:	497b      	ldr	r1, [pc, #492]	; (800595c <HAL_I2C_Mem_Read+0x224>)
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 fb91 	bl	8005e98 <I2C_WaitOnFlagUntilTimeout>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800577c:	2302      	movs	r3, #2
 800577e:	e207      	b.n	8005b90 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005786:	2b01      	cmp	r3, #1
 8005788:	d101      	bne.n	800578e <HAL_I2C_Mem_Read+0x56>
 800578a:	2302      	movs	r3, #2
 800578c:	e200      	b.n	8005b90 <HAL_I2C_Mem_Read+0x458>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d007      	beq.n	80057b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0201 	orr.w	r2, r2, #1
 80057b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2222      	movs	r2, #34	; 0x22
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2240      	movs	r2, #64	; 0x40
 80057d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80057e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4a5b      	ldr	r2, [pc, #364]	; (8005960 <HAL_I2C_Mem_Read+0x228>)
 80057f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057f6:	88f8      	ldrh	r0, [r7, #6]
 80057f8:	893a      	ldrh	r2, [r7, #8]
 80057fa:	8979      	ldrh	r1, [r7, #10]
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	9301      	str	r3, [sp, #4]
 8005800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	4603      	mov	r3, r0
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f000 fa5e 	bl	8005cc8 <I2C_RequestMemoryRead>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e1bc      	b.n	8005b90 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581a:	2b00      	cmp	r3, #0
 800581c:	d113      	bne.n	8005846 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800581e:	2300      	movs	r3, #0
 8005820:	623b      	str	r3, [r7, #32]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	623b      	str	r3, [r7, #32]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	623b      	str	r3, [r7, #32]
 8005832:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	e190      	b.n	8005b68 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800584a:	2b01      	cmp	r3, #1
 800584c:	d11b      	bne.n	8005886 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800585c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800585e:	2300      	movs	r3, #0
 8005860:	61fb      	str	r3, [r7, #28]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	61fb      	str	r3, [r7, #28]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	61fb      	str	r3, [r7, #28]
 8005872:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	e170      	b.n	8005b68 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800588a:	2b02      	cmp	r3, #2
 800588c:	d11b      	bne.n	80058c6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800589c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ae:	2300      	movs	r3, #0
 80058b0:	61bb      	str	r3, [r7, #24]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	61bb      	str	r3, [r7, #24]
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	e150      	b.n	8005b68 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058c6:	2300      	movs	r3, #0
 80058c8:	617b      	str	r3, [r7, #20]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	617b      	str	r3, [r7, #20]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	617b      	str	r3, [r7, #20]
 80058da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80058dc:	e144      	b.n	8005b68 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e2:	2b03      	cmp	r3, #3
 80058e4:	f200 80f1 	bhi.w	8005aca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d123      	bne.n	8005938 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 fc79 	bl	80061ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e145      	b.n	8005b90 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691a      	ldr	r2, [r3, #16]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005920:	3b01      	subs	r3, #1
 8005922:	b29a      	uxth	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800592c:	b29b      	uxth	r3, r3
 800592e:	3b01      	subs	r3, #1
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005936:	e117      	b.n	8005b68 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800593c:	2b02      	cmp	r3, #2
 800593e:	d14e      	bne.n	80059de <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005946:	2200      	movs	r2, #0
 8005948:	4906      	ldr	r1, [pc, #24]	; (8005964 <HAL_I2C_Mem_Read+0x22c>)
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f000 faa4 	bl	8005e98 <I2C_WaitOnFlagUntilTimeout>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d008      	beq.n	8005968 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e11a      	b.n	8005b90 <HAL_I2C_Mem_Read+0x458>
 800595a:	bf00      	nop
 800595c:	00100002 	.word	0x00100002
 8005960:	ffff0000 	.word	0xffff0000
 8005964:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005976:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	691a      	ldr	r2, [r3, #16]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	b2d2      	uxtb	r2, r2
 8005984:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	1c5a      	adds	r2, r3, #1
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005994:	3b01      	subs	r3, #1
 8005996:	b29a      	uxth	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	3b01      	subs	r3, #1
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	691a      	ldr	r2, [r3, #16]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c6:	3b01      	subs	r3, #1
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	3b01      	subs	r3, #1
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059dc:	e0c4      	b.n	8005b68 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e4:	2200      	movs	r2, #0
 80059e6:	496c      	ldr	r1, [pc, #432]	; (8005b98 <HAL_I2C_Mem_Read+0x460>)
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 fa55 	bl	8005e98 <I2C_WaitOnFlagUntilTimeout>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e0cb      	b.n	8005b90 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	691a      	ldr	r2, [r3, #16]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a24:	3b01      	subs	r3, #1
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	3b01      	subs	r3, #1
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a40:	2200      	movs	r2, #0
 8005a42:	4955      	ldr	r1, [pc, #340]	; (8005b98 <HAL_I2C_Mem_Read+0x460>)
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f000 fa27 	bl	8005e98 <I2C_WaitOnFlagUntilTimeout>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e09d      	b.n	8005b90 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	691a      	ldr	r2, [r3, #16]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6e:	b2d2      	uxtb	r2, r2
 8005a70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	691a      	ldr	r2, [r3, #16]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	b2d2      	uxtb	r2, r2
 8005aa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ac8:	e04e      	b.n	8005b68 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005acc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f000 fb8c 	bl	80061ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e058      	b.n	8005b90 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	691a      	ldr	r2, [r3, #16]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	b2d2      	uxtb	r2, r2
 8005aea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005afa:	3b01      	subs	r3, #1
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	f003 0304 	and.w	r3, r3, #4
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d124      	bne.n	8005b68 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b22:	2b03      	cmp	r3, #3
 8005b24:	d107      	bne.n	8005b36 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b34:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	b2d2      	uxtb	r2, r2
 8005b42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f47f aeb6 	bne.w	80058de <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2220      	movs	r2, #32
 8005b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	e000      	b.n	8005b90 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005b8e:	2302      	movs	r3, #2
  }
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3728      	adds	r7, #40	; 0x28
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	00010004 	.word	0x00010004

08005b9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b088      	sub	sp, #32
 8005ba0:	af02      	add	r7, sp, #8
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	4608      	mov	r0, r1
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	461a      	mov	r2, r3
 8005baa:	4603      	mov	r3, r0
 8005bac:	817b      	strh	r3, [r7, #10]
 8005bae:	460b      	mov	r3, r1
 8005bb0:	813b      	strh	r3, [r7, #8]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f000 f960 	bl	8005e98 <I2C_WaitOnFlagUntilTimeout>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00d      	beq.n	8005bfa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bec:	d103      	bne.n	8005bf6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bf4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e05f      	b.n	8005cba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bfa:	897b      	ldrh	r3, [r7, #10]
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	461a      	mov	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	6a3a      	ldr	r2, [r7, #32]
 8005c0e:	492d      	ldr	r1, [pc, #180]	; (8005cc4 <I2C_RequestMemoryWrite+0x128>)
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 f9bb 	bl	8005f8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e04c      	b.n	8005cba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c20:	2300      	movs	r3, #0
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c38:	6a39      	ldr	r1, [r7, #32]
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 fa46 	bl	80060cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00d      	beq.n	8005c62 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4a:	2b04      	cmp	r3, #4
 8005c4c:	d107      	bne.n	8005c5e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e02b      	b.n	8005cba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c62:	88fb      	ldrh	r3, [r7, #6]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d105      	bne.n	8005c74 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c68:	893b      	ldrh	r3, [r7, #8]
 8005c6a:	b2da      	uxtb	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	611a      	str	r2, [r3, #16]
 8005c72:	e021      	b.n	8005cb8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c74:	893b      	ldrh	r3, [r7, #8]
 8005c76:	0a1b      	lsrs	r3, r3, #8
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c84:	6a39      	ldr	r1, [r7, #32]
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 fa20 	bl	80060cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00d      	beq.n	8005cae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	2b04      	cmp	r3, #4
 8005c98:	d107      	bne.n	8005caa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ca8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e005      	b.n	8005cba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cae:	893b      	ldrh	r3, [r7, #8]
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	00010002 	.word	0x00010002

08005cc8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b088      	sub	sp, #32
 8005ccc:	af02      	add	r7, sp, #8
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	4608      	mov	r0, r1
 8005cd2:	4611      	mov	r1, r2
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	817b      	strh	r3, [r7, #10]
 8005cda:	460b      	mov	r3, r1
 8005cdc:	813b      	strh	r3, [r7, #8]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cf0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 f8c2 	bl	8005e98 <I2C_WaitOnFlagUntilTimeout>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00d      	beq.n	8005d36 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d28:	d103      	bne.n	8005d32 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e0aa      	b.n	8005e8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d36:	897b      	ldrh	r3, [r7, #10]
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	6a3a      	ldr	r2, [r7, #32]
 8005d4a:	4952      	ldr	r1, [pc, #328]	; (8005e94 <I2C_RequestMemoryRead+0x1cc>)
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 f91d 	bl	8005f8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e097      	b.n	8005e8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	617b      	str	r3, [r7, #20]
 8005d70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d74:	6a39      	ldr	r1, [r7, #32]
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 f9a8 	bl	80060cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00d      	beq.n	8005d9e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d107      	bne.n	8005d9a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e076      	b.n	8005e8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d9e:	88fb      	ldrh	r3, [r7, #6]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d105      	bne.n	8005db0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005da4:	893b      	ldrh	r3, [r7, #8]
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	611a      	str	r2, [r3, #16]
 8005dae:	e021      	b.n	8005df4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005db0:	893b      	ldrh	r3, [r7, #8]
 8005db2:	0a1b      	lsrs	r3, r3, #8
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc0:	6a39      	ldr	r1, [r7, #32]
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 f982 	bl	80060cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00d      	beq.n	8005dea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	d107      	bne.n	8005de6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005de4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e050      	b.n	8005e8c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dea:	893b      	ldrh	r3, [r7, #8]
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df6:	6a39      	ldr	r1, [r7, #32]
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 f967 	bl	80060cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00d      	beq.n	8005e20 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d107      	bne.n	8005e1c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e1a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e035      	b.n	8005e8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e2e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 f82b 	bl	8005e98 <I2C_WaitOnFlagUntilTimeout>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00d      	beq.n	8005e64 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e56:	d103      	bne.n	8005e60 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e013      	b.n	8005e8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e64:	897b      	ldrh	r3, [r7, #10]
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	f043 0301 	orr.w	r3, r3, #1
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	6a3a      	ldr	r2, [r7, #32]
 8005e78:	4906      	ldr	r1, [pc, #24]	; (8005e94 <I2C_RequestMemoryRead+0x1cc>)
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 f886 	bl	8005f8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e000      	b.n	8005e8c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	00010002 	.word	0x00010002

08005e98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	603b      	str	r3, [r7, #0]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ea8:	e048      	b.n	8005f3c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb0:	d044      	beq.n	8005f3c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eb2:	f7fc f9ef 	bl	8002294 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d302      	bcc.n	8005ec8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d139      	bne.n	8005f3c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	0c1b      	lsrs	r3, r3, #16
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d10d      	bne.n	8005eee <I2C_WaitOnFlagUntilTimeout+0x56>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	43da      	mvns	r2, r3
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	4013      	ands	r3, r2
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	bf0c      	ite	eq
 8005ee4:	2301      	moveq	r3, #1
 8005ee6:	2300      	movne	r3, #0
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	461a      	mov	r2, r3
 8005eec:	e00c      	b.n	8005f08 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	43da      	mvns	r2, r3
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	4013      	ands	r3, r2
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	bf0c      	ite	eq
 8005f00:	2301      	moveq	r3, #1
 8005f02:	2300      	movne	r3, #0
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	461a      	mov	r2, r3
 8005f08:	79fb      	ldrb	r3, [r7, #7]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d116      	bne.n	8005f3c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f28:	f043 0220 	orr.w	r2, r3, #32
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e023      	b.n	8005f84 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	0c1b      	lsrs	r3, r3, #16
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d10d      	bne.n	8005f62 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	43da      	mvns	r2, r3
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	4013      	ands	r3, r2
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	bf0c      	ite	eq
 8005f58:	2301      	moveq	r3, #1
 8005f5a:	2300      	movne	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	461a      	mov	r2, r3
 8005f60:	e00c      	b.n	8005f7c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	43da      	mvns	r2, r3
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	bf0c      	ite	eq
 8005f74:	2301      	moveq	r3, #1
 8005f76:	2300      	movne	r3, #0
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	79fb      	ldrb	r3, [r7, #7]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d093      	beq.n	8005eaa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
 8005f98:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f9a:	e071      	b.n	8006080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005faa:	d123      	bne.n	8005ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2220      	movs	r2, #32
 8005fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe0:	f043 0204 	orr.w	r2, r3, #4
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e067      	b.n	80060c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffa:	d041      	beq.n	8006080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ffc:	f7fc f94a 	bl	8002294 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	429a      	cmp	r2, r3
 800600a:	d302      	bcc.n	8006012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d136      	bne.n	8006080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	0c1b      	lsrs	r3, r3, #16
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b01      	cmp	r3, #1
 800601a:	d10c      	bne.n	8006036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	43da      	mvns	r2, r3
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	4013      	ands	r3, r2
 8006028:	b29b      	uxth	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	bf14      	ite	ne
 800602e:	2301      	movne	r3, #1
 8006030:	2300      	moveq	r3, #0
 8006032:	b2db      	uxtb	r3, r3
 8006034:	e00b      	b.n	800604e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	43da      	mvns	r2, r3
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	4013      	ands	r3, r2
 8006042:	b29b      	uxth	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	bf14      	ite	ne
 8006048:	2301      	movne	r3, #1
 800604a:	2300      	moveq	r3, #0
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d016      	beq.n	8006080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2220      	movs	r2, #32
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606c:	f043 0220 	orr.w	r2, r3, #32
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e021      	b.n	80060c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	0c1b      	lsrs	r3, r3, #16
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b01      	cmp	r3, #1
 8006088:	d10c      	bne.n	80060a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	43da      	mvns	r2, r3
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	4013      	ands	r3, r2
 8006096:	b29b      	uxth	r3, r3
 8006098:	2b00      	cmp	r3, #0
 800609a:	bf14      	ite	ne
 800609c:	2301      	movne	r3, #1
 800609e:	2300      	moveq	r3, #0
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	e00b      	b.n	80060bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	43da      	mvns	r2, r3
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	4013      	ands	r3, r2
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	bf14      	ite	ne
 80060b6:	2301      	movne	r3, #1
 80060b8:	2300      	moveq	r3, #0
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f47f af6d 	bne.w	8005f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060d8:	e034      	b.n	8006144 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 f8e3 	bl	80062a6 <I2C_IsAcknowledgeFailed>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e034      	b.n	8006154 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f0:	d028      	beq.n	8006144 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060f2:	f7fc f8cf 	bl	8002294 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d302      	bcc.n	8006108 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d11d      	bne.n	8006144 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006112:	2b80      	cmp	r3, #128	; 0x80
 8006114:	d016      	beq.n	8006144 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2220      	movs	r2, #32
 8006120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006130:	f043 0220 	orr.w	r2, r3, #32
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e007      	b.n	8006154 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614e:	2b80      	cmp	r3, #128	; 0x80
 8006150:	d1c3      	bne.n	80060da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006168:	e034      	b.n	80061d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 f89b 	bl	80062a6 <I2C_IsAcknowledgeFailed>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e034      	b.n	80061e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006180:	d028      	beq.n	80061d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006182:	f7fc f887 	bl	8002294 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	429a      	cmp	r2, r3
 8006190:	d302      	bcc.n	8006198 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d11d      	bne.n	80061d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	f003 0304 	and.w	r3, r3, #4
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	d016      	beq.n	80061d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2220      	movs	r2, #32
 80061b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c0:	f043 0220 	orr.w	r2, r3, #32
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e007      	b.n	80061e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	f003 0304 	and.w	r3, r3, #4
 80061de:	2b04      	cmp	r3, #4
 80061e0:	d1c3      	bne.n	800616a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061f8:	e049      	b.n	800628e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	f003 0310 	and.w	r3, r3, #16
 8006204:	2b10      	cmp	r3, #16
 8006206:	d119      	bne.n	800623c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f06f 0210 	mvn.w	r2, #16
 8006210:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2220      	movs	r2, #32
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e030      	b.n	800629e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800623c:	f7fc f82a 	bl	8002294 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	429a      	cmp	r2, r3
 800624a:	d302      	bcc.n	8006252 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d11d      	bne.n	800628e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625c:	2b40      	cmp	r3, #64	; 0x40
 800625e:	d016      	beq.n	800628e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2220      	movs	r2, #32
 800626a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	f043 0220 	orr.w	r2, r3, #32
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e007      	b.n	800629e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006298:	2b40      	cmp	r3, #64	; 0x40
 800629a:	d1ae      	bne.n	80061fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062bc:	d11b      	bne.n	80062f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e2:	f043 0204 	orr.w	r2, r3, #4
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e000      	b.n	80062f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b088      	sub	sp, #32
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e128      	b.n	8006568 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d109      	bne.n	8006336 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a90      	ldr	r2, [pc, #576]	; (8006570 <HAL_I2S_Init+0x26c>)
 800632e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7fb fbff 	bl	8001b34 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2202      	movs	r2, #2
 800633a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	6812      	ldr	r2, [r2, #0]
 8006348:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800634c:	f023 030f 	bic.w	r3, r3, #15
 8006350:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2202      	movs	r2, #2
 8006358:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	2b02      	cmp	r3, #2
 8006360:	d060      	beq.n	8006424 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d102      	bne.n	8006370 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800636a:	2310      	movs	r3, #16
 800636c:	617b      	str	r3, [r7, #20]
 800636e:	e001      	b.n	8006374 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006370:	2320      	movs	r3, #32
 8006372:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	2b20      	cmp	r3, #32
 800637a:	d802      	bhi.n	8006382 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006382:	2001      	movs	r0, #1
 8006384:	f001 f9d8 	bl	8007738 <HAL_RCCEx_GetPeriphCLKFreq>
 8006388:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006392:	d125      	bne.n	80063e0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d010      	beq.n	80063be <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80063a6:	4613      	mov	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	005b      	lsls	r3, r3, #1
 80063ae:	461a      	mov	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b8:	3305      	adds	r3, #5
 80063ba:	613b      	str	r3, [r7, #16]
 80063bc:	e01f      	b.n	80063fe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	00db      	lsls	r3, r3, #3
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80063c8:	4613      	mov	r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4413      	add	r3, r2
 80063ce:	005b      	lsls	r3, r3, #1
 80063d0:	461a      	mov	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063da:	3305      	adds	r3, #5
 80063dc:	613b      	str	r3, [r7, #16]
 80063de:	e00e      	b.n	80063fe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80063e8:	4613      	mov	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	005b      	lsls	r3, r3, #1
 80063f0:	461a      	mov	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fa:	3305      	adds	r3, #5
 80063fc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	4a5c      	ldr	r2, [pc, #368]	; (8006574 <HAL_I2S_Init+0x270>)
 8006402:	fba2 2303 	umull	r2, r3, r2, r3
 8006406:	08db      	lsrs	r3, r3, #3
 8006408:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	085b      	lsrs	r3, r3, #1
 800641a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	021b      	lsls	r3, r3, #8
 8006420:	61bb      	str	r3, [r7, #24]
 8006422:	e003      	b.n	800642c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006424:	2302      	movs	r3, #2
 8006426:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006428:	2300      	movs	r3, #0
 800642a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d902      	bls.n	8006438 <HAL_I2S_Init+0x134>
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	2bff      	cmp	r3, #255	; 0xff
 8006436:	d907      	bls.n	8006448 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643c:	f043 0210 	orr.w	r2, r3, #16
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e08f      	b.n	8006568 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	691a      	ldr	r2, [r3, #16]
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	ea42 0103 	orr.w	r1, r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	69fa      	ldr	r2, [r7, #28]
 8006458:	430a      	orrs	r2, r1
 800645a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006466:	f023 030f 	bic.w	r3, r3, #15
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6851      	ldr	r1, [r2, #4]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6892      	ldr	r2, [r2, #8]
 8006472:	4311      	orrs	r1, r2
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	68d2      	ldr	r2, [r2, #12]
 8006478:	4311      	orrs	r1, r2
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	6992      	ldr	r2, [r2, #24]
 800647e:	430a      	orrs	r2, r1
 8006480:	431a      	orrs	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800648a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d161      	bne.n	8006558 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a38      	ldr	r2, [pc, #224]	; (8006578 <HAL_I2S_Init+0x274>)
 8006498:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a37      	ldr	r2, [pc, #220]	; (800657c <HAL_I2S_Init+0x278>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d101      	bne.n	80064a8 <HAL_I2S_Init+0x1a4>
 80064a4:	4b36      	ldr	r3, [pc, #216]	; (8006580 <HAL_I2S_Init+0x27c>)
 80064a6:	e001      	b.n	80064ac <HAL_I2S_Init+0x1a8>
 80064a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	6812      	ldr	r2, [r2, #0]
 80064b2:	4932      	ldr	r1, [pc, #200]	; (800657c <HAL_I2S_Init+0x278>)
 80064b4:	428a      	cmp	r2, r1
 80064b6:	d101      	bne.n	80064bc <HAL_I2S_Init+0x1b8>
 80064b8:	4a31      	ldr	r2, [pc, #196]	; (8006580 <HAL_I2S_Init+0x27c>)
 80064ba:	e001      	b.n	80064c0 <HAL_I2S_Init+0x1bc>
 80064bc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80064c0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80064c4:	f023 030f 	bic.w	r3, r3, #15
 80064c8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a2b      	ldr	r2, [pc, #172]	; (800657c <HAL_I2S_Init+0x278>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d101      	bne.n	80064d8 <HAL_I2S_Init+0x1d4>
 80064d4:	4b2a      	ldr	r3, [pc, #168]	; (8006580 <HAL_I2S_Init+0x27c>)
 80064d6:	e001      	b.n	80064dc <HAL_I2S_Init+0x1d8>
 80064d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064dc:	2202      	movs	r2, #2
 80064de:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a25      	ldr	r2, [pc, #148]	; (800657c <HAL_I2S_Init+0x278>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d101      	bne.n	80064ee <HAL_I2S_Init+0x1ea>
 80064ea:	4b25      	ldr	r3, [pc, #148]	; (8006580 <HAL_I2S_Init+0x27c>)
 80064ec:	e001      	b.n	80064f2 <HAL_I2S_Init+0x1ee>
 80064ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064fe:	d003      	beq.n	8006508 <HAL_I2S_Init+0x204>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d103      	bne.n	8006510 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006508:	f44f 7380 	mov.w	r3, #256	; 0x100
 800650c:	613b      	str	r3, [r7, #16]
 800650e:	e001      	b.n	8006514 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006510:	2300      	movs	r3, #0
 8006512:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800651e:	4313      	orrs	r3, r2
 8006520:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006528:	4313      	orrs	r3, r2
 800652a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006532:	4313      	orrs	r3, r2
 8006534:	b29a      	uxth	r2, r3
 8006536:	897b      	ldrh	r3, [r7, #10]
 8006538:	4313      	orrs	r3, r2
 800653a:	b29b      	uxth	r3, r3
 800653c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006540:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a0d      	ldr	r2, [pc, #52]	; (800657c <HAL_I2S_Init+0x278>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d101      	bne.n	8006550 <HAL_I2S_Init+0x24c>
 800654c:	4b0c      	ldr	r3, [pc, #48]	; (8006580 <HAL_I2S_Init+0x27c>)
 800654e:	e001      	b.n	8006554 <HAL_I2S_Init+0x250>
 8006550:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006554:	897a      	ldrh	r2, [r7, #10]
 8006556:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3720      	adds	r7, #32
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	0800667b 	.word	0x0800667b
 8006574:	cccccccd 	.word	0xcccccccd
 8006578:	08006791 	.word	0x08006791
 800657c:	40003800 	.word	0x40003800
 8006580:	40003400 	.word	0x40003400

08006584 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	881a      	ldrh	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d8:	1c9a      	adds	r2, r3, #2
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	3b01      	subs	r3, #1
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10e      	bne.n	8006614 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006604:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7ff ffb8 	bl	8006584 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006614:	bf00      	nop
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68da      	ldr	r2, [r3, #12]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662e:	b292      	uxth	r2, r2
 8006630:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006636:	1c9a      	adds	r2, r3, #2
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006640:	b29b      	uxth	r3, r3
 8006642:	3b01      	subs	r3, #1
 8006644:	b29a      	uxth	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800664e:	b29b      	uxth	r3, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10e      	bne.n	8006672 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006662:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f7ff ff93 	bl	8006598 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006672:	bf00      	nop
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b086      	sub	sp, #24
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b04      	cmp	r3, #4
 8006694:	d13a      	bne.n	800670c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	2b01      	cmp	r3, #1
 800669e:	d109      	bne.n	80066b4 <I2S_IRQHandler+0x3a>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066aa:	2b40      	cmp	r3, #64	; 0x40
 80066ac:	d102      	bne.n	80066b4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7ff ffb4 	bl	800661c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ba:	2b40      	cmp	r3, #64	; 0x40
 80066bc:	d126      	bne.n	800670c <I2S_IRQHandler+0x92>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f003 0320 	and.w	r3, r3, #32
 80066c8:	2b20      	cmp	r3, #32
 80066ca:	d11f      	bne.n	800670c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	685a      	ldr	r2, [r3, #4]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80066da:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80066dc:	2300      	movs	r3, #0
 80066de:	613b      	str	r3, [r7, #16]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	613b      	str	r3, [r7, #16]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	613b      	str	r3, [r7, #16]
 80066f0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066fe:	f043 0202 	orr.w	r2, r3, #2
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7ff ff50 	bl	80065ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006712:	b2db      	uxtb	r3, r3
 8006714:	2b03      	cmp	r3, #3
 8006716:	d136      	bne.n	8006786 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	2b02      	cmp	r3, #2
 8006720:	d109      	bne.n	8006736 <I2S_IRQHandler+0xbc>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800672c:	2b80      	cmp	r3, #128	; 0x80
 800672e:	d102      	bne.n	8006736 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7ff ff45 	bl	80065c0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f003 0308 	and.w	r3, r3, #8
 800673c:	2b08      	cmp	r3, #8
 800673e:	d122      	bne.n	8006786 <I2S_IRQHandler+0x10c>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f003 0320 	and.w	r3, r3, #32
 800674a:	2b20      	cmp	r3, #32
 800674c:	d11b      	bne.n	8006786 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800675c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800675e:	2300      	movs	r3, #0
 8006760:	60fb      	str	r3, [r7, #12]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006778:	f043 0204 	orr.w	r2, r3, #4
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7ff ff13 	bl	80065ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006786:	bf00      	nop
 8006788:	3718      	adds	r7, #24
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
	...

08006790 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a92      	ldr	r2, [pc, #584]	; (80069f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d101      	bne.n	80067ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80067aa:	4b92      	ldr	r3, [pc, #584]	; (80069f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80067ac:	e001      	b.n	80067b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80067ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a8b      	ldr	r2, [pc, #556]	; (80069f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d101      	bne.n	80067cc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80067c8:	4b8a      	ldr	r3, [pc, #552]	; (80069f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80067ca:	e001      	b.n	80067d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80067cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067dc:	d004      	beq.n	80067e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f040 8099 	bne.w	800691a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d107      	bne.n	8006802 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f925 	bl	8006a4c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	2b01      	cmp	r3, #1
 800680a:	d107      	bne.n	800681c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006812:	2b00      	cmp	r3, #0
 8006814:	d002      	beq.n	800681c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f9c8 	bl	8006bac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006822:	2b40      	cmp	r3, #64	; 0x40
 8006824:	d13a      	bne.n	800689c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	f003 0320 	and.w	r3, r3, #32
 800682c:	2b00      	cmp	r3, #0
 800682e:	d035      	beq.n	800689c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a6e      	ldr	r2, [pc, #440]	; (80069f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d101      	bne.n	800683e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800683a:	4b6e      	ldr	r3, [pc, #440]	; (80069f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800683c:	e001      	b.n	8006842 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800683e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4969      	ldr	r1, [pc, #420]	; (80069f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800684a:	428b      	cmp	r3, r1
 800684c:	d101      	bne.n	8006852 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800684e:	4b69      	ldr	r3, [pc, #420]	; (80069f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006850:	e001      	b.n	8006856 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006852:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006856:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800685a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800686a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800686c:	2300      	movs	r3, #0
 800686e:	60fb      	str	r3, [r7, #12]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	60fb      	str	r3, [r7, #12]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	60fb      	str	r3, [r7, #12]
 8006880:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688e:	f043 0202 	orr.w	r2, r3, #2
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7ff fe88 	bl	80065ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	f003 0308 	and.w	r3, r3, #8
 80068a2:	2b08      	cmp	r3, #8
 80068a4:	f040 80c3 	bne.w	8006a2e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f003 0320 	and.w	r3, r3, #32
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f000 80bd 	beq.w	8006a2e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80068c2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a49      	ldr	r2, [pc, #292]	; (80069f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d101      	bne.n	80068d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80068ce:	4b49      	ldr	r3, [pc, #292]	; (80069f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80068d0:	e001      	b.n	80068d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80068d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4944      	ldr	r1, [pc, #272]	; (80069f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80068de:	428b      	cmp	r3, r1
 80068e0:	d101      	bne.n	80068e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80068e2:	4b44      	ldr	r3, [pc, #272]	; (80069f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80068e4:	e001      	b.n	80068ea <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80068e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80068ee:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80068f0:	2300      	movs	r3, #0
 80068f2:	60bb      	str	r3, [r7, #8]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	60bb      	str	r3, [r7, #8]
 80068fc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800690a:	f043 0204 	orr.w	r2, r3, #4
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7ff fe4a 	bl	80065ac <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006918:	e089      	b.n	8006a2e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	f003 0302 	and.w	r3, r3, #2
 8006920:	2b02      	cmp	r3, #2
 8006922:	d107      	bne.n	8006934 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800692a:	2b00      	cmp	r3, #0
 800692c:	d002      	beq.n	8006934 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f8be 	bl	8006ab0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b01      	cmp	r3, #1
 800693c:	d107      	bne.n	800694e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006944:	2b00      	cmp	r3, #0
 8006946:	d002      	beq.n	800694e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f8fd 	bl	8006b48 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006954:	2b40      	cmp	r3, #64	; 0x40
 8006956:	d12f      	bne.n	80069b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f003 0320 	and.w	r3, r3, #32
 800695e:	2b00      	cmp	r3, #0
 8006960:	d02a      	beq.n	80069b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006970:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a1e      	ldr	r2, [pc, #120]	; (80069f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d101      	bne.n	8006980 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800697c:	4b1d      	ldr	r3, [pc, #116]	; (80069f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800697e:	e001      	b.n	8006984 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006980:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006984:	685a      	ldr	r2, [r3, #4]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4919      	ldr	r1, [pc, #100]	; (80069f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800698c:	428b      	cmp	r3, r1
 800698e:	d101      	bne.n	8006994 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006990:	4b18      	ldr	r3, [pc, #96]	; (80069f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006992:	e001      	b.n	8006998 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006994:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006998:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800699c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069aa:	f043 0202 	orr.w	r2, r3, #2
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f7ff fdfa 	bl	80065ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	f003 0308 	and.w	r3, r3, #8
 80069be:	2b08      	cmp	r3, #8
 80069c0:	d136      	bne.n	8006a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	f003 0320 	and.w	r3, r3, #32
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d031      	beq.n	8006a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a07      	ldr	r2, [pc, #28]	; (80069f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d101      	bne.n	80069da <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80069d6:	4b07      	ldr	r3, [pc, #28]	; (80069f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80069d8:	e001      	b.n	80069de <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80069da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4902      	ldr	r1, [pc, #8]	; (80069f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80069e6:	428b      	cmp	r3, r1
 80069e8:	d106      	bne.n	80069f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80069ea:	4b02      	ldr	r3, [pc, #8]	; (80069f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80069ec:	e006      	b.n	80069fc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80069ee:	bf00      	nop
 80069f0:	40003800 	.word	0x40003800
 80069f4:	40003400 	.word	0x40003400
 80069f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a00:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a10:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a1e:	f043 0204 	orr.w	r2, r3, #4
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7ff fdc0 	bl	80065ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a2c:	e000      	b.n	8006a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006a2e:	bf00      	nop
}
 8006a30:	bf00      	nop
 8006a32:	3720      	adds	r7, #32
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a58:	1c99      	adds	r1, r3, #2
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	6251      	str	r1, [r2, #36]	; 0x24
 8006a5e:	881a      	ldrh	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d113      	bne.n	8006aa6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a8c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d106      	bne.n	8006aa6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7ff ffc9 	bl	8006a38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006aa6:	bf00      	nop
 8006aa8:	3708      	adds	r7, #8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
	...

08006ab0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abc:	1c99      	adds	r1, r3, #2
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	6251      	str	r1, [r2, #36]	; 0x24
 8006ac2:	8819      	ldrh	r1, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a1d      	ldr	r2, [pc, #116]	; (8006b40 <I2SEx_TxISR_I2SExt+0x90>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d101      	bne.n	8006ad2 <I2SEx_TxISR_I2SExt+0x22>
 8006ace:	4b1d      	ldr	r3, [pc, #116]	; (8006b44 <I2SEx_TxISR_I2SExt+0x94>)
 8006ad0:	e001      	b.n	8006ad6 <I2SEx_TxISR_I2SExt+0x26>
 8006ad2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ad6:	460a      	mov	r2, r1
 8006ad8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d121      	bne.n	8006b36 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a12      	ldr	r2, [pc, #72]	; (8006b40 <I2SEx_TxISR_I2SExt+0x90>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d101      	bne.n	8006b00 <I2SEx_TxISR_I2SExt+0x50>
 8006afc:	4b11      	ldr	r3, [pc, #68]	; (8006b44 <I2SEx_TxISR_I2SExt+0x94>)
 8006afe:	e001      	b.n	8006b04 <I2SEx_TxISR_I2SExt+0x54>
 8006b00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	490d      	ldr	r1, [pc, #52]	; (8006b40 <I2SEx_TxISR_I2SExt+0x90>)
 8006b0c:	428b      	cmp	r3, r1
 8006b0e:	d101      	bne.n	8006b14 <I2SEx_TxISR_I2SExt+0x64>
 8006b10:	4b0c      	ldr	r3, [pc, #48]	; (8006b44 <I2SEx_TxISR_I2SExt+0x94>)
 8006b12:	e001      	b.n	8006b18 <I2SEx_TxISR_I2SExt+0x68>
 8006b14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b1c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d106      	bne.n	8006b36 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f7ff ff81 	bl	8006a38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b36:	bf00      	nop
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	40003800 	.word	0x40003800
 8006b44:	40003400 	.word	0x40003400

08006b48 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68d8      	ldr	r0, [r3, #12]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5a:	1c99      	adds	r1, r3, #2
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006b60:	b282      	uxth	r2, r0
 8006b62:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d113      	bne.n	8006ba4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006b8a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d106      	bne.n	8006ba4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7ff ff4a 	bl	8006a38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006ba4:	bf00      	nop
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a20      	ldr	r2, [pc, #128]	; (8006c3c <I2SEx_RxISR_I2SExt+0x90>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d101      	bne.n	8006bc2 <I2SEx_RxISR_I2SExt+0x16>
 8006bbe:	4b20      	ldr	r3, [pc, #128]	; (8006c40 <I2SEx_RxISR_I2SExt+0x94>)
 8006bc0:	e001      	b.n	8006bc6 <I2SEx_RxISR_I2SExt+0x1a>
 8006bc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bc6:	68d8      	ldr	r0, [r3, #12]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bcc:	1c99      	adds	r1, r3, #2
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006bd2:	b282      	uxth	r2, r0
 8006bd4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d121      	bne.n	8006c32 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a12      	ldr	r2, [pc, #72]	; (8006c3c <I2SEx_RxISR_I2SExt+0x90>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d101      	bne.n	8006bfc <I2SEx_RxISR_I2SExt+0x50>
 8006bf8:	4b11      	ldr	r3, [pc, #68]	; (8006c40 <I2SEx_RxISR_I2SExt+0x94>)
 8006bfa:	e001      	b.n	8006c00 <I2SEx_RxISR_I2SExt+0x54>
 8006bfc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	490d      	ldr	r1, [pc, #52]	; (8006c3c <I2SEx_RxISR_I2SExt+0x90>)
 8006c08:	428b      	cmp	r3, r1
 8006c0a:	d101      	bne.n	8006c10 <I2SEx_RxISR_I2SExt+0x64>
 8006c0c:	4b0c      	ldr	r3, [pc, #48]	; (8006c40 <I2SEx_RxISR_I2SExt+0x94>)
 8006c0e:	e001      	b.n	8006c14 <I2SEx_RxISR_I2SExt+0x68>
 8006c10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006c18:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d106      	bne.n	8006c32 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7ff ff03 	bl	8006a38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	40003800 	.word	0x40003800
 8006c40:	40003400 	.word	0x40003400

08006c44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e267      	b.n	8007126 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d075      	beq.n	8006d4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c62:	4b88      	ldr	r3, [pc, #544]	; (8006e84 <HAL_RCC_OscConfig+0x240>)
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f003 030c 	and.w	r3, r3, #12
 8006c6a:	2b04      	cmp	r3, #4
 8006c6c:	d00c      	beq.n	8006c88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c6e:	4b85      	ldr	r3, [pc, #532]	; (8006e84 <HAL_RCC_OscConfig+0x240>)
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c76:	2b08      	cmp	r3, #8
 8006c78:	d112      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c7a:	4b82      	ldr	r3, [pc, #520]	; (8006e84 <HAL_RCC_OscConfig+0x240>)
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c86:	d10b      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c88:	4b7e      	ldr	r3, [pc, #504]	; (8006e84 <HAL_RCC_OscConfig+0x240>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d05b      	beq.n	8006d4c <HAL_RCC_OscConfig+0x108>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d157      	bne.n	8006d4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e242      	b.n	8007126 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ca8:	d106      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x74>
 8006caa:	4b76      	ldr	r3, [pc, #472]	; (8006e84 <HAL_RCC_OscConfig+0x240>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a75      	ldr	r2, [pc, #468]	; (8006e84 <HAL_RCC_OscConfig+0x240>)
 8006cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cb4:	6013      	str	r3, [r2, #0]
 8006cb6:	e01d      	b.n	8006cf4 <HAL_RCC_OscConfig+0xb0>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cc0:	d10c      	bne.n	8006cdc <HAL_RCC_OscConfig+0x98>
 8006cc2:	4b70      	ldr	r3, [pc, #448]	; (8006e84 <HAL_RCC_OscConfig+0x240>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a6f      	ldr	r2, [pc, #444]	; (8006e84 <HAL_RCC_OscConfig+0x240>)
 8006cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ccc:	6013      	str	r3, [r2, #0]
 8006cce:	4b6d      	ldr	r3, [pc, #436]	; (8006e84 <HAL_RCC_OscConfig+0x240>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a6c      	ldr	r2, [pc, #432]	; (8006e84 <HAL_RCC_OscConfig+0x240>)
 8006cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	e00b      	b.n	8006cf4 <HAL_RCC_OscConfig+0xb0>
 8006cdc:	4b69      	ldr	r3, [pc, #420]	; (8006e84 <HAL_RCC_OscConfig+0x240>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a68      	ldr	r2, [pc, #416]	; (8006e84 <HAL_RCC_OscConfig+0x240>)
 8006ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ce6:	6013      	str	r3, [r2, #0]
 8006ce8:	4b66      	ldr	r3, [pc, #408]	; (8006e84 <HAL_RCC_OscConfig+0x240>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a65      	ldr	r2, [pc, #404]	; (8006e84 <HAL_RCC_OscConfig+0x240>)
 8006cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d013      	beq.n	8006d24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cfc:	f7fb faca 	bl	8002294 <HAL_GetTick>
 8006d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d02:	e008      	b.n	8006d16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d04:	f7fb fac6 	bl	8002294 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b64      	cmp	r3, #100	; 0x64
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e207      	b.n	8007126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d16:	4b5b      	ldr	r3, [pc, #364]	; (8006e84 <HAL_RCC_OscConfig+0x240>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d0f0      	beq.n	8006d04 <HAL_RCC_OscConfig+0xc0>
 8006d22:	e014      	b.n	8006d4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d24:	f7fb fab6 	bl	8002294 <HAL_GetTick>
 8006d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d2a:	e008      	b.n	8006d3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d2c:	f7fb fab2 	bl	8002294 <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	2b64      	cmp	r3, #100	; 0x64
 8006d38:	d901      	bls.n	8006d3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e1f3      	b.n	8007126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d3e:	4b51      	ldr	r3, [pc, #324]	; (8006e84 <HAL_RCC_OscConfig+0x240>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1f0      	bne.n	8006d2c <HAL_RCC_OscConfig+0xe8>
 8006d4a:	e000      	b.n	8006d4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d063      	beq.n	8006e22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d5a:	4b4a      	ldr	r3, [pc, #296]	; (8006e84 <HAL_RCC_OscConfig+0x240>)
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f003 030c 	and.w	r3, r3, #12
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00b      	beq.n	8006d7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d66:	4b47      	ldr	r3, [pc, #284]	; (8006e84 <HAL_RCC_OscConfig+0x240>)
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d6e:	2b08      	cmp	r3, #8
 8006d70:	d11c      	bne.n	8006dac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d72:	4b44      	ldr	r3, [pc, #272]	; (8006e84 <HAL_RCC_OscConfig+0x240>)
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d116      	bne.n	8006dac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d7e:	4b41      	ldr	r3, [pc, #260]	; (8006e84 <HAL_RCC_OscConfig+0x240>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d005      	beq.n	8006d96 <HAL_RCC_OscConfig+0x152>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d001      	beq.n	8006d96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e1c7      	b.n	8007126 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d96:	4b3b      	ldr	r3, [pc, #236]	; (8006e84 <HAL_RCC_OscConfig+0x240>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	00db      	lsls	r3, r3, #3
 8006da4:	4937      	ldr	r1, [pc, #220]	; (8006e84 <HAL_RCC_OscConfig+0x240>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006daa:	e03a      	b.n	8006e22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d020      	beq.n	8006df6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006db4:	4b34      	ldr	r3, [pc, #208]	; (8006e88 <HAL_RCC_OscConfig+0x244>)
 8006db6:	2201      	movs	r2, #1
 8006db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dba:	f7fb fa6b 	bl	8002294 <HAL_GetTick>
 8006dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dc0:	e008      	b.n	8006dd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006dc2:	f7fb fa67 	bl	8002294 <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d901      	bls.n	8006dd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e1a8      	b.n	8007126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dd4:	4b2b      	ldr	r3, [pc, #172]	; (8006e84 <HAL_RCC_OscConfig+0x240>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d0f0      	beq.n	8006dc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006de0:	4b28      	ldr	r3, [pc, #160]	; (8006e84 <HAL_RCC_OscConfig+0x240>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	00db      	lsls	r3, r3, #3
 8006dee:	4925      	ldr	r1, [pc, #148]	; (8006e84 <HAL_RCC_OscConfig+0x240>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	600b      	str	r3, [r1, #0]
 8006df4:	e015      	b.n	8006e22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006df6:	4b24      	ldr	r3, [pc, #144]	; (8006e88 <HAL_RCC_OscConfig+0x244>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dfc:	f7fb fa4a 	bl	8002294 <HAL_GetTick>
 8006e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e02:	e008      	b.n	8006e16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e04:	f7fb fa46 	bl	8002294 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d901      	bls.n	8006e16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e187      	b.n	8007126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e16:	4b1b      	ldr	r3, [pc, #108]	; (8006e84 <HAL_RCC_OscConfig+0x240>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1f0      	bne.n	8006e04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0308 	and.w	r3, r3, #8
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d036      	beq.n	8006e9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d016      	beq.n	8006e64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e36:	4b15      	ldr	r3, [pc, #84]	; (8006e8c <HAL_RCC_OscConfig+0x248>)
 8006e38:	2201      	movs	r2, #1
 8006e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e3c:	f7fb fa2a 	bl	8002294 <HAL_GetTick>
 8006e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e42:	e008      	b.n	8006e56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e44:	f7fb fa26 	bl	8002294 <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d901      	bls.n	8006e56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e167      	b.n	8007126 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e56:	4b0b      	ldr	r3, [pc, #44]	; (8006e84 <HAL_RCC_OscConfig+0x240>)
 8006e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e5a:	f003 0302 	and.w	r3, r3, #2
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d0f0      	beq.n	8006e44 <HAL_RCC_OscConfig+0x200>
 8006e62:	e01b      	b.n	8006e9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e64:	4b09      	ldr	r3, [pc, #36]	; (8006e8c <HAL_RCC_OscConfig+0x248>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e6a:	f7fb fa13 	bl	8002294 <HAL_GetTick>
 8006e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e70:	e00e      	b.n	8006e90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e72:	f7fb fa0f 	bl	8002294 <HAL_GetTick>
 8006e76:	4602      	mov	r2, r0
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d907      	bls.n	8006e90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e150      	b.n	8007126 <HAL_RCC_OscConfig+0x4e2>
 8006e84:	40023800 	.word	0x40023800
 8006e88:	42470000 	.word	0x42470000
 8006e8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e90:	4b88      	ldr	r3, [pc, #544]	; (80070b4 <HAL_RCC_OscConfig+0x470>)
 8006e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e94:	f003 0302 	and.w	r3, r3, #2
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1ea      	bne.n	8006e72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0304 	and.w	r3, r3, #4
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f000 8097 	beq.w	8006fd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006eae:	4b81      	ldr	r3, [pc, #516]	; (80070b4 <HAL_RCC_OscConfig+0x470>)
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10f      	bne.n	8006eda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006eba:	2300      	movs	r3, #0
 8006ebc:	60bb      	str	r3, [r7, #8]
 8006ebe:	4b7d      	ldr	r3, [pc, #500]	; (80070b4 <HAL_RCC_OscConfig+0x470>)
 8006ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec2:	4a7c      	ldr	r2, [pc, #496]	; (80070b4 <HAL_RCC_OscConfig+0x470>)
 8006ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8006eca:	4b7a      	ldr	r3, [pc, #488]	; (80070b4 <HAL_RCC_OscConfig+0x470>)
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ed2:	60bb      	str	r3, [r7, #8]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006eda:	4b77      	ldr	r3, [pc, #476]	; (80070b8 <HAL_RCC_OscConfig+0x474>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d118      	bne.n	8006f18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ee6:	4b74      	ldr	r3, [pc, #464]	; (80070b8 <HAL_RCC_OscConfig+0x474>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a73      	ldr	r2, [pc, #460]	; (80070b8 <HAL_RCC_OscConfig+0x474>)
 8006eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ef2:	f7fb f9cf 	bl	8002294 <HAL_GetTick>
 8006ef6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ef8:	e008      	b.n	8006f0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006efa:	f7fb f9cb 	bl	8002294 <HAL_GetTick>
 8006efe:	4602      	mov	r2, r0
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d901      	bls.n	8006f0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e10c      	b.n	8007126 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f0c:	4b6a      	ldr	r3, [pc, #424]	; (80070b8 <HAL_RCC_OscConfig+0x474>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d0f0      	beq.n	8006efa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d106      	bne.n	8006f2e <HAL_RCC_OscConfig+0x2ea>
 8006f20:	4b64      	ldr	r3, [pc, #400]	; (80070b4 <HAL_RCC_OscConfig+0x470>)
 8006f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f24:	4a63      	ldr	r2, [pc, #396]	; (80070b4 <HAL_RCC_OscConfig+0x470>)
 8006f26:	f043 0301 	orr.w	r3, r3, #1
 8006f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8006f2c:	e01c      	b.n	8006f68 <HAL_RCC_OscConfig+0x324>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	2b05      	cmp	r3, #5
 8006f34:	d10c      	bne.n	8006f50 <HAL_RCC_OscConfig+0x30c>
 8006f36:	4b5f      	ldr	r3, [pc, #380]	; (80070b4 <HAL_RCC_OscConfig+0x470>)
 8006f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f3a:	4a5e      	ldr	r2, [pc, #376]	; (80070b4 <HAL_RCC_OscConfig+0x470>)
 8006f3c:	f043 0304 	orr.w	r3, r3, #4
 8006f40:	6713      	str	r3, [r2, #112]	; 0x70
 8006f42:	4b5c      	ldr	r3, [pc, #368]	; (80070b4 <HAL_RCC_OscConfig+0x470>)
 8006f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f46:	4a5b      	ldr	r2, [pc, #364]	; (80070b4 <HAL_RCC_OscConfig+0x470>)
 8006f48:	f043 0301 	orr.w	r3, r3, #1
 8006f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8006f4e:	e00b      	b.n	8006f68 <HAL_RCC_OscConfig+0x324>
 8006f50:	4b58      	ldr	r3, [pc, #352]	; (80070b4 <HAL_RCC_OscConfig+0x470>)
 8006f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f54:	4a57      	ldr	r2, [pc, #348]	; (80070b4 <HAL_RCC_OscConfig+0x470>)
 8006f56:	f023 0301 	bic.w	r3, r3, #1
 8006f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8006f5c:	4b55      	ldr	r3, [pc, #340]	; (80070b4 <HAL_RCC_OscConfig+0x470>)
 8006f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f60:	4a54      	ldr	r2, [pc, #336]	; (80070b4 <HAL_RCC_OscConfig+0x470>)
 8006f62:	f023 0304 	bic.w	r3, r3, #4
 8006f66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d015      	beq.n	8006f9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f70:	f7fb f990 	bl	8002294 <HAL_GetTick>
 8006f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f76:	e00a      	b.n	8006f8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f78:	f7fb f98c 	bl	8002294 <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d901      	bls.n	8006f8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e0cb      	b.n	8007126 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f8e:	4b49      	ldr	r3, [pc, #292]	; (80070b4 <HAL_RCC_OscConfig+0x470>)
 8006f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d0ee      	beq.n	8006f78 <HAL_RCC_OscConfig+0x334>
 8006f9a:	e014      	b.n	8006fc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f9c:	f7fb f97a 	bl	8002294 <HAL_GetTick>
 8006fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fa2:	e00a      	b.n	8006fba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fa4:	f7fb f976 	bl	8002294 <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d901      	bls.n	8006fba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e0b5      	b.n	8007126 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fba:	4b3e      	ldr	r3, [pc, #248]	; (80070b4 <HAL_RCC_OscConfig+0x470>)
 8006fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fbe:	f003 0302 	and.w	r3, r3, #2
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1ee      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fc6:	7dfb      	ldrb	r3, [r7, #23]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d105      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fcc:	4b39      	ldr	r3, [pc, #228]	; (80070b4 <HAL_RCC_OscConfig+0x470>)
 8006fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd0:	4a38      	ldr	r2, [pc, #224]	; (80070b4 <HAL_RCC_OscConfig+0x470>)
 8006fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 80a1 	beq.w	8007124 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006fe2:	4b34      	ldr	r3, [pc, #208]	; (80070b4 <HAL_RCC_OscConfig+0x470>)
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f003 030c 	and.w	r3, r3, #12
 8006fea:	2b08      	cmp	r3, #8
 8006fec:	d05c      	beq.n	80070a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d141      	bne.n	800707a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ff6:	4b31      	ldr	r3, [pc, #196]	; (80070bc <HAL_RCC_OscConfig+0x478>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ffc:	f7fb f94a 	bl	8002294 <HAL_GetTick>
 8007000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007002:	e008      	b.n	8007016 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007004:	f7fb f946 	bl	8002294 <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	2b02      	cmp	r3, #2
 8007010:	d901      	bls.n	8007016 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e087      	b.n	8007126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007016:	4b27      	ldr	r3, [pc, #156]	; (80070b4 <HAL_RCC_OscConfig+0x470>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1f0      	bne.n	8007004 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	69da      	ldr	r2, [r3, #28]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	431a      	orrs	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007030:	019b      	lsls	r3, r3, #6
 8007032:	431a      	orrs	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007038:	085b      	lsrs	r3, r3, #1
 800703a:	3b01      	subs	r3, #1
 800703c:	041b      	lsls	r3, r3, #16
 800703e:	431a      	orrs	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007044:	061b      	lsls	r3, r3, #24
 8007046:	491b      	ldr	r1, [pc, #108]	; (80070b4 <HAL_RCC_OscConfig+0x470>)
 8007048:	4313      	orrs	r3, r2
 800704a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800704c:	4b1b      	ldr	r3, [pc, #108]	; (80070bc <HAL_RCC_OscConfig+0x478>)
 800704e:	2201      	movs	r2, #1
 8007050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007052:	f7fb f91f 	bl	8002294 <HAL_GetTick>
 8007056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007058:	e008      	b.n	800706c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800705a:	f7fb f91b 	bl	8002294 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	2b02      	cmp	r3, #2
 8007066:	d901      	bls.n	800706c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e05c      	b.n	8007126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800706c:	4b11      	ldr	r3, [pc, #68]	; (80070b4 <HAL_RCC_OscConfig+0x470>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0f0      	beq.n	800705a <HAL_RCC_OscConfig+0x416>
 8007078:	e054      	b.n	8007124 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800707a:	4b10      	ldr	r3, [pc, #64]	; (80070bc <HAL_RCC_OscConfig+0x478>)
 800707c:	2200      	movs	r2, #0
 800707e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007080:	f7fb f908 	bl	8002294 <HAL_GetTick>
 8007084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007086:	e008      	b.n	800709a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007088:	f7fb f904 	bl	8002294 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	2b02      	cmp	r3, #2
 8007094:	d901      	bls.n	800709a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e045      	b.n	8007126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800709a:	4b06      	ldr	r3, [pc, #24]	; (80070b4 <HAL_RCC_OscConfig+0x470>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1f0      	bne.n	8007088 <HAL_RCC_OscConfig+0x444>
 80070a6:	e03d      	b.n	8007124 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d107      	bne.n	80070c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e038      	b.n	8007126 <HAL_RCC_OscConfig+0x4e2>
 80070b4:	40023800 	.word	0x40023800
 80070b8:	40007000 	.word	0x40007000
 80070bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80070c0:	4b1b      	ldr	r3, [pc, #108]	; (8007130 <HAL_RCC_OscConfig+0x4ec>)
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d028      	beq.n	8007120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070d8:	429a      	cmp	r2, r3
 80070da:	d121      	bne.n	8007120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d11a      	bne.n	8007120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80070f0:	4013      	ands	r3, r2
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80070f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d111      	bne.n	8007120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007106:	085b      	lsrs	r3, r3, #1
 8007108:	3b01      	subs	r3, #1
 800710a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800710c:	429a      	cmp	r2, r3
 800710e:	d107      	bne.n	8007120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800711c:	429a      	cmp	r2, r3
 800711e:	d001      	beq.n	8007124 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e000      	b.n	8007126 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	40023800 	.word	0x40023800

08007134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d101      	bne.n	8007148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e0cc      	b.n	80072e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007148:	4b68      	ldr	r3, [pc, #416]	; (80072ec <HAL_RCC_ClockConfig+0x1b8>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0307 	and.w	r3, r3, #7
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	429a      	cmp	r2, r3
 8007154:	d90c      	bls.n	8007170 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007156:	4b65      	ldr	r3, [pc, #404]	; (80072ec <HAL_RCC_ClockConfig+0x1b8>)
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	b2d2      	uxtb	r2, r2
 800715c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800715e:	4b63      	ldr	r3, [pc, #396]	; (80072ec <HAL_RCC_ClockConfig+0x1b8>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0307 	and.w	r3, r3, #7
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	429a      	cmp	r2, r3
 800716a:	d001      	beq.n	8007170 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e0b8      	b.n	80072e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0302 	and.w	r3, r3, #2
 8007178:	2b00      	cmp	r3, #0
 800717a:	d020      	beq.n	80071be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0304 	and.w	r3, r3, #4
 8007184:	2b00      	cmp	r3, #0
 8007186:	d005      	beq.n	8007194 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007188:	4b59      	ldr	r3, [pc, #356]	; (80072f0 <HAL_RCC_ClockConfig+0x1bc>)
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	4a58      	ldr	r2, [pc, #352]	; (80072f0 <HAL_RCC_ClockConfig+0x1bc>)
 800718e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007192:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0308 	and.w	r3, r3, #8
 800719c:	2b00      	cmp	r3, #0
 800719e:	d005      	beq.n	80071ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80071a0:	4b53      	ldr	r3, [pc, #332]	; (80072f0 <HAL_RCC_ClockConfig+0x1bc>)
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	4a52      	ldr	r2, [pc, #328]	; (80072f0 <HAL_RCC_ClockConfig+0x1bc>)
 80071a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80071aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071ac:	4b50      	ldr	r3, [pc, #320]	; (80072f0 <HAL_RCC_ClockConfig+0x1bc>)
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	494d      	ldr	r1, [pc, #308]	; (80072f0 <HAL_RCC_ClockConfig+0x1bc>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d044      	beq.n	8007254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d107      	bne.n	80071e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071d2:	4b47      	ldr	r3, [pc, #284]	; (80072f0 <HAL_RCC_ClockConfig+0x1bc>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d119      	bne.n	8007212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e07f      	b.n	80072e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d003      	beq.n	80071f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071ee:	2b03      	cmp	r3, #3
 80071f0:	d107      	bne.n	8007202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071f2:	4b3f      	ldr	r3, [pc, #252]	; (80072f0 <HAL_RCC_ClockConfig+0x1bc>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d109      	bne.n	8007212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e06f      	b.n	80072e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007202:	4b3b      	ldr	r3, [pc, #236]	; (80072f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 0302 	and.w	r3, r3, #2
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e067      	b.n	80072e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007212:	4b37      	ldr	r3, [pc, #220]	; (80072f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f023 0203 	bic.w	r2, r3, #3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	4934      	ldr	r1, [pc, #208]	; (80072f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007220:	4313      	orrs	r3, r2
 8007222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007224:	f7fb f836 	bl	8002294 <HAL_GetTick>
 8007228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800722a:	e00a      	b.n	8007242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800722c:	f7fb f832 	bl	8002294 <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	f241 3288 	movw	r2, #5000	; 0x1388
 800723a:	4293      	cmp	r3, r2
 800723c:	d901      	bls.n	8007242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e04f      	b.n	80072e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007242:	4b2b      	ldr	r3, [pc, #172]	; (80072f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f003 020c 	and.w	r2, r3, #12
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	429a      	cmp	r2, r3
 8007252:	d1eb      	bne.n	800722c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007254:	4b25      	ldr	r3, [pc, #148]	; (80072ec <HAL_RCC_ClockConfig+0x1b8>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 0307 	and.w	r3, r3, #7
 800725c:	683a      	ldr	r2, [r7, #0]
 800725e:	429a      	cmp	r2, r3
 8007260:	d20c      	bcs.n	800727c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007262:	4b22      	ldr	r3, [pc, #136]	; (80072ec <HAL_RCC_ClockConfig+0x1b8>)
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	b2d2      	uxtb	r2, r2
 8007268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800726a:	4b20      	ldr	r3, [pc, #128]	; (80072ec <HAL_RCC_ClockConfig+0x1b8>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0307 	and.w	r3, r3, #7
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	429a      	cmp	r2, r3
 8007276:	d001      	beq.n	800727c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e032      	b.n	80072e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0304 	and.w	r3, r3, #4
 8007284:	2b00      	cmp	r3, #0
 8007286:	d008      	beq.n	800729a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007288:	4b19      	ldr	r3, [pc, #100]	; (80072f0 <HAL_RCC_ClockConfig+0x1bc>)
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	4916      	ldr	r1, [pc, #88]	; (80072f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007296:	4313      	orrs	r3, r2
 8007298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0308 	and.w	r3, r3, #8
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d009      	beq.n	80072ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80072a6:	4b12      	ldr	r3, [pc, #72]	; (80072f0 <HAL_RCC_ClockConfig+0x1bc>)
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	00db      	lsls	r3, r3, #3
 80072b4:	490e      	ldr	r1, [pc, #56]	; (80072f0 <HAL_RCC_ClockConfig+0x1bc>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80072ba:	f000 f821 	bl	8007300 <HAL_RCC_GetSysClockFreq>
 80072be:	4602      	mov	r2, r0
 80072c0:	4b0b      	ldr	r3, [pc, #44]	; (80072f0 <HAL_RCC_ClockConfig+0x1bc>)
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	091b      	lsrs	r3, r3, #4
 80072c6:	f003 030f 	and.w	r3, r3, #15
 80072ca:	490a      	ldr	r1, [pc, #40]	; (80072f4 <HAL_RCC_ClockConfig+0x1c0>)
 80072cc:	5ccb      	ldrb	r3, [r1, r3]
 80072ce:	fa22 f303 	lsr.w	r3, r2, r3
 80072d2:	4a09      	ldr	r2, [pc, #36]	; (80072f8 <HAL_RCC_ClockConfig+0x1c4>)
 80072d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80072d6:	4b09      	ldr	r3, [pc, #36]	; (80072fc <HAL_RCC_ClockConfig+0x1c8>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fa ff96 	bl	800220c <HAL_InitTick>

  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	40023c00 	.word	0x40023c00
 80072f0:	40023800 	.word	0x40023800
 80072f4:	080125fc 	.word	0x080125fc
 80072f8:	20000000 	.word	0x20000000
 80072fc:	20000004 	.word	0x20000004

08007300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007304:	b094      	sub	sp, #80	; 0x50
 8007306:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	647b      	str	r3, [r7, #68]	; 0x44
 800730c:	2300      	movs	r3, #0
 800730e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007310:	2300      	movs	r3, #0
 8007312:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007314:	2300      	movs	r3, #0
 8007316:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007318:	4b79      	ldr	r3, [pc, #484]	; (8007500 <HAL_RCC_GetSysClockFreq+0x200>)
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f003 030c 	and.w	r3, r3, #12
 8007320:	2b08      	cmp	r3, #8
 8007322:	d00d      	beq.n	8007340 <HAL_RCC_GetSysClockFreq+0x40>
 8007324:	2b08      	cmp	r3, #8
 8007326:	f200 80e1 	bhi.w	80074ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800732a:	2b00      	cmp	r3, #0
 800732c:	d002      	beq.n	8007334 <HAL_RCC_GetSysClockFreq+0x34>
 800732e:	2b04      	cmp	r3, #4
 8007330:	d003      	beq.n	800733a <HAL_RCC_GetSysClockFreq+0x3a>
 8007332:	e0db      	b.n	80074ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007334:	4b73      	ldr	r3, [pc, #460]	; (8007504 <HAL_RCC_GetSysClockFreq+0x204>)
 8007336:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007338:	e0db      	b.n	80074f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800733a:	4b73      	ldr	r3, [pc, #460]	; (8007508 <HAL_RCC_GetSysClockFreq+0x208>)
 800733c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800733e:	e0d8      	b.n	80074f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007340:	4b6f      	ldr	r3, [pc, #444]	; (8007500 <HAL_RCC_GetSysClockFreq+0x200>)
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007348:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800734a:	4b6d      	ldr	r3, [pc, #436]	; (8007500 <HAL_RCC_GetSysClockFreq+0x200>)
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d063      	beq.n	800741e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007356:	4b6a      	ldr	r3, [pc, #424]	; (8007500 <HAL_RCC_GetSysClockFreq+0x200>)
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	099b      	lsrs	r3, r3, #6
 800735c:	2200      	movs	r2, #0
 800735e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007360:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007368:	633b      	str	r3, [r7, #48]	; 0x30
 800736a:	2300      	movs	r3, #0
 800736c:	637b      	str	r3, [r7, #52]	; 0x34
 800736e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007372:	4622      	mov	r2, r4
 8007374:	462b      	mov	r3, r5
 8007376:	f04f 0000 	mov.w	r0, #0
 800737a:	f04f 0100 	mov.w	r1, #0
 800737e:	0159      	lsls	r1, r3, #5
 8007380:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007384:	0150      	lsls	r0, r2, #5
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	4621      	mov	r1, r4
 800738c:	1a51      	subs	r1, r2, r1
 800738e:	6139      	str	r1, [r7, #16]
 8007390:	4629      	mov	r1, r5
 8007392:	eb63 0301 	sbc.w	r3, r3, r1
 8007396:	617b      	str	r3, [r7, #20]
 8007398:	f04f 0200 	mov.w	r2, #0
 800739c:	f04f 0300 	mov.w	r3, #0
 80073a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80073a4:	4659      	mov	r1, fp
 80073a6:	018b      	lsls	r3, r1, #6
 80073a8:	4651      	mov	r1, sl
 80073aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80073ae:	4651      	mov	r1, sl
 80073b0:	018a      	lsls	r2, r1, #6
 80073b2:	4651      	mov	r1, sl
 80073b4:	ebb2 0801 	subs.w	r8, r2, r1
 80073b8:	4659      	mov	r1, fp
 80073ba:	eb63 0901 	sbc.w	r9, r3, r1
 80073be:	f04f 0200 	mov.w	r2, #0
 80073c2:	f04f 0300 	mov.w	r3, #0
 80073c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073d2:	4690      	mov	r8, r2
 80073d4:	4699      	mov	r9, r3
 80073d6:	4623      	mov	r3, r4
 80073d8:	eb18 0303 	adds.w	r3, r8, r3
 80073dc:	60bb      	str	r3, [r7, #8]
 80073de:	462b      	mov	r3, r5
 80073e0:	eb49 0303 	adc.w	r3, r9, r3
 80073e4:	60fb      	str	r3, [r7, #12]
 80073e6:	f04f 0200 	mov.w	r2, #0
 80073ea:	f04f 0300 	mov.w	r3, #0
 80073ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80073f2:	4629      	mov	r1, r5
 80073f4:	024b      	lsls	r3, r1, #9
 80073f6:	4621      	mov	r1, r4
 80073f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80073fc:	4621      	mov	r1, r4
 80073fe:	024a      	lsls	r2, r1, #9
 8007400:	4610      	mov	r0, r2
 8007402:	4619      	mov	r1, r3
 8007404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007406:	2200      	movs	r2, #0
 8007408:	62bb      	str	r3, [r7, #40]	; 0x28
 800740a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800740c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007410:	f7f9 fc3a 	bl	8000c88 <__aeabi_uldivmod>
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	4613      	mov	r3, r2
 800741a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800741c:	e058      	b.n	80074d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800741e:	4b38      	ldr	r3, [pc, #224]	; (8007500 <HAL_RCC_GetSysClockFreq+0x200>)
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	099b      	lsrs	r3, r3, #6
 8007424:	2200      	movs	r2, #0
 8007426:	4618      	mov	r0, r3
 8007428:	4611      	mov	r1, r2
 800742a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800742e:	623b      	str	r3, [r7, #32]
 8007430:	2300      	movs	r3, #0
 8007432:	627b      	str	r3, [r7, #36]	; 0x24
 8007434:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007438:	4642      	mov	r2, r8
 800743a:	464b      	mov	r3, r9
 800743c:	f04f 0000 	mov.w	r0, #0
 8007440:	f04f 0100 	mov.w	r1, #0
 8007444:	0159      	lsls	r1, r3, #5
 8007446:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800744a:	0150      	lsls	r0, r2, #5
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	4641      	mov	r1, r8
 8007452:	ebb2 0a01 	subs.w	sl, r2, r1
 8007456:	4649      	mov	r1, r9
 8007458:	eb63 0b01 	sbc.w	fp, r3, r1
 800745c:	f04f 0200 	mov.w	r2, #0
 8007460:	f04f 0300 	mov.w	r3, #0
 8007464:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007468:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800746c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007470:	ebb2 040a 	subs.w	r4, r2, sl
 8007474:	eb63 050b 	sbc.w	r5, r3, fp
 8007478:	f04f 0200 	mov.w	r2, #0
 800747c:	f04f 0300 	mov.w	r3, #0
 8007480:	00eb      	lsls	r3, r5, #3
 8007482:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007486:	00e2      	lsls	r2, r4, #3
 8007488:	4614      	mov	r4, r2
 800748a:	461d      	mov	r5, r3
 800748c:	4643      	mov	r3, r8
 800748e:	18e3      	adds	r3, r4, r3
 8007490:	603b      	str	r3, [r7, #0]
 8007492:	464b      	mov	r3, r9
 8007494:	eb45 0303 	adc.w	r3, r5, r3
 8007498:	607b      	str	r3, [r7, #4]
 800749a:	f04f 0200 	mov.w	r2, #0
 800749e:	f04f 0300 	mov.w	r3, #0
 80074a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80074a6:	4629      	mov	r1, r5
 80074a8:	028b      	lsls	r3, r1, #10
 80074aa:	4621      	mov	r1, r4
 80074ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80074b0:	4621      	mov	r1, r4
 80074b2:	028a      	lsls	r2, r1, #10
 80074b4:	4610      	mov	r0, r2
 80074b6:	4619      	mov	r1, r3
 80074b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074ba:	2200      	movs	r2, #0
 80074bc:	61bb      	str	r3, [r7, #24]
 80074be:	61fa      	str	r2, [r7, #28]
 80074c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074c4:	f7f9 fbe0 	bl	8000c88 <__aeabi_uldivmod>
 80074c8:	4602      	mov	r2, r0
 80074ca:	460b      	mov	r3, r1
 80074cc:	4613      	mov	r3, r2
 80074ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80074d0:	4b0b      	ldr	r3, [pc, #44]	; (8007500 <HAL_RCC_GetSysClockFreq+0x200>)
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	0c1b      	lsrs	r3, r3, #16
 80074d6:	f003 0303 	and.w	r3, r3, #3
 80074da:	3301      	adds	r3, #1
 80074dc:	005b      	lsls	r3, r3, #1
 80074de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80074e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80074ea:	e002      	b.n	80074f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80074ec:	4b05      	ldr	r3, [pc, #20]	; (8007504 <HAL_RCC_GetSysClockFreq+0x204>)
 80074ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80074f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3750      	adds	r7, #80	; 0x50
 80074f8:	46bd      	mov	sp, r7
 80074fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074fe:	bf00      	nop
 8007500:	40023800 	.word	0x40023800
 8007504:	00f42400 	.word	0x00f42400
 8007508:	007a1200 	.word	0x007a1200

0800750c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800750c:	b480      	push	{r7}
 800750e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007510:	4b03      	ldr	r3, [pc, #12]	; (8007520 <HAL_RCC_GetHCLKFreq+0x14>)
 8007512:	681b      	ldr	r3, [r3, #0]
}
 8007514:	4618      	mov	r0, r3
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	20000000 	.word	0x20000000

08007524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007528:	f7ff fff0 	bl	800750c <HAL_RCC_GetHCLKFreq>
 800752c:	4602      	mov	r2, r0
 800752e:	4b05      	ldr	r3, [pc, #20]	; (8007544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	0a9b      	lsrs	r3, r3, #10
 8007534:	f003 0307 	and.w	r3, r3, #7
 8007538:	4903      	ldr	r1, [pc, #12]	; (8007548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800753a:	5ccb      	ldrb	r3, [r1, r3]
 800753c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007540:	4618      	mov	r0, r3
 8007542:	bd80      	pop	{r7, pc}
 8007544:	40023800 	.word	0x40023800
 8007548:	0801260c 	.word	0x0801260c

0800754c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007550:	f7ff ffdc 	bl	800750c <HAL_RCC_GetHCLKFreq>
 8007554:	4602      	mov	r2, r0
 8007556:	4b05      	ldr	r3, [pc, #20]	; (800756c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	0b5b      	lsrs	r3, r3, #13
 800755c:	f003 0307 	and.w	r3, r3, #7
 8007560:	4903      	ldr	r1, [pc, #12]	; (8007570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007562:	5ccb      	ldrb	r3, [r1, r3]
 8007564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007568:	4618      	mov	r0, r3
 800756a:	bd80      	pop	{r7, pc}
 800756c:	40023800 	.word	0x40023800
 8007570:	0801260c 	.word	0x0801260c

08007574 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b086      	sub	sp, #24
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800757c:	2300      	movs	r3, #0
 800757e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007580:	2300      	movs	r3, #0
 8007582:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0301 	and.w	r3, r3, #1
 800758c:	2b00      	cmp	r3, #0
 800758e:	d105      	bne.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007598:	2b00      	cmp	r3, #0
 800759a:	d035      	beq.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800759c:	4b62      	ldr	r3, [pc, #392]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800759e:	2200      	movs	r2, #0
 80075a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80075a2:	f7fa fe77 	bl	8002294 <HAL_GetTick>
 80075a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80075a8:	e008      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80075aa:	f7fa fe73 	bl	8002294 <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d901      	bls.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e0b0      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80075bc:	4b5b      	ldr	r3, [pc, #364]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1f0      	bne.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	019a      	lsls	r2, r3, #6
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	071b      	lsls	r3, r3, #28
 80075d4:	4955      	ldr	r1, [pc, #340]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80075dc:	4b52      	ldr	r3, [pc, #328]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80075de:	2201      	movs	r2, #1
 80075e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80075e2:	f7fa fe57 	bl	8002294 <HAL_GetTick>
 80075e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075e8:	e008      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80075ea:	f7fa fe53 	bl	8002294 <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d901      	bls.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e090      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075fc:	4b4b      	ldr	r3, [pc, #300]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d0f0      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0302 	and.w	r3, r3, #2
 8007610:	2b00      	cmp	r3, #0
 8007612:	f000 8083 	beq.w	800771c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007616:	2300      	movs	r3, #0
 8007618:	60fb      	str	r3, [r7, #12]
 800761a:	4b44      	ldr	r3, [pc, #272]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	4a43      	ldr	r2, [pc, #268]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007624:	6413      	str	r3, [r2, #64]	; 0x40
 8007626:	4b41      	ldr	r3, [pc, #260]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800762e:	60fb      	str	r3, [r7, #12]
 8007630:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007632:	4b3f      	ldr	r3, [pc, #252]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a3e      	ldr	r2, [pc, #248]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800763c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800763e:	f7fa fe29 	bl	8002294 <HAL_GetTick>
 8007642:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007644:	e008      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007646:	f7fa fe25 	bl	8002294 <HAL_GetTick>
 800764a:	4602      	mov	r2, r0
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	1ad3      	subs	r3, r2, r3
 8007650:	2b02      	cmp	r3, #2
 8007652:	d901      	bls.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e062      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007658:	4b35      	ldr	r3, [pc, #212]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007660:	2b00      	cmp	r3, #0
 8007662:	d0f0      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007664:	4b31      	ldr	r3, [pc, #196]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800766c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d02f      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800767c:	693a      	ldr	r2, [r7, #16]
 800767e:	429a      	cmp	r2, r3
 8007680:	d028      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007682:	4b2a      	ldr	r3, [pc, #168]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800768a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800768c:	4b29      	ldr	r3, [pc, #164]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800768e:	2201      	movs	r2, #1
 8007690:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007692:	4b28      	ldr	r3, [pc, #160]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007694:	2200      	movs	r2, #0
 8007696:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007698:	4a24      	ldr	r2, [pc, #144]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800769e:	4b23      	ldr	r3, [pc, #140]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076a2:	f003 0301 	and.w	r3, r3, #1
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d114      	bne.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80076aa:	f7fa fdf3 	bl	8002294 <HAL_GetTick>
 80076ae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076b0:	e00a      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076b2:	f7fa fdef 	bl	8002294 <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d901      	bls.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e02a      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076c8:	4b18      	ldr	r3, [pc, #96]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076cc:	f003 0302 	and.w	r3, r3, #2
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d0ee      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076e0:	d10d      	bne.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80076e2:	4b12      	ldr	r3, [pc, #72]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80076f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076f6:	490d      	ldr	r1, [pc, #52]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	608b      	str	r3, [r1, #8]
 80076fc:	e005      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80076fe:	4b0b      	ldr	r3, [pc, #44]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	4a0a      	ldr	r2, [pc, #40]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007704:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007708:	6093      	str	r3, [r2, #8]
 800770a:	4b08      	ldr	r3, [pc, #32]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800770c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007716:	4905      	ldr	r1, [pc, #20]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007718:	4313      	orrs	r3, r2
 800771a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3718      	adds	r7, #24
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	42470068 	.word	0x42470068
 800772c:	40023800 	.word	0x40023800
 8007730:	40007000 	.word	0x40007000
 8007734:	42470e40 	.word	0x42470e40

08007738 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007740:	2300      	movs	r3, #0
 8007742:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007744:	2300      	movs	r3, #0
 8007746:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007748:	2300      	movs	r3, #0
 800774a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800774c:	2300      	movs	r3, #0
 800774e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d13f      	bne.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007756:	4b24      	ldr	r3, [pc, #144]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d006      	beq.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800776c:	d12f      	bne.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800776e:	4b1f      	ldr	r3, [pc, #124]	; (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007770:	617b      	str	r3, [r7, #20]
          break;
 8007772:	e02f      	b.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007774:	4b1c      	ldr	r3, [pc, #112]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800777c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007780:	d108      	bne.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007782:	4b19      	ldr	r3, [pc, #100]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800778a:	4a19      	ldr	r2, [pc, #100]	; (80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800778c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007790:	613b      	str	r3, [r7, #16]
 8007792:	e007      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007794:	4b14      	ldr	r3, [pc, #80]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800779c:	4a15      	ldr	r2, [pc, #84]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800779e:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80077a4:	4b10      	ldr	r3, [pc, #64]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80077a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077aa:	099b      	lsrs	r3, r3, #6
 80077ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	fb02 f303 	mul.w	r3, r2, r3
 80077b6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80077b8:	4b0b      	ldr	r3, [pc, #44]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80077ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077be:	0f1b      	lsrs	r3, r3, #28
 80077c0:	f003 0307 	and.w	r3, r3, #7
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ca:	617b      	str	r3, [r7, #20]
          break;
 80077cc:	e002      	b.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80077ce:	2300      	movs	r3, #0
 80077d0:	617b      	str	r3, [r7, #20]
          break;
 80077d2:	bf00      	nop
        }
      }
      break;
 80077d4:	e000      	b.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 80077d6:	bf00      	nop
    }
  }
  return frequency;
 80077d8:	697b      	ldr	r3, [r7, #20]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	371c      	adds	r7, #28
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	40023800 	.word	0x40023800
 80077ec:	00bb8000 	.word	0x00bb8000
 80077f0:	007a1200 	.word	0x007a1200
 80077f4:	00f42400 	.word	0x00f42400

080077f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d101      	bne.n	800780a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e07b      	b.n	8007902 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780e:	2b00      	cmp	r3, #0
 8007810:	d108      	bne.n	8007824 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800781a:	d009      	beq.n	8007830 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	61da      	str	r2, [r3, #28]
 8007822:	e005      	b.n	8007830 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	d106      	bne.n	8007850 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f7fa f9f2 	bl	8001c34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2202      	movs	r2, #2
 8007854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007866:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007878:	431a      	orrs	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007882:	431a      	orrs	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	431a      	orrs	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	695b      	ldr	r3, [r3, #20]
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	431a      	orrs	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078a0:	431a      	orrs	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078aa:	431a      	orrs	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a1b      	ldr	r3, [r3, #32]
 80078b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078b4:	ea42 0103 	orr.w	r1, r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	0c1b      	lsrs	r3, r3, #16
 80078ce:	f003 0104 	and.w	r1, r3, #4
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d6:	f003 0210 	and.w	r2, r3, #16
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	69da      	ldr	r2, [r3, #28]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b082      	sub	sp, #8
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d101      	bne.n	800791c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e041      	b.n	80079a0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b00      	cmp	r3, #0
 8007926:	d106      	bne.n	8007936 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f7fa f9c7 	bl	8001cc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2202      	movs	r2, #2
 800793a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	3304      	adds	r3, #4
 8007946:	4619      	mov	r1, r3
 8007948:	4610      	mov	r0, r2
 800794a:	f000 fad9 	bl	8007f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2201      	movs	r2, #1
 8007992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d101      	bne.n	80079ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e041      	b.n	8007a3e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d106      	bne.n	80079d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f839 	bl	8007a46 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2202      	movs	r2, #2
 80079d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	3304      	adds	r3, #4
 80079e4:	4619      	mov	r1, r3
 80079e6:	4610      	mov	r0, r2
 80079e8:	f000 fa8a 	bl	8007f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b083      	sub	sp, #12
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007a4e:	bf00      	nop
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
	...

08007a5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d109      	bne.n	8007a80 <HAL_TIM_PWM_Start+0x24>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	bf14      	ite	ne
 8007a78:	2301      	movne	r3, #1
 8007a7a:	2300      	moveq	r3, #0
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	e022      	b.n	8007ac6 <HAL_TIM_PWM_Start+0x6a>
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	2b04      	cmp	r3, #4
 8007a84:	d109      	bne.n	8007a9a <HAL_TIM_PWM_Start+0x3e>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	bf14      	ite	ne
 8007a92:	2301      	movne	r3, #1
 8007a94:	2300      	moveq	r3, #0
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	e015      	b.n	8007ac6 <HAL_TIM_PWM_Start+0x6a>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2b08      	cmp	r3, #8
 8007a9e:	d109      	bne.n	8007ab4 <HAL_TIM_PWM_Start+0x58>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	bf14      	ite	ne
 8007aac:	2301      	movne	r3, #1
 8007aae:	2300      	moveq	r3, #0
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	e008      	b.n	8007ac6 <HAL_TIM_PWM_Start+0x6a>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	bf14      	ite	ne
 8007ac0:	2301      	movne	r3, #1
 8007ac2:	2300      	moveq	r3, #0
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e07c      	b.n	8007bc8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d104      	bne.n	8007ade <HAL_TIM_PWM_Start+0x82>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007adc:	e013      	b.n	8007b06 <HAL_TIM_PWM_Start+0xaa>
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	2b04      	cmp	r3, #4
 8007ae2:	d104      	bne.n	8007aee <HAL_TIM_PWM_Start+0x92>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007aec:	e00b      	b.n	8007b06 <HAL_TIM_PWM_Start+0xaa>
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	2b08      	cmp	r3, #8
 8007af2:	d104      	bne.n	8007afe <HAL_TIM_PWM_Start+0xa2>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2202      	movs	r2, #2
 8007af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007afc:	e003      	b.n	8007b06 <HAL_TIM_PWM_Start+0xaa>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2202      	movs	r2, #2
 8007b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	6839      	ldr	r1, [r7, #0]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 fcec 	bl	80084ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a2d      	ldr	r2, [pc, #180]	; (8007bd0 <HAL_TIM_PWM_Start+0x174>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d004      	beq.n	8007b28 <HAL_TIM_PWM_Start+0xcc>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a2c      	ldr	r2, [pc, #176]	; (8007bd4 <HAL_TIM_PWM_Start+0x178>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d101      	bne.n	8007b2c <HAL_TIM_PWM_Start+0xd0>
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e000      	b.n	8007b2e <HAL_TIM_PWM_Start+0xd2>
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d007      	beq.n	8007b42 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a22      	ldr	r2, [pc, #136]	; (8007bd0 <HAL_TIM_PWM_Start+0x174>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d022      	beq.n	8007b92 <HAL_TIM_PWM_Start+0x136>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b54:	d01d      	beq.n	8007b92 <HAL_TIM_PWM_Start+0x136>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a1f      	ldr	r2, [pc, #124]	; (8007bd8 <HAL_TIM_PWM_Start+0x17c>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d018      	beq.n	8007b92 <HAL_TIM_PWM_Start+0x136>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a1d      	ldr	r2, [pc, #116]	; (8007bdc <HAL_TIM_PWM_Start+0x180>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d013      	beq.n	8007b92 <HAL_TIM_PWM_Start+0x136>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a1c      	ldr	r2, [pc, #112]	; (8007be0 <HAL_TIM_PWM_Start+0x184>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d00e      	beq.n	8007b92 <HAL_TIM_PWM_Start+0x136>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a16      	ldr	r2, [pc, #88]	; (8007bd4 <HAL_TIM_PWM_Start+0x178>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d009      	beq.n	8007b92 <HAL_TIM_PWM_Start+0x136>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a18      	ldr	r2, [pc, #96]	; (8007be4 <HAL_TIM_PWM_Start+0x188>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d004      	beq.n	8007b92 <HAL_TIM_PWM_Start+0x136>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a16      	ldr	r2, [pc, #88]	; (8007be8 <HAL_TIM_PWM_Start+0x18c>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d111      	bne.n	8007bb6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	f003 0307 	and.w	r3, r3, #7
 8007b9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2b06      	cmp	r3, #6
 8007ba2:	d010      	beq.n	8007bc6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f042 0201 	orr.w	r2, r2, #1
 8007bb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bb4:	e007      	b.n	8007bc6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f042 0201 	orr.w	r2, r2, #1
 8007bc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	40010000 	.word	0x40010000
 8007bd4:	40010400 	.word	0x40010400
 8007bd8:	40000400 	.word	0x40000400
 8007bdc:	40000800 	.word	0x40000800
 8007be0:	40000c00 	.word	0x40000c00
 8007be4:	40014000 	.word	0x40014000
 8007be8:	40001800 	.word	0x40001800

08007bec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b086      	sub	sp, #24
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d101      	bne.n	8007c0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007c06:	2302      	movs	r3, #2
 8007c08:	e0ae      	b.n	8007d68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2b0c      	cmp	r3, #12
 8007c16:	f200 809f 	bhi.w	8007d58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007c1a:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c20:	08007c55 	.word	0x08007c55
 8007c24:	08007d59 	.word	0x08007d59
 8007c28:	08007d59 	.word	0x08007d59
 8007c2c:	08007d59 	.word	0x08007d59
 8007c30:	08007c95 	.word	0x08007c95
 8007c34:	08007d59 	.word	0x08007d59
 8007c38:	08007d59 	.word	0x08007d59
 8007c3c:	08007d59 	.word	0x08007d59
 8007c40:	08007cd7 	.word	0x08007cd7
 8007c44:	08007d59 	.word	0x08007d59
 8007c48:	08007d59 	.word	0x08007d59
 8007c4c:	08007d59 	.word	0x08007d59
 8007c50:	08007d17 	.word	0x08007d17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	68b9      	ldr	r1, [r7, #8]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f000 f9fc 	bl	8008058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	699a      	ldr	r2, [r3, #24]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f042 0208 	orr.w	r2, r2, #8
 8007c6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	699a      	ldr	r2, [r3, #24]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f022 0204 	bic.w	r2, r2, #4
 8007c7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6999      	ldr	r1, [r3, #24]
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	691a      	ldr	r2, [r3, #16]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	430a      	orrs	r2, r1
 8007c90:	619a      	str	r2, [r3, #24]
      break;
 8007c92:	e064      	b.n	8007d5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68b9      	ldr	r1, [r7, #8]
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f000 fa4c 	bl	8008138 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	699a      	ldr	r2, [r3, #24]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	699a      	ldr	r2, [r3, #24]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	6999      	ldr	r1, [r3, #24]
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	021a      	lsls	r2, r3, #8
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	430a      	orrs	r2, r1
 8007cd2:	619a      	str	r2, [r3, #24]
      break;
 8007cd4:	e043      	b.n	8007d5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68b9      	ldr	r1, [r7, #8]
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f000 faa1 	bl	8008224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	69da      	ldr	r2, [r3, #28]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f042 0208 	orr.w	r2, r2, #8
 8007cf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	69da      	ldr	r2, [r3, #28]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f022 0204 	bic.w	r2, r2, #4
 8007d00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	69d9      	ldr	r1, [r3, #28]
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	691a      	ldr	r2, [r3, #16]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	430a      	orrs	r2, r1
 8007d12:	61da      	str	r2, [r3, #28]
      break;
 8007d14:	e023      	b.n	8007d5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68b9      	ldr	r1, [r7, #8]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f000 faf5 	bl	800830c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	69da      	ldr	r2, [r3, #28]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	69da      	ldr	r2, [r3, #28]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	69d9      	ldr	r1, [r3, #28]
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	021a      	lsls	r2, r3, #8
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	430a      	orrs	r2, r1
 8007d54:	61da      	str	r2, [r3, #28]
      break;
 8007d56:	e002      	b.n	8007d5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007d5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d101      	bne.n	8007d8c <HAL_TIM_ConfigClockSource+0x1c>
 8007d88:	2302      	movs	r3, #2
 8007d8a:	e0b4      	b.n	8007ef6 <HAL_TIM_ConfigClockSource+0x186>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2202      	movs	r2, #2
 8007d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007daa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007db2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dc4:	d03e      	beq.n	8007e44 <HAL_TIM_ConfigClockSource+0xd4>
 8007dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dca:	f200 8087 	bhi.w	8007edc <HAL_TIM_ConfigClockSource+0x16c>
 8007dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dd2:	f000 8086 	beq.w	8007ee2 <HAL_TIM_ConfigClockSource+0x172>
 8007dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dda:	d87f      	bhi.n	8007edc <HAL_TIM_ConfigClockSource+0x16c>
 8007ddc:	2b70      	cmp	r3, #112	; 0x70
 8007dde:	d01a      	beq.n	8007e16 <HAL_TIM_ConfigClockSource+0xa6>
 8007de0:	2b70      	cmp	r3, #112	; 0x70
 8007de2:	d87b      	bhi.n	8007edc <HAL_TIM_ConfigClockSource+0x16c>
 8007de4:	2b60      	cmp	r3, #96	; 0x60
 8007de6:	d050      	beq.n	8007e8a <HAL_TIM_ConfigClockSource+0x11a>
 8007de8:	2b60      	cmp	r3, #96	; 0x60
 8007dea:	d877      	bhi.n	8007edc <HAL_TIM_ConfigClockSource+0x16c>
 8007dec:	2b50      	cmp	r3, #80	; 0x50
 8007dee:	d03c      	beq.n	8007e6a <HAL_TIM_ConfigClockSource+0xfa>
 8007df0:	2b50      	cmp	r3, #80	; 0x50
 8007df2:	d873      	bhi.n	8007edc <HAL_TIM_ConfigClockSource+0x16c>
 8007df4:	2b40      	cmp	r3, #64	; 0x40
 8007df6:	d058      	beq.n	8007eaa <HAL_TIM_ConfigClockSource+0x13a>
 8007df8:	2b40      	cmp	r3, #64	; 0x40
 8007dfa:	d86f      	bhi.n	8007edc <HAL_TIM_ConfigClockSource+0x16c>
 8007dfc:	2b30      	cmp	r3, #48	; 0x30
 8007dfe:	d064      	beq.n	8007eca <HAL_TIM_ConfigClockSource+0x15a>
 8007e00:	2b30      	cmp	r3, #48	; 0x30
 8007e02:	d86b      	bhi.n	8007edc <HAL_TIM_ConfigClockSource+0x16c>
 8007e04:	2b20      	cmp	r3, #32
 8007e06:	d060      	beq.n	8007eca <HAL_TIM_ConfigClockSource+0x15a>
 8007e08:	2b20      	cmp	r3, #32
 8007e0a:	d867      	bhi.n	8007edc <HAL_TIM_ConfigClockSource+0x16c>
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d05c      	beq.n	8007eca <HAL_TIM_ConfigClockSource+0x15a>
 8007e10:	2b10      	cmp	r3, #16
 8007e12:	d05a      	beq.n	8007eca <HAL_TIM_ConfigClockSource+0x15a>
 8007e14:	e062      	b.n	8007edc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e26:	f000 fb41 	bl	80084ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	609a      	str	r2, [r3, #8]
      break;
 8007e42:	e04f      	b.n	8007ee4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e54:	f000 fb2a 	bl	80084ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689a      	ldr	r2, [r3, #8]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e66:	609a      	str	r2, [r3, #8]
      break;
 8007e68:	e03c      	b.n	8007ee4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e76:	461a      	mov	r2, r3
 8007e78:	f000 fa9e 	bl	80083b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2150      	movs	r1, #80	; 0x50
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 faf7 	bl	8008476 <TIM_ITRx_SetConfig>
      break;
 8007e88:	e02c      	b.n	8007ee4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e96:	461a      	mov	r2, r3
 8007e98:	f000 fabd 	bl	8008416 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2160      	movs	r1, #96	; 0x60
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 fae7 	bl	8008476 <TIM_ITRx_SetConfig>
      break;
 8007ea8:	e01c      	b.n	8007ee4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	f000 fa7e 	bl	80083b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2140      	movs	r1, #64	; 0x40
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 fad7 	bl	8008476 <TIM_ITRx_SetConfig>
      break;
 8007ec8:	e00c      	b.n	8007ee4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	f000 face 	bl	8008476 <TIM_ITRx_SetConfig>
      break;
 8007eda:	e003      	b.n	8007ee4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	73fb      	strb	r3, [r7, #15]
      break;
 8007ee0:	e000      	b.n	8007ee4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007ee2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
	...

08007f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a46      	ldr	r2, [pc, #280]	; (800802c <TIM_Base_SetConfig+0x12c>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d013      	beq.n	8007f40 <TIM_Base_SetConfig+0x40>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f1e:	d00f      	beq.n	8007f40 <TIM_Base_SetConfig+0x40>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a43      	ldr	r2, [pc, #268]	; (8008030 <TIM_Base_SetConfig+0x130>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d00b      	beq.n	8007f40 <TIM_Base_SetConfig+0x40>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a42      	ldr	r2, [pc, #264]	; (8008034 <TIM_Base_SetConfig+0x134>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d007      	beq.n	8007f40 <TIM_Base_SetConfig+0x40>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a41      	ldr	r2, [pc, #260]	; (8008038 <TIM_Base_SetConfig+0x138>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d003      	beq.n	8007f40 <TIM_Base_SetConfig+0x40>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a40      	ldr	r2, [pc, #256]	; (800803c <TIM_Base_SetConfig+0x13c>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d108      	bne.n	8007f52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a35      	ldr	r2, [pc, #212]	; (800802c <TIM_Base_SetConfig+0x12c>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d02b      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f60:	d027      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a32      	ldr	r2, [pc, #200]	; (8008030 <TIM_Base_SetConfig+0x130>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d023      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a31      	ldr	r2, [pc, #196]	; (8008034 <TIM_Base_SetConfig+0x134>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d01f      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a30      	ldr	r2, [pc, #192]	; (8008038 <TIM_Base_SetConfig+0x138>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d01b      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a2f      	ldr	r2, [pc, #188]	; (800803c <TIM_Base_SetConfig+0x13c>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d017      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a2e      	ldr	r2, [pc, #184]	; (8008040 <TIM_Base_SetConfig+0x140>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d013      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a2d      	ldr	r2, [pc, #180]	; (8008044 <TIM_Base_SetConfig+0x144>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d00f      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a2c      	ldr	r2, [pc, #176]	; (8008048 <TIM_Base_SetConfig+0x148>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d00b      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a2b      	ldr	r2, [pc, #172]	; (800804c <TIM_Base_SetConfig+0x14c>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d007      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a2a      	ldr	r2, [pc, #168]	; (8008050 <TIM_Base_SetConfig+0x150>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d003      	beq.n	8007fb2 <TIM_Base_SetConfig+0xb2>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a29      	ldr	r2, [pc, #164]	; (8008054 <TIM_Base_SetConfig+0x154>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d108      	bne.n	8007fc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	695b      	ldr	r3, [r3, #20]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	689a      	ldr	r2, [r3, #8]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a10      	ldr	r2, [pc, #64]	; (800802c <TIM_Base_SetConfig+0x12c>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d003      	beq.n	8007ff8 <TIM_Base_SetConfig+0xf8>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a12      	ldr	r2, [pc, #72]	; (800803c <TIM_Base_SetConfig+0x13c>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d103      	bne.n	8008000 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	691a      	ldr	r2, [r3, #16]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	f003 0301 	and.w	r3, r3, #1
 800800e:	2b01      	cmp	r3, #1
 8008010:	d105      	bne.n	800801e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	f023 0201 	bic.w	r2, r3, #1
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	611a      	str	r2, [r3, #16]
  }
}
 800801e:	bf00      	nop
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	40010000 	.word	0x40010000
 8008030:	40000400 	.word	0x40000400
 8008034:	40000800 	.word	0x40000800
 8008038:	40000c00 	.word	0x40000c00
 800803c:	40010400 	.word	0x40010400
 8008040:	40014000 	.word	0x40014000
 8008044:	40014400 	.word	0x40014400
 8008048:	40014800 	.word	0x40014800
 800804c:	40001800 	.word	0x40001800
 8008050:	40001c00 	.word	0x40001c00
 8008054:	40002000 	.word	0x40002000

08008058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008058:	b480      	push	{r7}
 800805a:	b087      	sub	sp, #28
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a1b      	ldr	r3, [r3, #32]
 8008066:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a1b      	ldr	r3, [r3, #32]
 800806c:	f023 0201 	bic.w	r2, r3, #1
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f023 0303 	bic.w	r3, r3, #3
 800808e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	4313      	orrs	r3, r2
 8008098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	f023 0302 	bic.w	r3, r3, #2
 80080a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a20      	ldr	r2, [pc, #128]	; (8008130 <TIM_OC1_SetConfig+0xd8>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d003      	beq.n	80080bc <TIM_OC1_SetConfig+0x64>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a1f      	ldr	r2, [pc, #124]	; (8008134 <TIM_OC1_SetConfig+0xdc>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d10c      	bne.n	80080d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f023 0308 	bic.w	r3, r3, #8
 80080c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	f023 0304 	bic.w	r3, r3, #4
 80080d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a15      	ldr	r2, [pc, #84]	; (8008130 <TIM_OC1_SetConfig+0xd8>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d003      	beq.n	80080e6 <TIM_OC1_SetConfig+0x8e>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a14      	ldr	r2, [pc, #80]	; (8008134 <TIM_OC1_SetConfig+0xdc>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d111      	bne.n	800810a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	695b      	ldr	r3, [r3, #20]
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	4313      	orrs	r3, r2
 8008108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	685a      	ldr	r2, [r3, #4]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	621a      	str	r2, [r3, #32]
}
 8008124:	bf00      	nop
 8008126:	371c      	adds	r7, #28
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	40010000 	.word	0x40010000
 8008134:	40010400 	.word	0x40010400

08008138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008138:	b480      	push	{r7}
 800813a:	b087      	sub	sp, #28
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a1b      	ldr	r3, [r3, #32]
 8008146:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a1b      	ldr	r3, [r3, #32]
 800814c:	f023 0210 	bic.w	r2, r3, #16
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800816e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	021b      	lsls	r3, r3, #8
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	4313      	orrs	r3, r2
 800817a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	f023 0320 	bic.w	r3, r3, #32
 8008182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	011b      	lsls	r3, r3, #4
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	4313      	orrs	r3, r2
 800818e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a22      	ldr	r2, [pc, #136]	; (800821c <TIM_OC2_SetConfig+0xe4>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d003      	beq.n	80081a0 <TIM_OC2_SetConfig+0x68>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a21      	ldr	r2, [pc, #132]	; (8008220 <TIM_OC2_SetConfig+0xe8>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d10d      	bne.n	80081bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	011b      	lsls	r3, r3, #4
 80081ae:	697a      	ldr	r2, [r7, #20]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a17      	ldr	r2, [pc, #92]	; (800821c <TIM_OC2_SetConfig+0xe4>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d003      	beq.n	80081cc <TIM_OC2_SetConfig+0x94>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a16      	ldr	r2, [pc, #88]	; (8008220 <TIM_OC2_SetConfig+0xe8>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d113      	bne.n	80081f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	695b      	ldr	r3, [r3, #20]
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	693a      	ldr	r2, [r7, #16]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	693a      	ldr	r2, [r7, #16]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	693a      	ldr	r2, [r7, #16]
 80081f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	685a      	ldr	r2, [r3, #4]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	621a      	str	r2, [r3, #32]
}
 800820e:	bf00      	nop
 8008210:	371c      	adds	r7, #28
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	40010000 	.word	0x40010000
 8008220:	40010400 	.word	0x40010400

08008224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008224:	b480      	push	{r7}
 8008226:	b087      	sub	sp, #28
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a1b      	ldr	r3, [r3, #32]
 8008232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a1b      	ldr	r3, [r3, #32]
 8008238:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f023 0303 	bic.w	r3, r3, #3
 800825a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	4313      	orrs	r3, r2
 8008264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800826c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	021b      	lsls	r3, r3, #8
 8008274:	697a      	ldr	r2, [r7, #20]
 8008276:	4313      	orrs	r3, r2
 8008278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a21      	ldr	r2, [pc, #132]	; (8008304 <TIM_OC3_SetConfig+0xe0>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d003      	beq.n	800828a <TIM_OC3_SetConfig+0x66>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a20      	ldr	r2, [pc, #128]	; (8008308 <TIM_OC3_SetConfig+0xe4>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d10d      	bne.n	80082a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	021b      	lsls	r3, r3, #8
 8008298:	697a      	ldr	r2, [r7, #20]
 800829a:	4313      	orrs	r3, r2
 800829c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a16      	ldr	r2, [pc, #88]	; (8008304 <TIM_OC3_SetConfig+0xe0>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d003      	beq.n	80082b6 <TIM_OC3_SetConfig+0x92>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a15      	ldr	r2, [pc, #84]	; (8008308 <TIM_OC3_SetConfig+0xe4>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d113      	bne.n	80082de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	011b      	lsls	r3, r3, #4
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	011b      	lsls	r3, r3, #4
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	4313      	orrs	r3, r2
 80082dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	685a      	ldr	r2, [r3, #4]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	621a      	str	r2, [r3, #32]
}
 80082f8:	bf00      	nop
 80082fa:	371c      	adds	r7, #28
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr
 8008304:	40010000 	.word	0x40010000
 8008308:	40010400 	.word	0x40010400

0800830c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800830c:	b480      	push	{r7}
 800830e:	b087      	sub	sp, #28
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a1b      	ldr	r3, [r3, #32]
 800831a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a1b      	ldr	r3, [r3, #32]
 8008320:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	69db      	ldr	r3, [r3, #28]
 8008332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800833a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	021b      	lsls	r3, r3, #8
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	4313      	orrs	r3, r2
 800834e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	031b      	lsls	r3, r3, #12
 800835e:	693a      	ldr	r2, [r7, #16]
 8008360:	4313      	orrs	r3, r2
 8008362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a12      	ldr	r2, [pc, #72]	; (80083b0 <TIM_OC4_SetConfig+0xa4>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d003      	beq.n	8008374 <TIM_OC4_SetConfig+0x68>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a11      	ldr	r2, [pc, #68]	; (80083b4 <TIM_OC4_SetConfig+0xa8>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d109      	bne.n	8008388 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800837a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	695b      	ldr	r3, [r3, #20]
 8008380:	019b      	lsls	r3, r3, #6
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	4313      	orrs	r3, r2
 8008386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	685a      	ldr	r2, [r3, #4]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	693a      	ldr	r2, [r7, #16]
 80083a0:	621a      	str	r2, [r3, #32]
}
 80083a2:	bf00      	nop
 80083a4:	371c      	adds	r7, #28
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	40010000 	.word	0x40010000
 80083b4:	40010400 	.word	0x40010400

080083b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b087      	sub	sp, #28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6a1b      	ldr	r3, [r3, #32]
 80083c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6a1b      	ldr	r3, [r3, #32]
 80083ce:	f023 0201 	bic.w	r2, r3, #1
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	011b      	lsls	r3, r3, #4
 80083e8:	693a      	ldr	r2, [r7, #16]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	f023 030a 	bic.w	r3, r3, #10
 80083f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	621a      	str	r2, [r3, #32]
}
 800840a:	bf00      	nop
 800840c:	371c      	adds	r7, #28
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008416:	b480      	push	{r7}
 8008418:	b087      	sub	sp, #28
 800841a:	af00      	add	r7, sp, #0
 800841c:	60f8      	str	r0, [r7, #12]
 800841e:	60b9      	str	r1, [r7, #8]
 8008420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6a1b      	ldr	r3, [r3, #32]
 800842c:	f023 0210 	bic.w	r2, r3, #16
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008440:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	031b      	lsls	r3, r3, #12
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	4313      	orrs	r3, r2
 800844a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008452:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	011b      	lsls	r3, r3, #4
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	4313      	orrs	r3, r2
 800845c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	621a      	str	r2, [r3, #32]
}
 800846a:	bf00      	nop
 800846c:	371c      	adds	r7, #28
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr

08008476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008476:	b480      	push	{r7}
 8008478:	b085      	sub	sp, #20
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
 800847e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800848c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800848e:	683a      	ldr	r2, [r7, #0]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	4313      	orrs	r3, r2
 8008494:	f043 0307 	orr.w	r3, r3, #7
 8008498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	609a      	str	r2, [r3, #8]
}
 80084a0:	bf00      	nop
 80084a2:	3714      	adds	r7, #20
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b087      	sub	sp, #28
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]
 80084b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	021a      	lsls	r2, r3, #8
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	431a      	orrs	r2, r3
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	697a      	ldr	r2, [r7, #20]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	697a      	ldr	r2, [r7, #20]
 80084de:	609a      	str	r2, [r3, #8]
}
 80084e0:	bf00      	nop
 80084e2:	371c      	adds	r7, #28
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b087      	sub	sp, #28
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	f003 031f 	and.w	r3, r3, #31
 80084fe:	2201      	movs	r2, #1
 8008500:	fa02 f303 	lsl.w	r3, r2, r3
 8008504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6a1a      	ldr	r2, [r3, #32]
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	43db      	mvns	r3, r3
 800850e:	401a      	ands	r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6a1a      	ldr	r2, [r3, #32]
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f003 031f 	and.w	r3, r3, #31
 800851e:	6879      	ldr	r1, [r7, #4]
 8008520:	fa01 f303 	lsl.w	r3, r1, r3
 8008524:	431a      	orrs	r2, r3
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	621a      	str	r2, [r3, #32]
}
 800852a:	bf00      	nop
 800852c:	371c      	adds	r7, #28
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
	...

08008538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008548:	2b01      	cmp	r3, #1
 800854a:	d101      	bne.n	8008550 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800854c:	2302      	movs	r3, #2
 800854e:	e05a      	b.n	8008606 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2202      	movs	r2, #2
 800855c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008576:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	4313      	orrs	r3, r2
 8008580:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a21      	ldr	r2, [pc, #132]	; (8008614 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d022      	beq.n	80085da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800859c:	d01d      	beq.n	80085da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a1d      	ldr	r2, [pc, #116]	; (8008618 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d018      	beq.n	80085da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a1b      	ldr	r2, [pc, #108]	; (800861c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d013      	beq.n	80085da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a1a      	ldr	r2, [pc, #104]	; (8008620 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d00e      	beq.n	80085da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a18      	ldr	r2, [pc, #96]	; (8008624 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d009      	beq.n	80085da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a17      	ldr	r2, [pc, #92]	; (8008628 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d004      	beq.n	80085da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a15      	ldr	r2, [pc, #84]	; (800862c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d10c      	bne.n	80085f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	40010000 	.word	0x40010000
 8008618:	40000400 	.word	0x40000400
 800861c:	40000800 	.word	0x40000800
 8008620:	40000c00 	.word	0x40000c00
 8008624:	40010400 	.word	0x40010400
 8008628:	40014000 	.word	0x40014000
 800862c:	40001800 	.word	0x40001800

08008630 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800863a:	2300      	movs	r3, #0
 800863c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008644:	2b01      	cmp	r3, #1
 8008646:	d101      	bne.n	800864c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008648:	2302      	movs	r3, #2
 800864a:	e03d      	b.n	80086c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	4313      	orrs	r3, r2
 8008660:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	4313      	orrs	r3, r2
 800866e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	4313      	orrs	r3, r2
 800867c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4313      	orrs	r3, r2
 800868a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	4313      	orrs	r3, r2
 8008698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	695b      	ldr	r3, [r3, #20]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	69db      	ldr	r3, [r3, #28]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3714      	adds	r7, #20
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d101      	bne.n	80086e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e042      	b.n	800876c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d106      	bne.n	8008700 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7f9 fb3e 	bl	8001d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2224      	movs	r2, #36	; 0x24
 8008704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68da      	ldr	r2, [r3, #12]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008716:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 ff4f 	bl	80095bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	691a      	ldr	r2, [r3, #16]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800872c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	695a      	ldr	r2, [r3, #20]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800873c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68da      	ldr	r2, [r3, #12]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800874c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2220      	movs	r2, #32
 8008758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2220      	movs	r2, #32
 8008760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b08a      	sub	sp, #40	; 0x28
 8008778:	af02      	add	r7, sp, #8
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	603b      	str	r3, [r7, #0]
 8008780:	4613      	mov	r3, r2
 8008782:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008784:	2300      	movs	r3, #0
 8008786:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800878e:	b2db      	uxtb	r3, r3
 8008790:	2b20      	cmp	r3, #32
 8008792:	d175      	bne.n	8008880 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d002      	beq.n	80087a0 <HAL_UART_Transmit+0x2c>
 800879a:	88fb      	ldrh	r3, [r7, #6]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d101      	bne.n	80087a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	e06e      	b.n	8008882 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2221      	movs	r2, #33	; 0x21
 80087ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087b2:	f7f9 fd6f 	bl	8002294 <HAL_GetTick>
 80087b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	88fa      	ldrh	r2, [r7, #6]
 80087bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	88fa      	ldrh	r2, [r7, #6]
 80087c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087cc:	d108      	bne.n	80087e0 <HAL_UART_Transmit+0x6c>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d104      	bne.n	80087e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80087d6:	2300      	movs	r3, #0
 80087d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	61bb      	str	r3, [r7, #24]
 80087de:	e003      	b.n	80087e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80087e4:	2300      	movs	r3, #0
 80087e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80087e8:	e02e      	b.n	8008848 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	2200      	movs	r2, #0
 80087f2:	2180      	movs	r1, #128	; 0x80
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f000 fc27 	bl	8009048 <UART_WaitOnFlagUntilTimeout>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d005      	beq.n	800880c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2220      	movs	r2, #32
 8008804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8008808:	2303      	movs	r3, #3
 800880a:	e03a      	b.n	8008882 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10b      	bne.n	800882a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	881b      	ldrh	r3, [r3, #0]
 8008816:	461a      	mov	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008820:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	3302      	adds	r3, #2
 8008826:	61bb      	str	r3, [r7, #24]
 8008828:	e007      	b.n	800883a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	781a      	ldrb	r2, [r3, #0]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	3301      	adds	r3, #1
 8008838:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800883e:	b29b      	uxth	r3, r3
 8008840:	3b01      	subs	r3, #1
 8008842:	b29a      	uxth	r2, r3
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800884c:	b29b      	uxth	r3, r3
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1cb      	bne.n	80087ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	9300      	str	r3, [sp, #0]
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	2200      	movs	r2, #0
 800885a:	2140      	movs	r1, #64	; 0x40
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f000 fbf3 	bl	8009048 <UART_WaitOnFlagUntilTimeout>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d005      	beq.n	8008874 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2220      	movs	r2, #32
 800886c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8008870:	2303      	movs	r3, #3
 8008872:	e006      	b.n	8008882 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2220      	movs	r2, #32
 8008878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800887c:	2300      	movs	r3, #0
 800887e:	e000      	b.n	8008882 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008880:	2302      	movs	r3, #2
  }
}
 8008882:	4618      	mov	r0, r3
 8008884:	3720      	adds	r7, #32
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b084      	sub	sp, #16
 800888e:	af00      	add	r7, sp, #0
 8008890:	60f8      	str	r0, [r7, #12]
 8008892:	60b9      	str	r1, [r7, #8]
 8008894:	4613      	mov	r3, r2
 8008896:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	2b20      	cmp	r3, #32
 80088a2:	d112      	bne.n	80088ca <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d002      	beq.n	80088b0 <HAL_UART_Receive_DMA+0x26>
 80088aa:	88fb      	ldrh	r3, [r7, #6]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	e00b      	b.n	80088cc <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2200      	movs	r2, #0
 80088b8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80088ba:	88fb      	ldrh	r3, [r7, #6]
 80088bc:	461a      	mov	r2, r3
 80088be:	68b9      	ldr	r1, [r7, #8]
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f000 fc1b 	bl	80090fc <UART_Start_Receive_DMA>
 80088c6:	4603      	mov	r3, r0
 80088c8:	e000      	b.n	80088cc <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80088ca:	2302      	movs	r3, #2
  }
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b0ba      	sub	sp, #232	; 0xe8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	695b      	ldr	r3, [r3, #20]
 80088f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80088fa:	2300      	movs	r3, #0
 80088fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008900:	2300      	movs	r3, #0
 8008902:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800890a:	f003 030f 	and.w	r3, r3, #15
 800890e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008912:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10f      	bne.n	800893a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800891a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800891e:	f003 0320 	and.w	r3, r3, #32
 8008922:	2b00      	cmp	r3, #0
 8008924:	d009      	beq.n	800893a <HAL_UART_IRQHandler+0x66>
 8008926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800892a:	f003 0320 	and.w	r3, r3, #32
 800892e:	2b00      	cmp	r3, #0
 8008930:	d003      	beq.n	800893a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 fd83 	bl	800943e <UART_Receive_IT>
      return;
 8008938:	e25b      	b.n	8008df2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800893a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800893e:	2b00      	cmp	r3, #0
 8008940:	f000 80de 	beq.w	8008b00 <HAL_UART_IRQHandler+0x22c>
 8008944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008948:	f003 0301 	and.w	r3, r3, #1
 800894c:	2b00      	cmp	r3, #0
 800894e:	d106      	bne.n	800895e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008954:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008958:	2b00      	cmp	r3, #0
 800895a:	f000 80d1 	beq.w	8008b00 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800895e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00b      	beq.n	8008982 <HAL_UART_IRQHandler+0xae>
 800896a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800896e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008972:	2b00      	cmp	r3, #0
 8008974:	d005      	beq.n	8008982 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800897a:	f043 0201 	orr.w	r2, r3, #1
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008986:	f003 0304 	and.w	r3, r3, #4
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00b      	beq.n	80089a6 <HAL_UART_IRQHandler+0xd2>
 800898e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008992:	f003 0301 	and.w	r3, r3, #1
 8008996:	2b00      	cmp	r3, #0
 8008998:	d005      	beq.n	80089a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800899e:	f043 0202 	orr.w	r2, r3, #2
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089aa:	f003 0302 	and.w	r3, r3, #2
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00b      	beq.n	80089ca <HAL_UART_IRQHandler+0xf6>
 80089b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089b6:	f003 0301 	and.w	r3, r3, #1
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d005      	beq.n	80089ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089c2:	f043 0204 	orr.w	r2, r3, #4
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80089ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089ce:	f003 0308 	and.w	r3, r3, #8
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d011      	beq.n	80089fa <HAL_UART_IRQHandler+0x126>
 80089d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089da:	f003 0320 	and.w	r3, r3, #32
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d105      	bne.n	80089ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80089e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089e6:	f003 0301 	and.w	r3, r3, #1
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d005      	beq.n	80089fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089f2:	f043 0208 	orr.w	r2, r3, #8
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f000 81f2 	beq.w	8008de8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a08:	f003 0320 	and.w	r3, r3, #32
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d008      	beq.n	8008a22 <HAL_UART_IRQHandler+0x14e>
 8008a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a14:	f003 0320 	and.w	r3, r3, #32
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d002      	beq.n	8008a22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 fd0e 	bl	800943e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	695b      	ldr	r3, [r3, #20]
 8008a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a2c:	2b40      	cmp	r3, #64	; 0x40
 8008a2e:	bf0c      	ite	eq
 8008a30:	2301      	moveq	r3, #1
 8008a32:	2300      	movne	r3, #0
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a3e:	f003 0308 	and.w	r3, r3, #8
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d103      	bne.n	8008a4e <HAL_UART_IRQHandler+0x17a>
 8008a46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d04f      	beq.n	8008aee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fc16 	bl	8009280 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	695b      	ldr	r3, [r3, #20]
 8008a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a5e:	2b40      	cmp	r3, #64	; 0x40
 8008a60:	d141      	bne.n	8008ae6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3314      	adds	r3, #20
 8008a68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a70:	e853 3f00 	ldrex	r3, [r3]
 8008a74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008a78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	3314      	adds	r3, #20
 8008a8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008a8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008a92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008a9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008a9e:	e841 2300 	strex	r3, r2, [r1]
 8008aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008aa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1d9      	bne.n	8008a62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d013      	beq.n	8008ade <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aba:	4a7e      	ldr	r2, [pc, #504]	; (8008cb4 <HAL_UART_IRQHandler+0x3e0>)
 8008abc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7f9 fe9e 	bl	8002804 <HAL_DMA_Abort_IT>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d016      	beq.n	8008afc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008ad8:	4610      	mov	r0, r2
 8008ada:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008adc:	e00e      	b.n	8008afc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f99e 	bl	8008e20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ae4:	e00a      	b.n	8008afc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 f99a 	bl	8008e20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aec:	e006      	b.n	8008afc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f996 	bl	8008e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008afa:	e175      	b.n	8008de8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008afc:	bf00      	nop
    return;
 8008afe:	e173      	b.n	8008de8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	f040 814f 	bne.w	8008da8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b0e:	f003 0310 	and.w	r3, r3, #16
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f000 8148 	beq.w	8008da8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b1c:	f003 0310 	and.w	r3, r3, #16
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f000 8141 	beq.w	8008da8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b26:	2300      	movs	r3, #0
 8008b28:	60bb      	str	r3, [r7, #8]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	60bb      	str	r3, [r7, #8]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	60bb      	str	r3, [r7, #8]
 8008b3a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	695b      	ldr	r3, [r3, #20]
 8008b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b46:	2b40      	cmp	r3, #64	; 0x40
 8008b48:	f040 80b6 	bne.w	8008cb8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f000 8145 	beq.w	8008dec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	f080 813e 	bcs.w	8008dec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b76:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b7c:	69db      	ldr	r3, [r3, #28]
 8008b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b82:	f000 8088 	beq.w	8008c96 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	330c      	adds	r3, #12
 8008b8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b94:	e853 3f00 	ldrex	r3, [r3]
 8008b98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008b9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ba4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	330c      	adds	r3, #12
 8008bae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008bb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008bb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008bbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008bc2:	e841 2300 	strex	r3, r2, [r1]
 8008bc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008bca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1d9      	bne.n	8008b86 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	3314      	adds	r3, #20
 8008bd8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bdc:	e853 3f00 	ldrex	r3, [r3]
 8008be0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008be2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008be4:	f023 0301 	bic.w	r3, r3, #1
 8008be8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3314      	adds	r3, #20
 8008bf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008bf6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008bfa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008bfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008c02:	e841 2300 	strex	r3, r2, [r1]
 8008c06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008c08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d1e1      	bne.n	8008bd2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	3314      	adds	r3, #20
 8008c14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c18:	e853 3f00 	ldrex	r3, [r3]
 8008c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008c1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	3314      	adds	r3, #20
 8008c2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008c32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008c34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008c38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008c3a:	e841 2300 	strex	r3, r2, [r1]
 8008c3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008c40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1e3      	bne.n	8008c0e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2220      	movs	r2, #32
 8008c4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	330c      	adds	r3, #12
 8008c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c5e:	e853 3f00 	ldrex	r3, [r3]
 8008c62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c66:	f023 0310 	bic.w	r3, r3, #16
 8008c6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	330c      	adds	r3, #12
 8008c74:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008c78:	65ba      	str	r2, [r7, #88]	; 0x58
 8008c7a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c80:	e841 2300 	strex	r3, r2, [r1]
 8008c84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1e3      	bne.n	8008c54 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7f9 fd47 	bl	8002724 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2202      	movs	r2, #2
 8008c9a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	1ad3      	subs	r3, r2, r3
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	4619      	mov	r1, r3
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 f8c1 	bl	8008e34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008cb2:	e09b      	b.n	8008dec <HAL_UART_IRQHandler+0x518>
 8008cb4:	08009347 	.word	0x08009347
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	1ad3      	subs	r3, r2, r3
 8008cc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f000 808e 	beq.w	8008df0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008cd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f000 8089 	beq.w	8008df0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	330c      	adds	r3, #12
 8008ce4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce8:	e853 3f00 	ldrex	r3, [r3]
 8008cec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	330c      	adds	r3, #12
 8008cfe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008d02:	647a      	str	r2, [r7, #68]	; 0x44
 8008d04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d0a:	e841 2300 	strex	r3, r2, [r1]
 8008d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1e3      	bne.n	8008cde <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	3314      	adds	r3, #20
 8008d1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d20:	e853 3f00 	ldrex	r3, [r3]
 8008d24:	623b      	str	r3, [r7, #32]
   return(result);
 8008d26:	6a3b      	ldr	r3, [r7, #32]
 8008d28:	f023 0301 	bic.w	r3, r3, #1
 8008d2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	3314      	adds	r3, #20
 8008d36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008d3a:	633a      	str	r2, [r7, #48]	; 0x30
 8008d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d42:	e841 2300 	strex	r3, r2, [r1]
 8008d46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1e3      	bne.n	8008d16 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2220      	movs	r2, #32
 8008d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	330c      	adds	r3, #12
 8008d62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	e853 3f00 	ldrex	r3, [r3]
 8008d6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f023 0310 	bic.w	r3, r3, #16
 8008d72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	330c      	adds	r3, #12
 8008d7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008d80:	61fa      	str	r2, [r7, #28]
 8008d82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d84:	69b9      	ldr	r1, [r7, #24]
 8008d86:	69fa      	ldr	r2, [r7, #28]
 8008d88:	e841 2300 	strex	r3, r2, [r1]
 8008d8c:	617b      	str	r3, [r7, #20]
   return(result);
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d1e3      	bne.n	8008d5c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2202      	movs	r2, #2
 8008d98:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d9e:	4619      	mov	r1, r3
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 f847 	bl	8008e34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008da6:	e023      	b.n	8008df0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d009      	beq.n	8008dc8 <HAL_UART_IRQHandler+0x4f4>
 8008db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d003      	beq.n	8008dc8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fad4 	bl	800936e <UART_Transmit_IT>
    return;
 8008dc6:	e014      	b.n	8008df2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00e      	beq.n	8008df2 <HAL_UART_IRQHandler+0x51e>
 8008dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d008      	beq.n	8008df2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 fb14 	bl	800940e <UART_EndTransmit_IT>
    return;
 8008de6:	e004      	b.n	8008df2 <HAL_UART_IRQHandler+0x51e>
    return;
 8008de8:	bf00      	nop
 8008dea:	e002      	b.n	8008df2 <HAL_UART_IRQHandler+0x51e>
      return;
 8008dec:	bf00      	nop
 8008dee:	e000      	b.n	8008df2 <HAL_UART_IRQHandler+0x51e>
      return;
 8008df0:	bf00      	nop
  }
}
 8008df2:	37e8      	adds	r7, #232	; 0xe8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008e28:	bf00      	nop
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b09c      	sub	sp, #112	; 0x70
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e58:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d172      	bne.n	8008f4e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	330c      	adds	r3, #12
 8008e74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e78:	e853 3f00 	ldrex	r3, [r3]
 8008e7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e84:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	330c      	adds	r3, #12
 8008e8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e8e:	65ba      	str	r2, [r7, #88]	; 0x58
 8008e90:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e96:	e841 2300 	strex	r3, r2, [r1]
 8008e9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1e5      	bne.n	8008e6e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	3314      	adds	r3, #20
 8008ea8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eac:	e853 3f00 	ldrex	r3, [r3]
 8008eb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eb4:	f023 0301 	bic.w	r3, r3, #1
 8008eb8:	667b      	str	r3, [r7, #100]	; 0x64
 8008eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3314      	adds	r3, #20
 8008ec0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008ec2:	647a      	str	r2, [r7, #68]	; 0x44
 8008ec4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ec8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008eca:	e841 2300 	strex	r3, r2, [r1]
 8008ece:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1e5      	bne.n	8008ea2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	3314      	adds	r3, #20
 8008edc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee0:	e853 3f00 	ldrex	r3, [r3]
 8008ee4:	623b      	str	r3, [r7, #32]
   return(result);
 8008ee6:	6a3b      	ldr	r3, [r7, #32]
 8008ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008eec:	663b      	str	r3, [r7, #96]	; 0x60
 8008eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	3314      	adds	r3, #20
 8008ef4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ef6:	633a      	str	r2, [r7, #48]	; 0x30
 8008ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008efe:	e841 2300 	strex	r3, r2, [r1]
 8008f02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1e5      	bne.n	8008ed6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f0c:	2220      	movs	r2, #32
 8008f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d119      	bne.n	8008f4e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	330c      	adds	r3, #12
 8008f20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	e853 3f00 	ldrex	r3, [r3]
 8008f28:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f023 0310 	bic.w	r3, r3, #16
 8008f30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	330c      	adds	r3, #12
 8008f38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f3a:	61fa      	str	r2, [r7, #28]
 8008f3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3e:	69b9      	ldr	r1, [r7, #24]
 8008f40:	69fa      	ldr	r2, [r7, #28]
 8008f42:	e841 2300 	strex	r3, r2, [r1]
 8008f46:	617b      	str	r3, [r7, #20]
   return(result);
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1e5      	bne.n	8008f1a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f50:	2200      	movs	r2, #0
 8008f52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d106      	bne.n	8008f6a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f60:	4619      	mov	r1, r3
 8008f62:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008f64:	f7ff ff66 	bl	8008e34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f68:	e002      	b.n	8008f70 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008f6a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008f6c:	f7f8 f840 	bl	8000ff0 <HAL_UART_RxCpltCallback>
}
 8008f70:	bf00      	nop
 8008f72:	3770      	adds	r7, #112	; 0x70
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f84:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d108      	bne.n	8008fa6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f98:	085b      	lsrs	r3, r3, #1
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f7ff ff48 	bl	8008e34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008fa4:	e002      	b.n	8008fac <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f7ff ff30 	bl	8008e0c <HAL_UART_RxHalfCpltCallback>
}
 8008fac:	bf00      	nop
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	695b      	ldr	r3, [r3, #20]
 8008fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fd0:	2b80      	cmp	r3, #128	; 0x80
 8008fd2:	bf0c      	ite	eq
 8008fd4:	2301      	moveq	r3, #1
 8008fd6:	2300      	movne	r3, #0
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	2b21      	cmp	r3, #33	; 0x21
 8008fe6:	d108      	bne.n	8008ffa <UART_DMAError+0x46>
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d005      	beq.n	8008ffa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008ff4:	68b8      	ldr	r0, [r7, #8]
 8008ff6:	f000 f91b 	bl	8009230 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	695b      	ldr	r3, [r3, #20]
 8009000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009004:	2b40      	cmp	r3, #64	; 0x40
 8009006:	bf0c      	ite	eq
 8009008:	2301      	moveq	r3, #1
 800900a:	2300      	movne	r3, #0
 800900c:	b2db      	uxtb	r3, r3
 800900e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009016:	b2db      	uxtb	r3, r3
 8009018:	2b22      	cmp	r3, #34	; 0x22
 800901a:	d108      	bne.n	800902e <UART_DMAError+0x7a>
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d005      	beq.n	800902e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	2200      	movs	r2, #0
 8009026:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009028:	68b8      	ldr	r0, [r7, #8]
 800902a:	f000 f929 	bl	8009280 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009032:	f043 0210 	orr.w	r2, r3, #16
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800903a:	68b8      	ldr	r0, [r7, #8]
 800903c:	f7ff fef0 	bl	8008e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009040:	bf00      	nop
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	603b      	str	r3, [r7, #0]
 8009054:	4613      	mov	r3, r2
 8009056:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009058:	e03b      	b.n	80090d2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800905a:	6a3b      	ldr	r3, [r7, #32]
 800905c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009060:	d037      	beq.n	80090d2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009062:	f7f9 f917 	bl	8002294 <HAL_GetTick>
 8009066:	4602      	mov	r2, r0
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	6a3a      	ldr	r2, [r7, #32]
 800906e:	429a      	cmp	r2, r3
 8009070:	d302      	bcc.n	8009078 <UART_WaitOnFlagUntilTimeout+0x30>
 8009072:	6a3b      	ldr	r3, [r7, #32]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d101      	bne.n	800907c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009078:	2303      	movs	r3, #3
 800907a:	e03a      	b.n	80090f2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	f003 0304 	and.w	r3, r3, #4
 8009086:	2b00      	cmp	r3, #0
 8009088:	d023      	beq.n	80090d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	2b80      	cmp	r3, #128	; 0x80
 800908e:	d020      	beq.n	80090d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	2b40      	cmp	r3, #64	; 0x40
 8009094:	d01d      	beq.n	80090d2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 0308 	and.w	r3, r3, #8
 80090a0:	2b08      	cmp	r3, #8
 80090a2:	d116      	bne.n	80090d2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80090a4:	2300      	movs	r3, #0
 80090a6:	617b      	str	r3, [r7, #20]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	617b      	str	r3, [r7, #20]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	617b      	str	r3, [r7, #20]
 80090b8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f000 f8e0 	bl	8009280 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2208      	movs	r2, #8
 80090c4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e00f      	b.n	80090f2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	4013      	ands	r3, r2
 80090dc:	68ba      	ldr	r2, [r7, #8]
 80090de:	429a      	cmp	r2, r3
 80090e0:	bf0c      	ite	eq
 80090e2:	2301      	moveq	r3, #1
 80090e4:	2300      	movne	r3, #0
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	461a      	mov	r2, r3
 80090ea:	79fb      	ldrb	r3, [r7, #7]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d0b4      	beq.n	800905a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3718      	adds	r7, #24
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
	...

080090fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b098      	sub	sp, #96	; 0x60
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	4613      	mov	r3, r2
 8009108:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800910a:	68ba      	ldr	r2, [r7, #8]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	88fa      	ldrh	r2, [r7, #6]
 8009114:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2200      	movs	r2, #0
 800911a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2222      	movs	r2, #34	; 0x22
 8009120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009128:	4a3e      	ldr	r2, [pc, #248]	; (8009224 <UART_Start_Receive_DMA+0x128>)
 800912a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009130:	4a3d      	ldr	r2, [pc, #244]	; (8009228 <UART_Start_Receive_DMA+0x12c>)
 8009132:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009138:	4a3c      	ldr	r2, [pc, #240]	; (800922c <UART_Start_Receive_DMA+0x130>)
 800913a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009140:	2200      	movs	r2, #0
 8009142:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009144:	f107 0308 	add.w	r3, r7, #8
 8009148:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	3304      	adds	r3, #4
 8009154:	4619      	mov	r1, r3
 8009156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	88fb      	ldrh	r3, [r7, #6]
 800915c:	f7f9 fa8a 	bl	8002674 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009160:	2300      	movs	r3, #0
 8009162:	613b      	str	r3, [r7, #16]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	613b      	str	r3, [r7, #16]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	613b      	str	r3, [r7, #16]
 8009174:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d019      	beq.n	80091b2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	330c      	adds	r3, #12
 8009184:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009188:	e853 3f00 	ldrex	r3, [r3]
 800918c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800918e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009194:	65bb      	str	r3, [r7, #88]	; 0x58
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	330c      	adds	r3, #12
 800919c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800919e:	64fa      	str	r2, [r7, #76]	; 0x4c
 80091a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80091a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091a6:	e841 2300 	strex	r3, r2, [r1]
 80091aa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80091ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d1e5      	bne.n	800917e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	3314      	adds	r3, #20
 80091b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091bc:	e853 3f00 	ldrex	r3, [r3]
 80091c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c4:	f043 0301 	orr.w	r3, r3, #1
 80091c8:	657b      	str	r3, [r7, #84]	; 0x54
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	3314      	adds	r3, #20
 80091d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80091d2:	63ba      	str	r2, [r7, #56]	; 0x38
 80091d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80091d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091da:	e841 2300 	strex	r3, r2, [r1]
 80091de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80091e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1e5      	bne.n	80091b2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	3314      	adds	r3, #20
 80091ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	e853 3f00 	ldrex	r3, [r3]
 80091f4:	617b      	str	r3, [r7, #20]
   return(result);
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091fc:	653b      	str	r3, [r7, #80]	; 0x50
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	3314      	adds	r3, #20
 8009204:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009206:	627a      	str	r2, [r7, #36]	; 0x24
 8009208:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920a:	6a39      	ldr	r1, [r7, #32]
 800920c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800920e:	e841 2300 	strex	r3, r2, [r1]
 8009212:	61fb      	str	r3, [r7, #28]
   return(result);
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d1e5      	bne.n	80091e6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3760      	adds	r7, #96	; 0x60
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	08008e4d 	.word	0x08008e4d
 8009228:	08008f79 	.word	0x08008f79
 800922c:	08008fb5 	.word	0x08008fb5

08009230 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009230:	b480      	push	{r7}
 8009232:	b089      	sub	sp, #36	; 0x24
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	330c      	adds	r3, #12
 800923e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	e853 3f00 	ldrex	r3, [r3]
 8009246:	60bb      	str	r3, [r7, #8]
   return(result);
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800924e:	61fb      	str	r3, [r7, #28]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	330c      	adds	r3, #12
 8009256:	69fa      	ldr	r2, [r7, #28]
 8009258:	61ba      	str	r2, [r7, #24]
 800925a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925c:	6979      	ldr	r1, [r7, #20]
 800925e:	69ba      	ldr	r2, [r7, #24]
 8009260:	e841 2300 	strex	r3, r2, [r1]
 8009264:	613b      	str	r3, [r7, #16]
   return(result);
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1e5      	bne.n	8009238 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2220      	movs	r2, #32
 8009270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8009274:	bf00      	nop
 8009276:	3724      	adds	r7, #36	; 0x24
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009280:	b480      	push	{r7}
 8009282:	b095      	sub	sp, #84	; 0x54
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	330c      	adds	r3, #12
 800928e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009292:	e853 3f00 	ldrex	r3, [r3]
 8009296:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800929e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	330c      	adds	r3, #12
 80092a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092a8:	643a      	str	r2, [r7, #64]	; 0x40
 80092aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092b0:	e841 2300 	strex	r3, r2, [r1]
 80092b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1e5      	bne.n	8009288 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	3314      	adds	r3, #20
 80092c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c4:	6a3b      	ldr	r3, [r7, #32]
 80092c6:	e853 3f00 	ldrex	r3, [r3]
 80092ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	f023 0301 	bic.w	r3, r3, #1
 80092d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	3314      	adds	r3, #20
 80092da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092e4:	e841 2300 	strex	r3, r2, [r1]
 80092e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d1e5      	bne.n	80092bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d119      	bne.n	800932c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	330c      	adds	r3, #12
 80092fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	e853 3f00 	ldrex	r3, [r3]
 8009306:	60bb      	str	r3, [r7, #8]
   return(result);
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	f023 0310 	bic.w	r3, r3, #16
 800930e:	647b      	str	r3, [r7, #68]	; 0x44
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	330c      	adds	r3, #12
 8009316:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009318:	61ba      	str	r2, [r7, #24]
 800931a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931c:	6979      	ldr	r1, [r7, #20]
 800931e:	69ba      	ldr	r2, [r7, #24]
 8009320:	e841 2300 	strex	r3, r2, [r1]
 8009324:	613b      	str	r3, [r7, #16]
   return(result);
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1e5      	bne.n	80092f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2220      	movs	r2, #32
 8009330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	631a      	str	r2, [r3, #48]	; 0x30
}
 800933a:	bf00      	nop
 800933c:	3754      	adds	r7, #84	; 0x54
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr

08009346 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b084      	sub	sp, #16
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009352:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f7ff fd5d 	bl	8008e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009366:	bf00      	nop
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800936e:	b480      	push	{r7}
 8009370:	b085      	sub	sp, #20
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b21      	cmp	r3, #33	; 0x21
 8009380:	d13e      	bne.n	8009400 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800938a:	d114      	bne.n	80093b6 <UART_Transmit_IT+0x48>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d110      	bne.n	80093b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6a1b      	ldr	r3, [r3, #32]
 8009398:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	881b      	ldrh	r3, [r3, #0]
 800939e:	461a      	mov	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a1b      	ldr	r3, [r3, #32]
 80093ae:	1c9a      	adds	r2, r3, #2
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	621a      	str	r2, [r3, #32]
 80093b4:	e008      	b.n	80093c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6a1b      	ldr	r3, [r3, #32]
 80093ba:	1c59      	adds	r1, r3, #1
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	6211      	str	r1, [r2, #32]
 80093c0:	781a      	ldrb	r2, [r3, #0]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	3b01      	subs	r3, #1
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	4619      	mov	r1, r3
 80093d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10f      	bne.n	80093fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68da      	ldr	r2, [r3, #12]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80093ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68da      	ldr	r2, [r3, #12]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80093fc:	2300      	movs	r3, #0
 80093fe:	e000      	b.n	8009402 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009400:	2302      	movs	r3, #2
  }
}
 8009402:	4618      	mov	r0, r3
 8009404:	3714      	adds	r7, #20
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr

0800940e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b082      	sub	sp, #8
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68da      	ldr	r2, [r3, #12]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009424:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2220      	movs	r2, #32
 800942a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f7ff fce2 	bl	8008df8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b08c      	sub	sp, #48	; 0x30
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b22      	cmp	r3, #34	; 0x22
 8009450:	f040 80ae 	bne.w	80095b0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800945c:	d117      	bne.n	800948e <UART_Receive_IT+0x50>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d113      	bne.n	800948e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009466:	2300      	movs	r3, #0
 8009468:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800946e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	b29b      	uxth	r3, r3
 8009478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800947c:	b29a      	uxth	r2, r3
 800947e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009480:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009486:	1c9a      	adds	r2, r3, #2
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	629a      	str	r2, [r3, #40]	; 0x28
 800948c:	e026      	b.n	80094dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009492:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009494:	2300      	movs	r3, #0
 8009496:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094a0:	d007      	beq.n	80094b2 <UART_Receive_IT+0x74>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d10a      	bne.n	80094c0 <UART_Receive_IT+0x82>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d106      	bne.n	80094c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	b2da      	uxtb	r2, r3
 80094ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094bc:	701a      	strb	r2, [r3, #0]
 80094be:	e008      	b.n	80094d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094cc:	b2da      	uxtb	r2, r3
 80094ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d6:	1c5a      	adds	r2, r3, #1
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	3b01      	subs	r3, #1
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	4619      	mov	r1, r3
 80094ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d15d      	bne.n	80095ac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68da      	ldr	r2, [r3, #12]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f022 0220 	bic.w	r2, r2, #32
 80094fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	68da      	ldr	r2, [r3, #12]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800950e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	695a      	ldr	r2, [r3, #20]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f022 0201 	bic.w	r2, r2, #1
 800951e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2220      	movs	r2, #32
 8009524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009532:	2b01      	cmp	r3, #1
 8009534:	d135      	bne.n	80095a2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	330c      	adds	r3, #12
 8009542:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	e853 3f00 	ldrex	r3, [r3]
 800954a:	613b      	str	r3, [r7, #16]
   return(result);
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	f023 0310 	bic.w	r3, r3, #16
 8009552:	627b      	str	r3, [r7, #36]	; 0x24
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	330c      	adds	r3, #12
 800955a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800955c:	623a      	str	r2, [r7, #32]
 800955e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009560:	69f9      	ldr	r1, [r7, #28]
 8009562:	6a3a      	ldr	r2, [r7, #32]
 8009564:	e841 2300 	strex	r3, r2, [r1]
 8009568:	61bb      	str	r3, [r7, #24]
   return(result);
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d1e5      	bne.n	800953c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 0310 	and.w	r3, r3, #16
 800957a:	2b10      	cmp	r3, #16
 800957c:	d10a      	bne.n	8009594 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800957e:	2300      	movs	r3, #0
 8009580:	60fb      	str	r3, [r7, #12]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	60fb      	str	r3, [r7, #12]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	60fb      	str	r3, [r7, #12]
 8009592:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009598:	4619      	mov	r1, r3
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f7ff fc4a 	bl	8008e34 <HAL_UARTEx_RxEventCallback>
 80095a0:	e002      	b.n	80095a8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f7f7 fd24 	bl	8000ff0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80095a8:	2300      	movs	r3, #0
 80095aa:	e002      	b.n	80095b2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80095ac:	2300      	movs	r3, #0
 80095ae:	e000      	b.n	80095b2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80095b0:	2302      	movs	r3, #2
  }
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3730      	adds	r7, #48	; 0x30
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
	...

080095bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095c0:	b0c0      	sub	sp, #256	; 0x100
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80095d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095d8:	68d9      	ldr	r1, [r3, #12]
 80095da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	ea40 0301 	orr.w	r3, r0, r1
 80095e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80095e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ea:	689a      	ldr	r2, [r3, #8]
 80095ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	431a      	orrs	r2, r3
 80095f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095f8:	695b      	ldr	r3, [r3, #20]
 80095fa:	431a      	orrs	r2, r3
 80095fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009600:	69db      	ldr	r3, [r3, #28]
 8009602:	4313      	orrs	r3, r2
 8009604:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009614:	f021 010c 	bic.w	r1, r1, #12
 8009618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009622:	430b      	orrs	r3, r1
 8009624:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	695b      	ldr	r3, [r3, #20]
 800962e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009636:	6999      	ldr	r1, [r3, #24]
 8009638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	ea40 0301 	orr.w	r3, r0, r1
 8009642:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	4b8f      	ldr	r3, [pc, #572]	; (8009888 <UART_SetConfig+0x2cc>)
 800964c:	429a      	cmp	r2, r3
 800964e:	d005      	beq.n	800965c <UART_SetConfig+0xa0>
 8009650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	4b8d      	ldr	r3, [pc, #564]	; (800988c <UART_SetConfig+0x2d0>)
 8009658:	429a      	cmp	r2, r3
 800965a:	d104      	bne.n	8009666 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800965c:	f7fd ff76 	bl	800754c <HAL_RCC_GetPCLK2Freq>
 8009660:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009664:	e003      	b.n	800966e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009666:	f7fd ff5d 	bl	8007524 <HAL_RCC_GetPCLK1Freq>
 800966a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800966e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009672:	69db      	ldr	r3, [r3, #28]
 8009674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009678:	f040 810c 	bne.w	8009894 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800967c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009680:	2200      	movs	r2, #0
 8009682:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009686:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800968a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800968e:	4622      	mov	r2, r4
 8009690:	462b      	mov	r3, r5
 8009692:	1891      	adds	r1, r2, r2
 8009694:	65b9      	str	r1, [r7, #88]	; 0x58
 8009696:	415b      	adcs	r3, r3
 8009698:	65fb      	str	r3, [r7, #92]	; 0x5c
 800969a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800969e:	4621      	mov	r1, r4
 80096a0:	eb12 0801 	adds.w	r8, r2, r1
 80096a4:	4629      	mov	r1, r5
 80096a6:	eb43 0901 	adc.w	r9, r3, r1
 80096aa:	f04f 0200 	mov.w	r2, #0
 80096ae:	f04f 0300 	mov.w	r3, #0
 80096b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80096b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80096ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80096be:	4690      	mov	r8, r2
 80096c0:	4699      	mov	r9, r3
 80096c2:	4623      	mov	r3, r4
 80096c4:	eb18 0303 	adds.w	r3, r8, r3
 80096c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80096cc:	462b      	mov	r3, r5
 80096ce:	eb49 0303 	adc.w	r3, r9, r3
 80096d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80096d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80096e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80096e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80096ea:	460b      	mov	r3, r1
 80096ec:	18db      	adds	r3, r3, r3
 80096ee:	653b      	str	r3, [r7, #80]	; 0x50
 80096f0:	4613      	mov	r3, r2
 80096f2:	eb42 0303 	adc.w	r3, r2, r3
 80096f6:	657b      	str	r3, [r7, #84]	; 0x54
 80096f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80096fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009700:	f7f7 fac2 	bl	8000c88 <__aeabi_uldivmod>
 8009704:	4602      	mov	r2, r0
 8009706:	460b      	mov	r3, r1
 8009708:	4b61      	ldr	r3, [pc, #388]	; (8009890 <UART_SetConfig+0x2d4>)
 800970a:	fba3 2302 	umull	r2, r3, r3, r2
 800970e:	095b      	lsrs	r3, r3, #5
 8009710:	011c      	lsls	r4, r3, #4
 8009712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009716:	2200      	movs	r2, #0
 8009718:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800971c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009720:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009724:	4642      	mov	r2, r8
 8009726:	464b      	mov	r3, r9
 8009728:	1891      	adds	r1, r2, r2
 800972a:	64b9      	str	r1, [r7, #72]	; 0x48
 800972c:	415b      	adcs	r3, r3
 800972e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009730:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009734:	4641      	mov	r1, r8
 8009736:	eb12 0a01 	adds.w	sl, r2, r1
 800973a:	4649      	mov	r1, r9
 800973c:	eb43 0b01 	adc.w	fp, r3, r1
 8009740:	f04f 0200 	mov.w	r2, #0
 8009744:	f04f 0300 	mov.w	r3, #0
 8009748:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800974c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009750:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009754:	4692      	mov	sl, r2
 8009756:	469b      	mov	fp, r3
 8009758:	4643      	mov	r3, r8
 800975a:	eb1a 0303 	adds.w	r3, sl, r3
 800975e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009762:	464b      	mov	r3, r9
 8009764:	eb4b 0303 	adc.w	r3, fp, r3
 8009768:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800976c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009778:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800977c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009780:	460b      	mov	r3, r1
 8009782:	18db      	adds	r3, r3, r3
 8009784:	643b      	str	r3, [r7, #64]	; 0x40
 8009786:	4613      	mov	r3, r2
 8009788:	eb42 0303 	adc.w	r3, r2, r3
 800978c:	647b      	str	r3, [r7, #68]	; 0x44
 800978e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009792:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009796:	f7f7 fa77 	bl	8000c88 <__aeabi_uldivmod>
 800979a:	4602      	mov	r2, r0
 800979c:	460b      	mov	r3, r1
 800979e:	4611      	mov	r1, r2
 80097a0:	4b3b      	ldr	r3, [pc, #236]	; (8009890 <UART_SetConfig+0x2d4>)
 80097a2:	fba3 2301 	umull	r2, r3, r3, r1
 80097a6:	095b      	lsrs	r3, r3, #5
 80097a8:	2264      	movs	r2, #100	; 0x64
 80097aa:	fb02 f303 	mul.w	r3, r2, r3
 80097ae:	1acb      	subs	r3, r1, r3
 80097b0:	00db      	lsls	r3, r3, #3
 80097b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80097b6:	4b36      	ldr	r3, [pc, #216]	; (8009890 <UART_SetConfig+0x2d4>)
 80097b8:	fba3 2302 	umull	r2, r3, r3, r2
 80097bc:	095b      	lsrs	r3, r3, #5
 80097be:	005b      	lsls	r3, r3, #1
 80097c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80097c4:	441c      	add	r4, r3
 80097c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097ca:	2200      	movs	r2, #0
 80097cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80097d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80097d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80097d8:	4642      	mov	r2, r8
 80097da:	464b      	mov	r3, r9
 80097dc:	1891      	adds	r1, r2, r2
 80097de:	63b9      	str	r1, [r7, #56]	; 0x38
 80097e0:	415b      	adcs	r3, r3
 80097e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80097e8:	4641      	mov	r1, r8
 80097ea:	1851      	adds	r1, r2, r1
 80097ec:	6339      	str	r1, [r7, #48]	; 0x30
 80097ee:	4649      	mov	r1, r9
 80097f0:	414b      	adcs	r3, r1
 80097f2:	637b      	str	r3, [r7, #52]	; 0x34
 80097f4:	f04f 0200 	mov.w	r2, #0
 80097f8:	f04f 0300 	mov.w	r3, #0
 80097fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009800:	4659      	mov	r1, fp
 8009802:	00cb      	lsls	r3, r1, #3
 8009804:	4651      	mov	r1, sl
 8009806:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800980a:	4651      	mov	r1, sl
 800980c:	00ca      	lsls	r2, r1, #3
 800980e:	4610      	mov	r0, r2
 8009810:	4619      	mov	r1, r3
 8009812:	4603      	mov	r3, r0
 8009814:	4642      	mov	r2, r8
 8009816:	189b      	adds	r3, r3, r2
 8009818:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800981c:	464b      	mov	r3, r9
 800981e:	460a      	mov	r2, r1
 8009820:	eb42 0303 	adc.w	r3, r2, r3
 8009824:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009834:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009838:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800983c:	460b      	mov	r3, r1
 800983e:	18db      	adds	r3, r3, r3
 8009840:	62bb      	str	r3, [r7, #40]	; 0x28
 8009842:	4613      	mov	r3, r2
 8009844:	eb42 0303 	adc.w	r3, r2, r3
 8009848:	62fb      	str	r3, [r7, #44]	; 0x2c
 800984a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800984e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009852:	f7f7 fa19 	bl	8000c88 <__aeabi_uldivmod>
 8009856:	4602      	mov	r2, r0
 8009858:	460b      	mov	r3, r1
 800985a:	4b0d      	ldr	r3, [pc, #52]	; (8009890 <UART_SetConfig+0x2d4>)
 800985c:	fba3 1302 	umull	r1, r3, r3, r2
 8009860:	095b      	lsrs	r3, r3, #5
 8009862:	2164      	movs	r1, #100	; 0x64
 8009864:	fb01 f303 	mul.w	r3, r1, r3
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	00db      	lsls	r3, r3, #3
 800986c:	3332      	adds	r3, #50	; 0x32
 800986e:	4a08      	ldr	r2, [pc, #32]	; (8009890 <UART_SetConfig+0x2d4>)
 8009870:	fba2 2303 	umull	r2, r3, r2, r3
 8009874:	095b      	lsrs	r3, r3, #5
 8009876:	f003 0207 	and.w	r2, r3, #7
 800987a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4422      	add	r2, r4
 8009882:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009884:	e106      	b.n	8009a94 <UART_SetConfig+0x4d8>
 8009886:	bf00      	nop
 8009888:	40011000 	.word	0x40011000
 800988c:	40011400 	.word	0x40011400
 8009890:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009898:	2200      	movs	r2, #0
 800989a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800989e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80098a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80098a6:	4642      	mov	r2, r8
 80098a8:	464b      	mov	r3, r9
 80098aa:	1891      	adds	r1, r2, r2
 80098ac:	6239      	str	r1, [r7, #32]
 80098ae:	415b      	adcs	r3, r3
 80098b0:	627b      	str	r3, [r7, #36]	; 0x24
 80098b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80098b6:	4641      	mov	r1, r8
 80098b8:	1854      	adds	r4, r2, r1
 80098ba:	4649      	mov	r1, r9
 80098bc:	eb43 0501 	adc.w	r5, r3, r1
 80098c0:	f04f 0200 	mov.w	r2, #0
 80098c4:	f04f 0300 	mov.w	r3, #0
 80098c8:	00eb      	lsls	r3, r5, #3
 80098ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80098ce:	00e2      	lsls	r2, r4, #3
 80098d0:	4614      	mov	r4, r2
 80098d2:	461d      	mov	r5, r3
 80098d4:	4643      	mov	r3, r8
 80098d6:	18e3      	adds	r3, r4, r3
 80098d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80098dc:	464b      	mov	r3, r9
 80098de:	eb45 0303 	adc.w	r3, r5, r3
 80098e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80098e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80098f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80098f6:	f04f 0200 	mov.w	r2, #0
 80098fa:	f04f 0300 	mov.w	r3, #0
 80098fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009902:	4629      	mov	r1, r5
 8009904:	008b      	lsls	r3, r1, #2
 8009906:	4621      	mov	r1, r4
 8009908:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800990c:	4621      	mov	r1, r4
 800990e:	008a      	lsls	r2, r1, #2
 8009910:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009914:	f7f7 f9b8 	bl	8000c88 <__aeabi_uldivmod>
 8009918:	4602      	mov	r2, r0
 800991a:	460b      	mov	r3, r1
 800991c:	4b60      	ldr	r3, [pc, #384]	; (8009aa0 <UART_SetConfig+0x4e4>)
 800991e:	fba3 2302 	umull	r2, r3, r3, r2
 8009922:	095b      	lsrs	r3, r3, #5
 8009924:	011c      	lsls	r4, r3, #4
 8009926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800992a:	2200      	movs	r2, #0
 800992c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009930:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009934:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009938:	4642      	mov	r2, r8
 800993a:	464b      	mov	r3, r9
 800993c:	1891      	adds	r1, r2, r2
 800993e:	61b9      	str	r1, [r7, #24]
 8009940:	415b      	adcs	r3, r3
 8009942:	61fb      	str	r3, [r7, #28]
 8009944:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009948:	4641      	mov	r1, r8
 800994a:	1851      	adds	r1, r2, r1
 800994c:	6139      	str	r1, [r7, #16]
 800994e:	4649      	mov	r1, r9
 8009950:	414b      	adcs	r3, r1
 8009952:	617b      	str	r3, [r7, #20]
 8009954:	f04f 0200 	mov.w	r2, #0
 8009958:	f04f 0300 	mov.w	r3, #0
 800995c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009960:	4659      	mov	r1, fp
 8009962:	00cb      	lsls	r3, r1, #3
 8009964:	4651      	mov	r1, sl
 8009966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800996a:	4651      	mov	r1, sl
 800996c:	00ca      	lsls	r2, r1, #3
 800996e:	4610      	mov	r0, r2
 8009970:	4619      	mov	r1, r3
 8009972:	4603      	mov	r3, r0
 8009974:	4642      	mov	r2, r8
 8009976:	189b      	adds	r3, r3, r2
 8009978:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800997c:	464b      	mov	r3, r9
 800997e:	460a      	mov	r2, r1
 8009980:	eb42 0303 	adc.w	r3, r2, r3
 8009984:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	67bb      	str	r3, [r7, #120]	; 0x78
 8009992:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009994:	f04f 0200 	mov.w	r2, #0
 8009998:	f04f 0300 	mov.w	r3, #0
 800999c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80099a0:	4649      	mov	r1, r9
 80099a2:	008b      	lsls	r3, r1, #2
 80099a4:	4641      	mov	r1, r8
 80099a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099aa:	4641      	mov	r1, r8
 80099ac:	008a      	lsls	r2, r1, #2
 80099ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80099b2:	f7f7 f969 	bl	8000c88 <__aeabi_uldivmod>
 80099b6:	4602      	mov	r2, r0
 80099b8:	460b      	mov	r3, r1
 80099ba:	4611      	mov	r1, r2
 80099bc:	4b38      	ldr	r3, [pc, #224]	; (8009aa0 <UART_SetConfig+0x4e4>)
 80099be:	fba3 2301 	umull	r2, r3, r3, r1
 80099c2:	095b      	lsrs	r3, r3, #5
 80099c4:	2264      	movs	r2, #100	; 0x64
 80099c6:	fb02 f303 	mul.w	r3, r2, r3
 80099ca:	1acb      	subs	r3, r1, r3
 80099cc:	011b      	lsls	r3, r3, #4
 80099ce:	3332      	adds	r3, #50	; 0x32
 80099d0:	4a33      	ldr	r2, [pc, #204]	; (8009aa0 <UART_SetConfig+0x4e4>)
 80099d2:	fba2 2303 	umull	r2, r3, r2, r3
 80099d6:	095b      	lsrs	r3, r3, #5
 80099d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099dc:	441c      	add	r4, r3
 80099de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099e2:	2200      	movs	r2, #0
 80099e4:	673b      	str	r3, [r7, #112]	; 0x70
 80099e6:	677a      	str	r2, [r7, #116]	; 0x74
 80099e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80099ec:	4642      	mov	r2, r8
 80099ee:	464b      	mov	r3, r9
 80099f0:	1891      	adds	r1, r2, r2
 80099f2:	60b9      	str	r1, [r7, #8]
 80099f4:	415b      	adcs	r3, r3
 80099f6:	60fb      	str	r3, [r7, #12]
 80099f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80099fc:	4641      	mov	r1, r8
 80099fe:	1851      	adds	r1, r2, r1
 8009a00:	6039      	str	r1, [r7, #0]
 8009a02:	4649      	mov	r1, r9
 8009a04:	414b      	adcs	r3, r1
 8009a06:	607b      	str	r3, [r7, #4]
 8009a08:	f04f 0200 	mov.w	r2, #0
 8009a0c:	f04f 0300 	mov.w	r3, #0
 8009a10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009a14:	4659      	mov	r1, fp
 8009a16:	00cb      	lsls	r3, r1, #3
 8009a18:	4651      	mov	r1, sl
 8009a1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a1e:	4651      	mov	r1, sl
 8009a20:	00ca      	lsls	r2, r1, #3
 8009a22:	4610      	mov	r0, r2
 8009a24:	4619      	mov	r1, r3
 8009a26:	4603      	mov	r3, r0
 8009a28:	4642      	mov	r2, r8
 8009a2a:	189b      	adds	r3, r3, r2
 8009a2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a2e:	464b      	mov	r3, r9
 8009a30:	460a      	mov	r2, r1
 8009a32:	eb42 0303 	adc.w	r3, r2, r3
 8009a36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	663b      	str	r3, [r7, #96]	; 0x60
 8009a42:	667a      	str	r2, [r7, #100]	; 0x64
 8009a44:	f04f 0200 	mov.w	r2, #0
 8009a48:	f04f 0300 	mov.w	r3, #0
 8009a4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009a50:	4649      	mov	r1, r9
 8009a52:	008b      	lsls	r3, r1, #2
 8009a54:	4641      	mov	r1, r8
 8009a56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a5a:	4641      	mov	r1, r8
 8009a5c:	008a      	lsls	r2, r1, #2
 8009a5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009a62:	f7f7 f911 	bl	8000c88 <__aeabi_uldivmod>
 8009a66:	4602      	mov	r2, r0
 8009a68:	460b      	mov	r3, r1
 8009a6a:	4b0d      	ldr	r3, [pc, #52]	; (8009aa0 <UART_SetConfig+0x4e4>)
 8009a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8009a70:	095b      	lsrs	r3, r3, #5
 8009a72:	2164      	movs	r1, #100	; 0x64
 8009a74:	fb01 f303 	mul.w	r3, r1, r3
 8009a78:	1ad3      	subs	r3, r2, r3
 8009a7a:	011b      	lsls	r3, r3, #4
 8009a7c:	3332      	adds	r3, #50	; 0x32
 8009a7e:	4a08      	ldr	r2, [pc, #32]	; (8009aa0 <UART_SetConfig+0x4e4>)
 8009a80:	fba2 2303 	umull	r2, r3, r2, r3
 8009a84:	095b      	lsrs	r3, r3, #5
 8009a86:	f003 020f 	and.w	r2, r3, #15
 8009a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4422      	add	r2, r4
 8009a92:	609a      	str	r2, [r3, #8]
}
 8009a94:	bf00      	nop
 8009a96:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009aa0:	51eb851f 	.word	0x51eb851f

08009aa4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009aa4:	b084      	sub	sp, #16
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b084      	sub	sp, #16
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
 8009aae:	f107 001c 	add.w	r0, r7, #28
 8009ab2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009ab6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d123      	bne.n	8009b06 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009ae6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d105      	bne.n	8009afa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 f9dc 	bl	8009eb8 <USB_CoreReset>
 8009b00:	4603      	mov	r3, r0
 8009b02:	73fb      	strb	r3, [r7, #15]
 8009b04:	e01b      	b.n	8009b3e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f9d0 	bl	8009eb8 <USB_CoreReset>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009b1c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d106      	bne.n	8009b32 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b28:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	639a      	str	r2, [r3, #56]	; 0x38
 8009b30:	e005      	b.n	8009b3e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009b3e:	7fbb      	ldrb	r3, [r7, #30]
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d10b      	bne.n	8009b5c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	f043 0206 	orr.w	r2, r3, #6
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	f043 0220 	orr.w	r2, r3, #32
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3710      	adds	r7, #16
 8009b62:	46bd      	mov	sp, r7
 8009b64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b68:	b004      	add	sp, #16
 8009b6a:	4770      	bx	lr

08009b6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	f043 0201 	orr.w	r2, r3, #1
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	370c      	adds	r7, #12
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr

08009b8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b8e:	b480      	push	{r7}
 8009b90:	b083      	sub	sp, #12
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	f023 0201 	bic.w	r2, r3, #1
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	460b      	mov	r3, r1
 8009bba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009bcc:	78fb      	ldrb	r3, [r7, #3]
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d115      	bne.n	8009bfe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009bde:	200a      	movs	r0, #10
 8009be0:	f7f8 fb64 	bl	80022ac <HAL_Delay>
      ms += 10U;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	330a      	adds	r3, #10
 8009be8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 f956 	bl	8009e9c <USB_GetMode>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d01e      	beq.n	8009c34 <USB_SetCurrentMode+0x84>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2bc7      	cmp	r3, #199	; 0xc7
 8009bfa:	d9f0      	bls.n	8009bde <USB_SetCurrentMode+0x2e>
 8009bfc:	e01a      	b.n	8009c34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009bfe:	78fb      	ldrb	r3, [r7, #3]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d115      	bne.n	8009c30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009c10:	200a      	movs	r0, #10
 8009c12:	f7f8 fb4b 	bl	80022ac <HAL_Delay>
      ms += 10U;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	330a      	adds	r3, #10
 8009c1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 f93d 	bl	8009e9c <USB_GetMode>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d005      	beq.n	8009c34 <USB_SetCurrentMode+0x84>
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2bc7      	cmp	r3, #199	; 0xc7
 8009c2c:	d9f0      	bls.n	8009c10 <USB_SetCurrentMode+0x60>
 8009c2e:	e001      	b.n	8009c34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
 8009c32:	e005      	b.n	8009c40 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2bc8      	cmp	r3, #200	; 0xc8
 8009c38:	d101      	bne.n	8009c3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e000      	b.n	8009c40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009c52:	2300      	movs	r3, #0
 8009c54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009c62:	d901      	bls.n	8009c68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009c64:	2303      	movs	r3, #3
 8009c66:	e01b      	b.n	8009ca0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	691b      	ldr	r3, [r3, #16]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	daf2      	bge.n	8009c56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009c70:	2300      	movs	r3, #0
 8009c72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	019b      	lsls	r3, r3, #6
 8009c78:	f043 0220 	orr.w	r2, r3, #32
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	3301      	adds	r3, #1
 8009c84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009c8c:	d901      	bls.n	8009c92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009c8e:	2303      	movs	r3, #3
 8009c90:	e006      	b.n	8009ca0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	f003 0320 	and.w	r3, r3, #32
 8009c9a:	2b20      	cmp	r3, #32
 8009c9c:	d0f0      	beq.n	8009c80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3714      	adds	r7, #20
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b085      	sub	sp, #20
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009cc4:	d901      	bls.n	8009cca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009cc6:	2303      	movs	r3, #3
 8009cc8:	e018      	b.n	8009cfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	daf2      	bge.n	8009cb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2210      	movs	r2, #16
 8009cda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	3301      	adds	r3, #1
 8009ce0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009ce8:	d901      	bls.n	8009cee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009cea:	2303      	movs	r3, #3
 8009cec:	e006      	b.n	8009cfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	f003 0310 	and.w	r3, r3, #16
 8009cf6:	2b10      	cmp	r3, #16
 8009cf8:	d0f0      	beq.n	8009cdc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3714      	adds	r7, #20
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b089      	sub	sp, #36	; 0x24
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	4611      	mov	r1, r2
 8009d14:	461a      	mov	r2, r3
 8009d16:	460b      	mov	r3, r1
 8009d18:	71fb      	strb	r3, [r7, #7]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009d26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d123      	bne.n	8009d76 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009d2e:	88bb      	ldrh	r3, [r7, #4]
 8009d30:	3303      	adds	r3, #3
 8009d32:	089b      	lsrs	r3, r3, #2
 8009d34:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009d36:	2300      	movs	r3, #0
 8009d38:	61bb      	str	r3, [r7, #24]
 8009d3a:	e018      	b.n	8009d6e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009d3c:	79fb      	ldrb	r3, [r7, #7]
 8009d3e:	031a      	lsls	r2, r3, #12
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	4413      	add	r3, r2
 8009d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d48:	461a      	mov	r2, r3
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	3301      	adds	r3, #1
 8009d54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	3301      	adds	r3, #1
 8009d60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	3301      	adds	r3, #1
 8009d66:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	61bb      	str	r3, [r7, #24]
 8009d6e:	69ba      	ldr	r2, [r7, #24]
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d3e2      	bcc.n	8009d3c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3724      	adds	r7, #36	; 0x24
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b08b      	sub	sp, #44	; 0x2c
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	4613      	mov	r3, r2
 8009d90:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009d9a:	88fb      	ldrh	r3, [r7, #6]
 8009d9c:	089b      	lsrs	r3, r3, #2
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009da2:	88fb      	ldrh	r3, [r7, #6]
 8009da4:	f003 0303 	and.w	r3, r3, #3
 8009da8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009daa:	2300      	movs	r3, #0
 8009dac:	623b      	str	r3, [r7, #32]
 8009dae:	e014      	b.n	8009dda <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dba:	601a      	str	r2, [r3, #0]
    pDest++;
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dca:	3301      	adds	r3, #1
 8009dcc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009dd4:	6a3b      	ldr	r3, [r7, #32]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	623b      	str	r3, [r7, #32]
 8009dda:	6a3a      	ldr	r2, [r7, #32]
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d3e6      	bcc.n	8009db0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009de2:	8bfb      	ldrh	r3, [r7, #30]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d01e      	beq.n	8009e26 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009de8:	2300      	movs	r3, #0
 8009dea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009df2:	461a      	mov	r2, r3
 8009df4:	f107 0310 	add.w	r3, r7, #16
 8009df8:	6812      	ldr	r2, [r2, #0]
 8009dfa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009dfc:	693a      	ldr	r2, [r7, #16]
 8009dfe:	6a3b      	ldr	r3, [r7, #32]
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	00db      	lsls	r3, r3, #3
 8009e04:	fa22 f303 	lsr.w	r3, r2, r3
 8009e08:	b2da      	uxtb	r2, r3
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0c:	701a      	strb	r2, [r3, #0]
      i++;
 8009e0e:	6a3b      	ldr	r3, [r7, #32]
 8009e10:	3301      	adds	r3, #1
 8009e12:	623b      	str	r3, [r7, #32]
      pDest++;
 8009e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e16:	3301      	adds	r3, #1
 8009e18:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009e1a:	8bfb      	ldrh	r3, [r7, #30]
 8009e1c:	3b01      	subs	r3, #1
 8009e1e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009e20:	8bfb      	ldrh	r3, [r7, #30]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d1ea      	bne.n	8009dfc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	372c      	adds	r7, #44	; 0x2c
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	695b      	ldr	r3, [r3, #20]
 8009e40:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	699b      	ldr	r3, [r3, #24]
 8009e46:	68fa      	ldr	r2, [r7, #12]
 8009e48:	4013      	ands	r3, r2
 8009e4a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3714      	adds	r7, #20
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr

08009e5a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b085      	sub	sp, #20
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	460b      	mov	r3, r1
 8009e64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8009e6a:	78fb      	ldrb	r3, [r7, #3]
 8009e6c:	015a      	lsls	r2, r3, #5
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	4413      	add	r3, r2
 8009e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8009e7a:	78fb      	ldrb	r3, [r7, #3]
 8009e7c:	015a      	lsls	r2, r3, #5
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	4413      	add	r3, r2
 8009e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	4013      	ands	r3, r2
 8009e8c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009e8e:	68bb      	ldr	r3, [r7, #8]
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3714      	adds	r7, #20
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	695b      	ldr	r3, [r3, #20]
 8009ea8:	f003 0301 	and.w	r3, r3, #1
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	370c      	adds	r7, #12
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr

08009eb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009ed0:	d901      	bls.n	8009ed6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009ed2:	2303      	movs	r3, #3
 8009ed4:	e01b      	b.n	8009f0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	daf2      	bge.n	8009ec4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	691b      	ldr	r3, [r3, #16]
 8009ee6:	f043 0201 	orr.w	r2, r3, #1
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009efa:	d901      	bls.n	8009f00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009efc:	2303      	movs	r3, #3
 8009efe:	e006      	b.n	8009f0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	f003 0301 	and.w	r3, r3, #1
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d0f0      	beq.n	8009eee <USB_CoreReset+0x36>

  return HAL_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3714      	adds	r7, #20
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr
	...

08009f1c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f1c:	b084      	sub	sp, #16
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b086      	sub	sp, #24
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009f2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	2300      	movs	r3, #0
 8009f40:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f52:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f5e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d119      	bne.n	8009fa6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009f72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d10a      	bne.n	8009f90 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009f88:	f043 0304 	orr.w	r3, r3, #4
 8009f8c:	6013      	str	r3, [r2, #0]
 8009f8e:	e014      	b.n	8009fba <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009f9e:	f023 0304 	bic.w	r3, r3, #4
 8009fa2:	6013      	str	r3, [r2, #0]
 8009fa4:	e009      	b.n	8009fba <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	68fa      	ldr	r2, [r7, #12]
 8009fb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009fb4:	f023 0304 	bic.w	r3, r3, #4
 8009fb8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009fba:	2110      	movs	r1, #16
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f7ff fe43 	bl	8009c48 <USB_FlushTxFifo>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d001      	beq.n	8009fcc <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f7ff fe6d 	bl	8009cac <USB_FlushRxFifo>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d001      	beq.n	8009fdc <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009fdc:	2300      	movs	r3, #0
 8009fde:	613b      	str	r3, [r7, #16]
 8009fe0:	e015      	b.n	800a00e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	015a      	lsls	r2, r3, #5
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	4413      	add	r3, r2
 8009fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fee:	461a      	mov	r2, r3
 8009ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ff4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	015a      	lsls	r2, r3, #5
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a002:	461a      	mov	r2, r3
 800a004:	2300      	movs	r3, #0
 800a006:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	3301      	adds	r3, #1
 800a00c:	613b      	str	r3, [r7, #16]
 800a00e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a012:	461a      	mov	r2, r3
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	4293      	cmp	r3, r2
 800a018:	d3e3      	bcc.n	8009fe2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f04f 32ff 	mov.w	r2, #4294967295
 800a026:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4a18      	ldr	r2, [pc, #96]	; (800a08c <USB_HostInit+0x170>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d10b      	bne.n	800a048 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a036:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	4a15      	ldr	r2, [pc, #84]	; (800a090 <USB_HostInit+0x174>)
 800a03c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a14      	ldr	r2, [pc, #80]	; (800a094 <USB_HostInit+0x178>)
 800a042:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a046:	e009      	b.n	800a05c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2280      	movs	r2, #128	; 0x80
 800a04c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a11      	ldr	r2, [pc, #68]	; (800a098 <USB_HostInit+0x17c>)
 800a052:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4a11      	ldr	r2, [pc, #68]	; (800a09c <USB_HostInit+0x180>)
 800a058:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a05c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a060:	2b00      	cmp	r3, #0
 800a062:	d105      	bne.n	800a070 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	699b      	ldr	r3, [r3, #24]
 800a068:	f043 0210 	orr.w	r2, r3, #16
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	699a      	ldr	r2, [r3, #24]
 800a074:	4b0a      	ldr	r3, [pc, #40]	; (800a0a0 <USB_HostInit+0x184>)
 800a076:	4313      	orrs	r3, r2
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a07c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3718      	adds	r7, #24
 800a082:	46bd      	mov	sp, r7
 800a084:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a088:	b004      	add	sp, #16
 800a08a:	4770      	bx	lr
 800a08c:	40040000 	.word	0x40040000
 800a090:	01000200 	.word	0x01000200
 800a094:	00e00300 	.word	0x00e00300
 800a098:	00600080 	.word	0x00600080
 800a09c:	004000e0 	.word	0x004000e0
 800a0a0:	a3200008 	.word	0xa3200008

0800a0a4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b085      	sub	sp, #20
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	68fa      	ldr	r2, [r7, #12]
 800a0be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a0c2:	f023 0303 	bic.w	r3, r3, #3
 800a0c6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	78fb      	ldrb	r3, [r7, #3]
 800a0d2:	f003 0303 	and.w	r3, r3, #3
 800a0d6:	68f9      	ldr	r1, [r7, #12]
 800a0d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a0e0:	78fb      	ldrb	r3, [r7, #3]
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d107      	bne.n	800a0f6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a0f2:	6053      	str	r3, [r2, #4]
 800a0f4:	e00c      	b.n	800a110 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800a0f6:	78fb      	ldrb	r3, [r7, #3]
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	d107      	bne.n	800a10c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a102:	461a      	mov	r2, r3
 800a104:	f241 7370 	movw	r3, #6000	; 0x1770
 800a108:	6053      	str	r3, [r2, #4]
 800a10a:	e001      	b.n	800a110 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800a10c:	2301      	movs	r3, #1
 800a10e:	e000      	b.n	800a112 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	3714      	adds	r7, #20
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr

0800a11e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b084      	sub	sp, #16
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a12a:	2300      	movs	r3, #0
 800a12c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a13e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	68fa      	ldr	r2, [r7, #12]
 800a144:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a14c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a14e:	2064      	movs	r0, #100	; 0x64
 800a150:	f7f8 f8ac 	bl	80022ac <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	68fa      	ldr	r2, [r7, #12]
 800a158:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a15c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a160:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a162:	200a      	movs	r0, #10
 800a164:	f7f8 f8a2 	bl	80022ac <HAL_Delay>

  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a172:	b480      	push	{r7}
 800a174:	b085      	sub	sp, #20
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
 800a17a:	460b      	mov	r3, r1
 800a17c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a182:	2300      	movs	r3, #0
 800a184:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a196:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d109      	bne.n	800a1b6 <USB_DriveVbus+0x44>
 800a1a2:	78fb      	ldrb	r3, [r7, #3]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d106      	bne.n	800a1b6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	68fa      	ldr	r2, [r7, #12]
 800a1ac:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a1b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a1b4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a1bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1c0:	d109      	bne.n	800a1d6 <USB_DriveVbus+0x64>
 800a1c2:	78fb      	ldrb	r3, [r7, #3]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d106      	bne.n	800a1d6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	68fa      	ldr	r2, [r7, #12]
 800a1cc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a1d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1d4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3714      	adds	r7, #20
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b085      	sub	sp, #20
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	0c5b      	lsrs	r3, r3, #17
 800a202:	f003 0303 	and.w	r3, r3, #3
}
 800a206:	4618      	mov	r0, r3
 800a208:	3714      	adds	r7, #20
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr

0800a212 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800a212:	b480      	push	{r7}
 800a214:	b085      	sub	sp, #20
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	b29b      	uxth	r3, r3
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3714      	adds	r7, #20
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b088      	sub	sp, #32
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	4608      	mov	r0, r1
 800a23e:	4611      	mov	r1, r2
 800a240:	461a      	mov	r2, r3
 800a242:	4603      	mov	r3, r0
 800a244:	70fb      	strb	r3, [r7, #3]
 800a246:	460b      	mov	r3, r1
 800a248:	70bb      	strb	r3, [r7, #2]
 800a24a:	4613      	mov	r3, r2
 800a24c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a24e:	2300      	movs	r3, #0
 800a250:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800a256:	78fb      	ldrb	r3, [r7, #3]
 800a258:	015a      	lsls	r2, r3, #5
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	4413      	add	r3, r2
 800a25e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a262:	461a      	mov	r2, r3
 800a264:	f04f 33ff 	mov.w	r3, #4294967295
 800a268:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a26a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a26e:	2b03      	cmp	r3, #3
 800a270:	d87c      	bhi.n	800a36c <USB_HC_Init+0x138>
 800a272:	a201      	add	r2, pc, #4	; (adr r2, 800a278 <USB_HC_Init+0x44>)
 800a274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a278:	0800a289 	.word	0x0800a289
 800a27c:	0800a32f 	.word	0x0800a32f
 800a280:	0800a289 	.word	0x0800a289
 800a284:	0800a2f1 	.word	0x0800a2f1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a288:	78fb      	ldrb	r3, [r7, #3]
 800a28a:	015a      	lsls	r2, r3, #5
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	4413      	add	r3, r2
 800a290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a294:	461a      	mov	r2, r3
 800a296:	f240 439d 	movw	r3, #1181	; 0x49d
 800a29a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a29c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	da10      	bge.n	800a2c6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a2a4:	78fb      	ldrb	r3, [r7, #3]
 800a2a6:	015a      	lsls	r2, r3, #5
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	78fa      	ldrb	r2, [r7, #3]
 800a2b4:	0151      	lsls	r1, r2, #5
 800a2b6:	693a      	ldr	r2, [r7, #16]
 800a2b8:	440a      	add	r2, r1
 800a2ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2c2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800a2c4:	e055      	b.n	800a372 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4a6f      	ldr	r2, [pc, #444]	; (800a488 <USB_HC_Init+0x254>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d151      	bne.n	800a372 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a2ce:	78fb      	ldrb	r3, [r7, #3]
 800a2d0:	015a      	lsls	r2, r3, #5
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	78fa      	ldrb	r2, [r7, #3]
 800a2de:	0151      	lsls	r1, r2, #5
 800a2e0:	693a      	ldr	r2, [r7, #16]
 800a2e2:	440a      	add	r2, r1
 800a2e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a2ec:	60d3      	str	r3, [r2, #12]
      break;
 800a2ee:	e040      	b.n	800a372 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a2f0:	78fb      	ldrb	r3, [r7, #3]
 800a2f2:	015a      	lsls	r2, r3, #5
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	f240 639d 	movw	r3, #1693	; 0x69d
 800a302:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a304:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	da34      	bge.n	800a376 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a30c:	78fb      	ldrb	r3, [r7, #3]
 800a30e:	015a      	lsls	r2, r3, #5
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	4413      	add	r3, r2
 800a314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	78fa      	ldrb	r2, [r7, #3]
 800a31c:	0151      	lsls	r1, r2, #5
 800a31e:	693a      	ldr	r2, [r7, #16]
 800a320:	440a      	add	r2, r1
 800a322:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a32a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a32c:	e023      	b.n	800a376 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a32e:	78fb      	ldrb	r3, [r7, #3]
 800a330:	015a      	lsls	r2, r3, #5
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	4413      	add	r3, r2
 800a336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a33a:	461a      	mov	r2, r3
 800a33c:	f240 2325 	movw	r3, #549	; 0x225
 800a340:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a342:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a346:	2b00      	cmp	r3, #0
 800a348:	da17      	bge.n	800a37a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a34a:	78fb      	ldrb	r3, [r7, #3]
 800a34c:	015a      	lsls	r2, r3, #5
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	4413      	add	r3, r2
 800a352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	78fa      	ldrb	r2, [r7, #3]
 800a35a:	0151      	lsls	r1, r2, #5
 800a35c:	693a      	ldr	r2, [r7, #16]
 800a35e:	440a      	add	r2, r1
 800a360:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a364:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a368:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a36a:	e006      	b.n	800a37a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800a36c:	2301      	movs	r3, #1
 800a36e:	77fb      	strb	r3, [r7, #31]
      break;
 800a370:	e004      	b.n	800a37c <USB_HC_Init+0x148>
      break;
 800a372:	bf00      	nop
 800a374:	e002      	b.n	800a37c <USB_HC_Init+0x148>
      break;
 800a376:	bf00      	nop
 800a378:	e000      	b.n	800a37c <USB_HC_Init+0x148>
      break;
 800a37a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a37c:	78fb      	ldrb	r3, [r7, #3]
 800a37e:	015a      	lsls	r2, r3, #5
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	4413      	add	r3, r2
 800a384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a388:	461a      	mov	r2, r3
 800a38a:	2300      	movs	r3, #0
 800a38c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a38e:	78fb      	ldrb	r3, [r7, #3]
 800a390:	015a      	lsls	r2, r3, #5
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	4413      	add	r3, r2
 800a396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	78fa      	ldrb	r2, [r7, #3]
 800a39e:	0151      	lsls	r1, r2, #5
 800a3a0:	693a      	ldr	r2, [r7, #16]
 800a3a2:	440a      	add	r2, r1
 800a3a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3a8:	f043 0302 	orr.w	r3, r3, #2
 800a3ac:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3b4:	699a      	ldr	r2, [r3, #24]
 800a3b6:	78fb      	ldrb	r3, [r7, #3]
 800a3b8:	f003 030f 	and.w	r3, r3, #15
 800a3bc:	2101      	movs	r1, #1
 800a3be:	fa01 f303 	lsl.w	r3, r1, r3
 800a3c2:	6939      	ldr	r1, [r7, #16]
 800a3c4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	699b      	ldr	r3, [r3, #24]
 800a3d0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a3d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	da03      	bge.n	800a3e8 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a3e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3e4:	61bb      	str	r3, [r7, #24]
 800a3e6:	e001      	b.n	800a3ec <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f7ff fef9 	bl	800a1e4 <USB_GetHostSpeed>
 800a3f2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a3f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a3f8:	2b02      	cmp	r3, #2
 800a3fa:	d106      	bne.n	800a40a <USB_HC_Init+0x1d6>
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2b02      	cmp	r3, #2
 800a400:	d003      	beq.n	800a40a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a402:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a406:	617b      	str	r3, [r7, #20]
 800a408:	e001      	b.n	800a40e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a40a:	2300      	movs	r3, #0
 800a40c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a40e:	787b      	ldrb	r3, [r7, #1]
 800a410:	059b      	lsls	r3, r3, #22
 800a412:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a416:	78bb      	ldrb	r3, [r7, #2]
 800a418:	02db      	lsls	r3, r3, #11
 800a41a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a41e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a420:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a424:	049b      	lsls	r3, r3, #18
 800a426:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a42a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800a42c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a42e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a432:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a434:	69bb      	ldr	r3, [r7, #24]
 800a436:	431a      	orrs	r2, r3
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a43c:	78fa      	ldrb	r2, [r7, #3]
 800a43e:	0151      	lsls	r1, r2, #5
 800a440:	693a      	ldr	r2, [r7, #16]
 800a442:	440a      	add	r2, r1
 800a444:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a448:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a44c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a44e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a452:	2b03      	cmp	r3, #3
 800a454:	d003      	beq.n	800a45e <USB_HC_Init+0x22a>
 800a456:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d10f      	bne.n	800a47e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a45e:	78fb      	ldrb	r3, [r7, #3]
 800a460:	015a      	lsls	r2, r3, #5
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	4413      	add	r3, r2
 800a466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	78fa      	ldrb	r2, [r7, #3]
 800a46e:	0151      	lsls	r1, r2, #5
 800a470:	693a      	ldr	r2, [r7, #16]
 800a472:	440a      	add	r2, r1
 800a474:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a478:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a47c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a47e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a480:	4618      	mov	r0, r3
 800a482:	3720      	adds	r7, #32
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}
 800a488:	40040000 	.word	0x40040000

0800a48c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b08c      	sub	sp, #48	; 0x30
 800a490:	af02      	add	r7, sp, #8
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	4613      	mov	r3, r2
 800a498:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	785b      	ldrb	r3, [r3, #1]
 800a4a2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800a4a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4a8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	4a5d      	ldr	r2, [pc, #372]	; (800a624 <USB_HC_StartXfer+0x198>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d12f      	bne.n	800a512 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800a4b2:	79fb      	ldrb	r3, [r7, #7]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d11c      	bne.n	800a4f2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	7c9b      	ldrb	r3, [r3, #18]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d003      	beq.n	800a4c8 <USB_HC_StartXfer+0x3c>
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	7c9b      	ldrb	r3, [r3, #18]
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	d124      	bne.n	800a512 <USB_HC_StartXfer+0x86>
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	799b      	ldrb	r3, [r3, #6]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d120      	bne.n	800a512 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	015a      	lsls	r2, r3, #5
 800a4d4:	6a3b      	ldr	r3, [r7, #32]
 800a4d6:	4413      	add	r3, r2
 800a4d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4dc:	68db      	ldr	r3, [r3, #12]
 800a4de:	69fa      	ldr	r2, [r7, #28]
 800a4e0:	0151      	lsls	r1, r2, #5
 800a4e2:	6a3a      	ldr	r2, [r7, #32]
 800a4e4:	440a      	add	r2, r1
 800a4e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4ee:	60d3      	str	r3, [r2, #12]
 800a4f0:	e00f      	b.n	800a512 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	791b      	ldrb	r3, [r3, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d10b      	bne.n	800a512 <USB_HC_StartXfer+0x86>
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	795b      	ldrb	r3, [r3, #5]
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d107      	bne.n	800a512 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	785b      	ldrb	r3, [r3, #1]
 800a506:	4619      	mov	r1, r3
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f000 fb6b 	bl	800abe4 <USB_DoPing>
        return HAL_OK;
 800a50e:	2300      	movs	r3, #0
 800a510:	e232      	b.n	800a978 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	799b      	ldrb	r3, [r3, #6]
 800a516:	2b01      	cmp	r3, #1
 800a518:	d158      	bne.n	800a5cc <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800a51a:	2301      	movs	r3, #1
 800a51c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	78db      	ldrb	r3, [r3, #3]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d007      	beq.n	800a536 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a526:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a528:	68ba      	ldr	r2, [r7, #8]
 800a52a:	8a92      	ldrh	r2, [r2, #20]
 800a52c:	fb03 f202 	mul.w	r2, r3, r2
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	61da      	str	r2, [r3, #28]
 800a534:	e07c      	b.n	800a630 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	7c9b      	ldrb	r3, [r3, #18]
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d130      	bne.n	800a5a0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	6a1b      	ldr	r3, [r3, #32]
 800a542:	2bbc      	cmp	r3, #188	; 0xbc
 800a544:	d918      	bls.n	800a578 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	8a9b      	ldrh	r3, [r3, #20]
 800a54a:	461a      	mov	r2, r3
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	69da      	ldr	r2, [r3, #28]
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d003      	beq.n	800a568 <USB_HC_StartXfer+0xdc>
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	68db      	ldr	r3, [r3, #12]
 800a564:	2b02      	cmp	r3, #2
 800a566:	d103      	bne.n	800a570 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	2202      	movs	r2, #2
 800a56c:	60da      	str	r2, [r3, #12]
 800a56e:	e05f      	b.n	800a630 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	2201      	movs	r2, #1
 800a574:	60da      	str	r2, [r3, #12]
 800a576:	e05b      	b.n	800a630 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	6a1a      	ldr	r2, [r3, #32]
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	2b01      	cmp	r3, #1
 800a586:	d007      	beq.n	800a598 <USB_HC_StartXfer+0x10c>
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	2b02      	cmp	r3, #2
 800a58e:	d003      	beq.n	800a598 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	2204      	movs	r2, #4
 800a594:	60da      	str	r2, [r3, #12]
 800a596:	e04b      	b.n	800a630 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	2203      	movs	r2, #3
 800a59c:	60da      	str	r2, [r3, #12]
 800a59e:	e047      	b.n	800a630 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800a5a0:	79fb      	ldrb	r3, [r7, #7]
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d10d      	bne.n	800a5c2 <USB_HC_StartXfer+0x136>
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	8a92      	ldrh	r2, [r2, #20]
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d907      	bls.n	800a5c2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a5b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a5b4:	68ba      	ldr	r2, [r7, #8]
 800a5b6:	8a92      	ldrh	r2, [r2, #20]
 800a5b8:	fb03 f202 	mul.w	r2, r3, r2
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	61da      	str	r2, [r3, #28]
 800a5c0:	e036      	b.n	800a630 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	6a1a      	ldr	r2, [r3, #32]
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	61da      	str	r2, [r3, #28]
 800a5ca:	e031      	b.n	800a630 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	6a1b      	ldr	r3, [r3, #32]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d018      	beq.n	800a606 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	6a1b      	ldr	r3, [r3, #32]
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	8a92      	ldrh	r2, [r2, #20]
 800a5dc:	4413      	add	r3, r2
 800a5de:	3b01      	subs	r3, #1
 800a5e0:	68ba      	ldr	r2, [r7, #8]
 800a5e2:	8a92      	ldrh	r2, [r2, #20]
 800a5e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5e8:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 800a5ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a5ec:	8b7b      	ldrh	r3, [r7, #26]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d90b      	bls.n	800a60a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800a5f2:	8b7b      	ldrh	r3, [r7, #26]
 800a5f4:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a5f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a5f8:	68ba      	ldr	r2, [r7, #8]
 800a5fa:	8a92      	ldrh	r2, [r2, #20]
 800a5fc:	fb03 f202 	mul.w	r2, r3, r2
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	61da      	str	r2, [r3, #28]
 800a604:	e001      	b.n	800a60a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800a606:	2301      	movs	r3, #1
 800a608:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	78db      	ldrb	r3, [r3, #3]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00a      	beq.n	800a628 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a612:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a614:	68ba      	ldr	r2, [r7, #8]
 800a616:	8a92      	ldrh	r2, [r2, #20]
 800a618:	fb03 f202 	mul.w	r2, r3, r2
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	61da      	str	r2, [r3, #28]
 800a620:	e006      	b.n	800a630 <USB_HC_StartXfer+0x1a4>
 800a622:	bf00      	nop
 800a624:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	6a1a      	ldr	r2, [r3, #32]
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	69db      	ldr	r3, [r3, #28]
 800a634:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a638:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a63a:	04d9      	lsls	r1, r3, #19
 800a63c:	4ba3      	ldr	r3, [pc, #652]	; (800a8cc <USB_HC_StartXfer+0x440>)
 800a63e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a640:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	7d9b      	ldrb	r3, [r3, #22]
 800a646:	075b      	lsls	r3, r3, #29
 800a648:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a64c:	69f9      	ldr	r1, [r7, #28]
 800a64e:	0148      	lsls	r0, r1, #5
 800a650:	6a39      	ldr	r1, [r7, #32]
 800a652:	4401      	add	r1, r0
 800a654:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a658:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a65a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a65c:	79fb      	ldrb	r3, [r7, #7]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d009      	beq.n	800a676 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	6999      	ldr	r1, [r3, #24]
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	015a      	lsls	r2, r3, #5
 800a66a:	6a3b      	ldr	r3, [r7, #32]
 800a66c:	4413      	add	r3, r2
 800a66e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a672:	460a      	mov	r2, r1
 800a674:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a676:	6a3b      	ldr	r3, [r7, #32]
 800a678:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	f003 0301 	and.w	r3, r3, #1
 800a682:	2b00      	cmp	r3, #0
 800a684:	bf0c      	ite	eq
 800a686:	2301      	moveq	r3, #1
 800a688:	2300      	movne	r3, #0
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	015a      	lsls	r2, r3, #5
 800a692:	6a3b      	ldr	r3, [r7, #32]
 800a694:	4413      	add	r3, r2
 800a696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	69fa      	ldr	r2, [r7, #28]
 800a69e:	0151      	lsls	r1, r2, #5
 800a6a0:	6a3a      	ldr	r2, [r7, #32]
 800a6a2:	440a      	add	r2, r1
 800a6a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a6a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a6ac:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	015a      	lsls	r2, r3, #5
 800a6b2:	6a3b      	ldr	r3, [r7, #32]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	7e7b      	ldrb	r3, [r7, #25]
 800a6be:	075b      	lsls	r3, r3, #29
 800a6c0:	69f9      	ldr	r1, [r7, #28]
 800a6c2:	0148      	lsls	r0, r1, #5
 800a6c4:	6a39      	ldr	r1, [r7, #32]
 800a6c6:	4401      	add	r1, r0
 800a6c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	799b      	ldrb	r3, [r3, #6]
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	f040 80c3 	bne.w	800a860 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	7c5b      	ldrb	r3, [r3, #17]
 800a6de:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a6e0:	68ba      	ldr	r2, [r7, #8]
 800a6e2:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	69fa      	ldr	r2, [r7, #28]
 800a6e8:	0151      	lsls	r1, r2, #5
 800a6ea:	6a3a      	ldr	r2, [r7, #32]
 800a6ec:	440a      	add	r2, r1
 800a6ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a6f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a6f6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	015a      	lsls	r2, r3, #5
 800a6fc:	6a3b      	ldr	r3, [r7, #32]
 800a6fe:	4413      	add	r3, r2
 800a700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	69fa      	ldr	r2, [r7, #28]
 800a708:	0151      	lsls	r1, r2, #5
 800a70a:	6a3a      	ldr	r2, [r7, #32]
 800a70c:	440a      	add	r2, r1
 800a70e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a712:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a716:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	79db      	ldrb	r3, [r3, #7]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d123      	bne.n	800a768 <USB_HC_StartXfer+0x2dc>
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	78db      	ldrb	r3, [r3, #3]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d11f      	bne.n	800a768 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	015a      	lsls	r2, r3, #5
 800a72c:	6a3b      	ldr	r3, [r7, #32]
 800a72e:	4413      	add	r3, r2
 800a730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	69fa      	ldr	r2, [r7, #28]
 800a738:	0151      	lsls	r1, r2, #5
 800a73a:	6a3a      	ldr	r2, [r7, #32]
 800a73c:	440a      	add	r2, r1
 800a73e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a746:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	015a      	lsls	r2, r3, #5
 800a74c:	6a3b      	ldr	r3, [r7, #32]
 800a74e:	4413      	add	r3, r2
 800a750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	69fa      	ldr	r2, [r7, #28]
 800a758:	0151      	lsls	r1, r2, #5
 800a75a:	6a3a      	ldr	r2, [r7, #32]
 800a75c:	440a      	add	r2, r1
 800a75e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a766:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	7c9b      	ldrb	r3, [r3, #18]
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d003      	beq.n	800a778 <USB_HC_StartXfer+0x2ec>
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	7c9b      	ldrb	r3, [r3, #18]
 800a774:	2b03      	cmp	r3, #3
 800a776:	d117      	bne.n	800a7a8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d113      	bne.n	800a7a8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	78db      	ldrb	r3, [r3, #3]
 800a784:	2b01      	cmp	r3, #1
 800a786:	d10f      	bne.n	800a7a8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a788:	69fb      	ldr	r3, [r7, #28]
 800a78a:	015a      	lsls	r2, r3, #5
 800a78c:	6a3b      	ldr	r3, [r7, #32]
 800a78e:	4413      	add	r3, r2
 800a790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	69fa      	ldr	r2, [r7, #28]
 800a798:	0151      	lsls	r1, r2, #5
 800a79a:	6a3a      	ldr	r2, [r7, #32]
 800a79c:	440a      	add	r2, r1
 800a79e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7a6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	7c9b      	ldrb	r3, [r3, #18]
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d162      	bne.n	800a876 <USB_HC_StartXfer+0x3ea>
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	78db      	ldrb	r3, [r3, #3]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d15e      	bne.n	800a876 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	3b01      	subs	r3, #1
 800a7be:	2b03      	cmp	r3, #3
 800a7c0:	d858      	bhi.n	800a874 <USB_HC_StartXfer+0x3e8>
 800a7c2:	a201      	add	r2, pc, #4	; (adr r2, 800a7c8 <USB_HC_StartXfer+0x33c>)
 800a7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c8:	0800a7d9 	.word	0x0800a7d9
 800a7cc:	0800a7fb 	.word	0x0800a7fb
 800a7d0:	0800a81d 	.word	0x0800a81d
 800a7d4:	0800a83f 	.word	0x0800a83f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800a7d8:	69fb      	ldr	r3, [r7, #28]
 800a7da:	015a      	lsls	r2, r3, #5
 800a7dc:	6a3b      	ldr	r3, [r7, #32]
 800a7de:	4413      	add	r3, r2
 800a7e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	69fa      	ldr	r2, [r7, #28]
 800a7e8:	0151      	lsls	r1, r2, #5
 800a7ea:	6a3a      	ldr	r2, [r7, #32]
 800a7ec:	440a      	add	r2, r1
 800a7ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7f6:	6053      	str	r3, [r2, #4]
          break;
 800a7f8:	e03d      	b.n	800a876 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	015a      	lsls	r2, r3, #5
 800a7fe:	6a3b      	ldr	r3, [r7, #32]
 800a800:	4413      	add	r3, r2
 800a802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	69fa      	ldr	r2, [r7, #28]
 800a80a:	0151      	lsls	r1, r2, #5
 800a80c:	6a3a      	ldr	r2, [r7, #32]
 800a80e:	440a      	add	r2, r1
 800a810:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a814:	f043 030e 	orr.w	r3, r3, #14
 800a818:	6053      	str	r3, [r2, #4]
          break;
 800a81a:	e02c      	b.n	800a876 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	015a      	lsls	r2, r3, #5
 800a820:	6a3b      	ldr	r3, [r7, #32]
 800a822:	4413      	add	r3, r2
 800a824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	69fa      	ldr	r2, [r7, #28]
 800a82c:	0151      	lsls	r1, r2, #5
 800a82e:	6a3a      	ldr	r2, [r7, #32]
 800a830:	440a      	add	r2, r1
 800a832:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a836:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a83a:	6053      	str	r3, [r2, #4]
          break;
 800a83c:	e01b      	b.n	800a876 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800a83e:	69fb      	ldr	r3, [r7, #28]
 800a840:	015a      	lsls	r2, r3, #5
 800a842:	6a3b      	ldr	r3, [r7, #32]
 800a844:	4413      	add	r3, r2
 800a846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	69fa      	ldr	r2, [r7, #28]
 800a84e:	0151      	lsls	r1, r2, #5
 800a850:	6a3a      	ldr	r2, [r7, #32]
 800a852:	440a      	add	r2, r1
 800a854:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a858:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a85c:	6053      	str	r3, [r2, #4]
          break;
 800a85e:	e00a      	b.n	800a876 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a860:	69fb      	ldr	r3, [r7, #28]
 800a862:	015a      	lsls	r2, r3, #5
 800a864:	6a3b      	ldr	r3, [r7, #32]
 800a866:	4413      	add	r3, r2
 800a868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a86c:	461a      	mov	r2, r3
 800a86e:	2300      	movs	r3, #0
 800a870:	6053      	str	r3, [r2, #4]
 800a872:	e000      	b.n	800a876 <USB_HC_StartXfer+0x3ea>
          break;
 800a874:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a876:	69fb      	ldr	r3, [r7, #28]
 800a878:	015a      	lsls	r2, r3, #5
 800a87a:	6a3b      	ldr	r3, [r7, #32]
 800a87c:	4413      	add	r3, r2
 800a87e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a88c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	78db      	ldrb	r3, [r3, #3]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d004      	beq.n	800a8a0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a89c:	613b      	str	r3, [r7, #16]
 800a89e:	e003      	b.n	800a8a8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a8a6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a8ae:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	015a      	lsls	r2, r3, #5
 800a8b4:	6a3b      	ldr	r3, [r7, #32]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8bc:	461a      	mov	r2, r3
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a8c2:	79fb      	ldrb	r3, [r7, #7]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d003      	beq.n	800a8d0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	e055      	b.n	800a978 <USB_HC_StartXfer+0x4ec>
 800a8cc:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	78db      	ldrb	r3, [r3, #3]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d14e      	bne.n	800a976 <USB_HC_StartXfer+0x4ea>
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	6a1b      	ldr	r3, [r3, #32]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d04a      	beq.n	800a976 <USB_HC_StartXfer+0x4ea>
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	79db      	ldrb	r3, [r3, #7]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d146      	bne.n	800a976 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	7c9b      	ldrb	r3, [r3, #18]
 800a8ec:	2b03      	cmp	r3, #3
 800a8ee:	d831      	bhi.n	800a954 <USB_HC_StartXfer+0x4c8>
 800a8f0:	a201      	add	r2, pc, #4	; (adr r2, 800a8f8 <USB_HC_StartXfer+0x46c>)
 800a8f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f6:	bf00      	nop
 800a8f8:	0800a909 	.word	0x0800a909
 800a8fc:	0800a92d 	.word	0x0800a92d
 800a900:	0800a909 	.word	0x0800a909
 800a904:	0800a92d 	.word	0x0800a92d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	6a1b      	ldr	r3, [r3, #32]
 800a90c:	3303      	adds	r3, #3
 800a90e:	089b      	lsrs	r3, r3, #2
 800a910:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a912:	8afa      	ldrh	r2, [r7, #22]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a918:	b29b      	uxth	r3, r3
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d91c      	bls.n	800a958 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	699b      	ldr	r3, [r3, #24]
 800a922:	f043 0220 	orr.w	r2, r3, #32
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	619a      	str	r2, [r3, #24]
        }
        break;
 800a92a:	e015      	b.n	800a958 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	6a1b      	ldr	r3, [r3, #32]
 800a930:	3303      	adds	r3, #3
 800a932:	089b      	lsrs	r3, r3, #2
 800a934:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a936:	8afa      	ldrh	r2, [r7, #22]
 800a938:	6a3b      	ldr	r3, [r7, #32]
 800a93a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a93e:	691b      	ldr	r3, [r3, #16]
 800a940:	b29b      	uxth	r3, r3
 800a942:	429a      	cmp	r2, r3
 800a944:	d90a      	bls.n	800a95c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	699b      	ldr	r3, [r3, #24]
 800a94a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	619a      	str	r2, [r3, #24]
        }
        break;
 800a952:	e003      	b.n	800a95c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800a954:	bf00      	nop
 800a956:	e002      	b.n	800a95e <USB_HC_StartXfer+0x4d2>
        break;
 800a958:	bf00      	nop
 800a95a:	e000      	b.n	800a95e <USB_HC_StartXfer+0x4d2>
        break;
 800a95c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	6999      	ldr	r1, [r3, #24]
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	785a      	ldrb	r2, [r3, #1]
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	6a1b      	ldr	r3, [r3, #32]
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	2000      	movs	r0, #0
 800a96e:	9000      	str	r0, [sp, #0]
 800a970:	68f8      	ldr	r0, [r7, #12]
 800a972:	f7ff f9c9 	bl	8009d08 <USB_WritePacket>
  }

  return HAL_OK;
 800a976:	2300      	movs	r3, #0
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3728      	adds	r7, #40	; 0x28
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a980:	b480      	push	{r7}
 800a982:	b085      	sub	sp, #20
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a992:	695b      	ldr	r3, [r3, #20]
 800a994:	b29b      	uxth	r3, r3
}
 800a996:	4618      	mov	r0, r3
 800a998:	3714      	adds	r7, #20
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr

0800a9a2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a9a2:	b480      	push	{r7}
 800a9a4:	b089      	sub	sp, #36	; 0x24
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a9b2:	78fb      	ldrb	r3, [r7, #3]
 800a9b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a9ba:	69bb      	ldr	r3, [r7, #24]
 800a9bc:	015a      	lsls	r2, r3, #5
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	0c9b      	lsrs	r3, r3, #18
 800a9ca:	f003 0303 	and.w	r3, r3, #3
 800a9ce:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	015a      	lsls	r2, r3, #5
 800a9d4:	69fb      	ldr	r3, [r7, #28]
 800a9d6:	4413      	add	r3, r2
 800a9d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	0fdb      	lsrs	r3, r3, #31
 800a9e0:	f003 0301 	and.w	r3, r3, #1
 800a9e4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	015a      	lsls	r2, r3, #5
 800a9ea:	69fb      	ldr	r3, [r7, #28]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	0fdb      	lsrs	r3, r3, #31
 800a9f6:	f003 0301 	and.w	r3, r3, #1
 800a9fa:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	f003 0320 	and.w	r3, r3, #32
 800aa04:	2b20      	cmp	r3, #32
 800aa06:	d10d      	bne.n	800aa24 <USB_HC_Halt+0x82>
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d10a      	bne.n	800aa24 <USB_HC_Halt+0x82>
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d005      	beq.n	800aa20 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d002      	beq.n	800aa20 <USB_HC_Halt+0x7e>
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	2b03      	cmp	r3, #3
 800aa1e:	d101      	bne.n	800aa24 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800aa20:	2300      	movs	r3, #0
 800aa22:	e0d8      	b.n	800abd6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d002      	beq.n	800aa30 <USB_HC_Halt+0x8e>
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d173      	bne.n	800ab18 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	015a      	lsls	r2, r3, #5
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	4413      	add	r3, r2
 800aa38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	69ba      	ldr	r2, [r7, #24]
 800aa40:	0151      	lsls	r1, r2, #5
 800aa42:	69fa      	ldr	r2, [r7, #28]
 800aa44:	440a      	add	r2, r1
 800aa46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aa4e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	f003 0320 	and.w	r3, r3, #32
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d14a      	bne.n	800aaf2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d133      	bne.n	800aad0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800aa68:	69bb      	ldr	r3, [r7, #24]
 800aa6a:	015a      	lsls	r2, r3, #5
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	4413      	add	r3, r2
 800aa70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	69ba      	ldr	r2, [r7, #24]
 800aa78:	0151      	lsls	r1, r2, #5
 800aa7a:	69fa      	ldr	r2, [r7, #28]
 800aa7c:	440a      	add	r2, r1
 800aa7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa86:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aa88:	69bb      	ldr	r3, [r7, #24]
 800aa8a:	015a      	lsls	r2, r3, #5
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	4413      	add	r3, r2
 800aa90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	69ba      	ldr	r2, [r7, #24]
 800aa98:	0151      	lsls	r1, r2, #5
 800aa9a:	69fa      	ldr	r2, [r7, #28]
 800aa9c:	440a      	add	r2, r1
 800aa9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aaa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aaa6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	3301      	adds	r3, #1
 800aaac:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aab4:	d82e      	bhi.n	800ab14 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	015a      	lsls	r2, r3, #5
 800aaba:	69fb      	ldr	r3, [r7, #28]
 800aabc:	4413      	add	r3, r2
 800aabe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aac8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aacc:	d0ec      	beq.n	800aaa8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800aace:	e081      	b.n	800abd4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aad0:	69bb      	ldr	r3, [r7, #24]
 800aad2:	015a      	lsls	r2, r3, #5
 800aad4:	69fb      	ldr	r3, [r7, #28]
 800aad6:	4413      	add	r3, r2
 800aad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	69ba      	ldr	r2, [r7, #24]
 800aae0:	0151      	lsls	r1, r2, #5
 800aae2:	69fa      	ldr	r2, [r7, #28]
 800aae4:	440a      	add	r2, r1
 800aae6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aaea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aaee:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800aaf0:	e070      	b.n	800abd4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	015a      	lsls	r2, r3, #5
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	4413      	add	r3, r2
 800aafa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	69ba      	ldr	r2, [r7, #24]
 800ab02:	0151      	lsls	r1, r2, #5
 800ab04:	69fa      	ldr	r2, [r7, #28]
 800ab06:	440a      	add	r2, r1
 800ab08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab10:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ab12:	e05f      	b.n	800abd4 <USB_HC_Halt+0x232>
            break;
 800ab14:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ab16:	e05d      	b.n	800abd4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	015a      	lsls	r2, r3, #5
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	4413      	add	r3, r2
 800ab20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	69ba      	ldr	r2, [r7, #24]
 800ab28:	0151      	lsls	r1, r2, #5
 800ab2a:	69fa      	ldr	r2, [r7, #28]
 800ab2c:	440a      	add	r2, r1
 800ab2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab36:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ab38:	69fb      	ldr	r3, [r7, #28]
 800ab3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d133      	bne.n	800abb0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ab48:	69bb      	ldr	r3, [r7, #24]
 800ab4a:	015a      	lsls	r2, r3, #5
 800ab4c:	69fb      	ldr	r3, [r7, #28]
 800ab4e:	4413      	add	r3, r2
 800ab50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	69ba      	ldr	r2, [r7, #24]
 800ab58:	0151      	lsls	r1, r2, #5
 800ab5a:	69fa      	ldr	r2, [r7, #28]
 800ab5c:	440a      	add	r2, r1
 800ab5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab66:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ab68:	69bb      	ldr	r3, [r7, #24]
 800ab6a:	015a      	lsls	r2, r3, #5
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	4413      	add	r3, r2
 800ab70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	69ba      	ldr	r2, [r7, #24]
 800ab78:	0151      	lsls	r1, r2, #5
 800ab7a:	69fa      	ldr	r2, [r7, #28]
 800ab7c:	440a      	add	r2, r1
 800ab7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab86:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab94:	d81d      	bhi.n	800abd2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	015a      	lsls	r2, r3, #5
 800ab9a:	69fb      	ldr	r3, [r7, #28]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aba8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abac:	d0ec      	beq.n	800ab88 <USB_HC_Halt+0x1e6>
 800abae:	e011      	b.n	800abd4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800abb0:	69bb      	ldr	r3, [r7, #24]
 800abb2:	015a      	lsls	r2, r3, #5
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	4413      	add	r3, r2
 800abb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	69ba      	ldr	r2, [r7, #24]
 800abc0:	0151      	lsls	r1, r2, #5
 800abc2:	69fa      	ldr	r2, [r7, #28]
 800abc4:	440a      	add	r2, r1
 800abc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800abce:	6013      	str	r3, [r2, #0]
 800abd0:	e000      	b.n	800abd4 <USB_HC_Halt+0x232>
          break;
 800abd2:	bf00      	nop
    }
  }

  return HAL_OK;
 800abd4:	2300      	movs	r3, #0
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3724      	adds	r7, #36	; 0x24
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr
	...

0800abe4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b087      	sub	sp, #28
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	460b      	mov	r3, r1
 800abee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800abf4:	78fb      	ldrb	r3, [r7, #3]
 800abf6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800abf8:	2301      	movs	r3, #1
 800abfa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	04da      	lsls	r2, r3, #19
 800ac00:	4b15      	ldr	r3, [pc, #84]	; (800ac58 <USB_DoPing+0x74>)
 800ac02:	4013      	ands	r3, r2
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	0151      	lsls	r1, r2, #5
 800ac08:	697a      	ldr	r2, [r7, #20]
 800ac0a:	440a      	add	r2, r1
 800ac0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac14:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	015a      	lsls	r2, r3, #5
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	4413      	add	r3, r2
 800ac1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ac2c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac34:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	015a      	lsls	r2, r3, #5
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac42:	461a      	mov	r2, r3
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	371c      	adds	r7, #28
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr
 800ac56:	bf00      	nop
 800ac58:	1ff80000 	.word	0x1ff80000

0800ac5c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b088      	sub	sp, #32
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800ac64:	2300      	movs	r3, #0
 800ac66:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f7fe ff8c 	bl	8009b8e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ac76:	2110      	movs	r1, #16
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f7fe ffe5 	bl	8009c48 <USB_FlushTxFifo>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d001      	beq.n	800ac88 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800ac84:	2301      	movs	r3, #1
 800ac86:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f7ff f80f 	bl	8009cac <USB_FlushRxFifo>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d001      	beq.n	800ac98 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800ac94:	2301      	movs	r3, #1
 800ac96:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800ac98:	2300      	movs	r3, #0
 800ac9a:	61bb      	str	r3, [r7, #24]
 800ac9c:	e01f      	b.n	800acde <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	015a      	lsls	r2, r3, #5
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	4413      	add	r3, r2
 800aca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800acb4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800acbc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800acc4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	015a      	lsls	r2, r3, #5
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	4413      	add	r3, r2
 800acce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acd2:	461a      	mov	r2, r3
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	3301      	adds	r3, #1
 800acdc:	61bb      	str	r3, [r7, #24]
 800acde:	69bb      	ldr	r3, [r7, #24]
 800ace0:	2b0f      	cmp	r3, #15
 800ace2:	d9dc      	bls.n	800ac9e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ace4:	2300      	movs	r3, #0
 800ace6:	61bb      	str	r3, [r7, #24]
 800ace8:	e034      	b.n	800ad54 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	015a      	lsls	r2, r3, #5
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	4413      	add	r3, r2
 800acf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad00:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad08:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ad10:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ad12:	69bb      	ldr	r3, [r7, #24]
 800ad14:	015a      	lsls	r2, r3, #5
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	4413      	add	r3, r2
 800ad1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad1e:	461a      	mov	r2, r3
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	3301      	adds	r3, #1
 800ad28:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad30:	d80c      	bhi.n	800ad4c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	015a      	lsls	r2, r3, #5
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	4413      	add	r3, r2
 800ad3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad48:	d0ec      	beq.n	800ad24 <USB_StopHost+0xc8>
 800ad4a:	e000      	b.n	800ad4e <USB_StopHost+0xf2>
        break;
 800ad4c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	3301      	adds	r3, #1
 800ad52:	61bb      	str	r3, [r7, #24]
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	2b0f      	cmp	r3, #15
 800ad58:	d9c7      	bls.n	800acea <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad60:	461a      	mov	r2, r3
 800ad62:	f04f 33ff 	mov.w	r3, #4294967295
 800ad66:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad6e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f7fe fefb 	bl	8009b6c <USB_EnableGlobalInt>

  return ret;
 800ad76:	7ffb      	ldrb	r3, [r7, #31]
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3720      	adds	r7, #32
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800ad80:	b590      	push	{r4, r7, lr}
 800ad82:	b089      	sub	sp, #36	; 0x24
 800ad84:	af04      	add	r7, sp, #16
 800ad86:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800ad88:	2301      	movs	r3, #1
 800ad8a:	2202      	movs	r2, #2
 800ad8c:	2102      	movs	r1, #2
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 fc85 	bl	800b69e <USBH_FindInterface>
 800ad94:	4603      	mov	r3, r0
 800ad96:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ad98:	7bfb      	ldrb	r3, [r7, #15]
 800ad9a:	2bff      	cmp	r3, #255	; 0xff
 800ad9c:	d002      	beq.n	800ada4 <USBH_CDC_InterfaceInit+0x24>
 800ad9e:	7bfb      	ldrb	r3, [r7, #15]
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d901      	bls.n	800ada8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ada4:	2302      	movs	r3, #2
 800ada6:	e13d      	b.n	800b024 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800ada8:	7bfb      	ldrb	r3, [r7, #15]
 800adaa:	4619      	mov	r1, r3
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 fc5a 	bl	800b666 <USBH_SelectInterface>
 800adb2:	4603      	mov	r3, r0
 800adb4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800adb6:	7bbb      	ldrb	r3, [r7, #14]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d001      	beq.n	800adc0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800adbc:	2302      	movs	r3, #2
 800adbe:	e131      	b.n	800b024 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800adc6:	2050      	movs	r0, #80	; 0x50
 800adc8:	f002 fb74 	bl	800d4b4 <malloc>
 800adcc:	4603      	mov	r3, r0
 800adce:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800add6:	69db      	ldr	r3, [r3, #28]
 800add8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d101      	bne.n	800ade4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800ade0:	2302      	movs	r3, #2
 800ade2:	e11f      	b.n	800b024 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800ade4:	2250      	movs	r2, #80	; 0x50
 800ade6:	2100      	movs	r1, #0
 800ade8:	68b8      	ldr	r0, [r7, #8]
 800adea:	f003 fbe8 	bl	800e5be <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800adee:	7bfb      	ldrb	r3, [r7, #15]
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	211a      	movs	r1, #26
 800adf4:	fb01 f303 	mul.w	r3, r1, r3
 800adf8:	4413      	add	r3, r2
 800adfa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	b25b      	sxtb	r3, r3
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	da15      	bge.n	800ae32 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ae06:	7bfb      	ldrb	r3, [r7, #15]
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	211a      	movs	r1, #26
 800ae0c:	fb01 f303 	mul.w	r3, r1, r3
 800ae10:	4413      	add	r3, r2
 800ae12:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ae16:	781a      	ldrb	r2, [r3, #0]
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ae1c:	7bfb      	ldrb	r3, [r7, #15]
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	211a      	movs	r1, #26
 800ae22:	fb01 f303 	mul.w	r3, r1, r3
 800ae26:	4413      	add	r3, r2
 800ae28:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ae2c:	881a      	ldrh	r2, [r3, #0]
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	785b      	ldrb	r3, [r3, #1]
 800ae36:	4619      	mov	r1, r3
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f001 ffce 	bl	800cdda <USBH_AllocPipe>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	461a      	mov	r2, r3
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	7819      	ldrb	r1, [r3, #0]
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	7858      	ldrb	r0, [r3, #1]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	8952      	ldrh	r2, [r2, #10]
 800ae5e:	9202      	str	r2, [sp, #8]
 800ae60:	2203      	movs	r2, #3
 800ae62:	9201      	str	r2, [sp, #4]
 800ae64:	9300      	str	r3, [sp, #0]
 800ae66:	4623      	mov	r3, r4
 800ae68:	4602      	mov	r2, r0
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f001 ff86 	bl	800cd7c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	2200      	movs	r2, #0
 800ae76:	4619      	mov	r1, r3
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f002 fa95 	bl	800d3a8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800ae7e:	2300      	movs	r3, #0
 800ae80:	2200      	movs	r2, #0
 800ae82:	210a      	movs	r1, #10
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 fc0a 	bl	800b69e <USBH_FindInterface>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ae8e:	7bfb      	ldrb	r3, [r7, #15]
 800ae90:	2bff      	cmp	r3, #255	; 0xff
 800ae92:	d002      	beq.n	800ae9a <USBH_CDC_InterfaceInit+0x11a>
 800ae94:	7bfb      	ldrb	r3, [r7, #15]
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d901      	bls.n	800ae9e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ae9a:	2302      	movs	r3, #2
 800ae9c:	e0c2      	b.n	800b024 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ae9e:	7bfb      	ldrb	r3, [r7, #15]
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	211a      	movs	r1, #26
 800aea4:	fb01 f303 	mul.w	r3, r1, r3
 800aea8:	4413      	add	r3, r2
 800aeaa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	b25b      	sxtb	r3, r3
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	da16      	bge.n	800aee4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800aeb6:	7bfb      	ldrb	r3, [r7, #15]
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	211a      	movs	r1, #26
 800aebc:	fb01 f303 	mul.w	r3, r1, r3
 800aec0:	4413      	add	r3, r2
 800aec2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800aec6:	781a      	ldrb	r2, [r3, #0]
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800aecc:	7bfb      	ldrb	r3, [r7, #15]
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	211a      	movs	r1, #26
 800aed2:	fb01 f303 	mul.w	r3, r1, r3
 800aed6:	4413      	add	r3, r2
 800aed8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800aedc:	881a      	ldrh	r2, [r3, #0]
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	835a      	strh	r2, [r3, #26]
 800aee2:	e015      	b.n	800af10 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800aee4:	7bfb      	ldrb	r3, [r7, #15]
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	211a      	movs	r1, #26
 800aeea:	fb01 f303 	mul.w	r3, r1, r3
 800aeee:	4413      	add	r3, r2
 800aef0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800aef4:	781a      	ldrb	r2, [r3, #0]
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800aefa:	7bfb      	ldrb	r3, [r7, #15]
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	211a      	movs	r1, #26
 800af00:	fb01 f303 	mul.w	r3, r1, r3
 800af04:	4413      	add	r3, r2
 800af06:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800af0a:	881a      	ldrh	r2, [r3, #0]
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800af10:	7bfb      	ldrb	r3, [r7, #15]
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	211a      	movs	r1, #26
 800af16:	fb01 f303 	mul.w	r3, r1, r3
 800af1a:	4413      	add	r3, r2
 800af1c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	b25b      	sxtb	r3, r3
 800af24:	2b00      	cmp	r3, #0
 800af26:	da16      	bge.n	800af56 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800af28:	7bfb      	ldrb	r3, [r7, #15]
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	211a      	movs	r1, #26
 800af2e:	fb01 f303 	mul.w	r3, r1, r3
 800af32:	4413      	add	r3, r2
 800af34:	f203 3356 	addw	r3, r3, #854	; 0x356
 800af38:	781a      	ldrb	r2, [r3, #0]
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800af3e:	7bfb      	ldrb	r3, [r7, #15]
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	211a      	movs	r1, #26
 800af44:	fb01 f303 	mul.w	r3, r1, r3
 800af48:	4413      	add	r3, r2
 800af4a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800af4e:	881a      	ldrh	r2, [r3, #0]
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	835a      	strh	r2, [r3, #26]
 800af54:	e015      	b.n	800af82 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800af56:	7bfb      	ldrb	r3, [r7, #15]
 800af58:	687a      	ldr	r2, [r7, #4]
 800af5a:	211a      	movs	r1, #26
 800af5c:	fb01 f303 	mul.w	r3, r1, r3
 800af60:	4413      	add	r3, r2
 800af62:	f203 3356 	addw	r3, r3, #854	; 0x356
 800af66:	781a      	ldrb	r2, [r3, #0]
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800af6c:	7bfb      	ldrb	r3, [r7, #15]
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	211a      	movs	r1, #26
 800af72:	fb01 f303 	mul.w	r3, r1, r3
 800af76:	4413      	add	r3, r2
 800af78:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800af7c:	881a      	ldrh	r2, [r3, #0]
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	7b9b      	ldrb	r3, [r3, #14]
 800af86:	4619      	mov	r1, r3
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f001 ff26 	bl	800cdda <USBH_AllocPipe>
 800af8e:	4603      	mov	r3, r0
 800af90:	461a      	mov	r2, r3
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	7bdb      	ldrb	r3, [r3, #15]
 800af9a:	4619      	mov	r1, r3
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f001 ff1c 	bl	800cdda <USBH_AllocPipe>
 800afa2:	4603      	mov	r3, r0
 800afa4:	461a      	mov	r2, r3
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	7b59      	ldrb	r1, [r3, #13]
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	7b98      	ldrb	r0, [r3, #14]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800afbe:	68ba      	ldr	r2, [r7, #8]
 800afc0:	8b12      	ldrh	r2, [r2, #24]
 800afc2:	9202      	str	r2, [sp, #8]
 800afc4:	2202      	movs	r2, #2
 800afc6:	9201      	str	r2, [sp, #4]
 800afc8:	9300      	str	r3, [sp, #0]
 800afca:	4623      	mov	r3, r4
 800afcc:	4602      	mov	r2, r0
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f001 fed4 	bl	800cd7c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	7b19      	ldrb	r1, [r3, #12]
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	7bd8      	ldrb	r0, [r3, #15]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800afe8:	68ba      	ldr	r2, [r7, #8]
 800afea:	8b52      	ldrh	r2, [r2, #26]
 800afec:	9202      	str	r2, [sp, #8]
 800afee:	2202      	movs	r2, #2
 800aff0:	9201      	str	r2, [sp, #4]
 800aff2:	9300      	str	r3, [sp, #0]
 800aff4:	4623      	mov	r3, r4
 800aff6:	4602      	mov	r2, r0
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f001 febf 	bl	800cd7c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	2200      	movs	r2, #0
 800b002:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	7b5b      	ldrb	r3, [r3, #13]
 800b00a:	2200      	movs	r2, #0
 800b00c:	4619      	mov	r1, r3
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f002 f9ca 	bl	800d3a8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	7b1b      	ldrb	r3, [r3, #12]
 800b018:	2200      	movs	r2, #0
 800b01a:	4619      	mov	r1, r3
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f002 f9c3 	bl	800d3a8 <USBH_LL_SetToggle>

  return USBH_OK;
 800b022:	2300      	movs	r3, #0
}
 800b024:	4618      	mov	r0, r3
 800b026:	3714      	adds	r7, #20
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd90      	pop	{r4, r7, pc}

0800b02c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b03a:	69db      	ldr	r3, [r3, #28]
 800b03c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d00e      	beq.n	800b064 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	4619      	mov	r1, r3
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f001 feb4 	bl	800cdba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	4619      	mov	r1, r3
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f001 fedf 	bl	800ce1c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2200      	movs	r2, #0
 800b062:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	7b1b      	ldrb	r3, [r3, #12]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00e      	beq.n	800b08a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	7b1b      	ldrb	r3, [r3, #12]
 800b070:	4619      	mov	r1, r3
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f001 fea1 	bl	800cdba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	7b1b      	ldrb	r3, [r3, #12]
 800b07c:	4619      	mov	r1, r3
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f001 fecc 	bl	800ce1c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2200      	movs	r2, #0
 800b088:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	7b5b      	ldrb	r3, [r3, #13]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d00e      	beq.n	800b0b0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	7b5b      	ldrb	r3, [r3, #13]
 800b096:	4619      	mov	r1, r3
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f001 fe8e 	bl	800cdba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	7b5b      	ldrb	r3, [r3, #13]
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f001 feb9 	bl	800ce1c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b0b6:	69db      	ldr	r3, [r3, #28]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d00b      	beq.n	800b0d4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b0c2:	69db      	ldr	r3, [r3, #28]
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f002 f9fd 	bl	800d4c4 <free>
    phost->pActiveClass->pData = 0U;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3710      	adds	r7, #16
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b0de:	b580      	push	{r7, lr}
 800b0e0:	b084      	sub	sp, #16
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b0ec:	69db      	ldr	r3, [r3, #28]
 800b0ee:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	3340      	adds	r3, #64	; 0x40
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 f8b1 	bl	800b25e <GetLineCoding>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800b100:	7afb      	ldrb	r3, [r7, #11]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d105      	bne.n	800b112 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b10c:	2102      	movs	r1, #2
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800b112:	7afb      	ldrb	r3, [r7, #11]
}
 800b114:	4618      	mov	r0, r3
 800b116:	3710      	adds	r7, #16
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b124:	2301      	movs	r3, #1
 800b126:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800b128:	2300      	movs	r3, #0
 800b12a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b132:	69db      	ldr	r3, [r3, #28]
 800b134:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b13c:	2b04      	cmp	r3, #4
 800b13e:	d877      	bhi.n	800b230 <USBH_CDC_Process+0x114>
 800b140:	a201      	add	r2, pc, #4	; (adr r2, 800b148 <USBH_CDC_Process+0x2c>)
 800b142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b146:	bf00      	nop
 800b148:	0800b15d 	.word	0x0800b15d
 800b14c:	0800b163 	.word	0x0800b163
 800b150:	0800b193 	.word	0x0800b193
 800b154:	0800b207 	.word	0x0800b207
 800b158:	0800b215 	.word	0x0800b215
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800b15c:	2300      	movs	r3, #0
 800b15e:	73fb      	strb	r3, [r7, #15]
      break;
 800b160:	e06d      	b.n	800b23e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b166:	4619      	mov	r1, r3
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 f897 	bl	800b29c <SetLineCoding>
 800b16e:	4603      	mov	r3, r0
 800b170:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b172:	7bbb      	ldrb	r3, [r7, #14]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d104      	bne.n	800b182 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	2202      	movs	r2, #2
 800b17c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b180:	e058      	b.n	800b234 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800b182:	7bbb      	ldrb	r3, [r7, #14]
 800b184:	2b01      	cmp	r3, #1
 800b186:	d055      	beq.n	800b234 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	2204      	movs	r2, #4
 800b18c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b190:	e050      	b.n	800b234 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	3340      	adds	r3, #64	; 0x40
 800b196:	4619      	mov	r1, r3
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 f860 	bl	800b25e <GetLineCoding>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b1a2:	7bbb      	ldrb	r3, [r7, #14]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d126      	bne.n	800b1f6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1ba:	791b      	ldrb	r3, [r3, #4]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d13b      	bne.n	800b238 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1ca:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d133      	bne.n	800b238 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1da:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d12b      	bne.n	800b238 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1e8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d124      	bne.n	800b238 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 f958 	bl	800b4a4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b1f4:	e020      	b.n	800b238 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800b1f6:	7bbb      	ldrb	r3, [r7, #14]
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d01d      	beq.n	800b238 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	2204      	movs	r2, #4
 800b200:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b204:	e018      	b.n	800b238 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 f867 	bl	800b2da <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f000 f8da 	bl	800b3c6 <CDC_ProcessReception>
      break;
 800b212:	e014      	b.n	800b23e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800b214:	2100      	movs	r1, #0
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f001 f822 	bl	800c260 <USBH_ClrFeature>
 800b21c:	4603      	mov	r3, r0
 800b21e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b220:	7bbb      	ldrb	r3, [r7, #14]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d10a      	bne.n	800b23c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	2200      	movs	r2, #0
 800b22a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800b22e:	e005      	b.n	800b23c <USBH_CDC_Process+0x120>

    default:
      break;
 800b230:	bf00      	nop
 800b232:	e004      	b.n	800b23e <USBH_CDC_Process+0x122>
      break;
 800b234:	bf00      	nop
 800b236:	e002      	b.n	800b23e <USBH_CDC_Process+0x122>
      break;
 800b238:	bf00      	nop
 800b23a:	e000      	b.n	800b23e <USBH_CDC_Process+0x122>
      break;
 800b23c:	bf00      	nop

  }

  return status;
 800b23e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b240:	4618      	mov	r0, r3
 800b242:	3710      	adds	r7, #16
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b248:	b480      	push	{r7}
 800b24a:	b083      	sub	sp, #12
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b250:	2300      	movs	r3, #0
}
 800b252:	4618      	mov	r0, r3
 800b254:	370c      	adds	r7, #12
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr

0800b25e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800b25e:	b580      	push	{r7, lr}
 800b260:	b082      	sub	sp, #8
 800b262:	af00      	add	r7, sp, #0
 800b264:	6078      	str	r0, [r7, #4]
 800b266:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	22a1      	movs	r2, #161	; 0xa1
 800b26c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2221      	movs	r2, #33	; 0x21
 800b272:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2207      	movs	r2, #7
 800b284:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	2207      	movs	r2, #7
 800b28a:	4619      	mov	r1, r3
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f001 fb23 	bl	800c8d8 <USBH_CtlReq>
 800b292:	4603      	mov	r3, r0
}
 800b294:	4618      	mov	r0, r3
 800b296:	3708      	adds	r7, #8
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2221      	movs	r2, #33	; 0x21
 800b2aa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2220      	movs	r2, #32
 800b2b0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2207      	movs	r2, #7
 800b2c2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	2207      	movs	r2, #7
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f001 fb04 	bl	800c8d8 <USBH_CtlReq>
 800b2d0:	4603      	mov	r3, r0
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3708      	adds	r7, #8
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}

0800b2da <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b086      	sub	sp, #24
 800b2de:	af02      	add	r7, sp, #8
 800b2e0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2e8:	69db      	ldr	r3, [r3, #28]
 800b2ea:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d002      	beq.n	800b300 <CDC_ProcessTransmission+0x26>
 800b2fa:	2b02      	cmp	r3, #2
 800b2fc:	d023      	beq.n	800b346 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800b2fe:	e05e      	b.n	800b3be <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b304:	68fa      	ldr	r2, [r7, #12]
 800b306:	8b12      	ldrh	r2, [r2, #24]
 800b308:	4293      	cmp	r3, r2
 800b30a:	d90b      	bls.n	800b324 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	69d9      	ldr	r1, [r3, #28]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	8b1a      	ldrh	r2, [r3, #24]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	7b5b      	ldrb	r3, [r3, #13]
 800b318:	2001      	movs	r0, #1
 800b31a:	9000      	str	r0, [sp, #0]
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f001 fcea 	bl	800ccf6 <USBH_BulkSendData>
 800b322:	e00b      	b.n	800b33c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800b32c:	b29a      	uxth	r2, r3
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	7b5b      	ldrb	r3, [r3, #13]
 800b332:	2001      	movs	r0, #1
 800b334:	9000      	str	r0, [sp, #0]
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f001 fcdd 	bl	800ccf6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2202      	movs	r2, #2
 800b340:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b344:	e03b      	b.n	800b3be <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	7b5b      	ldrb	r3, [r3, #13]
 800b34a:	4619      	mov	r1, r3
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f002 f801 	bl	800d354 <USBH_LL_GetURBState>
 800b352:	4603      	mov	r3, r0
 800b354:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800b356:	7afb      	ldrb	r3, [r7, #11]
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d128      	bne.n	800b3ae <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	8b12      	ldrh	r2, [r2, #24]
 800b364:	4293      	cmp	r3, r2
 800b366:	d90e      	bls.n	800b386 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b36c:	68fa      	ldr	r2, [r7, #12]
 800b36e:	8b12      	ldrh	r2, [r2, #24]
 800b370:	1a9a      	subs	r2, r3, r2
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	69db      	ldr	r3, [r3, #28]
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	8b12      	ldrh	r2, [r2, #24]
 800b37e:	441a      	add	r2, r3
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	61da      	str	r2, [r3, #28]
 800b384:	e002      	b.n	800b38c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2200      	movs	r2, #0
 800b38a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b390:	2b00      	cmp	r3, #0
 800b392:	d004      	beq.n	800b39e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2201      	movs	r2, #1
 800b398:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b39c:	e00e      	b.n	800b3bc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 f868 	bl	800b47c <USBH_CDC_TransmitCallback>
      break;
 800b3ac:	e006      	b.n	800b3bc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800b3ae:	7afb      	ldrb	r3, [r7, #11]
 800b3b0:	2b02      	cmp	r3, #2
 800b3b2:	d103      	bne.n	800b3bc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b3bc:	bf00      	nop
  }
}
 800b3be:	bf00      	nop
 800b3c0:	3710      	adds	r7, #16
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	b086      	sub	sp, #24
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3d4:	69db      	ldr	r3, [r3, #28]
 800b3d6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800b3e2:	2b03      	cmp	r3, #3
 800b3e4:	d002      	beq.n	800b3ec <CDC_ProcessReception+0x26>
 800b3e6:	2b04      	cmp	r3, #4
 800b3e8:	d00e      	beq.n	800b408 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800b3ea:	e043      	b.n	800b474 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	6a19      	ldr	r1, [r3, #32]
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	8b5a      	ldrh	r2, [r3, #26]
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	7b1b      	ldrb	r3, [r3, #12]
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f001 fca1 	bl	800cd40 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	2204      	movs	r2, #4
 800b402:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b406:	e035      	b.n	800b474 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	7b1b      	ldrb	r3, [r3, #12]
 800b40c:	4619      	mov	r1, r3
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f001 ffa0 	bl	800d354 <USBH_LL_GetURBState>
 800b414:	4603      	mov	r3, r0
 800b416:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800b418:	7cfb      	ldrb	r3, [r7, #19]
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	d129      	bne.n	800b472 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	7b1b      	ldrb	r3, [r3, #12]
 800b422:	4619      	mov	r1, r3
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f001 ff03 	bl	800d230 <USBH_LL_GetLastXferSize>
 800b42a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b430:	68fa      	ldr	r2, [r7, #12]
 800b432:	429a      	cmp	r2, r3
 800b434:	d016      	beq.n	800b464 <CDC_ProcessReception+0x9e>
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	8b5b      	ldrh	r3, [r3, #26]
 800b43a:	461a      	mov	r2, r3
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	4293      	cmp	r3, r2
 800b440:	d910      	bls.n	800b464 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	1ad2      	subs	r2, r2, r3
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	6a1a      	ldr	r2, [r3, #32]
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	441a      	add	r2, r3
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	2203      	movs	r2, #3
 800b45e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b462:	e006      	b.n	800b472 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	2200      	movs	r2, #0
 800b468:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 f80f 	bl	800b490 <USBH_CDC_ReceiveCallback>
      break;
 800b472:	bf00      	nop
  }
}
 800b474:	bf00      	nop
 800b476:	3718      	adds	r7, #24
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b083      	sub	sp, #12
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b484:	bf00      	nop
 800b486:	370c      	adds	r7, #12
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr

0800b490 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800b490:	b480      	push	{r7}
 800b492:	b083      	sub	sp, #12
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b498:	bf00      	nop
 800b49a:	370c      	adds	r7, #12
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b4ac:	bf00      	nop
 800b4ae:	370c      	adds	r7, #12
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr

0800b4b8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	60b9      	str	r1, [r7, #8]
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d101      	bne.n	800b4d0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b4cc:	2302      	movs	r3, #2
 800b4ce:	e029      	b.n	800b524 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	79fa      	ldrb	r2, [r7, #7]
 800b4d4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f000 f81f 	bl	800b52c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2200      	movs	r2, #0
 800b502:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2200      	movs	r2, #0
 800b50a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d003      	beq.n	800b51c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	68ba      	ldr	r2, [r7, #8]
 800b518:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b51c:	68f8      	ldr	r0, [r7, #12]
 800b51e:	f001 fdd3 	bl	800d0c8 <USBH_LL_Init>

  return USBH_OK;
 800b522:	2300      	movs	r3, #0
}
 800b524:	4618      	mov	r0, r3
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b534:	2300      	movs	r3, #0
 800b536:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b538:	2300      	movs	r3, #0
 800b53a:	60fb      	str	r3, [r7, #12]
 800b53c:	e009      	b.n	800b552 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	33e0      	adds	r3, #224	; 0xe0
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	4413      	add	r3, r2
 800b548:	2200      	movs	r2, #0
 800b54a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	3301      	adds	r3, #1
 800b550:	60fb      	str	r3, [r7, #12]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2b0f      	cmp	r3, #15
 800b556:	d9f2      	bls.n	800b53e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b558:	2300      	movs	r3, #0
 800b55a:	60fb      	str	r3, [r7, #12]
 800b55c:	e009      	b.n	800b572 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	4413      	add	r3, r2
 800b564:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b568:	2200      	movs	r2, #0
 800b56a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	3301      	adds	r3, #1
 800b570:	60fb      	str	r3, [r7, #12]
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b578:	d3f1      	bcc.n	800b55e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2200      	movs	r2, #0
 800b57e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2200      	movs	r2, #0
 800b584:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2201      	movs	r2, #1
 800b58a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2200      	movs	r2, #0
 800b590:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2201      	movs	r2, #1
 800b598:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2240      	movs	r2, #64	; 0x40
 800b59e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	331c      	adds	r3, #28
 800b5ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f002 fff4 	bl	800e5be <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b5dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f002 ffeb 	bl	800e5be <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f203 3326 	addw	r3, r3, #806	; 0x326
 800b5ee:	2212      	movs	r2, #18
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f002 ffe3 	bl	800e5be <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b5fe:	223e      	movs	r2, #62	; 0x3e
 800b600:	2100      	movs	r1, #0
 800b602:	4618      	mov	r0, r3
 800b604:	f002 ffdb 	bl	800e5be <memset>

  return USBH_OK;
 800b608:	2300      	movs	r3, #0
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3710      	adds	r7, #16
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}

0800b612 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b612:	b480      	push	{r7}
 800b614:	b085      	sub	sp, #20
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
 800b61a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b61c:	2300      	movs	r3, #0
 800b61e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d016      	beq.n	800b654 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d10e      	bne.n	800b64e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b636:	1c59      	adds	r1, r3, #1
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	33de      	adds	r3, #222	; 0xde
 800b642:	6839      	ldr	r1, [r7, #0]
 800b644:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b648:	2300      	movs	r3, #0
 800b64a:	73fb      	strb	r3, [r7, #15]
 800b64c:	e004      	b.n	800b658 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b64e:	2302      	movs	r3, #2
 800b650:	73fb      	strb	r3, [r7, #15]
 800b652:	e001      	b.n	800b658 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b654:	2302      	movs	r3, #2
 800b656:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b658:	7bfb      	ldrb	r3, [r7, #15]
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3714      	adds	r7, #20
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr

0800b666 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b666:	b480      	push	{r7}
 800b668:	b085      	sub	sp, #20
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
 800b66e:	460b      	mov	r3, r1
 800b670:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b672:	2300      	movs	r3, #0
 800b674:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b67c:	78fa      	ldrb	r2, [r7, #3]
 800b67e:	429a      	cmp	r2, r3
 800b680:	d204      	bcs.n	800b68c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	78fa      	ldrb	r2, [r7, #3]
 800b686:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b68a:	e001      	b.n	800b690 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b68c:	2302      	movs	r3, #2
 800b68e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b690:	7bfb      	ldrb	r3, [r7, #15]
}
 800b692:	4618      	mov	r0, r3
 800b694:	3714      	adds	r7, #20
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr

0800b69e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b69e:	b480      	push	{r7}
 800b6a0:	b087      	sub	sp, #28
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
 800b6a6:	4608      	mov	r0, r1
 800b6a8:	4611      	mov	r1, r2
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	70fb      	strb	r3, [r7, #3]
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	70bb      	strb	r3, [r7, #2]
 800b6b4:	4613      	mov	r3, r2
 800b6b6:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b6c6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b6c8:	e025      	b.n	800b716 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b6ca:	7dfb      	ldrb	r3, [r7, #23]
 800b6cc:	221a      	movs	r2, #26
 800b6ce:	fb02 f303 	mul.w	r3, r2, r3
 800b6d2:	3308      	adds	r3, #8
 800b6d4:	68fa      	ldr	r2, [r7, #12]
 800b6d6:	4413      	add	r3, r2
 800b6d8:	3302      	adds	r3, #2
 800b6da:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	795b      	ldrb	r3, [r3, #5]
 800b6e0:	78fa      	ldrb	r2, [r7, #3]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d002      	beq.n	800b6ec <USBH_FindInterface+0x4e>
 800b6e6:	78fb      	ldrb	r3, [r7, #3]
 800b6e8:	2bff      	cmp	r3, #255	; 0xff
 800b6ea:	d111      	bne.n	800b710 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b6f0:	78ba      	ldrb	r2, [r7, #2]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d002      	beq.n	800b6fc <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b6f6:	78bb      	ldrb	r3, [r7, #2]
 800b6f8:	2bff      	cmp	r3, #255	; 0xff
 800b6fa:	d109      	bne.n	800b710 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b700:	787a      	ldrb	r2, [r7, #1]
 800b702:	429a      	cmp	r2, r3
 800b704:	d002      	beq.n	800b70c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b706:	787b      	ldrb	r3, [r7, #1]
 800b708:	2bff      	cmp	r3, #255	; 0xff
 800b70a:	d101      	bne.n	800b710 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b70c:	7dfb      	ldrb	r3, [r7, #23]
 800b70e:	e006      	b.n	800b71e <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b710:	7dfb      	ldrb	r3, [r7, #23]
 800b712:	3301      	adds	r3, #1
 800b714:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b716:	7dfb      	ldrb	r3, [r7, #23]
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d9d6      	bls.n	800b6ca <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b71c:	23ff      	movs	r3, #255	; 0xff
}
 800b71e:	4618      	mov	r0, r3
 800b720:	371c      	adds	r7, #28
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr

0800b72a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800b72a:	b580      	push	{r7, lr}
 800b72c:	b082      	sub	sp, #8
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f001 fd04 	bl	800d140 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b738:	2101      	movs	r1, #1
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f001 fe1d 	bl	800d37a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b740:	2300      	movs	r3, #0
}
 800b742:	4618      	mov	r0, r3
 800b744:	3708      	adds	r7, #8
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
	...

0800b74c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b088      	sub	sp, #32
 800b750:	af04      	add	r7, sp, #16
 800b752:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b754:	2302      	movs	r3, #2
 800b756:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b758:	2300      	movs	r3, #0
 800b75a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b762:	b2db      	uxtb	r3, r3
 800b764:	2b01      	cmp	r3, #1
 800b766:	d102      	bne.n	800b76e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2203      	movs	r2, #3
 800b76c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	b2db      	uxtb	r3, r3
 800b774:	2b0b      	cmp	r3, #11
 800b776:	f200 81be 	bhi.w	800baf6 <USBH_Process+0x3aa>
 800b77a:	a201      	add	r2, pc, #4	; (adr r2, 800b780 <USBH_Process+0x34>)
 800b77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b780:	0800b7b1 	.word	0x0800b7b1
 800b784:	0800b7e3 	.word	0x0800b7e3
 800b788:	0800b84b 	.word	0x0800b84b
 800b78c:	0800ba91 	.word	0x0800ba91
 800b790:	0800baf7 	.word	0x0800baf7
 800b794:	0800b8ef 	.word	0x0800b8ef
 800b798:	0800ba37 	.word	0x0800ba37
 800b79c:	0800b925 	.word	0x0800b925
 800b7a0:	0800b945 	.word	0x0800b945
 800b7a4:	0800b965 	.word	0x0800b965
 800b7a8:	0800b9a9 	.word	0x0800b9a9
 800b7ac:	0800ba79 	.word	0x0800ba79
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	f000 819e 	beq.w	800bafa <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b7c4:	20c8      	movs	r0, #200	; 0xc8
 800b7c6:	f001 fe22 	bl	800d40e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f001 fd15 	bl	800d1fa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b7e0:	e18b      	b.n	800bafa <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d107      	bne.n	800b7fc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2202      	movs	r2, #2
 800b7f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b7fa:	e18d      	b.n	800bb18 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b802:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b806:	d914      	bls.n	800b832 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b80e:	3301      	adds	r3, #1
 800b810:	b2da      	uxtb	r2, r3
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b81e:	2b03      	cmp	r3, #3
 800b820:	d903      	bls.n	800b82a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	220d      	movs	r2, #13
 800b826:	701a      	strb	r2, [r3, #0]
      break;
 800b828:	e176      	b.n	800bb18 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2200      	movs	r2, #0
 800b82e:	701a      	strb	r2, [r3, #0]
      break;
 800b830:	e172      	b.n	800bb18 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b838:	f103 020a 	add.w	r2, r3, #10
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b842:	200a      	movs	r0, #10
 800b844:	f001 fde3 	bl	800d40e <USBH_Delay>
      break;
 800b848:	e166      	b.n	800bb18 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b850:	2b00      	cmp	r3, #0
 800b852:	d005      	beq.n	800b860 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b85a:	2104      	movs	r1, #4
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b860:	2064      	movs	r0, #100	; 0x64
 800b862:	f001 fdd4 	bl	800d40e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f001 fca0 	bl	800d1ac <USBH_LL_GetSpeed>
 800b86c:	4603      	mov	r3, r0
 800b86e:	461a      	mov	r2, r3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2205      	movs	r2, #5
 800b87a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b87c:	2100      	movs	r1, #0
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f001 faab 	bl	800cdda <USBH_AllocPipe>
 800b884:	4603      	mov	r3, r0
 800b886:	461a      	mov	r2, r3
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b88c:	2180      	movs	r1, #128	; 0x80
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f001 faa3 	bl	800cdda <USBH_AllocPipe>
 800b894:	4603      	mov	r3, r0
 800b896:	461a      	mov	r2, r3
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	7919      	ldrb	r1, [r3, #4]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b8b0:	b292      	uxth	r2, r2
 800b8b2:	9202      	str	r2, [sp, #8]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	9201      	str	r2, [sp, #4]
 800b8b8:	9300      	str	r3, [sp, #0]
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2280      	movs	r2, #128	; 0x80
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f001 fa5c 	bl	800cd7c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	7959      	ldrb	r1, [r3, #5]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b8d8:	b292      	uxth	r2, r2
 800b8da:	9202      	str	r2, [sp, #8]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	9201      	str	r2, [sp, #4]
 800b8e0:	9300      	str	r3, [sp, #0]
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f001 fa48 	bl	800cd7c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b8ec:	e114      	b.n	800bb18 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f000 f918 	bl	800bb24 <USBH_HandleEnum>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b8f8:	7bbb      	ldrb	r3, [r7, #14]
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f040 80fe 	bne.w	800bafe <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b910:	2b01      	cmp	r3, #1
 800b912:	d103      	bne.n	800b91c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2208      	movs	r2, #8
 800b918:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b91a:	e0f0      	b.n	800bafe <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2207      	movs	r2, #7
 800b920:	701a      	strb	r2, [r3, #0]
      break;
 800b922:	e0ec      	b.n	800bafe <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	f000 80e9 	beq.w	800bb02 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b936:	2101      	movs	r1, #1
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2208      	movs	r2, #8
 800b940:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b942:	e0de      	b.n	800bb02 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	4619      	mov	r1, r3
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f000 fc3f 	bl	800c1d2 <USBH_SetCfg>
 800b954:	4603      	mov	r3, r0
 800b956:	2b00      	cmp	r3, #0
 800b958:	f040 80d5 	bne.w	800bb06 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2209      	movs	r2, #9
 800b960:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b962:	e0d0      	b.n	800bb06 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b96a:	f003 0320 	and.w	r3, r3, #32
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d016      	beq.n	800b9a0 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b972:	2101      	movs	r1, #1
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 fc4f 	bl	800c218 <USBH_SetFeature>
 800b97a:	4603      	mov	r3, r0
 800b97c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b97e:	7bbb      	ldrb	r3, [r7, #14]
 800b980:	b2db      	uxtb	r3, r3
 800b982:	2b00      	cmp	r3, #0
 800b984:	d103      	bne.n	800b98e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	220a      	movs	r2, #10
 800b98a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b98c:	e0bd      	b.n	800bb0a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800b98e:	7bbb      	ldrb	r3, [r7, #14]
 800b990:	b2db      	uxtb	r3, r3
 800b992:	2b03      	cmp	r3, #3
 800b994:	f040 80b9 	bne.w	800bb0a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	220a      	movs	r2, #10
 800b99c:	701a      	strb	r2, [r3, #0]
      break;
 800b99e:	e0b4      	b.n	800bb0a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	220a      	movs	r2, #10
 800b9a4:	701a      	strb	r2, [r3, #0]
      break;
 800b9a6:	e0b0      	b.n	800bb0a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	f000 80ad 	beq.w	800bb0e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b9bc:	2300      	movs	r3, #0
 800b9be:	73fb      	strb	r3, [r7, #15]
 800b9c0:	e016      	b.n	800b9f0 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b9c2:	7bfa      	ldrb	r2, [r7, #15]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	32de      	adds	r2, #222	; 0xde
 800b9c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9cc:	791a      	ldrb	r2, [r3, #4]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d108      	bne.n	800b9ea <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b9d8:	7bfa      	ldrb	r2, [r7, #15]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	32de      	adds	r2, #222	; 0xde
 800b9de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b9e8:	e005      	b.n	800b9f6 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b9ea:	7bfb      	ldrb	r3, [r7, #15]
 800b9ec:	3301      	adds	r3, #1
 800b9ee:	73fb      	strb	r3, [r7, #15]
 800b9f0:	7bfb      	ldrb	r3, [r7, #15]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d0e5      	beq.n	800b9c2 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d016      	beq.n	800ba2e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba06:	689b      	ldr	r3, [r3, #8]
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	4798      	blx	r3
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d109      	bne.n	800ba26 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2206      	movs	r2, #6
 800ba16:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba1e:	2103      	movs	r1, #3
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ba24:	e073      	b.n	800bb0e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	220d      	movs	r2, #13
 800ba2a:	701a      	strb	r2, [r3, #0]
      break;
 800ba2c:	e06f      	b.n	800bb0e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	220d      	movs	r2, #13
 800ba32:	701a      	strb	r2, [r3, #0]
      break;
 800ba34:	e06b      	b.n	800bb0e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d017      	beq.n	800ba70 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba46:	691b      	ldr	r3, [r3, #16]
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	4798      	blx	r3
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ba50:	7bbb      	ldrb	r3, [r7, #14]
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d103      	bne.n	800ba60 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	220b      	movs	r2, #11
 800ba5c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ba5e:	e058      	b.n	800bb12 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800ba60:	7bbb      	ldrb	r3, [r7, #14]
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	2b02      	cmp	r3, #2
 800ba66:	d154      	bne.n	800bb12 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	220d      	movs	r2, #13
 800ba6c:	701a      	strb	r2, [r3, #0]
      break;
 800ba6e:	e050      	b.n	800bb12 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	220d      	movs	r2, #13
 800ba74:	701a      	strb	r2, [r3, #0]
      break;
 800ba76:	e04c      	b.n	800bb12 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d049      	beq.n	800bb16 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba88:	695b      	ldr	r3, [r3, #20]
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	4798      	blx	r3
      }
      break;
 800ba8e:	e042      	b.n	800bb16 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2200      	movs	r2, #0
 800ba94:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f7ff fd47 	bl	800b52c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d009      	beq.n	800babc <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800baae:	68db      	ldr	r3, [r3, #12]
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2200      	movs	r2, #0
 800bab8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d005      	beq.n	800bad2 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bacc:	2105      	movs	r1, #5
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	2b01      	cmp	r3, #1
 800badc:	d107      	bne.n	800baee <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f7ff fe1f 	bl	800b72a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800baec:	e014      	b.n	800bb18 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f001 fb26 	bl	800d140 <USBH_LL_Start>
      break;
 800baf4:	e010      	b.n	800bb18 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800baf6:	bf00      	nop
 800baf8:	e00e      	b.n	800bb18 <USBH_Process+0x3cc>
      break;
 800bafa:	bf00      	nop
 800bafc:	e00c      	b.n	800bb18 <USBH_Process+0x3cc>
      break;
 800bafe:	bf00      	nop
 800bb00:	e00a      	b.n	800bb18 <USBH_Process+0x3cc>
    break;
 800bb02:	bf00      	nop
 800bb04:	e008      	b.n	800bb18 <USBH_Process+0x3cc>
      break;
 800bb06:	bf00      	nop
 800bb08:	e006      	b.n	800bb18 <USBH_Process+0x3cc>
      break;
 800bb0a:	bf00      	nop
 800bb0c:	e004      	b.n	800bb18 <USBH_Process+0x3cc>
      break;
 800bb0e:	bf00      	nop
 800bb10:	e002      	b.n	800bb18 <USBH_Process+0x3cc>
      break;
 800bb12:	bf00      	nop
 800bb14:	e000      	b.n	800bb18 <USBH_Process+0x3cc>
      break;
 800bb16:	bf00      	nop
  }
  return USBH_OK;
 800bb18:	2300      	movs	r3, #0
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3710      	adds	r7, #16
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop

0800bb24 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b088      	sub	sp, #32
 800bb28:	af04      	add	r7, sp, #16
 800bb2a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800bb30:	2301      	movs	r3, #1
 800bb32:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	785b      	ldrb	r3, [r3, #1]
 800bb38:	2b07      	cmp	r3, #7
 800bb3a:	f200 81c1 	bhi.w	800bec0 <USBH_HandleEnum+0x39c>
 800bb3e:	a201      	add	r2, pc, #4	; (adr r2, 800bb44 <USBH_HandleEnum+0x20>)
 800bb40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb44:	0800bb65 	.word	0x0800bb65
 800bb48:	0800bc23 	.word	0x0800bc23
 800bb4c:	0800bc8d 	.word	0x0800bc8d
 800bb50:	0800bd1b 	.word	0x0800bd1b
 800bb54:	0800bd85 	.word	0x0800bd85
 800bb58:	0800bdf5 	.word	0x0800bdf5
 800bb5c:	0800be3b 	.word	0x0800be3b
 800bb60:	0800be81 	.word	0x0800be81
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800bb64:	2108      	movs	r1, #8
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 fa50 	bl	800c00c <USBH_Get_DevDesc>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bb70:	7bbb      	ldrb	r3, [r7, #14]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d130      	bne.n	800bbd8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2201      	movs	r2, #1
 800bb84:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	7919      	ldrb	r1, [r3, #4]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bb9a:	b292      	uxth	r2, r2
 800bb9c:	9202      	str	r2, [sp, #8]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	9201      	str	r2, [sp, #4]
 800bba2:	9300      	str	r3, [sp, #0]
 800bba4:	4603      	mov	r3, r0
 800bba6:	2280      	movs	r2, #128	; 0x80
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f001 f8e7 	bl	800cd7c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	7959      	ldrb	r1, [r3, #5]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bbc2:	b292      	uxth	r2, r2
 800bbc4:	9202      	str	r2, [sp, #8]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	9201      	str	r2, [sp, #4]
 800bbca:	9300      	str	r3, [sp, #0]
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2200      	movs	r2, #0
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f001 f8d3 	bl	800cd7c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bbd6:	e175      	b.n	800bec4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bbd8:	7bbb      	ldrb	r3, [r7, #14]
 800bbda:	2b03      	cmp	r3, #3
 800bbdc:	f040 8172 	bne.w	800bec4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	b2da      	uxtb	r2, r3
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bbf6:	2b03      	cmp	r3, #3
 800bbf8:	d903      	bls.n	800bc02 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	220d      	movs	r2, #13
 800bbfe:	701a      	strb	r2, [r3, #0]
      break;
 800bc00:	e160      	b.n	800bec4 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	795b      	ldrb	r3, [r3, #5]
 800bc06:	4619      	mov	r1, r3
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f001 f907 	bl	800ce1c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	791b      	ldrb	r3, [r3, #4]
 800bc12:	4619      	mov	r1, r3
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f001 f901 	bl	800ce1c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	701a      	strb	r2, [r3, #0]
      break;
 800bc20:	e150      	b.n	800bec4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800bc22:	2112      	movs	r1, #18
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f000 f9f1 	bl	800c00c <USBH_Get_DevDesc>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bc2e:	7bbb      	ldrb	r3, [r7, #14]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d103      	bne.n	800bc3c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2202      	movs	r2, #2
 800bc38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bc3a:	e145      	b.n	800bec8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bc3c:	7bbb      	ldrb	r3, [r7, #14]
 800bc3e:	2b03      	cmp	r3, #3
 800bc40:	f040 8142 	bne.w	800bec8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	b2da      	uxtb	r2, r3
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bc5a:	2b03      	cmp	r3, #3
 800bc5c:	d903      	bls.n	800bc66 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	220d      	movs	r2, #13
 800bc62:	701a      	strb	r2, [r3, #0]
      break;
 800bc64:	e130      	b.n	800bec8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	795b      	ldrb	r3, [r3, #5]
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f001 f8d5 	bl	800ce1c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	791b      	ldrb	r3, [r3, #4]
 800bc76:	4619      	mov	r1, r3
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f001 f8cf 	bl	800ce1c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2200      	movs	r2, #0
 800bc82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2200      	movs	r2, #0
 800bc88:	701a      	strb	r2, [r3, #0]
      break;
 800bc8a:	e11d      	b.n	800bec8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800bc8c:	2101      	movs	r1, #1
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f000 fa7b 	bl	800c18a <USBH_SetAddress>
 800bc94:	4603      	mov	r3, r0
 800bc96:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bc98:	7bbb      	ldrb	r3, [r7, #14]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d132      	bne.n	800bd04 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800bc9e:	2002      	movs	r0, #2
 800bca0:	f001 fbb5 	bl	800d40e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2201      	movs	r2, #1
 800bca8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2203      	movs	r2, #3
 800bcb0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	7919      	ldrb	r1, [r3, #4]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bcc2:	687a      	ldr	r2, [r7, #4]
 800bcc4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bcc6:	b292      	uxth	r2, r2
 800bcc8:	9202      	str	r2, [sp, #8]
 800bcca:	2200      	movs	r2, #0
 800bccc:	9201      	str	r2, [sp, #4]
 800bcce:	9300      	str	r3, [sp, #0]
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2280      	movs	r2, #128	; 0x80
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f001 f851 	bl	800cd7c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	7959      	ldrb	r1, [r3, #5]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bcee:	b292      	uxth	r2, r2
 800bcf0:	9202      	str	r2, [sp, #8]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	9201      	str	r2, [sp, #4]
 800bcf6:	9300      	str	r3, [sp, #0]
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f001 f83d 	bl	800cd7c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bd02:	e0e3      	b.n	800becc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bd04:	7bbb      	ldrb	r3, [r7, #14]
 800bd06:	2b03      	cmp	r3, #3
 800bd08:	f040 80e0 	bne.w	800becc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	220d      	movs	r2, #13
 800bd10:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2200      	movs	r2, #0
 800bd16:	705a      	strb	r2, [r3, #1]
      break;
 800bd18:	e0d8      	b.n	800becc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800bd1a:	2109      	movs	r1, #9
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f000 f9a1 	bl	800c064 <USBH_Get_CfgDesc>
 800bd22:	4603      	mov	r3, r0
 800bd24:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bd26:	7bbb      	ldrb	r3, [r7, #14]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d103      	bne.n	800bd34 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2204      	movs	r2, #4
 800bd30:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bd32:	e0cd      	b.n	800bed0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bd34:	7bbb      	ldrb	r3, [r7, #14]
 800bd36:	2b03      	cmp	r3, #3
 800bd38:	f040 80ca 	bne.w	800bed0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd42:	3301      	adds	r3, #1
 800bd44:	b2da      	uxtb	r2, r3
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd52:	2b03      	cmp	r3, #3
 800bd54:	d903      	bls.n	800bd5e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	220d      	movs	r2, #13
 800bd5a:	701a      	strb	r2, [r3, #0]
      break;
 800bd5c:	e0b8      	b.n	800bed0 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	795b      	ldrb	r3, [r3, #5]
 800bd62:	4619      	mov	r1, r3
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f001 f859 	bl	800ce1c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	791b      	ldrb	r3, [r3, #4]
 800bd6e:	4619      	mov	r1, r3
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f001 f853 	bl	800ce1c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	701a      	strb	r2, [r3, #0]
      break;
 800bd82:	e0a5      	b.n	800bed0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f000 f969 	bl	800c064 <USBH_Get_CfgDesc>
 800bd92:	4603      	mov	r3, r0
 800bd94:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bd96:	7bbb      	ldrb	r3, [r7, #14]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d103      	bne.n	800bda4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2205      	movs	r2, #5
 800bda0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bda2:	e097      	b.n	800bed4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bda4:	7bbb      	ldrb	r3, [r7, #14]
 800bda6:	2b03      	cmp	r3, #3
 800bda8:	f040 8094 	bne.w	800bed4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	b2da      	uxtb	r2, r3
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bdc2:	2b03      	cmp	r3, #3
 800bdc4:	d903      	bls.n	800bdce <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	220d      	movs	r2, #13
 800bdca:	701a      	strb	r2, [r3, #0]
      break;
 800bdcc:	e082      	b.n	800bed4 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	795b      	ldrb	r3, [r3, #5]
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f001 f821 	bl	800ce1c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	791b      	ldrb	r3, [r3, #4]
 800bdde:	4619      	mov	r1, r3
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f001 f81b 	bl	800ce1c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2200      	movs	r2, #0
 800bdea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	701a      	strb	r2, [r3, #0]
      break;
 800bdf2:	e06f      	b.n	800bed4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d019      	beq.n	800be32 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800be0a:	23ff      	movs	r3, #255	; 0xff
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f000 f953 	bl	800c0b8 <USBH_Get_StringDesc>
 800be12:	4603      	mov	r3, r0
 800be14:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800be16:	7bbb      	ldrb	r3, [r7, #14]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d103      	bne.n	800be24 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2206      	movs	r2, #6
 800be20:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800be22:	e059      	b.n	800bed8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800be24:	7bbb      	ldrb	r3, [r7, #14]
 800be26:	2b03      	cmp	r3, #3
 800be28:	d156      	bne.n	800bed8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2206      	movs	r2, #6
 800be2e:	705a      	strb	r2, [r3, #1]
      break;
 800be30:	e052      	b.n	800bed8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2206      	movs	r2, #6
 800be36:	705a      	strb	r2, [r3, #1]
      break;
 800be38:	e04e      	b.n	800bed8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800be40:	2b00      	cmp	r3, #0
 800be42:	d019      	beq.n	800be78 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800be50:	23ff      	movs	r3, #255	; 0xff
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 f930 	bl	800c0b8 <USBH_Get_StringDesc>
 800be58:	4603      	mov	r3, r0
 800be5a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800be5c:	7bbb      	ldrb	r3, [r7, #14]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d103      	bne.n	800be6a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2207      	movs	r2, #7
 800be66:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800be68:	e038      	b.n	800bedc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800be6a:	7bbb      	ldrb	r3, [r7, #14]
 800be6c:	2b03      	cmp	r3, #3
 800be6e:	d135      	bne.n	800bedc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2207      	movs	r2, #7
 800be74:	705a      	strb	r2, [r3, #1]
      break;
 800be76:	e031      	b.n	800bedc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2207      	movs	r2, #7
 800be7c:	705a      	strb	r2, [r3, #1]
      break;
 800be7e:	e02d      	b.n	800bedc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800be86:	2b00      	cmp	r3, #0
 800be88:	d017      	beq.n	800beba <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800be96:	23ff      	movs	r3, #255	; 0xff
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 f90d 	bl	800c0b8 <USBH_Get_StringDesc>
 800be9e:	4603      	mov	r3, r0
 800bea0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bea2:	7bbb      	ldrb	r3, [r7, #14]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d102      	bne.n	800beae <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800bea8:	2300      	movs	r3, #0
 800beaa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800beac:	e018      	b.n	800bee0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800beae:	7bbb      	ldrb	r3, [r7, #14]
 800beb0:	2b03      	cmp	r3, #3
 800beb2:	d115      	bne.n	800bee0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800beb4:	2300      	movs	r3, #0
 800beb6:	73fb      	strb	r3, [r7, #15]
      break;
 800beb8:	e012      	b.n	800bee0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800beba:	2300      	movs	r3, #0
 800bebc:	73fb      	strb	r3, [r7, #15]
      break;
 800bebe:	e00f      	b.n	800bee0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800bec0:	bf00      	nop
 800bec2:	e00e      	b.n	800bee2 <USBH_HandleEnum+0x3be>
      break;
 800bec4:	bf00      	nop
 800bec6:	e00c      	b.n	800bee2 <USBH_HandleEnum+0x3be>
      break;
 800bec8:	bf00      	nop
 800beca:	e00a      	b.n	800bee2 <USBH_HandleEnum+0x3be>
      break;
 800becc:	bf00      	nop
 800bece:	e008      	b.n	800bee2 <USBH_HandleEnum+0x3be>
      break;
 800bed0:	bf00      	nop
 800bed2:	e006      	b.n	800bee2 <USBH_HandleEnum+0x3be>
      break;
 800bed4:	bf00      	nop
 800bed6:	e004      	b.n	800bee2 <USBH_HandleEnum+0x3be>
      break;
 800bed8:	bf00      	nop
 800beda:	e002      	b.n	800bee2 <USBH_HandleEnum+0x3be>
      break;
 800bedc:	bf00      	nop
 800bede:	e000      	b.n	800bee2 <USBH_HandleEnum+0x3be>
      break;
 800bee0:	bf00      	nop
  }
  return Status;
 800bee2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3710      	adds	r7, #16
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}

0800beec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800beec:	b480      	push	{r7}
 800beee:	b083      	sub	sp, #12
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	683a      	ldr	r2, [r7, #0]
 800befa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800befe:	bf00      	nop
 800bf00:	370c      	adds	r7, #12
 800bf02:	46bd      	mov	sp, r7
 800bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf08:	4770      	bx	lr

0800bf0a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800bf0a:	b580      	push	{r7, lr}
 800bf0c:	b082      	sub	sp, #8
 800bf0e:	af00      	add	r7, sp, #0
 800bf10:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bf18:	1c5a      	adds	r2, r3, #1
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f000 f804 	bl	800bf2e <USBH_HandleSof>
}
 800bf26:	bf00      	nop
 800bf28:	3708      	adds	r7, #8
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}

0800bf2e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800bf2e:	b580      	push	{r7, lr}
 800bf30:	b082      	sub	sp, #8
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	2b0b      	cmp	r3, #11
 800bf3e:	d10a      	bne.n	800bf56 <USBH_HandleSof+0x28>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d005      	beq.n	800bf56 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf50:	699b      	ldr	r3, [r3, #24]
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	4798      	blx	r3
  }
}
 800bf56:	bf00      	nop
 800bf58:	3708      	adds	r7, #8
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}

0800bf5e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800bf5e:	b480      	push	{r7}
 800bf60:	b083      	sub	sp, #12
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2201      	movs	r2, #1
 800bf6a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800bf6e:	bf00      	nop
}
 800bf70:	370c      	adds	r7, #12
 800bf72:	46bd      	mov	sp, r7
 800bf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf78:	4770      	bx	lr

0800bf7a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800bf7a:	b480      	push	{r7}
 800bf7c:	b083      	sub	sp, #12
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2200      	movs	r2, #0
 800bf86:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800bf8a:	bf00      	nop
}
 800bf8c:	370c      	adds	r7, #12
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf94:	4770      	bx	lr

0800bf96 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800bf96:	b480      	push	{r7}
 800bf98:	b083      	sub	sp, #12
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bfb6:	2300      	movs	r3, #0
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	370c      	adds	r7, #12
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2201      	movs	r2, #1
 800bfd0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f001 f8c6 	bl	800d176 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	791b      	ldrb	r3, [r3, #4]
 800bfee:	4619      	mov	r1, r3
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f000 ff13 	bl	800ce1c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	795b      	ldrb	r3, [r3, #5]
 800bffa:	4619      	mov	r1, r3
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 ff0d 	bl	800ce1c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c002:	2300      	movs	r3, #0
}
 800c004:	4618      	mov	r0, r3
 800c006:	3708      	adds	r7, #8
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b086      	sub	sp, #24
 800c010:	af02      	add	r7, sp, #8
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	460b      	mov	r3, r1
 800c016:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800c018:	887b      	ldrh	r3, [r7, #2]
 800c01a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c01e:	d901      	bls.n	800c024 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800c020:	2303      	movs	r3, #3
 800c022:	e01b      	b.n	800c05c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c02a:	887b      	ldrh	r3, [r7, #2]
 800c02c:	9300      	str	r3, [sp, #0]
 800c02e:	4613      	mov	r3, r2
 800c030:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c034:	2100      	movs	r1, #0
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 f872 	bl	800c120 <USBH_GetDescriptor>
 800c03c:	4603      	mov	r3, r0
 800c03e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800c040:	7bfb      	ldrb	r3, [r7, #15]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d109      	bne.n	800c05a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c04c:	887a      	ldrh	r2, [r7, #2]
 800c04e:	4619      	mov	r1, r3
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f000 f929 	bl	800c2a8 <USBH_ParseDevDesc>
 800c056:	4603      	mov	r3, r0
 800c058:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c05a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3710      	adds	r7, #16
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b086      	sub	sp, #24
 800c068:	af02      	add	r7, sp, #8
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	460b      	mov	r3, r1
 800c06e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	331c      	adds	r3, #28
 800c074:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800c076:	887b      	ldrh	r3, [r7, #2]
 800c078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c07c:	d901      	bls.n	800c082 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800c07e:	2303      	movs	r3, #3
 800c080:	e016      	b.n	800c0b0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c082:	887b      	ldrh	r3, [r7, #2]
 800c084:	9300      	str	r3, [sp, #0]
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c08c:	2100      	movs	r1, #0
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 f846 	bl	800c120 <USBH_GetDescriptor>
 800c094:	4603      	mov	r3, r0
 800c096:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c098:	7bfb      	ldrb	r3, [r7, #15]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d107      	bne.n	800c0ae <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c09e:	887b      	ldrh	r3, [r7, #2]
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	68b9      	ldr	r1, [r7, #8]
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f000 f9b3 	bl	800c410 <USBH_ParseCfgDesc>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c0ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3710      	adds	r7, #16
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}

0800c0b8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b088      	sub	sp, #32
 800c0bc:	af02      	add	r7, sp, #8
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	607a      	str	r2, [r7, #4]
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	72fb      	strb	r3, [r7, #11]
 800c0c8:	4613      	mov	r3, r2
 800c0ca:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800c0cc:	893b      	ldrh	r3, [r7, #8]
 800c0ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0d2:	d802      	bhi.n	800c0da <USBH_Get_StringDesc+0x22>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d101      	bne.n	800c0de <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800c0da:	2303      	movs	r3, #3
 800c0dc:	e01c      	b.n	800c118 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800c0de:	7afb      	ldrb	r3, [r7, #11]
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c0e6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c0ee:	893b      	ldrh	r3, [r7, #8]
 800c0f0:	9300      	str	r3, [sp, #0]
 800c0f2:	460b      	mov	r3, r1
 800c0f4:	2100      	movs	r1, #0
 800c0f6:	68f8      	ldr	r0, [r7, #12]
 800c0f8:	f000 f812 	bl	800c120 <USBH_GetDescriptor>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c100:	7dfb      	ldrb	r3, [r7, #23]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d107      	bne.n	800c116 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c10c:	893a      	ldrh	r2, [r7, #8]
 800c10e:	6879      	ldr	r1, [r7, #4]
 800c110:	4618      	mov	r0, r3
 800c112:	f000 fb93 	bl	800c83c <USBH_ParseStringDesc>
  }

  return status;
 800c116:	7dfb      	ldrb	r3, [r7, #23]
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3718      	adds	r7, #24
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	607b      	str	r3, [r7, #4]
 800c12a:	460b      	mov	r3, r1
 800c12c:	72fb      	strb	r3, [r7, #11]
 800c12e:	4613      	mov	r3, r2
 800c130:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	789b      	ldrb	r3, [r3, #2]
 800c136:	2b01      	cmp	r3, #1
 800c138:	d11c      	bne.n	800c174 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c13a:	7afb      	ldrb	r3, [r7, #11]
 800c13c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c140:	b2da      	uxtb	r2, r3
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2206      	movs	r2, #6
 800c14a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	893a      	ldrh	r2, [r7, #8]
 800c150:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c152:	893b      	ldrh	r3, [r7, #8]
 800c154:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c158:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c15c:	d104      	bne.n	800c168 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f240 4209 	movw	r2, #1033	; 0x409
 800c164:	829a      	strh	r2, [r3, #20]
 800c166:	e002      	b.n	800c16e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2200      	movs	r2, #0
 800c16c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	8b3a      	ldrh	r2, [r7, #24]
 800c172:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c174:	8b3b      	ldrh	r3, [r7, #24]
 800c176:	461a      	mov	r2, r3
 800c178:	6879      	ldr	r1, [r7, #4]
 800c17a:	68f8      	ldr	r0, [r7, #12]
 800c17c:	f000 fbac 	bl	800c8d8 <USBH_CtlReq>
 800c180:	4603      	mov	r3, r0
}
 800c182:	4618      	mov	r0, r3
 800c184:	3710      	adds	r7, #16
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}

0800c18a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c18a:	b580      	push	{r7, lr}
 800c18c:	b082      	sub	sp, #8
 800c18e:	af00      	add	r7, sp, #0
 800c190:	6078      	str	r0, [r7, #4]
 800c192:	460b      	mov	r3, r1
 800c194:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	789b      	ldrb	r3, [r3, #2]
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	d10f      	bne.n	800c1be <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2205      	movs	r2, #5
 800c1a8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c1aa:	78fb      	ldrb	r3, [r7, #3]
 800c1ac:	b29a      	uxth	r2, r3
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c1be:	2200      	movs	r2, #0
 800c1c0:	2100      	movs	r1, #0
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 fb88 	bl	800c8d8 <USBH_CtlReq>
 800c1c8:	4603      	mov	r3, r0
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3708      	adds	r7, #8
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}

0800c1d2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c1d2:	b580      	push	{r7, lr}
 800c1d4:	b082      	sub	sp, #8
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	6078      	str	r0, [r7, #4]
 800c1da:	460b      	mov	r3, r1
 800c1dc:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	789b      	ldrb	r3, [r3, #2]
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d10e      	bne.n	800c204 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2209      	movs	r2, #9
 800c1f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	887a      	ldrh	r2, [r7, #2]
 800c1f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2200      	movs	r2, #0
 800c202:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c204:	2200      	movs	r2, #0
 800c206:	2100      	movs	r1, #0
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f000 fb65 	bl	800c8d8 <USBH_CtlReq>
 800c20e:	4603      	mov	r3, r0
}
 800c210:	4618      	mov	r0, r3
 800c212:	3708      	adds	r7, #8
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}

0800c218 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	460b      	mov	r3, r1
 800c222:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	789b      	ldrb	r3, [r3, #2]
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d10f      	bne.n	800c24c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2200      	movs	r2, #0
 800c230:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2203      	movs	r2, #3
 800c236:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c238:	78fb      	ldrb	r3, [r7, #3]
 800c23a:	b29a      	uxth	r2, r3
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2200      	movs	r2, #0
 800c244:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2200      	movs	r2, #0
 800c24a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c24c:	2200      	movs	r2, #0
 800c24e:	2100      	movs	r1, #0
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f000 fb41 	bl	800c8d8 <USBH_CtlReq>
 800c256:	4603      	mov	r3, r0
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3708      	adds	r7, #8
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b082      	sub	sp, #8
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	460b      	mov	r3, r1
 800c26a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	789b      	ldrb	r3, [r3, #2]
 800c270:	2b01      	cmp	r3, #1
 800c272:	d10f      	bne.n	800c294 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2202      	movs	r2, #2
 800c278:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2201      	movs	r2, #1
 800c27e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2200      	movs	r2, #0
 800c284:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c286:	78fb      	ldrb	r3, [r7, #3]
 800c288:	b29a      	uxth	r2, r3
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2200      	movs	r2, #0
 800c292:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c294:	2200      	movs	r2, #0
 800c296:	2100      	movs	r1, #0
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f000 fb1d 	bl	800c8d8 <USBH_CtlReq>
 800c29e:	4603      	mov	r3, r0
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b087      	sub	sp, #28
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	60f8      	str	r0, [r7, #12]
 800c2b0:	60b9      	str	r1, [r7, #8]
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f203 3326 	addw	r3, r3, #806	; 0x326
 800c2bc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d101      	bne.n	800c2cc <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800c2c8:	2302      	movs	r3, #2
 800c2ca:	e098      	b.n	800c3fe <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	781a      	ldrb	r2, [r3, #0]
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	785a      	ldrb	r2, [r3, #1]
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	3302      	adds	r3, #2
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	b29a      	uxth	r2, r3
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	3303      	adds	r3, #3
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	b29b      	uxth	r3, r3
 800c2ec:	021b      	lsls	r3, r3, #8
 800c2ee:	b29b      	uxth	r3, r3
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	b29a      	uxth	r2, r3
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	791a      	ldrb	r2, [r3, #4]
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	795a      	ldrb	r2, [r3, #5]
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	799a      	ldrb	r2, [r3, #6]
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	79da      	ldrb	r2, [r3, #7]
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d004      	beq.n	800c32c <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d11b      	bne.n	800c364 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	79db      	ldrb	r3, [r3, #7]
 800c330:	2b20      	cmp	r3, #32
 800c332:	dc0f      	bgt.n	800c354 <USBH_ParseDevDesc+0xac>
 800c334:	2b08      	cmp	r3, #8
 800c336:	db0f      	blt.n	800c358 <USBH_ParseDevDesc+0xb0>
 800c338:	3b08      	subs	r3, #8
 800c33a:	4a34      	ldr	r2, [pc, #208]	; (800c40c <USBH_ParseDevDesc+0x164>)
 800c33c:	fa22 f303 	lsr.w	r3, r2, r3
 800c340:	f003 0301 	and.w	r3, r3, #1
 800c344:	2b00      	cmp	r3, #0
 800c346:	bf14      	ite	ne
 800c348:	2301      	movne	r3, #1
 800c34a:	2300      	moveq	r3, #0
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d106      	bne.n	800c360 <USBH_ParseDevDesc+0xb8>
 800c352:	e001      	b.n	800c358 <USBH_ParseDevDesc+0xb0>
 800c354:	2b40      	cmp	r3, #64	; 0x40
 800c356:	d003      	beq.n	800c360 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	2208      	movs	r2, #8
 800c35c:	71da      	strb	r2, [r3, #7]
        break;
 800c35e:	e000      	b.n	800c362 <USBH_ParseDevDesc+0xba>
        break;
 800c360:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800c362:	e00e      	b.n	800c382 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c36a:	2b02      	cmp	r3, #2
 800c36c:	d107      	bne.n	800c37e <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	79db      	ldrb	r3, [r3, #7]
 800c372:	2b08      	cmp	r3, #8
 800c374:	d005      	beq.n	800c382 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	2208      	movs	r2, #8
 800c37a:	71da      	strb	r2, [r3, #7]
 800c37c:	e001      	b.n	800c382 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c37e:	2303      	movs	r3, #3
 800c380:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800c382:	88fb      	ldrh	r3, [r7, #6]
 800c384:	2b08      	cmp	r3, #8
 800c386:	d939      	bls.n	800c3fc <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	3308      	adds	r3, #8
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	b29a      	uxth	r2, r3
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	3309      	adds	r3, #9
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	b29b      	uxth	r3, r3
 800c398:	021b      	lsls	r3, r3, #8
 800c39a:	b29b      	uxth	r3, r3
 800c39c:	4313      	orrs	r3, r2
 800c39e:	b29a      	uxth	r2, r3
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	330a      	adds	r3, #10
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	b29a      	uxth	r2, r3
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	330b      	adds	r3, #11
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	021b      	lsls	r3, r3, #8
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	b29a      	uxth	r2, r3
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	330c      	adds	r3, #12
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	b29a      	uxth	r2, r3
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	330d      	adds	r3, #13
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	021b      	lsls	r3, r3, #8
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	4313      	orrs	r3, r2
 800c3d6:	b29a      	uxth	r2, r3
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	7b9a      	ldrb	r2, [r3, #14]
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	7bda      	ldrb	r2, [r3, #15]
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	7c1a      	ldrb	r2, [r3, #16]
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	7c5a      	ldrb	r2, [r3, #17]
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800c3fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	371c      	adds	r7, #28
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr
 800c40a:	bf00      	nop
 800c40c:	01000101 	.word	0x01000101

0800c410 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b08c      	sub	sp, #48	; 0x30
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	4613      	mov	r3, r2
 800c41c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c424:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c426:	2300      	movs	r3, #0
 800c428:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c42c:	2300      	movs	r3, #0
 800c42e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c432:	2300      	movs	r3, #0
 800c434:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d101      	bne.n	800c442 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800c43e:	2302      	movs	r3, #2
 800c440:	e0db      	b.n	800c5fa <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	781a      	ldrb	r2, [r3, #0]
 800c44a:	6a3b      	ldr	r3, [r7, #32]
 800c44c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	785a      	ldrb	r2, [r3, #1]
 800c452:	6a3b      	ldr	r3, [r7, #32]
 800c454:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	3302      	adds	r3, #2
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	b29a      	uxth	r2, r3
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	3303      	adds	r3, #3
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	b29b      	uxth	r3, r3
 800c466:	021b      	lsls	r3, r3, #8
 800c468:	b29b      	uxth	r3, r3
 800c46a:	4313      	orrs	r3, r2
 800c46c:	b29b      	uxth	r3, r3
 800c46e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c472:	bf28      	it	cs
 800c474:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800c478:	b29a      	uxth	r2, r3
 800c47a:	6a3b      	ldr	r3, [r7, #32]
 800c47c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	791a      	ldrb	r2, [r3, #4]
 800c482:	6a3b      	ldr	r3, [r7, #32]
 800c484:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	795a      	ldrb	r2, [r3, #5]
 800c48a:	6a3b      	ldr	r3, [r7, #32]
 800c48c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	799a      	ldrb	r2, [r3, #6]
 800c492:	6a3b      	ldr	r3, [r7, #32]
 800c494:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	79da      	ldrb	r2, [r3, #7]
 800c49a:	6a3b      	ldr	r3, [r7, #32]
 800c49c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	7a1a      	ldrb	r2, [r3, #8]
 800c4a2:	6a3b      	ldr	r3, [r7, #32]
 800c4a4:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800c4a6:	6a3b      	ldr	r3, [r7, #32]
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	2b09      	cmp	r3, #9
 800c4ac:	d002      	beq.n	800c4b4 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c4ae:	6a3b      	ldr	r3, [r7, #32]
 800c4b0:	2209      	movs	r2, #9
 800c4b2:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c4b4:	88fb      	ldrh	r3, [r7, #6]
 800c4b6:	2b09      	cmp	r3, #9
 800c4b8:	f240 809d 	bls.w	800c5f6 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800c4bc:	2309      	movs	r3, #9
 800c4be:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c4c4:	e081      	b.n	800c5ca <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c4c6:	f107 0316 	add.w	r3, r7, #22
 800c4ca:	4619      	mov	r1, r3
 800c4cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4ce:	f000 f9e8 	bl	800c8a2 <USBH_GetNextDesc>
 800c4d2:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d6:	785b      	ldrb	r3, [r3, #1]
 800c4d8:	2b04      	cmp	r3, #4
 800c4da:	d176      	bne.n	800c5ca <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	2b09      	cmp	r3, #9
 800c4e2:	d002      	beq.n	800c4ea <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e6:	2209      	movs	r2, #9
 800c4e8:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c4ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4ee:	221a      	movs	r2, #26
 800c4f0:	fb02 f303 	mul.w	r3, r2, r3
 800c4f4:	3308      	adds	r3, #8
 800c4f6:	6a3a      	ldr	r2, [r7, #32]
 800c4f8:	4413      	add	r3, r2
 800c4fa:	3302      	adds	r3, #2
 800c4fc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c4fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c500:	69f8      	ldr	r0, [r7, #28]
 800c502:	f000 f87e 	bl	800c602 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c506:	2300      	movs	r3, #0
 800c508:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c50c:	2300      	movs	r3, #0
 800c50e:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c510:	e043      	b.n	800c59a <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c512:	f107 0316 	add.w	r3, r7, #22
 800c516:	4619      	mov	r1, r3
 800c518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c51a:	f000 f9c2 	bl	800c8a2 <USBH_GetNextDesc>
 800c51e:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c522:	785b      	ldrb	r3, [r3, #1]
 800c524:	2b05      	cmp	r3, #5
 800c526:	d138      	bne.n	800c59a <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800c528:	69fb      	ldr	r3, [r7, #28]
 800c52a:	795b      	ldrb	r3, [r3, #5]
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d113      	bne.n	800c558 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c530:	69fb      	ldr	r3, [r7, #28]
 800c532:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800c534:	2b02      	cmp	r3, #2
 800c536:	d003      	beq.n	800c540 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c538:	69fb      	ldr	r3, [r7, #28]
 800c53a:	799b      	ldrb	r3, [r3, #6]
 800c53c:	2b03      	cmp	r3, #3
 800c53e:	d10b      	bne.n	800c558 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c540:	69fb      	ldr	r3, [r7, #28]
 800c542:	79db      	ldrb	r3, [r3, #7]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d10b      	bne.n	800c560 <USBH_ParseCfgDesc+0x150>
 800c548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	2b09      	cmp	r3, #9
 800c54e:	d007      	beq.n	800c560 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800c550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c552:	2209      	movs	r2, #9
 800c554:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c556:	e003      	b.n	800c560 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c55a:	2207      	movs	r2, #7
 800c55c:	701a      	strb	r2, [r3, #0]
 800c55e:	e000      	b.n	800c562 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c560:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c562:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c566:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c56a:	3201      	adds	r2, #1
 800c56c:	00d2      	lsls	r2, r2, #3
 800c56e:	211a      	movs	r1, #26
 800c570:	fb01 f303 	mul.w	r3, r1, r3
 800c574:	4413      	add	r3, r2
 800c576:	3308      	adds	r3, #8
 800c578:	6a3a      	ldr	r2, [r7, #32]
 800c57a:	4413      	add	r3, r2
 800c57c:	3304      	adds	r3, #4
 800c57e:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c582:	69b9      	ldr	r1, [r7, #24]
 800c584:	68f8      	ldr	r0, [r7, #12]
 800c586:	f000 f870 	bl	800c66a <USBH_ParseEPDesc>
 800c58a:	4603      	mov	r3, r0
 800c58c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800c590:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c594:	3301      	adds	r3, #1
 800c596:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c59a:	69fb      	ldr	r3, [r7, #28]
 800c59c:	791b      	ldrb	r3, [r3, #4]
 800c59e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d204      	bcs.n	800c5b0 <USBH_ParseCfgDesc+0x1a0>
 800c5a6:	6a3b      	ldr	r3, [r7, #32]
 800c5a8:	885a      	ldrh	r2, [r3, #2]
 800c5aa:	8afb      	ldrh	r3, [r7, #22]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d8b0      	bhi.n	800c512 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c5b0:	69fb      	ldr	r3, [r7, #28]
 800c5b2:	791b      	ldrb	r3, [r3, #4]
 800c5b4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d201      	bcs.n	800c5c0 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800c5bc:	2303      	movs	r3, #3
 800c5be:	e01c      	b.n	800c5fa <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800c5c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5c4:	3301      	adds	r3, #1
 800c5c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c5ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	d805      	bhi.n	800c5de <USBH_ParseCfgDesc+0x1ce>
 800c5d2:	6a3b      	ldr	r3, [r7, #32]
 800c5d4:	885a      	ldrh	r2, [r3, #2]
 800c5d6:	8afb      	ldrh	r3, [r7, #22]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	f63f af74 	bhi.w	800c4c6 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c5de:	6a3b      	ldr	r3, [r7, #32]
 800c5e0:	791b      	ldrb	r3, [r3, #4]
 800c5e2:	2b02      	cmp	r3, #2
 800c5e4:	bf28      	it	cs
 800c5e6:	2302      	movcs	r3, #2
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d201      	bcs.n	800c5f6 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800c5f2:	2303      	movs	r3, #3
 800c5f4:	e001      	b.n	800c5fa <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800c5f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3730      	adds	r7, #48	; 0x30
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}

0800c602 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800c602:	b480      	push	{r7}
 800c604:	b083      	sub	sp, #12
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
 800c60a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	781a      	ldrb	r2, [r3, #0]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	785a      	ldrb	r2, [r3, #1]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	789a      	ldrb	r2, [r3, #2]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	78da      	ldrb	r2, [r3, #3]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	3304      	adds	r3, #4
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	2b02      	cmp	r3, #2
 800c634:	bf28      	it	cs
 800c636:	2302      	movcs	r3, #2
 800c638:	b2da      	uxtb	r2, r3
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	795a      	ldrb	r2, [r3, #5]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	799a      	ldrb	r2, [r3, #6]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	79da      	ldrb	r2, [r3, #7]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	7a1a      	ldrb	r2, [r3, #8]
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	721a      	strb	r2, [r3, #8]
}
 800c65e:	bf00      	nop
 800c660:	370c      	adds	r7, #12
 800c662:	46bd      	mov	sp, r7
 800c664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c668:	4770      	bx	lr

0800c66a <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800c66a:	b480      	push	{r7}
 800c66c:	b087      	sub	sp, #28
 800c66e:	af00      	add	r7, sp, #0
 800c670:	60f8      	str	r0, [r7, #12]
 800c672:	60b9      	str	r1, [r7, #8]
 800c674:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c676:	2300      	movs	r3, #0
 800c678:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	781a      	ldrb	r2, [r3, #0]
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	785a      	ldrb	r2, [r3, #1]
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	789a      	ldrb	r2, [r3, #2]
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	78da      	ldrb	r2, [r3, #3]
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	3304      	adds	r3, #4
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	b29a      	uxth	r2, r3
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	3305      	adds	r3, #5
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	021b      	lsls	r3, r3, #8
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	b29a      	uxth	r2, r3
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	799a      	ldrb	r2, [r3, #6]
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	889b      	ldrh	r3, [r3, #4]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d009      	beq.n	800c6da <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c6ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6ce:	d804      	bhi.n	800c6da <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c6d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6d8:	d901      	bls.n	800c6de <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800c6da:	2303      	movs	r3, #3
 800c6dc:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d136      	bne.n	800c756 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	78db      	ldrb	r3, [r3, #3]
 800c6ec:	f003 0303 	and.w	r3, r3, #3
 800c6f0:	2b02      	cmp	r3, #2
 800c6f2:	d108      	bne.n	800c706 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	889b      	ldrh	r3, [r3, #4]
 800c6f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6fc:	f240 8097 	bls.w	800c82e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c700:	2303      	movs	r3, #3
 800c702:	75fb      	strb	r3, [r7, #23]
 800c704:	e093      	b.n	800c82e <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	78db      	ldrb	r3, [r3, #3]
 800c70a:	f003 0303 	and.w	r3, r3, #3
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d107      	bne.n	800c722 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	889b      	ldrh	r3, [r3, #4]
 800c716:	2b40      	cmp	r3, #64	; 0x40
 800c718:	f240 8089 	bls.w	800c82e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c71c:	2303      	movs	r3, #3
 800c71e:	75fb      	strb	r3, [r7, #23]
 800c720:	e085      	b.n	800c82e <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	78db      	ldrb	r3, [r3, #3]
 800c726:	f003 0303 	and.w	r3, r3, #3
 800c72a:	2b01      	cmp	r3, #1
 800c72c:	d005      	beq.n	800c73a <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	78db      	ldrb	r3, [r3, #3]
 800c732:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c736:	2b03      	cmp	r3, #3
 800c738:	d10a      	bne.n	800c750 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	799b      	ldrb	r3, [r3, #6]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d003      	beq.n	800c74a <USBH_ParseEPDesc+0xe0>
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	799b      	ldrb	r3, [r3, #6]
 800c746:	2b10      	cmp	r3, #16
 800c748:	d970      	bls.n	800c82c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c74a:	2303      	movs	r3, #3
 800c74c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c74e:	e06d      	b.n	800c82c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c750:	2303      	movs	r3, #3
 800c752:	75fb      	strb	r3, [r7, #23]
 800c754:	e06b      	b.n	800c82e <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	d13c      	bne.n	800c7da <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	78db      	ldrb	r3, [r3, #3]
 800c764:	f003 0303 	and.w	r3, r3, #3
 800c768:	2b02      	cmp	r3, #2
 800c76a:	d005      	beq.n	800c778 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	78db      	ldrb	r3, [r3, #3]
 800c770:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c774:	2b00      	cmp	r3, #0
 800c776:	d106      	bne.n	800c786 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	889b      	ldrh	r3, [r3, #4]
 800c77c:	2b40      	cmp	r3, #64	; 0x40
 800c77e:	d956      	bls.n	800c82e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c780:	2303      	movs	r3, #3
 800c782:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c784:	e053      	b.n	800c82e <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	78db      	ldrb	r3, [r3, #3]
 800c78a:	f003 0303 	and.w	r3, r3, #3
 800c78e:	2b01      	cmp	r3, #1
 800c790:	d10e      	bne.n	800c7b0 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	799b      	ldrb	r3, [r3, #6]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d007      	beq.n	800c7aa <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800c79e:	2b10      	cmp	r3, #16
 800c7a0:	d803      	bhi.n	800c7aa <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800c7a6:	2b40      	cmp	r3, #64	; 0x40
 800c7a8:	d941      	bls.n	800c82e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c7aa:	2303      	movs	r3, #3
 800c7ac:	75fb      	strb	r3, [r7, #23]
 800c7ae:	e03e      	b.n	800c82e <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	78db      	ldrb	r3, [r3, #3]
 800c7b4:	f003 0303 	and.w	r3, r3, #3
 800c7b8:	2b03      	cmp	r3, #3
 800c7ba:	d10b      	bne.n	800c7d4 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	799b      	ldrb	r3, [r3, #6]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d004      	beq.n	800c7ce <USBH_ParseEPDesc+0x164>
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	889b      	ldrh	r3, [r3, #4]
 800c7c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7cc:	d32f      	bcc.n	800c82e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c7ce:	2303      	movs	r3, #3
 800c7d0:	75fb      	strb	r3, [r7, #23]
 800c7d2:	e02c      	b.n	800c82e <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c7d4:	2303      	movs	r3, #3
 800c7d6:	75fb      	strb	r3, [r7, #23]
 800c7d8:	e029      	b.n	800c82e <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c7e0:	2b02      	cmp	r3, #2
 800c7e2:	d120      	bne.n	800c826 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	78db      	ldrb	r3, [r3, #3]
 800c7e8:	f003 0303 	and.w	r3, r3, #3
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d106      	bne.n	800c7fe <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	889b      	ldrh	r3, [r3, #4]
 800c7f4:	2b08      	cmp	r3, #8
 800c7f6:	d01a      	beq.n	800c82e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c7f8:	2303      	movs	r3, #3
 800c7fa:	75fb      	strb	r3, [r7, #23]
 800c7fc:	e017      	b.n	800c82e <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	78db      	ldrb	r3, [r3, #3]
 800c802:	f003 0303 	and.w	r3, r3, #3
 800c806:	2b03      	cmp	r3, #3
 800c808:	d10a      	bne.n	800c820 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	799b      	ldrb	r3, [r3, #6]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d003      	beq.n	800c81a <USBH_ParseEPDesc+0x1b0>
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	889b      	ldrh	r3, [r3, #4]
 800c816:	2b08      	cmp	r3, #8
 800c818:	d909      	bls.n	800c82e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c81a:	2303      	movs	r3, #3
 800c81c:	75fb      	strb	r3, [r7, #23]
 800c81e:	e006      	b.n	800c82e <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c820:	2303      	movs	r3, #3
 800c822:	75fb      	strb	r3, [r7, #23]
 800c824:	e003      	b.n	800c82e <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c826:	2303      	movs	r3, #3
 800c828:	75fb      	strb	r3, [r7, #23]
 800c82a:	e000      	b.n	800c82e <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c82c:	bf00      	nop
  }

  return status;
 800c82e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c830:	4618      	mov	r0, r3
 800c832:	371c      	adds	r7, #28
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr

0800c83c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b087      	sub	sp, #28
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	4613      	mov	r3, r2
 800c848:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	3301      	adds	r3, #1
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	2b03      	cmp	r3, #3
 800c852:	d120      	bne.n	800c896 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	1e9a      	subs	r2, r3, #2
 800c85a:	88fb      	ldrh	r3, [r7, #6]
 800c85c:	4293      	cmp	r3, r2
 800c85e:	bf28      	it	cs
 800c860:	4613      	movcs	r3, r2
 800c862:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	3302      	adds	r3, #2
 800c868:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c86a:	2300      	movs	r3, #0
 800c86c:	82fb      	strh	r3, [r7, #22]
 800c86e:	e00b      	b.n	800c888 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c870:	8afb      	ldrh	r3, [r7, #22]
 800c872:	68fa      	ldr	r2, [r7, #12]
 800c874:	4413      	add	r3, r2
 800c876:	781a      	ldrb	r2, [r3, #0]
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	3301      	adds	r3, #1
 800c880:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c882:	8afb      	ldrh	r3, [r7, #22]
 800c884:	3302      	adds	r3, #2
 800c886:	82fb      	strh	r3, [r7, #22]
 800c888:	8afa      	ldrh	r2, [r7, #22]
 800c88a:	8abb      	ldrh	r3, [r7, #20]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d3ef      	bcc.n	800c870 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	2200      	movs	r2, #0
 800c894:	701a      	strb	r2, [r3, #0]
  }
}
 800c896:	bf00      	nop
 800c898:	371c      	adds	r7, #28
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr

0800c8a2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c8a2:	b480      	push	{r7}
 800c8a4:	b085      	sub	sp, #20
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
 800c8aa:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	881a      	ldrh	r2, [r3, #0]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	4413      	add	r3, r2
 800c8b8:	b29a      	uxth	r2, r3
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	4413      	add	r3, r2
 800c8c8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c8ca:	68fb      	ldr	r3, [r7, #12]
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3714      	adds	r7, #20
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr

0800c8d8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b086      	sub	sp, #24
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	60f8      	str	r0, [r7, #12]
 800c8e0:	60b9      	str	r1, [r7, #8]
 800c8e2:	4613      	mov	r3, r2
 800c8e4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	789b      	ldrb	r3, [r3, #2]
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	d002      	beq.n	800c8f8 <USBH_CtlReq+0x20>
 800c8f2:	2b02      	cmp	r3, #2
 800c8f4:	d00f      	beq.n	800c916 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c8f6:	e027      	b.n	800c948 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	68ba      	ldr	r2, [r7, #8]
 800c8fc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	88fa      	ldrh	r2, [r7, #6]
 800c902:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2201      	movs	r2, #1
 800c908:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	2202      	movs	r2, #2
 800c90e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c910:	2301      	movs	r3, #1
 800c912:	75fb      	strb	r3, [r7, #23]
      break;
 800c914:	e018      	b.n	800c948 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c916:	68f8      	ldr	r0, [r7, #12]
 800c918:	f000 f81c 	bl	800c954 <USBH_HandleControl>
 800c91c:	4603      	mov	r3, r0
 800c91e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c920:	7dfb      	ldrb	r3, [r7, #23]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d002      	beq.n	800c92c <USBH_CtlReq+0x54>
 800c926:	7dfb      	ldrb	r3, [r7, #23]
 800c928:	2b03      	cmp	r3, #3
 800c92a:	d106      	bne.n	800c93a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2201      	movs	r2, #1
 800c930:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	2200      	movs	r2, #0
 800c936:	761a      	strb	r2, [r3, #24]
      break;
 800c938:	e005      	b.n	800c946 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c93a:	7dfb      	ldrb	r3, [r7, #23]
 800c93c:	2b02      	cmp	r3, #2
 800c93e:	d102      	bne.n	800c946 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2201      	movs	r2, #1
 800c944:	709a      	strb	r2, [r3, #2]
      break;
 800c946:	bf00      	nop
  }
  return status;
 800c948:	7dfb      	ldrb	r3, [r7, #23]
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	3718      	adds	r7, #24
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}
	...

0800c954 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b086      	sub	sp, #24
 800c958:	af02      	add	r7, sp, #8
 800c95a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c95c:	2301      	movs	r3, #1
 800c95e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c960:	2300      	movs	r3, #0
 800c962:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	7e1b      	ldrb	r3, [r3, #24]
 800c968:	3b01      	subs	r3, #1
 800c96a:	2b0a      	cmp	r3, #10
 800c96c:	f200 8156 	bhi.w	800cc1c <USBH_HandleControl+0x2c8>
 800c970:	a201      	add	r2, pc, #4	; (adr r2, 800c978 <USBH_HandleControl+0x24>)
 800c972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c976:	bf00      	nop
 800c978:	0800c9a5 	.word	0x0800c9a5
 800c97c:	0800c9bf 	.word	0x0800c9bf
 800c980:	0800ca29 	.word	0x0800ca29
 800c984:	0800ca4f 	.word	0x0800ca4f
 800c988:	0800ca87 	.word	0x0800ca87
 800c98c:	0800cab1 	.word	0x0800cab1
 800c990:	0800cb03 	.word	0x0800cb03
 800c994:	0800cb25 	.word	0x0800cb25
 800c998:	0800cb61 	.word	0x0800cb61
 800c99c:	0800cb87 	.word	0x0800cb87
 800c9a0:	0800cbc5 	.word	0x0800cbc5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f103 0110 	add.w	r1, r3, #16
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	795b      	ldrb	r3, [r3, #5]
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f000 f943 	bl	800cc3c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2202      	movs	r2, #2
 800c9ba:	761a      	strb	r2, [r3, #24]
      break;
 800c9bc:	e139      	b.n	800cc32 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	795b      	ldrb	r3, [r3, #5]
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f000 fcc5 	bl	800d354 <USBH_LL_GetURBState>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c9ce:	7bbb      	ldrb	r3, [r7, #14]
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d11e      	bne.n	800ca12 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	7c1b      	ldrb	r3, [r3, #16]
 800c9d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c9dc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	8adb      	ldrh	r3, [r3, #22]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d00a      	beq.n	800c9fc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c9e6:	7b7b      	ldrb	r3, [r7, #13]
 800c9e8:	2b80      	cmp	r3, #128	; 0x80
 800c9ea:	d103      	bne.n	800c9f4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2203      	movs	r2, #3
 800c9f0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c9f2:	e115      	b.n	800cc20 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2205      	movs	r2, #5
 800c9f8:	761a      	strb	r2, [r3, #24]
      break;
 800c9fa:	e111      	b.n	800cc20 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c9fc:	7b7b      	ldrb	r3, [r7, #13]
 800c9fe:	2b80      	cmp	r3, #128	; 0x80
 800ca00:	d103      	bne.n	800ca0a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2209      	movs	r2, #9
 800ca06:	761a      	strb	r2, [r3, #24]
      break;
 800ca08:	e10a      	b.n	800cc20 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2207      	movs	r2, #7
 800ca0e:	761a      	strb	r2, [r3, #24]
      break;
 800ca10:	e106      	b.n	800cc20 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ca12:	7bbb      	ldrb	r3, [r7, #14]
 800ca14:	2b04      	cmp	r3, #4
 800ca16:	d003      	beq.n	800ca20 <USBH_HandleControl+0xcc>
 800ca18:	7bbb      	ldrb	r3, [r7, #14]
 800ca1a:	2b02      	cmp	r3, #2
 800ca1c:	f040 8100 	bne.w	800cc20 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	220b      	movs	r2, #11
 800ca24:	761a      	strb	r2, [r3, #24]
      break;
 800ca26:	e0fb      	b.n	800cc20 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ca2e:	b29a      	uxth	r2, r3
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6899      	ldr	r1, [r3, #8]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	899a      	ldrh	r2, [r3, #12]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	791b      	ldrb	r3, [r3, #4]
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f000 f93a 	bl	800ccba <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2204      	movs	r2, #4
 800ca4a:	761a      	strb	r2, [r3, #24]
      break;
 800ca4c:	e0f1      	b.n	800cc32 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	791b      	ldrb	r3, [r3, #4]
 800ca52:	4619      	mov	r1, r3
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f000 fc7d 	bl	800d354 <USBH_LL_GetURBState>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ca5e:	7bbb      	ldrb	r3, [r7, #14]
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	d102      	bne.n	800ca6a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2209      	movs	r2, #9
 800ca68:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ca6a:	7bbb      	ldrb	r3, [r7, #14]
 800ca6c:	2b05      	cmp	r3, #5
 800ca6e:	d102      	bne.n	800ca76 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ca70:	2303      	movs	r3, #3
 800ca72:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ca74:	e0d6      	b.n	800cc24 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ca76:	7bbb      	ldrb	r3, [r7, #14]
 800ca78:	2b04      	cmp	r3, #4
 800ca7a:	f040 80d3 	bne.w	800cc24 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	220b      	movs	r2, #11
 800ca82:	761a      	strb	r2, [r3, #24]
      break;
 800ca84:	e0ce      	b.n	800cc24 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6899      	ldr	r1, [r3, #8]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	899a      	ldrh	r2, [r3, #12]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	795b      	ldrb	r3, [r3, #5]
 800ca92:	2001      	movs	r0, #1
 800ca94:	9000      	str	r0, [sp, #0]
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f000 f8ea 	bl	800cc70 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800caa2:	b29a      	uxth	r2, r3
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2206      	movs	r2, #6
 800caac:	761a      	strb	r2, [r3, #24]
      break;
 800caae:	e0c0      	b.n	800cc32 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	795b      	ldrb	r3, [r3, #5]
 800cab4:	4619      	mov	r1, r3
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f000 fc4c 	bl	800d354 <USBH_LL_GetURBState>
 800cabc:	4603      	mov	r3, r0
 800cabe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cac0:	7bbb      	ldrb	r3, [r7, #14]
 800cac2:	2b01      	cmp	r3, #1
 800cac4:	d103      	bne.n	800cace <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2207      	movs	r2, #7
 800caca:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cacc:	e0ac      	b.n	800cc28 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800cace:	7bbb      	ldrb	r3, [r7, #14]
 800cad0:	2b05      	cmp	r3, #5
 800cad2:	d105      	bne.n	800cae0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	220c      	movs	r2, #12
 800cad8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800cada:	2303      	movs	r3, #3
 800cadc:	73fb      	strb	r3, [r7, #15]
      break;
 800cade:	e0a3      	b.n	800cc28 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cae0:	7bbb      	ldrb	r3, [r7, #14]
 800cae2:	2b02      	cmp	r3, #2
 800cae4:	d103      	bne.n	800caee <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2205      	movs	r2, #5
 800caea:	761a      	strb	r2, [r3, #24]
      break;
 800caec:	e09c      	b.n	800cc28 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800caee:	7bbb      	ldrb	r3, [r7, #14]
 800caf0:	2b04      	cmp	r3, #4
 800caf2:	f040 8099 	bne.w	800cc28 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	220b      	movs	r2, #11
 800cafa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800cafc:	2302      	movs	r3, #2
 800cafe:	73fb      	strb	r3, [r7, #15]
      break;
 800cb00:	e092      	b.n	800cc28 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	791b      	ldrb	r3, [r3, #4]
 800cb06:	2200      	movs	r2, #0
 800cb08:	2100      	movs	r1, #0
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f000 f8d5 	bl	800ccba <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cb16:	b29a      	uxth	r2, r3
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2208      	movs	r2, #8
 800cb20:	761a      	strb	r2, [r3, #24]

      break;
 800cb22:	e086      	b.n	800cc32 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	791b      	ldrb	r3, [r3, #4]
 800cb28:	4619      	mov	r1, r3
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 fc12 	bl	800d354 <USBH_LL_GetURBState>
 800cb30:	4603      	mov	r3, r0
 800cb32:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cb34:	7bbb      	ldrb	r3, [r7, #14]
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	d105      	bne.n	800cb46 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	220d      	movs	r2, #13
 800cb3e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800cb40:	2300      	movs	r3, #0
 800cb42:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cb44:	e072      	b.n	800cc2c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800cb46:	7bbb      	ldrb	r3, [r7, #14]
 800cb48:	2b04      	cmp	r3, #4
 800cb4a:	d103      	bne.n	800cb54 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	220b      	movs	r2, #11
 800cb50:	761a      	strb	r2, [r3, #24]
      break;
 800cb52:	e06b      	b.n	800cc2c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800cb54:	7bbb      	ldrb	r3, [r7, #14]
 800cb56:	2b05      	cmp	r3, #5
 800cb58:	d168      	bne.n	800cc2c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800cb5a:	2303      	movs	r3, #3
 800cb5c:	73fb      	strb	r3, [r7, #15]
      break;
 800cb5e:	e065      	b.n	800cc2c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	795b      	ldrb	r3, [r3, #5]
 800cb64:	2201      	movs	r2, #1
 800cb66:	9200      	str	r2, [sp, #0]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	2100      	movs	r1, #0
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f000 f87f 	bl	800cc70 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cb78:	b29a      	uxth	r2, r3
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	220a      	movs	r2, #10
 800cb82:	761a      	strb	r2, [r3, #24]
      break;
 800cb84:	e055      	b.n	800cc32 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	795b      	ldrb	r3, [r3, #5]
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f000 fbe1 	bl	800d354 <USBH_LL_GetURBState>
 800cb92:	4603      	mov	r3, r0
 800cb94:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800cb96:	7bbb      	ldrb	r3, [r7, #14]
 800cb98:	2b01      	cmp	r3, #1
 800cb9a:	d105      	bne.n	800cba8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	220d      	movs	r2, #13
 800cba4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cba6:	e043      	b.n	800cc30 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cba8:	7bbb      	ldrb	r3, [r7, #14]
 800cbaa:	2b02      	cmp	r3, #2
 800cbac:	d103      	bne.n	800cbb6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2209      	movs	r2, #9
 800cbb2:	761a      	strb	r2, [r3, #24]
      break;
 800cbb4:	e03c      	b.n	800cc30 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800cbb6:	7bbb      	ldrb	r3, [r7, #14]
 800cbb8:	2b04      	cmp	r3, #4
 800cbba:	d139      	bne.n	800cc30 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	220b      	movs	r2, #11
 800cbc0:	761a      	strb	r2, [r3, #24]
      break;
 800cbc2:	e035      	b.n	800cc30 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	7e5b      	ldrb	r3, [r3, #25]
 800cbc8:	3301      	adds	r3, #1
 800cbca:	b2da      	uxtb	r2, r3
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	765a      	strb	r2, [r3, #25]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	7e5b      	ldrb	r3, [r3, #25]
 800cbd4:	2b02      	cmp	r3, #2
 800cbd6:	d806      	bhi.n	800cbe6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2201      	movs	r2, #1
 800cbdc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2201      	movs	r2, #1
 800cbe2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800cbe4:	e025      	b.n	800cc32 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cbec:	2106      	movs	r1, #6
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	795b      	ldrb	r3, [r3, #5]
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 f90c 	bl	800ce1c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	791b      	ldrb	r3, [r3, #4]
 800cc08:	4619      	mov	r1, r3
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f000 f906 	bl	800ce1c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2200      	movs	r2, #0
 800cc14:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800cc16:	2302      	movs	r3, #2
 800cc18:	73fb      	strb	r3, [r7, #15]
      break;
 800cc1a:	e00a      	b.n	800cc32 <USBH_HandleControl+0x2de>

    default:
      break;
 800cc1c:	bf00      	nop
 800cc1e:	e008      	b.n	800cc32 <USBH_HandleControl+0x2de>
      break;
 800cc20:	bf00      	nop
 800cc22:	e006      	b.n	800cc32 <USBH_HandleControl+0x2de>
      break;
 800cc24:	bf00      	nop
 800cc26:	e004      	b.n	800cc32 <USBH_HandleControl+0x2de>
      break;
 800cc28:	bf00      	nop
 800cc2a:	e002      	b.n	800cc32 <USBH_HandleControl+0x2de>
      break;
 800cc2c:	bf00      	nop
 800cc2e:	e000      	b.n	800cc32 <USBH_HandleControl+0x2de>
      break;
 800cc30:	bf00      	nop
  }

  return status;
 800cc32:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3710      	adds	r7, #16
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}

0800cc3c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b088      	sub	sp, #32
 800cc40:	af04      	add	r7, sp, #16
 800cc42:	60f8      	str	r0, [r7, #12]
 800cc44:	60b9      	str	r1, [r7, #8]
 800cc46:	4613      	mov	r3, r2
 800cc48:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cc4a:	79f9      	ldrb	r1, [r7, #7]
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	9303      	str	r3, [sp, #12]
 800cc50:	2308      	movs	r3, #8
 800cc52:	9302      	str	r3, [sp, #8]
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	9301      	str	r3, [sp, #4]
 800cc58:	2300      	movs	r3, #0
 800cc5a:	9300      	str	r3, [sp, #0]
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	2200      	movs	r2, #0
 800cc60:	68f8      	ldr	r0, [r7, #12]
 800cc62:	f000 fb46 	bl	800d2f2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800cc66:	2300      	movs	r3, #0
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3710      	adds	r7, #16
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b088      	sub	sp, #32
 800cc74:	af04      	add	r7, sp, #16
 800cc76:	60f8      	str	r0, [r7, #12]
 800cc78:	60b9      	str	r1, [r7, #8]
 800cc7a:	4611      	mov	r1, r2
 800cc7c:	461a      	mov	r2, r3
 800cc7e:	460b      	mov	r3, r1
 800cc80:	80fb      	strh	r3, [r7, #6]
 800cc82:	4613      	mov	r3, r2
 800cc84:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d001      	beq.n	800cc94 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800cc90:	2300      	movs	r3, #0
 800cc92:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cc94:	7979      	ldrb	r1, [r7, #5]
 800cc96:	7e3b      	ldrb	r3, [r7, #24]
 800cc98:	9303      	str	r3, [sp, #12]
 800cc9a:	88fb      	ldrh	r3, [r7, #6]
 800cc9c:	9302      	str	r3, [sp, #8]
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	9301      	str	r3, [sp, #4]
 800cca2:	2301      	movs	r3, #1
 800cca4:	9300      	str	r3, [sp, #0]
 800cca6:	2300      	movs	r3, #0
 800cca8:	2200      	movs	r2, #0
 800ccaa:	68f8      	ldr	r0, [r7, #12]
 800ccac:	f000 fb21 	bl	800d2f2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ccb0:	2300      	movs	r3, #0
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3710      	adds	r7, #16
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}

0800ccba <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ccba:	b580      	push	{r7, lr}
 800ccbc:	b088      	sub	sp, #32
 800ccbe:	af04      	add	r7, sp, #16
 800ccc0:	60f8      	str	r0, [r7, #12]
 800ccc2:	60b9      	str	r1, [r7, #8]
 800ccc4:	4611      	mov	r1, r2
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	460b      	mov	r3, r1
 800ccca:	80fb      	strh	r3, [r7, #6]
 800cccc:	4613      	mov	r3, r2
 800ccce:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ccd0:	7979      	ldrb	r1, [r7, #5]
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	9303      	str	r3, [sp, #12]
 800ccd6:	88fb      	ldrh	r3, [r7, #6]
 800ccd8:	9302      	str	r3, [sp, #8]
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	9301      	str	r3, [sp, #4]
 800ccde:	2301      	movs	r3, #1
 800cce0:	9300      	str	r3, [sp, #0]
 800cce2:	2300      	movs	r3, #0
 800cce4:	2201      	movs	r2, #1
 800cce6:	68f8      	ldr	r0, [r7, #12]
 800cce8:	f000 fb03 	bl	800d2f2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ccec:	2300      	movs	r3, #0

}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3710      	adds	r7, #16
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}

0800ccf6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ccf6:	b580      	push	{r7, lr}
 800ccf8:	b088      	sub	sp, #32
 800ccfa:	af04      	add	r7, sp, #16
 800ccfc:	60f8      	str	r0, [r7, #12]
 800ccfe:	60b9      	str	r1, [r7, #8]
 800cd00:	4611      	mov	r1, r2
 800cd02:	461a      	mov	r2, r3
 800cd04:	460b      	mov	r3, r1
 800cd06:	80fb      	strh	r3, [r7, #6]
 800cd08:	4613      	mov	r3, r2
 800cd0a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d001      	beq.n	800cd1a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800cd16:	2300      	movs	r3, #0
 800cd18:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cd1a:	7979      	ldrb	r1, [r7, #5]
 800cd1c:	7e3b      	ldrb	r3, [r7, #24]
 800cd1e:	9303      	str	r3, [sp, #12]
 800cd20:	88fb      	ldrh	r3, [r7, #6]
 800cd22:	9302      	str	r3, [sp, #8]
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	9301      	str	r3, [sp, #4]
 800cd28:	2301      	movs	r3, #1
 800cd2a:	9300      	str	r3, [sp, #0]
 800cd2c:	2302      	movs	r3, #2
 800cd2e:	2200      	movs	r2, #0
 800cd30:	68f8      	ldr	r0, [r7, #12]
 800cd32:	f000 fade 	bl	800d2f2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800cd36:	2300      	movs	r3, #0
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3710      	adds	r7, #16
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b088      	sub	sp, #32
 800cd44:	af04      	add	r7, sp, #16
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	60b9      	str	r1, [r7, #8]
 800cd4a:	4611      	mov	r1, r2
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	460b      	mov	r3, r1
 800cd50:	80fb      	strh	r3, [r7, #6]
 800cd52:	4613      	mov	r3, r2
 800cd54:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cd56:	7979      	ldrb	r1, [r7, #5]
 800cd58:	2300      	movs	r3, #0
 800cd5a:	9303      	str	r3, [sp, #12]
 800cd5c:	88fb      	ldrh	r3, [r7, #6]
 800cd5e:	9302      	str	r3, [sp, #8]
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	9301      	str	r3, [sp, #4]
 800cd64:	2301      	movs	r3, #1
 800cd66:	9300      	str	r3, [sp, #0]
 800cd68:	2302      	movs	r3, #2
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	68f8      	ldr	r0, [r7, #12]
 800cd6e:	f000 fac0 	bl	800d2f2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cd72:	2300      	movs	r3, #0
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3710      	adds	r7, #16
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}

0800cd7c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b086      	sub	sp, #24
 800cd80:	af04      	add	r7, sp, #16
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	4608      	mov	r0, r1
 800cd86:	4611      	mov	r1, r2
 800cd88:	461a      	mov	r2, r3
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	70fb      	strb	r3, [r7, #3]
 800cd8e:	460b      	mov	r3, r1
 800cd90:	70bb      	strb	r3, [r7, #2]
 800cd92:	4613      	mov	r3, r2
 800cd94:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800cd96:	7878      	ldrb	r0, [r7, #1]
 800cd98:	78ba      	ldrb	r2, [r7, #2]
 800cd9a:	78f9      	ldrb	r1, [r7, #3]
 800cd9c:	8b3b      	ldrh	r3, [r7, #24]
 800cd9e:	9302      	str	r3, [sp, #8]
 800cda0:	7d3b      	ldrb	r3, [r7, #20]
 800cda2:	9301      	str	r3, [sp, #4]
 800cda4:	7c3b      	ldrb	r3, [r7, #16]
 800cda6:	9300      	str	r3, [sp, #0]
 800cda8:	4603      	mov	r3, r0
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f000 fa53 	bl	800d256 <USBH_LL_OpenPipe>

  return USBH_OK;
 800cdb0:	2300      	movs	r3, #0
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3708      	adds	r7, #8
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}

0800cdba <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800cdba:	b580      	push	{r7, lr}
 800cdbc:	b082      	sub	sp, #8
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	6078      	str	r0, [r7, #4]
 800cdc2:	460b      	mov	r3, r1
 800cdc4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800cdc6:	78fb      	ldrb	r3, [r7, #3]
 800cdc8:	4619      	mov	r1, r3
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f000 fa72 	bl	800d2b4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800cdd0:	2300      	movs	r3, #0
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3708      	adds	r7, #8
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}

0800cdda <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800cdda:	b580      	push	{r7, lr}
 800cddc:	b084      	sub	sp, #16
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]
 800cde2:	460b      	mov	r3, r1
 800cde4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f000 f836 	bl	800ce58 <USBH_GetFreePipe>
 800cdec:	4603      	mov	r3, r0
 800cdee:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800cdf0:	89fb      	ldrh	r3, [r7, #14]
 800cdf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d00a      	beq.n	800ce10 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800cdfa:	78fa      	ldrb	r2, [r7, #3]
 800cdfc:	89fb      	ldrh	r3, [r7, #14]
 800cdfe:	f003 030f 	and.w	r3, r3, #15
 800ce02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ce06:	6879      	ldr	r1, [r7, #4]
 800ce08:	33e0      	adds	r3, #224	; 0xe0
 800ce0a:	009b      	lsls	r3, r3, #2
 800ce0c:	440b      	add	r3, r1
 800ce0e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ce10:	89fb      	ldrh	r3, [r7, #14]
 800ce12:	b2db      	uxtb	r3, r3
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3710      	adds	r7, #16
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}

0800ce1c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b083      	sub	sp, #12
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	460b      	mov	r3, r1
 800ce26:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ce28:	78fb      	ldrb	r3, [r7, #3]
 800ce2a:	2b0f      	cmp	r3, #15
 800ce2c:	d80d      	bhi.n	800ce4a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ce2e:	78fb      	ldrb	r3, [r7, #3]
 800ce30:	687a      	ldr	r2, [r7, #4]
 800ce32:	33e0      	adds	r3, #224	; 0xe0
 800ce34:	009b      	lsls	r3, r3, #2
 800ce36:	4413      	add	r3, r2
 800ce38:	685a      	ldr	r2, [r3, #4]
 800ce3a:	78fb      	ldrb	r3, [r7, #3]
 800ce3c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ce40:	6879      	ldr	r1, [r7, #4]
 800ce42:	33e0      	adds	r3, #224	; 0xe0
 800ce44:	009b      	lsls	r3, r3, #2
 800ce46:	440b      	add	r3, r1
 800ce48:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ce4a:	2300      	movs	r3, #0
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	370c      	adds	r7, #12
 800ce50:	46bd      	mov	sp, r7
 800ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce56:	4770      	bx	lr

0800ce58 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b085      	sub	sp, #20
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ce60:	2300      	movs	r3, #0
 800ce62:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ce64:	2300      	movs	r3, #0
 800ce66:	73fb      	strb	r3, [r7, #15]
 800ce68:	e00f      	b.n	800ce8a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ce6a:	7bfb      	ldrb	r3, [r7, #15]
 800ce6c:	687a      	ldr	r2, [r7, #4]
 800ce6e:	33e0      	adds	r3, #224	; 0xe0
 800ce70:	009b      	lsls	r3, r3, #2
 800ce72:	4413      	add	r3, r2
 800ce74:	685b      	ldr	r3, [r3, #4]
 800ce76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d102      	bne.n	800ce84 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ce7e:	7bfb      	ldrb	r3, [r7, #15]
 800ce80:	b29b      	uxth	r3, r3
 800ce82:	e007      	b.n	800ce94 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ce84:	7bfb      	ldrb	r3, [r7, #15]
 800ce86:	3301      	adds	r3, #1
 800ce88:	73fb      	strb	r3, [r7, #15]
 800ce8a:	7bfb      	ldrb	r3, [r7, #15]
 800ce8c:	2b0f      	cmp	r3, #15
 800ce8e:	d9ec      	bls.n	800ce6a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ce90:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3714      	adds	r7, #20
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9e:	4770      	bx	lr

0800cea0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800cea4:	2201      	movs	r2, #1
 800cea6:	490e      	ldr	r1, [pc, #56]	; (800cee0 <MX_USB_HOST_Init+0x40>)
 800cea8:	480e      	ldr	r0, [pc, #56]	; (800cee4 <MX_USB_HOST_Init+0x44>)
 800ceaa:	f7fe fb05 	bl	800b4b8 <USBH_Init>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d001      	beq.n	800ceb8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ceb4:	f7f4 fdc8 	bl	8001a48 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ceb8:	490b      	ldr	r1, [pc, #44]	; (800cee8 <MX_USB_HOST_Init+0x48>)
 800ceba:	480a      	ldr	r0, [pc, #40]	; (800cee4 <MX_USB_HOST_Init+0x44>)
 800cebc:	f7fe fba9 	bl	800b612 <USBH_RegisterClass>
 800cec0:	4603      	mov	r3, r0
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d001      	beq.n	800ceca <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800cec6:	f7f4 fdbf 	bl	8001a48 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ceca:	4806      	ldr	r0, [pc, #24]	; (800cee4 <MX_USB_HOST_Init+0x44>)
 800cecc:	f7fe fc2d 	bl	800b72a <USBH_Start>
 800ced0:	4603      	mov	r3, r0
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d001      	beq.n	800ceda <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ced6:	f7f4 fdb7 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ceda:	bf00      	nop
 800cedc:	bd80      	pop	{r7, pc}
 800cede:	bf00      	nop
 800cee0:	0800cf01 	.word	0x0800cf01
 800cee4:	200008c4 	.word	0x200008c4
 800cee8:	2000000c 	.word	0x2000000c

0800ceec <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800cef0:	4802      	ldr	r0, [pc, #8]	; (800cefc <MX_USB_HOST_Process+0x10>)
 800cef2:	f7fe fc2b 	bl	800b74c <USBH_Process>
}
 800cef6:	bf00      	nop
 800cef8:	bd80      	pop	{r7, pc}
 800cefa:	bf00      	nop
 800cefc:	200008c4 	.word	0x200008c4

0800cf00 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b083      	sub	sp, #12
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	460b      	mov	r3, r1
 800cf0a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800cf0c:	78fb      	ldrb	r3, [r7, #3]
 800cf0e:	3b01      	subs	r3, #1
 800cf10:	2b04      	cmp	r3, #4
 800cf12:	d819      	bhi.n	800cf48 <USBH_UserProcess+0x48>
 800cf14:	a201      	add	r2, pc, #4	; (adr r2, 800cf1c <USBH_UserProcess+0x1c>)
 800cf16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf1a:	bf00      	nop
 800cf1c:	0800cf49 	.word	0x0800cf49
 800cf20:	0800cf39 	.word	0x0800cf39
 800cf24:	0800cf49 	.word	0x0800cf49
 800cf28:	0800cf41 	.word	0x0800cf41
 800cf2c:	0800cf31 	.word	0x0800cf31
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800cf30:	4b09      	ldr	r3, [pc, #36]	; (800cf58 <USBH_UserProcess+0x58>)
 800cf32:	2203      	movs	r2, #3
 800cf34:	701a      	strb	r2, [r3, #0]
  break;
 800cf36:	e008      	b.n	800cf4a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800cf38:	4b07      	ldr	r3, [pc, #28]	; (800cf58 <USBH_UserProcess+0x58>)
 800cf3a:	2202      	movs	r2, #2
 800cf3c:	701a      	strb	r2, [r3, #0]
  break;
 800cf3e:	e004      	b.n	800cf4a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800cf40:	4b05      	ldr	r3, [pc, #20]	; (800cf58 <USBH_UserProcess+0x58>)
 800cf42:	2201      	movs	r2, #1
 800cf44:	701a      	strb	r2, [r3, #0]
  break;
 800cf46:	e000      	b.n	800cf4a <USBH_UserProcess+0x4a>

  default:
  break;
 800cf48:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800cf4a:	bf00      	nop
 800cf4c:	370c      	adds	r7, #12
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf54:	4770      	bx	lr
 800cf56:	bf00      	nop
 800cf58:	20000c9c 	.word	0x20000c9c

0800cf5c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b08a      	sub	sp, #40	; 0x28
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf64:	f107 0314 	add.w	r3, r7, #20
 800cf68:	2200      	movs	r2, #0
 800cf6a:	601a      	str	r2, [r3, #0]
 800cf6c:	605a      	str	r2, [r3, #4]
 800cf6e:	609a      	str	r2, [r3, #8]
 800cf70:	60da      	str	r2, [r3, #12]
 800cf72:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf7c:	d147      	bne.n	800d00e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf7e:	2300      	movs	r3, #0
 800cf80:	613b      	str	r3, [r7, #16]
 800cf82:	4b25      	ldr	r3, [pc, #148]	; (800d018 <HAL_HCD_MspInit+0xbc>)
 800cf84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf86:	4a24      	ldr	r2, [pc, #144]	; (800d018 <HAL_HCD_MspInit+0xbc>)
 800cf88:	f043 0301 	orr.w	r3, r3, #1
 800cf8c:	6313      	str	r3, [r2, #48]	; 0x30
 800cf8e:	4b22      	ldr	r3, [pc, #136]	; (800d018 <HAL_HCD_MspInit+0xbc>)
 800cf90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf92:	f003 0301 	and.w	r3, r3, #1
 800cf96:	613b      	str	r3, [r7, #16]
 800cf98:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800cf9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800cfa8:	f107 0314 	add.w	r3, r7, #20
 800cfac:	4619      	mov	r1, r3
 800cfae:	481b      	ldr	r0, [pc, #108]	; (800d01c <HAL_HCD_MspInit+0xc0>)
 800cfb0:	f7f5 feb4 	bl	8002d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800cfb4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800cfb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cfba:	2302      	movs	r3, #2
 800cfbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cfc6:	230a      	movs	r3, #10
 800cfc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cfca:	f107 0314 	add.w	r3, r7, #20
 800cfce:	4619      	mov	r1, r3
 800cfd0:	4812      	ldr	r0, [pc, #72]	; (800d01c <HAL_HCD_MspInit+0xc0>)
 800cfd2:	f7f5 fea3 	bl	8002d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cfd6:	4b10      	ldr	r3, [pc, #64]	; (800d018 <HAL_HCD_MspInit+0xbc>)
 800cfd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfda:	4a0f      	ldr	r2, [pc, #60]	; (800d018 <HAL_HCD_MspInit+0xbc>)
 800cfdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfe0:	6353      	str	r3, [r2, #52]	; 0x34
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	60fb      	str	r3, [r7, #12]
 800cfe6:	4b0c      	ldr	r3, [pc, #48]	; (800d018 <HAL_HCD_MspInit+0xbc>)
 800cfe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfea:	4a0b      	ldr	r2, [pc, #44]	; (800d018 <HAL_HCD_MspInit+0xbc>)
 800cfec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cff0:	6453      	str	r3, [r2, #68]	; 0x44
 800cff2:	4b09      	ldr	r3, [pc, #36]	; (800d018 <HAL_HCD_MspInit+0xbc>)
 800cff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cffa:	60fb      	str	r3, [r7, #12]
 800cffc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cffe:	2200      	movs	r2, #0
 800d000:	2100      	movs	r1, #0
 800d002:	2043      	movs	r0, #67	; 0x43
 800d004:	f7f5 fa51 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d008:	2043      	movs	r0, #67	; 0x43
 800d00a:	f7f5 fa6a 	bl	80024e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d00e:	bf00      	nop
 800d010:	3728      	adds	r7, #40	; 0x28
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}
 800d016:	bf00      	nop
 800d018:	40023800 	.word	0x40023800
 800d01c:	40020000 	.word	0x40020000

0800d020 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b082      	sub	sp, #8
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800d02e:	4618      	mov	r0, r3
 800d030:	f7fe ff6b 	bl	800bf0a <USBH_LL_IncTimer>
}
 800d034:	bf00      	nop
 800d036:	3708      	adds	r7, #8
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b082      	sub	sp, #8
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800d04a:	4618      	mov	r0, r3
 800d04c:	f7fe ffa3 	bl	800bf96 <USBH_LL_Connect>
}
 800d050:	bf00      	nop
 800d052:	3708      	adds	r7, #8
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800d066:	4618      	mov	r0, r3
 800d068:	f7fe ffac 	bl	800bfc4 <USBH_LL_Disconnect>
}
 800d06c:	bf00      	nop
 800d06e:	3708      	adds	r7, #8
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d074:	b480      	push	{r7}
 800d076:	b083      	sub	sp, #12
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	460b      	mov	r3, r1
 800d07e:	70fb      	strb	r3, [r7, #3]
 800d080:	4613      	mov	r3, r2
 800d082:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d084:	bf00      	nop
 800d086:	370c      	adds	r7, #12
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr

0800d090 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f7fe ff5d 	bl	800bf5e <USBH_LL_PortEnabled>
}
 800d0a4:	bf00      	nop
 800d0a6:	3708      	adds	r7, #8
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}

0800d0ac <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b082      	sub	sp, #8
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7fe ff5d 	bl	800bf7a <USBH_LL_PortDisabled>
}
 800d0c0:	bf00      	nop
 800d0c2:	3708      	adds	r7, #8
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}

0800d0c8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b082      	sub	sp, #8
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d0d6:	2b01      	cmp	r3, #1
 800d0d8:	d12a      	bne.n	800d130 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d0da:	4a18      	ldr	r2, [pc, #96]	; (800d13c <USBH_LL_Init+0x74>)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	4a15      	ldr	r2, [pc, #84]	; (800d13c <USBH_LL_Init+0x74>)
 800d0e6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d0ea:	4b14      	ldr	r3, [pc, #80]	; (800d13c <USBH_LL_Init+0x74>)
 800d0ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d0f0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d0f2:	4b12      	ldr	r3, [pc, #72]	; (800d13c <USBH_LL_Init+0x74>)
 800d0f4:	2208      	movs	r2, #8
 800d0f6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d0f8:	4b10      	ldr	r3, [pc, #64]	; (800d13c <USBH_LL_Init+0x74>)
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d0fe:	4b0f      	ldr	r3, [pc, #60]	; (800d13c <USBH_LL_Init+0x74>)
 800d100:	2200      	movs	r2, #0
 800d102:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d104:	4b0d      	ldr	r3, [pc, #52]	; (800d13c <USBH_LL_Init+0x74>)
 800d106:	2202      	movs	r2, #2
 800d108:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d10a:	4b0c      	ldr	r3, [pc, #48]	; (800d13c <USBH_LL_Init+0x74>)
 800d10c:	2200      	movs	r2, #0
 800d10e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d110:	480a      	ldr	r0, [pc, #40]	; (800d13c <USBH_LL_Init+0x74>)
 800d112:	f7f5 ffb8 	bl	8003086 <HAL_HCD_Init>
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d001      	beq.n	800d120 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d11c:	f7f4 fc94 	bl	8001a48 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d120:	4806      	ldr	r0, [pc, #24]	; (800d13c <USBH_LL_Init+0x74>)
 800d122:	f7f6 fc19 	bl	8003958 <HAL_HCD_GetCurrentFrame>
 800d126:	4603      	mov	r3, r0
 800d128:	4619      	mov	r1, r3
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f7fe fede 	bl	800beec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d130:	2300      	movs	r3, #0
}
 800d132:	4618      	mov	r0, r3
 800d134:	3708      	adds	r7, #8
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop
 800d13c:	20000ca0 	.word	0x20000ca0

0800d140 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b084      	sub	sp, #16
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d148:	2300      	movs	r3, #0
 800d14a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d14c:	2300      	movs	r3, #0
 800d14e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d156:	4618      	mov	r0, r3
 800d158:	f7f6 fb86 	bl	8003868 <HAL_HCD_Start>
 800d15c:	4603      	mov	r3, r0
 800d15e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d160:	7bfb      	ldrb	r3, [r7, #15]
 800d162:	4618      	mov	r0, r3
 800d164:	f000 f95e 	bl	800d424 <USBH_Get_USB_Status>
 800d168:	4603      	mov	r3, r0
 800d16a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d16c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3710      	adds	r7, #16
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}

0800d176 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d176:	b580      	push	{r7, lr}
 800d178:	b084      	sub	sp, #16
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d17e:	2300      	movs	r3, #0
 800d180:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d182:	2300      	movs	r3, #0
 800d184:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d18c:	4618      	mov	r0, r3
 800d18e:	f7f6 fb8e 	bl	80038ae <HAL_HCD_Stop>
 800d192:	4603      	mov	r3, r0
 800d194:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d196:	7bfb      	ldrb	r3, [r7, #15]
 800d198:	4618      	mov	r0, r3
 800d19a:	f000 f943 	bl	800d424 <USBH_Get_USB_Status>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3710      	adds	r7, #16
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b084      	sub	sp, #16
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7f6 fbd8 	bl	8003974 <HAL_HCD_GetCurrentSpeed>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	2b02      	cmp	r3, #2
 800d1c8:	d00c      	beq.n	800d1e4 <USBH_LL_GetSpeed+0x38>
 800d1ca:	2b02      	cmp	r3, #2
 800d1cc:	d80d      	bhi.n	800d1ea <USBH_LL_GetSpeed+0x3e>
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d002      	beq.n	800d1d8 <USBH_LL_GetSpeed+0x2c>
 800d1d2:	2b01      	cmp	r3, #1
 800d1d4:	d003      	beq.n	800d1de <USBH_LL_GetSpeed+0x32>
 800d1d6:	e008      	b.n	800d1ea <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	73fb      	strb	r3, [r7, #15]
    break;
 800d1dc:	e008      	b.n	800d1f0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	73fb      	strb	r3, [r7, #15]
    break;
 800d1e2:	e005      	b.n	800d1f0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d1e4:	2302      	movs	r3, #2
 800d1e6:	73fb      	strb	r3, [r7, #15]
    break;
 800d1e8:	e002      	b.n	800d1f0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	73fb      	strb	r3, [r7, #15]
    break;
 800d1ee:	bf00      	nop
  }
  return  speed;
 800d1f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3710      	adds	r7, #16
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}

0800d1fa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d1fa:	b580      	push	{r7, lr}
 800d1fc:	b084      	sub	sp, #16
 800d1fe:	af00      	add	r7, sp, #0
 800d200:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d202:	2300      	movs	r3, #0
 800d204:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d206:	2300      	movs	r3, #0
 800d208:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d210:	4618      	mov	r0, r3
 800d212:	f7f6 fb69 	bl	80038e8 <HAL_HCD_ResetPort>
 800d216:	4603      	mov	r3, r0
 800d218:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d21a:	7bfb      	ldrb	r3, [r7, #15]
 800d21c:	4618      	mov	r0, r3
 800d21e:	f000 f901 	bl	800d424 <USBH_Get_USB_Status>
 800d222:	4603      	mov	r3, r0
 800d224:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d226:	7bbb      	ldrb	r3, [r7, #14]
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3710      	adds	r7, #16
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b082      	sub	sp, #8
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	460b      	mov	r3, r1
 800d23a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d242:	78fa      	ldrb	r2, [r7, #3]
 800d244:	4611      	mov	r1, r2
 800d246:	4618      	mov	r0, r3
 800d248:	f7f6 fb71 	bl	800392e <HAL_HCD_HC_GetXferCount>
 800d24c:	4603      	mov	r3, r0
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3708      	adds	r7, #8
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}

0800d256 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d256:	b590      	push	{r4, r7, lr}
 800d258:	b089      	sub	sp, #36	; 0x24
 800d25a:	af04      	add	r7, sp, #16
 800d25c:	6078      	str	r0, [r7, #4]
 800d25e:	4608      	mov	r0, r1
 800d260:	4611      	mov	r1, r2
 800d262:	461a      	mov	r2, r3
 800d264:	4603      	mov	r3, r0
 800d266:	70fb      	strb	r3, [r7, #3]
 800d268:	460b      	mov	r3, r1
 800d26a:	70bb      	strb	r3, [r7, #2]
 800d26c:	4613      	mov	r3, r2
 800d26e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d270:	2300      	movs	r3, #0
 800d272:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d274:	2300      	movs	r3, #0
 800d276:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d27e:	787c      	ldrb	r4, [r7, #1]
 800d280:	78ba      	ldrb	r2, [r7, #2]
 800d282:	78f9      	ldrb	r1, [r7, #3]
 800d284:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d286:	9302      	str	r3, [sp, #8]
 800d288:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d28c:	9301      	str	r3, [sp, #4]
 800d28e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d292:	9300      	str	r3, [sp, #0]
 800d294:	4623      	mov	r3, r4
 800d296:	f7f5 ff5d 	bl	8003154 <HAL_HCD_HC_Init>
 800d29a:	4603      	mov	r3, r0
 800d29c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d29e:	7bfb      	ldrb	r3, [r7, #15]
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f000 f8bf 	bl	800d424 <USBH_Get_USB_Status>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3714      	adds	r7, #20
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd90      	pop	{r4, r7, pc}

0800d2b4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b084      	sub	sp, #16
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	460b      	mov	r3, r1
 800d2be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d2ce:	78fa      	ldrb	r2, [r7, #3]
 800d2d0:	4611      	mov	r1, r2
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7f5 fff6 	bl	80032c4 <HAL_HCD_HC_Halt>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d2dc:	7bfb      	ldrb	r3, [r7, #15]
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f000 f8a0 	bl	800d424 <USBH_Get_USB_Status>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3710      	adds	r7, #16
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}

0800d2f2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d2f2:	b590      	push	{r4, r7, lr}
 800d2f4:	b089      	sub	sp, #36	; 0x24
 800d2f6:	af04      	add	r7, sp, #16
 800d2f8:	6078      	str	r0, [r7, #4]
 800d2fa:	4608      	mov	r0, r1
 800d2fc:	4611      	mov	r1, r2
 800d2fe:	461a      	mov	r2, r3
 800d300:	4603      	mov	r3, r0
 800d302:	70fb      	strb	r3, [r7, #3]
 800d304:	460b      	mov	r3, r1
 800d306:	70bb      	strb	r3, [r7, #2]
 800d308:	4613      	mov	r3, r2
 800d30a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d30c:	2300      	movs	r3, #0
 800d30e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d310:	2300      	movs	r3, #0
 800d312:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d31a:	787c      	ldrb	r4, [r7, #1]
 800d31c:	78ba      	ldrb	r2, [r7, #2]
 800d31e:	78f9      	ldrb	r1, [r7, #3]
 800d320:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d324:	9303      	str	r3, [sp, #12]
 800d326:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d328:	9302      	str	r3, [sp, #8]
 800d32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32c:	9301      	str	r3, [sp, #4]
 800d32e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d332:	9300      	str	r3, [sp, #0]
 800d334:	4623      	mov	r3, r4
 800d336:	f7f5 ffe9 	bl	800330c <HAL_HCD_HC_SubmitRequest>
 800d33a:	4603      	mov	r3, r0
 800d33c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d33e:	7bfb      	ldrb	r3, [r7, #15]
 800d340:	4618      	mov	r0, r3
 800d342:	f000 f86f 	bl	800d424 <USBH_Get_USB_Status>
 800d346:	4603      	mov	r3, r0
 800d348:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d34a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3714      	adds	r7, #20
 800d350:	46bd      	mov	sp, r7
 800d352:	bd90      	pop	{r4, r7, pc}

0800d354 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b082      	sub	sp, #8
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	460b      	mov	r3, r1
 800d35e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d366:	78fa      	ldrb	r2, [r7, #3]
 800d368:	4611      	mov	r1, r2
 800d36a:	4618      	mov	r0, r3
 800d36c:	f7f6 faca 	bl	8003904 <HAL_HCD_HC_GetURBState>
 800d370:	4603      	mov	r3, r0
}
 800d372:	4618      	mov	r0, r3
 800d374:	3708      	adds	r7, #8
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}

0800d37a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d37a:	b580      	push	{r7, lr}
 800d37c:	b082      	sub	sp, #8
 800d37e:	af00      	add	r7, sp, #0
 800d380:	6078      	str	r0, [r7, #4]
 800d382:	460b      	mov	r3, r1
 800d384:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d38c:	2b01      	cmp	r3, #1
 800d38e:	d103      	bne.n	800d398 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800d390:	78fb      	ldrb	r3, [r7, #3]
 800d392:	4618      	mov	r0, r3
 800d394:	f000 f872 	bl	800d47c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d398:	20c8      	movs	r0, #200	; 0xc8
 800d39a:	f7f4 ff87 	bl	80022ac <HAL_Delay>
  return USBH_OK;
 800d39e:	2300      	movs	r3, #0
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3708      	adds	r7, #8
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b085      	sub	sp, #20
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	460b      	mov	r3, r1
 800d3b2:	70fb      	strb	r3, [r7, #3]
 800d3b4:	4613      	mov	r3, r2
 800d3b6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d3be:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d3c0:	78fa      	ldrb	r2, [r7, #3]
 800d3c2:	68f9      	ldr	r1, [r7, #12]
 800d3c4:	4613      	mov	r3, r2
 800d3c6:	011b      	lsls	r3, r3, #4
 800d3c8:	1a9b      	subs	r3, r3, r2
 800d3ca:	009b      	lsls	r3, r3, #2
 800d3cc:	440b      	add	r3, r1
 800d3ce:	3317      	adds	r3, #23
 800d3d0:	781b      	ldrb	r3, [r3, #0]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d00a      	beq.n	800d3ec <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d3d6:	78fa      	ldrb	r2, [r7, #3]
 800d3d8:	68f9      	ldr	r1, [r7, #12]
 800d3da:	4613      	mov	r3, r2
 800d3dc:	011b      	lsls	r3, r3, #4
 800d3de:	1a9b      	subs	r3, r3, r2
 800d3e0:	009b      	lsls	r3, r3, #2
 800d3e2:	440b      	add	r3, r1
 800d3e4:	333c      	adds	r3, #60	; 0x3c
 800d3e6:	78ba      	ldrb	r2, [r7, #2]
 800d3e8:	701a      	strb	r2, [r3, #0]
 800d3ea:	e009      	b.n	800d400 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d3ec:	78fa      	ldrb	r2, [r7, #3]
 800d3ee:	68f9      	ldr	r1, [r7, #12]
 800d3f0:	4613      	mov	r3, r2
 800d3f2:	011b      	lsls	r3, r3, #4
 800d3f4:	1a9b      	subs	r3, r3, r2
 800d3f6:	009b      	lsls	r3, r3, #2
 800d3f8:	440b      	add	r3, r1
 800d3fa:	333d      	adds	r3, #61	; 0x3d
 800d3fc:	78ba      	ldrb	r2, [r7, #2]
 800d3fe:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d400:	2300      	movs	r3, #0
}
 800d402:	4618      	mov	r0, r3
 800d404:	3714      	adds	r7, #20
 800d406:	46bd      	mov	sp, r7
 800d408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40c:	4770      	bx	lr

0800d40e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d40e:	b580      	push	{r7, lr}
 800d410:	b082      	sub	sp, #8
 800d412:	af00      	add	r7, sp, #0
 800d414:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f7f4 ff48 	bl	80022ac <HAL_Delay>
}
 800d41c:	bf00      	nop
 800d41e:	3708      	adds	r7, #8
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}

0800d424 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d424:	b480      	push	{r7}
 800d426:	b085      	sub	sp, #20
 800d428:	af00      	add	r7, sp, #0
 800d42a:	4603      	mov	r3, r0
 800d42c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d42e:	2300      	movs	r3, #0
 800d430:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d432:	79fb      	ldrb	r3, [r7, #7]
 800d434:	2b03      	cmp	r3, #3
 800d436:	d817      	bhi.n	800d468 <USBH_Get_USB_Status+0x44>
 800d438:	a201      	add	r2, pc, #4	; (adr r2, 800d440 <USBH_Get_USB_Status+0x1c>)
 800d43a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d43e:	bf00      	nop
 800d440:	0800d451 	.word	0x0800d451
 800d444:	0800d457 	.word	0x0800d457
 800d448:	0800d45d 	.word	0x0800d45d
 800d44c:	0800d463 	.word	0x0800d463
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d450:	2300      	movs	r3, #0
 800d452:	73fb      	strb	r3, [r7, #15]
    break;
 800d454:	e00b      	b.n	800d46e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d456:	2302      	movs	r3, #2
 800d458:	73fb      	strb	r3, [r7, #15]
    break;
 800d45a:	e008      	b.n	800d46e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d45c:	2301      	movs	r3, #1
 800d45e:	73fb      	strb	r3, [r7, #15]
    break;
 800d460:	e005      	b.n	800d46e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d462:	2302      	movs	r3, #2
 800d464:	73fb      	strb	r3, [r7, #15]
    break;
 800d466:	e002      	b.n	800d46e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d468:	2302      	movs	r3, #2
 800d46a:	73fb      	strb	r3, [r7, #15]
    break;
 800d46c:	bf00      	nop
  }
  return usb_status;
 800d46e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d470:	4618      	mov	r0, r3
 800d472:	3714      	adds	r7, #20
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr

0800d47c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b084      	sub	sp, #16
 800d480:	af00      	add	r7, sp, #0
 800d482:	4603      	mov	r3, r0
 800d484:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d486:	79fb      	ldrb	r3, [r7, #7]
 800d488:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800d48a:	79fb      	ldrb	r3, [r7, #7]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d102      	bne.n	800d496 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800d490:	2300      	movs	r3, #0
 800d492:	73fb      	strb	r3, [r7, #15]
 800d494:	e001      	b.n	800d49a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800d496:	2301      	movs	r3, #1
 800d498:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800d49a:	7bfb      	ldrb	r3, [r7, #15]
 800d49c:	461a      	mov	r2, r3
 800d49e:	2101      	movs	r1, #1
 800d4a0:	4803      	ldr	r0, [pc, #12]	; (800d4b0 <MX_DriverVbusFS+0x34>)
 800d4a2:	f7f5 fdd7 	bl	8003054 <HAL_GPIO_WritePin>
}
 800d4a6:	bf00      	nop
 800d4a8:	3710      	adds	r7, #16
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}
 800d4ae:	bf00      	nop
 800d4b0:	40020800 	.word	0x40020800

0800d4b4 <malloc>:
 800d4b4:	4b02      	ldr	r3, [pc, #8]	; (800d4c0 <malloc+0xc>)
 800d4b6:	4601      	mov	r1, r0
 800d4b8:	6818      	ldr	r0, [r3, #0]
 800d4ba:	f000 b82b 	b.w	800d514 <_malloc_r>
 800d4be:	bf00      	nop
 800d4c0:	20000084 	.word	0x20000084

0800d4c4 <free>:
 800d4c4:	4b02      	ldr	r3, [pc, #8]	; (800d4d0 <free+0xc>)
 800d4c6:	4601      	mov	r1, r0
 800d4c8:	6818      	ldr	r0, [r3, #0]
 800d4ca:	f001 bfdb 	b.w	800f484 <_free_r>
 800d4ce:	bf00      	nop
 800d4d0:	20000084 	.word	0x20000084

0800d4d4 <sbrk_aligned>:
 800d4d4:	b570      	push	{r4, r5, r6, lr}
 800d4d6:	4e0e      	ldr	r6, [pc, #56]	; (800d510 <sbrk_aligned+0x3c>)
 800d4d8:	460c      	mov	r4, r1
 800d4da:	6831      	ldr	r1, [r6, #0]
 800d4dc:	4605      	mov	r5, r0
 800d4de:	b911      	cbnz	r1, 800d4e6 <sbrk_aligned+0x12>
 800d4e0:	f001 f8f0 	bl	800e6c4 <_sbrk_r>
 800d4e4:	6030      	str	r0, [r6, #0]
 800d4e6:	4621      	mov	r1, r4
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	f001 f8eb 	bl	800e6c4 <_sbrk_r>
 800d4ee:	1c43      	adds	r3, r0, #1
 800d4f0:	d00a      	beq.n	800d508 <sbrk_aligned+0x34>
 800d4f2:	1cc4      	adds	r4, r0, #3
 800d4f4:	f024 0403 	bic.w	r4, r4, #3
 800d4f8:	42a0      	cmp	r0, r4
 800d4fa:	d007      	beq.n	800d50c <sbrk_aligned+0x38>
 800d4fc:	1a21      	subs	r1, r4, r0
 800d4fe:	4628      	mov	r0, r5
 800d500:	f001 f8e0 	bl	800e6c4 <_sbrk_r>
 800d504:	3001      	adds	r0, #1
 800d506:	d101      	bne.n	800d50c <sbrk_aligned+0x38>
 800d508:	f04f 34ff 	mov.w	r4, #4294967295
 800d50c:	4620      	mov	r0, r4
 800d50e:	bd70      	pop	{r4, r5, r6, pc}
 800d510:	20001084 	.word	0x20001084

0800d514 <_malloc_r>:
 800d514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d518:	1ccd      	adds	r5, r1, #3
 800d51a:	f025 0503 	bic.w	r5, r5, #3
 800d51e:	3508      	adds	r5, #8
 800d520:	2d0c      	cmp	r5, #12
 800d522:	bf38      	it	cc
 800d524:	250c      	movcc	r5, #12
 800d526:	2d00      	cmp	r5, #0
 800d528:	4607      	mov	r7, r0
 800d52a:	db01      	blt.n	800d530 <_malloc_r+0x1c>
 800d52c:	42a9      	cmp	r1, r5
 800d52e:	d905      	bls.n	800d53c <_malloc_r+0x28>
 800d530:	230c      	movs	r3, #12
 800d532:	603b      	str	r3, [r7, #0]
 800d534:	2600      	movs	r6, #0
 800d536:	4630      	mov	r0, r6
 800d538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d53c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d610 <_malloc_r+0xfc>
 800d540:	f000 f868 	bl	800d614 <__malloc_lock>
 800d544:	f8d8 3000 	ldr.w	r3, [r8]
 800d548:	461c      	mov	r4, r3
 800d54a:	bb5c      	cbnz	r4, 800d5a4 <_malloc_r+0x90>
 800d54c:	4629      	mov	r1, r5
 800d54e:	4638      	mov	r0, r7
 800d550:	f7ff ffc0 	bl	800d4d4 <sbrk_aligned>
 800d554:	1c43      	adds	r3, r0, #1
 800d556:	4604      	mov	r4, r0
 800d558:	d155      	bne.n	800d606 <_malloc_r+0xf2>
 800d55a:	f8d8 4000 	ldr.w	r4, [r8]
 800d55e:	4626      	mov	r6, r4
 800d560:	2e00      	cmp	r6, #0
 800d562:	d145      	bne.n	800d5f0 <_malloc_r+0xdc>
 800d564:	2c00      	cmp	r4, #0
 800d566:	d048      	beq.n	800d5fa <_malloc_r+0xe6>
 800d568:	6823      	ldr	r3, [r4, #0]
 800d56a:	4631      	mov	r1, r6
 800d56c:	4638      	mov	r0, r7
 800d56e:	eb04 0903 	add.w	r9, r4, r3
 800d572:	f001 f8a7 	bl	800e6c4 <_sbrk_r>
 800d576:	4581      	cmp	r9, r0
 800d578:	d13f      	bne.n	800d5fa <_malloc_r+0xe6>
 800d57a:	6821      	ldr	r1, [r4, #0]
 800d57c:	1a6d      	subs	r5, r5, r1
 800d57e:	4629      	mov	r1, r5
 800d580:	4638      	mov	r0, r7
 800d582:	f7ff ffa7 	bl	800d4d4 <sbrk_aligned>
 800d586:	3001      	adds	r0, #1
 800d588:	d037      	beq.n	800d5fa <_malloc_r+0xe6>
 800d58a:	6823      	ldr	r3, [r4, #0]
 800d58c:	442b      	add	r3, r5
 800d58e:	6023      	str	r3, [r4, #0]
 800d590:	f8d8 3000 	ldr.w	r3, [r8]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d038      	beq.n	800d60a <_malloc_r+0xf6>
 800d598:	685a      	ldr	r2, [r3, #4]
 800d59a:	42a2      	cmp	r2, r4
 800d59c:	d12b      	bne.n	800d5f6 <_malloc_r+0xe2>
 800d59e:	2200      	movs	r2, #0
 800d5a0:	605a      	str	r2, [r3, #4]
 800d5a2:	e00f      	b.n	800d5c4 <_malloc_r+0xb0>
 800d5a4:	6822      	ldr	r2, [r4, #0]
 800d5a6:	1b52      	subs	r2, r2, r5
 800d5a8:	d41f      	bmi.n	800d5ea <_malloc_r+0xd6>
 800d5aa:	2a0b      	cmp	r2, #11
 800d5ac:	d917      	bls.n	800d5de <_malloc_r+0xca>
 800d5ae:	1961      	adds	r1, r4, r5
 800d5b0:	42a3      	cmp	r3, r4
 800d5b2:	6025      	str	r5, [r4, #0]
 800d5b4:	bf18      	it	ne
 800d5b6:	6059      	strne	r1, [r3, #4]
 800d5b8:	6863      	ldr	r3, [r4, #4]
 800d5ba:	bf08      	it	eq
 800d5bc:	f8c8 1000 	streq.w	r1, [r8]
 800d5c0:	5162      	str	r2, [r4, r5]
 800d5c2:	604b      	str	r3, [r1, #4]
 800d5c4:	4638      	mov	r0, r7
 800d5c6:	f104 060b 	add.w	r6, r4, #11
 800d5ca:	f000 f829 	bl	800d620 <__malloc_unlock>
 800d5ce:	f026 0607 	bic.w	r6, r6, #7
 800d5d2:	1d23      	adds	r3, r4, #4
 800d5d4:	1af2      	subs	r2, r6, r3
 800d5d6:	d0ae      	beq.n	800d536 <_malloc_r+0x22>
 800d5d8:	1b9b      	subs	r3, r3, r6
 800d5da:	50a3      	str	r3, [r4, r2]
 800d5dc:	e7ab      	b.n	800d536 <_malloc_r+0x22>
 800d5de:	42a3      	cmp	r3, r4
 800d5e0:	6862      	ldr	r2, [r4, #4]
 800d5e2:	d1dd      	bne.n	800d5a0 <_malloc_r+0x8c>
 800d5e4:	f8c8 2000 	str.w	r2, [r8]
 800d5e8:	e7ec      	b.n	800d5c4 <_malloc_r+0xb0>
 800d5ea:	4623      	mov	r3, r4
 800d5ec:	6864      	ldr	r4, [r4, #4]
 800d5ee:	e7ac      	b.n	800d54a <_malloc_r+0x36>
 800d5f0:	4634      	mov	r4, r6
 800d5f2:	6876      	ldr	r6, [r6, #4]
 800d5f4:	e7b4      	b.n	800d560 <_malloc_r+0x4c>
 800d5f6:	4613      	mov	r3, r2
 800d5f8:	e7cc      	b.n	800d594 <_malloc_r+0x80>
 800d5fa:	230c      	movs	r3, #12
 800d5fc:	603b      	str	r3, [r7, #0]
 800d5fe:	4638      	mov	r0, r7
 800d600:	f000 f80e 	bl	800d620 <__malloc_unlock>
 800d604:	e797      	b.n	800d536 <_malloc_r+0x22>
 800d606:	6025      	str	r5, [r4, #0]
 800d608:	e7dc      	b.n	800d5c4 <_malloc_r+0xb0>
 800d60a:	605b      	str	r3, [r3, #4]
 800d60c:	deff      	udf	#255	; 0xff
 800d60e:	bf00      	nop
 800d610:	20001080 	.word	0x20001080

0800d614 <__malloc_lock>:
 800d614:	4801      	ldr	r0, [pc, #4]	; (800d61c <__malloc_lock+0x8>)
 800d616:	f001 b8a2 	b.w	800e75e <__retarget_lock_acquire_recursive>
 800d61a:	bf00      	nop
 800d61c:	200011c8 	.word	0x200011c8

0800d620 <__malloc_unlock>:
 800d620:	4801      	ldr	r0, [pc, #4]	; (800d628 <__malloc_unlock+0x8>)
 800d622:	f001 b89d 	b.w	800e760 <__retarget_lock_release_recursive>
 800d626:	bf00      	nop
 800d628:	200011c8 	.word	0x200011c8

0800d62c <__cvt>:
 800d62c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d630:	ec55 4b10 	vmov	r4, r5, d0
 800d634:	2d00      	cmp	r5, #0
 800d636:	460e      	mov	r6, r1
 800d638:	4619      	mov	r1, r3
 800d63a:	462b      	mov	r3, r5
 800d63c:	bfbb      	ittet	lt
 800d63e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d642:	461d      	movlt	r5, r3
 800d644:	2300      	movge	r3, #0
 800d646:	232d      	movlt	r3, #45	; 0x2d
 800d648:	700b      	strb	r3, [r1, #0]
 800d64a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d64c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d650:	4691      	mov	r9, r2
 800d652:	f023 0820 	bic.w	r8, r3, #32
 800d656:	bfbc      	itt	lt
 800d658:	4622      	movlt	r2, r4
 800d65a:	4614      	movlt	r4, r2
 800d65c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d660:	d005      	beq.n	800d66e <__cvt+0x42>
 800d662:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d666:	d100      	bne.n	800d66a <__cvt+0x3e>
 800d668:	3601      	adds	r6, #1
 800d66a:	2102      	movs	r1, #2
 800d66c:	e000      	b.n	800d670 <__cvt+0x44>
 800d66e:	2103      	movs	r1, #3
 800d670:	ab03      	add	r3, sp, #12
 800d672:	9301      	str	r3, [sp, #4]
 800d674:	ab02      	add	r3, sp, #8
 800d676:	9300      	str	r3, [sp, #0]
 800d678:	ec45 4b10 	vmov	d0, r4, r5
 800d67c:	4653      	mov	r3, sl
 800d67e:	4632      	mov	r2, r6
 800d680:	f001 f90e 	bl	800e8a0 <_dtoa_r>
 800d684:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d688:	4607      	mov	r7, r0
 800d68a:	d102      	bne.n	800d692 <__cvt+0x66>
 800d68c:	f019 0f01 	tst.w	r9, #1
 800d690:	d022      	beq.n	800d6d8 <__cvt+0xac>
 800d692:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d696:	eb07 0906 	add.w	r9, r7, r6
 800d69a:	d110      	bne.n	800d6be <__cvt+0x92>
 800d69c:	783b      	ldrb	r3, [r7, #0]
 800d69e:	2b30      	cmp	r3, #48	; 0x30
 800d6a0:	d10a      	bne.n	800d6b8 <__cvt+0x8c>
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	4629      	mov	r1, r5
 800d6aa:	f7f3 fa0d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6ae:	b918      	cbnz	r0, 800d6b8 <__cvt+0x8c>
 800d6b0:	f1c6 0601 	rsb	r6, r6, #1
 800d6b4:	f8ca 6000 	str.w	r6, [sl]
 800d6b8:	f8da 3000 	ldr.w	r3, [sl]
 800d6bc:	4499      	add	r9, r3
 800d6be:	2200      	movs	r2, #0
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	4620      	mov	r0, r4
 800d6c4:	4629      	mov	r1, r5
 800d6c6:	f7f3 f9ff 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6ca:	b108      	cbz	r0, 800d6d0 <__cvt+0xa4>
 800d6cc:	f8cd 900c 	str.w	r9, [sp, #12]
 800d6d0:	2230      	movs	r2, #48	; 0x30
 800d6d2:	9b03      	ldr	r3, [sp, #12]
 800d6d4:	454b      	cmp	r3, r9
 800d6d6:	d307      	bcc.n	800d6e8 <__cvt+0xbc>
 800d6d8:	9b03      	ldr	r3, [sp, #12]
 800d6da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d6dc:	1bdb      	subs	r3, r3, r7
 800d6de:	4638      	mov	r0, r7
 800d6e0:	6013      	str	r3, [r2, #0]
 800d6e2:	b004      	add	sp, #16
 800d6e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6e8:	1c59      	adds	r1, r3, #1
 800d6ea:	9103      	str	r1, [sp, #12]
 800d6ec:	701a      	strb	r2, [r3, #0]
 800d6ee:	e7f0      	b.n	800d6d2 <__cvt+0xa6>

0800d6f0 <__exponent>:
 800d6f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	2900      	cmp	r1, #0
 800d6f6:	bfb8      	it	lt
 800d6f8:	4249      	neglt	r1, r1
 800d6fa:	f803 2b02 	strb.w	r2, [r3], #2
 800d6fe:	bfb4      	ite	lt
 800d700:	222d      	movlt	r2, #45	; 0x2d
 800d702:	222b      	movge	r2, #43	; 0x2b
 800d704:	2909      	cmp	r1, #9
 800d706:	7042      	strb	r2, [r0, #1]
 800d708:	dd2a      	ble.n	800d760 <__exponent+0x70>
 800d70a:	f10d 0207 	add.w	r2, sp, #7
 800d70e:	4617      	mov	r7, r2
 800d710:	260a      	movs	r6, #10
 800d712:	4694      	mov	ip, r2
 800d714:	fb91 f5f6 	sdiv	r5, r1, r6
 800d718:	fb06 1415 	mls	r4, r6, r5, r1
 800d71c:	3430      	adds	r4, #48	; 0x30
 800d71e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d722:	460c      	mov	r4, r1
 800d724:	2c63      	cmp	r4, #99	; 0x63
 800d726:	f102 32ff 	add.w	r2, r2, #4294967295
 800d72a:	4629      	mov	r1, r5
 800d72c:	dcf1      	bgt.n	800d712 <__exponent+0x22>
 800d72e:	3130      	adds	r1, #48	; 0x30
 800d730:	f1ac 0402 	sub.w	r4, ip, #2
 800d734:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d738:	1c41      	adds	r1, r0, #1
 800d73a:	4622      	mov	r2, r4
 800d73c:	42ba      	cmp	r2, r7
 800d73e:	d30a      	bcc.n	800d756 <__exponent+0x66>
 800d740:	f10d 0209 	add.w	r2, sp, #9
 800d744:	eba2 020c 	sub.w	r2, r2, ip
 800d748:	42bc      	cmp	r4, r7
 800d74a:	bf88      	it	hi
 800d74c:	2200      	movhi	r2, #0
 800d74e:	4413      	add	r3, r2
 800d750:	1a18      	subs	r0, r3, r0
 800d752:	b003      	add	sp, #12
 800d754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d756:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d75a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d75e:	e7ed      	b.n	800d73c <__exponent+0x4c>
 800d760:	2330      	movs	r3, #48	; 0x30
 800d762:	3130      	adds	r1, #48	; 0x30
 800d764:	7083      	strb	r3, [r0, #2]
 800d766:	70c1      	strb	r1, [r0, #3]
 800d768:	1d03      	adds	r3, r0, #4
 800d76a:	e7f1      	b.n	800d750 <__exponent+0x60>

0800d76c <_printf_float>:
 800d76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d770:	ed2d 8b02 	vpush	{d8}
 800d774:	b08d      	sub	sp, #52	; 0x34
 800d776:	460c      	mov	r4, r1
 800d778:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d77c:	4616      	mov	r6, r2
 800d77e:	461f      	mov	r7, r3
 800d780:	4605      	mov	r5, r0
 800d782:	f000 ff67 	bl	800e654 <_localeconv_r>
 800d786:	f8d0 a000 	ldr.w	sl, [r0]
 800d78a:	4650      	mov	r0, sl
 800d78c:	f7f2 fd70 	bl	8000270 <strlen>
 800d790:	2300      	movs	r3, #0
 800d792:	930a      	str	r3, [sp, #40]	; 0x28
 800d794:	6823      	ldr	r3, [r4, #0]
 800d796:	9305      	str	r3, [sp, #20]
 800d798:	f8d8 3000 	ldr.w	r3, [r8]
 800d79c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d7a0:	3307      	adds	r3, #7
 800d7a2:	f023 0307 	bic.w	r3, r3, #7
 800d7a6:	f103 0208 	add.w	r2, r3, #8
 800d7aa:	f8c8 2000 	str.w	r2, [r8]
 800d7ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d7b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d7b6:	9307      	str	r3, [sp, #28]
 800d7b8:	f8cd 8018 	str.w	r8, [sp, #24]
 800d7bc:	ee08 0a10 	vmov	s16, r0
 800d7c0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d7c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d7c8:	4b9e      	ldr	r3, [pc, #632]	; (800da44 <_printf_float+0x2d8>)
 800d7ca:	f04f 32ff 	mov.w	r2, #4294967295
 800d7ce:	f7f3 f9ad 	bl	8000b2c <__aeabi_dcmpun>
 800d7d2:	bb88      	cbnz	r0, 800d838 <_printf_float+0xcc>
 800d7d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d7d8:	4b9a      	ldr	r3, [pc, #616]	; (800da44 <_printf_float+0x2d8>)
 800d7da:	f04f 32ff 	mov.w	r2, #4294967295
 800d7de:	f7f3 f987 	bl	8000af0 <__aeabi_dcmple>
 800d7e2:	bb48      	cbnz	r0, 800d838 <_printf_float+0xcc>
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	4640      	mov	r0, r8
 800d7ea:	4649      	mov	r1, r9
 800d7ec:	f7f3 f976 	bl	8000adc <__aeabi_dcmplt>
 800d7f0:	b110      	cbz	r0, 800d7f8 <_printf_float+0x8c>
 800d7f2:	232d      	movs	r3, #45	; 0x2d
 800d7f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7f8:	4a93      	ldr	r2, [pc, #588]	; (800da48 <_printf_float+0x2dc>)
 800d7fa:	4b94      	ldr	r3, [pc, #592]	; (800da4c <_printf_float+0x2e0>)
 800d7fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d800:	bf94      	ite	ls
 800d802:	4690      	movls	r8, r2
 800d804:	4698      	movhi	r8, r3
 800d806:	2303      	movs	r3, #3
 800d808:	6123      	str	r3, [r4, #16]
 800d80a:	9b05      	ldr	r3, [sp, #20]
 800d80c:	f023 0304 	bic.w	r3, r3, #4
 800d810:	6023      	str	r3, [r4, #0]
 800d812:	f04f 0900 	mov.w	r9, #0
 800d816:	9700      	str	r7, [sp, #0]
 800d818:	4633      	mov	r3, r6
 800d81a:	aa0b      	add	r2, sp, #44	; 0x2c
 800d81c:	4621      	mov	r1, r4
 800d81e:	4628      	mov	r0, r5
 800d820:	f000 f9da 	bl	800dbd8 <_printf_common>
 800d824:	3001      	adds	r0, #1
 800d826:	f040 8090 	bne.w	800d94a <_printf_float+0x1de>
 800d82a:	f04f 30ff 	mov.w	r0, #4294967295
 800d82e:	b00d      	add	sp, #52	; 0x34
 800d830:	ecbd 8b02 	vpop	{d8}
 800d834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d838:	4642      	mov	r2, r8
 800d83a:	464b      	mov	r3, r9
 800d83c:	4640      	mov	r0, r8
 800d83e:	4649      	mov	r1, r9
 800d840:	f7f3 f974 	bl	8000b2c <__aeabi_dcmpun>
 800d844:	b140      	cbz	r0, 800d858 <_printf_float+0xec>
 800d846:	464b      	mov	r3, r9
 800d848:	2b00      	cmp	r3, #0
 800d84a:	bfbc      	itt	lt
 800d84c:	232d      	movlt	r3, #45	; 0x2d
 800d84e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d852:	4a7f      	ldr	r2, [pc, #508]	; (800da50 <_printf_float+0x2e4>)
 800d854:	4b7f      	ldr	r3, [pc, #508]	; (800da54 <_printf_float+0x2e8>)
 800d856:	e7d1      	b.n	800d7fc <_printf_float+0x90>
 800d858:	6863      	ldr	r3, [r4, #4]
 800d85a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d85e:	9206      	str	r2, [sp, #24]
 800d860:	1c5a      	adds	r2, r3, #1
 800d862:	d13f      	bne.n	800d8e4 <_printf_float+0x178>
 800d864:	2306      	movs	r3, #6
 800d866:	6063      	str	r3, [r4, #4]
 800d868:	9b05      	ldr	r3, [sp, #20]
 800d86a:	6861      	ldr	r1, [r4, #4]
 800d86c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d870:	2300      	movs	r3, #0
 800d872:	9303      	str	r3, [sp, #12]
 800d874:	ab0a      	add	r3, sp, #40	; 0x28
 800d876:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d87a:	ab09      	add	r3, sp, #36	; 0x24
 800d87c:	ec49 8b10 	vmov	d0, r8, r9
 800d880:	9300      	str	r3, [sp, #0]
 800d882:	6022      	str	r2, [r4, #0]
 800d884:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d888:	4628      	mov	r0, r5
 800d88a:	f7ff fecf 	bl	800d62c <__cvt>
 800d88e:	9b06      	ldr	r3, [sp, #24]
 800d890:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d892:	2b47      	cmp	r3, #71	; 0x47
 800d894:	4680      	mov	r8, r0
 800d896:	d108      	bne.n	800d8aa <_printf_float+0x13e>
 800d898:	1cc8      	adds	r0, r1, #3
 800d89a:	db02      	blt.n	800d8a2 <_printf_float+0x136>
 800d89c:	6863      	ldr	r3, [r4, #4]
 800d89e:	4299      	cmp	r1, r3
 800d8a0:	dd41      	ble.n	800d926 <_printf_float+0x1ba>
 800d8a2:	f1ab 0302 	sub.w	r3, fp, #2
 800d8a6:	fa5f fb83 	uxtb.w	fp, r3
 800d8aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d8ae:	d820      	bhi.n	800d8f2 <_printf_float+0x186>
 800d8b0:	3901      	subs	r1, #1
 800d8b2:	465a      	mov	r2, fp
 800d8b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d8b8:	9109      	str	r1, [sp, #36]	; 0x24
 800d8ba:	f7ff ff19 	bl	800d6f0 <__exponent>
 800d8be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8c0:	1813      	adds	r3, r2, r0
 800d8c2:	2a01      	cmp	r2, #1
 800d8c4:	4681      	mov	r9, r0
 800d8c6:	6123      	str	r3, [r4, #16]
 800d8c8:	dc02      	bgt.n	800d8d0 <_printf_float+0x164>
 800d8ca:	6822      	ldr	r2, [r4, #0]
 800d8cc:	07d2      	lsls	r2, r2, #31
 800d8ce:	d501      	bpl.n	800d8d4 <_printf_float+0x168>
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	6123      	str	r3, [r4, #16]
 800d8d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d09c      	beq.n	800d816 <_printf_float+0xaa>
 800d8dc:	232d      	movs	r3, #45	; 0x2d
 800d8de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8e2:	e798      	b.n	800d816 <_printf_float+0xaa>
 800d8e4:	9a06      	ldr	r2, [sp, #24]
 800d8e6:	2a47      	cmp	r2, #71	; 0x47
 800d8e8:	d1be      	bne.n	800d868 <_printf_float+0xfc>
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d1bc      	bne.n	800d868 <_printf_float+0xfc>
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	e7b9      	b.n	800d866 <_printf_float+0xfa>
 800d8f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d8f6:	d118      	bne.n	800d92a <_printf_float+0x1be>
 800d8f8:	2900      	cmp	r1, #0
 800d8fa:	6863      	ldr	r3, [r4, #4]
 800d8fc:	dd0b      	ble.n	800d916 <_printf_float+0x1aa>
 800d8fe:	6121      	str	r1, [r4, #16]
 800d900:	b913      	cbnz	r3, 800d908 <_printf_float+0x19c>
 800d902:	6822      	ldr	r2, [r4, #0]
 800d904:	07d0      	lsls	r0, r2, #31
 800d906:	d502      	bpl.n	800d90e <_printf_float+0x1a2>
 800d908:	3301      	adds	r3, #1
 800d90a:	440b      	add	r3, r1
 800d90c:	6123      	str	r3, [r4, #16]
 800d90e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d910:	f04f 0900 	mov.w	r9, #0
 800d914:	e7de      	b.n	800d8d4 <_printf_float+0x168>
 800d916:	b913      	cbnz	r3, 800d91e <_printf_float+0x1b2>
 800d918:	6822      	ldr	r2, [r4, #0]
 800d91a:	07d2      	lsls	r2, r2, #31
 800d91c:	d501      	bpl.n	800d922 <_printf_float+0x1b6>
 800d91e:	3302      	adds	r3, #2
 800d920:	e7f4      	b.n	800d90c <_printf_float+0x1a0>
 800d922:	2301      	movs	r3, #1
 800d924:	e7f2      	b.n	800d90c <_printf_float+0x1a0>
 800d926:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d92a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d92c:	4299      	cmp	r1, r3
 800d92e:	db05      	blt.n	800d93c <_printf_float+0x1d0>
 800d930:	6823      	ldr	r3, [r4, #0]
 800d932:	6121      	str	r1, [r4, #16]
 800d934:	07d8      	lsls	r0, r3, #31
 800d936:	d5ea      	bpl.n	800d90e <_printf_float+0x1a2>
 800d938:	1c4b      	adds	r3, r1, #1
 800d93a:	e7e7      	b.n	800d90c <_printf_float+0x1a0>
 800d93c:	2900      	cmp	r1, #0
 800d93e:	bfd4      	ite	le
 800d940:	f1c1 0202 	rsble	r2, r1, #2
 800d944:	2201      	movgt	r2, #1
 800d946:	4413      	add	r3, r2
 800d948:	e7e0      	b.n	800d90c <_printf_float+0x1a0>
 800d94a:	6823      	ldr	r3, [r4, #0]
 800d94c:	055a      	lsls	r2, r3, #21
 800d94e:	d407      	bmi.n	800d960 <_printf_float+0x1f4>
 800d950:	6923      	ldr	r3, [r4, #16]
 800d952:	4642      	mov	r2, r8
 800d954:	4631      	mov	r1, r6
 800d956:	4628      	mov	r0, r5
 800d958:	47b8      	blx	r7
 800d95a:	3001      	adds	r0, #1
 800d95c:	d12c      	bne.n	800d9b8 <_printf_float+0x24c>
 800d95e:	e764      	b.n	800d82a <_printf_float+0xbe>
 800d960:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d964:	f240 80e0 	bls.w	800db28 <_printf_float+0x3bc>
 800d968:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d96c:	2200      	movs	r2, #0
 800d96e:	2300      	movs	r3, #0
 800d970:	f7f3 f8aa 	bl	8000ac8 <__aeabi_dcmpeq>
 800d974:	2800      	cmp	r0, #0
 800d976:	d034      	beq.n	800d9e2 <_printf_float+0x276>
 800d978:	4a37      	ldr	r2, [pc, #220]	; (800da58 <_printf_float+0x2ec>)
 800d97a:	2301      	movs	r3, #1
 800d97c:	4631      	mov	r1, r6
 800d97e:	4628      	mov	r0, r5
 800d980:	47b8      	blx	r7
 800d982:	3001      	adds	r0, #1
 800d984:	f43f af51 	beq.w	800d82a <_printf_float+0xbe>
 800d988:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d98c:	429a      	cmp	r2, r3
 800d98e:	db02      	blt.n	800d996 <_printf_float+0x22a>
 800d990:	6823      	ldr	r3, [r4, #0]
 800d992:	07d8      	lsls	r0, r3, #31
 800d994:	d510      	bpl.n	800d9b8 <_printf_float+0x24c>
 800d996:	ee18 3a10 	vmov	r3, s16
 800d99a:	4652      	mov	r2, sl
 800d99c:	4631      	mov	r1, r6
 800d99e:	4628      	mov	r0, r5
 800d9a0:	47b8      	blx	r7
 800d9a2:	3001      	adds	r0, #1
 800d9a4:	f43f af41 	beq.w	800d82a <_printf_float+0xbe>
 800d9a8:	f04f 0800 	mov.w	r8, #0
 800d9ac:	f104 091a 	add.w	r9, r4, #26
 800d9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9b2:	3b01      	subs	r3, #1
 800d9b4:	4543      	cmp	r3, r8
 800d9b6:	dc09      	bgt.n	800d9cc <_printf_float+0x260>
 800d9b8:	6823      	ldr	r3, [r4, #0]
 800d9ba:	079b      	lsls	r3, r3, #30
 800d9bc:	f100 8107 	bmi.w	800dbce <_printf_float+0x462>
 800d9c0:	68e0      	ldr	r0, [r4, #12]
 800d9c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9c4:	4298      	cmp	r0, r3
 800d9c6:	bfb8      	it	lt
 800d9c8:	4618      	movlt	r0, r3
 800d9ca:	e730      	b.n	800d82e <_printf_float+0xc2>
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	464a      	mov	r2, r9
 800d9d0:	4631      	mov	r1, r6
 800d9d2:	4628      	mov	r0, r5
 800d9d4:	47b8      	blx	r7
 800d9d6:	3001      	adds	r0, #1
 800d9d8:	f43f af27 	beq.w	800d82a <_printf_float+0xbe>
 800d9dc:	f108 0801 	add.w	r8, r8, #1
 800d9e0:	e7e6      	b.n	800d9b0 <_printf_float+0x244>
 800d9e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	dc39      	bgt.n	800da5c <_printf_float+0x2f0>
 800d9e8:	4a1b      	ldr	r2, [pc, #108]	; (800da58 <_printf_float+0x2ec>)
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	4631      	mov	r1, r6
 800d9ee:	4628      	mov	r0, r5
 800d9f0:	47b8      	blx	r7
 800d9f2:	3001      	adds	r0, #1
 800d9f4:	f43f af19 	beq.w	800d82a <_printf_float+0xbe>
 800d9f8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d9fc:	4313      	orrs	r3, r2
 800d9fe:	d102      	bne.n	800da06 <_printf_float+0x29a>
 800da00:	6823      	ldr	r3, [r4, #0]
 800da02:	07d9      	lsls	r1, r3, #31
 800da04:	d5d8      	bpl.n	800d9b8 <_printf_float+0x24c>
 800da06:	ee18 3a10 	vmov	r3, s16
 800da0a:	4652      	mov	r2, sl
 800da0c:	4631      	mov	r1, r6
 800da0e:	4628      	mov	r0, r5
 800da10:	47b8      	blx	r7
 800da12:	3001      	adds	r0, #1
 800da14:	f43f af09 	beq.w	800d82a <_printf_float+0xbe>
 800da18:	f04f 0900 	mov.w	r9, #0
 800da1c:	f104 0a1a 	add.w	sl, r4, #26
 800da20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da22:	425b      	negs	r3, r3
 800da24:	454b      	cmp	r3, r9
 800da26:	dc01      	bgt.n	800da2c <_printf_float+0x2c0>
 800da28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da2a:	e792      	b.n	800d952 <_printf_float+0x1e6>
 800da2c:	2301      	movs	r3, #1
 800da2e:	4652      	mov	r2, sl
 800da30:	4631      	mov	r1, r6
 800da32:	4628      	mov	r0, r5
 800da34:	47b8      	blx	r7
 800da36:	3001      	adds	r0, #1
 800da38:	f43f aef7 	beq.w	800d82a <_printf_float+0xbe>
 800da3c:	f109 0901 	add.w	r9, r9, #1
 800da40:	e7ee      	b.n	800da20 <_printf_float+0x2b4>
 800da42:	bf00      	nop
 800da44:	7fefffff 	.word	0x7fefffff
 800da48:	0801261c 	.word	0x0801261c
 800da4c:	08012620 	.word	0x08012620
 800da50:	08012624 	.word	0x08012624
 800da54:	08012628 	.word	0x08012628
 800da58:	080129b8 	.word	0x080129b8
 800da5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800da60:	429a      	cmp	r2, r3
 800da62:	bfa8      	it	ge
 800da64:	461a      	movge	r2, r3
 800da66:	2a00      	cmp	r2, #0
 800da68:	4691      	mov	r9, r2
 800da6a:	dc37      	bgt.n	800dadc <_printf_float+0x370>
 800da6c:	f04f 0b00 	mov.w	fp, #0
 800da70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da74:	f104 021a 	add.w	r2, r4, #26
 800da78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800da7a:	9305      	str	r3, [sp, #20]
 800da7c:	eba3 0309 	sub.w	r3, r3, r9
 800da80:	455b      	cmp	r3, fp
 800da82:	dc33      	bgt.n	800daec <_printf_float+0x380>
 800da84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da88:	429a      	cmp	r2, r3
 800da8a:	db3b      	blt.n	800db04 <_printf_float+0x398>
 800da8c:	6823      	ldr	r3, [r4, #0]
 800da8e:	07da      	lsls	r2, r3, #31
 800da90:	d438      	bmi.n	800db04 <_printf_float+0x398>
 800da92:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800da96:	eba2 0903 	sub.w	r9, r2, r3
 800da9a:	9b05      	ldr	r3, [sp, #20]
 800da9c:	1ad2      	subs	r2, r2, r3
 800da9e:	4591      	cmp	r9, r2
 800daa0:	bfa8      	it	ge
 800daa2:	4691      	movge	r9, r2
 800daa4:	f1b9 0f00 	cmp.w	r9, #0
 800daa8:	dc35      	bgt.n	800db16 <_printf_float+0x3aa>
 800daaa:	f04f 0800 	mov.w	r8, #0
 800daae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dab2:	f104 0a1a 	add.w	sl, r4, #26
 800dab6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800daba:	1a9b      	subs	r3, r3, r2
 800dabc:	eba3 0309 	sub.w	r3, r3, r9
 800dac0:	4543      	cmp	r3, r8
 800dac2:	f77f af79 	ble.w	800d9b8 <_printf_float+0x24c>
 800dac6:	2301      	movs	r3, #1
 800dac8:	4652      	mov	r2, sl
 800daca:	4631      	mov	r1, r6
 800dacc:	4628      	mov	r0, r5
 800dace:	47b8      	blx	r7
 800dad0:	3001      	adds	r0, #1
 800dad2:	f43f aeaa 	beq.w	800d82a <_printf_float+0xbe>
 800dad6:	f108 0801 	add.w	r8, r8, #1
 800dada:	e7ec      	b.n	800dab6 <_printf_float+0x34a>
 800dadc:	4613      	mov	r3, r2
 800dade:	4631      	mov	r1, r6
 800dae0:	4642      	mov	r2, r8
 800dae2:	4628      	mov	r0, r5
 800dae4:	47b8      	blx	r7
 800dae6:	3001      	adds	r0, #1
 800dae8:	d1c0      	bne.n	800da6c <_printf_float+0x300>
 800daea:	e69e      	b.n	800d82a <_printf_float+0xbe>
 800daec:	2301      	movs	r3, #1
 800daee:	4631      	mov	r1, r6
 800daf0:	4628      	mov	r0, r5
 800daf2:	9205      	str	r2, [sp, #20]
 800daf4:	47b8      	blx	r7
 800daf6:	3001      	adds	r0, #1
 800daf8:	f43f ae97 	beq.w	800d82a <_printf_float+0xbe>
 800dafc:	9a05      	ldr	r2, [sp, #20]
 800dafe:	f10b 0b01 	add.w	fp, fp, #1
 800db02:	e7b9      	b.n	800da78 <_printf_float+0x30c>
 800db04:	ee18 3a10 	vmov	r3, s16
 800db08:	4652      	mov	r2, sl
 800db0a:	4631      	mov	r1, r6
 800db0c:	4628      	mov	r0, r5
 800db0e:	47b8      	blx	r7
 800db10:	3001      	adds	r0, #1
 800db12:	d1be      	bne.n	800da92 <_printf_float+0x326>
 800db14:	e689      	b.n	800d82a <_printf_float+0xbe>
 800db16:	9a05      	ldr	r2, [sp, #20]
 800db18:	464b      	mov	r3, r9
 800db1a:	4442      	add	r2, r8
 800db1c:	4631      	mov	r1, r6
 800db1e:	4628      	mov	r0, r5
 800db20:	47b8      	blx	r7
 800db22:	3001      	adds	r0, #1
 800db24:	d1c1      	bne.n	800daaa <_printf_float+0x33e>
 800db26:	e680      	b.n	800d82a <_printf_float+0xbe>
 800db28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db2a:	2a01      	cmp	r2, #1
 800db2c:	dc01      	bgt.n	800db32 <_printf_float+0x3c6>
 800db2e:	07db      	lsls	r3, r3, #31
 800db30:	d53a      	bpl.n	800dba8 <_printf_float+0x43c>
 800db32:	2301      	movs	r3, #1
 800db34:	4642      	mov	r2, r8
 800db36:	4631      	mov	r1, r6
 800db38:	4628      	mov	r0, r5
 800db3a:	47b8      	blx	r7
 800db3c:	3001      	adds	r0, #1
 800db3e:	f43f ae74 	beq.w	800d82a <_printf_float+0xbe>
 800db42:	ee18 3a10 	vmov	r3, s16
 800db46:	4652      	mov	r2, sl
 800db48:	4631      	mov	r1, r6
 800db4a:	4628      	mov	r0, r5
 800db4c:	47b8      	blx	r7
 800db4e:	3001      	adds	r0, #1
 800db50:	f43f ae6b 	beq.w	800d82a <_printf_float+0xbe>
 800db54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800db58:	2200      	movs	r2, #0
 800db5a:	2300      	movs	r3, #0
 800db5c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800db60:	f7f2 ffb2 	bl	8000ac8 <__aeabi_dcmpeq>
 800db64:	b9d8      	cbnz	r0, 800db9e <_printf_float+0x432>
 800db66:	f10a 33ff 	add.w	r3, sl, #4294967295
 800db6a:	f108 0201 	add.w	r2, r8, #1
 800db6e:	4631      	mov	r1, r6
 800db70:	4628      	mov	r0, r5
 800db72:	47b8      	blx	r7
 800db74:	3001      	adds	r0, #1
 800db76:	d10e      	bne.n	800db96 <_printf_float+0x42a>
 800db78:	e657      	b.n	800d82a <_printf_float+0xbe>
 800db7a:	2301      	movs	r3, #1
 800db7c:	4652      	mov	r2, sl
 800db7e:	4631      	mov	r1, r6
 800db80:	4628      	mov	r0, r5
 800db82:	47b8      	blx	r7
 800db84:	3001      	adds	r0, #1
 800db86:	f43f ae50 	beq.w	800d82a <_printf_float+0xbe>
 800db8a:	f108 0801 	add.w	r8, r8, #1
 800db8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db90:	3b01      	subs	r3, #1
 800db92:	4543      	cmp	r3, r8
 800db94:	dcf1      	bgt.n	800db7a <_printf_float+0x40e>
 800db96:	464b      	mov	r3, r9
 800db98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800db9c:	e6da      	b.n	800d954 <_printf_float+0x1e8>
 800db9e:	f04f 0800 	mov.w	r8, #0
 800dba2:	f104 0a1a 	add.w	sl, r4, #26
 800dba6:	e7f2      	b.n	800db8e <_printf_float+0x422>
 800dba8:	2301      	movs	r3, #1
 800dbaa:	4642      	mov	r2, r8
 800dbac:	e7df      	b.n	800db6e <_printf_float+0x402>
 800dbae:	2301      	movs	r3, #1
 800dbb0:	464a      	mov	r2, r9
 800dbb2:	4631      	mov	r1, r6
 800dbb4:	4628      	mov	r0, r5
 800dbb6:	47b8      	blx	r7
 800dbb8:	3001      	adds	r0, #1
 800dbba:	f43f ae36 	beq.w	800d82a <_printf_float+0xbe>
 800dbbe:	f108 0801 	add.w	r8, r8, #1
 800dbc2:	68e3      	ldr	r3, [r4, #12]
 800dbc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dbc6:	1a5b      	subs	r3, r3, r1
 800dbc8:	4543      	cmp	r3, r8
 800dbca:	dcf0      	bgt.n	800dbae <_printf_float+0x442>
 800dbcc:	e6f8      	b.n	800d9c0 <_printf_float+0x254>
 800dbce:	f04f 0800 	mov.w	r8, #0
 800dbd2:	f104 0919 	add.w	r9, r4, #25
 800dbd6:	e7f4      	b.n	800dbc2 <_printf_float+0x456>

0800dbd8 <_printf_common>:
 800dbd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbdc:	4616      	mov	r6, r2
 800dbde:	4699      	mov	r9, r3
 800dbe0:	688a      	ldr	r2, [r1, #8]
 800dbe2:	690b      	ldr	r3, [r1, #16]
 800dbe4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dbe8:	4293      	cmp	r3, r2
 800dbea:	bfb8      	it	lt
 800dbec:	4613      	movlt	r3, r2
 800dbee:	6033      	str	r3, [r6, #0]
 800dbf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dbf4:	4607      	mov	r7, r0
 800dbf6:	460c      	mov	r4, r1
 800dbf8:	b10a      	cbz	r2, 800dbfe <_printf_common+0x26>
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	6033      	str	r3, [r6, #0]
 800dbfe:	6823      	ldr	r3, [r4, #0]
 800dc00:	0699      	lsls	r1, r3, #26
 800dc02:	bf42      	ittt	mi
 800dc04:	6833      	ldrmi	r3, [r6, #0]
 800dc06:	3302      	addmi	r3, #2
 800dc08:	6033      	strmi	r3, [r6, #0]
 800dc0a:	6825      	ldr	r5, [r4, #0]
 800dc0c:	f015 0506 	ands.w	r5, r5, #6
 800dc10:	d106      	bne.n	800dc20 <_printf_common+0x48>
 800dc12:	f104 0a19 	add.w	sl, r4, #25
 800dc16:	68e3      	ldr	r3, [r4, #12]
 800dc18:	6832      	ldr	r2, [r6, #0]
 800dc1a:	1a9b      	subs	r3, r3, r2
 800dc1c:	42ab      	cmp	r3, r5
 800dc1e:	dc26      	bgt.n	800dc6e <_printf_common+0x96>
 800dc20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dc24:	1e13      	subs	r3, r2, #0
 800dc26:	6822      	ldr	r2, [r4, #0]
 800dc28:	bf18      	it	ne
 800dc2a:	2301      	movne	r3, #1
 800dc2c:	0692      	lsls	r2, r2, #26
 800dc2e:	d42b      	bmi.n	800dc88 <_printf_common+0xb0>
 800dc30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dc34:	4649      	mov	r1, r9
 800dc36:	4638      	mov	r0, r7
 800dc38:	47c0      	blx	r8
 800dc3a:	3001      	adds	r0, #1
 800dc3c:	d01e      	beq.n	800dc7c <_printf_common+0xa4>
 800dc3e:	6823      	ldr	r3, [r4, #0]
 800dc40:	6922      	ldr	r2, [r4, #16]
 800dc42:	f003 0306 	and.w	r3, r3, #6
 800dc46:	2b04      	cmp	r3, #4
 800dc48:	bf02      	ittt	eq
 800dc4a:	68e5      	ldreq	r5, [r4, #12]
 800dc4c:	6833      	ldreq	r3, [r6, #0]
 800dc4e:	1aed      	subeq	r5, r5, r3
 800dc50:	68a3      	ldr	r3, [r4, #8]
 800dc52:	bf0c      	ite	eq
 800dc54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc58:	2500      	movne	r5, #0
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	bfc4      	itt	gt
 800dc5e:	1a9b      	subgt	r3, r3, r2
 800dc60:	18ed      	addgt	r5, r5, r3
 800dc62:	2600      	movs	r6, #0
 800dc64:	341a      	adds	r4, #26
 800dc66:	42b5      	cmp	r5, r6
 800dc68:	d11a      	bne.n	800dca0 <_printf_common+0xc8>
 800dc6a:	2000      	movs	r0, #0
 800dc6c:	e008      	b.n	800dc80 <_printf_common+0xa8>
 800dc6e:	2301      	movs	r3, #1
 800dc70:	4652      	mov	r2, sl
 800dc72:	4649      	mov	r1, r9
 800dc74:	4638      	mov	r0, r7
 800dc76:	47c0      	blx	r8
 800dc78:	3001      	adds	r0, #1
 800dc7a:	d103      	bne.n	800dc84 <_printf_common+0xac>
 800dc7c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc84:	3501      	adds	r5, #1
 800dc86:	e7c6      	b.n	800dc16 <_printf_common+0x3e>
 800dc88:	18e1      	adds	r1, r4, r3
 800dc8a:	1c5a      	adds	r2, r3, #1
 800dc8c:	2030      	movs	r0, #48	; 0x30
 800dc8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dc92:	4422      	add	r2, r4
 800dc94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dc98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dc9c:	3302      	adds	r3, #2
 800dc9e:	e7c7      	b.n	800dc30 <_printf_common+0x58>
 800dca0:	2301      	movs	r3, #1
 800dca2:	4622      	mov	r2, r4
 800dca4:	4649      	mov	r1, r9
 800dca6:	4638      	mov	r0, r7
 800dca8:	47c0      	blx	r8
 800dcaa:	3001      	adds	r0, #1
 800dcac:	d0e6      	beq.n	800dc7c <_printf_common+0xa4>
 800dcae:	3601      	adds	r6, #1
 800dcb0:	e7d9      	b.n	800dc66 <_printf_common+0x8e>
	...

0800dcb4 <_printf_i>:
 800dcb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dcb8:	7e0f      	ldrb	r7, [r1, #24]
 800dcba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dcbc:	2f78      	cmp	r7, #120	; 0x78
 800dcbe:	4691      	mov	r9, r2
 800dcc0:	4680      	mov	r8, r0
 800dcc2:	460c      	mov	r4, r1
 800dcc4:	469a      	mov	sl, r3
 800dcc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dcca:	d807      	bhi.n	800dcdc <_printf_i+0x28>
 800dccc:	2f62      	cmp	r7, #98	; 0x62
 800dcce:	d80a      	bhi.n	800dce6 <_printf_i+0x32>
 800dcd0:	2f00      	cmp	r7, #0
 800dcd2:	f000 80d4 	beq.w	800de7e <_printf_i+0x1ca>
 800dcd6:	2f58      	cmp	r7, #88	; 0x58
 800dcd8:	f000 80c0 	beq.w	800de5c <_printf_i+0x1a8>
 800dcdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dce0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dce4:	e03a      	b.n	800dd5c <_printf_i+0xa8>
 800dce6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dcea:	2b15      	cmp	r3, #21
 800dcec:	d8f6      	bhi.n	800dcdc <_printf_i+0x28>
 800dcee:	a101      	add	r1, pc, #4	; (adr r1, 800dcf4 <_printf_i+0x40>)
 800dcf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dcf4:	0800dd4d 	.word	0x0800dd4d
 800dcf8:	0800dd61 	.word	0x0800dd61
 800dcfc:	0800dcdd 	.word	0x0800dcdd
 800dd00:	0800dcdd 	.word	0x0800dcdd
 800dd04:	0800dcdd 	.word	0x0800dcdd
 800dd08:	0800dcdd 	.word	0x0800dcdd
 800dd0c:	0800dd61 	.word	0x0800dd61
 800dd10:	0800dcdd 	.word	0x0800dcdd
 800dd14:	0800dcdd 	.word	0x0800dcdd
 800dd18:	0800dcdd 	.word	0x0800dcdd
 800dd1c:	0800dcdd 	.word	0x0800dcdd
 800dd20:	0800de65 	.word	0x0800de65
 800dd24:	0800dd8d 	.word	0x0800dd8d
 800dd28:	0800de1f 	.word	0x0800de1f
 800dd2c:	0800dcdd 	.word	0x0800dcdd
 800dd30:	0800dcdd 	.word	0x0800dcdd
 800dd34:	0800de87 	.word	0x0800de87
 800dd38:	0800dcdd 	.word	0x0800dcdd
 800dd3c:	0800dd8d 	.word	0x0800dd8d
 800dd40:	0800dcdd 	.word	0x0800dcdd
 800dd44:	0800dcdd 	.word	0x0800dcdd
 800dd48:	0800de27 	.word	0x0800de27
 800dd4c:	682b      	ldr	r3, [r5, #0]
 800dd4e:	1d1a      	adds	r2, r3, #4
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	602a      	str	r2, [r5, #0]
 800dd54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	e09f      	b.n	800dea0 <_printf_i+0x1ec>
 800dd60:	6820      	ldr	r0, [r4, #0]
 800dd62:	682b      	ldr	r3, [r5, #0]
 800dd64:	0607      	lsls	r7, r0, #24
 800dd66:	f103 0104 	add.w	r1, r3, #4
 800dd6a:	6029      	str	r1, [r5, #0]
 800dd6c:	d501      	bpl.n	800dd72 <_printf_i+0xbe>
 800dd6e:	681e      	ldr	r6, [r3, #0]
 800dd70:	e003      	b.n	800dd7a <_printf_i+0xc6>
 800dd72:	0646      	lsls	r6, r0, #25
 800dd74:	d5fb      	bpl.n	800dd6e <_printf_i+0xba>
 800dd76:	f9b3 6000 	ldrsh.w	r6, [r3]
 800dd7a:	2e00      	cmp	r6, #0
 800dd7c:	da03      	bge.n	800dd86 <_printf_i+0xd2>
 800dd7e:	232d      	movs	r3, #45	; 0x2d
 800dd80:	4276      	negs	r6, r6
 800dd82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd86:	485a      	ldr	r0, [pc, #360]	; (800def0 <_printf_i+0x23c>)
 800dd88:	230a      	movs	r3, #10
 800dd8a:	e012      	b.n	800ddb2 <_printf_i+0xfe>
 800dd8c:	682b      	ldr	r3, [r5, #0]
 800dd8e:	6820      	ldr	r0, [r4, #0]
 800dd90:	1d19      	adds	r1, r3, #4
 800dd92:	6029      	str	r1, [r5, #0]
 800dd94:	0605      	lsls	r5, r0, #24
 800dd96:	d501      	bpl.n	800dd9c <_printf_i+0xe8>
 800dd98:	681e      	ldr	r6, [r3, #0]
 800dd9a:	e002      	b.n	800dda2 <_printf_i+0xee>
 800dd9c:	0641      	lsls	r1, r0, #25
 800dd9e:	d5fb      	bpl.n	800dd98 <_printf_i+0xe4>
 800dda0:	881e      	ldrh	r6, [r3, #0]
 800dda2:	4853      	ldr	r0, [pc, #332]	; (800def0 <_printf_i+0x23c>)
 800dda4:	2f6f      	cmp	r7, #111	; 0x6f
 800dda6:	bf0c      	ite	eq
 800dda8:	2308      	moveq	r3, #8
 800ddaa:	230a      	movne	r3, #10
 800ddac:	2100      	movs	r1, #0
 800ddae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ddb2:	6865      	ldr	r5, [r4, #4]
 800ddb4:	60a5      	str	r5, [r4, #8]
 800ddb6:	2d00      	cmp	r5, #0
 800ddb8:	bfa2      	ittt	ge
 800ddba:	6821      	ldrge	r1, [r4, #0]
 800ddbc:	f021 0104 	bicge.w	r1, r1, #4
 800ddc0:	6021      	strge	r1, [r4, #0]
 800ddc2:	b90e      	cbnz	r6, 800ddc8 <_printf_i+0x114>
 800ddc4:	2d00      	cmp	r5, #0
 800ddc6:	d04b      	beq.n	800de60 <_printf_i+0x1ac>
 800ddc8:	4615      	mov	r5, r2
 800ddca:	fbb6 f1f3 	udiv	r1, r6, r3
 800ddce:	fb03 6711 	mls	r7, r3, r1, r6
 800ddd2:	5dc7      	ldrb	r7, [r0, r7]
 800ddd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ddd8:	4637      	mov	r7, r6
 800ddda:	42bb      	cmp	r3, r7
 800dddc:	460e      	mov	r6, r1
 800ddde:	d9f4      	bls.n	800ddca <_printf_i+0x116>
 800dde0:	2b08      	cmp	r3, #8
 800dde2:	d10b      	bne.n	800ddfc <_printf_i+0x148>
 800dde4:	6823      	ldr	r3, [r4, #0]
 800dde6:	07de      	lsls	r6, r3, #31
 800dde8:	d508      	bpl.n	800ddfc <_printf_i+0x148>
 800ddea:	6923      	ldr	r3, [r4, #16]
 800ddec:	6861      	ldr	r1, [r4, #4]
 800ddee:	4299      	cmp	r1, r3
 800ddf0:	bfde      	ittt	le
 800ddf2:	2330      	movle	r3, #48	; 0x30
 800ddf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ddf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ddfc:	1b52      	subs	r2, r2, r5
 800ddfe:	6122      	str	r2, [r4, #16]
 800de00:	f8cd a000 	str.w	sl, [sp]
 800de04:	464b      	mov	r3, r9
 800de06:	aa03      	add	r2, sp, #12
 800de08:	4621      	mov	r1, r4
 800de0a:	4640      	mov	r0, r8
 800de0c:	f7ff fee4 	bl	800dbd8 <_printf_common>
 800de10:	3001      	adds	r0, #1
 800de12:	d14a      	bne.n	800deaa <_printf_i+0x1f6>
 800de14:	f04f 30ff 	mov.w	r0, #4294967295
 800de18:	b004      	add	sp, #16
 800de1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de1e:	6823      	ldr	r3, [r4, #0]
 800de20:	f043 0320 	orr.w	r3, r3, #32
 800de24:	6023      	str	r3, [r4, #0]
 800de26:	4833      	ldr	r0, [pc, #204]	; (800def4 <_printf_i+0x240>)
 800de28:	2778      	movs	r7, #120	; 0x78
 800de2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800de2e:	6823      	ldr	r3, [r4, #0]
 800de30:	6829      	ldr	r1, [r5, #0]
 800de32:	061f      	lsls	r7, r3, #24
 800de34:	f851 6b04 	ldr.w	r6, [r1], #4
 800de38:	d402      	bmi.n	800de40 <_printf_i+0x18c>
 800de3a:	065f      	lsls	r7, r3, #25
 800de3c:	bf48      	it	mi
 800de3e:	b2b6      	uxthmi	r6, r6
 800de40:	07df      	lsls	r7, r3, #31
 800de42:	bf48      	it	mi
 800de44:	f043 0320 	orrmi.w	r3, r3, #32
 800de48:	6029      	str	r1, [r5, #0]
 800de4a:	bf48      	it	mi
 800de4c:	6023      	strmi	r3, [r4, #0]
 800de4e:	b91e      	cbnz	r6, 800de58 <_printf_i+0x1a4>
 800de50:	6823      	ldr	r3, [r4, #0]
 800de52:	f023 0320 	bic.w	r3, r3, #32
 800de56:	6023      	str	r3, [r4, #0]
 800de58:	2310      	movs	r3, #16
 800de5a:	e7a7      	b.n	800ddac <_printf_i+0xf8>
 800de5c:	4824      	ldr	r0, [pc, #144]	; (800def0 <_printf_i+0x23c>)
 800de5e:	e7e4      	b.n	800de2a <_printf_i+0x176>
 800de60:	4615      	mov	r5, r2
 800de62:	e7bd      	b.n	800dde0 <_printf_i+0x12c>
 800de64:	682b      	ldr	r3, [r5, #0]
 800de66:	6826      	ldr	r6, [r4, #0]
 800de68:	6961      	ldr	r1, [r4, #20]
 800de6a:	1d18      	adds	r0, r3, #4
 800de6c:	6028      	str	r0, [r5, #0]
 800de6e:	0635      	lsls	r5, r6, #24
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	d501      	bpl.n	800de78 <_printf_i+0x1c4>
 800de74:	6019      	str	r1, [r3, #0]
 800de76:	e002      	b.n	800de7e <_printf_i+0x1ca>
 800de78:	0670      	lsls	r0, r6, #25
 800de7a:	d5fb      	bpl.n	800de74 <_printf_i+0x1c0>
 800de7c:	8019      	strh	r1, [r3, #0]
 800de7e:	2300      	movs	r3, #0
 800de80:	6123      	str	r3, [r4, #16]
 800de82:	4615      	mov	r5, r2
 800de84:	e7bc      	b.n	800de00 <_printf_i+0x14c>
 800de86:	682b      	ldr	r3, [r5, #0]
 800de88:	1d1a      	adds	r2, r3, #4
 800de8a:	602a      	str	r2, [r5, #0]
 800de8c:	681d      	ldr	r5, [r3, #0]
 800de8e:	6862      	ldr	r2, [r4, #4]
 800de90:	2100      	movs	r1, #0
 800de92:	4628      	mov	r0, r5
 800de94:	f7f2 f99c 	bl	80001d0 <memchr>
 800de98:	b108      	cbz	r0, 800de9e <_printf_i+0x1ea>
 800de9a:	1b40      	subs	r0, r0, r5
 800de9c:	6060      	str	r0, [r4, #4]
 800de9e:	6863      	ldr	r3, [r4, #4]
 800dea0:	6123      	str	r3, [r4, #16]
 800dea2:	2300      	movs	r3, #0
 800dea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dea8:	e7aa      	b.n	800de00 <_printf_i+0x14c>
 800deaa:	6923      	ldr	r3, [r4, #16]
 800deac:	462a      	mov	r2, r5
 800deae:	4649      	mov	r1, r9
 800deb0:	4640      	mov	r0, r8
 800deb2:	47d0      	blx	sl
 800deb4:	3001      	adds	r0, #1
 800deb6:	d0ad      	beq.n	800de14 <_printf_i+0x160>
 800deb8:	6823      	ldr	r3, [r4, #0]
 800deba:	079b      	lsls	r3, r3, #30
 800debc:	d413      	bmi.n	800dee6 <_printf_i+0x232>
 800debe:	68e0      	ldr	r0, [r4, #12]
 800dec0:	9b03      	ldr	r3, [sp, #12]
 800dec2:	4298      	cmp	r0, r3
 800dec4:	bfb8      	it	lt
 800dec6:	4618      	movlt	r0, r3
 800dec8:	e7a6      	b.n	800de18 <_printf_i+0x164>
 800deca:	2301      	movs	r3, #1
 800decc:	4632      	mov	r2, r6
 800dece:	4649      	mov	r1, r9
 800ded0:	4640      	mov	r0, r8
 800ded2:	47d0      	blx	sl
 800ded4:	3001      	adds	r0, #1
 800ded6:	d09d      	beq.n	800de14 <_printf_i+0x160>
 800ded8:	3501      	adds	r5, #1
 800deda:	68e3      	ldr	r3, [r4, #12]
 800dedc:	9903      	ldr	r1, [sp, #12]
 800dede:	1a5b      	subs	r3, r3, r1
 800dee0:	42ab      	cmp	r3, r5
 800dee2:	dcf2      	bgt.n	800deca <_printf_i+0x216>
 800dee4:	e7eb      	b.n	800debe <_printf_i+0x20a>
 800dee6:	2500      	movs	r5, #0
 800dee8:	f104 0619 	add.w	r6, r4, #25
 800deec:	e7f5      	b.n	800deda <_printf_i+0x226>
 800deee:	bf00      	nop
 800def0:	0801262c 	.word	0x0801262c
 800def4:	0801263d 	.word	0x0801263d

0800def8 <_scanf_float>:
 800def8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800defc:	b087      	sub	sp, #28
 800defe:	4617      	mov	r7, r2
 800df00:	9303      	str	r3, [sp, #12]
 800df02:	688b      	ldr	r3, [r1, #8]
 800df04:	1e5a      	subs	r2, r3, #1
 800df06:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800df0a:	bf83      	ittte	hi
 800df0c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800df10:	195b      	addhi	r3, r3, r5
 800df12:	9302      	strhi	r3, [sp, #8]
 800df14:	2300      	movls	r3, #0
 800df16:	bf86      	itte	hi
 800df18:	f240 135d 	movwhi	r3, #349	; 0x15d
 800df1c:	608b      	strhi	r3, [r1, #8]
 800df1e:	9302      	strls	r3, [sp, #8]
 800df20:	680b      	ldr	r3, [r1, #0]
 800df22:	468b      	mov	fp, r1
 800df24:	2500      	movs	r5, #0
 800df26:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800df2a:	f84b 3b1c 	str.w	r3, [fp], #28
 800df2e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800df32:	4680      	mov	r8, r0
 800df34:	460c      	mov	r4, r1
 800df36:	465e      	mov	r6, fp
 800df38:	46aa      	mov	sl, r5
 800df3a:	46a9      	mov	r9, r5
 800df3c:	9501      	str	r5, [sp, #4]
 800df3e:	68a2      	ldr	r2, [r4, #8]
 800df40:	b152      	cbz	r2, 800df58 <_scanf_float+0x60>
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	781b      	ldrb	r3, [r3, #0]
 800df46:	2b4e      	cmp	r3, #78	; 0x4e
 800df48:	d864      	bhi.n	800e014 <_scanf_float+0x11c>
 800df4a:	2b40      	cmp	r3, #64	; 0x40
 800df4c:	d83c      	bhi.n	800dfc8 <_scanf_float+0xd0>
 800df4e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800df52:	b2c8      	uxtb	r0, r1
 800df54:	280e      	cmp	r0, #14
 800df56:	d93a      	bls.n	800dfce <_scanf_float+0xd6>
 800df58:	f1b9 0f00 	cmp.w	r9, #0
 800df5c:	d003      	beq.n	800df66 <_scanf_float+0x6e>
 800df5e:	6823      	ldr	r3, [r4, #0]
 800df60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800df64:	6023      	str	r3, [r4, #0]
 800df66:	f10a 3aff 	add.w	sl, sl, #4294967295
 800df6a:	f1ba 0f01 	cmp.w	sl, #1
 800df6e:	f200 8113 	bhi.w	800e198 <_scanf_float+0x2a0>
 800df72:	455e      	cmp	r6, fp
 800df74:	f200 8105 	bhi.w	800e182 <_scanf_float+0x28a>
 800df78:	2501      	movs	r5, #1
 800df7a:	4628      	mov	r0, r5
 800df7c:	b007      	add	sp, #28
 800df7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df82:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800df86:	2a0d      	cmp	r2, #13
 800df88:	d8e6      	bhi.n	800df58 <_scanf_float+0x60>
 800df8a:	a101      	add	r1, pc, #4	; (adr r1, 800df90 <_scanf_float+0x98>)
 800df8c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800df90:	0800e0cf 	.word	0x0800e0cf
 800df94:	0800df59 	.word	0x0800df59
 800df98:	0800df59 	.word	0x0800df59
 800df9c:	0800df59 	.word	0x0800df59
 800dfa0:	0800e12f 	.word	0x0800e12f
 800dfa4:	0800e107 	.word	0x0800e107
 800dfa8:	0800df59 	.word	0x0800df59
 800dfac:	0800df59 	.word	0x0800df59
 800dfb0:	0800e0dd 	.word	0x0800e0dd
 800dfb4:	0800df59 	.word	0x0800df59
 800dfb8:	0800df59 	.word	0x0800df59
 800dfbc:	0800df59 	.word	0x0800df59
 800dfc0:	0800df59 	.word	0x0800df59
 800dfc4:	0800e095 	.word	0x0800e095
 800dfc8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800dfcc:	e7db      	b.n	800df86 <_scanf_float+0x8e>
 800dfce:	290e      	cmp	r1, #14
 800dfd0:	d8c2      	bhi.n	800df58 <_scanf_float+0x60>
 800dfd2:	a001      	add	r0, pc, #4	; (adr r0, 800dfd8 <_scanf_float+0xe0>)
 800dfd4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800dfd8:	0800e087 	.word	0x0800e087
 800dfdc:	0800df59 	.word	0x0800df59
 800dfe0:	0800e087 	.word	0x0800e087
 800dfe4:	0800e11b 	.word	0x0800e11b
 800dfe8:	0800df59 	.word	0x0800df59
 800dfec:	0800e035 	.word	0x0800e035
 800dff0:	0800e071 	.word	0x0800e071
 800dff4:	0800e071 	.word	0x0800e071
 800dff8:	0800e071 	.word	0x0800e071
 800dffc:	0800e071 	.word	0x0800e071
 800e000:	0800e071 	.word	0x0800e071
 800e004:	0800e071 	.word	0x0800e071
 800e008:	0800e071 	.word	0x0800e071
 800e00c:	0800e071 	.word	0x0800e071
 800e010:	0800e071 	.word	0x0800e071
 800e014:	2b6e      	cmp	r3, #110	; 0x6e
 800e016:	d809      	bhi.n	800e02c <_scanf_float+0x134>
 800e018:	2b60      	cmp	r3, #96	; 0x60
 800e01a:	d8b2      	bhi.n	800df82 <_scanf_float+0x8a>
 800e01c:	2b54      	cmp	r3, #84	; 0x54
 800e01e:	d077      	beq.n	800e110 <_scanf_float+0x218>
 800e020:	2b59      	cmp	r3, #89	; 0x59
 800e022:	d199      	bne.n	800df58 <_scanf_float+0x60>
 800e024:	2d07      	cmp	r5, #7
 800e026:	d197      	bne.n	800df58 <_scanf_float+0x60>
 800e028:	2508      	movs	r5, #8
 800e02a:	e029      	b.n	800e080 <_scanf_float+0x188>
 800e02c:	2b74      	cmp	r3, #116	; 0x74
 800e02e:	d06f      	beq.n	800e110 <_scanf_float+0x218>
 800e030:	2b79      	cmp	r3, #121	; 0x79
 800e032:	e7f6      	b.n	800e022 <_scanf_float+0x12a>
 800e034:	6821      	ldr	r1, [r4, #0]
 800e036:	05c8      	lsls	r0, r1, #23
 800e038:	d51a      	bpl.n	800e070 <_scanf_float+0x178>
 800e03a:	9b02      	ldr	r3, [sp, #8]
 800e03c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e040:	6021      	str	r1, [r4, #0]
 800e042:	f109 0901 	add.w	r9, r9, #1
 800e046:	b11b      	cbz	r3, 800e050 <_scanf_float+0x158>
 800e048:	3b01      	subs	r3, #1
 800e04a:	3201      	adds	r2, #1
 800e04c:	9302      	str	r3, [sp, #8]
 800e04e:	60a2      	str	r2, [r4, #8]
 800e050:	68a3      	ldr	r3, [r4, #8]
 800e052:	3b01      	subs	r3, #1
 800e054:	60a3      	str	r3, [r4, #8]
 800e056:	6923      	ldr	r3, [r4, #16]
 800e058:	3301      	adds	r3, #1
 800e05a:	6123      	str	r3, [r4, #16]
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	3b01      	subs	r3, #1
 800e060:	2b00      	cmp	r3, #0
 800e062:	607b      	str	r3, [r7, #4]
 800e064:	f340 8084 	ble.w	800e170 <_scanf_float+0x278>
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	3301      	adds	r3, #1
 800e06c:	603b      	str	r3, [r7, #0]
 800e06e:	e766      	b.n	800df3e <_scanf_float+0x46>
 800e070:	eb1a 0f05 	cmn.w	sl, r5
 800e074:	f47f af70 	bne.w	800df58 <_scanf_float+0x60>
 800e078:	6822      	ldr	r2, [r4, #0]
 800e07a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e07e:	6022      	str	r2, [r4, #0]
 800e080:	f806 3b01 	strb.w	r3, [r6], #1
 800e084:	e7e4      	b.n	800e050 <_scanf_float+0x158>
 800e086:	6822      	ldr	r2, [r4, #0]
 800e088:	0610      	lsls	r0, r2, #24
 800e08a:	f57f af65 	bpl.w	800df58 <_scanf_float+0x60>
 800e08e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e092:	e7f4      	b.n	800e07e <_scanf_float+0x186>
 800e094:	f1ba 0f00 	cmp.w	sl, #0
 800e098:	d10e      	bne.n	800e0b8 <_scanf_float+0x1c0>
 800e09a:	f1b9 0f00 	cmp.w	r9, #0
 800e09e:	d10e      	bne.n	800e0be <_scanf_float+0x1c6>
 800e0a0:	6822      	ldr	r2, [r4, #0]
 800e0a2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e0a6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e0aa:	d108      	bne.n	800e0be <_scanf_float+0x1c6>
 800e0ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e0b0:	6022      	str	r2, [r4, #0]
 800e0b2:	f04f 0a01 	mov.w	sl, #1
 800e0b6:	e7e3      	b.n	800e080 <_scanf_float+0x188>
 800e0b8:	f1ba 0f02 	cmp.w	sl, #2
 800e0bc:	d055      	beq.n	800e16a <_scanf_float+0x272>
 800e0be:	2d01      	cmp	r5, #1
 800e0c0:	d002      	beq.n	800e0c8 <_scanf_float+0x1d0>
 800e0c2:	2d04      	cmp	r5, #4
 800e0c4:	f47f af48 	bne.w	800df58 <_scanf_float+0x60>
 800e0c8:	3501      	adds	r5, #1
 800e0ca:	b2ed      	uxtb	r5, r5
 800e0cc:	e7d8      	b.n	800e080 <_scanf_float+0x188>
 800e0ce:	f1ba 0f01 	cmp.w	sl, #1
 800e0d2:	f47f af41 	bne.w	800df58 <_scanf_float+0x60>
 800e0d6:	f04f 0a02 	mov.w	sl, #2
 800e0da:	e7d1      	b.n	800e080 <_scanf_float+0x188>
 800e0dc:	b97d      	cbnz	r5, 800e0fe <_scanf_float+0x206>
 800e0de:	f1b9 0f00 	cmp.w	r9, #0
 800e0e2:	f47f af3c 	bne.w	800df5e <_scanf_float+0x66>
 800e0e6:	6822      	ldr	r2, [r4, #0]
 800e0e8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e0ec:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e0f0:	f47f af39 	bne.w	800df66 <_scanf_float+0x6e>
 800e0f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e0f8:	6022      	str	r2, [r4, #0]
 800e0fa:	2501      	movs	r5, #1
 800e0fc:	e7c0      	b.n	800e080 <_scanf_float+0x188>
 800e0fe:	2d03      	cmp	r5, #3
 800e100:	d0e2      	beq.n	800e0c8 <_scanf_float+0x1d0>
 800e102:	2d05      	cmp	r5, #5
 800e104:	e7de      	b.n	800e0c4 <_scanf_float+0x1cc>
 800e106:	2d02      	cmp	r5, #2
 800e108:	f47f af26 	bne.w	800df58 <_scanf_float+0x60>
 800e10c:	2503      	movs	r5, #3
 800e10e:	e7b7      	b.n	800e080 <_scanf_float+0x188>
 800e110:	2d06      	cmp	r5, #6
 800e112:	f47f af21 	bne.w	800df58 <_scanf_float+0x60>
 800e116:	2507      	movs	r5, #7
 800e118:	e7b2      	b.n	800e080 <_scanf_float+0x188>
 800e11a:	6822      	ldr	r2, [r4, #0]
 800e11c:	0591      	lsls	r1, r2, #22
 800e11e:	f57f af1b 	bpl.w	800df58 <_scanf_float+0x60>
 800e122:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e126:	6022      	str	r2, [r4, #0]
 800e128:	f8cd 9004 	str.w	r9, [sp, #4]
 800e12c:	e7a8      	b.n	800e080 <_scanf_float+0x188>
 800e12e:	6822      	ldr	r2, [r4, #0]
 800e130:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e134:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e138:	d006      	beq.n	800e148 <_scanf_float+0x250>
 800e13a:	0550      	lsls	r0, r2, #21
 800e13c:	f57f af0c 	bpl.w	800df58 <_scanf_float+0x60>
 800e140:	f1b9 0f00 	cmp.w	r9, #0
 800e144:	f43f af0f 	beq.w	800df66 <_scanf_float+0x6e>
 800e148:	0591      	lsls	r1, r2, #22
 800e14a:	bf58      	it	pl
 800e14c:	9901      	ldrpl	r1, [sp, #4]
 800e14e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e152:	bf58      	it	pl
 800e154:	eba9 0101 	subpl.w	r1, r9, r1
 800e158:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e15c:	bf58      	it	pl
 800e15e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e162:	6022      	str	r2, [r4, #0]
 800e164:	f04f 0900 	mov.w	r9, #0
 800e168:	e78a      	b.n	800e080 <_scanf_float+0x188>
 800e16a:	f04f 0a03 	mov.w	sl, #3
 800e16e:	e787      	b.n	800e080 <_scanf_float+0x188>
 800e170:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e174:	4639      	mov	r1, r7
 800e176:	4640      	mov	r0, r8
 800e178:	4798      	blx	r3
 800e17a:	2800      	cmp	r0, #0
 800e17c:	f43f aedf 	beq.w	800df3e <_scanf_float+0x46>
 800e180:	e6ea      	b.n	800df58 <_scanf_float+0x60>
 800e182:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e186:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e18a:	463a      	mov	r2, r7
 800e18c:	4640      	mov	r0, r8
 800e18e:	4798      	blx	r3
 800e190:	6923      	ldr	r3, [r4, #16]
 800e192:	3b01      	subs	r3, #1
 800e194:	6123      	str	r3, [r4, #16]
 800e196:	e6ec      	b.n	800df72 <_scanf_float+0x7a>
 800e198:	1e6b      	subs	r3, r5, #1
 800e19a:	2b06      	cmp	r3, #6
 800e19c:	d825      	bhi.n	800e1ea <_scanf_float+0x2f2>
 800e19e:	2d02      	cmp	r5, #2
 800e1a0:	d836      	bhi.n	800e210 <_scanf_float+0x318>
 800e1a2:	455e      	cmp	r6, fp
 800e1a4:	f67f aee8 	bls.w	800df78 <_scanf_float+0x80>
 800e1a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e1ac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e1b0:	463a      	mov	r2, r7
 800e1b2:	4640      	mov	r0, r8
 800e1b4:	4798      	blx	r3
 800e1b6:	6923      	ldr	r3, [r4, #16]
 800e1b8:	3b01      	subs	r3, #1
 800e1ba:	6123      	str	r3, [r4, #16]
 800e1bc:	e7f1      	b.n	800e1a2 <_scanf_float+0x2aa>
 800e1be:	9802      	ldr	r0, [sp, #8]
 800e1c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e1c4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e1c8:	9002      	str	r0, [sp, #8]
 800e1ca:	463a      	mov	r2, r7
 800e1cc:	4640      	mov	r0, r8
 800e1ce:	4798      	blx	r3
 800e1d0:	6923      	ldr	r3, [r4, #16]
 800e1d2:	3b01      	subs	r3, #1
 800e1d4:	6123      	str	r3, [r4, #16]
 800e1d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e1da:	fa5f fa8a 	uxtb.w	sl, sl
 800e1de:	f1ba 0f02 	cmp.w	sl, #2
 800e1e2:	d1ec      	bne.n	800e1be <_scanf_float+0x2c6>
 800e1e4:	3d03      	subs	r5, #3
 800e1e6:	b2ed      	uxtb	r5, r5
 800e1e8:	1b76      	subs	r6, r6, r5
 800e1ea:	6823      	ldr	r3, [r4, #0]
 800e1ec:	05da      	lsls	r2, r3, #23
 800e1ee:	d52f      	bpl.n	800e250 <_scanf_float+0x358>
 800e1f0:	055b      	lsls	r3, r3, #21
 800e1f2:	d510      	bpl.n	800e216 <_scanf_float+0x31e>
 800e1f4:	455e      	cmp	r6, fp
 800e1f6:	f67f aebf 	bls.w	800df78 <_scanf_float+0x80>
 800e1fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e1fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e202:	463a      	mov	r2, r7
 800e204:	4640      	mov	r0, r8
 800e206:	4798      	blx	r3
 800e208:	6923      	ldr	r3, [r4, #16]
 800e20a:	3b01      	subs	r3, #1
 800e20c:	6123      	str	r3, [r4, #16]
 800e20e:	e7f1      	b.n	800e1f4 <_scanf_float+0x2fc>
 800e210:	46aa      	mov	sl, r5
 800e212:	9602      	str	r6, [sp, #8]
 800e214:	e7df      	b.n	800e1d6 <_scanf_float+0x2de>
 800e216:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e21a:	6923      	ldr	r3, [r4, #16]
 800e21c:	2965      	cmp	r1, #101	; 0x65
 800e21e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e222:	f106 35ff 	add.w	r5, r6, #4294967295
 800e226:	6123      	str	r3, [r4, #16]
 800e228:	d00c      	beq.n	800e244 <_scanf_float+0x34c>
 800e22a:	2945      	cmp	r1, #69	; 0x45
 800e22c:	d00a      	beq.n	800e244 <_scanf_float+0x34c>
 800e22e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e232:	463a      	mov	r2, r7
 800e234:	4640      	mov	r0, r8
 800e236:	4798      	blx	r3
 800e238:	6923      	ldr	r3, [r4, #16]
 800e23a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e23e:	3b01      	subs	r3, #1
 800e240:	1eb5      	subs	r5, r6, #2
 800e242:	6123      	str	r3, [r4, #16]
 800e244:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e248:	463a      	mov	r2, r7
 800e24a:	4640      	mov	r0, r8
 800e24c:	4798      	blx	r3
 800e24e:	462e      	mov	r6, r5
 800e250:	6825      	ldr	r5, [r4, #0]
 800e252:	f015 0510 	ands.w	r5, r5, #16
 800e256:	d158      	bne.n	800e30a <_scanf_float+0x412>
 800e258:	7035      	strb	r5, [r6, #0]
 800e25a:	6823      	ldr	r3, [r4, #0]
 800e25c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e264:	d11c      	bne.n	800e2a0 <_scanf_float+0x3a8>
 800e266:	9b01      	ldr	r3, [sp, #4]
 800e268:	454b      	cmp	r3, r9
 800e26a:	eba3 0209 	sub.w	r2, r3, r9
 800e26e:	d124      	bne.n	800e2ba <_scanf_float+0x3c2>
 800e270:	2200      	movs	r2, #0
 800e272:	4659      	mov	r1, fp
 800e274:	4640      	mov	r0, r8
 800e276:	f002 fc0b 	bl	8010a90 <_strtod_r>
 800e27a:	9b03      	ldr	r3, [sp, #12]
 800e27c:	6821      	ldr	r1, [r4, #0]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	f011 0f02 	tst.w	r1, #2
 800e284:	ec57 6b10 	vmov	r6, r7, d0
 800e288:	f103 0204 	add.w	r2, r3, #4
 800e28c:	d020      	beq.n	800e2d0 <_scanf_float+0x3d8>
 800e28e:	9903      	ldr	r1, [sp, #12]
 800e290:	600a      	str	r2, [r1, #0]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	e9c3 6700 	strd	r6, r7, [r3]
 800e298:	68e3      	ldr	r3, [r4, #12]
 800e29a:	3301      	adds	r3, #1
 800e29c:	60e3      	str	r3, [r4, #12]
 800e29e:	e66c      	b.n	800df7a <_scanf_float+0x82>
 800e2a0:	9b04      	ldr	r3, [sp, #16]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d0e4      	beq.n	800e270 <_scanf_float+0x378>
 800e2a6:	9905      	ldr	r1, [sp, #20]
 800e2a8:	230a      	movs	r3, #10
 800e2aa:	462a      	mov	r2, r5
 800e2ac:	3101      	adds	r1, #1
 800e2ae:	4640      	mov	r0, r8
 800e2b0:	f002 fc76 	bl	8010ba0 <_strtol_r>
 800e2b4:	9b04      	ldr	r3, [sp, #16]
 800e2b6:	9e05      	ldr	r6, [sp, #20]
 800e2b8:	1ac2      	subs	r2, r0, r3
 800e2ba:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e2be:	429e      	cmp	r6, r3
 800e2c0:	bf28      	it	cs
 800e2c2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e2c6:	4912      	ldr	r1, [pc, #72]	; (800e310 <_scanf_float+0x418>)
 800e2c8:	4630      	mov	r0, r6
 800e2ca:	f000 f8e7 	bl	800e49c <siprintf>
 800e2ce:	e7cf      	b.n	800e270 <_scanf_float+0x378>
 800e2d0:	f011 0f04 	tst.w	r1, #4
 800e2d4:	9903      	ldr	r1, [sp, #12]
 800e2d6:	600a      	str	r2, [r1, #0]
 800e2d8:	d1db      	bne.n	800e292 <_scanf_float+0x39a>
 800e2da:	f8d3 8000 	ldr.w	r8, [r3]
 800e2de:	ee10 2a10 	vmov	r2, s0
 800e2e2:	ee10 0a10 	vmov	r0, s0
 800e2e6:	463b      	mov	r3, r7
 800e2e8:	4639      	mov	r1, r7
 800e2ea:	f7f2 fc1f 	bl	8000b2c <__aeabi_dcmpun>
 800e2ee:	b128      	cbz	r0, 800e2fc <_scanf_float+0x404>
 800e2f0:	4808      	ldr	r0, [pc, #32]	; (800e314 <_scanf_float+0x41c>)
 800e2f2:	f000 fa45 	bl	800e780 <nanf>
 800e2f6:	ed88 0a00 	vstr	s0, [r8]
 800e2fa:	e7cd      	b.n	800e298 <_scanf_float+0x3a0>
 800e2fc:	4630      	mov	r0, r6
 800e2fe:	4639      	mov	r1, r7
 800e300:	f7f2 fc72 	bl	8000be8 <__aeabi_d2f>
 800e304:	f8c8 0000 	str.w	r0, [r8]
 800e308:	e7c6      	b.n	800e298 <_scanf_float+0x3a0>
 800e30a:	2500      	movs	r5, #0
 800e30c:	e635      	b.n	800df7a <_scanf_float+0x82>
 800e30e:	bf00      	nop
 800e310:	0801264e 	.word	0x0801264e
 800e314:	08012a00 	.word	0x08012a00

0800e318 <std>:
 800e318:	2300      	movs	r3, #0
 800e31a:	b510      	push	{r4, lr}
 800e31c:	4604      	mov	r4, r0
 800e31e:	e9c0 3300 	strd	r3, r3, [r0]
 800e322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e326:	6083      	str	r3, [r0, #8]
 800e328:	8181      	strh	r1, [r0, #12]
 800e32a:	6643      	str	r3, [r0, #100]	; 0x64
 800e32c:	81c2      	strh	r2, [r0, #14]
 800e32e:	6183      	str	r3, [r0, #24]
 800e330:	4619      	mov	r1, r3
 800e332:	2208      	movs	r2, #8
 800e334:	305c      	adds	r0, #92	; 0x5c
 800e336:	f000 f942 	bl	800e5be <memset>
 800e33a:	4b0d      	ldr	r3, [pc, #52]	; (800e370 <std+0x58>)
 800e33c:	6263      	str	r3, [r4, #36]	; 0x24
 800e33e:	4b0d      	ldr	r3, [pc, #52]	; (800e374 <std+0x5c>)
 800e340:	62a3      	str	r3, [r4, #40]	; 0x28
 800e342:	4b0d      	ldr	r3, [pc, #52]	; (800e378 <std+0x60>)
 800e344:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e346:	4b0d      	ldr	r3, [pc, #52]	; (800e37c <std+0x64>)
 800e348:	6323      	str	r3, [r4, #48]	; 0x30
 800e34a:	4b0d      	ldr	r3, [pc, #52]	; (800e380 <std+0x68>)
 800e34c:	6224      	str	r4, [r4, #32]
 800e34e:	429c      	cmp	r4, r3
 800e350:	d006      	beq.n	800e360 <std+0x48>
 800e352:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e356:	4294      	cmp	r4, r2
 800e358:	d002      	beq.n	800e360 <std+0x48>
 800e35a:	33d0      	adds	r3, #208	; 0xd0
 800e35c:	429c      	cmp	r4, r3
 800e35e:	d105      	bne.n	800e36c <std+0x54>
 800e360:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e368:	f000 b9f8 	b.w	800e75c <__retarget_lock_init_recursive>
 800e36c:	bd10      	pop	{r4, pc}
 800e36e:	bf00      	nop
 800e370:	0800e535 	.word	0x0800e535
 800e374:	0800e55b 	.word	0x0800e55b
 800e378:	0800e593 	.word	0x0800e593
 800e37c:	0800e5b7 	.word	0x0800e5b7
 800e380:	20001088 	.word	0x20001088

0800e384 <stdio_exit_handler>:
 800e384:	4a02      	ldr	r2, [pc, #8]	; (800e390 <stdio_exit_handler+0xc>)
 800e386:	4903      	ldr	r1, [pc, #12]	; (800e394 <stdio_exit_handler+0x10>)
 800e388:	4803      	ldr	r0, [pc, #12]	; (800e398 <stdio_exit_handler+0x14>)
 800e38a:	f000 b869 	b.w	800e460 <_fwalk_sglue>
 800e38e:	bf00      	nop
 800e390:	2000002c 	.word	0x2000002c
 800e394:	080115a1 	.word	0x080115a1
 800e398:	20000038 	.word	0x20000038

0800e39c <cleanup_stdio>:
 800e39c:	6841      	ldr	r1, [r0, #4]
 800e39e:	4b0c      	ldr	r3, [pc, #48]	; (800e3d0 <cleanup_stdio+0x34>)
 800e3a0:	4299      	cmp	r1, r3
 800e3a2:	b510      	push	{r4, lr}
 800e3a4:	4604      	mov	r4, r0
 800e3a6:	d001      	beq.n	800e3ac <cleanup_stdio+0x10>
 800e3a8:	f003 f8fa 	bl	80115a0 <_fflush_r>
 800e3ac:	68a1      	ldr	r1, [r4, #8]
 800e3ae:	4b09      	ldr	r3, [pc, #36]	; (800e3d4 <cleanup_stdio+0x38>)
 800e3b0:	4299      	cmp	r1, r3
 800e3b2:	d002      	beq.n	800e3ba <cleanup_stdio+0x1e>
 800e3b4:	4620      	mov	r0, r4
 800e3b6:	f003 f8f3 	bl	80115a0 <_fflush_r>
 800e3ba:	68e1      	ldr	r1, [r4, #12]
 800e3bc:	4b06      	ldr	r3, [pc, #24]	; (800e3d8 <cleanup_stdio+0x3c>)
 800e3be:	4299      	cmp	r1, r3
 800e3c0:	d004      	beq.n	800e3cc <cleanup_stdio+0x30>
 800e3c2:	4620      	mov	r0, r4
 800e3c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3c8:	f003 b8ea 	b.w	80115a0 <_fflush_r>
 800e3cc:	bd10      	pop	{r4, pc}
 800e3ce:	bf00      	nop
 800e3d0:	20001088 	.word	0x20001088
 800e3d4:	200010f0 	.word	0x200010f0
 800e3d8:	20001158 	.word	0x20001158

0800e3dc <global_stdio_init.part.0>:
 800e3dc:	b510      	push	{r4, lr}
 800e3de:	4b0b      	ldr	r3, [pc, #44]	; (800e40c <global_stdio_init.part.0+0x30>)
 800e3e0:	4c0b      	ldr	r4, [pc, #44]	; (800e410 <global_stdio_init.part.0+0x34>)
 800e3e2:	4a0c      	ldr	r2, [pc, #48]	; (800e414 <global_stdio_init.part.0+0x38>)
 800e3e4:	601a      	str	r2, [r3, #0]
 800e3e6:	4620      	mov	r0, r4
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	2104      	movs	r1, #4
 800e3ec:	f7ff ff94 	bl	800e318 <std>
 800e3f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e3f4:	2201      	movs	r2, #1
 800e3f6:	2109      	movs	r1, #9
 800e3f8:	f7ff ff8e 	bl	800e318 <std>
 800e3fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e400:	2202      	movs	r2, #2
 800e402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e406:	2112      	movs	r1, #18
 800e408:	f7ff bf86 	b.w	800e318 <std>
 800e40c:	200011c0 	.word	0x200011c0
 800e410:	20001088 	.word	0x20001088
 800e414:	0800e385 	.word	0x0800e385

0800e418 <__sfp_lock_acquire>:
 800e418:	4801      	ldr	r0, [pc, #4]	; (800e420 <__sfp_lock_acquire+0x8>)
 800e41a:	f000 b9a0 	b.w	800e75e <__retarget_lock_acquire_recursive>
 800e41e:	bf00      	nop
 800e420:	200011c9 	.word	0x200011c9

0800e424 <__sfp_lock_release>:
 800e424:	4801      	ldr	r0, [pc, #4]	; (800e42c <__sfp_lock_release+0x8>)
 800e426:	f000 b99b 	b.w	800e760 <__retarget_lock_release_recursive>
 800e42a:	bf00      	nop
 800e42c:	200011c9 	.word	0x200011c9

0800e430 <__sinit>:
 800e430:	b510      	push	{r4, lr}
 800e432:	4604      	mov	r4, r0
 800e434:	f7ff fff0 	bl	800e418 <__sfp_lock_acquire>
 800e438:	6a23      	ldr	r3, [r4, #32]
 800e43a:	b11b      	cbz	r3, 800e444 <__sinit+0x14>
 800e43c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e440:	f7ff bff0 	b.w	800e424 <__sfp_lock_release>
 800e444:	4b04      	ldr	r3, [pc, #16]	; (800e458 <__sinit+0x28>)
 800e446:	6223      	str	r3, [r4, #32]
 800e448:	4b04      	ldr	r3, [pc, #16]	; (800e45c <__sinit+0x2c>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d1f5      	bne.n	800e43c <__sinit+0xc>
 800e450:	f7ff ffc4 	bl	800e3dc <global_stdio_init.part.0>
 800e454:	e7f2      	b.n	800e43c <__sinit+0xc>
 800e456:	bf00      	nop
 800e458:	0800e39d 	.word	0x0800e39d
 800e45c:	200011c0 	.word	0x200011c0

0800e460 <_fwalk_sglue>:
 800e460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e464:	4607      	mov	r7, r0
 800e466:	4688      	mov	r8, r1
 800e468:	4614      	mov	r4, r2
 800e46a:	2600      	movs	r6, #0
 800e46c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e470:	f1b9 0901 	subs.w	r9, r9, #1
 800e474:	d505      	bpl.n	800e482 <_fwalk_sglue+0x22>
 800e476:	6824      	ldr	r4, [r4, #0]
 800e478:	2c00      	cmp	r4, #0
 800e47a:	d1f7      	bne.n	800e46c <_fwalk_sglue+0xc>
 800e47c:	4630      	mov	r0, r6
 800e47e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e482:	89ab      	ldrh	r3, [r5, #12]
 800e484:	2b01      	cmp	r3, #1
 800e486:	d907      	bls.n	800e498 <_fwalk_sglue+0x38>
 800e488:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e48c:	3301      	adds	r3, #1
 800e48e:	d003      	beq.n	800e498 <_fwalk_sglue+0x38>
 800e490:	4629      	mov	r1, r5
 800e492:	4638      	mov	r0, r7
 800e494:	47c0      	blx	r8
 800e496:	4306      	orrs	r6, r0
 800e498:	3568      	adds	r5, #104	; 0x68
 800e49a:	e7e9      	b.n	800e470 <_fwalk_sglue+0x10>

0800e49c <siprintf>:
 800e49c:	b40e      	push	{r1, r2, r3}
 800e49e:	b500      	push	{lr}
 800e4a0:	b09c      	sub	sp, #112	; 0x70
 800e4a2:	ab1d      	add	r3, sp, #116	; 0x74
 800e4a4:	9002      	str	r0, [sp, #8]
 800e4a6:	9006      	str	r0, [sp, #24]
 800e4a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e4ac:	4809      	ldr	r0, [pc, #36]	; (800e4d4 <siprintf+0x38>)
 800e4ae:	9107      	str	r1, [sp, #28]
 800e4b0:	9104      	str	r1, [sp, #16]
 800e4b2:	4909      	ldr	r1, [pc, #36]	; (800e4d8 <siprintf+0x3c>)
 800e4b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4b8:	9105      	str	r1, [sp, #20]
 800e4ba:	6800      	ldr	r0, [r0, #0]
 800e4bc:	9301      	str	r3, [sp, #4]
 800e4be:	a902      	add	r1, sp, #8
 800e4c0:	f002 fbca 	bl	8010c58 <_svfiprintf_r>
 800e4c4:	9b02      	ldr	r3, [sp, #8]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	701a      	strb	r2, [r3, #0]
 800e4ca:	b01c      	add	sp, #112	; 0x70
 800e4cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e4d0:	b003      	add	sp, #12
 800e4d2:	4770      	bx	lr
 800e4d4:	20000084 	.word	0x20000084
 800e4d8:	ffff0208 	.word	0xffff0208

0800e4dc <siscanf>:
 800e4dc:	b40e      	push	{r1, r2, r3}
 800e4de:	b510      	push	{r4, lr}
 800e4e0:	b09f      	sub	sp, #124	; 0x7c
 800e4e2:	ac21      	add	r4, sp, #132	; 0x84
 800e4e4:	f44f 7101 	mov.w	r1, #516	; 0x204
 800e4e8:	f854 2b04 	ldr.w	r2, [r4], #4
 800e4ec:	9201      	str	r2, [sp, #4]
 800e4ee:	f8ad 101c 	strh.w	r1, [sp, #28]
 800e4f2:	9004      	str	r0, [sp, #16]
 800e4f4:	9008      	str	r0, [sp, #32]
 800e4f6:	f7f1 febb 	bl	8000270 <strlen>
 800e4fa:	4b0c      	ldr	r3, [pc, #48]	; (800e52c <siscanf+0x50>)
 800e4fc:	9005      	str	r0, [sp, #20]
 800e4fe:	9009      	str	r0, [sp, #36]	; 0x24
 800e500:	930d      	str	r3, [sp, #52]	; 0x34
 800e502:	480b      	ldr	r0, [pc, #44]	; (800e530 <siscanf+0x54>)
 800e504:	9a01      	ldr	r2, [sp, #4]
 800e506:	6800      	ldr	r0, [r0, #0]
 800e508:	9403      	str	r4, [sp, #12]
 800e50a:	2300      	movs	r3, #0
 800e50c:	9311      	str	r3, [sp, #68]	; 0x44
 800e50e:	9316      	str	r3, [sp, #88]	; 0x58
 800e510:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e514:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e518:	a904      	add	r1, sp, #16
 800e51a:	4623      	mov	r3, r4
 800e51c:	f002 fcf4 	bl	8010f08 <__ssvfiscanf_r>
 800e520:	b01f      	add	sp, #124	; 0x7c
 800e522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e526:	b003      	add	sp, #12
 800e528:	4770      	bx	lr
 800e52a:	bf00      	nop
 800e52c:	0800e557 	.word	0x0800e557
 800e530:	20000084 	.word	0x20000084

0800e534 <__sread>:
 800e534:	b510      	push	{r4, lr}
 800e536:	460c      	mov	r4, r1
 800e538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e53c:	f000 f8b0 	bl	800e6a0 <_read_r>
 800e540:	2800      	cmp	r0, #0
 800e542:	bfab      	itete	ge
 800e544:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e546:	89a3      	ldrhlt	r3, [r4, #12]
 800e548:	181b      	addge	r3, r3, r0
 800e54a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e54e:	bfac      	ite	ge
 800e550:	6563      	strge	r3, [r4, #84]	; 0x54
 800e552:	81a3      	strhlt	r3, [r4, #12]
 800e554:	bd10      	pop	{r4, pc}

0800e556 <__seofread>:
 800e556:	2000      	movs	r0, #0
 800e558:	4770      	bx	lr

0800e55a <__swrite>:
 800e55a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e55e:	461f      	mov	r7, r3
 800e560:	898b      	ldrh	r3, [r1, #12]
 800e562:	05db      	lsls	r3, r3, #23
 800e564:	4605      	mov	r5, r0
 800e566:	460c      	mov	r4, r1
 800e568:	4616      	mov	r6, r2
 800e56a:	d505      	bpl.n	800e578 <__swrite+0x1e>
 800e56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e570:	2302      	movs	r3, #2
 800e572:	2200      	movs	r2, #0
 800e574:	f000 f882 	bl	800e67c <_lseek_r>
 800e578:	89a3      	ldrh	r3, [r4, #12]
 800e57a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e57e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e582:	81a3      	strh	r3, [r4, #12]
 800e584:	4632      	mov	r2, r6
 800e586:	463b      	mov	r3, r7
 800e588:	4628      	mov	r0, r5
 800e58a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e58e:	f000 b8a9 	b.w	800e6e4 <_write_r>

0800e592 <__sseek>:
 800e592:	b510      	push	{r4, lr}
 800e594:	460c      	mov	r4, r1
 800e596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e59a:	f000 f86f 	bl	800e67c <_lseek_r>
 800e59e:	1c43      	adds	r3, r0, #1
 800e5a0:	89a3      	ldrh	r3, [r4, #12]
 800e5a2:	bf15      	itete	ne
 800e5a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e5a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e5aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e5ae:	81a3      	strheq	r3, [r4, #12]
 800e5b0:	bf18      	it	ne
 800e5b2:	81a3      	strhne	r3, [r4, #12]
 800e5b4:	bd10      	pop	{r4, pc}

0800e5b6 <__sclose>:
 800e5b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5ba:	f000 b84f 	b.w	800e65c <_close_r>

0800e5be <memset>:
 800e5be:	4402      	add	r2, r0
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d100      	bne.n	800e5c8 <memset+0xa>
 800e5c6:	4770      	bx	lr
 800e5c8:	f803 1b01 	strb.w	r1, [r3], #1
 800e5cc:	e7f9      	b.n	800e5c2 <memset+0x4>

0800e5ce <strnstr>:
 800e5ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e5d0:	460c      	mov	r4, r1
 800e5d2:	4605      	mov	r5, r0
 800e5d4:	4611      	mov	r1, r2
 800e5d6:	4620      	mov	r0, r4
 800e5d8:	9201      	str	r2, [sp, #4]
 800e5da:	f003 f8a8 	bl	801172e <strnlen>
 800e5de:	9901      	ldr	r1, [sp, #4]
 800e5e0:	4281      	cmp	r1, r0
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	d805      	bhi.n	800e5f2 <strnstr+0x24>
 800e5e6:	5c22      	ldrb	r2, [r4, r0]
 800e5e8:	b11a      	cbz	r2, 800e5f2 <strnstr+0x24>
 800e5ea:	2400      	movs	r4, #0
 800e5ec:	4620      	mov	r0, r4
 800e5ee:	b003      	add	sp, #12
 800e5f0:	bd30      	pop	{r4, r5, pc}
 800e5f2:	4622      	mov	r2, r4
 800e5f4:	4628      	mov	r0, r5
 800e5f6:	f000 f80b 	bl	800e610 <memmem>
 800e5fa:	4604      	mov	r4, r0
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	d0f4      	beq.n	800e5ea <strnstr+0x1c>
 800e600:	1b42      	subs	r2, r0, r5
 800e602:	2100      	movs	r1, #0
 800e604:	4628      	mov	r0, r5
 800e606:	f7f1 fde3 	bl	80001d0 <memchr>
 800e60a:	2800      	cmp	r0, #0
 800e60c:	d1ed      	bne.n	800e5ea <strnstr+0x1c>
 800e60e:	e7ed      	b.n	800e5ec <strnstr+0x1e>

0800e610 <memmem>:
 800e610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e614:	b1a3      	cbz	r3, 800e640 <memmem+0x30>
 800e616:	1ac9      	subs	r1, r1, r3
 800e618:	7817      	ldrb	r7, [r2, #0]
 800e61a:	4401      	add	r1, r0
 800e61c:	4604      	mov	r4, r0
 800e61e:	f103 3cff 	add.w	ip, r3, #4294967295
 800e622:	428c      	cmp	r4, r1
 800e624:	4620      	mov	r0, r4
 800e626:	d901      	bls.n	800e62c <memmem+0x1c>
 800e628:	2000      	movs	r0, #0
 800e62a:	e009      	b.n	800e640 <memmem+0x30>
 800e62c:	7805      	ldrb	r5, [r0, #0]
 800e62e:	42bd      	cmp	r5, r7
 800e630:	f104 0401 	add.w	r4, r4, #1
 800e634:	d1f5      	bne.n	800e622 <memmem+0x12>
 800e636:	eb0c 0504 	add.w	r5, ip, r4
 800e63a:	18d6      	adds	r6, r2, r3
 800e63c:	42a5      	cmp	r5, r4
 800e63e:	d101      	bne.n	800e644 <memmem+0x34>
 800e640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e644:	f815 8d01 	ldrb.w	r8, [r5, #-1]!
 800e648:	f816 ed01 	ldrb.w	lr, [r6, #-1]!
 800e64c:	45f0      	cmp	r8, lr
 800e64e:	d0f5      	beq.n	800e63c <memmem+0x2c>
 800e650:	e7e7      	b.n	800e622 <memmem+0x12>
	...

0800e654 <_localeconv_r>:
 800e654:	4800      	ldr	r0, [pc, #0]	; (800e658 <_localeconv_r+0x4>)
 800e656:	4770      	bx	lr
 800e658:	20000178 	.word	0x20000178

0800e65c <_close_r>:
 800e65c:	b538      	push	{r3, r4, r5, lr}
 800e65e:	4d06      	ldr	r5, [pc, #24]	; (800e678 <_close_r+0x1c>)
 800e660:	2300      	movs	r3, #0
 800e662:	4604      	mov	r4, r0
 800e664:	4608      	mov	r0, r1
 800e666:	602b      	str	r3, [r5, #0]
 800e668:	f7f3 fd07 	bl	800207a <_close>
 800e66c:	1c43      	adds	r3, r0, #1
 800e66e:	d102      	bne.n	800e676 <_close_r+0x1a>
 800e670:	682b      	ldr	r3, [r5, #0]
 800e672:	b103      	cbz	r3, 800e676 <_close_r+0x1a>
 800e674:	6023      	str	r3, [r4, #0]
 800e676:	bd38      	pop	{r3, r4, r5, pc}
 800e678:	200011c4 	.word	0x200011c4

0800e67c <_lseek_r>:
 800e67c:	b538      	push	{r3, r4, r5, lr}
 800e67e:	4d07      	ldr	r5, [pc, #28]	; (800e69c <_lseek_r+0x20>)
 800e680:	4604      	mov	r4, r0
 800e682:	4608      	mov	r0, r1
 800e684:	4611      	mov	r1, r2
 800e686:	2200      	movs	r2, #0
 800e688:	602a      	str	r2, [r5, #0]
 800e68a:	461a      	mov	r2, r3
 800e68c:	f7f3 fd1c 	bl	80020c8 <_lseek>
 800e690:	1c43      	adds	r3, r0, #1
 800e692:	d102      	bne.n	800e69a <_lseek_r+0x1e>
 800e694:	682b      	ldr	r3, [r5, #0]
 800e696:	b103      	cbz	r3, 800e69a <_lseek_r+0x1e>
 800e698:	6023      	str	r3, [r4, #0]
 800e69a:	bd38      	pop	{r3, r4, r5, pc}
 800e69c:	200011c4 	.word	0x200011c4

0800e6a0 <_read_r>:
 800e6a0:	b538      	push	{r3, r4, r5, lr}
 800e6a2:	4d07      	ldr	r5, [pc, #28]	; (800e6c0 <_read_r+0x20>)
 800e6a4:	4604      	mov	r4, r0
 800e6a6:	4608      	mov	r0, r1
 800e6a8:	4611      	mov	r1, r2
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	602a      	str	r2, [r5, #0]
 800e6ae:	461a      	mov	r2, r3
 800e6b0:	f7f3 fcaa 	bl	8002008 <_read>
 800e6b4:	1c43      	adds	r3, r0, #1
 800e6b6:	d102      	bne.n	800e6be <_read_r+0x1e>
 800e6b8:	682b      	ldr	r3, [r5, #0]
 800e6ba:	b103      	cbz	r3, 800e6be <_read_r+0x1e>
 800e6bc:	6023      	str	r3, [r4, #0]
 800e6be:	bd38      	pop	{r3, r4, r5, pc}
 800e6c0:	200011c4 	.word	0x200011c4

0800e6c4 <_sbrk_r>:
 800e6c4:	b538      	push	{r3, r4, r5, lr}
 800e6c6:	4d06      	ldr	r5, [pc, #24]	; (800e6e0 <_sbrk_r+0x1c>)
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	4604      	mov	r4, r0
 800e6cc:	4608      	mov	r0, r1
 800e6ce:	602b      	str	r3, [r5, #0]
 800e6d0:	f7f3 fd08 	bl	80020e4 <_sbrk>
 800e6d4:	1c43      	adds	r3, r0, #1
 800e6d6:	d102      	bne.n	800e6de <_sbrk_r+0x1a>
 800e6d8:	682b      	ldr	r3, [r5, #0]
 800e6da:	b103      	cbz	r3, 800e6de <_sbrk_r+0x1a>
 800e6dc:	6023      	str	r3, [r4, #0]
 800e6de:	bd38      	pop	{r3, r4, r5, pc}
 800e6e0:	200011c4 	.word	0x200011c4

0800e6e4 <_write_r>:
 800e6e4:	b538      	push	{r3, r4, r5, lr}
 800e6e6:	4d07      	ldr	r5, [pc, #28]	; (800e704 <_write_r+0x20>)
 800e6e8:	4604      	mov	r4, r0
 800e6ea:	4608      	mov	r0, r1
 800e6ec:	4611      	mov	r1, r2
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	602a      	str	r2, [r5, #0]
 800e6f2:	461a      	mov	r2, r3
 800e6f4:	f7f3 fca5 	bl	8002042 <_write>
 800e6f8:	1c43      	adds	r3, r0, #1
 800e6fa:	d102      	bne.n	800e702 <_write_r+0x1e>
 800e6fc:	682b      	ldr	r3, [r5, #0]
 800e6fe:	b103      	cbz	r3, 800e702 <_write_r+0x1e>
 800e700:	6023      	str	r3, [r4, #0]
 800e702:	bd38      	pop	{r3, r4, r5, pc}
 800e704:	200011c4 	.word	0x200011c4

0800e708 <__errno>:
 800e708:	4b01      	ldr	r3, [pc, #4]	; (800e710 <__errno+0x8>)
 800e70a:	6818      	ldr	r0, [r3, #0]
 800e70c:	4770      	bx	lr
 800e70e:	bf00      	nop
 800e710:	20000084 	.word	0x20000084

0800e714 <__libc_init_array>:
 800e714:	b570      	push	{r4, r5, r6, lr}
 800e716:	4d0d      	ldr	r5, [pc, #52]	; (800e74c <__libc_init_array+0x38>)
 800e718:	4c0d      	ldr	r4, [pc, #52]	; (800e750 <__libc_init_array+0x3c>)
 800e71a:	1b64      	subs	r4, r4, r5
 800e71c:	10a4      	asrs	r4, r4, #2
 800e71e:	2600      	movs	r6, #0
 800e720:	42a6      	cmp	r6, r4
 800e722:	d109      	bne.n	800e738 <__libc_init_array+0x24>
 800e724:	4d0b      	ldr	r5, [pc, #44]	; (800e754 <__libc_init_array+0x40>)
 800e726:	4c0c      	ldr	r4, [pc, #48]	; (800e758 <__libc_init_array+0x44>)
 800e728:	f003 ff26 	bl	8012578 <_init>
 800e72c:	1b64      	subs	r4, r4, r5
 800e72e:	10a4      	asrs	r4, r4, #2
 800e730:	2600      	movs	r6, #0
 800e732:	42a6      	cmp	r6, r4
 800e734:	d105      	bne.n	800e742 <__libc_init_array+0x2e>
 800e736:	bd70      	pop	{r4, r5, r6, pc}
 800e738:	f855 3b04 	ldr.w	r3, [r5], #4
 800e73c:	4798      	blx	r3
 800e73e:	3601      	adds	r6, #1
 800e740:	e7ee      	b.n	800e720 <__libc_init_array+0xc>
 800e742:	f855 3b04 	ldr.w	r3, [r5], #4
 800e746:	4798      	blx	r3
 800e748:	3601      	adds	r6, #1
 800e74a:	e7f2      	b.n	800e732 <__libc_init_array+0x1e>
 800e74c:	08012a6c 	.word	0x08012a6c
 800e750:	08012a6c 	.word	0x08012a6c
 800e754:	08012a6c 	.word	0x08012a6c
 800e758:	08012a70 	.word	0x08012a70

0800e75c <__retarget_lock_init_recursive>:
 800e75c:	4770      	bx	lr

0800e75e <__retarget_lock_acquire_recursive>:
 800e75e:	4770      	bx	lr

0800e760 <__retarget_lock_release_recursive>:
 800e760:	4770      	bx	lr

0800e762 <memcpy>:
 800e762:	440a      	add	r2, r1
 800e764:	4291      	cmp	r1, r2
 800e766:	f100 33ff 	add.w	r3, r0, #4294967295
 800e76a:	d100      	bne.n	800e76e <memcpy+0xc>
 800e76c:	4770      	bx	lr
 800e76e:	b510      	push	{r4, lr}
 800e770:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e774:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e778:	4291      	cmp	r1, r2
 800e77a:	d1f9      	bne.n	800e770 <memcpy+0xe>
 800e77c:	bd10      	pop	{r4, pc}
	...

0800e780 <nanf>:
 800e780:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e788 <nanf+0x8>
 800e784:	4770      	bx	lr
 800e786:	bf00      	nop
 800e788:	7fc00000 	.word	0x7fc00000

0800e78c <quorem>:
 800e78c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e790:	6903      	ldr	r3, [r0, #16]
 800e792:	690c      	ldr	r4, [r1, #16]
 800e794:	42a3      	cmp	r3, r4
 800e796:	4607      	mov	r7, r0
 800e798:	db7e      	blt.n	800e898 <quorem+0x10c>
 800e79a:	3c01      	subs	r4, #1
 800e79c:	f101 0814 	add.w	r8, r1, #20
 800e7a0:	f100 0514 	add.w	r5, r0, #20
 800e7a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e7a8:	9301      	str	r3, [sp, #4]
 800e7aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e7ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	429a      	cmp	r2, r3
 800e7b6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e7ba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e7be:	fbb2 f6f3 	udiv	r6, r2, r3
 800e7c2:	d331      	bcc.n	800e828 <quorem+0x9c>
 800e7c4:	f04f 0e00 	mov.w	lr, #0
 800e7c8:	4640      	mov	r0, r8
 800e7ca:	46ac      	mov	ip, r5
 800e7cc:	46f2      	mov	sl, lr
 800e7ce:	f850 2b04 	ldr.w	r2, [r0], #4
 800e7d2:	b293      	uxth	r3, r2
 800e7d4:	fb06 e303 	mla	r3, r6, r3, lr
 800e7d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e7dc:	0c1a      	lsrs	r2, r3, #16
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	ebaa 0303 	sub.w	r3, sl, r3
 800e7e4:	f8dc a000 	ldr.w	sl, [ip]
 800e7e8:	fa13 f38a 	uxtah	r3, r3, sl
 800e7ec:	fb06 220e 	mla	r2, r6, lr, r2
 800e7f0:	9300      	str	r3, [sp, #0]
 800e7f2:	9b00      	ldr	r3, [sp, #0]
 800e7f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e7f8:	b292      	uxth	r2, r2
 800e7fa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e7fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e802:	f8bd 3000 	ldrh.w	r3, [sp]
 800e806:	4581      	cmp	r9, r0
 800e808:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e80c:	f84c 3b04 	str.w	r3, [ip], #4
 800e810:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e814:	d2db      	bcs.n	800e7ce <quorem+0x42>
 800e816:	f855 300b 	ldr.w	r3, [r5, fp]
 800e81a:	b92b      	cbnz	r3, 800e828 <quorem+0x9c>
 800e81c:	9b01      	ldr	r3, [sp, #4]
 800e81e:	3b04      	subs	r3, #4
 800e820:	429d      	cmp	r5, r3
 800e822:	461a      	mov	r2, r3
 800e824:	d32c      	bcc.n	800e880 <quorem+0xf4>
 800e826:	613c      	str	r4, [r7, #16]
 800e828:	4638      	mov	r0, r7
 800e82a:	f001 f93d 	bl	800faa8 <__mcmp>
 800e82e:	2800      	cmp	r0, #0
 800e830:	db22      	blt.n	800e878 <quorem+0xec>
 800e832:	3601      	adds	r6, #1
 800e834:	4629      	mov	r1, r5
 800e836:	2000      	movs	r0, #0
 800e838:	f858 2b04 	ldr.w	r2, [r8], #4
 800e83c:	f8d1 c000 	ldr.w	ip, [r1]
 800e840:	b293      	uxth	r3, r2
 800e842:	1ac3      	subs	r3, r0, r3
 800e844:	0c12      	lsrs	r2, r2, #16
 800e846:	fa13 f38c 	uxtah	r3, r3, ip
 800e84a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e84e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e852:	b29b      	uxth	r3, r3
 800e854:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e858:	45c1      	cmp	r9, r8
 800e85a:	f841 3b04 	str.w	r3, [r1], #4
 800e85e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e862:	d2e9      	bcs.n	800e838 <quorem+0xac>
 800e864:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e868:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e86c:	b922      	cbnz	r2, 800e878 <quorem+0xec>
 800e86e:	3b04      	subs	r3, #4
 800e870:	429d      	cmp	r5, r3
 800e872:	461a      	mov	r2, r3
 800e874:	d30a      	bcc.n	800e88c <quorem+0x100>
 800e876:	613c      	str	r4, [r7, #16]
 800e878:	4630      	mov	r0, r6
 800e87a:	b003      	add	sp, #12
 800e87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e880:	6812      	ldr	r2, [r2, #0]
 800e882:	3b04      	subs	r3, #4
 800e884:	2a00      	cmp	r2, #0
 800e886:	d1ce      	bne.n	800e826 <quorem+0x9a>
 800e888:	3c01      	subs	r4, #1
 800e88a:	e7c9      	b.n	800e820 <quorem+0x94>
 800e88c:	6812      	ldr	r2, [r2, #0]
 800e88e:	3b04      	subs	r3, #4
 800e890:	2a00      	cmp	r2, #0
 800e892:	d1f0      	bne.n	800e876 <quorem+0xea>
 800e894:	3c01      	subs	r4, #1
 800e896:	e7eb      	b.n	800e870 <quorem+0xe4>
 800e898:	2000      	movs	r0, #0
 800e89a:	e7ee      	b.n	800e87a <quorem+0xee>
 800e89c:	0000      	movs	r0, r0
	...

0800e8a0 <_dtoa_r>:
 800e8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8a4:	ed2d 8b04 	vpush	{d8-d9}
 800e8a8:	69c5      	ldr	r5, [r0, #28]
 800e8aa:	b093      	sub	sp, #76	; 0x4c
 800e8ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e8b0:	ec57 6b10 	vmov	r6, r7, d0
 800e8b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e8b8:	9107      	str	r1, [sp, #28]
 800e8ba:	4604      	mov	r4, r0
 800e8bc:	920a      	str	r2, [sp, #40]	; 0x28
 800e8be:	930d      	str	r3, [sp, #52]	; 0x34
 800e8c0:	b975      	cbnz	r5, 800e8e0 <_dtoa_r+0x40>
 800e8c2:	2010      	movs	r0, #16
 800e8c4:	f7fe fdf6 	bl	800d4b4 <malloc>
 800e8c8:	4602      	mov	r2, r0
 800e8ca:	61e0      	str	r0, [r4, #28]
 800e8cc:	b920      	cbnz	r0, 800e8d8 <_dtoa_r+0x38>
 800e8ce:	4bae      	ldr	r3, [pc, #696]	; (800eb88 <_dtoa_r+0x2e8>)
 800e8d0:	21ef      	movs	r1, #239	; 0xef
 800e8d2:	48ae      	ldr	r0, [pc, #696]	; (800eb8c <_dtoa_r+0x2ec>)
 800e8d4:	f002 ff40 	bl	8011758 <__assert_func>
 800e8d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e8dc:	6005      	str	r5, [r0, #0]
 800e8de:	60c5      	str	r5, [r0, #12]
 800e8e0:	69e3      	ldr	r3, [r4, #28]
 800e8e2:	6819      	ldr	r1, [r3, #0]
 800e8e4:	b151      	cbz	r1, 800e8fc <_dtoa_r+0x5c>
 800e8e6:	685a      	ldr	r2, [r3, #4]
 800e8e8:	604a      	str	r2, [r1, #4]
 800e8ea:	2301      	movs	r3, #1
 800e8ec:	4093      	lsls	r3, r2
 800e8ee:	608b      	str	r3, [r1, #8]
 800e8f0:	4620      	mov	r0, r4
 800e8f2:	f000 fe53 	bl	800f59c <_Bfree>
 800e8f6:	69e3      	ldr	r3, [r4, #28]
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	601a      	str	r2, [r3, #0]
 800e8fc:	1e3b      	subs	r3, r7, #0
 800e8fe:	bfbb      	ittet	lt
 800e900:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e904:	9303      	strlt	r3, [sp, #12]
 800e906:	2300      	movge	r3, #0
 800e908:	2201      	movlt	r2, #1
 800e90a:	bfac      	ite	ge
 800e90c:	f8c8 3000 	strge.w	r3, [r8]
 800e910:	f8c8 2000 	strlt.w	r2, [r8]
 800e914:	4b9e      	ldr	r3, [pc, #632]	; (800eb90 <_dtoa_r+0x2f0>)
 800e916:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e91a:	ea33 0308 	bics.w	r3, r3, r8
 800e91e:	d11b      	bne.n	800e958 <_dtoa_r+0xb8>
 800e920:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e922:	f242 730f 	movw	r3, #9999	; 0x270f
 800e926:	6013      	str	r3, [r2, #0]
 800e928:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e92c:	4333      	orrs	r3, r6
 800e92e:	f000 8593 	beq.w	800f458 <_dtoa_r+0xbb8>
 800e932:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e934:	b963      	cbnz	r3, 800e950 <_dtoa_r+0xb0>
 800e936:	4b97      	ldr	r3, [pc, #604]	; (800eb94 <_dtoa_r+0x2f4>)
 800e938:	e027      	b.n	800e98a <_dtoa_r+0xea>
 800e93a:	4b97      	ldr	r3, [pc, #604]	; (800eb98 <_dtoa_r+0x2f8>)
 800e93c:	9300      	str	r3, [sp, #0]
 800e93e:	3308      	adds	r3, #8
 800e940:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e942:	6013      	str	r3, [r2, #0]
 800e944:	9800      	ldr	r0, [sp, #0]
 800e946:	b013      	add	sp, #76	; 0x4c
 800e948:	ecbd 8b04 	vpop	{d8-d9}
 800e94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e950:	4b90      	ldr	r3, [pc, #576]	; (800eb94 <_dtoa_r+0x2f4>)
 800e952:	9300      	str	r3, [sp, #0]
 800e954:	3303      	adds	r3, #3
 800e956:	e7f3      	b.n	800e940 <_dtoa_r+0xa0>
 800e958:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e95c:	2200      	movs	r2, #0
 800e95e:	ec51 0b17 	vmov	r0, r1, d7
 800e962:	eeb0 8a47 	vmov.f32	s16, s14
 800e966:	eef0 8a67 	vmov.f32	s17, s15
 800e96a:	2300      	movs	r3, #0
 800e96c:	f7f2 f8ac 	bl	8000ac8 <__aeabi_dcmpeq>
 800e970:	4681      	mov	r9, r0
 800e972:	b160      	cbz	r0, 800e98e <_dtoa_r+0xee>
 800e974:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e976:	2301      	movs	r3, #1
 800e978:	6013      	str	r3, [r2, #0]
 800e97a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	f000 8568 	beq.w	800f452 <_dtoa_r+0xbb2>
 800e982:	4b86      	ldr	r3, [pc, #536]	; (800eb9c <_dtoa_r+0x2fc>)
 800e984:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e986:	6013      	str	r3, [r2, #0]
 800e988:	3b01      	subs	r3, #1
 800e98a:	9300      	str	r3, [sp, #0]
 800e98c:	e7da      	b.n	800e944 <_dtoa_r+0xa4>
 800e98e:	aa10      	add	r2, sp, #64	; 0x40
 800e990:	a911      	add	r1, sp, #68	; 0x44
 800e992:	4620      	mov	r0, r4
 800e994:	eeb0 0a48 	vmov.f32	s0, s16
 800e998:	eef0 0a68 	vmov.f32	s1, s17
 800e99c:	f001 f99a 	bl	800fcd4 <__d2b>
 800e9a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e9a4:	4682      	mov	sl, r0
 800e9a6:	2d00      	cmp	r5, #0
 800e9a8:	d07f      	beq.n	800eaaa <_dtoa_r+0x20a>
 800e9aa:	ee18 3a90 	vmov	r3, s17
 800e9ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e9b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e9b6:	ec51 0b18 	vmov	r0, r1, d8
 800e9ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e9be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e9c2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e9c6:	4619      	mov	r1, r3
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	4b75      	ldr	r3, [pc, #468]	; (800eba0 <_dtoa_r+0x300>)
 800e9cc:	f7f1 fc5c 	bl	8000288 <__aeabi_dsub>
 800e9d0:	a367      	add	r3, pc, #412	; (adr r3, 800eb70 <_dtoa_r+0x2d0>)
 800e9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d6:	f7f1 fe0f 	bl	80005f8 <__aeabi_dmul>
 800e9da:	a367      	add	r3, pc, #412	; (adr r3, 800eb78 <_dtoa_r+0x2d8>)
 800e9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e0:	f7f1 fc54 	bl	800028c <__adddf3>
 800e9e4:	4606      	mov	r6, r0
 800e9e6:	4628      	mov	r0, r5
 800e9e8:	460f      	mov	r7, r1
 800e9ea:	f7f1 fd9b 	bl	8000524 <__aeabi_i2d>
 800e9ee:	a364      	add	r3, pc, #400	; (adr r3, 800eb80 <_dtoa_r+0x2e0>)
 800e9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f4:	f7f1 fe00 	bl	80005f8 <__aeabi_dmul>
 800e9f8:	4602      	mov	r2, r0
 800e9fa:	460b      	mov	r3, r1
 800e9fc:	4630      	mov	r0, r6
 800e9fe:	4639      	mov	r1, r7
 800ea00:	f7f1 fc44 	bl	800028c <__adddf3>
 800ea04:	4606      	mov	r6, r0
 800ea06:	460f      	mov	r7, r1
 800ea08:	f7f2 f8a6 	bl	8000b58 <__aeabi_d2iz>
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	4683      	mov	fp, r0
 800ea10:	2300      	movs	r3, #0
 800ea12:	4630      	mov	r0, r6
 800ea14:	4639      	mov	r1, r7
 800ea16:	f7f2 f861 	bl	8000adc <__aeabi_dcmplt>
 800ea1a:	b148      	cbz	r0, 800ea30 <_dtoa_r+0x190>
 800ea1c:	4658      	mov	r0, fp
 800ea1e:	f7f1 fd81 	bl	8000524 <__aeabi_i2d>
 800ea22:	4632      	mov	r2, r6
 800ea24:	463b      	mov	r3, r7
 800ea26:	f7f2 f84f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea2a:	b908      	cbnz	r0, 800ea30 <_dtoa_r+0x190>
 800ea2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ea30:	f1bb 0f16 	cmp.w	fp, #22
 800ea34:	d857      	bhi.n	800eae6 <_dtoa_r+0x246>
 800ea36:	4b5b      	ldr	r3, [pc, #364]	; (800eba4 <_dtoa_r+0x304>)
 800ea38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ea3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea40:	ec51 0b18 	vmov	r0, r1, d8
 800ea44:	f7f2 f84a 	bl	8000adc <__aeabi_dcmplt>
 800ea48:	2800      	cmp	r0, #0
 800ea4a:	d04e      	beq.n	800eaea <_dtoa_r+0x24a>
 800ea4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ea50:	2300      	movs	r3, #0
 800ea52:	930c      	str	r3, [sp, #48]	; 0x30
 800ea54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ea56:	1b5b      	subs	r3, r3, r5
 800ea58:	1e5a      	subs	r2, r3, #1
 800ea5a:	bf45      	ittet	mi
 800ea5c:	f1c3 0301 	rsbmi	r3, r3, #1
 800ea60:	9305      	strmi	r3, [sp, #20]
 800ea62:	2300      	movpl	r3, #0
 800ea64:	2300      	movmi	r3, #0
 800ea66:	9206      	str	r2, [sp, #24]
 800ea68:	bf54      	ite	pl
 800ea6a:	9305      	strpl	r3, [sp, #20]
 800ea6c:	9306      	strmi	r3, [sp, #24]
 800ea6e:	f1bb 0f00 	cmp.w	fp, #0
 800ea72:	db3c      	blt.n	800eaee <_dtoa_r+0x24e>
 800ea74:	9b06      	ldr	r3, [sp, #24]
 800ea76:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ea7a:	445b      	add	r3, fp
 800ea7c:	9306      	str	r3, [sp, #24]
 800ea7e:	2300      	movs	r3, #0
 800ea80:	9308      	str	r3, [sp, #32]
 800ea82:	9b07      	ldr	r3, [sp, #28]
 800ea84:	2b09      	cmp	r3, #9
 800ea86:	d868      	bhi.n	800eb5a <_dtoa_r+0x2ba>
 800ea88:	2b05      	cmp	r3, #5
 800ea8a:	bfc4      	itt	gt
 800ea8c:	3b04      	subgt	r3, #4
 800ea8e:	9307      	strgt	r3, [sp, #28]
 800ea90:	9b07      	ldr	r3, [sp, #28]
 800ea92:	f1a3 0302 	sub.w	r3, r3, #2
 800ea96:	bfcc      	ite	gt
 800ea98:	2500      	movgt	r5, #0
 800ea9a:	2501      	movle	r5, #1
 800ea9c:	2b03      	cmp	r3, #3
 800ea9e:	f200 8085 	bhi.w	800ebac <_dtoa_r+0x30c>
 800eaa2:	e8df f003 	tbb	[pc, r3]
 800eaa6:	3b2e      	.short	0x3b2e
 800eaa8:	5839      	.short	0x5839
 800eaaa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800eaae:	441d      	add	r5, r3
 800eab0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800eab4:	2b20      	cmp	r3, #32
 800eab6:	bfc1      	itttt	gt
 800eab8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800eabc:	fa08 f803 	lslgt.w	r8, r8, r3
 800eac0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800eac4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800eac8:	bfd6      	itet	le
 800eaca:	f1c3 0320 	rsble	r3, r3, #32
 800eace:	ea48 0003 	orrgt.w	r0, r8, r3
 800ead2:	fa06 f003 	lslle.w	r0, r6, r3
 800ead6:	f7f1 fd15 	bl	8000504 <__aeabi_ui2d>
 800eada:	2201      	movs	r2, #1
 800eadc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800eae0:	3d01      	subs	r5, #1
 800eae2:	920e      	str	r2, [sp, #56]	; 0x38
 800eae4:	e76f      	b.n	800e9c6 <_dtoa_r+0x126>
 800eae6:	2301      	movs	r3, #1
 800eae8:	e7b3      	b.n	800ea52 <_dtoa_r+0x1b2>
 800eaea:	900c      	str	r0, [sp, #48]	; 0x30
 800eaec:	e7b2      	b.n	800ea54 <_dtoa_r+0x1b4>
 800eaee:	9b05      	ldr	r3, [sp, #20]
 800eaf0:	eba3 030b 	sub.w	r3, r3, fp
 800eaf4:	9305      	str	r3, [sp, #20]
 800eaf6:	f1cb 0300 	rsb	r3, fp, #0
 800eafa:	9308      	str	r3, [sp, #32]
 800eafc:	2300      	movs	r3, #0
 800eafe:	930b      	str	r3, [sp, #44]	; 0x2c
 800eb00:	e7bf      	b.n	800ea82 <_dtoa_r+0x1e2>
 800eb02:	2300      	movs	r3, #0
 800eb04:	9309      	str	r3, [sp, #36]	; 0x24
 800eb06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	dc52      	bgt.n	800ebb2 <_dtoa_r+0x312>
 800eb0c:	2301      	movs	r3, #1
 800eb0e:	9301      	str	r3, [sp, #4]
 800eb10:	9304      	str	r3, [sp, #16]
 800eb12:	461a      	mov	r2, r3
 800eb14:	920a      	str	r2, [sp, #40]	; 0x28
 800eb16:	e00b      	b.n	800eb30 <_dtoa_r+0x290>
 800eb18:	2301      	movs	r3, #1
 800eb1a:	e7f3      	b.n	800eb04 <_dtoa_r+0x264>
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	9309      	str	r3, [sp, #36]	; 0x24
 800eb20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb22:	445b      	add	r3, fp
 800eb24:	9301      	str	r3, [sp, #4]
 800eb26:	3301      	adds	r3, #1
 800eb28:	2b01      	cmp	r3, #1
 800eb2a:	9304      	str	r3, [sp, #16]
 800eb2c:	bfb8      	it	lt
 800eb2e:	2301      	movlt	r3, #1
 800eb30:	69e0      	ldr	r0, [r4, #28]
 800eb32:	2100      	movs	r1, #0
 800eb34:	2204      	movs	r2, #4
 800eb36:	f102 0614 	add.w	r6, r2, #20
 800eb3a:	429e      	cmp	r6, r3
 800eb3c:	d93d      	bls.n	800ebba <_dtoa_r+0x31a>
 800eb3e:	6041      	str	r1, [r0, #4]
 800eb40:	4620      	mov	r0, r4
 800eb42:	f000 fceb 	bl	800f51c <_Balloc>
 800eb46:	9000      	str	r0, [sp, #0]
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	d139      	bne.n	800ebc0 <_dtoa_r+0x320>
 800eb4c:	4b16      	ldr	r3, [pc, #88]	; (800eba8 <_dtoa_r+0x308>)
 800eb4e:	4602      	mov	r2, r0
 800eb50:	f240 11af 	movw	r1, #431	; 0x1af
 800eb54:	e6bd      	b.n	800e8d2 <_dtoa_r+0x32>
 800eb56:	2301      	movs	r3, #1
 800eb58:	e7e1      	b.n	800eb1e <_dtoa_r+0x27e>
 800eb5a:	2501      	movs	r5, #1
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	9307      	str	r3, [sp, #28]
 800eb60:	9509      	str	r5, [sp, #36]	; 0x24
 800eb62:	f04f 33ff 	mov.w	r3, #4294967295
 800eb66:	9301      	str	r3, [sp, #4]
 800eb68:	9304      	str	r3, [sp, #16]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	2312      	movs	r3, #18
 800eb6e:	e7d1      	b.n	800eb14 <_dtoa_r+0x274>
 800eb70:	636f4361 	.word	0x636f4361
 800eb74:	3fd287a7 	.word	0x3fd287a7
 800eb78:	8b60c8b3 	.word	0x8b60c8b3
 800eb7c:	3fc68a28 	.word	0x3fc68a28
 800eb80:	509f79fb 	.word	0x509f79fb
 800eb84:	3fd34413 	.word	0x3fd34413
 800eb88:	08012660 	.word	0x08012660
 800eb8c:	08012677 	.word	0x08012677
 800eb90:	7ff00000 	.word	0x7ff00000
 800eb94:	0801265c 	.word	0x0801265c
 800eb98:	08012653 	.word	0x08012653
 800eb9c:	080129b9 	.word	0x080129b9
 800eba0:	3ff80000 	.word	0x3ff80000
 800eba4:	08012768 	.word	0x08012768
 800eba8:	080126cf 	.word	0x080126cf
 800ebac:	2301      	movs	r3, #1
 800ebae:	9309      	str	r3, [sp, #36]	; 0x24
 800ebb0:	e7d7      	b.n	800eb62 <_dtoa_r+0x2c2>
 800ebb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebb4:	9301      	str	r3, [sp, #4]
 800ebb6:	9304      	str	r3, [sp, #16]
 800ebb8:	e7ba      	b.n	800eb30 <_dtoa_r+0x290>
 800ebba:	3101      	adds	r1, #1
 800ebbc:	0052      	lsls	r2, r2, #1
 800ebbe:	e7ba      	b.n	800eb36 <_dtoa_r+0x296>
 800ebc0:	69e3      	ldr	r3, [r4, #28]
 800ebc2:	9a00      	ldr	r2, [sp, #0]
 800ebc4:	601a      	str	r2, [r3, #0]
 800ebc6:	9b04      	ldr	r3, [sp, #16]
 800ebc8:	2b0e      	cmp	r3, #14
 800ebca:	f200 80a8 	bhi.w	800ed1e <_dtoa_r+0x47e>
 800ebce:	2d00      	cmp	r5, #0
 800ebd0:	f000 80a5 	beq.w	800ed1e <_dtoa_r+0x47e>
 800ebd4:	f1bb 0f00 	cmp.w	fp, #0
 800ebd8:	dd38      	ble.n	800ec4c <_dtoa_r+0x3ac>
 800ebda:	4bc0      	ldr	r3, [pc, #768]	; (800eedc <_dtoa_r+0x63c>)
 800ebdc:	f00b 020f 	and.w	r2, fp, #15
 800ebe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ebe4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ebe8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ebec:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ebf0:	d019      	beq.n	800ec26 <_dtoa_r+0x386>
 800ebf2:	4bbb      	ldr	r3, [pc, #748]	; (800eee0 <_dtoa_r+0x640>)
 800ebf4:	ec51 0b18 	vmov	r0, r1, d8
 800ebf8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ebfc:	f7f1 fe26 	bl	800084c <__aeabi_ddiv>
 800ec00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec04:	f008 080f 	and.w	r8, r8, #15
 800ec08:	2503      	movs	r5, #3
 800ec0a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800eee0 <_dtoa_r+0x640>
 800ec0e:	f1b8 0f00 	cmp.w	r8, #0
 800ec12:	d10a      	bne.n	800ec2a <_dtoa_r+0x38a>
 800ec14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec18:	4632      	mov	r2, r6
 800ec1a:	463b      	mov	r3, r7
 800ec1c:	f7f1 fe16 	bl	800084c <__aeabi_ddiv>
 800ec20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec24:	e02b      	b.n	800ec7e <_dtoa_r+0x3de>
 800ec26:	2502      	movs	r5, #2
 800ec28:	e7ef      	b.n	800ec0a <_dtoa_r+0x36a>
 800ec2a:	f018 0f01 	tst.w	r8, #1
 800ec2e:	d008      	beq.n	800ec42 <_dtoa_r+0x3a2>
 800ec30:	4630      	mov	r0, r6
 800ec32:	4639      	mov	r1, r7
 800ec34:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ec38:	f7f1 fcde 	bl	80005f8 <__aeabi_dmul>
 800ec3c:	3501      	adds	r5, #1
 800ec3e:	4606      	mov	r6, r0
 800ec40:	460f      	mov	r7, r1
 800ec42:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ec46:	f109 0908 	add.w	r9, r9, #8
 800ec4a:	e7e0      	b.n	800ec0e <_dtoa_r+0x36e>
 800ec4c:	f000 809f 	beq.w	800ed8e <_dtoa_r+0x4ee>
 800ec50:	f1cb 0600 	rsb	r6, fp, #0
 800ec54:	4ba1      	ldr	r3, [pc, #644]	; (800eedc <_dtoa_r+0x63c>)
 800ec56:	4fa2      	ldr	r7, [pc, #648]	; (800eee0 <_dtoa_r+0x640>)
 800ec58:	f006 020f 	and.w	r2, r6, #15
 800ec5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec64:	ec51 0b18 	vmov	r0, r1, d8
 800ec68:	f7f1 fcc6 	bl	80005f8 <__aeabi_dmul>
 800ec6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec70:	1136      	asrs	r6, r6, #4
 800ec72:	2300      	movs	r3, #0
 800ec74:	2502      	movs	r5, #2
 800ec76:	2e00      	cmp	r6, #0
 800ec78:	d17e      	bne.n	800ed78 <_dtoa_r+0x4d8>
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d1d0      	bne.n	800ec20 <_dtoa_r+0x380>
 800ec7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec80:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	f000 8084 	beq.w	800ed92 <_dtoa_r+0x4f2>
 800ec8a:	4b96      	ldr	r3, [pc, #600]	; (800eee4 <_dtoa_r+0x644>)
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	4640      	mov	r0, r8
 800ec90:	4649      	mov	r1, r9
 800ec92:	f7f1 ff23 	bl	8000adc <__aeabi_dcmplt>
 800ec96:	2800      	cmp	r0, #0
 800ec98:	d07b      	beq.n	800ed92 <_dtoa_r+0x4f2>
 800ec9a:	9b04      	ldr	r3, [sp, #16]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d078      	beq.n	800ed92 <_dtoa_r+0x4f2>
 800eca0:	9b01      	ldr	r3, [sp, #4]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	dd39      	ble.n	800ed1a <_dtoa_r+0x47a>
 800eca6:	4b90      	ldr	r3, [pc, #576]	; (800eee8 <_dtoa_r+0x648>)
 800eca8:	2200      	movs	r2, #0
 800ecaa:	4640      	mov	r0, r8
 800ecac:	4649      	mov	r1, r9
 800ecae:	f7f1 fca3 	bl	80005f8 <__aeabi_dmul>
 800ecb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ecb6:	9e01      	ldr	r6, [sp, #4]
 800ecb8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ecbc:	3501      	adds	r5, #1
 800ecbe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ecc2:	4628      	mov	r0, r5
 800ecc4:	f7f1 fc2e 	bl	8000524 <__aeabi_i2d>
 800ecc8:	4642      	mov	r2, r8
 800ecca:	464b      	mov	r3, r9
 800eccc:	f7f1 fc94 	bl	80005f8 <__aeabi_dmul>
 800ecd0:	4b86      	ldr	r3, [pc, #536]	; (800eeec <_dtoa_r+0x64c>)
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	f7f1 fada 	bl	800028c <__adddf3>
 800ecd8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ecdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ece0:	9303      	str	r3, [sp, #12]
 800ece2:	2e00      	cmp	r6, #0
 800ece4:	d158      	bne.n	800ed98 <_dtoa_r+0x4f8>
 800ece6:	4b82      	ldr	r3, [pc, #520]	; (800eef0 <_dtoa_r+0x650>)
 800ece8:	2200      	movs	r2, #0
 800ecea:	4640      	mov	r0, r8
 800ecec:	4649      	mov	r1, r9
 800ecee:	f7f1 facb 	bl	8000288 <__aeabi_dsub>
 800ecf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ecf6:	4680      	mov	r8, r0
 800ecf8:	4689      	mov	r9, r1
 800ecfa:	f7f1 ff0d 	bl	8000b18 <__aeabi_dcmpgt>
 800ecfe:	2800      	cmp	r0, #0
 800ed00:	f040 8296 	bne.w	800f230 <_dtoa_r+0x990>
 800ed04:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ed08:	4640      	mov	r0, r8
 800ed0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed0e:	4649      	mov	r1, r9
 800ed10:	f7f1 fee4 	bl	8000adc <__aeabi_dcmplt>
 800ed14:	2800      	cmp	r0, #0
 800ed16:	f040 8289 	bne.w	800f22c <_dtoa_r+0x98c>
 800ed1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ed1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	f2c0 814e 	blt.w	800efc2 <_dtoa_r+0x722>
 800ed26:	f1bb 0f0e 	cmp.w	fp, #14
 800ed2a:	f300 814a 	bgt.w	800efc2 <_dtoa_r+0x722>
 800ed2e:	4b6b      	ldr	r3, [pc, #428]	; (800eedc <_dtoa_r+0x63c>)
 800ed30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ed34:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ed38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	f280 80dc 	bge.w	800eef8 <_dtoa_r+0x658>
 800ed40:	9b04      	ldr	r3, [sp, #16]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	f300 80d8 	bgt.w	800eef8 <_dtoa_r+0x658>
 800ed48:	f040 826f 	bne.w	800f22a <_dtoa_r+0x98a>
 800ed4c:	4b68      	ldr	r3, [pc, #416]	; (800eef0 <_dtoa_r+0x650>)
 800ed4e:	2200      	movs	r2, #0
 800ed50:	4640      	mov	r0, r8
 800ed52:	4649      	mov	r1, r9
 800ed54:	f7f1 fc50 	bl	80005f8 <__aeabi_dmul>
 800ed58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed5c:	f7f1 fed2 	bl	8000b04 <__aeabi_dcmpge>
 800ed60:	9e04      	ldr	r6, [sp, #16]
 800ed62:	4637      	mov	r7, r6
 800ed64:	2800      	cmp	r0, #0
 800ed66:	f040 8245 	bne.w	800f1f4 <_dtoa_r+0x954>
 800ed6a:	9d00      	ldr	r5, [sp, #0]
 800ed6c:	2331      	movs	r3, #49	; 0x31
 800ed6e:	f805 3b01 	strb.w	r3, [r5], #1
 800ed72:	f10b 0b01 	add.w	fp, fp, #1
 800ed76:	e241      	b.n	800f1fc <_dtoa_r+0x95c>
 800ed78:	07f2      	lsls	r2, r6, #31
 800ed7a:	d505      	bpl.n	800ed88 <_dtoa_r+0x4e8>
 800ed7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed80:	f7f1 fc3a 	bl	80005f8 <__aeabi_dmul>
 800ed84:	3501      	adds	r5, #1
 800ed86:	2301      	movs	r3, #1
 800ed88:	1076      	asrs	r6, r6, #1
 800ed8a:	3708      	adds	r7, #8
 800ed8c:	e773      	b.n	800ec76 <_dtoa_r+0x3d6>
 800ed8e:	2502      	movs	r5, #2
 800ed90:	e775      	b.n	800ec7e <_dtoa_r+0x3de>
 800ed92:	9e04      	ldr	r6, [sp, #16]
 800ed94:	465f      	mov	r7, fp
 800ed96:	e792      	b.n	800ecbe <_dtoa_r+0x41e>
 800ed98:	9900      	ldr	r1, [sp, #0]
 800ed9a:	4b50      	ldr	r3, [pc, #320]	; (800eedc <_dtoa_r+0x63c>)
 800ed9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eda0:	4431      	add	r1, r6
 800eda2:	9102      	str	r1, [sp, #8]
 800eda4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eda6:	eeb0 9a47 	vmov.f32	s18, s14
 800edaa:	eef0 9a67 	vmov.f32	s19, s15
 800edae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800edb2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800edb6:	2900      	cmp	r1, #0
 800edb8:	d044      	beq.n	800ee44 <_dtoa_r+0x5a4>
 800edba:	494e      	ldr	r1, [pc, #312]	; (800eef4 <_dtoa_r+0x654>)
 800edbc:	2000      	movs	r0, #0
 800edbe:	f7f1 fd45 	bl	800084c <__aeabi_ddiv>
 800edc2:	ec53 2b19 	vmov	r2, r3, d9
 800edc6:	f7f1 fa5f 	bl	8000288 <__aeabi_dsub>
 800edca:	9d00      	ldr	r5, [sp, #0]
 800edcc:	ec41 0b19 	vmov	d9, r0, r1
 800edd0:	4649      	mov	r1, r9
 800edd2:	4640      	mov	r0, r8
 800edd4:	f7f1 fec0 	bl	8000b58 <__aeabi_d2iz>
 800edd8:	4606      	mov	r6, r0
 800edda:	f7f1 fba3 	bl	8000524 <__aeabi_i2d>
 800edde:	4602      	mov	r2, r0
 800ede0:	460b      	mov	r3, r1
 800ede2:	4640      	mov	r0, r8
 800ede4:	4649      	mov	r1, r9
 800ede6:	f7f1 fa4f 	bl	8000288 <__aeabi_dsub>
 800edea:	3630      	adds	r6, #48	; 0x30
 800edec:	f805 6b01 	strb.w	r6, [r5], #1
 800edf0:	ec53 2b19 	vmov	r2, r3, d9
 800edf4:	4680      	mov	r8, r0
 800edf6:	4689      	mov	r9, r1
 800edf8:	f7f1 fe70 	bl	8000adc <__aeabi_dcmplt>
 800edfc:	2800      	cmp	r0, #0
 800edfe:	d164      	bne.n	800eeca <_dtoa_r+0x62a>
 800ee00:	4642      	mov	r2, r8
 800ee02:	464b      	mov	r3, r9
 800ee04:	4937      	ldr	r1, [pc, #220]	; (800eee4 <_dtoa_r+0x644>)
 800ee06:	2000      	movs	r0, #0
 800ee08:	f7f1 fa3e 	bl	8000288 <__aeabi_dsub>
 800ee0c:	ec53 2b19 	vmov	r2, r3, d9
 800ee10:	f7f1 fe64 	bl	8000adc <__aeabi_dcmplt>
 800ee14:	2800      	cmp	r0, #0
 800ee16:	f040 80b6 	bne.w	800ef86 <_dtoa_r+0x6e6>
 800ee1a:	9b02      	ldr	r3, [sp, #8]
 800ee1c:	429d      	cmp	r5, r3
 800ee1e:	f43f af7c 	beq.w	800ed1a <_dtoa_r+0x47a>
 800ee22:	4b31      	ldr	r3, [pc, #196]	; (800eee8 <_dtoa_r+0x648>)
 800ee24:	ec51 0b19 	vmov	r0, r1, d9
 800ee28:	2200      	movs	r2, #0
 800ee2a:	f7f1 fbe5 	bl	80005f8 <__aeabi_dmul>
 800ee2e:	4b2e      	ldr	r3, [pc, #184]	; (800eee8 <_dtoa_r+0x648>)
 800ee30:	ec41 0b19 	vmov	d9, r0, r1
 800ee34:	2200      	movs	r2, #0
 800ee36:	4640      	mov	r0, r8
 800ee38:	4649      	mov	r1, r9
 800ee3a:	f7f1 fbdd 	bl	80005f8 <__aeabi_dmul>
 800ee3e:	4680      	mov	r8, r0
 800ee40:	4689      	mov	r9, r1
 800ee42:	e7c5      	b.n	800edd0 <_dtoa_r+0x530>
 800ee44:	ec51 0b17 	vmov	r0, r1, d7
 800ee48:	f7f1 fbd6 	bl	80005f8 <__aeabi_dmul>
 800ee4c:	9b02      	ldr	r3, [sp, #8]
 800ee4e:	9d00      	ldr	r5, [sp, #0]
 800ee50:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee52:	ec41 0b19 	vmov	d9, r0, r1
 800ee56:	4649      	mov	r1, r9
 800ee58:	4640      	mov	r0, r8
 800ee5a:	f7f1 fe7d 	bl	8000b58 <__aeabi_d2iz>
 800ee5e:	4606      	mov	r6, r0
 800ee60:	f7f1 fb60 	bl	8000524 <__aeabi_i2d>
 800ee64:	3630      	adds	r6, #48	; 0x30
 800ee66:	4602      	mov	r2, r0
 800ee68:	460b      	mov	r3, r1
 800ee6a:	4640      	mov	r0, r8
 800ee6c:	4649      	mov	r1, r9
 800ee6e:	f7f1 fa0b 	bl	8000288 <__aeabi_dsub>
 800ee72:	f805 6b01 	strb.w	r6, [r5], #1
 800ee76:	9b02      	ldr	r3, [sp, #8]
 800ee78:	429d      	cmp	r5, r3
 800ee7a:	4680      	mov	r8, r0
 800ee7c:	4689      	mov	r9, r1
 800ee7e:	f04f 0200 	mov.w	r2, #0
 800ee82:	d124      	bne.n	800eece <_dtoa_r+0x62e>
 800ee84:	4b1b      	ldr	r3, [pc, #108]	; (800eef4 <_dtoa_r+0x654>)
 800ee86:	ec51 0b19 	vmov	r0, r1, d9
 800ee8a:	f7f1 f9ff 	bl	800028c <__adddf3>
 800ee8e:	4602      	mov	r2, r0
 800ee90:	460b      	mov	r3, r1
 800ee92:	4640      	mov	r0, r8
 800ee94:	4649      	mov	r1, r9
 800ee96:	f7f1 fe3f 	bl	8000b18 <__aeabi_dcmpgt>
 800ee9a:	2800      	cmp	r0, #0
 800ee9c:	d173      	bne.n	800ef86 <_dtoa_r+0x6e6>
 800ee9e:	ec53 2b19 	vmov	r2, r3, d9
 800eea2:	4914      	ldr	r1, [pc, #80]	; (800eef4 <_dtoa_r+0x654>)
 800eea4:	2000      	movs	r0, #0
 800eea6:	f7f1 f9ef 	bl	8000288 <__aeabi_dsub>
 800eeaa:	4602      	mov	r2, r0
 800eeac:	460b      	mov	r3, r1
 800eeae:	4640      	mov	r0, r8
 800eeb0:	4649      	mov	r1, r9
 800eeb2:	f7f1 fe13 	bl	8000adc <__aeabi_dcmplt>
 800eeb6:	2800      	cmp	r0, #0
 800eeb8:	f43f af2f 	beq.w	800ed1a <_dtoa_r+0x47a>
 800eebc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800eebe:	1e6b      	subs	r3, r5, #1
 800eec0:	930f      	str	r3, [sp, #60]	; 0x3c
 800eec2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800eec6:	2b30      	cmp	r3, #48	; 0x30
 800eec8:	d0f8      	beq.n	800eebc <_dtoa_r+0x61c>
 800eeca:	46bb      	mov	fp, r7
 800eecc:	e04a      	b.n	800ef64 <_dtoa_r+0x6c4>
 800eece:	4b06      	ldr	r3, [pc, #24]	; (800eee8 <_dtoa_r+0x648>)
 800eed0:	f7f1 fb92 	bl	80005f8 <__aeabi_dmul>
 800eed4:	4680      	mov	r8, r0
 800eed6:	4689      	mov	r9, r1
 800eed8:	e7bd      	b.n	800ee56 <_dtoa_r+0x5b6>
 800eeda:	bf00      	nop
 800eedc:	08012768 	.word	0x08012768
 800eee0:	08012740 	.word	0x08012740
 800eee4:	3ff00000 	.word	0x3ff00000
 800eee8:	40240000 	.word	0x40240000
 800eeec:	401c0000 	.word	0x401c0000
 800eef0:	40140000 	.word	0x40140000
 800eef4:	3fe00000 	.word	0x3fe00000
 800eef8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800eefc:	9d00      	ldr	r5, [sp, #0]
 800eefe:	4642      	mov	r2, r8
 800ef00:	464b      	mov	r3, r9
 800ef02:	4630      	mov	r0, r6
 800ef04:	4639      	mov	r1, r7
 800ef06:	f7f1 fca1 	bl	800084c <__aeabi_ddiv>
 800ef0a:	f7f1 fe25 	bl	8000b58 <__aeabi_d2iz>
 800ef0e:	9001      	str	r0, [sp, #4]
 800ef10:	f7f1 fb08 	bl	8000524 <__aeabi_i2d>
 800ef14:	4642      	mov	r2, r8
 800ef16:	464b      	mov	r3, r9
 800ef18:	f7f1 fb6e 	bl	80005f8 <__aeabi_dmul>
 800ef1c:	4602      	mov	r2, r0
 800ef1e:	460b      	mov	r3, r1
 800ef20:	4630      	mov	r0, r6
 800ef22:	4639      	mov	r1, r7
 800ef24:	f7f1 f9b0 	bl	8000288 <__aeabi_dsub>
 800ef28:	9e01      	ldr	r6, [sp, #4]
 800ef2a:	9f04      	ldr	r7, [sp, #16]
 800ef2c:	3630      	adds	r6, #48	; 0x30
 800ef2e:	f805 6b01 	strb.w	r6, [r5], #1
 800ef32:	9e00      	ldr	r6, [sp, #0]
 800ef34:	1bae      	subs	r6, r5, r6
 800ef36:	42b7      	cmp	r7, r6
 800ef38:	4602      	mov	r2, r0
 800ef3a:	460b      	mov	r3, r1
 800ef3c:	d134      	bne.n	800efa8 <_dtoa_r+0x708>
 800ef3e:	f7f1 f9a5 	bl	800028c <__adddf3>
 800ef42:	4642      	mov	r2, r8
 800ef44:	464b      	mov	r3, r9
 800ef46:	4606      	mov	r6, r0
 800ef48:	460f      	mov	r7, r1
 800ef4a:	f7f1 fde5 	bl	8000b18 <__aeabi_dcmpgt>
 800ef4e:	b9c8      	cbnz	r0, 800ef84 <_dtoa_r+0x6e4>
 800ef50:	4642      	mov	r2, r8
 800ef52:	464b      	mov	r3, r9
 800ef54:	4630      	mov	r0, r6
 800ef56:	4639      	mov	r1, r7
 800ef58:	f7f1 fdb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800ef5c:	b110      	cbz	r0, 800ef64 <_dtoa_r+0x6c4>
 800ef5e:	9b01      	ldr	r3, [sp, #4]
 800ef60:	07db      	lsls	r3, r3, #31
 800ef62:	d40f      	bmi.n	800ef84 <_dtoa_r+0x6e4>
 800ef64:	4651      	mov	r1, sl
 800ef66:	4620      	mov	r0, r4
 800ef68:	f000 fb18 	bl	800f59c <_Bfree>
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ef70:	702b      	strb	r3, [r5, #0]
 800ef72:	f10b 0301 	add.w	r3, fp, #1
 800ef76:	6013      	str	r3, [r2, #0]
 800ef78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	f43f ace2 	beq.w	800e944 <_dtoa_r+0xa4>
 800ef80:	601d      	str	r5, [r3, #0]
 800ef82:	e4df      	b.n	800e944 <_dtoa_r+0xa4>
 800ef84:	465f      	mov	r7, fp
 800ef86:	462b      	mov	r3, r5
 800ef88:	461d      	mov	r5, r3
 800ef8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef8e:	2a39      	cmp	r2, #57	; 0x39
 800ef90:	d106      	bne.n	800efa0 <_dtoa_r+0x700>
 800ef92:	9a00      	ldr	r2, [sp, #0]
 800ef94:	429a      	cmp	r2, r3
 800ef96:	d1f7      	bne.n	800ef88 <_dtoa_r+0x6e8>
 800ef98:	9900      	ldr	r1, [sp, #0]
 800ef9a:	2230      	movs	r2, #48	; 0x30
 800ef9c:	3701      	adds	r7, #1
 800ef9e:	700a      	strb	r2, [r1, #0]
 800efa0:	781a      	ldrb	r2, [r3, #0]
 800efa2:	3201      	adds	r2, #1
 800efa4:	701a      	strb	r2, [r3, #0]
 800efa6:	e790      	b.n	800eeca <_dtoa_r+0x62a>
 800efa8:	4ba3      	ldr	r3, [pc, #652]	; (800f238 <_dtoa_r+0x998>)
 800efaa:	2200      	movs	r2, #0
 800efac:	f7f1 fb24 	bl	80005f8 <__aeabi_dmul>
 800efb0:	2200      	movs	r2, #0
 800efb2:	2300      	movs	r3, #0
 800efb4:	4606      	mov	r6, r0
 800efb6:	460f      	mov	r7, r1
 800efb8:	f7f1 fd86 	bl	8000ac8 <__aeabi_dcmpeq>
 800efbc:	2800      	cmp	r0, #0
 800efbe:	d09e      	beq.n	800eefe <_dtoa_r+0x65e>
 800efc0:	e7d0      	b.n	800ef64 <_dtoa_r+0x6c4>
 800efc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800efc4:	2a00      	cmp	r2, #0
 800efc6:	f000 80ca 	beq.w	800f15e <_dtoa_r+0x8be>
 800efca:	9a07      	ldr	r2, [sp, #28]
 800efcc:	2a01      	cmp	r2, #1
 800efce:	f300 80ad 	bgt.w	800f12c <_dtoa_r+0x88c>
 800efd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800efd4:	2a00      	cmp	r2, #0
 800efd6:	f000 80a5 	beq.w	800f124 <_dtoa_r+0x884>
 800efda:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800efde:	9e08      	ldr	r6, [sp, #32]
 800efe0:	9d05      	ldr	r5, [sp, #20]
 800efe2:	9a05      	ldr	r2, [sp, #20]
 800efe4:	441a      	add	r2, r3
 800efe6:	9205      	str	r2, [sp, #20]
 800efe8:	9a06      	ldr	r2, [sp, #24]
 800efea:	2101      	movs	r1, #1
 800efec:	441a      	add	r2, r3
 800efee:	4620      	mov	r0, r4
 800eff0:	9206      	str	r2, [sp, #24]
 800eff2:	f000 fbd3 	bl	800f79c <__i2b>
 800eff6:	4607      	mov	r7, r0
 800eff8:	b165      	cbz	r5, 800f014 <_dtoa_r+0x774>
 800effa:	9b06      	ldr	r3, [sp, #24]
 800effc:	2b00      	cmp	r3, #0
 800effe:	dd09      	ble.n	800f014 <_dtoa_r+0x774>
 800f000:	42ab      	cmp	r3, r5
 800f002:	9a05      	ldr	r2, [sp, #20]
 800f004:	bfa8      	it	ge
 800f006:	462b      	movge	r3, r5
 800f008:	1ad2      	subs	r2, r2, r3
 800f00a:	9205      	str	r2, [sp, #20]
 800f00c:	9a06      	ldr	r2, [sp, #24]
 800f00e:	1aed      	subs	r5, r5, r3
 800f010:	1ad3      	subs	r3, r2, r3
 800f012:	9306      	str	r3, [sp, #24]
 800f014:	9b08      	ldr	r3, [sp, #32]
 800f016:	b1f3      	cbz	r3, 800f056 <_dtoa_r+0x7b6>
 800f018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	f000 80a3 	beq.w	800f166 <_dtoa_r+0x8c6>
 800f020:	2e00      	cmp	r6, #0
 800f022:	dd10      	ble.n	800f046 <_dtoa_r+0x7a6>
 800f024:	4639      	mov	r1, r7
 800f026:	4632      	mov	r2, r6
 800f028:	4620      	mov	r0, r4
 800f02a:	f000 fc77 	bl	800f91c <__pow5mult>
 800f02e:	4652      	mov	r2, sl
 800f030:	4601      	mov	r1, r0
 800f032:	4607      	mov	r7, r0
 800f034:	4620      	mov	r0, r4
 800f036:	f000 fbc7 	bl	800f7c8 <__multiply>
 800f03a:	4651      	mov	r1, sl
 800f03c:	4680      	mov	r8, r0
 800f03e:	4620      	mov	r0, r4
 800f040:	f000 faac 	bl	800f59c <_Bfree>
 800f044:	46c2      	mov	sl, r8
 800f046:	9b08      	ldr	r3, [sp, #32]
 800f048:	1b9a      	subs	r2, r3, r6
 800f04a:	d004      	beq.n	800f056 <_dtoa_r+0x7b6>
 800f04c:	4651      	mov	r1, sl
 800f04e:	4620      	mov	r0, r4
 800f050:	f000 fc64 	bl	800f91c <__pow5mult>
 800f054:	4682      	mov	sl, r0
 800f056:	2101      	movs	r1, #1
 800f058:	4620      	mov	r0, r4
 800f05a:	f000 fb9f 	bl	800f79c <__i2b>
 800f05e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f060:	2b00      	cmp	r3, #0
 800f062:	4606      	mov	r6, r0
 800f064:	f340 8081 	ble.w	800f16a <_dtoa_r+0x8ca>
 800f068:	461a      	mov	r2, r3
 800f06a:	4601      	mov	r1, r0
 800f06c:	4620      	mov	r0, r4
 800f06e:	f000 fc55 	bl	800f91c <__pow5mult>
 800f072:	9b07      	ldr	r3, [sp, #28]
 800f074:	2b01      	cmp	r3, #1
 800f076:	4606      	mov	r6, r0
 800f078:	dd7a      	ble.n	800f170 <_dtoa_r+0x8d0>
 800f07a:	f04f 0800 	mov.w	r8, #0
 800f07e:	6933      	ldr	r3, [r6, #16]
 800f080:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f084:	6918      	ldr	r0, [r3, #16]
 800f086:	f000 fb3b 	bl	800f700 <__hi0bits>
 800f08a:	f1c0 0020 	rsb	r0, r0, #32
 800f08e:	9b06      	ldr	r3, [sp, #24]
 800f090:	4418      	add	r0, r3
 800f092:	f010 001f 	ands.w	r0, r0, #31
 800f096:	f000 8094 	beq.w	800f1c2 <_dtoa_r+0x922>
 800f09a:	f1c0 0320 	rsb	r3, r0, #32
 800f09e:	2b04      	cmp	r3, #4
 800f0a0:	f340 8085 	ble.w	800f1ae <_dtoa_r+0x90e>
 800f0a4:	9b05      	ldr	r3, [sp, #20]
 800f0a6:	f1c0 001c 	rsb	r0, r0, #28
 800f0aa:	4403      	add	r3, r0
 800f0ac:	9305      	str	r3, [sp, #20]
 800f0ae:	9b06      	ldr	r3, [sp, #24]
 800f0b0:	4403      	add	r3, r0
 800f0b2:	4405      	add	r5, r0
 800f0b4:	9306      	str	r3, [sp, #24]
 800f0b6:	9b05      	ldr	r3, [sp, #20]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	dd05      	ble.n	800f0c8 <_dtoa_r+0x828>
 800f0bc:	4651      	mov	r1, sl
 800f0be:	461a      	mov	r2, r3
 800f0c0:	4620      	mov	r0, r4
 800f0c2:	f000 fc85 	bl	800f9d0 <__lshift>
 800f0c6:	4682      	mov	sl, r0
 800f0c8:	9b06      	ldr	r3, [sp, #24]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	dd05      	ble.n	800f0da <_dtoa_r+0x83a>
 800f0ce:	4631      	mov	r1, r6
 800f0d0:	461a      	mov	r2, r3
 800f0d2:	4620      	mov	r0, r4
 800f0d4:	f000 fc7c 	bl	800f9d0 <__lshift>
 800f0d8:	4606      	mov	r6, r0
 800f0da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d072      	beq.n	800f1c6 <_dtoa_r+0x926>
 800f0e0:	4631      	mov	r1, r6
 800f0e2:	4650      	mov	r0, sl
 800f0e4:	f000 fce0 	bl	800faa8 <__mcmp>
 800f0e8:	2800      	cmp	r0, #0
 800f0ea:	da6c      	bge.n	800f1c6 <_dtoa_r+0x926>
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	4651      	mov	r1, sl
 800f0f0:	220a      	movs	r2, #10
 800f0f2:	4620      	mov	r0, r4
 800f0f4:	f000 fa74 	bl	800f5e0 <__multadd>
 800f0f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f0fe:	4682      	mov	sl, r0
 800f100:	2b00      	cmp	r3, #0
 800f102:	f000 81b0 	beq.w	800f466 <_dtoa_r+0xbc6>
 800f106:	2300      	movs	r3, #0
 800f108:	4639      	mov	r1, r7
 800f10a:	220a      	movs	r2, #10
 800f10c:	4620      	mov	r0, r4
 800f10e:	f000 fa67 	bl	800f5e0 <__multadd>
 800f112:	9b01      	ldr	r3, [sp, #4]
 800f114:	2b00      	cmp	r3, #0
 800f116:	4607      	mov	r7, r0
 800f118:	f300 8096 	bgt.w	800f248 <_dtoa_r+0x9a8>
 800f11c:	9b07      	ldr	r3, [sp, #28]
 800f11e:	2b02      	cmp	r3, #2
 800f120:	dc59      	bgt.n	800f1d6 <_dtoa_r+0x936>
 800f122:	e091      	b.n	800f248 <_dtoa_r+0x9a8>
 800f124:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f126:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f12a:	e758      	b.n	800efde <_dtoa_r+0x73e>
 800f12c:	9b04      	ldr	r3, [sp, #16]
 800f12e:	1e5e      	subs	r6, r3, #1
 800f130:	9b08      	ldr	r3, [sp, #32]
 800f132:	42b3      	cmp	r3, r6
 800f134:	bfbf      	itttt	lt
 800f136:	9b08      	ldrlt	r3, [sp, #32]
 800f138:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f13a:	9608      	strlt	r6, [sp, #32]
 800f13c:	1af3      	sublt	r3, r6, r3
 800f13e:	bfb4      	ite	lt
 800f140:	18d2      	addlt	r2, r2, r3
 800f142:	1b9e      	subge	r6, r3, r6
 800f144:	9b04      	ldr	r3, [sp, #16]
 800f146:	bfbc      	itt	lt
 800f148:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f14a:	2600      	movlt	r6, #0
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	bfb7      	itett	lt
 800f150:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f154:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f158:	1a9d      	sublt	r5, r3, r2
 800f15a:	2300      	movlt	r3, #0
 800f15c:	e741      	b.n	800efe2 <_dtoa_r+0x742>
 800f15e:	9e08      	ldr	r6, [sp, #32]
 800f160:	9d05      	ldr	r5, [sp, #20]
 800f162:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f164:	e748      	b.n	800eff8 <_dtoa_r+0x758>
 800f166:	9a08      	ldr	r2, [sp, #32]
 800f168:	e770      	b.n	800f04c <_dtoa_r+0x7ac>
 800f16a:	9b07      	ldr	r3, [sp, #28]
 800f16c:	2b01      	cmp	r3, #1
 800f16e:	dc19      	bgt.n	800f1a4 <_dtoa_r+0x904>
 800f170:	9b02      	ldr	r3, [sp, #8]
 800f172:	b9bb      	cbnz	r3, 800f1a4 <_dtoa_r+0x904>
 800f174:	9b03      	ldr	r3, [sp, #12]
 800f176:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f17a:	b99b      	cbnz	r3, 800f1a4 <_dtoa_r+0x904>
 800f17c:	9b03      	ldr	r3, [sp, #12]
 800f17e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f182:	0d1b      	lsrs	r3, r3, #20
 800f184:	051b      	lsls	r3, r3, #20
 800f186:	b183      	cbz	r3, 800f1aa <_dtoa_r+0x90a>
 800f188:	9b05      	ldr	r3, [sp, #20]
 800f18a:	3301      	adds	r3, #1
 800f18c:	9305      	str	r3, [sp, #20]
 800f18e:	9b06      	ldr	r3, [sp, #24]
 800f190:	3301      	adds	r3, #1
 800f192:	9306      	str	r3, [sp, #24]
 800f194:	f04f 0801 	mov.w	r8, #1
 800f198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	f47f af6f 	bne.w	800f07e <_dtoa_r+0x7de>
 800f1a0:	2001      	movs	r0, #1
 800f1a2:	e774      	b.n	800f08e <_dtoa_r+0x7ee>
 800f1a4:	f04f 0800 	mov.w	r8, #0
 800f1a8:	e7f6      	b.n	800f198 <_dtoa_r+0x8f8>
 800f1aa:	4698      	mov	r8, r3
 800f1ac:	e7f4      	b.n	800f198 <_dtoa_r+0x8f8>
 800f1ae:	d082      	beq.n	800f0b6 <_dtoa_r+0x816>
 800f1b0:	9a05      	ldr	r2, [sp, #20]
 800f1b2:	331c      	adds	r3, #28
 800f1b4:	441a      	add	r2, r3
 800f1b6:	9205      	str	r2, [sp, #20]
 800f1b8:	9a06      	ldr	r2, [sp, #24]
 800f1ba:	441a      	add	r2, r3
 800f1bc:	441d      	add	r5, r3
 800f1be:	9206      	str	r2, [sp, #24]
 800f1c0:	e779      	b.n	800f0b6 <_dtoa_r+0x816>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	e7f4      	b.n	800f1b0 <_dtoa_r+0x910>
 800f1c6:	9b04      	ldr	r3, [sp, #16]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	dc37      	bgt.n	800f23c <_dtoa_r+0x99c>
 800f1cc:	9b07      	ldr	r3, [sp, #28]
 800f1ce:	2b02      	cmp	r3, #2
 800f1d0:	dd34      	ble.n	800f23c <_dtoa_r+0x99c>
 800f1d2:	9b04      	ldr	r3, [sp, #16]
 800f1d4:	9301      	str	r3, [sp, #4]
 800f1d6:	9b01      	ldr	r3, [sp, #4]
 800f1d8:	b963      	cbnz	r3, 800f1f4 <_dtoa_r+0x954>
 800f1da:	4631      	mov	r1, r6
 800f1dc:	2205      	movs	r2, #5
 800f1de:	4620      	mov	r0, r4
 800f1e0:	f000 f9fe 	bl	800f5e0 <__multadd>
 800f1e4:	4601      	mov	r1, r0
 800f1e6:	4606      	mov	r6, r0
 800f1e8:	4650      	mov	r0, sl
 800f1ea:	f000 fc5d 	bl	800faa8 <__mcmp>
 800f1ee:	2800      	cmp	r0, #0
 800f1f0:	f73f adbb 	bgt.w	800ed6a <_dtoa_r+0x4ca>
 800f1f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1f6:	9d00      	ldr	r5, [sp, #0]
 800f1f8:	ea6f 0b03 	mvn.w	fp, r3
 800f1fc:	f04f 0800 	mov.w	r8, #0
 800f200:	4631      	mov	r1, r6
 800f202:	4620      	mov	r0, r4
 800f204:	f000 f9ca 	bl	800f59c <_Bfree>
 800f208:	2f00      	cmp	r7, #0
 800f20a:	f43f aeab 	beq.w	800ef64 <_dtoa_r+0x6c4>
 800f20e:	f1b8 0f00 	cmp.w	r8, #0
 800f212:	d005      	beq.n	800f220 <_dtoa_r+0x980>
 800f214:	45b8      	cmp	r8, r7
 800f216:	d003      	beq.n	800f220 <_dtoa_r+0x980>
 800f218:	4641      	mov	r1, r8
 800f21a:	4620      	mov	r0, r4
 800f21c:	f000 f9be 	bl	800f59c <_Bfree>
 800f220:	4639      	mov	r1, r7
 800f222:	4620      	mov	r0, r4
 800f224:	f000 f9ba 	bl	800f59c <_Bfree>
 800f228:	e69c      	b.n	800ef64 <_dtoa_r+0x6c4>
 800f22a:	2600      	movs	r6, #0
 800f22c:	4637      	mov	r7, r6
 800f22e:	e7e1      	b.n	800f1f4 <_dtoa_r+0x954>
 800f230:	46bb      	mov	fp, r7
 800f232:	4637      	mov	r7, r6
 800f234:	e599      	b.n	800ed6a <_dtoa_r+0x4ca>
 800f236:	bf00      	nop
 800f238:	40240000 	.word	0x40240000
 800f23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f23e:	2b00      	cmp	r3, #0
 800f240:	f000 80c8 	beq.w	800f3d4 <_dtoa_r+0xb34>
 800f244:	9b04      	ldr	r3, [sp, #16]
 800f246:	9301      	str	r3, [sp, #4]
 800f248:	2d00      	cmp	r5, #0
 800f24a:	dd05      	ble.n	800f258 <_dtoa_r+0x9b8>
 800f24c:	4639      	mov	r1, r7
 800f24e:	462a      	mov	r2, r5
 800f250:	4620      	mov	r0, r4
 800f252:	f000 fbbd 	bl	800f9d0 <__lshift>
 800f256:	4607      	mov	r7, r0
 800f258:	f1b8 0f00 	cmp.w	r8, #0
 800f25c:	d05b      	beq.n	800f316 <_dtoa_r+0xa76>
 800f25e:	6879      	ldr	r1, [r7, #4]
 800f260:	4620      	mov	r0, r4
 800f262:	f000 f95b 	bl	800f51c <_Balloc>
 800f266:	4605      	mov	r5, r0
 800f268:	b928      	cbnz	r0, 800f276 <_dtoa_r+0x9d6>
 800f26a:	4b83      	ldr	r3, [pc, #524]	; (800f478 <_dtoa_r+0xbd8>)
 800f26c:	4602      	mov	r2, r0
 800f26e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f272:	f7ff bb2e 	b.w	800e8d2 <_dtoa_r+0x32>
 800f276:	693a      	ldr	r2, [r7, #16]
 800f278:	3202      	adds	r2, #2
 800f27a:	0092      	lsls	r2, r2, #2
 800f27c:	f107 010c 	add.w	r1, r7, #12
 800f280:	300c      	adds	r0, #12
 800f282:	f7ff fa6e 	bl	800e762 <memcpy>
 800f286:	2201      	movs	r2, #1
 800f288:	4629      	mov	r1, r5
 800f28a:	4620      	mov	r0, r4
 800f28c:	f000 fba0 	bl	800f9d0 <__lshift>
 800f290:	9b00      	ldr	r3, [sp, #0]
 800f292:	3301      	adds	r3, #1
 800f294:	9304      	str	r3, [sp, #16]
 800f296:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f29a:	4413      	add	r3, r2
 800f29c:	9308      	str	r3, [sp, #32]
 800f29e:	9b02      	ldr	r3, [sp, #8]
 800f2a0:	f003 0301 	and.w	r3, r3, #1
 800f2a4:	46b8      	mov	r8, r7
 800f2a6:	9306      	str	r3, [sp, #24]
 800f2a8:	4607      	mov	r7, r0
 800f2aa:	9b04      	ldr	r3, [sp, #16]
 800f2ac:	4631      	mov	r1, r6
 800f2ae:	3b01      	subs	r3, #1
 800f2b0:	4650      	mov	r0, sl
 800f2b2:	9301      	str	r3, [sp, #4]
 800f2b4:	f7ff fa6a 	bl	800e78c <quorem>
 800f2b8:	4641      	mov	r1, r8
 800f2ba:	9002      	str	r0, [sp, #8]
 800f2bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f2c0:	4650      	mov	r0, sl
 800f2c2:	f000 fbf1 	bl	800faa8 <__mcmp>
 800f2c6:	463a      	mov	r2, r7
 800f2c8:	9005      	str	r0, [sp, #20]
 800f2ca:	4631      	mov	r1, r6
 800f2cc:	4620      	mov	r0, r4
 800f2ce:	f000 fc07 	bl	800fae0 <__mdiff>
 800f2d2:	68c2      	ldr	r2, [r0, #12]
 800f2d4:	4605      	mov	r5, r0
 800f2d6:	bb02      	cbnz	r2, 800f31a <_dtoa_r+0xa7a>
 800f2d8:	4601      	mov	r1, r0
 800f2da:	4650      	mov	r0, sl
 800f2dc:	f000 fbe4 	bl	800faa8 <__mcmp>
 800f2e0:	4602      	mov	r2, r0
 800f2e2:	4629      	mov	r1, r5
 800f2e4:	4620      	mov	r0, r4
 800f2e6:	9209      	str	r2, [sp, #36]	; 0x24
 800f2e8:	f000 f958 	bl	800f59c <_Bfree>
 800f2ec:	9b07      	ldr	r3, [sp, #28]
 800f2ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2f0:	9d04      	ldr	r5, [sp, #16]
 800f2f2:	ea43 0102 	orr.w	r1, r3, r2
 800f2f6:	9b06      	ldr	r3, [sp, #24]
 800f2f8:	4319      	orrs	r1, r3
 800f2fa:	d110      	bne.n	800f31e <_dtoa_r+0xa7e>
 800f2fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f300:	d029      	beq.n	800f356 <_dtoa_r+0xab6>
 800f302:	9b05      	ldr	r3, [sp, #20]
 800f304:	2b00      	cmp	r3, #0
 800f306:	dd02      	ble.n	800f30e <_dtoa_r+0xa6e>
 800f308:	9b02      	ldr	r3, [sp, #8]
 800f30a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f30e:	9b01      	ldr	r3, [sp, #4]
 800f310:	f883 9000 	strb.w	r9, [r3]
 800f314:	e774      	b.n	800f200 <_dtoa_r+0x960>
 800f316:	4638      	mov	r0, r7
 800f318:	e7ba      	b.n	800f290 <_dtoa_r+0x9f0>
 800f31a:	2201      	movs	r2, #1
 800f31c:	e7e1      	b.n	800f2e2 <_dtoa_r+0xa42>
 800f31e:	9b05      	ldr	r3, [sp, #20]
 800f320:	2b00      	cmp	r3, #0
 800f322:	db04      	blt.n	800f32e <_dtoa_r+0xa8e>
 800f324:	9907      	ldr	r1, [sp, #28]
 800f326:	430b      	orrs	r3, r1
 800f328:	9906      	ldr	r1, [sp, #24]
 800f32a:	430b      	orrs	r3, r1
 800f32c:	d120      	bne.n	800f370 <_dtoa_r+0xad0>
 800f32e:	2a00      	cmp	r2, #0
 800f330:	dded      	ble.n	800f30e <_dtoa_r+0xa6e>
 800f332:	4651      	mov	r1, sl
 800f334:	2201      	movs	r2, #1
 800f336:	4620      	mov	r0, r4
 800f338:	f000 fb4a 	bl	800f9d0 <__lshift>
 800f33c:	4631      	mov	r1, r6
 800f33e:	4682      	mov	sl, r0
 800f340:	f000 fbb2 	bl	800faa8 <__mcmp>
 800f344:	2800      	cmp	r0, #0
 800f346:	dc03      	bgt.n	800f350 <_dtoa_r+0xab0>
 800f348:	d1e1      	bne.n	800f30e <_dtoa_r+0xa6e>
 800f34a:	f019 0f01 	tst.w	r9, #1
 800f34e:	d0de      	beq.n	800f30e <_dtoa_r+0xa6e>
 800f350:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f354:	d1d8      	bne.n	800f308 <_dtoa_r+0xa68>
 800f356:	9a01      	ldr	r2, [sp, #4]
 800f358:	2339      	movs	r3, #57	; 0x39
 800f35a:	7013      	strb	r3, [r2, #0]
 800f35c:	462b      	mov	r3, r5
 800f35e:	461d      	mov	r5, r3
 800f360:	3b01      	subs	r3, #1
 800f362:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f366:	2a39      	cmp	r2, #57	; 0x39
 800f368:	d06c      	beq.n	800f444 <_dtoa_r+0xba4>
 800f36a:	3201      	adds	r2, #1
 800f36c:	701a      	strb	r2, [r3, #0]
 800f36e:	e747      	b.n	800f200 <_dtoa_r+0x960>
 800f370:	2a00      	cmp	r2, #0
 800f372:	dd07      	ble.n	800f384 <_dtoa_r+0xae4>
 800f374:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f378:	d0ed      	beq.n	800f356 <_dtoa_r+0xab6>
 800f37a:	9a01      	ldr	r2, [sp, #4]
 800f37c:	f109 0301 	add.w	r3, r9, #1
 800f380:	7013      	strb	r3, [r2, #0]
 800f382:	e73d      	b.n	800f200 <_dtoa_r+0x960>
 800f384:	9b04      	ldr	r3, [sp, #16]
 800f386:	9a08      	ldr	r2, [sp, #32]
 800f388:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f38c:	4293      	cmp	r3, r2
 800f38e:	d043      	beq.n	800f418 <_dtoa_r+0xb78>
 800f390:	4651      	mov	r1, sl
 800f392:	2300      	movs	r3, #0
 800f394:	220a      	movs	r2, #10
 800f396:	4620      	mov	r0, r4
 800f398:	f000 f922 	bl	800f5e0 <__multadd>
 800f39c:	45b8      	cmp	r8, r7
 800f39e:	4682      	mov	sl, r0
 800f3a0:	f04f 0300 	mov.w	r3, #0
 800f3a4:	f04f 020a 	mov.w	r2, #10
 800f3a8:	4641      	mov	r1, r8
 800f3aa:	4620      	mov	r0, r4
 800f3ac:	d107      	bne.n	800f3be <_dtoa_r+0xb1e>
 800f3ae:	f000 f917 	bl	800f5e0 <__multadd>
 800f3b2:	4680      	mov	r8, r0
 800f3b4:	4607      	mov	r7, r0
 800f3b6:	9b04      	ldr	r3, [sp, #16]
 800f3b8:	3301      	adds	r3, #1
 800f3ba:	9304      	str	r3, [sp, #16]
 800f3bc:	e775      	b.n	800f2aa <_dtoa_r+0xa0a>
 800f3be:	f000 f90f 	bl	800f5e0 <__multadd>
 800f3c2:	4639      	mov	r1, r7
 800f3c4:	4680      	mov	r8, r0
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	220a      	movs	r2, #10
 800f3ca:	4620      	mov	r0, r4
 800f3cc:	f000 f908 	bl	800f5e0 <__multadd>
 800f3d0:	4607      	mov	r7, r0
 800f3d2:	e7f0      	b.n	800f3b6 <_dtoa_r+0xb16>
 800f3d4:	9b04      	ldr	r3, [sp, #16]
 800f3d6:	9301      	str	r3, [sp, #4]
 800f3d8:	9d00      	ldr	r5, [sp, #0]
 800f3da:	4631      	mov	r1, r6
 800f3dc:	4650      	mov	r0, sl
 800f3de:	f7ff f9d5 	bl	800e78c <quorem>
 800f3e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f3e6:	9b00      	ldr	r3, [sp, #0]
 800f3e8:	f805 9b01 	strb.w	r9, [r5], #1
 800f3ec:	1aea      	subs	r2, r5, r3
 800f3ee:	9b01      	ldr	r3, [sp, #4]
 800f3f0:	4293      	cmp	r3, r2
 800f3f2:	dd07      	ble.n	800f404 <_dtoa_r+0xb64>
 800f3f4:	4651      	mov	r1, sl
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	220a      	movs	r2, #10
 800f3fa:	4620      	mov	r0, r4
 800f3fc:	f000 f8f0 	bl	800f5e0 <__multadd>
 800f400:	4682      	mov	sl, r0
 800f402:	e7ea      	b.n	800f3da <_dtoa_r+0xb3a>
 800f404:	9b01      	ldr	r3, [sp, #4]
 800f406:	2b00      	cmp	r3, #0
 800f408:	bfc8      	it	gt
 800f40a:	461d      	movgt	r5, r3
 800f40c:	9b00      	ldr	r3, [sp, #0]
 800f40e:	bfd8      	it	le
 800f410:	2501      	movle	r5, #1
 800f412:	441d      	add	r5, r3
 800f414:	f04f 0800 	mov.w	r8, #0
 800f418:	4651      	mov	r1, sl
 800f41a:	2201      	movs	r2, #1
 800f41c:	4620      	mov	r0, r4
 800f41e:	f000 fad7 	bl	800f9d0 <__lshift>
 800f422:	4631      	mov	r1, r6
 800f424:	4682      	mov	sl, r0
 800f426:	f000 fb3f 	bl	800faa8 <__mcmp>
 800f42a:	2800      	cmp	r0, #0
 800f42c:	dc96      	bgt.n	800f35c <_dtoa_r+0xabc>
 800f42e:	d102      	bne.n	800f436 <_dtoa_r+0xb96>
 800f430:	f019 0f01 	tst.w	r9, #1
 800f434:	d192      	bne.n	800f35c <_dtoa_r+0xabc>
 800f436:	462b      	mov	r3, r5
 800f438:	461d      	mov	r5, r3
 800f43a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f43e:	2a30      	cmp	r2, #48	; 0x30
 800f440:	d0fa      	beq.n	800f438 <_dtoa_r+0xb98>
 800f442:	e6dd      	b.n	800f200 <_dtoa_r+0x960>
 800f444:	9a00      	ldr	r2, [sp, #0]
 800f446:	429a      	cmp	r2, r3
 800f448:	d189      	bne.n	800f35e <_dtoa_r+0xabe>
 800f44a:	f10b 0b01 	add.w	fp, fp, #1
 800f44e:	2331      	movs	r3, #49	; 0x31
 800f450:	e796      	b.n	800f380 <_dtoa_r+0xae0>
 800f452:	4b0a      	ldr	r3, [pc, #40]	; (800f47c <_dtoa_r+0xbdc>)
 800f454:	f7ff ba99 	b.w	800e98a <_dtoa_r+0xea>
 800f458:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	f47f aa6d 	bne.w	800e93a <_dtoa_r+0x9a>
 800f460:	4b07      	ldr	r3, [pc, #28]	; (800f480 <_dtoa_r+0xbe0>)
 800f462:	f7ff ba92 	b.w	800e98a <_dtoa_r+0xea>
 800f466:	9b01      	ldr	r3, [sp, #4]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	dcb5      	bgt.n	800f3d8 <_dtoa_r+0xb38>
 800f46c:	9b07      	ldr	r3, [sp, #28]
 800f46e:	2b02      	cmp	r3, #2
 800f470:	f73f aeb1 	bgt.w	800f1d6 <_dtoa_r+0x936>
 800f474:	e7b0      	b.n	800f3d8 <_dtoa_r+0xb38>
 800f476:	bf00      	nop
 800f478:	080126cf 	.word	0x080126cf
 800f47c:	080129b8 	.word	0x080129b8
 800f480:	08012653 	.word	0x08012653

0800f484 <_free_r>:
 800f484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f486:	2900      	cmp	r1, #0
 800f488:	d044      	beq.n	800f514 <_free_r+0x90>
 800f48a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f48e:	9001      	str	r0, [sp, #4]
 800f490:	2b00      	cmp	r3, #0
 800f492:	f1a1 0404 	sub.w	r4, r1, #4
 800f496:	bfb8      	it	lt
 800f498:	18e4      	addlt	r4, r4, r3
 800f49a:	f7fe f8bb 	bl	800d614 <__malloc_lock>
 800f49e:	4a1e      	ldr	r2, [pc, #120]	; (800f518 <_free_r+0x94>)
 800f4a0:	9801      	ldr	r0, [sp, #4]
 800f4a2:	6813      	ldr	r3, [r2, #0]
 800f4a4:	b933      	cbnz	r3, 800f4b4 <_free_r+0x30>
 800f4a6:	6063      	str	r3, [r4, #4]
 800f4a8:	6014      	str	r4, [r2, #0]
 800f4aa:	b003      	add	sp, #12
 800f4ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4b0:	f7fe b8b6 	b.w	800d620 <__malloc_unlock>
 800f4b4:	42a3      	cmp	r3, r4
 800f4b6:	d908      	bls.n	800f4ca <_free_r+0x46>
 800f4b8:	6825      	ldr	r5, [r4, #0]
 800f4ba:	1961      	adds	r1, r4, r5
 800f4bc:	428b      	cmp	r3, r1
 800f4be:	bf01      	itttt	eq
 800f4c0:	6819      	ldreq	r1, [r3, #0]
 800f4c2:	685b      	ldreq	r3, [r3, #4]
 800f4c4:	1949      	addeq	r1, r1, r5
 800f4c6:	6021      	streq	r1, [r4, #0]
 800f4c8:	e7ed      	b.n	800f4a6 <_free_r+0x22>
 800f4ca:	461a      	mov	r2, r3
 800f4cc:	685b      	ldr	r3, [r3, #4]
 800f4ce:	b10b      	cbz	r3, 800f4d4 <_free_r+0x50>
 800f4d0:	42a3      	cmp	r3, r4
 800f4d2:	d9fa      	bls.n	800f4ca <_free_r+0x46>
 800f4d4:	6811      	ldr	r1, [r2, #0]
 800f4d6:	1855      	adds	r5, r2, r1
 800f4d8:	42a5      	cmp	r5, r4
 800f4da:	d10b      	bne.n	800f4f4 <_free_r+0x70>
 800f4dc:	6824      	ldr	r4, [r4, #0]
 800f4de:	4421      	add	r1, r4
 800f4e0:	1854      	adds	r4, r2, r1
 800f4e2:	42a3      	cmp	r3, r4
 800f4e4:	6011      	str	r1, [r2, #0]
 800f4e6:	d1e0      	bne.n	800f4aa <_free_r+0x26>
 800f4e8:	681c      	ldr	r4, [r3, #0]
 800f4ea:	685b      	ldr	r3, [r3, #4]
 800f4ec:	6053      	str	r3, [r2, #4]
 800f4ee:	440c      	add	r4, r1
 800f4f0:	6014      	str	r4, [r2, #0]
 800f4f2:	e7da      	b.n	800f4aa <_free_r+0x26>
 800f4f4:	d902      	bls.n	800f4fc <_free_r+0x78>
 800f4f6:	230c      	movs	r3, #12
 800f4f8:	6003      	str	r3, [r0, #0]
 800f4fa:	e7d6      	b.n	800f4aa <_free_r+0x26>
 800f4fc:	6825      	ldr	r5, [r4, #0]
 800f4fe:	1961      	adds	r1, r4, r5
 800f500:	428b      	cmp	r3, r1
 800f502:	bf04      	itt	eq
 800f504:	6819      	ldreq	r1, [r3, #0]
 800f506:	685b      	ldreq	r3, [r3, #4]
 800f508:	6063      	str	r3, [r4, #4]
 800f50a:	bf04      	itt	eq
 800f50c:	1949      	addeq	r1, r1, r5
 800f50e:	6021      	streq	r1, [r4, #0]
 800f510:	6054      	str	r4, [r2, #4]
 800f512:	e7ca      	b.n	800f4aa <_free_r+0x26>
 800f514:	b003      	add	sp, #12
 800f516:	bd30      	pop	{r4, r5, pc}
 800f518:	20001080 	.word	0x20001080

0800f51c <_Balloc>:
 800f51c:	b570      	push	{r4, r5, r6, lr}
 800f51e:	69c6      	ldr	r6, [r0, #28]
 800f520:	4604      	mov	r4, r0
 800f522:	460d      	mov	r5, r1
 800f524:	b976      	cbnz	r6, 800f544 <_Balloc+0x28>
 800f526:	2010      	movs	r0, #16
 800f528:	f7fd ffc4 	bl	800d4b4 <malloc>
 800f52c:	4602      	mov	r2, r0
 800f52e:	61e0      	str	r0, [r4, #28]
 800f530:	b920      	cbnz	r0, 800f53c <_Balloc+0x20>
 800f532:	4b18      	ldr	r3, [pc, #96]	; (800f594 <_Balloc+0x78>)
 800f534:	4818      	ldr	r0, [pc, #96]	; (800f598 <_Balloc+0x7c>)
 800f536:	216b      	movs	r1, #107	; 0x6b
 800f538:	f002 f90e 	bl	8011758 <__assert_func>
 800f53c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f540:	6006      	str	r6, [r0, #0]
 800f542:	60c6      	str	r6, [r0, #12]
 800f544:	69e6      	ldr	r6, [r4, #28]
 800f546:	68f3      	ldr	r3, [r6, #12]
 800f548:	b183      	cbz	r3, 800f56c <_Balloc+0x50>
 800f54a:	69e3      	ldr	r3, [r4, #28]
 800f54c:	68db      	ldr	r3, [r3, #12]
 800f54e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f552:	b9b8      	cbnz	r0, 800f584 <_Balloc+0x68>
 800f554:	2101      	movs	r1, #1
 800f556:	fa01 f605 	lsl.w	r6, r1, r5
 800f55a:	1d72      	adds	r2, r6, #5
 800f55c:	0092      	lsls	r2, r2, #2
 800f55e:	4620      	mov	r0, r4
 800f560:	f002 f918 	bl	8011794 <_calloc_r>
 800f564:	b160      	cbz	r0, 800f580 <_Balloc+0x64>
 800f566:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f56a:	e00e      	b.n	800f58a <_Balloc+0x6e>
 800f56c:	2221      	movs	r2, #33	; 0x21
 800f56e:	2104      	movs	r1, #4
 800f570:	4620      	mov	r0, r4
 800f572:	f002 f90f 	bl	8011794 <_calloc_r>
 800f576:	69e3      	ldr	r3, [r4, #28]
 800f578:	60f0      	str	r0, [r6, #12]
 800f57a:	68db      	ldr	r3, [r3, #12]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d1e4      	bne.n	800f54a <_Balloc+0x2e>
 800f580:	2000      	movs	r0, #0
 800f582:	bd70      	pop	{r4, r5, r6, pc}
 800f584:	6802      	ldr	r2, [r0, #0]
 800f586:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f58a:	2300      	movs	r3, #0
 800f58c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f590:	e7f7      	b.n	800f582 <_Balloc+0x66>
 800f592:	bf00      	nop
 800f594:	08012660 	.word	0x08012660
 800f598:	080126e0 	.word	0x080126e0

0800f59c <_Bfree>:
 800f59c:	b570      	push	{r4, r5, r6, lr}
 800f59e:	69c6      	ldr	r6, [r0, #28]
 800f5a0:	4605      	mov	r5, r0
 800f5a2:	460c      	mov	r4, r1
 800f5a4:	b976      	cbnz	r6, 800f5c4 <_Bfree+0x28>
 800f5a6:	2010      	movs	r0, #16
 800f5a8:	f7fd ff84 	bl	800d4b4 <malloc>
 800f5ac:	4602      	mov	r2, r0
 800f5ae:	61e8      	str	r0, [r5, #28]
 800f5b0:	b920      	cbnz	r0, 800f5bc <_Bfree+0x20>
 800f5b2:	4b09      	ldr	r3, [pc, #36]	; (800f5d8 <_Bfree+0x3c>)
 800f5b4:	4809      	ldr	r0, [pc, #36]	; (800f5dc <_Bfree+0x40>)
 800f5b6:	218f      	movs	r1, #143	; 0x8f
 800f5b8:	f002 f8ce 	bl	8011758 <__assert_func>
 800f5bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f5c0:	6006      	str	r6, [r0, #0]
 800f5c2:	60c6      	str	r6, [r0, #12]
 800f5c4:	b13c      	cbz	r4, 800f5d6 <_Bfree+0x3a>
 800f5c6:	69eb      	ldr	r3, [r5, #28]
 800f5c8:	6862      	ldr	r2, [r4, #4]
 800f5ca:	68db      	ldr	r3, [r3, #12]
 800f5cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f5d0:	6021      	str	r1, [r4, #0]
 800f5d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f5d6:	bd70      	pop	{r4, r5, r6, pc}
 800f5d8:	08012660 	.word	0x08012660
 800f5dc:	080126e0 	.word	0x080126e0

0800f5e0 <__multadd>:
 800f5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5e4:	690d      	ldr	r5, [r1, #16]
 800f5e6:	4607      	mov	r7, r0
 800f5e8:	460c      	mov	r4, r1
 800f5ea:	461e      	mov	r6, r3
 800f5ec:	f101 0c14 	add.w	ip, r1, #20
 800f5f0:	2000      	movs	r0, #0
 800f5f2:	f8dc 3000 	ldr.w	r3, [ip]
 800f5f6:	b299      	uxth	r1, r3
 800f5f8:	fb02 6101 	mla	r1, r2, r1, r6
 800f5fc:	0c1e      	lsrs	r6, r3, #16
 800f5fe:	0c0b      	lsrs	r3, r1, #16
 800f600:	fb02 3306 	mla	r3, r2, r6, r3
 800f604:	b289      	uxth	r1, r1
 800f606:	3001      	adds	r0, #1
 800f608:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f60c:	4285      	cmp	r5, r0
 800f60e:	f84c 1b04 	str.w	r1, [ip], #4
 800f612:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f616:	dcec      	bgt.n	800f5f2 <__multadd+0x12>
 800f618:	b30e      	cbz	r6, 800f65e <__multadd+0x7e>
 800f61a:	68a3      	ldr	r3, [r4, #8]
 800f61c:	42ab      	cmp	r3, r5
 800f61e:	dc19      	bgt.n	800f654 <__multadd+0x74>
 800f620:	6861      	ldr	r1, [r4, #4]
 800f622:	4638      	mov	r0, r7
 800f624:	3101      	adds	r1, #1
 800f626:	f7ff ff79 	bl	800f51c <_Balloc>
 800f62a:	4680      	mov	r8, r0
 800f62c:	b928      	cbnz	r0, 800f63a <__multadd+0x5a>
 800f62e:	4602      	mov	r2, r0
 800f630:	4b0c      	ldr	r3, [pc, #48]	; (800f664 <__multadd+0x84>)
 800f632:	480d      	ldr	r0, [pc, #52]	; (800f668 <__multadd+0x88>)
 800f634:	21ba      	movs	r1, #186	; 0xba
 800f636:	f002 f88f 	bl	8011758 <__assert_func>
 800f63a:	6922      	ldr	r2, [r4, #16]
 800f63c:	3202      	adds	r2, #2
 800f63e:	f104 010c 	add.w	r1, r4, #12
 800f642:	0092      	lsls	r2, r2, #2
 800f644:	300c      	adds	r0, #12
 800f646:	f7ff f88c 	bl	800e762 <memcpy>
 800f64a:	4621      	mov	r1, r4
 800f64c:	4638      	mov	r0, r7
 800f64e:	f7ff ffa5 	bl	800f59c <_Bfree>
 800f652:	4644      	mov	r4, r8
 800f654:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f658:	3501      	adds	r5, #1
 800f65a:	615e      	str	r6, [r3, #20]
 800f65c:	6125      	str	r5, [r4, #16]
 800f65e:	4620      	mov	r0, r4
 800f660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f664:	080126cf 	.word	0x080126cf
 800f668:	080126e0 	.word	0x080126e0

0800f66c <__s2b>:
 800f66c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f670:	460c      	mov	r4, r1
 800f672:	4615      	mov	r5, r2
 800f674:	461f      	mov	r7, r3
 800f676:	2209      	movs	r2, #9
 800f678:	3308      	adds	r3, #8
 800f67a:	4606      	mov	r6, r0
 800f67c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f680:	2100      	movs	r1, #0
 800f682:	2201      	movs	r2, #1
 800f684:	429a      	cmp	r2, r3
 800f686:	db09      	blt.n	800f69c <__s2b+0x30>
 800f688:	4630      	mov	r0, r6
 800f68a:	f7ff ff47 	bl	800f51c <_Balloc>
 800f68e:	b940      	cbnz	r0, 800f6a2 <__s2b+0x36>
 800f690:	4602      	mov	r2, r0
 800f692:	4b19      	ldr	r3, [pc, #100]	; (800f6f8 <__s2b+0x8c>)
 800f694:	4819      	ldr	r0, [pc, #100]	; (800f6fc <__s2b+0x90>)
 800f696:	21d3      	movs	r1, #211	; 0xd3
 800f698:	f002 f85e 	bl	8011758 <__assert_func>
 800f69c:	0052      	lsls	r2, r2, #1
 800f69e:	3101      	adds	r1, #1
 800f6a0:	e7f0      	b.n	800f684 <__s2b+0x18>
 800f6a2:	9b08      	ldr	r3, [sp, #32]
 800f6a4:	6143      	str	r3, [r0, #20]
 800f6a6:	2d09      	cmp	r5, #9
 800f6a8:	f04f 0301 	mov.w	r3, #1
 800f6ac:	6103      	str	r3, [r0, #16]
 800f6ae:	dd16      	ble.n	800f6de <__s2b+0x72>
 800f6b0:	f104 0909 	add.w	r9, r4, #9
 800f6b4:	46c8      	mov	r8, r9
 800f6b6:	442c      	add	r4, r5
 800f6b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f6bc:	4601      	mov	r1, r0
 800f6be:	3b30      	subs	r3, #48	; 0x30
 800f6c0:	220a      	movs	r2, #10
 800f6c2:	4630      	mov	r0, r6
 800f6c4:	f7ff ff8c 	bl	800f5e0 <__multadd>
 800f6c8:	45a0      	cmp	r8, r4
 800f6ca:	d1f5      	bne.n	800f6b8 <__s2b+0x4c>
 800f6cc:	f1a5 0408 	sub.w	r4, r5, #8
 800f6d0:	444c      	add	r4, r9
 800f6d2:	1b2d      	subs	r5, r5, r4
 800f6d4:	1963      	adds	r3, r4, r5
 800f6d6:	42bb      	cmp	r3, r7
 800f6d8:	db04      	blt.n	800f6e4 <__s2b+0x78>
 800f6da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6de:	340a      	adds	r4, #10
 800f6e0:	2509      	movs	r5, #9
 800f6e2:	e7f6      	b.n	800f6d2 <__s2b+0x66>
 800f6e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f6e8:	4601      	mov	r1, r0
 800f6ea:	3b30      	subs	r3, #48	; 0x30
 800f6ec:	220a      	movs	r2, #10
 800f6ee:	4630      	mov	r0, r6
 800f6f0:	f7ff ff76 	bl	800f5e0 <__multadd>
 800f6f4:	e7ee      	b.n	800f6d4 <__s2b+0x68>
 800f6f6:	bf00      	nop
 800f6f8:	080126cf 	.word	0x080126cf
 800f6fc:	080126e0 	.word	0x080126e0

0800f700 <__hi0bits>:
 800f700:	0c03      	lsrs	r3, r0, #16
 800f702:	041b      	lsls	r3, r3, #16
 800f704:	b9d3      	cbnz	r3, 800f73c <__hi0bits+0x3c>
 800f706:	0400      	lsls	r0, r0, #16
 800f708:	2310      	movs	r3, #16
 800f70a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f70e:	bf04      	itt	eq
 800f710:	0200      	lsleq	r0, r0, #8
 800f712:	3308      	addeq	r3, #8
 800f714:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f718:	bf04      	itt	eq
 800f71a:	0100      	lsleq	r0, r0, #4
 800f71c:	3304      	addeq	r3, #4
 800f71e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f722:	bf04      	itt	eq
 800f724:	0080      	lsleq	r0, r0, #2
 800f726:	3302      	addeq	r3, #2
 800f728:	2800      	cmp	r0, #0
 800f72a:	db05      	blt.n	800f738 <__hi0bits+0x38>
 800f72c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f730:	f103 0301 	add.w	r3, r3, #1
 800f734:	bf08      	it	eq
 800f736:	2320      	moveq	r3, #32
 800f738:	4618      	mov	r0, r3
 800f73a:	4770      	bx	lr
 800f73c:	2300      	movs	r3, #0
 800f73e:	e7e4      	b.n	800f70a <__hi0bits+0xa>

0800f740 <__lo0bits>:
 800f740:	6803      	ldr	r3, [r0, #0]
 800f742:	f013 0207 	ands.w	r2, r3, #7
 800f746:	d00c      	beq.n	800f762 <__lo0bits+0x22>
 800f748:	07d9      	lsls	r1, r3, #31
 800f74a:	d422      	bmi.n	800f792 <__lo0bits+0x52>
 800f74c:	079a      	lsls	r2, r3, #30
 800f74e:	bf49      	itett	mi
 800f750:	085b      	lsrmi	r3, r3, #1
 800f752:	089b      	lsrpl	r3, r3, #2
 800f754:	6003      	strmi	r3, [r0, #0]
 800f756:	2201      	movmi	r2, #1
 800f758:	bf5c      	itt	pl
 800f75a:	6003      	strpl	r3, [r0, #0]
 800f75c:	2202      	movpl	r2, #2
 800f75e:	4610      	mov	r0, r2
 800f760:	4770      	bx	lr
 800f762:	b299      	uxth	r1, r3
 800f764:	b909      	cbnz	r1, 800f76a <__lo0bits+0x2a>
 800f766:	0c1b      	lsrs	r3, r3, #16
 800f768:	2210      	movs	r2, #16
 800f76a:	b2d9      	uxtb	r1, r3
 800f76c:	b909      	cbnz	r1, 800f772 <__lo0bits+0x32>
 800f76e:	3208      	adds	r2, #8
 800f770:	0a1b      	lsrs	r3, r3, #8
 800f772:	0719      	lsls	r1, r3, #28
 800f774:	bf04      	itt	eq
 800f776:	091b      	lsreq	r3, r3, #4
 800f778:	3204      	addeq	r2, #4
 800f77a:	0799      	lsls	r1, r3, #30
 800f77c:	bf04      	itt	eq
 800f77e:	089b      	lsreq	r3, r3, #2
 800f780:	3202      	addeq	r2, #2
 800f782:	07d9      	lsls	r1, r3, #31
 800f784:	d403      	bmi.n	800f78e <__lo0bits+0x4e>
 800f786:	085b      	lsrs	r3, r3, #1
 800f788:	f102 0201 	add.w	r2, r2, #1
 800f78c:	d003      	beq.n	800f796 <__lo0bits+0x56>
 800f78e:	6003      	str	r3, [r0, #0]
 800f790:	e7e5      	b.n	800f75e <__lo0bits+0x1e>
 800f792:	2200      	movs	r2, #0
 800f794:	e7e3      	b.n	800f75e <__lo0bits+0x1e>
 800f796:	2220      	movs	r2, #32
 800f798:	e7e1      	b.n	800f75e <__lo0bits+0x1e>
	...

0800f79c <__i2b>:
 800f79c:	b510      	push	{r4, lr}
 800f79e:	460c      	mov	r4, r1
 800f7a0:	2101      	movs	r1, #1
 800f7a2:	f7ff febb 	bl	800f51c <_Balloc>
 800f7a6:	4602      	mov	r2, r0
 800f7a8:	b928      	cbnz	r0, 800f7b6 <__i2b+0x1a>
 800f7aa:	4b05      	ldr	r3, [pc, #20]	; (800f7c0 <__i2b+0x24>)
 800f7ac:	4805      	ldr	r0, [pc, #20]	; (800f7c4 <__i2b+0x28>)
 800f7ae:	f240 1145 	movw	r1, #325	; 0x145
 800f7b2:	f001 ffd1 	bl	8011758 <__assert_func>
 800f7b6:	2301      	movs	r3, #1
 800f7b8:	6144      	str	r4, [r0, #20]
 800f7ba:	6103      	str	r3, [r0, #16]
 800f7bc:	bd10      	pop	{r4, pc}
 800f7be:	bf00      	nop
 800f7c0:	080126cf 	.word	0x080126cf
 800f7c4:	080126e0 	.word	0x080126e0

0800f7c8 <__multiply>:
 800f7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7cc:	4691      	mov	r9, r2
 800f7ce:	690a      	ldr	r2, [r1, #16]
 800f7d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f7d4:	429a      	cmp	r2, r3
 800f7d6:	bfb8      	it	lt
 800f7d8:	460b      	movlt	r3, r1
 800f7da:	460c      	mov	r4, r1
 800f7dc:	bfbc      	itt	lt
 800f7de:	464c      	movlt	r4, r9
 800f7e0:	4699      	movlt	r9, r3
 800f7e2:	6927      	ldr	r7, [r4, #16]
 800f7e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f7e8:	68a3      	ldr	r3, [r4, #8]
 800f7ea:	6861      	ldr	r1, [r4, #4]
 800f7ec:	eb07 060a 	add.w	r6, r7, sl
 800f7f0:	42b3      	cmp	r3, r6
 800f7f2:	b085      	sub	sp, #20
 800f7f4:	bfb8      	it	lt
 800f7f6:	3101      	addlt	r1, #1
 800f7f8:	f7ff fe90 	bl	800f51c <_Balloc>
 800f7fc:	b930      	cbnz	r0, 800f80c <__multiply+0x44>
 800f7fe:	4602      	mov	r2, r0
 800f800:	4b44      	ldr	r3, [pc, #272]	; (800f914 <__multiply+0x14c>)
 800f802:	4845      	ldr	r0, [pc, #276]	; (800f918 <__multiply+0x150>)
 800f804:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f808:	f001 ffa6 	bl	8011758 <__assert_func>
 800f80c:	f100 0514 	add.w	r5, r0, #20
 800f810:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f814:	462b      	mov	r3, r5
 800f816:	2200      	movs	r2, #0
 800f818:	4543      	cmp	r3, r8
 800f81a:	d321      	bcc.n	800f860 <__multiply+0x98>
 800f81c:	f104 0314 	add.w	r3, r4, #20
 800f820:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f824:	f109 0314 	add.w	r3, r9, #20
 800f828:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f82c:	9202      	str	r2, [sp, #8]
 800f82e:	1b3a      	subs	r2, r7, r4
 800f830:	3a15      	subs	r2, #21
 800f832:	f022 0203 	bic.w	r2, r2, #3
 800f836:	3204      	adds	r2, #4
 800f838:	f104 0115 	add.w	r1, r4, #21
 800f83c:	428f      	cmp	r7, r1
 800f83e:	bf38      	it	cc
 800f840:	2204      	movcc	r2, #4
 800f842:	9201      	str	r2, [sp, #4]
 800f844:	9a02      	ldr	r2, [sp, #8]
 800f846:	9303      	str	r3, [sp, #12]
 800f848:	429a      	cmp	r2, r3
 800f84a:	d80c      	bhi.n	800f866 <__multiply+0x9e>
 800f84c:	2e00      	cmp	r6, #0
 800f84e:	dd03      	ble.n	800f858 <__multiply+0x90>
 800f850:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f854:	2b00      	cmp	r3, #0
 800f856:	d05b      	beq.n	800f910 <__multiply+0x148>
 800f858:	6106      	str	r6, [r0, #16]
 800f85a:	b005      	add	sp, #20
 800f85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f860:	f843 2b04 	str.w	r2, [r3], #4
 800f864:	e7d8      	b.n	800f818 <__multiply+0x50>
 800f866:	f8b3 a000 	ldrh.w	sl, [r3]
 800f86a:	f1ba 0f00 	cmp.w	sl, #0
 800f86e:	d024      	beq.n	800f8ba <__multiply+0xf2>
 800f870:	f104 0e14 	add.w	lr, r4, #20
 800f874:	46a9      	mov	r9, r5
 800f876:	f04f 0c00 	mov.w	ip, #0
 800f87a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f87e:	f8d9 1000 	ldr.w	r1, [r9]
 800f882:	fa1f fb82 	uxth.w	fp, r2
 800f886:	b289      	uxth	r1, r1
 800f888:	fb0a 110b 	mla	r1, sl, fp, r1
 800f88c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f890:	f8d9 2000 	ldr.w	r2, [r9]
 800f894:	4461      	add	r1, ip
 800f896:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f89a:	fb0a c20b 	mla	r2, sl, fp, ip
 800f89e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f8a2:	b289      	uxth	r1, r1
 800f8a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f8a8:	4577      	cmp	r7, lr
 800f8aa:	f849 1b04 	str.w	r1, [r9], #4
 800f8ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f8b2:	d8e2      	bhi.n	800f87a <__multiply+0xb2>
 800f8b4:	9a01      	ldr	r2, [sp, #4]
 800f8b6:	f845 c002 	str.w	ip, [r5, r2]
 800f8ba:	9a03      	ldr	r2, [sp, #12]
 800f8bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f8c0:	3304      	adds	r3, #4
 800f8c2:	f1b9 0f00 	cmp.w	r9, #0
 800f8c6:	d021      	beq.n	800f90c <__multiply+0x144>
 800f8c8:	6829      	ldr	r1, [r5, #0]
 800f8ca:	f104 0c14 	add.w	ip, r4, #20
 800f8ce:	46ae      	mov	lr, r5
 800f8d0:	f04f 0a00 	mov.w	sl, #0
 800f8d4:	f8bc b000 	ldrh.w	fp, [ip]
 800f8d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f8dc:	fb09 220b 	mla	r2, r9, fp, r2
 800f8e0:	4452      	add	r2, sl
 800f8e2:	b289      	uxth	r1, r1
 800f8e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f8e8:	f84e 1b04 	str.w	r1, [lr], #4
 800f8ec:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f8f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f8f4:	f8be 1000 	ldrh.w	r1, [lr]
 800f8f8:	fb09 110a 	mla	r1, r9, sl, r1
 800f8fc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f900:	4567      	cmp	r7, ip
 800f902:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f906:	d8e5      	bhi.n	800f8d4 <__multiply+0x10c>
 800f908:	9a01      	ldr	r2, [sp, #4]
 800f90a:	50a9      	str	r1, [r5, r2]
 800f90c:	3504      	adds	r5, #4
 800f90e:	e799      	b.n	800f844 <__multiply+0x7c>
 800f910:	3e01      	subs	r6, #1
 800f912:	e79b      	b.n	800f84c <__multiply+0x84>
 800f914:	080126cf 	.word	0x080126cf
 800f918:	080126e0 	.word	0x080126e0

0800f91c <__pow5mult>:
 800f91c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f920:	4615      	mov	r5, r2
 800f922:	f012 0203 	ands.w	r2, r2, #3
 800f926:	4606      	mov	r6, r0
 800f928:	460f      	mov	r7, r1
 800f92a:	d007      	beq.n	800f93c <__pow5mult+0x20>
 800f92c:	4c25      	ldr	r4, [pc, #148]	; (800f9c4 <__pow5mult+0xa8>)
 800f92e:	3a01      	subs	r2, #1
 800f930:	2300      	movs	r3, #0
 800f932:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f936:	f7ff fe53 	bl	800f5e0 <__multadd>
 800f93a:	4607      	mov	r7, r0
 800f93c:	10ad      	asrs	r5, r5, #2
 800f93e:	d03d      	beq.n	800f9bc <__pow5mult+0xa0>
 800f940:	69f4      	ldr	r4, [r6, #28]
 800f942:	b97c      	cbnz	r4, 800f964 <__pow5mult+0x48>
 800f944:	2010      	movs	r0, #16
 800f946:	f7fd fdb5 	bl	800d4b4 <malloc>
 800f94a:	4602      	mov	r2, r0
 800f94c:	61f0      	str	r0, [r6, #28]
 800f94e:	b928      	cbnz	r0, 800f95c <__pow5mult+0x40>
 800f950:	4b1d      	ldr	r3, [pc, #116]	; (800f9c8 <__pow5mult+0xac>)
 800f952:	481e      	ldr	r0, [pc, #120]	; (800f9cc <__pow5mult+0xb0>)
 800f954:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f958:	f001 fefe 	bl	8011758 <__assert_func>
 800f95c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f960:	6004      	str	r4, [r0, #0]
 800f962:	60c4      	str	r4, [r0, #12]
 800f964:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f968:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f96c:	b94c      	cbnz	r4, 800f982 <__pow5mult+0x66>
 800f96e:	f240 2171 	movw	r1, #625	; 0x271
 800f972:	4630      	mov	r0, r6
 800f974:	f7ff ff12 	bl	800f79c <__i2b>
 800f978:	2300      	movs	r3, #0
 800f97a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f97e:	4604      	mov	r4, r0
 800f980:	6003      	str	r3, [r0, #0]
 800f982:	f04f 0900 	mov.w	r9, #0
 800f986:	07eb      	lsls	r3, r5, #31
 800f988:	d50a      	bpl.n	800f9a0 <__pow5mult+0x84>
 800f98a:	4639      	mov	r1, r7
 800f98c:	4622      	mov	r2, r4
 800f98e:	4630      	mov	r0, r6
 800f990:	f7ff ff1a 	bl	800f7c8 <__multiply>
 800f994:	4639      	mov	r1, r7
 800f996:	4680      	mov	r8, r0
 800f998:	4630      	mov	r0, r6
 800f99a:	f7ff fdff 	bl	800f59c <_Bfree>
 800f99e:	4647      	mov	r7, r8
 800f9a0:	106d      	asrs	r5, r5, #1
 800f9a2:	d00b      	beq.n	800f9bc <__pow5mult+0xa0>
 800f9a4:	6820      	ldr	r0, [r4, #0]
 800f9a6:	b938      	cbnz	r0, 800f9b8 <__pow5mult+0x9c>
 800f9a8:	4622      	mov	r2, r4
 800f9aa:	4621      	mov	r1, r4
 800f9ac:	4630      	mov	r0, r6
 800f9ae:	f7ff ff0b 	bl	800f7c8 <__multiply>
 800f9b2:	6020      	str	r0, [r4, #0]
 800f9b4:	f8c0 9000 	str.w	r9, [r0]
 800f9b8:	4604      	mov	r4, r0
 800f9ba:	e7e4      	b.n	800f986 <__pow5mult+0x6a>
 800f9bc:	4638      	mov	r0, r7
 800f9be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9c2:	bf00      	nop
 800f9c4:	08012830 	.word	0x08012830
 800f9c8:	08012660 	.word	0x08012660
 800f9cc:	080126e0 	.word	0x080126e0

0800f9d0 <__lshift>:
 800f9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9d4:	460c      	mov	r4, r1
 800f9d6:	6849      	ldr	r1, [r1, #4]
 800f9d8:	6923      	ldr	r3, [r4, #16]
 800f9da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f9de:	68a3      	ldr	r3, [r4, #8]
 800f9e0:	4607      	mov	r7, r0
 800f9e2:	4691      	mov	r9, r2
 800f9e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f9e8:	f108 0601 	add.w	r6, r8, #1
 800f9ec:	42b3      	cmp	r3, r6
 800f9ee:	db0b      	blt.n	800fa08 <__lshift+0x38>
 800f9f0:	4638      	mov	r0, r7
 800f9f2:	f7ff fd93 	bl	800f51c <_Balloc>
 800f9f6:	4605      	mov	r5, r0
 800f9f8:	b948      	cbnz	r0, 800fa0e <__lshift+0x3e>
 800f9fa:	4602      	mov	r2, r0
 800f9fc:	4b28      	ldr	r3, [pc, #160]	; (800faa0 <__lshift+0xd0>)
 800f9fe:	4829      	ldr	r0, [pc, #164]	; (800faa4 <__lshift+0xd4>)
 800fa00:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800fa04:	f001 fea8 	bl	8011758 <__assert_func>
 800fa08:	3101      	adds	r1, #1
 800fa0a:	005b      	lsls	r3, r3, #1
 800fa0c:	e7ee      	b.n	800f9ec <__lshift+0x1c>
 800fa0e:	2300      	movs	r3, #0
 800fa10:	f100 0114 	add.w	r1, r0, #20
 800fa14:	f100 0210 	add.w	r2, r0, #16
 800fa18:	4618      	mov	r0, r3
 800fa1a:	4553      	cmp	r3, sl
 800fa1c:	db33      	blt.n	800fa86 <__lshift+0xb6>
 800fa1e:	6920      	ldr	r0, [r4, #16]
 800fa20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fa24:	f104 0314 	add.w	r3, r4, #20
 800fa28:	f019 091f 	ands.w	r9, r9, #31
 800fa2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fa30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fa34:	d02b      	beq.n	800fa8e <__lshift+0xbe>
 800fa36:	f1c9 0e20 	rsb	lr, r9, #32
 800fa3a:	468a      	mov	sl, r1
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	6818      	ldr	r0, [r3, #0]
 800fa40:	fa00 f009 	lsl.w	r0, r0, r9
 800fa44:	4310      	orrs	r0, r2
 800fa46:	f84a 0b04 	str.w	r0, [sl], #4
 800fa4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa4e:	459c      	cmp	ip, r3
 800fa50:	fa22 f20e 	lsr.w	r2, r2, lr
 800fa54:	d8f3      	bhi.n	800fa3e <__lshift+0x6e>
 800fa56:	ebac 0304 	sub.w	r3, ip, r4
 800fa5a:	3b15      	subs	r3, #21
 800fa5c:	f023 0303 	bic.w	r3, r3, #3
 800fa60:	3304      	adds	r3, #4
 800fa62:	f104 0015 	add.w	r0, r4, #21
 800fa66:	4584      	cmp	ip, r0
 800fa68:	bf38      	it	cc
 800fa6a:	2304      	movcc	r3, #4
 800fa6c:	50ca      	str	r2, [r1, r3]
 800fa6e:	b10a      	cbz	r2, 800fa74 <__lshift+0xa4>
 800fa70:	f108 0602 	add.w	r6, r8, #2
 800fa74:	3e01      	subs	r6, #1
 800fa76:	4638      	mov	r0, r7
 800fa78:	612e      	str	r6, [r5, #16]
 800fa7a:	4621      	mov	r1, r4
 800fa7c:	f7ff fd8e 	bl	800f59c <_Bfree>
 800fa80:	4628      	mov	r0, r5
 800fa82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa86:	f842 0f04 	str.w	r0, [r2, #4]!
 800fa8a:	3301      	adds	r3, #1
 800fa8c:	e7c5      	b.n	800fa1a <__lshift+0x4a>
 800fa8e:	3904      	subs	r1, #4
 800fa90:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa94:	f841 2f04 	str.w	r2, [r1, #4]!
 800fa98:	459c      	cmp	ip, r3
 800fa9a:	d8f9      	bhi.n	800fa90 <__lshift+0xc0>
 800fa9c:	e7ea      	b.n	800fa74 <__lshift+0xa4>
 800fa9e:	bf00      	nop
 800faa0:	080126cf 	.word	0x080126cf
 800faa4:	080126e0 	.word	0x080126e0

0800faa8 <__mcmp>:
 800faa8:	b530      	push	{r4, r5, lr}
 800faaa:	6902      	ldr	r2, [r0, #16]
 800faac:	690c      	ldr	r4, [r1, #16]
 800faae:	1b12      	subs	r2, r2, r4
 800fab0:	d10e      	bne.n	800fad0 <__mcmp+0x28>
 800fab2:	f100 0314 	add.w	r3, r0, #20
 800fab6:	3114      	adds	r1, #20
 800fab8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fabc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fac0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fac4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fac8:	42a5      	cmp	r5, r4
 800faca:	d003      	beq.n	800fad4 <__mcmp+0x2c>
 800facc:	d305      	bcc.n	800fada <__mcmp+0x32>
 800face:	2201      	movs	r2, #1
 800fad0:	4610      	mov	r0, r2
 800fad2:	bd30      	pop	{r4, r5, pc}
 800fad4:	4283      	cmp	r3, r0
 800fad6:	d3f3      	bcc.n	800fac0 <__mcmp+0x18>
 800fad8:	e7fa      	b.n	800fad0 <__mcmp+0x28>
 800fada:	f04f 32ff 	mov.w	r2, #4294967295
 800fade:	e7f7      	b.n	800fad0 <__mcmp+0x28>

0800fae0 <__mdiff>:
 800fae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fae4:	460c      	mov	r4, r1
 800fae6:	4606      	mov	r6, r0
 800fae8:	4611      	mov	r1, r2
 800faea:	4620      	mov	r0, r4
 800faec:	4690      	mov	r8, r2
 800faee:	f7ff ffdb 	bl	800faa8 <__mcmp>
 800faf2:	1e05      	subs	r5, r0, #0
 800faf4:	d110      	bne.n	800fb18 <__mdiff+0x38>
 800faf6:	4629      	mov	r1, r5
 800faf8:	4630      	mov	r0, r6
 800fafa:	f7ff fd0f 	bl	800f51c <_Balloc>
 800fafe:	b930      	cbnz	r0, 800fb0e <__mdiff+0x2e>
 800fb00:	4b3a      	ldr	r3, [pc, #232]	; (800fbec <__mdiff+0x10c>)
 800fb02:	4602      	mov	r2, r0
 800fb04:	f240 2137 	movw	r1, #567	; 0x237
 800fb08:	4839      	ldr	r0, [pc, #228]	; (800fbf0 <__mdiff+0x110>)
 800fb0a:	f001 fe25 	bl	8011758 <__assert_func>
 800fb0e:	2301      	movs	r3, #1
 800fb10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fb14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb18:	bfa4      	itt	ge
 800fb1a:	4643      	movge	r3, r8
 800fb1c:	46a0      	movge	r8, r4
 800fb1e:	4630      	mov	r0, r6
 800fb20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fb24:	bfa6      	itte	ge
 800fb26:	461c      	movge	r4, r3
 800fb28:	2500      	movge	r5, #0
 800fb2a:	2501      	movlt	r5, #1
 800fb2c:	f7ff fcf6 	bl	800f51c <_Balloc>
 800fb30:	b920      	cbnz	r0, 800fb3c <__mdiff+0x5c>
 800fb32:	4b2e      	ldr	r3, [pc, #184]	; (800fbec <__mdiff+0x10c>)
 800fb34:	4602      	mov	r2, r0
 800fb36:	f240 2145 	movw	r1, #581	; 0x245
 800fb3a:	e7e5      	b.n	800fb08 <__mdiff+0x28>
 800fb3c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fb40:	6926      	ldr	r6, [r4, #16]
 800fb42:	60c5      	str	r5, [r0, #12]
 800fb44:	f104 0914 	add.w	r9, r4, #20
 800fb48:	f108 0514 	add.w	r5, r8, #20
 800fb4c:	f100 0e14 	add.w	lr, r0, #20
 800fb50:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fb54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fb58:	f108 0210 	add.w	r2, r8, #16
 800fb5c:	46f2      	mov	sl, lr
 800fb5e:	2100      	movs	r1, #0
 800fb60:	f859 3b04 	ldr.w	r3, [r9], #4
 800fb64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fb68:	fa11 f88b 	uxtah	r8, r1, fp
 800fb6c:	b299      	uxth	r1, r3
 800fb6e:	0c1b      	lsrs	r3, r3, #16
 800fb70:	eba8 0801 	sub.w	r8, r8, r1
 800fb74:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fb78:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fb7c:	fa1f f888 	uxth.w	r8, r8
 800fb80:	1419      	asrs	r1, r3, #16
 800fb82:	454e      	cmp	r6, r9
 800fb84:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fb88:	f84a 3b04 	str.w	r3, [sl], #4
 800fb8c:	d8e8      	bhi.n	800fb60 <__mdiff+0x80>
 800fb8e:	1b33      	subs	r3, r6, r4
 800fb90:	3b15      	subs	r3, #21
 800fb92:	f023 0303 	bic.w	r3, r3, #3
 800fb96:	3304      	adds	r3, #4
 800fb98:	3415      	adds	r4, #21
 800fb9a:	42a6      	cmp	r6, r4
 800fb9c:	bf38      	it	cc
 800fb9e:	2304      	movcc	r3, #4
 800fba0:	441d      	add	r5, r3
 800fba2:	4473      	add	r3, lr
 800fba4:	469e      	mov	lr, r3
 800fba6:	462e      	mov	r6, r5
 800fba8:	4566      	cmp	r6, ip
 800fbaa:	d30e      	bcc.n	800fbca <__mdiff+0xea>
 800fbac:	f10c 0203 	add.w	r2, ip, #3
 800fbb0:	1b52      	subs	r2, r2, r5
 800fbb2:	f022 0203 	bic.w	r2, r2, #3
 800fbb6:	3d03      	subs	r5, #3
 800fbb8:	45ac      	cmp	ip, r5
 800fbba:	bf38      	it	cc
 800fbbc:	2200      	movcc	r2, #0
 800fbbe:	4413      	add	r3, r2
 800fbc0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fbc4:	b17a      	cbz	r2, 800fbe6 <__mdiff+0x106>
 800fbc6:	6107      	str	r7, [r0, #16]
 800fbc8:	e7a4      	b.n	800fb14 <__mdiff+0x34>
 800fbca:	f856 8b04 	ldr.w	r8, [r6], #4
 800fbce:	fa11 f288 	uxtah	r2, r1, r8
 800fbd2:	1414      	asrs	r4, r2, #16
 800fbd4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fbd8:	b292      	uxth	r2, r2
 800fbda:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fbde:	f84e 2b04 	str.w	r2, [lr], #4
 800fbe2:	1421      	asrs	r1, r4, #16
 800fbe4:	e7e0      	b.n	800fba8 <__mdiff+0xc8>
 800fbe6:	3f01      	subs	r7, #1
 800fbe8:	e7ea      	b.n	800fbc0 <__mdiff+0xe0>
 800fbea:	bf00      	nop
 800fbec:	080126cf 	.word	0x080126cf
 800fbf0:	080126e0 	.word	0x080126e0

0800fbf4 <__ulp>:
 800fbf4:	b082      	sub	sp, #8
 800fbf6:	ed8d 0b00 	vstr	d0, [sp]
 800fbfa:	9a01      	ldr	r2, [sp, #4]
 800fbfc:	4b0f      	ldr	r3, [pc, #60]	; (800fc3c <__ulp+0x48>)
 800fbfe:	4013      	ands	r3, r2
 800fc00:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	dc08      	bgt.n	800fc1a <__ulp+0x26>
 800fc08:	425b      	negs	r3, r3
 800fc0a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800fc0e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fc12:	da04      	bge.n	800fc1e <__ulp+0x2a>
 800fc14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fc18:	4113      	asrs	r3, r2
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	e008      	b.n	800fc30 <__ulp+0x3c>
 800fc1e:	f1a2 0314 	sub.w	r3, r2, #20
 800fc22:	2b1e      	cmp	r3, #30
 800fc24:	bfda      	itte	le
 800fc26:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800fc2a:	40da      	lsrle	r2, r3
 800fc2c:	2201      	movgt	r2, #1
 800fc2e:	2300      	movs	r3, #0
 800fc30:	4619      	mov	r1, r3
 800fc32:	4610      	mov	r0, r2
 800fc34:	ec41 0b10 	vmov	d0, r0, r1
 800fc38:	b002      	add	sp, #8
 800fc3a:	4770      	bx	lr
 800fc3c:	7ff00000 	.word	0x7ff00000

0800fc40 <__b2d>:
 800fc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc44:	6906      	ldr	r6, [r0, #16]
 800fc46:	f100 0814 	add.w	r8, r0, #20
 800fc4a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fc4e:	1f37      	subs	r7, r6, #4
 800fc50:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fc54:	4610      	mov	r0, r2
 800fc56:	f7ff fd53 	bl	800f700 <__hi0bits>
 800fc5a:	f1c0 0320 	rsb	r3, r0, #32
 800fc5e:	280a      	cmp	r0, #10
 800fc60:	600b      	str	r3, [r1, #0]
 800fc62:	491b      	ldr	r1, [pc, #108]	; (800fcd0 <__b2d+0x90>)
 800fc64:	dc15      	bgt.n	800fc92 <__b2d+0x52>
 800fc66:	f1c0 0c0b 	rsb	ip, r0, #11
 800fc6a:	fa22 f30c 	lsr.w	r3, r2, ip
 800fc6e:	45b8      	cmp	r8, r7
 800fc70:	ea43 0501 	orr.w	r5, r3, r1
 800fc74:	bf34      	ite	cc
 800fc76:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fc7a:	2300      	movcs	r3, #0
 800fc7c:	3015      	adds	r0, #21
 800fc7e:	fa02 f000 	lsl.w	r0, r2, r0
 800fc82:	fa23 f30c 	lsr.w	r3, r3, ip
 800fc86:	4303      	orrs	r3, r0
 800fc88:	461c      	mov	r4, r3
 800fc8a:	ec45 4b10 	vmov	d0, r4, r5
 800fc8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc92:	45b8      	cmp	r8, r7
 800fc94:	bf3a      	itte	cc
 800fc96:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fc9a:	f1a6 0708 	subcc.w	r7, r6, #8
 800fc9e:	2300      	movcs	r3, #0
 800fca0:	380b      	subs	r0, #11
 800fca2:	d012      	beq.n	800fcca <__b2d+0x8a>
 800fca4:	f1c0 0120 	rsb	r1, r0, #32
 800fca8:	fa23 f401 	lsr.w	r4, r3, r1
 800fcac:	4082      	lsls	r2, r0
 800fcae:	4322      	orrs	r2, r4
 800fcb0:	4547      	cmp	r7, r8
 800fcb2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800fcb6:	bf8c      	ite	hi
 800fcb8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fcbc:	2200      	movls	r2, #0
 800fcbe:	4083      	lsls	r3, r0
 800fcc0:	40ca      	lsrs	r2, r1
 800fcc2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fcc6:	4313      	orrs	r3, r2
 800fcc8:	e7de      	b.n	800fc88 <__b2d+0x48>
 800fcca:	ea42 0501 	orr.w	r5, r2, r1
 800fcce:	e7db      	b.n	800fc88 <__b2d+0x48>
 800fcd0:	3ff00000 	.word	0x3ff00000

0800fcd4 <__d2b>:
 800fcd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fcd8:	460f      	mov	r7, r1
 800fcda:	2101      	movs	r1, #1
 800fcdc:	ec59 8b10 	vmov	r8, r9, d0
 800fce0:	4616      	mov	r6, r2
 800fce2:	f7ff fc1b 	bl	800f51c <_Balloc>
 800fce6:	4604      	mov	r4, r0
 800fce8:	b930      	cbnz	r0, 800fcf8 <__d2b+0x24>
 800fcea:	4602      	mov	r2, r0
 800fcec:	4b24      	ldr	r3, [pc, #144]	; (800fd80 <__d2b+0xac>)
 800fcee:	4825      	ldr	r0, [pc, #148]	; (800fd84 <__d2b+0xb0>)
 800fcf0:	f240 310f 	movw	r1, #783	; 0x30f
 800fcf4:	f001 fd30 	bl	8011758 <__assert_func>
 800fcf8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fcfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fd00:	bb2d      	cbnz	r5, 800fd4e <__d2b+0x7a>
 800fd02:	9301      	str	r3, [sp, #4]
 800fd04:	f1b8 0300 	subs.w	r3, r8, #0
 800fd08:	d026      	beq.n	800fd58 <__d2b+0x84>
 800fd0a:	4668      	mov	r0, sp
 800fd0c:	9300      	str	r3, [sp, #0]
 800fd0e:	f7ff fd17 	bl	800f740 <__lo0bits>
 800fd12:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fd16:	b1e8      	cbz	r0, 800fd54 <__d2b+0x80>
 800fd18:	f1c0 0320 	rsb	r3, r0, #32
 800fd1c:	fa02 f303 	lsl.w	r3, r2, r3
 800fd20:	430b      	orrs	r3, r1
 800fd22:	40c2      	lsrs	r2, r0
 800fd24:	6163      	str	r3, [r4, #20]
 800fd26:	9201      	str	r2, [sp, #4]
 800fd28:	9b01      	ldr	r3, [sp, #4]
 800fd2a:	61a3      	str	r3, [r4, #24]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	bf14      	ite	ne
 800fd30:	2202      	movne	r2, #2
 800fd32:	2201      	moveq	r2, #1
 800fd34:	6122      	str	r2, [r4, #16]
 800fd36:	b1bd      	cbz	r5, 800fd68 <__d2b+0x94>
 800fd38:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fd3c:	4405      	add	r5, r0
 800fd3e:	603d      	str	r5, [r7, #0]
 800fd40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fd44:	6030      	str	r0, [r6, #0]
 800fd46:	4620      	mov	r0, r4
 800fd48:	b003      	add	sp, #12
 800fd4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fd52:	e7d6      	b.n	800fd02 <__d2b+0x2e>
 800fd54:	6161      	str	r1, [r4, #20]
 800fd56:	e7e7      	b.n	800fd28 <__d2b+0x54>
 800fd58:	a801      	add	r0, sp, #4
 800fd5a:	f7ff fcf1 	bl	800f740 <__lo0bits>
 800fd5e:	9b01      	ldr	r3, [sp, #4]
 800fd60:	6163      	str	r3, [r4, #20]
 800fd62:	3020      	adds	r0, #32
 800fd64:	2201      	movs	r2, #1
 800fd66:	e7e5      	b.n	800fd34 <__d2b+0x60>
 800fd68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fd6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fd70:	6038      	str	r0, [r7, #0]
 800fd72:	6918      	ldr	r0, [r3, #16]
 800fd74:	f7ff fcc4 	bl	800f700 <__hi0bits>
 800fd78:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fd7c:	e7e2      	b.n	800fd44 <__d2b+0x70>
 800fd7e:	bf00      	nop
 800fd80:	080126cf 	.word	0x080126cf
 800fd84:	080126e0 	.word	0x080126e0

0800fd88 <__ratio>:
 800fd88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd8c:	4688      	mov	r8, r1
 800fd8e:	4669      	mov	r1, sp
 800fd90:	4681      	mov	r9, r0
 800fd92:	f7ff ff55 	bl	800fc40 <__b2d>
 800fd96:	a901      	add	r1, sp, #4
 800fd98:	4640      	mov	r0, r8
 800fd9a:	ec55 4b10 	vmov	r4, r5, d0
 800fd9e:	f7ff ff4f 	bl	800fc40 <__b2d>
 800fda2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fda6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fdaa:	eba3 0c02 	sub.w	ip, r3, r2
 800fdae:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fdb2:	1a9b      	subs	r3, r3, r2
 800fdb4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fdb8:	ec51 0b10 	vmov	r0, r1, d0
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	bfd6      	itet	le
 800fdc0:	460a      	movle	r2, r1
 800fdc2:	462a      	movgt	r2, r5
 800fdc4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fdc8:	468b      	mov	fp, r1
 800fdca:	462f      	mov	r7, r5
 800fdcc:	bfd4      	ite	le
 800fdce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fdd2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fdd6:	4620      	mov	r0, r4
 800fdd8:	ee10 2a10 	vmov	r2, s0
 800fddc:	465b      	mov	r3, fp
 800fdde:	4639      	mov	r1, r7
 800fde0:	f7f0 fd34 	bl	800084c <__aeabi_ddiv>
 800fde4:	ec41 0b10 	vmov	d0, r0, r1
 800fde8:	b003      	add	sp, #12
 800fdea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fdee <__copybits>:
 800fdee:	3901      	subs	r1, #1
 800fdf0:	b570      	push	{r4, r5, r6, lr}
 800fdf2:	1149      	asrs	r1, r1, #5
 800fdf4:	6914      	ldr	r4, [r2, #16]
 800fdf6:	3101      	adds	r1, #1
 800fdf8:	f102 0314 	add.w	r3, r2, #20
 800fdfc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fe00:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fe04:	1f05      	subs	r5, r0, #4
 800fe06:	42a3      	cmp	r3, r4
 800fe08:	d30c      	bcc.n	800fe24 <__copybits+0x36>
 800fe0a:	1aa3      	subs	r3, r4, r2
 800fe0c:	3b11      	subs	r3, #17
 800fe0e:	f023 0303 	bic.w	r3, r3, #3
 800fe12:	3211      	adds	r2, #17
 800fe14:	42a2      	cmp	r2, r4
 800fe16:	bf88      	it	hi
 800fe18:	2300      	movhi	r3, #0
 800fe1a:	4418      	add	r0, r3
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	4288      	cmp	r0, r1
 800fe20:	d305      	bcc.n	800fe2e <__copybits+0x40>
 800fe22:	bd70      	pop	{r4, r5, r6, pc}
 800fe24:	f853 6b04 	ldr.w	r6, [r3], #4
 800fe28:	f845 6f04 	str.w	r6, [r5, #4]!
 800fe2c:	e7eb      	b.n	800fe06 <__copybits+0x18>
 800fe2e:	f840 3b04 	str.w	r3, [r0], #4
 800fe32:	e7f4      	b.n	800fe1e <__copybits+0x30>

0800fe34 <__any_on>:
 800fe34:	f100 0214 	add.w	r2, r0, #20
 800fe38:	6900      	ldr	r0, [r0, #16]
 800fe3a:	114b      	asrs	r3, r1, #5
 800fe3c:	4298      	cmp	r0, r3
 800fe3e:	b510      	push	{r4, lr}
 800fe40:	db11      	blt.n	800fe66 <__any_on+0x32>
 800fe42:	dd0a      	ble.n	800fe5a <__any_on+0x26>
 800fe44:	f011 011f 	ands.w	r1, r1, #31
 800fe48:	d007      	beq.n	800fe5a <__any_on+0x26>
 800fe4a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fe4e:	fa24 f001 	lsr.w	r0, r4, r1
 800fe52:	fa00 f101 	lsl.w	r1, r0, r1
 800fe56:	428c      	cmp	r4, r1
 800fe58:	d10b      	bne.n	800fe72 <__any_on+0x3e>
 800fe5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fe5e:	4293      	cmp	r3, r2
 800fe60:	d803      	bhi.n	800fe6a <__any_on+0x36>
 800fe62:	2000      	movs	r0, #0
 800fe64:	bd10      	pop	{r4, pc}
 800fe66:	4603      	mov	r3, r0
 800fe68:	e7f7      	b.n	800fe5a <__any_on+0x26>
 800fe6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fe6e:	2900      	cmp	r1, #0
 800fe70:	d0f5      	beq.n	800fe5e <__any_on+0x2a>
 800fe72:	2001      	movs	r0, #1
 800fe74:	e7f6      	b.n	800fe64 <__any_on+0x30>

0800fe76 <sulp>:
 800fe76:	b570      	push	{r4, r5, r6, lr}
 800fe78:	4604      	mov	r4, r0
 800fe7a:	460d      	mov	r5, r1
 800fe7c:	ec45 4b10 	vmov	d0, r4, r5
 800fe80:	4616      	mov	r6, r2
 800fe82:	f7ff feb7 	bl	800fbf4 <__ulp>
 800fe86:	ec51 0b10 	vmov	r0, r1, d0
 800fe8a:	b17e      	cbz	r6, 800feac <sulp+0x36>
 800fe8c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fe90:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	dd09      	ble.n	800feac <sulp+0x36>
 800fe98:	051b      	lsls	r3, r3, #20
 800fe9a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fe9e:	2400      	movs	r4, #0
 800fea0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fea4:	4622      	mov	r2, r4
 800fea6:	462b      	mov	r3, r5
 800fea8:	f7f0 fba6 	bl	80005f8 <__aeabi_dmul>
 800feac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800feb0 <_strtod_l>:
 800feb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feb4:	ed2d 8b02 	vpush	{d8}
 800feb8:	b09b      	sub	sp, #108	; 0x6c
 800feba:	4604      	mov	r4, r0
 800febc:	9213      	str	r2, [sp, #76]	; 0x4c
 800febe:	2200      	movs	r2, #0
 800fec0:	9216      	str	r2, [sp, #88]	; 0x58
 800fec2:	460d      	mov	r5, r1
 800fec4:	f04f 0800 	mov.w	r8, #0
 800fec8:	f04f 0900 	mov.w	r9, #0
 800fecc:	460a      	mov	r2, r1
 800fece:	9215      	str	r2, [sp, #84]	; 0x54
 800fed0:	7811      	ldrb	r1, [r2, #0]
 800fed2:	292b      	cmp	r1, #43	; 0x2b
 800fed4:	d04c      	beq.n	800ff70 <_strtod_l+0xc0>
 800fed6:	d83a      	bhi.n	800ff4e <_strtod_l+0x9e>
 800fed8:	290d      	cmp	r1, #13
 800feda:	d834      	bhi.n	800ff46 <_strtod_l+0x96>
 800fedc:	2908      	cmp	r1, #8
 800fede:	d834      	bhi.n	800ff4a <_strtod_l+0x9a>
 800fee0:	2900      	cmp	r1, #0
 800fee2:	d03d      	beq.n	800ff60 <_strtod_l+0xb0>
 800fee4:	2200      	movs	r2, #0
 800fee6:	920a      	str	r2, [sp, #40]	; 0x28
 800fee8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800feea:	7832      	ldrb	r2, [r6, #0]
 800feec:	2a30      	cmp	r2, #48	; 0x30
 800feee:	f040 80b4 	bne.w	801005a <_strtod_l+0x1aa>
 800fef2:	7872      	ldrb	r2, [r6, #1]
 800fef4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800fef8:	2a58      	cmp	r2, #88	; 0x58
 800fefa:	d170      	bne.n	800ffde <_strtod_l+0x12e>
 800fefc:	9302      	str	r3, [sp, #8]
 800fefe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff00:	9301      	str	r3, [sp, #4]
 800ff02:	ab16      	add	r3, sp, #88	; 0x58
 800ff04:	9300      	str	r3, [sp, #0]
 800ff06:	4a8e      	ldr	r2, [pc, #568]	; (8010140 <_strtod_l+0x290>)
 800ff08:	ab17      	add	r3, sp, #92	; 0x5c
 800ff0a:	a915      	add	r1, sp, #84	; 0x54
 800ff0c:	4620      	mov	r0, r4
 800ff0e:	f001 fcbf 	bl	8011890 <__gethex>
 800ff12:	f010 070f 	ands.w	r7, r0, #15
 800ff16:	4605      	mov	r5, r0
 800ff18:	d005      	beq.n	800ff26 <_strtod_l+0x76>
 800ff1a:	2f06      	cmp	r7, #6
 800ff1c:	d12a      	bne.n	800ff74 <_strtod_l+0xc4>
 800ff1e:	3601      	adds	r6, #1
 800ff20:	2300      	movs	r3, #0
 800ff22:	9615      	str	r6, [sp, #84]	; 0x54
 800ff24:	930a      	str	r3, [sp, #40]	; 0x28
 800ff26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	f040 857f 	bne.w	8010a2c <_strtod_l+0xb7c>
 800ff2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff30:	b1db      	cbz	r3, 800ff6a <_strtod_l+0xba>
 800ff32:	4642      	mov	r2, r8
 800ff34:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ff38:	ec43 2b10 	vmov	d0, r2, r3
 800ff3c:	b01b      	add	sp, #108	; 0x6c
 800ff3e:	ecbd 8b02 	vpop	{d8}
 800ff42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff46:	2920      	cmp	r1, #32
 800ff48:	d1cc      	bne.n	800fee4 <_strtod_l+0x34>
 800ff4a:	3201      	adds	r2, #1
 800ff4c:	e7bf      	b.n	800fece <_strtod_l+0x1e>
 800ff4e:	292d      	cmp	r1, #45	; 0x2d
 800ff50:	d1c8      	bne.n	800fee4 <_strtod_l+0x34>
 800ff52:	2101      	movs	r1, #1
 800ff54:	910a      	str	r1, [sp, #40]	; 0x28
 800ff56:	1c51      	adds	r1, r2, #1
 800ff58:	9115      	str	r1, [sp, #84]	; 0x54
 800ff5a:	7852      	ldrb	r2, [r2, #1]
 800ff5c:	2a00      	cmp	r2, #0
 800ff5e:	d1c3      	bne.n	800fee8 <_strtod_l+0x38>
 800ff60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ff62:	9515      	str	r5, [sp, #84]	; 0x54
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	f040 855f 	bne.w	8010a28 <_strtod_l+0xb78>
 800ff6a:	4642      	mov	r2, r8
 800ff6c:	464b      	mov	r3, r9
 800ff6e:	e7e3      	b.n	800ff38 <_strtod_l+0x88>
 800ff70:	2100      	movs	r1, #0
 800ff72:	e7ef      	b.n	800ff54 <_strtod_l+0xa4>
 800ff74:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ff76:	b13a      	cbz	r2, 800ff88 <_strtod_l+0xd8>
 800ff78:	2135      	movs	r1, #53	; 0x35
 800ff7a:	a818      	add	r0, sp, #96	; 0x60
 800ff7c:	f7ff ff37 	bl	800fdee <__copybits>
 800ff80:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ff82:	4620      	mov	r0, r4
 800ff84:	f7ff fb0a 	bl	800f59c <_Bfree>
 800ff88:	3f01      	subs	r7, #1
 800ff8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ff8c:	2f04      	cmp	r7, #4
 800ff8e:	d806      	bhi.n	800ff9e <_strtod_l+0xee>
 800ff90:	e8df f007 	tbb	[pc, r7]
 800ff94:	201d0314 	.word	0x201d0314
 800ff98:	14          	.byte	0x14
 800ff99:	00          	.byte	0x00
 800ff9a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800ff9e:	05e9      	lsls	r1, r5, #23
 800ffa0:	bf48      	it	mi
 800ffa2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ffa6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ffaa:	0d1b      	lsrs	r3, r3, #20
 800ffac:	051b      	lsls	r3, r3, #20
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d1b9      	bne.n	800ff26 <_strtod_l+0x76>
 800ffb2:	f7fe fba9 	bl	800e708 <__errno>
 800ffb6:	2322      	movs	r3, #34	; 0x22
 800ffb8:	6003      	str	r3, [r0, #0]
 800ffba:	e7b4      	b.n	800ff26 <_strtod_l+0x76>
 800ffbc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800ffc0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ffc4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ffc8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ffcc:	e7e7      	b.n	800ff9e <_strtod_l+0xee>
 800ffce:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8010148 <_strtod_l+0x298>
 800ffd2:	e7e4      	b.n	800ff9e <_strtod_l+0xee>
 800ffd4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ffd8:	f04f 38ff 	mov.w	r8, #4294967295
 800ffdc:	e7df      	b.n	800ff9e <_strtod_l+0xee>
 800ffde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ffe0:	1c5a      	adds	r2, r3, #1
 800ffe2:	9215      	str	r2, [sp, #84]	; 0x54
 800ffe4:	785b      	ldrb	r3, [r3, #1]
 800ffe6:	2b30      	cmp	r3, #48	; 0x30
 800ffe8:	d0f9      	beq.n	800ffde <_strtod_l+0x12e>
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d09b      	beq.n	800ff26 <_strtod_l+0x76>
 800ffee:	2301      	movs	r3, #1
 800fff0:	f04f 0a00 	mov.w	sl, #0
 800fff4:	9304      	str	r3, [sp, #16]
 800fff6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fff8:	930b      	str	r3, [sp, #44]	; 0x2c
 800fffa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800fffe:	46d3      	mov	fp, sl
 8010000:	220a      	movs	r2, #10
 8010002:	9815      	ldr	r0, [sp, #84]	; 0x54
 8010004:	7806      	ldrb	r6, [r0, #0]
 8010006:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801000a:	b2d9      	uxtb	r1, r3
 801000c:	2909      	cmp	r1, #9
 801000e:	d926      	bls.n	801005e <_strtod_l+0x1ae>
 8010010:	494c      	ldr	r1, [pc, #304]	; (8010144 <_strtod_l+0x294>)
 8010012:	2201      	movs	r2, #1
 8010014:	f001 fb79 	bl	801170a <strncmp>
 8010018:	2800      	cmp	r0, #0
 801001a:	d030      	beq.n	801007e <_strtod_l+0x1ce>
 801001c:	2000      	movs	r0, #0
 801001e:	4632      	mov	r2, r6
 8010020:	9005      	str	r0, [sp, #20]
 8010022:	465e      	mov	r6, fp
 8010024:	4603      	mov	r3, r0
 8010026:	2a65      	cmp	r2, #101	; 0x65
 8010028:	d001      	beq.n	801002e <_strtod_l+0x17e>
 801002a:	2a45      	cmp	r2, #69	; 0x45
 801002c:	d113      	bne.n	8010056 <_strtod_l+0x1a6>
 801002e:	b91e      	cbnz	r6, 8010038 <_strtod_l+0x188>
 8010030:	9a04      	ldr	r2, [sp, #16]
 8010032:	4302      	orrs	r2, r0
 8010034:	d094      	beq.n	800ff60 <_strtod_l+0xb0>
 8010036:	2600      	movs	r6, #0
 8010038:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801003a:	1c6a      	adds	r2, r5, #1
 801003c:	9215      	str	r2, [sp, #84]	; 0x54
 801003e:	786a      	ldrb	r2, [r5, #1]
 8010040:	2a2b      	cmp	r2, #43	; 0x2b
 8010042:	d074      	beq.n	801012e <_strtod_l+0x27e>
 8010044:	2a2d      	cmp	r2, #45	; 0x2d
 8010046:	d078      	beq.n	801013a <_strtod_l+0x28a>
 8010048:	f04f 0c00 	mov.w	ip, #0
 801004c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010050:	2909      	cmp	r1, #9
 8010052:	d97f      	bls.n	8010154 <_strtod_l+0x2a4>
 8010054:	9515      	str	r5, [sp, #84]	; 0x54
 8010056:	2700      	movs	r7, #0
 8010058:	e09e      	b.n	8010198 <_strtod_l+0x2e8>
 801005a:	2300      	movs	r3, #0
 801005c:	e7c8      	b.n	800fff0 <_strtod_l+0x140>
 801005e:	f1bb 0f08 	cmp.w	fp, #8
 8010062:	bfd8      	it	le
 8010064:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010066:	f100 0001 	add.w	r0, r0, #1
 801006a:	bfda      	itte	le
 801006c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010070:	9309      	strle	r3, [sp, #36]	; 0x24
 8010072:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8010076:	f10b 0b01 	add.w	fp, fp, #1
 801007a:	9015      	str	r0, [sp, #84]	; 0x54
 801007c:	e7c1      	b.n	8010002 <_strtod_l+0x152>
 801007e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010080:	1c5a      	adds	r2, r3, #1
 8010082:	9215      	str	r2, [sp, #84]	; 0x54
 8010084:	785a      	ldrb	r2, [r3, #1]
 8010086:	f1bb 0f00 	cmp.w	fp, #0
 801008a:	d037      	beq.n	80100fc <_strtod_l+0x24c>
 801008c:	9005      	str	r0, [sp, #20]
 801008e:	465e      	mov	r6, fp
 8010090:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010094:	2b09      	cmp	r3, #9
 8010096:	d912      	bls.n	80100be <_strtod_l+0x20e>
 8010098:	2301      	movs	r3, #1
 801009a:	e7c4      	b.n	8010026 <_strtod_l+0x176>
 801009c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801009e:	1c5a      	adds	r2, r3, #1
 80100a0:	9215      	str	r2, [sp, #84]	; 0x54
 80100a2:	785a      	ldrb	r2, [r3, #1]
 80100a4:	3001      	adds	r0, #1
 80100a6:	2a30      	cmp	r2, #48	; 0x30
 80100a8:	d0f8      	beq.n	801009c <_strtod_l+0x1ec>
 80100aa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80100ae:	2b08      	cmp	r3, #8
 80100b0:	f200 84c1 	bhi.w	8010a36 <_strtod_l+0xb86>
 80100b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80100b6:	9005      	str	r0, [sp, #20]
 80100b8:	2000      	movs	r0, #0
 80100ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80100bc:	4606      	mov	r6, r0
 80100be:	3a30      	subs	r2, #48	; 0x30
 80100c0:	f100 0301 	add.w	r3, r0, #1
 80100c4:	d014      	beq.n	80100f0 <_strtod_l+0x240>
 80100c6:	9905      	ldr	r1, [sp, #20]
 80100c8:	4419      	add	r1, r3
 80100ca:	9105      	str	r1, [sp, #20]
 80100cc:	4633      	mov	r3, r6
 80100ce:	eb00 0c06 	add.w	ip, r0, r6
 80100d2:	210a      	movs	r1, #10
 80100d4:	4563      	cmp	r3, ip
 80100d6:	d113      	bne.n	8010100 <_strtod_l+0x250>
 80100d8:	1833      	adds	r3, r6, r0
 80100da:	2b08      	cmp	r3, #8
 80100dc:	f106 0601 	add.w	r6, r6, #1
 80100e0:	4406      	add	r6, r0
 80100e2:	dc1a      	bgt.n	801011a <_strtod_l+0x26a>
 80100e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80100e6:	230a      	movs	r3, #10
 80100e8:	fb03 2301 	mla	r3, r3, r1, r2
 80100ec:	9309      	str	r3, [sp, #36]	; 0x24
 80100ee:	2300      	movs	r3, #0
 80100f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80100f2:	1c51      	adds	r1, r2, #1
 80100f4:	9115      	str	r1, [sp, #84]	; 0x54
 80100f6:	7852      	ldrb	r2, [r2, #1]
 80100f8:	4618      	mov	r0, r3
 80100fa:	e7c9      	b.n	8010090 <_strtod_l+0x1e0>
 80100fc:	4658      	mov	r0, fp
 80100fe:	e7d2      	b.n	80100a6 <_strtod_l+0x1f6>
 8010100:	2b08      	cmp	r3, #8
 8010102:	f103 0301 	add.w	r3, r3, #1
 8010106:	dc03      	bgt.n	8010110 <_strtod_l+0x260>
 8010108:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801010a:	434f      	muls	r7, r1
 801010c:	9709      	str	r7, [sp, #36]	; 0x24
 801010e:	e7e1      	b.n	80100d4 <_strtod_l+0x224>
 8010110:	2b10      	cmp	r3, #16
 8010112:	bfd8      	it	le
 8010114:	fb01 fa0a 	mulle.w	sl, r1, sl
 8010118:	e7dc      	b.n	80100d4 <_strtod_l+0x224>
 801011a:	2e10      	cmp	r6, #16
 801011c:	bfdc      	itt	le
 801011e:	230a      	movle	r3, #10
 8010120:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8010124:	e7e3      	b.n	80100ee <_strtod_l+0x23e>
 8010126:	2300      	movs	r3, #0
 8010128:	9305      	str	r3, [sp, #20]
 801012a:	2301      	movs	r3, #1
 801012c:	e780      	b.n	8010030 <_strtod_l+0x180>
 801012e:	f04f 0c00 	mov.w	ip, #0
 8010132:	1caa      	adds	r2, r5, #2
 8010134:	9215      	str	r2, [sp, #84]	; 0x54
 8010136:	78aa      	ldrb	r2, [r5, #2]
 8010138:	e788      	b.n	801004c <_strtod_l+0x19c>
 801013a:	f04f 0c01 	mov.w	ip, #1
 801013e:	e7f8      	b.n	8010132 <_strtod_l+0x282>
 8010140:	08012840 	.word	0x08012840
 8010144:	0801283c 	.word	0x0801283c
 8010148:	7ff00000 	.word	0x7ff00000
 801014c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801014e:	1c51      	adds	r1, r2, #1
 8010150:	9115      	str	r1, [sp, #84]	; 0x54
 8010152:	7852      	ldrb	r2, [r2, #1]
 8010154:	2a30      	cmp	r2, #48	; 0x30
 8010156:	d0f9      	beq.n	801014c <_strtod_l+0x29c>
 8010158:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801015c:	2908      	cmp	r1, #8
 801015e:	f63f af7a 	bhi.w	8010056 <_strtod_l+0x1a6>
 8010162:	3a30      	subs	r2, #48	; 0x30
 8010164:	9208      	str	r2, [sp, #32]
 8010166:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010168:	920c      	str	r2, [sp, #48]	; 0x30
 801016a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801016c:	1c57      	adds	r7, r2, #1
 801016e:	9715      	str	r7, [sp, #84]	; 0x54
 8010170:	7852      	ldrb	r2, [r2, #1]
 8010172:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010176:	f1be 0f09 	cmp.w	lr, #9
 801017a:	d938      	bls.n	80101ee <_strtod_l+0x33e>
 801017c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801017e:	1a7f      	subs	r7, r7, r1
 8010180:	2f08      	cmp	r7, #8
 8010182:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8010186:	dc03      	bgt.n	8010190 <_strtod_l+0x2e0>
 8010188:	9908      	ldr	r1, [sp, #32]
 801018a:	428f      	cmp	r7, r1
 801018c:	bfa8      	it	ge
 801018e:	460f      	movge	r7, r1
 8010190:	f1bc 0f00 	cmp.w	ip, #0
 8010194:	d000      	beq.n	8010198 <_strtod_l+0x2e8>
 8010196:	427f      	negs	r7, r7
 8010198:	2e00      	cmp	r6, #0
 801019a:	d14f      	bne.n	801023c <_strtod_l+0x38c>
 801019c:	9904      	ldr	r1, [sp, #16]
 801019e:	4301      	orrs	r1, r0
 80101a0:	f47f aec1 	bne.w	800ff26 <_strtod_l+0x76>
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	f47f aedb 	bne.w	800ff60 <_strtod_l+0xb0>
 80101aa:	2a69      	cmp	r2, #105	; 0x69
 80101ac:	d029      	beq.n	8010202 <_strtod_l+0x352>
 80101ae:	dc26      	bgt.n	80101fe <_strtod_l+0x34e>
 80101b0:	2a49      	cmp	r2, #73	; 0x49
 80101b2:	d026      	beq.n	8010202 <_strtod_l+0x352>
 80101b4:	2a4e      	cmp	r2, #78	; 0x4e
 80101b6:	f47f aed3 	bne.w	800ff60 <_strtod_l+0xb0>
 80101ba:	499b      	ldr	r1, [pc, #620]	; (8010428 <_strtod_l+0x578>)
 80101bc:	a815      	add	r0, sp, #84	; 0x54
 80101be:	f001 fda7 	bl	8011d10 <__match>
 80101c2:	2800      	cmp	r0, #0
 80101c4:	f43f aecc 	beq.w	800ff60 <_strtod_l+0xb0>
 80101c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101ca:	781b      	ldrb	r3, [r3, #0]
 80101cc:	2b28      	cmp	r3, #40	; 0x28
 80101ce:	d12f      	bne.n	8010230 <_strtod_l+0x380>
 80101d0:	4996      	ldr	r1, [pc, #600]	; (801042c <_strtod_l+0x57c>)
 80101d2:	aa18      	add	r2, sp, #96	; 0x60
 80101d4:	a815      	add	r0, sp, #84	; 0x54
 80101d6:	f001 fdaf 	bl	8011d38 <__hexnan>
 80101da:	2805      	cmp	r0, #5
 80101dc:	d128      	bne.n	8010230 <_strtod_l+0x380>
 80101de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80101e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80101e4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80101e8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80101ec:	e69b      	b.n	800ff26 <_strtod_l+0x76>
 80101ee:	9f08      	ldr	r7, [sp, #32]
 80101f0:	210a      	movs	r1, #10
 80101f2:	fb01 2107 	mla	r1, r1, r7, r2
 80101f6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80101fa:	9208      	str	r2, [sp, #32]
 80101fc:	e7b5      	b.n	801016a <_strtod_l+0x2ba>
 80101fe:	2a6e      	cmp	r2, #110	; 0x6e
 8010200:	e7d9      	b.n	80101b6 <_strtod_l+0x306>
 8010202:	498b      	ldr	r1, [pc, #556]	; (8010430 <_strtod_l+0x580>)
 8010204:	a815      	add	r0, sp, #84	; 0x54
 8010206:	f001 fd83 	bl	8011d10 <__match>
 801020a:	2800      	cmp	r0, #0
 801020c:	f43f aea8 	beq.w	800ff60 <_strtod_l+0xb0>
 8010210:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010212:	4988      	ldr	r1, [pc, #544]	; (8010434 <_strtod_l+0x584>)
 8010214:	3b01      	subs	r3, #1
 8010216:	a815      	add	r0, sp, #84	; 0x54
 8010218:	9315      	str	r3, [sp, #84]	; 0x54
 801021a:	f001 fd79 	bl	8011d10 <__match>
 801021e:	b910      	cbnz	r0, 8010226 <_strtod_l+0x376>
 8010220:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010222:	3301      	adds	r3, #1
 8010224:	9315      	str	r3, [sp, #84]	; 0x54
 8010226:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8010444 <_strtod_l+0x594>
 801022a:	f04f 0800 	mov.w	r8, #0
 801022e:	e67a      	b.n	800ff26 <_strtod_l+0x76>
 8010230:	4881      	ldr	r0, [pc, #516]	; (8010438 <_strtod_l+0x588>)
 8010232:	f001 fa89 	bl	8011748 <nan>
 8010236:	ec59 8b10 	vmov	r8, r9, d0
 801023a:	e674      	b.n	800ff26 <_strtod_l+0x76>
 801023c:	9b05      	ldr	r3, [sp, #20]
 801023e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010240:	1afb      	subs	r3, r7, r3
 8010242:	f1bb 0f00 	cmp.w	fp, #0
 8010246:	bf08      	it	eq
 8010248:	46b3      	moveq	fp, r6
 801024a:	2e10      	cmp	r6, #16
 801024c:	9308      	str	r3, [sp, #32]
 801024e:	4635      	mov	r5, r6
 8010250:	bfa8      	it	ge
 8010252:	2510      	movge	r5, #16
 8010254:	f7f0 f956 	bl	8000504 <__aeabi_ui2d>
 8010258:	2e09      	cmp	r6, #9
 801025a:	4680      	mov	r8, r0
 801025c:	4689      	mov	r9, r1
 801025e:	dd13      	ble.n	8010288 <_strtod_l+0x3d8>
 8010260:	4b76      	ldr	r3, [pc, #472]	; (801043c <_strtod_l+0x58c>)
 8010262:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010266:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801026a:	f7f0 f9c5 	bl	80005f8 <__aeabi_dmul>
 801026e:	4680      	mov	r8, r0
 8010270:	4650      	mov	r0, sl
 8010272:	4689      	mov	r9, r1
 8010274:	f7f0 f946 	bl	8000504 <__aeabi_ui2d>
 8010278:	4602      	mov	r2, r0
 801027a:	460b      	mov	r3, r1
 801027c:	4640      	mov	r0, r8
 801027e:	4649      	mov	r1, r9
 8010280:	f7f0 f804 	bl	800028c <__adddf3>
 8010284:	4680      	mov	r8, r0
 8010286:	4689      	mov	r9, r1
 8010288:	2e0f      	cmp	r6, #15
 801028a:	dc38      	bgt.n	80102fe <_strtod_l+0x44e>
 801028c:	9b08      	ldr	r3, [sp, #32]
 801028e:	2b00      	cmp	r3, #0
 8010290:	f43f ae49 	beq.w	800ff26 <_strtod_l+0x76>
 8010294:	dd24      	ble.n	80102e0 <_strtod_l+0x430>
 8010296:	2b16      	cmp	r3, #22
 8010298:	dc0b      	bgt.n	80102b2 <_strtod_l+0x402>
 801029a:	4968      	ldr	r1, [pc, #416]	; (801043c <_strtod_l+0x58c>)
 801029c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80102a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102a4:	4642      	mov	r2, r8
 80102a6:	464b      	mov	r3, r9
 80102a8:	f7f0 f9a6 	bl	80005f8 <__aeabi_dmul>
 80102ac:	4680      	mov	r8, r0
 80102ae:	4689      	mov	r9, r1
 80102b0:	e639      	b.n	800ff26 <_strtod_l+0x76>
 80102b2:	9a08      	ldr	r2, [sp, #32]
 80102b4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80102b8:	4293      	cmp	r3, r2
 80102ba:	db20      	blt.n	80102fe <_strtod_l+0x44e>
 80102bc:	4c5f      	ldr	r4, [pc, #380]	; (801043c <_strtod_l+0x58c>)
 80102be:	f1c6 060f 	rsb	r6, r6, #15
 80102c2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80102c6:	4642      	mov	r2, r8
 80102c8:	464b      	mov	r3, r9
 80102ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102ce:	f7f0 f993 	bl	80005f8 <__aeabi_dmul>
 80102d2:	9b08      	ldr	r3, [sp, #32]
 80102d4:	1b9e      	subs	r6, r3, r6
 80102d6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80102da:	e9d4 2300 	ldrd	r2, r3, [r4]
 80102de:	e7e3      	b.n	80102a8 <_strtod_l+0x3f8>
 80102e0:	9b08      	ldr	r3, [sp, #32]
 80102e2:	3316      	adds	r3, #22
 80102e4:	db0b      	blt.n	80102fe <_strtod_l+0x44e>
 80102e6:	9b05      	ldr	r3, [sp, #20]
 80102e8:	1bdf      	subs	r7, r3, r7
 80102ea:	4b54      	ldr	r3, [pc, #336]	; (801043c <_strtod_l+0x58c>)
 80102ec:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80102f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102f4:	4640      	mov	r0, r8
 80102f6:	4649      	mov	r1, r9
 80102f8:	f7f0 faa8 	bl	800084c <__aeabi_ddiv>
 80102fc:	e7d6      	b.n	80102ac <_strtod_l+0x3fc>
 80102fe:	9b08      	ldr	r3, [sp, #32]
 8010300:	1b75      	subs	r5, r6, r5
 8010302:	441d      	add	r5, r3
 8010304:	2d00      	cmp	r5, #0
 8010306:	dd70      	ble.n	80103ea <_strtod_l+0x53a>
 8010308:	f015 030f 	ands.w	r3, r5, #15
 801030c:	d00a      	beq.n	8010324 <_strtod_l+0x474>
 801030e:	494b      	ldr	r1, [pc, #300]	; (801043c <_strtod_l+0x58c>)
 8010310:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010314:	4642      	mov	r2, r8
 8010316:	464b      	mov	r3, r9
 8010318:	e9d1 0100 	ldrd	r0, r1, [r1]
 801031c:	f7f0 f96c 	bl	80005f8 <__aeabi_dmul>
 8010320:	4680      	mov	r8, r0
 8010322:	4689      	mov	r9, r1
 8010324:	f035 050f 	bics.w	r5, r5, #15
 8010328:	d04d      	beq.n	80103c6 <_strtod_l+0x516>
 801032a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801032e:	dd22      	ble.n	8010376 <_strtod_l+0x4c6>
 8010330:	2500      	movs	r5, #0
 8010332:	46ab      	mov	fp, r5
 8010334:	9509      	str	r5, [sp, #36]	; 0x24
 8010336:	9505      	str	r5, [sp, #20]
 8010338:	2322      	movs	r3, #34	; 0x22
 801033a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8010444 <_strtod_l+0x594>
 801033e:	6023      	str	r3, [r4, #0]
 8010340:	f04f 0800 	mov.w	r8, #0
 8010344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010346:	2b00      	cmp	r3, #0
 8010348:	f43f aded 	beq.w	800ff26 <_strtod_l+0x76>
 801034c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801034e:	4620      	mov	r0, r4
 8010350:	f7ff f924 	bl	800f59c <_Bfree>
 8010354:	9905      	ldr	r1, [sp, #20]
 8010356:	4620      	mov	r0, r4
 8010358:	f7ff f920 	bl	800f59c <_Bfree>
 801035c:	4659      	mov	r1, fp
 801035e:	4620      	mov	r0, r4
 8010360:	f7ff f91c 	bl	800f59c <_Bfree>
 8010364:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010366:	4620      	mov	r0, r4
 8010368:	f7ff f918 	bl	800f59c <_Bfree>
 801036c:	4629      	mov	r1, r5
 801036e:	4620      	mov	r0, r4
 8010370:	f7ff f914 	bl	800f59c <_Bfree>
 8010374:	e5d7      	b.n	800ff26 <_strtod_l+0x76>
 8010376:	4b32      	ldr	r3, [pc, #200]	; (8010440 <_strtod_l+0x590>)
 8010378:	9304      	str	r3, [sp, #16]
 801037a:	2300      	movs	r3, #0
 801037c:	112d      	asrs	r5, r5, #4
 801037e:	4640      	mov	r0, r8
 8010380:	4649      	mov	r1, r9
 8010382:	469a      	mov	sl, r3
 8010384:	2d01      	cmp	r5, #1
 8010386:	dc21      	bgt.n	80103cc <_strtod_l+0x51c>
 8010388:	b10b      	cbz	r3, 801038e <_strtod_l+0x4de>
 801038a:	4680      	mov	r8, r0
 801038c:	4689      	mov	r9, r1
 801038e:	492c      	ldr	r1, [pc, #176]	; (8010440 <_strtod_l+0x590>)
 8010390:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8010394:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8010398:	4642      	mov	r2, r8
 801039a:	464b      	mov	r3, r9
 801039c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103a0:	f7f0 f92a 	bl	80005f8 <__aeabi_dmul>
 80103a4:	4b27      	ldr	r3, [pc, #156]	; (8010444 <_strtod_l+0x594>)
 80103a6:	460a      	mov	r2, r1
 80103a8:	400b      	ands	r3, r1
 80103aa:	4927      	ldr	r1, [pc, #156]	; (8010448 <_strtod_l+0x598>)
 80103ac:	428b      	cmp	r3, r1
 80103ae:	4680      	mov	r8, r0
 80103b0:	d8be      	bhi.n	8010330 <_strtod_l+0x480>
 80103b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80103b6:	428b      	cmp	r3, r1
 80103b8:	bf86      	itte	hi
 80103ba:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801044c <_strtod_l+0x59c>
 80103be:	f04f 38ff 	movhi.w	r8, #4294967295
 80103c2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80103c6:	2300      	movs	r3, #0
 80103c8:	9304      	str	r3, [sp, #16]
 80103ca:	e07b      	b.n	80104c4 <_strtod_l+0x614>
 80103cc:	07ea      	lsls	r2, r5, #31
 80103ce:	d505      	bpl.n	80103dc <_strtod_l+0x52c>
 80103d0:	9b04      	ldr	r3, [sp, #16]
 80103d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d6:	f7f0 f90f 	bl	80005f8 <__aeabi_dmul>
 80103da:	2301      	movs	r3, #1
 80103dc:	9a04      	ldr	r2, [sp, #16]
 80103de:	3208      	adds	r2, #8
 80103e0:	f10a 0a01 	add.w	sl, sl, #1
 80103e4:	106d      	asrs	r5, r5, #1
 80103e6:	9204      	str	r2, [sp, #16]
 80103e8:	e7cc      	b.n	8010384 <_strtod_l+0x4d4>
 80103ea:	d0ec      	beq.n	80103c6 <_strtod_l+0x516>
 80103ec:	426d      	negs	r5, r5
 80103ee:	f015 020f 	ands.w	r2, r5, #15
 80103f2:	d00a      	beq.n	801040a <_strtod_l+0x55a>
 80103f4:	4b11      	ldr	r3, [pc, #68]	; (801043c <_strtod_l+0x58c>)
 80103f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80103fa:	4640      	mov	r0, r8
 80103fc:	4649      	mov	r1, r9
 80103fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010402:	f7f0 fa23 	bl	800084c <__aeabi_ddiv>
 8010406:	4680      	mov	r8, r0
 8010408:	4689      	mov	r9, r1
 801040a:	112d      	asrs	r5, r5, #4
 801040c:	d0db      	beq.n	80103c6 <_strtod_l+0x516>
 801040e:	2d1f      	cmp	r5, #31
 8010410:	dd1e      	ble.n	8010450 <_strtod_l+0x5a0>
 8010412:	2500      	movs	r5, #0
 8010414:	46ab      	mov	fp, r5
 8010416:	9509      	str	r5, [sp, #36]	; 0x24
 8010418:	9505      	str	r5, [sp, #20]
 801041a:	2322      	movs	r3, #34	; 0x22
 801041c:	f04f 0800 	mov.w	r8, #0
 8010420:	f04f 0900 	mov.w	r9, #0
 8010424:	6023      	str	r3, [r4, #0]
 8010426:	e78d      	b.n	8010344 <_strtod_l+0x494>
 8010428:	08012629 	.word	0x08012629
 801042c:	08012854 	.word	0x08012854
 8010430:	08012621 	.word	0x08012621
 8010434:	08012656 	.word	0x08012656
 8010438:	08012a00 	.word	0x08012a00
 801043c:	08012768 	.word	0x08012768
 8010440:	08012740 	.word	0x08012740
 8010444:	7ff00000 	.word	0x7ff00000
 8010448:	7ca00000 	.word	0x7ca00000
 801044c:	7fefffff 	.word	0x7fefffff
 8010450:	f015 0310 	ands.w	r3, r5, #16
 8010454:	bf18      	it	ne
 8010456:	236a      	movne	r3, #106	; 0x6a
 8010458:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80107fc <_strtod_l+0x94c>
 801045c:	9304      	str	r3, [sp, #16]
 801045e:	4640      	mov	r0, r8
 8010460:	4649      	mov	r1, r9
 8010462:	2300      	movs	r3, #0
 8010464:	07ea      	lsls	r2, r5, #31
 8010466:	d504      	bpl.n	8010472 <_strtod_l+0x5c2>
 8010468:	e9da 2300 	ldrd	r2, r3, [sl]
 801046c:	f7f0 f8c4 	bl	80005f8 <__aeabi_dmul>
 8010470:	2301      	movs	r3, #1
 8010472:	106d      	asrs	r5, r5, #1
 8010474:	f10a 0a08 	add.w	sl, sl, #8
 8010478:	d1f4      	bne.n	8010464 <_strtod_l+0x5b4>
 801047a:	b10b      	cbz	r3, 8010480 <_strtod_l+0x5d0>
 801047c:	4680      	mov	r8, r0
 801047e:	4689      	mov	r9, r1
 8010480:	9b04      	ldr	r3, [sp, #16]
 8010482:	b1bb      	cbz	r3, 80104b4 <_strtod_l+0x604>
 8010484:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8010488:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801048c:	2b00      	cmp	r3, #0
 801048e:	4649      	mov	r1, r9
 8010490:	dd10      	ble.n	80104b4 <_strtod_l+0x604>
 8010492:	2b1f      	cmp	r3, #31
 8010494:	f340 811e 	ble.w	80106d4 <_strtod_l+0x824>
 8010498:	2b34      	cmp	r3, #52	; 0x34
 801049a:	bfde      	ittt	le
 801049c:	f04f 33ff 	movle.w	r3, #4294967295
 80104a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80104a4:	4093      	lslle	r3, r2
 80104a6:	f04f 0800 	mov.w	r8, #0
 80104aa:	bfcc      	ite	gt
 80104ac:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80104b0:	ea03 0901 	andle.w	r9, r3, r1
 80104b4:	2200      	movs	r2, #0
 80104b6:	2300      	movs	r3, #0
 80104b8:	4640      	mov	r0, r8
 80104ba:	4649      	mov	r1, r9
 80104bc:	f7f0 fb04 	bl	8000ac8 <__aeabi_dcmpeq>
 80104c0:	2800      	cmp	r0, #0
 80104c2:	d1a6      	bne.n	8010412 <_strtod_l+0x562>
 80104c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104c6:	9300      	str	r3, [sp, #0]
 80104c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80104ca:	4633      	mov	r3, r6
 80104cc:	465a      	mov	r2, fp
 80104ce:	4620      	mov	r0, r4
 80104d0:	f7ff f8cc 	bl	800f66c <__s2b>
 80104d4:	9009      	str	r0, [sp, #36]	; 0x24
 80104d6:	2800      	cmp	r0, #0
 80104d8:	f43f af2a 	beq.w	8010330 <_strtod_l+0x480>
 80104dc:	9a08      	ldr	r2, [sp, #32]
 80104de:	9b05      	ldr	r3, [sp, #20]
 80104e0:	2a00      	cmp	r2, #0
 80104e2:	eba3 0307 	sub.w	r3, r3, r7
 80104e6:	bfa8      	it	ge
 80104e8:	2300      	movge	r3, #0
 80104ea:	930c      	str	r3, [sp, #48]	; 0x30
 80104ec:	2500      	movs	r5, #0
 80104ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80104f2:	9312      	str	r3, [sp, #72]	; 0x48
 80104f4:	46ab      	mov	fp, r5
 80104f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104f8:	4620      	mov	r0, r4
 80104fa:	6859      	ldr	r1, [r3, #4]
 80104fc:	f7ff f80e 	bl	800f51c <_Balloc>
 8010500:	9005      	str	r0, [sp, #20]
 8010502:	2800      	cmp	r0, #0
 8010504:	f43f af18 	beq.w	8010338 <_strtod_l+0x488>
 8010508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801050a:	691a      	ldr	r2, [r3, #16]
 801050c:	3202      	adds	r2, #2
 801050e:	f103 010c 	add.w	r1, r3, #12
 8010512:	0092      	lsls	r2, r2, #2
 8010514:	300c      	adds	r0, #12
 8010516:	f7fe f924 	bl	800e762 <memcpy>
 801051a:	ec49 8b10 	vmov	d0, r8, r9
 801051e:	aa18      	add	r2, sp, #96	; 0x60
 8010520:	a917      	add	r1, sp, #92	; 0x5c
 8010522:	4620      	mov	r0, r4
 8010524:	f7ff fbd6 	bl	800fcd4 <__d2b>
 8010528:	ec49 8b18 	vmov	d8, r8, r9
 801052c:	9016      	str	r0, [sp, #88]	; 0x58
 801052e:	2800      	cmp	r0, #0
 8010530:	f43f af02 	beq.w	8010338 <_strtod_l+0x488>
 8010534:	2101      	movs	r1, #1
 8010536:	4620      	mov	r0, r4
 8010538:	f7ff f930 	bl	800f79c <__i2b>
 801053c:	4683      	mov	fp, r0
 801053e:	2800      	cmp	r0, #0
 8010540:	f43f aefa 	beq.w	8010338 <_strtod_l+0x488>
 8010544:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010546:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010548:	2e00      	cmp	r6, #0
 801054a:	bfab      	itete	ge
 801054c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801054e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8010550:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010552:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8010556:	bfac      	ite	ge
 8010558:	eb06 0a03 	addge.w	sl, r6, r3
 801055c:	1b9f      	sublt	r7, r3, r6
 801055e:	9b04      	ldr	r3, [sp, #16]
 8010560:	1af6      	subs	r6, r6, r3
 8010562:	4416      	add	r6, r2
 8010564:	4ba0      	ldr	r3, [pc, #640]	; (80107e8 <_strtod_l+0x938>)
 8010566:	3e01      	subs	r6, #1
 8010568:	429e      	cmp	r6, r3
 801056a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801056e:	f280 80c4 	bge.w	80106fa <_strtod_l+0x84a>
 8010572:	1b9b      	subs	r3, r3, r6
 8010574:	2b1f      	cmp	r3, #31
 8010576:	eba2 0203 	sub.w	r2, r2, r3
 801057a:	f04f 0101 	mov.w	r1, #1
 801057e:	f300 80b0 	bgt.w	80106e2 <_strtod_l+0x832>
 8010582:	fa01 f303 	lsl.w	r3, r1, r3
 8010586:	930e      	str	r3, [sp, #56]	; 0x38
 8010588:	2300      	movs	r3, #0
 801058a:	930d      	str	r3, [sp, #52]	; 0x34
 801058c:	eb0a 0602 	add.w	r6, sl, r2
 8010590:	9b04      	ldr	r3, [sp, #16]
 8010592:	45b2      	cmp	sl, r6
 8010594:	4417      	add	r7, r2
 8010596:	441f      	add	r7, r3
 8010598:	4653      	mov	r3, sl
 801059a:	bfa8      	it	ge
 801059c:	4633      	movge	r3, r6
 801059e:	42bb      	cmp	r3, r7
 80105a0:	bfa8      	it	ge
 80105a2:	463b      	movge	r3, r7
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	bfc2      	ittt	gt
 80105a8:	1af6      	subgt	r6, r6, r3
 80105aa:	1aff      	subgt	r7, r7, r3
 80105ac:	ebaa 0a03 	subgt.w	sl, sl, r3
 80105b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	dd17      	ble.n	80105e6 <_strtod_l+0x736>
 80105b6:	4659      	mov	r1, fp
 80105b8:	461a      	mov	r2, r3
 80105ba:	4620      	mov	r0, r4
 80105bc:	f7ff f9ae 	bl	800f91c <__pow5mult>
 80105c0:	4683      	mov	fp, r0
 80105c2:	2800      	cmp	r0, #0
 80105c4:	f43f aeb8 	beq.w	8010338 <_strtod_l+0x488>
 80105c8:	4601      	mov	r1, r0
 80105ca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80105cc:	4620      	mov	r0, r4
 80105ce:	f7ff f8fb 	bl	800f7c8 <__multiply>
 80105d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80105d4:	2800      	cmp	r0, #0
 80105d6:	f43f aeaf 	beq.w	8010338 <_strtod_l+0x488>
 80105da:	9916      	ldr	r1, [sp, #88]	; 0x58
 80105dc:	4620      	mov	r0, r4
 80105de:	f7fe ffdd 	bl	800f59c <_Bfree>
 80105e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105e4:	9316      	str	r3, [sp, #88]	; 0x58
 80105e6:	2e00      	cmp	r6, #0
 80105e8:	f300 808c 	bgt.w	8010704 <_strtod_l+0x854>
 80105ec:	9b08      	ldr	r3, [sp, #32]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	dd08      	ble.n	8010604 <_strtod_l+0x754>
 80105f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80105f4:	9905      	ldr	r1, [sp, #20]
 80105f6:	4620      	mov	r0, r4
 80105f8:	f7ff f990 	bl	800f91c <__pow5mult>
 80105fc:	9005      	str	r0, [sp, #20]
 80105fe:	2800      	cmp	r0, #0
 8010600:	f43f ae9a 	beq.w	8010338 <_strtod_l+0x488>
 8010604:	2f00      	cmp	r7, #0
 8010606:	dd08      	ble.n	801061a <_strtod_l+0x76a>
 8010608:	9905      	ldr	r1, [sp, #20]
 801060a:	463a      	mov	r2, r7
 801060c:	4620      	mov	r0, r4
 801060e:	f7ff f9df 	bl	800f9d0 <__lshift>
 8010612:	9005      	str	r0, [sp, #20]
 8010614:	2800      	cmp	r0, #0
 8010616:	f43f ae8f 	beq.w	8010338 <_strtod_l+0x488>
 801061a:	f1ba 0f00 	cmp.w	sl, #0
 801061e:	dd08      	ble.n	8010632 <_strtod_l+0x782>
 8010620:	4659      	mov	r1, fp
 8010622:	4652      	mov	r2, sl
 8010624:	4620      	mov	r0, r4
 8010626:	f7ff f9d3 	bl	800f9d0 <__lshift>
 801062a:	4683      	mov	fp, r0
 801062c:	2800      	cmp	r0, #0
 801062e:	f43f ae83 	beq.w	8010338 <_strtod_l+0x488>
 8010632:	9a05      	ldr	r2, [sp, #20]
 8010634:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010636:	4620      	mov	r0, r4
 8010638:	f7ff fa52 	bl	800fae0 <__mdiff>
 801063c:	4605      	mov	r5, r0
 801063e:	2800      	cmp	r0, #0
 8010640:	f43f ae7a 	beq.w	8010338 <_strtod_l+0x488>
 8010644:	68c3      	ldr	r3, [r0, #12]
 8010646:	930b      	str	r3, [sp, #44]	; 0x2c
 8010648:	2300      	movs	r3, #0
 801064a:	60c3      	str	r3, [r0, #12]
 801064c:	4659      	mov	r1, fp
 801064e:	f7ff fa2b 	bl	800faa8 <__mcmp>
 8010652:	2800      	cmp	r0, #0
 8010654:	da60      	bge.n	8010718 <_strtod_l+0x868>
 8010656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010658:	ea53 0308 	orrs.w	r3, r3, r8
 801065c:	f040 8084 	bne.w	8010768 <_strtod_l+0x8b8>
 8010660:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010664:	2b00      	cmp	r3, #0
 8010666:	d17f      	bne.n	8010768 <_strtod_l+0x8b8>
 8010668:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801066c:	0d1b      	lsrs	r3, r3, #20
 801066e:	051b      	lsls	r3, r3, #20
 8010670:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010674:	d978      	bls.n	8010768 <_strtod_l+0x8b8>
 8010676:	696b      	ldr	r3, [r5, #20]
 8010678:	b913      	cbnz	r3, 8010680 <_strtod_l+0x7d0>
 801067a:	692b      	ldr	r3, [r5, #16]
 801067c:	2b01      	cmp	r3, #1
 801067e:	dd73      	ble.n	8010768 <_strtod_l+0x8b8>
 8010680:	4629      	mov	r1, r5
 8010682:	2201      	movs	r2, #1
 8010684:	4620      	mov	r0, r4
 8010686:	f7ff f9a3 	bl	800f9d0 <__lshift>
 801068a:	4659      	mov	r1, fp
 801068c:	4605      	mov	r5, r0
 801068e:	f7ff fa0b 	bl	800faa8 <__mcmp>
 8010692:	2800      	cmp	r0, #0
 8010694:	dd68      	ble.n	8010768 <_strtod_l+0x8b8>
 8010696:	9904      	ldr	r1, [sp, #16]
 8010698:	4a54      	ldr	r2, [pc, #336]	; (80107ec <_strtod_l+0x93c>)
 801069a:	464b      	mov	r3, r9
 801069c:	2900      	cmp	r1, #0
 801069e:	f000 8084 	beq.w	80107aa <_strtod_l+0x8fa>
 80106a2:	ea02 0109 	and.w	r1, r2, r9
 80106a6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80106aa:	dc7e      	bgt.n	80107aa <_strtod_l+0x8fa>
 80106ac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80106b0:	f77f aeb3 	ble.w	801041a <_strtod_l+0x56a>
 80106b4:	4b4e      	ldr	r3, [pc, #312]	; (80107f0 <_strtod_l+0x940>)
 80106b6:	4640      	mov	r0, r8
 80106b8:	4649      	mov	r1, r9
 80106ba:	2200      	movs	r2, #0
 80106bc:	f7ef ff9c 	bl	80005f8 <__aeabi_dmul>
 80106c0:	4b4a      	ldr	r3, [pc, #296]	; (80107ec <_strtod_l+0x93c>)
 80106c2:	400b      	ands	r3, r1
 80106c4:	4680      	mov	r8, r0
 80106c6:	4689      	mov	r9, r1
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	f47f ae3f 	bne.w	801034c <_strtod_l+0x49c>
 80106ce:	2322      	movs	r3, #34	; 0x22
 80106d0:	6023      	str	r3, [r4, #0]
 80106d2:	e63b      	b.n	801034c <_strtod_l+0x49c>
 80106d4:	f04f 32ff 	mov.w	r2, #4294967295
 80106d8:	fa02 f303 	lsl.w	r3, r2, r3
 80106dc:	ea03 0808 	and.w	r8, r3, r8
 80106e0:	e6e8      	b.n	80104b4 <_strtod_l+0x604>
 80106e2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80106e6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80106ea:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80106ee:	36e2      	adds	r6, #226	; 0xe2
 80106f0:	fa01 f306 	lsl.w	r3, r1, r6
 80106f4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80106f8:	e748      	b.n	801058c <_strtod_l+0x6dc>
 80106fa:	2100      	movs	r1, #0
 80106fc:	2301      	movs	r3, #1
 80106fe:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8010702:	e743      	b.n	801058c <_strtod_l+0x6dc>
 8010704:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010706:	4632      	mov	r2, r6
 8010708:	4620      	mov	r0, r4
 801070a:	f7ff f961 	bl	800f9d0 <__lshift>
 801070e:	9016      	str	r0, [sp, #88]	; 0x58
 8010710:	2800      	cmp	r0, #0
 8010712:	f47f af6b 	bne.w	80105ec <_strtod_l+0x73c>
 8010716:	e60f      	b.n	8010338 <_strtod_l+0x488>
 8010718:	46ca      	mov	sl, r9
 801071a:	d171      	bne.n	8010800 <_strtod_l+0x950>
 801071c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801071e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010722:	b352      	cbz	r2, 801077a <_strtod_l+0x8ca>
 8010724:	4a33      	ldr	r2, [pc, #204]	; (80107f4 <_strtod_l+0x944>)
 8010726:	4293      	cmp	r3, r2
 8010728:	d12a      	bne.n	8010780 <_strtod_l+0x8d0>
 801072a:	9b04      	ldr	r3, [sp, #16]
 801072c:	4641      	mov	r1, r8
 801072e:	b1fb      	cbz	r3, 8010770 <_strtod_l+0x8c0>
 8010730:	4b2e      	ldr	r3, [pc, #184]	; (80107ec <_strtod_l+0x93c>)
 8010732:	ea09 0303 	and.w	r3, r9, r3
 8010736:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801073a:	f04f 32ff 	mov.w	r2, #4294967295
 801073e:	d81a      	bhi.n	8010776 <_strtod_l+0x8c6>
 8010740:	0d1b      	lsrs	r3, r3, #20
 8010742:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010746:	fa02 f303 	lsl.w	r3, r2, r3
 801074a:	4299      	cmp	r1, r3
 801074c:	d118      	bne.n	8010780 <_strtod_l+0x8d0>
 801074e:	4b2a      	ldr	r3, [pc, #168]	; (80107f8 <_strtod_l+0x948>)
 8010750:	459a      	cmp	sl, r3
 8010752:	d102      	bne.n	801075a <_strtod_l+0x8aa>
 8010754:	3101      	adds	r1, #1
 8010756:	f43f adef 	beq.w	8010338 <_strtod_l+0x488>
 801075a:	4b24      	ldr	r3, [pc, #144]	; (80107ec <_strtod_l+0x93c>)
 801075c:	ea0a 0303 	and.w	r3, sl, r3
 8010760:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8010764:	f04f 0800 	mov.w	r8, #0
 8010768:	9b04      	ldr	r3, [sp, #16]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d1a2      	bne.n	80106b4 <_strtod_l+0x804>
 801076e:	e5ed      	b.n	801034c <_strtod_l+0x49c>
 8010770:	f04f 33ff 	mov.w	r3, #4294967295
 8010774:	e7e9      	b.n	801074a <_strtod_l+0x89a>
 8010776:	4613      	mov	r3, r2
 8010778:	e7e7      	b.n	801074a <_strtod_l+0x89a>
 801077a:	ea53 0308 	orrs.w	r3, r3, r8
 801077e:	d08a      	beq.n	8010696 <_strtod_l+0x7e6>
 8010780:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010782:	b1e3      	cbz	r3, 80107be <_strtod_l+0x90e>
 8010784:	ea13 0f0a 	tst.w	r3, sl
 8010788:	d0ee      	beq.n	8010768 <_strtod_l+0x8b8>
 801078a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801078c:	9a04      	ldr	r2, [sp, #16]
 801078e:	4640      	mov	r0, r8
 8010790:	4649      	mov	r1, r9
 8010792:	b1c3      	cbz	r3, 80107c6 <_strtod_l+0x916>
 8010794:	f7ff fb6f 	bl	800fe76 <sulp>
 8010798:	4602      	mov	r2, r0
 801079a:	460b      	mov	r3, r1
 801079c:	ec51 0b18 	vmov	r0, r1, d8
 80107a0:	f7ef fd74 	bl	800028c <__adddf3>
 80107a4:	4680      	mov	r8, r0
 80107a6:	4689      	mov	r9, r1
 80107a8:	e7de      	b.n	8010768 <_strtod_l+0x8b8>
 80107aa:	4013      	ands	r3, r2
 80107ac:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80107b0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80107b4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80107b8:	f04f 38ff 	mov.w	r8, #4294967295
 80107bc:	e7d4      	b.n	8010768 <_strtod_l+0x8b8>
 80107be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80107c0:	ea13 0f08 	tst.w	r3, r8
 80107c4:	e7e0      	b.n	8010788 <_strtod_l+0x8d8>
 80107c6:	f7ff fb56 	bl	800fe76 <sulp>
 80107ca:	4602      	mov	r2, r0
 80107cc:	460b      	mov	r3, r1
 80107ce:	ec51 0b18 	vmov	r0, r1, d8
 80107d2:	f7ef fd59 	bl	8000288 <__aeabi_dsub>
 80107d6:	2200      	movs	r2, #0
 80107d8:	2300      	movs	r3, #0
 80107da:	4680      	mov	r8, r0
 80107dc:	4689      	mov	r9, r1
 80107de:	f7f0 f973 	bl	8000ac8 <__aeabi_dcmpeq>
 80107e2:	2800      	cmp	r0, #0
 80107e4:	d0c0      	beq.n	8010768 <_strtod_l+0x8b8>
 80107e6:	e618      	b.n	801041a <_strtod_l+0x56a>
 80107e8:	fffffc02 	.word	0xfffffc02
 80107ec:	7ff00000 	.word	0x7ff00000
 80107f0:	39500000 	.word	0x39500000
 80107f4:	000fffff 	.word	0x000fffff
 80107f8:	7fefffff 	.word	0x7fefffff
 80107fc:	08012868 	.word	0x08012868
 8010800:	4659      	mov	r1, fp
 8010802:	4628      	mov	r0, r5
 8010804:	f7ff fac0 	bl	800fd88 <__ratio>
 8010808:	ec57 6b10 	vmov	r6, r7, d0
 801080c:	ee10 0a10 	vmov	r0, s0
 8010810:	2200      	movs	r2, #0
 8010812:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010816:	4639      	mov	r1, r7
 8010818:	f7f0 f96a 	bl	8000af0 <__aeabi_dcmple>
 801081c:	2800      	cmp	r0, #0
 801081e:	d071      	beq.n	8010904 <_strtod_l+0xa54>
 8010820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010822:	2b00      	cmp	r3, #0
 8010824:	d17c      	bne.n	8010920 <_strtod_l+0xa70>
 8010826:	f1b8 0f00 	cmp.w	r8, #0
 801082a:	d15a      	bne.n	80108e2 <_strtod_l+0xa32>
 801082c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010830:	2b00      	cmp	r3, #0
 8010832:	d15d      	bne.n	80108f0 <_strtod_l+0xa40>
 8010834:	4b90      	ldr	r3, [pc, #576]	; (8010a78 <_strtod_l+0xbc8>)
 8010836:	2200      	movs	r2, #0
 8010838:	4630      	mov	r0, r6
 801083a:	4639      	mov	r1, r7
 801083c:	f7f0 f94e 	bl	8000adc <__aeabi_dcmplt>
 8010840:	2800      	cmp	r0, #0
 8010842:	d15c      	bne.n	80108fe <_strtod_l+0xa4e>
 8010844:	4630      	mov	r0, r6
 8010846:	4639      	mov	r1, r7
 8010848:	4b8c      	ldr	r3, [pc, #560]	; (8010a7c <_strtod_l+0xbcc>)
 801084a:	2200      	movs	r2, #0
 801084c:	f7ef fed4 	bl	80005f8 <__aeabi_dmul>
 8010850:	4606      	mov	r6, r0
 8010852:	460f      	mov	r7, r1
 8010854:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8010858:	9606      	str	r6, [sp, #24]
 801085a:	9307      	str	r3, [sp, #28]
 801085c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010860:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8010864:	4b86      	ldr	r3, [pc, #536]	; (8010a80 <_strtod_l+0xbd0>)
 8010866:	ea0a 0303 	and.w	r3, sl, r3
 801086a:	930d      	str	r3, [sp, #52]	; 0x34
 801086c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801086e:	4b85      	ldr	r3, [pc, #532]	; (8010a84 <_strtod_l+0xbd4>)
 8010870:	429a      	cmp	r2, r3
 8010872:	f040 8090 	bne.w	8010996 <_strtod_l+0xae6>
 8010876:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801087a:	ec49 8b10 	vmov	d0, r8, r9
 801087e:	f7ff f9b9 	bl	800fbf4 <__ulp>
 8010882:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010886:	ec51 0b10 	vmov	r0, r1, d0
 801088a:	f7ef feb5 	bl	80005f8 <__aeabi_dmul>
 801088e:	4642      	mov	r2, r8
 8010890:	464b      	mov	r3, r9
 8010892:	f7ef fcfb 	bl	800028c <__adddf3>
 8010896:	460b      	mov	r3, r1
 8010898:	4979      	ldr	r1, [pc, #484]	; (8010a80 <_strtod_l+0xbd0>)
 801089a:	4a7b      	ldr	r2, [pc, #492]	; (8010a88 <_strtod_l+0xbd8>)
 801089c:	4019      	ands	r1, r3
 801089e:	4291      	cmp	r1, r2
 80108a0:	4680      	mov	r8, r0
 80108a2:	d944      	bls.n	801092e <_strtod_l+0xa7e>
 80108a4:	ee18 2a90 	vmov	r2, s17
 80108a8:	4b78      	ldr	r3, [pc, #480]	; (8010a8c <_strtod_l+0xbdc>)
 80108aa:	429a      	cmp	r2, r3
 80108ac:	d104      	bne.n	80108b8 <_strtod_l+0xa08>
 80108ae:	ee18 3a10 	vmov	r3, s16
 80108b2:	3301      	adds	r3, #1
 80108b4:	f43f ad40 	beq.w	8010338 <_strtod_l+0x488>
 80108b8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8010a8c <_strtod_l+0xbdc>
 80108bc:	f04f 38ff 	mov.w	r8, #4294967295
 80108c0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80108c2:	4620      	mov	r0, r4
 80108c4:	f7fe fe6a 	bl	800f59c <_Bfree>
 80108c8:	9905      	ldr	r1, [sp, #20]
 80108ca:	4620      	mov	r0, r4
 80108cc:	f7fe fe66 	bl	800f59c <_Bfree>
 80108d0:	4659      	mov	r1, fp
 80108d2:	4620      	mov	r0, r4
 80108d4:	f7fe fe62 	bl	800f59c <_Bfree>
 80108d8:	4629      	mov	r1, r5
 80108da:	4620      	mov	r0, r4
 80108dc:	f7fe fe5e 	bl	800f59c <_Bfree>
 80108e0:	e609      	b.n	80104f6 <_strtod_l+0x646>
 80108e2:	f1b8 0f01 	cmp.w	r8, #1
 80108e6:	d103      	bne.n	80108f0 <_strtod_l+0xa40>
 80108e8:	f1b9 0f00 	cmp.w	r9, #0
 80108ec:	f43f ad95 	beq.w	801041a <_strtod_l+0x56a>
 80108f0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8010a48 <_strtod_l+0xb98>
 80108f4:	4f60      	ldr	r7, [pc, #384]	; (8010a78 <_strtod_l+0xbc8>)
 80108f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80108fa:	2600      	movs	r6, #0
 80108fc:	e7ae      	b.n	801085c <_strtod_l+0x9ac>
 80108fe:	4f5f      	ldr	r7, [pc, #380]	; (8010a7c <_strtod_l+0xbcc>)
 8010900:	2600      	movs	r6, #0
 8010902:	e7a7      	b.n	8010854 <_strtod_l+0x9a4>
 8010904:	4b5d      	ldr	r3, [pc, #372]	; (8010a7c <_strtod_l+0xbcc>)
 8010906:	4630      	mov	r0, r6
 8010908:	4639      	mov	r1, r7
 801090a:	2200      	movs	r2, #0
 801090c:	f7ef fe74 	bl	80005f8 <__aeabi_dmul>
 8010910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010912:	4606      	mov	r6, r0
 8010914:	460f      	mov	r7, r1
 8010916:	2b00      	cmp	r3, #0
 8010918:	d09c      	beq.n	8010854 <_strtod_l+0x9a4>
 801091a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801091e:	e79d      	b.n	801085c <_strtod_l+0x9ac>
 8010920:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8010a50 <_strtod_l+0xba0>
 8010924:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010928:	ec57 6b17 	vmov	r6, r7, d7
 801092c:	e796      	b.n	801085c <_strtod_l+0x9ac>
 801092e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8010932:	9b04      	ldr	r3, [sp, #16]
 8010934:	46ca      	mov	sl, r9
 8010936:	2b00      	cmp	r3, #0
 8010938:	d1c2      	bne.n	80108c0 <_strtod_l+0xa10>
 801093a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801093e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010940:	0d1b      	lsrs	r3, r3, #20
 8010942:	051b      	lsls	r3, r3, #20
 8010944:	429a      	cmp	r2, r3
 8010946:	d1bb      	bne.n	80108c0 <_strtod_l+0xa10>
 8010948:	4630      	mov	r0, r6
 801094a:	4639      	mov	r1, r7
 801094c:	f7f0 f9b4 	bl	8000cb8 <__aeabi_d2lz>
 8010950:	f7ef fe24 	bl	800059c <__aeabi_l2d>
 8010954:	4602      	mov	r2, r0
 8010956:	460b      	mov	r3, r1
 8010958:	4630      	mov	r0, r6
 801095a:	4639      	mov	r1, r7
 801095c:	f7ef fc94 	bl	8000288 <__aeabi_dsub>
 8010960:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010962:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010966:	ea43 0308 	orr.w	r3, r3, r8
 801096a:	4313      	orrs	r3, r2
 801096c:	4606      	mov	r6, r0
 801096e:	460f      	mov	r7, r1
 8010970:	d054      	beq.n	8010a1c <_strtod_l+0xb6c>
 8010972:	a339      	add	r3, pc, #228	; (adr r3, 8010a58 <_strtod_l+0xba8>)
 8010974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010978:	f7f0 f8b0 	bl	8000adc <__aeabi_dcmplt>
 801097c:	2800      	cmp	r0, #0
 801097e:	f47f ace5 	bne.w	801034c <_strtod_l+0x49c>
 8010982:	a337      	add	r3, pc, #220	; (adr r3, 8010a60 <_strtod_l+0xbb0>)
 8010984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010988:	4630      	mov	r0, r6
 801098a:	4639      	mov	r1, r7
 801098c:	f7f0 f8c4 	bl	8000b18 <__aeabi_dcmpgt>
 8010990:	2800      	cmp	r0, #0
 8010992:	d095      	beq.n	80108c0 <_strtod_l+0xa10>
 8010994:	e4da      	b.n	801034c <_strtod_l+0x49c>
 8010996:	9b04      	ldr	r3, [sp, #16]
 8010998:	b333      	cbz	r3, 80109e8 <_strtod_l+0xb38>
 801099a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801099c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80109a0:	d822      	bhi.n	80109e8 <_strtod_l+0xb38>
 80109a2:	a331      	add	r3, pc, #196	; (adr r3, 8010a68 <_strtod_l+0xbb8>)
 80109a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109a8:	4630      	mov	r0, r6
 80109aa:	4639      	mov	r1, r7
 80109ac:	f7f0 f8a0 	bl	8000af0 <__aeabi_dcmple>
 80109b0:	b1a0      	cbz	r0, 80109dc <_strtod_l+0xb2c>
 80109b2:	4639      	mov	r1, r7
 80109b4:	4630      	mov	r0, r6
 80109b6:	f7f0 f8f7 	bl	8000ba8 <__aeabi_d2uiz>
 80109ba:	2801      	cmp	r0, #1
 80109bc:	bf38      	it	cc
 80109be:	2001      	movcc	r0, #1
 80109c0:	f7ef fda0 	bl	8000504 <__aeabi_ui2d>
 80109c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109c6:	4606      	mov	r6, r0
 80109c8:	460f      	mov	r7, r1
 80109ca:	bb23      	cbnz	r3, 8010a16 <_strtod_l+0xb66>
 80109cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80109d0:	9010      	str	r0, [sp, #64]	; 0x40
 80109d2:	9311      	str	r3, [sp, #68]	; 0x44
 80109d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80109d8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80109dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80109de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80109e0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80109e4:	1a9b      	subs	r3, r3, r2
 80109e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80109e8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80109ec:	eeb0 0a48 	vmov.f32	s0, s16
 80109f0:	eef0 0a68 	vmov.f32	s1, s17
 80109f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80109f8:	f7ff f8fc 	bl	800fbf4 <__ulp>
 80109fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010a00:	ec53 2b10 	vmov	r2, r3, d0
 8010a04:	f7ef fdf8 	bl	80005f8 <__aeabi_dmul>
 8010a08:	ec53 2b18 	vmov	r2, r3, d8
 8010a0c:	f7ef fc3e 	bl	800028c <__adddf3>
 8010a10:	4680      	mov	r8, r0
 8010a12:	4689      	mov	r9, r1
 8010a14:	e78d      	b.n	8010932 <_strtod_l+0xa82>
 8010a16:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8010a1a:	e7db      	b.n	80109d4 <_strtod_l+0xb24>
 8010a1c:	a314      	add	r3, pc, #80	; (adr r3, 8010a70 <_strtod_l+0xbc0>)
 8010a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a22:	f7f0 f85b 	bl	8000adc <__aeabi_dcmplt>
 8010a26:	e7b3      	b.n	8010990 <_strtod_l+0xae0>
 8010a28:	2300      	movs	r3, #0
 8010a2a:	930a      	str	r3, [sp, #40]	; 0x28
 8010a2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010a2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a30:	6013      	str	r3, [r2, #0]
 8010a32:	f7ff ba7c 	b.w	800ff2e <_strtod_l+0x7e>
 8010a36:	2a65      	cmp	r2, #101	; 0x65
 8010a38:	f43f ab75 	beq.w	8010126 <_strtod_l+0x276>
 8010a3c:	2a45      	cmp	r2, #69	; 0x45
 8010a3e:	f43f ab72 	beq.w	8010126 <_strtod_l+0x276>
 8010a42:	2301      	movs	r3, #1
 8010a44:	f7ff bbaa 	b.w	801019c <_strtod_l+0x2ec>
 8010a48:	00000000 	.word	0x00000000
 8010a4c:	bff00000 	.word	0xbff00000
 8010a50:	00000000 	.word	0x00000000
 8010a54:	3ff00000 	.word	0x3ff00000
 8010a58:	94a03595 	.word	0x94a03595
 8010a5c:	3fdfffff 	.word	0x3fdfffff
 8010a60:	35afe535 	.word	0x35afe535
 8010a64:	3fe00000 	.word	0x3fe00000
 8010a68:	ffc00000 	.word	0xffc00000
 8010a6c:	41dfffff 	.word	0x41dfffff
 8010a70:	94a03595 	.word	0x94a03595
 8010a74:	3fcfffff 	.word	0x3fcfffff
 8010a78:	3ff00000 	.word	0x3ff00000
 8010a7c:	3fe00000 	.word	0x3fe00000
 8010a80:	7ff00000 	.word	0x7ff00000
 8010a84:	7fe00000 	.word	0x7fe00000
 8010a88:	7c9fffff 	.word	0x7c9fffff
 8010a8c:	7fefffff 	.word	0x7fefffff

08010a90 <_strtod_r>:
 8010a90:	4b01      	ldr	r3, [pc, #4]	; (8010a98 <_strtod_r+0x8>)
 8010a92:	f7ff ba0d 	b.w	800feb0 <_strtod_l>
 8010a96:	bf00      	nop
 8010a98:	20000088 	.word	0x20000088

08010a9c <_strtol_l.constprop.0>:
 8010a9c:	2b01      	cmp	r3, #1
 8010a9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010aa2:	d001      	beq.n	8010aa8 <_strtol_l.constprop.0+0xc>
 8010aa4:	2b24      	cmp	r3, #36	; 0x24
 8010aa6:	d906      	bls.n	8010ab6 <_strtol_l.constprop.0+0x1a>
 8010aa8:	f7fd fe2e 	bl	800e708 <__errno>
 8010aac:	2316      	movs	r3, #22
 8010aae:	6003      	str	r3, [r0, #0]
 8010ab0:	2000      	movs	r0, #0
 8010ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ab6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010b9c <_strtol_l.constprop.0+0x100>
 8010aba:	460d      	mov	r5, r1
 8010abc:	462e      	mov	r6, r5
 8010abe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010ac2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8010ac6:	f017 0708 	ands.w	r7, r7, #8
 8010aca:	d1f7      	bne.n	8010abc <_strtol_l.constprop.0+0x20>
 8010acc:	2c2d      	cmp	r4, #45	; 0x2d
 8010ace:	d132      	bne.n	8010b36 <_strtol_l.constprop.0+0x9a>
 8010ad0:	782c      	ldrb	r4, [r5, #0]
 8010ad2:	2701      	movs	r7, #1
 8010ad4:	1cb5      	adds	r5, r6, #2
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d05b      	beq.n	8010b92 <_strtol_l.constprop.0+0xf6>
 8010ada:	2b10      	cmp	r3, #16
 8010adc:	d109      	bne.n	8010af2 <_strtol_l.constprop.0+0x56>
 8010ade:	2c30      	cmp	r4, #48	; 0x30
 8010ae0:	d107      	bne.n	8010af2 <_strtol_l.constprop.0+0x56>
 8010ae2:	782c      	ldrb	r4, [r5, #0]
 8010ae4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010ae8:	2c58      	cmp	r4, #88	; 0x58
 8010aea:	d14d      	bne.n	8010b88 <_strtol_l.constprop.0+0xec>
 8010aec:	786c      	ldrb	r4, [r5, #1]
 8010aee:	2310      	movs	r3, #16
 8010af0:	3502      	adds	r5, #2
 8010af2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010af6:	f108 38ff 	add.w	r8, r8, #4294967295
 8010afa:	f04f 0e00 	mov.w	lr, #0
 8010afe:	fbb8 f9f3 	udiv	r9, r8, r3
 8010b02:	4676      	mov	r6, lr
 8010b04:	fb03 8a19 	mls	sl, r3, r9, r8
 8010b08:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010b0c:	f1bc 0f09 	cmp.w	ip, #9
 8010b10:	d816      	bhi.n	8010b40 <_strtol_l.constprop.0+0xa4>
 8010b12:	4664      	mov	r4, ip
 8010b14:	42a3      	cmp	r3, r4
 8010b16:	dd24      	ble.n	8010b62 <_strtol_l.constprop.0+0xc6>
 8010b18:	f1be 3fff 	cmp.w	lr, #4294967295
 8010b1c:	d008      	beq.n	8010b30 <_strtol_l.constprop.0+0x94>
 8010b1e:	45b1      	cmp	r9, r6
 8010b20:	d31c      	bcc.n	8010b5c <_strtol_l.constprop.0+0xc0>
 8010b22:	d101      	bne.n	8010b28 <_strtol_l.constprop.0+0x8c>
 8010b24:	45a2      	cmp	sl, r4
 8010b26:	db19      	blt.n	8010b5c <_strtol_l.constprop.0+0xc0>
 8010b28:	fb06 4603 	mla	r6, r6, r3, r4
 8010b2c:	f04f 0e01 	mov.w	lr, #1
 8010b30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010b34:	e7e8      	b.n	8010b08 <_strtol_l.constprop.0+0x6c>
 8010b36:	2c2b      	cmp	r4, #43	; 0x2b
 8010b38:	bf04      	itt	eq
 8010b3a:	782c      	ldrbeq	r4, [r5, #0]
 8010b3c:	1cb5      	addeq	r5, r6, #2
 8010b3e:	e7ca      	b.n	8010ad6 <_strtol_l.constprop.0+0x3a>
 8010b40:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010b44:	f1bc 0f19 	cmp.w	ip, #25
 8010b48:	d801      	bhi.n	8010b4e <_strtol_l.constprop.0+0xb2>
 8010b4a:	3c37      	subs	r4, #55	; 0x37
 8010b4c:	e7e2      	b.n	8010b14 <_strtol_l.constprop.0+0x78>
 8010b4e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010b52:	f1bc 0f19 	cmp.w	ip, #25
 8010b56:	d804      	bhi.n	8010b62 <_strtol_l.constprop.0+0xc6>
 8010b58:	3c57      	subs	r4, #87	; 0x57
 8010b5a:	e7db      	b.n	8010b14 <_strtol_l.constprop.0+0x78>
 8010b5c:	f04f 3eff 	mov.w	lr, #4294967295
 8010b60:	e7e6      	b.n	8010b30 <_strtol_l.constprop.0+0x94>
 8010b62:	f1be 3fff 	cmp.w	lr, #4294967295
 8010b66:	d105      	bne.n	8010b74 <_strtol_l.constprop.0+0xd8>
 8010b68:	2322      	movs	r3, #34	; 0x22
 8010b6a:	6003      	str	r3, [r0, #0]
 8010b6c:	4646      	mov	r6, r8
 8010b6e:	b942      	cbnz	r2, 8010b82 <_strtol_l.constprop.0+0xe6>
 8010b70:	4630      	mov	r0, r6
 8010b72:	e79e      	b.n	8010ab2 <_strtol_l.constprop.0+0x16>
 8010b74:	b107      	cbz	r7, 8010b78 <_strtol_l.constprop.0+0xdc>
 8010b76:	4276      	negs	r6, r6
 8010b78:	2a00      	cmp	r2, #0
 8010b7a:	d0f9      	beq.n	8010b70 <_strtol_l.constprop.0+0xd4>
 8010b7c:	f1be 0f00 	cmp.w	lr, #0
 8010b80:	d000      	beq.n	8010b84 <_strtol_l.constprop.0+0xe8>
 8010b82:	1e69      	subs	r1, r5, #1
 8010b84:	6011      	str	r1, [r2, #0]
 8010b86:	e7f3      	b.n	8010b70 <_strtol_l.constprop.0+0xd4>
 8010b88:	2430      	movs	r4, #48	; 0x30
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d1b1      	bne.n	8010af2 <_strtol_l.constprop.0+0x56>
 8010b8e:	2308      	movs	r3, #8
 8010b90:	e7af      	b.n	8010af2 <_strtol_l.constprop.0+0x56>
 8010b92:	2c30      	cmp	r4, #48	; 0x30
 8010b94:	d0a5      	beq.n	8010ae2 <_strtol_l.constprop.0+0x46>
 8010b96:	230a      	movs	r3, #10
 8010b98:	e7ab      	b.n	8010af2 <_strtol_l.constprop.0+0x56>
 8010b9a:	bf00      	nop
 8010b9c:	08012891 	.word	0x08012891

08010ba0 <_strtol_r>:
 8010ba0:	f7ff bf7c 	b.w	8010a9c <_strtol_l.constprop.0>

08010ba4 <__ssputs_r>:
 8010ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ba8:	688e      	ldr	r6, [r1, #8]
 8010baa:	461f      	mov	r7, r3
 8010bac:	42be      	cmp	r6, r7
 8010bae:	680b      	ldr	r3, [r1, #0]
 8010bb0:	4682      	mov	sl, r0
 8010bb2:	460c      	mov	r4, r1
 8010bb4:	4690      	mov	r8, r2
 8010bb6:	d82c      	bhi.n	8010c12 <__ssputs_r+0x6e>
 8010bb8:	898a      	ldrh	r2, [r1, #12]
 8010bba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010bbe:	d026      	beq.n	8010c0e <__ssputs_r+0x6a>
 8010bc0:	6965      	ldr	r5, [r4, #20]
 8010bc2:	6909      	ldr	r1, [r1, #16]
 8010bc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010bc8:	eba3 0901 	sub.w	r9, r3, r1
 8010bcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010bd0:	1c7b      	adds	r3, r7, #1
 8010bd2:	444b      	add	r3, r9
 8010bd4:	106d      	asrs	r5, r5, #1
 8010bd6:	429d      	cmp	r5, r3
 8010bd8:	bf38      	it	cc
 8010bda:	461d      	movcc	r5, r3
 8010bdc:	0553      	lsls	r3, r2, #21
 8010bde:	d527      	bpl.n	8010c30 <__ssputs_r+0x8c>
 8010be0:	4629      	mov	r1, r5
 8010be2:	f7fc fc97 	bl	800d514 <_malloc_r>
 8010be6:	4606      	mov	r6, r0
 8010be8:	b360      	cbz	r0, 8010c44 <__ssputs_r+0xa0>
 8010bea:	6921      	ldr	r1, [r4, #16]
 8010bec:	464a      	mov	r2, r9
 8010bee:	f7fd fdb8 	bl	800e762 <memcpy>
 8010bf2:	89a3      	ldrh	r3, [r4, #12]
 8010bf4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bfc:	81a3      	strh	r3, [r4, #12]
 8010bfe:	6126      	str	r6, [r4, #16]
 8010c00:	6165      	str	r5, [r4, #20]
 8010c02:	444e      	add	r6, r9
 8010c04:	eba5 0509 	sub.w	r5, r5, r9
 8010c08:	6026      	str	r6, [r4, #0]
 8010c0a:	60a5      	str	r5, [r4, #8]
 8010c0c:	463e      	mov	r6, r7
 8010c0e:	42be      	cmp	r6, r7
 8010c10:	d900      	bls.n	8010c14 <__ssputs_r+0x70>
 8010c12:	463e      	mov	r6, r7
 8010c14:	6820      	ldr	r0, [r4, #0]
 8010c16:	4632      	mov	r2, r6
 8010c18:	4641      	mov	r1, r8
 8010c1a:	f000 fd5c 	bl	80116d6 <memmove>
 8010c1e:	68a3      	ldr	r3, [r4, #8]
 8010c20:	1b9b      	subs	r3, r3, r6
 8010c22:	60a3      	str	r3, [r4, #8]
 8010c24:	6823      	ldr	r3, [r4, #0]
 8010c26:	4433      	add	r3, r6
 8010c28:	6023      	str	r3, [r4, #0]
 8010c2a:	2000      	movs	r0, #0
 8010c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c30:	462a      	mov	r2, r5
 8010c32:	f001 f92e 	bl	8011e92 <_realloc_r>
 8010c36:	4606      	mov	r6, r0
 8010c38:	2800      	cmp	r0, #0
 8010c3a:	d1e0      	bne.n	8010bfe <__ssputs_r+0x5a>
 8010c3c:	6921      	ldr	r1, [r4, #16]
 8010c3e:	4650      	mov	r0, sl
 8010c40:	f7fe fc20 	bl	800f484 <_free_r>
 8010c44:	230c      	movs	r3, #12
 8010c46:	f8ca 3000 	str.w	r3, [sl]
 8010c4a:	89a3      	ldrh	r3, [r4, #12]
 8010c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c50:	81a3      	strh	r3, [r4, #12]
 8010c52:	f04f 30ff 	mov.w	r0, #4294967295
 8010c56:	e7e9      	b.n	8010c2c <__ssputs_r+0x88>

08010c58 <_svfiprintf_r>:
 8010c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c5c:	4698      	mov	r8, r3
 8010c5e:	898b      	ldrh	r3, [r1, #12]
 8010c60:	061b      	lsls	r3, r3, #24
 8010c62:	b09d      	sub	sp, #116	; 0x74
 8010c64:	4607      	mov	r7, r0
 8010c66:	460d      	mov	r5, r1
 8010c68:	4614      	mov	r4, r2
 8010c6a:	d50e      	bpl.n	8010c8a <_svfiprintf_r+0x32>
 8010c6c:	690b      	ldr	r3, [r1, #16]
 8010c6e:	b963      	cbnz	r3, 8010c8a <_svfiprintf_r+0x32>
 8010c70:	2140      	movs	r1, #64	; 0x40
 8010c72:	f7fc fc4f 	bl	800d514 <_malloc_r>
 8010c76:	6028      	str	r0, [r5, #0]
 8010c78:	6128      	str	r0, [r5, #16]
 8010c7a:	b920      	cbnz	r0, 8010c86 <_svfiprintf_r+0x2e>
 8010c7c:	230c      	movs	r3, #12
 8010c7e:	603b      	str	r3, [r7, #0]
 8010c80:	f04f 30ff 	mov.w	r0, #4294967295
 8010c84:	e0d0      	b.n	8010e28 <_svfiprintf_r+0x1d0>
 8010c86:	2340      	movs	r3, #64	; 0x40
 8010c88:	616b      	str	r3, [r5, #20]
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8010c8e:	2320      	movs	r3, #32
 8010c90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c94:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c98:	2330      	movs	r3, #48	; 0x30
 8010c9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010e40 <_svfiprintf_r+0x1e8>
 8010c9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010ca2:	f04f 0901 	mov.w	r9, #1
 8010ca6:	4623      	mov	r3, r4
 8010ca8:	469a      	mov	sl, r3
 8010caa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010cae:	b10a      	cbz	r2, 8010cb4 <_svfiprintf_r+0x5c>
 8010cb0:	2a25      	cmp	r2, #37	; 0x25
 8010cb2:	d1f9      	bne.n	8010ca8 <_svfiprintf_r+0x50>
 8010cb4:	ebba 0b04 	subs.w	fp, sl, r4
 8010cb8:	d00b      	beq.n	8010cd2 <_svfiprintf_r+0x7a>
 8010cba:	465b      	mov	r3, fp
 8010cbc:	4622      	mov	r2, r4
 8010cbe:	4629      	mov	r1, r5
 8010cc0:	4638      	mov	r0, r7
 8010cc2:	f7ff ff6f 	bl	8010ba4 <__ssputs_r>
 8010cc6:	3001      	adds	r0, #1
 8010cc8:	f000 80a9 	beq.w	8010e1e <_svfiprintf_r+0x1c6>
 8010ccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010cce:	445a      	add	r2, fp
 8010cd0:	9209      	str	r2, [sp, #36]	; 0x24
 8010cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	f000 80a1 	beq.w	8010e1e <_svfiprintf_r+0x1c6>
 8010cdc:	2300      	movs	r3, #0
 8010cde:	f04f 32ff 	mov.w	r2, #4294967295
 8010ce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ce6:	f10a 0a01 	add.w	sl, sl, #1
 8010cea:	9304      	str	r3, [sp, #16]
 8010cec:	9307      	str	r3, [sp, #28]
 8010cee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010cf2:	931a      	str	r3, [sp, #104]	; 0x68
 8010cf4:	4654      	mov	r4, sl
 8010cf6:	2205      	movs	r2, #5
 8010cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cfc:	4850      	ldr	r0, [pc, #320]	; (8010e40 <_svfiprintf_r+0x1e8>)
 8010cfe:	f7ef fa67 	bl	80001d0 <memchr>
 8010d02:	9a04      	ldr	r2, [sp, #16]
 8010d04:	b9d8      	cbnz	r0, 8010d3e <_svfiprintf_r+0xe6>
 8010d06:	06d0      	lsls	r0, r2, #27
 8010d08:	bf44      	itt	mi
 8010d0a:	2320      	movmi	r3, #32
 8010d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d10:	0711      	lsls	r1, r2, #28
 8010d12:	bf44      	itt	mi
 8010d14:	232b      	movmi	r3, #43	; 0x2b
 8010d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8010d1e:	2b2a      	cmp	r3, #42	; 0x2a
 8010d20:	d015      	beq.n	8010d4e <_svfiprintf_r+0xf6>
 8010d22:	9a07      	ldr	r2, [sp, #28]
 8010d24:	4654      	mov	r4, sl
 8010d26:	2000      	movs	r0, #0
 8010d28:	f04f 0c0a 	mov.w	ip, #10
 8010d2c:	4621      	mov	r1, r4
 8010d2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d32:	3b30      	subs	r3, #48	; 0x30
 8010d34:	2b09      	cmp	r3, #9
 8010d36:	d94d      	bls.n	8010dd4 <_svfiprintf_r+0x17c>
 8010d38:	b1b0      	cbz	r0, 8010d68 <_svfiprintf_r+0x110>
 8010d3a:	9207      	str	r2, [sp, #28]
 8010d3c:	e014      	b.n	8010d68 <_svfiprintf_r+0x110>
 8010d3e:	eba0 0308 	sub.w	r3, r0, r8
 8010d42:	fa09 f303 	lsl.w	r3, r9, r3
 8010d46:	4313      	orrs	r3, r2
 8010d48:	9304      	str	r3, [sp, #16]
 8010d4a:	46a2      	mov	sl, r4
 8010d4c:	e7d2      	b.n	8010cf4 <_svfiprintf_r+0x9c>
 8010d4e:	9b03      	ldr	r3, [sp, #12]
 8010d50:	1d19      	adds	r1, r3, #4
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	9103      	str	r1, [sp, #12]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	bfbb      	ittet	lt
 8010d5a:	425b      	neglt	r3, r3
 8010d5c:	f042 0202 	orrlt.w	r2, r2, #2
 8010d60:	9307      	strge	r3, [sp, #28]
 8010d62:	9307      	strlt	r3, [sp, #28]
 8010d64:	bfb8      	it	lt
 8010d66:	9204      	strlt	r2, [sp, #16]
 8010d68:	7823      	ldrb	r3, [r4, #0]
 8010d6a:	2b2e      	cmp	r3, #46	; 0x2e
 8010d6c:	d10c      	bne.n	8010d88 <_svfiprintf_r+0x130>
 8010d6e:	7863      	ldrb	r3, [r4, #1]
 8010d70:	2b2a      	cmp	r3, #42	; 0x2a
 8010d72:	d134      	bne.n	8010dde <_svfiprintf_r+0x186>
 8010d74:	9b03      	ldr	r3, [sp, #12]
 8010d76:	1d1a      	adds	r2, r3, #4
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	9203      	str	r2, [sp, #12]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	bfb8      	it	lt
 8010d80:	f04f 33ff 	movlt.w	r3, #4294967295
 8010d84:	3402      	adds	r4, #2
 8010d86:	9305      	str	r3, [sp, #20]
 8010d88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010e50 <_svfiprintf_r+0x1f8>
 8010d8c:	7821      	ldrb	r1, [r4, #0]
 8010d8e:	2203      	movs	r2, #3
 8010d90:	4650      	mov	r0, sl
 8010d92:	f7ef fa1d 	bl	80001d0 <memchr>
 8010d96:	b138      	cbz	r0, 8010da8 <_svfiprintf_r+0x150>
 8010d98:	9b04      	ldr	r3, [sp, #16]
 8010d9a:	eba0 000a 	sub.w	r0, r0, sl
 8010d9e:	2240      	movs	r2, #64	; 0x40
 8010da0:	4082      	lsls	r2, r0
 8010da2:	4313      	orrs	r3, r2
 8010da4:	3401      	adds	r4, #1
 8010da6:	9304      	str	r3, [sp, #16]
 8010da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dac:	4825      	ldr	r0, [pc, #148]	; (8010e44 <_svfiprintf_r+0x1ec>)
 8010dae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010db2:	2206      	movs	r2, #6
 8010db4:	f7ef fa0c 	bl	80001d0 <memchr>
 8010db8:	2800      	cmp	r0, #0
 8010dba:	d038      	beq.n	8010e2e <_svfiprintf_r+0x1d6>
 8010dbc:	4b22      	ldr	r3, [pc, #136]	; (8010e48 <_svfiprintf_r+0x1f0>)
 8010dbe:	bb1b      	cbnz	r3, 8010e08 <_svfiprintf_r+0x1b0>
 8010dc0:	9b03      	ldr	r3, [sp, #12]
 8010dc2:	3307      	adds	r3, #7
 8010dc4:	f023 0307 	bic.w	r3, r3, #7
 8010dc8:	3308      	adds	r3, #8
 8010dca:	9303      	str	r3, [sp, #12]
 8010dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dce:	4433      	add	r3, r6
 8010dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8010dd2:	e768      	b.n	8010ca6 <_svfiprintf_r+0x4e>
 8010dd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8010dd8:	460c      	mov	r4, r1
 8010dda:	2001      	movs	r0, #1
 8010ddc:	e7a6      	b.n	8010d2c <_svfiprintf_r+0xd4>
 8010dde:	2300      	movs	r3, #0
 8010de0:	3401      	adds	r4, #1
 8010de2:	9305      	str	r3, [sp, #20]
 8010de4:	4619      	mov	r1, r3
 8010de6:	f04f 0c0a 	mov.w	ip, #10
 8010dea:	4620      	mov	r0, r4
 8010dec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010df0:	3a30      	subs	r2, #48	; 0x30
 8010df2:	2a09      	cmp	r2, #9
 8010df4:	d903      	bls.n	8010dfe <_svfiprintf_r+0x1a6>
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d0c6      	beq.n	8010d88 <_svfiprintf_r+0x130>
 8010dfa:	9105      	str	r1, [sp, #20]
 8010dfc:	e7c4      	b.n	8010d88 <_svfiprintf_r+0x130>
 8010dfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e02:	4604      	mov	r4, r0
 8010e04:	2301      	movs	r3, #1
 8010e06:	e7f0      	b.n	8010dea <_svfiprintf_r+0x192>
 8010e08:	ab03      	add	r3, sp, #12
 8010e0a:	9300      	str	r3, [sp, #0]
 8010e0c:	462a      	mov	r2, r5
 8010e0e:	4b0f      	ldr	r3, [pc, #60]	; (8010e4c <_svfiprintf_r+0x1f4>)
 8010e10:	a904      	add	r1, sp, #16
 8010e12:	4638      	mov	r0, r7
 8010e14:	f7fc fcaa 	bl	800d76c <_printf_float>
 8010e18:	1c42      	adds	r2, r0, #1
 8010e1a:	4606      	mov	r6, r0
 8010e1c:	d1d6      	bne.n	8010dcc <_svfiprintf_r+0x174>
 8010e1e:	89ab      	ldrh	r3, [r5, #12]
 8010e20:	065b      	lsls	r3, r3, #25
 8010e22:	f53f af2d 	bmi.w	8010c80 <_svfiprintf_r+0x28>
 8010e26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e28:	b01d      	add	sp, #116	; 0x74
 8010e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e2e:	ab03      	add	r3, sp, #12
 8010e30:	9300      	str	r3, [sp, #0]
 8010e32:	462a      	mov	r2, r5
 8010e34:	4b05      	ldr	r3, [pc, #20]	; (8010e4c <_svfiprintf_r+0x1f4>)
 8010e36:	a904      	add	r1, sp, #16
 8010e38:	4638      	mov	r0, r7
 8010e3a:	f7fc ff3b 	bl	800dcb4 <_printf_i>
 8010e3e:	e7eb      	b.n	8010e18 <_svfiprintf_r+0x1c0>
 8010e40:	08012991 	.word	0x08012991
 8010e44:	0801299b 	.word	0x0801299b
 8010e48:	0800d76d 	.word	0x0800d76d
 8010e4c:	08010ba5 	.word	0x08010ba5
 8010e50:	08012997 	.word	0x08012997

08010e54 <_sungetc_r>:
 8010e54:	b538      	push	{r3, r4, r5, lr}
 8010e56:	1c4b      	adds	r3, r1, #1
 8010e58:	4614      	mov	r4, r2
 8010e5a:	d103      	bne.n	8010e64 <_sungetc_r+0x10>
 8010e5c:	f04f 35ff 	mov.w	r5, #4294967295
 8010e60:	4628      	mov	r0, r5
 8010e62:	bd38      	pop	{r3, r4, r5, pc}
 8010e64:	8993      	ldrh	r3, [r2, #12]
 8010e66:	f023 0320 	bic.w	r3, r3, #32
 8010e6a:	8193      	strh	r3, [r2, #12]
 8010e6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010e6e:	6852      	ldr	r2, [r2, #4]
 8010e70:	b2cd      	uxtb	r5, r1
 8010e72:	b18b      	cbz	r3, 8010e98 <_sungetc_r+0x44>
 8010e74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010e76:	4293      	cmp	r3, r2
 8010e78:	dd08      	ble.n	8010e8c <_sungetc_r+0x38>
 8010e7a:	6823      	ldr	r3, [r4, #0]
 8010e7c:	1e5a      	subs	r2, r3, #1
 8010e7e:	6022      	str	r2, [r4, #0]
 8010e80:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010e84:	6863      	ldr	r3, [r4, #4]
 8010e86:	3301      	adds	r3, #1
 8010e88:	6063      	str	r3, [r4, #4]
 8010e8a:	e7e9      	b.n	8010e60 <_sungetc_r+0xc>
 8010e8c:	4621      	mov	r1, r4
 8010e8e:	f000 fbe8 	bl	8011662 <__submore>
 8010e92:	2800      	cmp	r0, #0
 8010e94:	d0f1      	beq.n	8010e7a <_sungetc_r+0x26>
 8010e96:	e7e1      	b.n	8010e5c <_sungetc_r+0x8>
 8010e98:	6921      	ldr	r1, [r4, #16]
 8010e9a:	6823      	ldr	r3, [r4, #0]
 8010e9c:	b151      	cbz	r1, 8010eb4 <_sungetc_r+0x60>
 8010e9e:	4299      	cmp	r1, r3
 8010ea0:	d208      	bcs.n	8010eb4 <_sungetc_r+0x60>
 8010ea2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8010ea6:	42a9      	cmp	r1, r5
 8010ea8:	d104      	bne.n	8010eb4 <_sungetc_r+0x60>
 8010eaa:	3b01      	subs	r3, #1
 8010eac:	3201      	adds	r2, #1
 8010eae:	6023      	str	r3, [r4, #0]
 8010eb0:	6062      	str	r2, [r4, #4]
 8010eb2:	e7d5      	b.n	8010e60 <_sungetc_r+0xc>
 8010eb4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8010eb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010ebc:	6363      	str	r3, [r4, #52]	; 0x34
 8010ebe:	2303      	movs	r3, #3
 8010ec0:	63a3      	str	r3, [r4, #56]	; 0x38
 8010ec2:	4623      	mov	r3, r4
 8010ec4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010ec8:	6023      	str	r3, [r4, #0]
 8010eca:	2301      	movs	r3, #1
 8010ecc:	e7dc      	b.n	8010e88 <_sungetc_r+0x34>

08010ece <__ssrefill_r>:
 8010ece:	b510      	push	{r4, lr}
 8010ed0:	460c      	mov	r4, r1
 8010ed2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010ed4:	b169      	cbz	r1, 8010ef2 <__ssrefill_r+0x24>
 8010ed6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010eda:	4299      	cmp	r1, r3
 8010edc:	d001      	beq.n	8010ee2 <__ssrefill_r+0x14>
 8010ede:	f7fe fad1 	bl	800f484 <_free_r>
 8010ee2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010ee4:	6063      	str	r3, [r4, #4]
 8010ee6:	2000      	movs	r0, #0
 8010ee8:	6360      	str	r0, [r4, #52]	; 0x34
 8010eea:	b113      	cbz	r3, 8010ef2 <__ssrefill_r+0x24>
 8010eec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010eee:	6023      	str	r3, [r4, #0]
 8010ef0:	bd10      	pop	{r4, pc}
 8010ef2:	6923      	ldr	r3, [r4, #16]
 8010ef4:	6023      	str	r3, [r4, #0]
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	6063      	str	r3, [r4, #4]
 8010efa:	89a3      	ldrh	r3, [r4, #12]
 8010efc:	f043 0320 	orr.w	r3, r3, #32
 8010f00:	81a3      	strh	r3, [r4, #12]
 8010f02:	f04f 30ff 	mov.w	r0, #4294967295
 8010f06:	e7f3      	b.n	8010ef0 <__ssrefill_r+0x22>

08010f08 <__ssvfiscanf_r>:
 8010f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f0c:	460c      	mov	r4, r1
 8010f0e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8010f12:	2100      	movs	r1, #0
 8010f14:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8010f18:	49a6      	ldr	r1, [pc, #664]	; (80111b4 <__ssvfiscanf_r+0x2ac>)
 8010f1a:	91a0      	str	r1, [sp, #640]	; 0x280
 8010f1c:	f10d 0804 	add.w	r8, sp, #4
 8010f20:	49a5      	ldr	r1, [pc, #660]	; (80111b8 <__ssvfiscanf_r+0x2b0>)
 8010f22:	4fa6      	ldr	r7, [pc, #664]	; (80111bc <__ssvfiscanf_r+0x2b4>)
 8010f24:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80111c0 <__ssvfiscanf_r+0x2b8>
 8010f28:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8010f2c:	4606      	mov	r6, r0
 8010f2e:	91a1      	str	r1, [sp, #644]	; 0x284
 8010f30:	9300      	str	r3, [sp, #0]
 8010f32:	7813      	ldrb	r3, [r2, #0]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	f000 815a 	beq.w	80111ee <__ssvfiscanf_r+0x2e6>
 8010f3a:	5cf9      	ldrb	r1, [r7, r3]
 8010f3c:	f011 0108 	ands.w	r1, r1, #8
 8010f40:	f102 0501 	add.w	r5, r2, #1
 8010f44:	d019      	beq.n	8010f7a <__ssvfiscanf_r+0x72>
 8010f46:	6863      	ldr	r3, [r4, #4]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	dd0f      	ble.n	8010f6c <__ssvfiscanf_r+0x64>
 8010f4c:	6823      	ldr	r3, [r4, #0]
 8010f4e:	781a      	ldrb	r2, [r3, #0]
 8010f50:	5cba      	ldrb	r2, [r7, r2]
 8010f52:	0712      	lsls	r2, r2, #28
 8010f54:	d401      	bmi.n	8010f5a <__ssvfiscanf_r+0x52>
 8010f56:	462a      	mov	r2, r5
 8010f58:	e7eb      	b.n	8010f32 <__ssvfiscanf_r+0x2a>
 8010f5a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010f5c:	3201      	adds	r2, #1
 8010f5e:	9245      	str	r2, [sp, #276]	; 0x114
 8010f60:	6862      	ldr	r2, [r4, #4]
 8010f62:	3301      	adds	r3, #1
 8010f64:	3a01      	subs	r2, #1
 8010f66:	6062      	str	r2, [r4, #4]
 8010f68:	6023      	str	r3, [r4, #0]
 8010f6a:	e7ec      	b.n	8010f46 <__ssvfiscanf_r+0x3e>
 8010f6c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010f6e:	4621      	mov	r1, r4
 8010f70:	4630      	mov	r0, r6
 8010f72:	4798      	blx	r3
 8010f74:	2800      	cmp	r0, #0
 8010f76:	d0e9      	beq.n	8010f4c <__ssvfiscanf_r+0x44>
 8010f78:	e7ed      	b.n	8010f56 <__ssvfiscanf_r+0x4e>
 8010f7a:	2b25      	cmp	r3, #37	; 0x25
 8010f7c:	d012      	beq.n	8010fa4 <__ssvfiscanf_r+0x9c>
 8010f7e:	469a      	mov	sl, r3
 8010f80:	6863      	ldr	r3, [r4, #4]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	f340 8091 	ble.w	80110aa <__ssvfiscanf_r+0x1a2>
 8010f88:	6822      	ldr	r2, [r4, #0]
 8010f8a:	7813      	ldrb	r3, [r2, #0]
 8010f8c:	4553      	cmp	r3, sl
 8010f8e:	f040 812e 	bne.w	80111ee <__ssvfiscanf_r+0x2e6>
 8010f92:	6863      	ldr	r3, [r4, #4]
 8010f94:	3b01      	subs	r3, #1
 8010f96:	6063      	str	r3, [r4, #4]
 8010f98:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010f9a:	3201      	adds	r2, #1
 8010f9c:	3301      	adds	r3, #1
 8010f9e:	6022      	str	r2, [r4, #0]
 8010fa0:	9345      	str	r3, [sp, #276]	; 0x114
 8010fa2:	e7d8      	b.n	8010f56 <__ssvfiscanf_r+0x4e>
 8010fa4:	9141      	str	r1, [sp, #260]	; 0x104
 8010fa6:	9143      	str	r1, [sp, #268]	; 0x10c
 8010fa8:	7853      	ldrb	r3, [r2, #1]
 8010faa:	2b2a      	cmp	r3, #42	; 0x2a
 8010fac:	bf02      	ittt	eq
 8010fae:	2310      	moveq	r3, #16
 8010fb0:	1c95      	addeq	r5, r2, #2
 8010fb2:	9341      	streq	r3, [sp, #260]	; 0x104
 8010fb4:	220a      	movs	r2, #10
 8010fb6:	46aa      	mov	sl, r5
 8010fb8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8010fbc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8010fc0:	2b09      	cmp	r3, #9
 8010fc2:	d91c      	bls.n	8010ffe <__ssvfiscanf_r+0xf6>
 8010fc4:	487e      	ldr	r0, [pc, #504]	; (80111c0 <__ssvfiscanf_r+0x2b8>)
 8010fc6:	2203      	movs	r2, #3
 8010fc8:	f7ef f902 	bl	80001d0 <memchr>
 8010fcc:	b138      	cbz	r0, 8010fde <__ssvfiscanf_r+0xd6>
 8010fce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010fd0:	eba0 0009 	sub.w	r0, r0, r9
 8010fd4:	2301      	movs	r3, #1
 8010fd6:	4083      	lsls	r3, r0
 8010fd8:	4313      	orrs	r3, r2
 8010fda:	9341      	str	r3, [sp, #260]	; 0x104
 8010fdc:	4655      	mov	r5, sl
 8010fde:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010fe2:	2b78      	cmp	r3, #120	; 0x78
 8010fe4:	d806      	bhi.n	8010ff4 <__ssvfiscanf_r+0xec>
 8010fe6:	2b57      	cmp	r3, #87	; 0x57
 8010fe8:	d810      	bhi.n	801100c <__ssvfiscanf_r+0x104>
 8010fea:	2b25      	cmp	r3, #37	; 0x25
 8010fec:	d0c7      	beq.n	8010f7e <__ssvfiscanf_r+0x76>
 8010fee:	d857      	bhi.n	80110a0 <__ssvfiscanf_r+0x198>
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d065      	beq.n	80110c0 <__ssvfiscanf_r+0x1b8>
 8010ff4:	2303      	movs	r3, #3
 8010ff6:	9347      	str	r3, [sp, #284]	; 0x11c
 8010ff8:	230a      	movs	r3, #10
 8010ffa:	9342      	str	r3, [sp, #264]	; 0x108
 8010ffc:	e076      	b.n	80110ec <__ssvfiscanf_r+0x1e4>
 8010ffe:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8011000:	fb02 1103 	mla	r1, r2, r3, r1
 8011004:	3930      	subs	r1, #48	; 0x30
 8011006:	9143      	str	r1, [sp, #268]	; 0x10c
 8011008:	4655      	mov	r5, sl
 801100a:	e7d4      	b.n	8010fb6 <__ssvfiscanf_r+0xae>
 801100c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8011010:	2a20      	cmp	r2, #32
 8011012:	d8ef      	bhi.n	8010ff4 <__ssvfiscanf_r+0xec>
 8011014:	a101      	add	r1, pc, #4	; (adr r1, 801101c <__ssvfiscanf_r+0x114>)
 8011016:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801101a:	bf00      	nop
 801101c:	080110cf 	.word	0x080110cf
 8011020:	08010ff5 	.word	0x08010ff5
 8011024:	08010ff5 	.word	0x08010ff5
 8011028:	0801112d 	.word	0x0801112d
 801102c:	08010ff5 	.word	0x08010ff5
 8011030:	08010ff5 	.word	0x08010ff5
 8011034:	08010ff5 	.word	0x08010ff5
 8011038:	08010ff5 	.word	0x08010ff5
 801103c:	08010ff5 	.word	0x08010ff5
 8011040:	08010ff5 	.word	0x08010ff5
 8011044:	08010ff5 	.word	0x08010ff5
 8011048:	08011143 	.word	0x08011143
 801104c:	08011129 	.word	0x08011129
 8011050:	080110a7 	.word	0x080110a7
 8011054:	080110a7 	.word	0x080110a7
 8011058:	080110a7 	.word	0x080110a7
 801105c:	08010ff5 	.word	0x08010ff5
 8011060:	080110e5 	.word	0x080110e5
 8011064:	08010ff5 	.word	0x08010ff5
 8011068:	08010ff5 	.word	0x08010ff5
 801106c:	08010ff5 	.word	0x08010ff5
 8011070:	08010ff5 	.word	0x08010ff5
 8011074:	08011153 	.word	0x08011153
 8011078:	08011121 	.word	0x08011121
 801107c:	080110c7 	.word	0x080110c7
 8011080:	08010ff5 	.word	0x08010ff5
 8011084:	08010ff5 	.word	0x08010ff5
 8011088:	0801114f 	.word	0x0801114f
 801108c:	08010ff5 	.word	0x08010ff5
 8011090:	08011129 	.word	0x08011129
 8011094:	08010ff5 	.word	0x08010ff5
 8011098:	08010ff5 	.word	0x08010ff5
 801109c:	080110cf 	.word	0x080110cf
 80110a0:	3b45      	subs	r3, #69	; 0x45
 80110a2:	2b02      	cmp	r3, #2
 80110a4:	d8a6      	bhi.n	8010ff4 <__ssvfiscanf_r+0xec>
 80110a6:	2305      	movs	r3, #5
 80110a8:	e01f      	b.n	80110ea <__ssvfiscanf_r+0x1e2>
 80110aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80110ac:	4621      	mov	r1, r4
 80110ae:	4630      	mov	r0, r6
 80110b0:	4798      	blx	r3
 80110b2:	2800      	cmp	r0, #0
 80110b4:	f43f af68 	beq.w	8010f88 <__ssvfiscanf_r+0x80>
 80110b8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80110ba:	2800      	cmp	r0, #0
 80110bc:	f040 808d 	bne.w	80111da <__ssvfiscanf_r+0x2d2>
 80110c0:	f04f 30ff 	mov.w	r0, #4294967295
 80110c4:	e08f      	b.n	80111e6 <__ssvfiscanf_r+0x2de>
 80110c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80110c8:	f042 0220 	orr.w	r2, r2, #32
 80110cc:	9241      	str	r2, [sp, #260]	; 0x104
 80110ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80110d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80110d4:	9241      	str	r2, [sp, #260]	; 0x104
 80110d6:	2210      	movs	r2, #16
 80110d8:	2b6f      	cmp	r3, #111	; 0x6f
 80110da:	9242      	str	r2, [sp, #264]	; 0x108
 80110dc:	bf34      	ite	cc
 80110de:	2303      	movcc	r3, #3
 80110e0:	2304      	movcs	r3, #4
 80110e2:	e002      	b.n	80110ea <__ssvfiscanf_r+0x1e2>
 80110e4:	2300      	movs	r3, #0
 80110e6:	9342      	str	r3, [sp, #264]	; 0x108
 80110e8:	2303      	movs	r3, #3
 80110ea:	9347      	str	r3, [sp, #284]	; 0x11c
 80110ec:	6863      	ldr	r3, [r4, #4]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	dd3d      	ble.n	801116e <__ssvfiscanf_r+0x266>
 80110f2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80110f4:	0659      	lsls	r1, r3, #25
 80110f6:	d404      	bmi.n	8011102 <__ssvfiscanf_r+0x1fa>
 80110f8:	6823      	ldr	r3, [r4, #0]
 80110fa:	781a      	ldrb	r2, [r3, #0]
 80110fc:	5cba      	ldrb	r2, [r7, r2]
 80110fe:	0712      	lsls	r2, r2, #28
 8011100:	d43c      	bmi.n	801117c <__ssvfiscanf_r+0x274>
 8011102:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8011104:	2b02      	cmp	r3, #2
 8011106:	dc4b      	bgt.n	80111a0 <__ssvfiscanf_r+0x298>
 8011108:	466b      	mov	r3, sp
 801110a:	4622      	mov	r2, r4
 801110c:	a941      	add	r1, sp, #260	; 0x104
 801110e:	4630      	mov	r0, r6
 8011110:	f000 f872 	bl	80111f8 <_scanf_chars>
 8011114:	2801      	cmp	r0, #1
 8011116:	d06a      	beq.n	80111ee <__ssvfiscanf_r+0x2e6>
 8011118:	2802      	cmp	r0, #2
 801111a:	f47f af1c 	bne.w	8010f56 <__ssvfiscanf_r+0x4e>
 801111e:	e7cb      	b.n	80110b8 <__ssvfiscanf_r+0x1b0>
 8011120:	2308      	movs	r3, #8
 8011122:	9342      	str	r3, [sp, #264]	; 0x108
 8011124:	2304      	movs	r3, #4
 8011126:	e7e0      	b.n	80110ea <__ssvfiscanf_r+0x1e2>
 8011128:	220a      	movs	r2, #10
 801112a:	e7d5      	b.n	80110d8 <__ssvfiscanf_r+0x1d0>
 801112c:	4629      	mov	r1, r5
 801112e:	4640      	mov	r0, r8
 8011130:	f000 fa5e 	bl	80115f0 <__sccl>
 8011134:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801113a:	9341      	str	r3, [sp, #260]	; 0x104
 801113c:	4605      	mov	r5, r0
 801113e:	2301      	movs	r3, #1
 8011140:	e7d3      	b.n	80110ea <__ssvfiscanf_r+0x1e2>
 8011142:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011148:	9341      	str	r3, [sp, #260]	; 0x104
 801114a:	2300      	movs	r3, #0
 801114c:	e7cd      	b.n	80110ea <__ssvfiscanf_r+0x1e2>
 801114e:	2302      	movs	r3, #2
 8011150:	e7cb      	b.n	80110ea <__ssvfiscanf_r+0x1e2>
 8011152:	9841      	ldr	r0, [sp, #260]	; 0x104
 8011154:	06c3      	lsls	r3, r0, #27
 8011156:	f53f aefe 	bmi.w	8010f56 <__ssvfiscanf_r+0x4e>
 801115a:	9b00      	ldr	r3, [sp, #0]
 801115c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801115e:	1d19      	adds	r1, r3, #4
 8011160:	9100      	str	r1, [sp, #0]
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	07c0      	lsls	r0, r0, #31
 8011166:	bf4c      	ite	mi
 8011168:	801a      	strhmi	r2, [r3, #0]
 801116a:	601a      	strpl	r2, [r3, #0]
 801116c:	e6f3      	b.n	8010f56 <__ssvfiscanf_r+0x4e>
 801116e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011170:	4621      	mov	r1, r4
 8011172:	4630      	mov	r0, r6
 8011174:	4798      	blx	r3
 8011176:	2800      	cmp	r0, #0
 8011178:	d0bb      	beq.n	80110f2 <__ssvfiscanf_r+0x1ea>
 801117a:	e79d      	b.n	80110b8 <__ssvfiscanf_r+0x1b0>
 801117c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801117e:	3201      	adds	r2, #1
 8011180:	9245      	str	r2, [sp, #276]	; 0x114
 8011182:	6862      	ldr	r2, [r4, #4]
 8011184:	3a01      	subs	r2, #1
 8011186:	2a00      	cmp	r2, #0
 8011188:	6062      	str	r2, [r4, #4]
 801118a:	dd02      	ble.n	8011192 <__ssvfiscanf_r+0x28a>
 801118c:	3301      	adds	r3, #1
 801118e:	6023      	str	r3, [r4, #0]
 8011190:	e7b2      	b.n	80110f8 <__ssvfiscanf_r+0x1f0>
 8011192:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011194:	4621      	mov	r1, r4
 8011196:	4630      	mov	r0, r6
 8011198:	4798      	blx	r3
 801119a:	2800      	cmp	r0, #0
 801119c:	d0ac      	beq.n	80110f8 <__ssvfiscanf_r+0x1f0>
 801119e:	e78b      	b.n	80110b8 <__ssvfiscanf_r+0x1b0>
 80111a0:	2b04      	cmp	r3, #4
 80111a2:	dc0f      	bgt.n	80111c4 <__ssvfiscanf_r+0x2bc>
 80111a4:	466b      	mov	r3, sp
 80111a6:	4622      	mov	r2, r4
 80111a8:	a941      	add	r1, sp, #260	; 0x104
 80111aa:	4630      	mov	r0, r6
 80111ac:	f000 f87e 	bl	80112ac <_scanf_i>
 80111b0:	e7b0      	b.n	8011114 <__ssvfiscanf_r+0x20c>
 80111b2:	bf00      	nop
 80111b4:	08010e55 	.word	0x08010e55
 80111b8:	08010ecf 	.word	0x08010ecf
 80111bc:	08012891 	.word	0x08012891
 80111c0:	08012997 	.word	0x08012997
 80111c4:	4b0b      	ldr	r3, [pc, #44]	; (80111f4 <__ssvfiscanf_r+0x2ec>)
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	f43f aec5 	beq.w	8010f56 <__ssvfiscanf_r+0x4e>
 80111cc:	466b      	mov	r3, sp
 80111ce:	4622      	mov	r2, r4
 80111d0:	a941      	add	r1, sp, #260	; 0x104
 80111d2:	4630      	mov	r0, r6
 80111d4:	f7fc fe90 	bl	800def8 <_scanf_float>
 80111d8:	e79c      	b.n	8011114 <__ssvfiscanf_r+0x20c>
 80111da:	89a3      	ldrh	r3, [r4, #12]
 80111dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80111e0:	bf18      	it	ne
 80111e2:	f04f 30ff 	movne.w	r0, #4294967295
 80111e6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80111ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111ee:	9844      	ldr	r0, [sp, #272]	; 0x110
 80111f0:	e7f9      	b.n	80111e6 <__ssvfiscanf_r+0x2de>
 80111f2:	bf00      	nop
 80111f4:	0800def9 	.word	0x0800def9

080111f8 <_scanf_chars>:
 80111f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111fc:	4615      	mov	r5, r2
 80111fe:	688a      	ldr	r2, [r1, #8]
 8011200:	4680      	mov	r8, r0
 8011202:	460c      	mov	r4, r1
 8011204:	b932      	cbnz	r2, 8011214 <_scanf_chars+0x1c>
 8011206:	698a      	ldr	r2, [r1, #24]
 8011208:	2a00      	cmp	r2, #0
 801120a:	bf0c      	ite	eq
 801120c:	2201      	moveq	r2, #1
 801120e:	f04f 32ff 	movne.w	r2, #4294967295
 8011212:	608a      	str	r2, [r1, #8]
 8011214:	6822      	ldr	r2, [r4, #0]
 8011216:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80112a8 <_scanf_chars+0xb0>
 801121a:	06d1      	lsls	r1, r2, #27
 801121c:	bf5f      	itttt	pl
 801121e:	681a      	ldrpl	r2, [r3, #0]
 8011220:	1d11      	addpl	r1, r2, #4
 8011222:	6019      	strpl	r1, [r3, #0]
 8011224:	6816      	ldrpl	r6, [r2, #0]
 8011226:	2700      	movs	r7, #0
 8011228:	69a0      	ldr	r0, [r4, #24]
 801122a:	b188      	cbz	r0, 8011250 <_scanf_chars+0x58>
 801122c:	2801      	cmp	r0, #1
 801122e:	d107      	bne.n	8011240 <_scanf_chars+0x48>
 8011230:	682a      	ldr	r2, [r5, #0]
 8011232:	7811      	ldrb	r1, [r2, #0]
 8011234:	6962      	ldr	r2, [r4, #20]
 8011236:	5c52      	ldrb	r2, [r2, r1]
 8011238:	b952      	cbnz	r2, 8011250 <_scanf_chars+0x58>
 801123a:	2f00      	cmp	r7, #0
 801123c:	d031      	beq.n	80112a2 <_scanf_chars+0xaa>
 801123e:	e022      	b.n	8011286 <_scanf_chars+0x8e>
 8011240:	2802      	cmp	r0, #2
 8011242:	d120      	bne.n	8011286 <_scanf_chars+0x8e>
 8011244:	682b      	ldr	r3, [r5, #0]
 8011246:	781b      	ldrb	r3, [r3, #0]
 8011248:	f819 3003 	ldrb.w	r3, [r9, r3]
 801124c:	071b      	lsls	r3, r3, #28
 801124e:	d41a      	bmi.n	8011286 <_scanf_chars+0x8e>
 8011250:	6823      	ldr	r3, [r4, #0]
 8011252:	06da      	lsls	r2, r3, #27
 8011254:	bf5e      	ittt	pl
 8011256:	682b      	ldrpl	r3, [r5, #0]
 8011258:	781b      	ldrbpl	r3, [r3, #0]
 801125a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801125e:	682a      	ldr	r2, [r5, #0]
 8011260:	686b      	ldr	r3, [r5, #4]
 8011262:	3201      	adds	r2, #1
 8011264:	602a      	str	r2, [r5, #0]
 8011266:	68a2      	ldr	r2, [r4, #8]
 8011268:	3b01      	subs	r3, #1
 801126a:	3a01      	subs	r2, #1
 801126c:	606b      	str	r3, [r5, #4]
 801126e:	3701      	adds	r7, #1
 8011270:	60a2      	str	r2, [r4, #8]
 8011272:	b142      	cbz	r2, 8011286 <_scanf_chars+0x8e>
 8011274:	2b00      	cmp	r3, #0
 8011276:	dcd7      	bgt.n	8011228 <_scanf_chars+0x30>
 8011278:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801127c:	4629      	mov	r1, r5
 801127e:	4640      	mov	r0, r8
 8011280:	4798      	blx	r3
 8011282:	2800      	cmp	r0, #0
 8011284:	d0d0      	beq.n	8011228 <_scanf_chars+0x30>
 8011286:	6823      	ldr	r3, [r4, #0]
 8011288:	f013 0310 	ands.w	r3, r3, #16
 801128c:	d105      	bne.n	801129a <_scanf_chars+0xa2>
 801128e:	68e2      	ldr	r2, [r4, #12]
 8011290:	3201      	adds	r2, #1
 8011292:	60e2      	str	r2, [r4, #12]
 8011294:	69a2      	ldr	r2, [r4, #24]
 8011296:	b102      	cbz	r2, 801129a <_scanf_chars+0xa2>
 8011298:	7033      	strb	r3, [r6, #0]
 801129a:	6923      	ldr	r3, [r4, #16]
 801129c:	443b      	add	r3, r7
 801129e:	6123      	str	r3, [r4, #16]
 80112a0:	2000      	movs	r0, #0
 80112a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112a6:	bf00      	nop
 80112a8:	08012891 	.word	0x08012891

080112ac <_scanf_i>:
 80112ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112b0:	4698      	mov	r8, r3
 80112b2:	4b74      	ldr	r3, [pc, #464]	; (8011484 <_scanf_i+0x1d8>)
 80112b4:	460c      	mov	r4, r1
 80112b6:	4682      	mov	sl, r0
 80112b8:	4616      	mov	r6, r2
 80112ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80112be:	b087      	sub	sp, #28
 80112c0:	ab03      	add	r3, sp, #12
 80112c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80112c6:	4b70      	ldr	r3, [pc, #448]	; (8011488 <_scanf_i+0x1dc>)
 80112c8:	69a1      	ldr	r1, [r4, #24]
 80112ca:	4a70      	ldr	r2, [pc, #448]	; (801148c <_scanf_i+0x1e0>)
 80112cc:	2903      	cmp	r1, #3
 80112ce:	bf18      	it	ne
 80112d0:	461a      	movne	r2, r3
 80112d2:	68a3      	ldr	r3, [r4, #8]
 80112d4:	9201      	str	r2, [sp, #4]
 80112d6:	1e5a      	subs	r2, r3, #1
 80112d8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80112dc:	bf88      	it	hi
 80112de:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80112e2:	4627      	mov	r7, r4
 80112e4:	bf82      	ittt	hi
 80112e6:	eb03 0905 	addhi.w	r9, r3, r5
 80112ea:	f240 135d 	movwhi	r3, #349	; 0x15d
 80112ee:	60a3      	strhi	r3, [r4, #8]
 80112f0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80112f4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80112f8:	bf98      	it	ls
 80112fa:	f04f 0900 	movls.w	r9, #0
 80112fe:	6023      	str	r3, [r4, #0]
 8011300:	463d      	mov	r5, r7
 8011302:	f04f 0b00 	mov.w	fp, #0
 8011306:	6831      	ldr	r1, [r6, #0]
 8011308:	ab03      	add	r3, sp, #12
 801130a:	7809      	ldrb	r1, [r1, #0]
 801130c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8011310:	2202      	movs	r2, #2
 8011312:	f7ee ff5d 	bl	80001d0 <memchr>
 8011316:	b328      	cbz	r0, 8011364 <_scanf_i+0xb8>
 8011318:	f1bb 0f01 	cmp.w	fp, #1
 801131c:	d159      	bne.n	80113d2 <_scanf_i+0x126>
 801131e:	6862      	ldr	r2, [r4, #4]
 8011320:	b92a      	cbnz	r2, 801132e <_scanf_i+0x82>
 8011322:	6822      	ldr	r2, [r4, #0]
 8011324:	2308      	movs	r3, #8
 8011326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801132a:	6063      	str	r3, [r4, #4]
 801132c:	6022      	str	r2, [r4, #0]
 801132e:	6822      	ldr	r2, [r4, #0]
 8011330:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8011334:	6022      	str	r2, [r4, #0]
 8011336:	68a2      	ldr	r2, [r4, #8]
 8011338:	1e51      	subs	r1, r2, #1
 801133a:	60a1      	str	r1, [r4, #8]
 801133c:	b192      	cbz	r2, 8011364 <_scanf_i+0xb8>
 801133e:	6832      	ldr	r2, [r6, #0]
 8011340:	1c51      	adds	r1, r2, #1
 8011342:	6031      	str	r1, [r6, #0]
 8011344:	7812      	ldrb	r2, [r2, #0]
 8011346:	f805 2b01 	strb.w	r2, [r5], #1
 801134a:	6872      	ldr	r2, [r6, #4]
 801134c:	3a01      	subs	r2, #1
 801134e:	2a00      	cmp	r2, #0
 8011350:	6072      	str	r2, [r6, #4]
 8011352:	dc07      	bgt.n	8011364 <_scanf_i+0xb8>
 8011354:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8011358:	4631      	mov	r1, r6
 801135a:	4650      	mov	r0, sl
 801135c:	4790      	blx	r2
 801135e:	2800      	cmp	r0, #0
 8011360:	f040 8085 	bne.w	801146e <_scanf_i+0x1c2>
 8011364:	f10b 0b01 	add.w	fp, fp, #1
 8011368:	f1bb 0f03 	cmp.w	fp, #3
 801136c:	d1cb      	bne.n	8011306 <_scanf_i+0x5a>
 801136e:	6863      	ldr	r3, [r4, #4]
 8011370:	b90b      	cbnz	r3, 8011376 <_scanf_i+0xca>
 8011372:	230a      	movs	r3, #10
 8011374:	6063      	str	r3, [r4, #4]
 8011376:	6863      	ldr	r3, [r4, #4]
 8011378:	4945      	ldr	r1, [pc, #276]	; (8011490 <_scanf_i+0x1e4>)
 801137a:	6960      	ldr	r0, [r4, #20]
 801137c:	1ac9      	subs	r1, r1, r3
 801137e:	f000 f937 	bl	80115f0 <__sccl>
 8011382:	f04f 0b00 	mov.w	fp, #0
 8011386:	68a3      	ldr	r3, [r4, #8]
 8011388:	6822      	ldr	r2, [r4, #0]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d03d      	beq.n	801140a <_scanf_i+0x15e>
 801138e:	6831      	ldr	r1, [r6, #0]
 8011390:	6960      	ldr	r0, [r4, #20]
 8011392:	f891 c000 	ldrb.w	ip, [r1]
 8011396:	f810 000c 	ldrb.w	r0, [r0, ip]
 801139a:	2800      	cmp	r0, #0
 801139c:	d035      	beq.n	801140a <_scanf_i+0x15e>
 801139e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80113a2:	d124      	bne.n	80113ee <_scanf_i+0x142>
 80113a4:	0510      	lsls	r0, r2, #20
 80113a6:	d522      	bpl.n	80113ee <_scanf_i+0x142>
 80113a8:	f10b 0b01 	add.w	fp, fp, #1
 80113ac:	f1b9 0f00 	cmp.w	r9, #0
 80113b0:	d003      	beq.n	80113ba <_scanf_i+0x10e>
 80113b2:	3301      	adds	r3, #1
 80113b4:	f109 39ff 	add.w	r9, r9, #4294967295
 80113b8:	60a3      	str	r3, [r4, #8]
 80113ba:	6873      	ldr	r3, [r6, #4]
 80113bc:	3b01      	subs	r3, #1
 80113be:	2b00      	cmp	r3, #0
 80113c0:	6073      	str	r3, [r6, #4]
 80113c2:	dd1b      	ble.n	80113fc <_scanf_i+0x150>
 80113c4:	6833      	ldr	r3, [r6, #0]
 80113c6:	3301      	adds	r3, #1
 80113c8:	6033      	str	r3, [r6, #0]
 80113ca:	68a3      	ldr	r3, [r4, #8]
 80113cc:	3b01      	subs	r3, #1
 80113ce:	60a3      	str	r3, [r4, #8]
 80113d0:	e7d9      	b.n	8011386 <_scanf_i+0xda>
 80113d2:	f1bb 0f02 	cmp.w	fp, #2
 80113d6:	d1ae      	bne.n	8011336 <_scanf_i+0x8a>
 80113d8:	6822      	ldr	r2, [r4, #0]
 80113da:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80113de:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80113e2:	d1bf      	bne.n	8011364 <_scanf_i+0xb8>
 80113e4:	2310      	movs	r3, #16
 80113e6:	6063      	str	r3, [r4, #4]
 80113e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80113ec:	e7a2      	b.n	8011334 <_scanf_i+0x88>
 80113ee:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80113f2:	6022      	str	r2, [r4, #0]
 80113f4:	780b      	ldrb	r3, [r1, #0]
 80113f6:	f805 3b01 	strb.w	r3, [r5], #1
 80113fa:	e7de      	b.n	80113ba <_scanf_i+0x10e>
 80113fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011400:	4631      	mov	r1, r6
 8011402:	4650      	mov	r0, sl
 8011404:	4798      	blx	r3
 8011406:	2800      	cmp	r0, #0
 8011408:	d0df      	beq.n	80113ca <_scanf_i+0x11e>
 801140a:	6823      	ldr	r3, [r4, #0]
 801140c:	05d9      	lsls	r1, r3, #23
 801140e:	d50d      	bpl.n	801142c <_scanf_i+0x180>
 8011410:	42bd      	cmp	r5, r7
 8011412:	d909      	bls.n	8011428 <_scanf_i+0x17c>
 8011414:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011418:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801141c:	4632      	mov	r2, r6
 801141e:	4650      	mov	r0, sl
 8011420:	4798      	blx	r3
 8011422:	f105 39ff 	add.w	r9, r5, #4294967295
 8011426:	464d      	mov	r5, r9
 8011428:	42bd      	cmp	r5, r7
 801142a:	d028      	beq.n	801147e <_scanf_i+0x1d2>
 801142c:	6822      	ldr	r2, [r4, #0]
 801142e:	f012 0210 	ands.w	r2, r2, #16
 8011432:	d113      	bne.n	801145c <_scanf_i+0x1b0>
 8011434:	702a      	strb	r2, [r5, #0]
 8011436:	6863      	ldr	r3, [r4, #4]
 8011438:	9e01      	ldr	r6, [sp, #4]
 801143a:	4639      	mov	r1, r7
 801143c:	4650      	mov	r0, sl
 801143e:	47b0      	blx	r6
 8011440:	f8d8 3000 	ldr.w	r3, [r8]
 8011444:	6821      	ldr	r1, [r4, #0]
 8011446:	1d1a      	adds	r2, r3, #4
 8011448:	f8c8 2000 	str.w	r2, [r8]
 801144c:	f011 0f20 	tst.w	r1, #32
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	d00f      	beq.n	8011474 <_scanf_i+0x1c8>
 8011454:	6018      	str	r0, [r3, #0]
 8011456:	68e3      	ldr	r3, [r4, #12]
 8011458:	3301      	adds	r3, #1
 801145a:	60e3      	str	r3, [r4, #12]
 801145c:	6923      	ldr	r3, [r4, #16]
 801145e:	1bed      	subs	r5, r5, r7
 8011460:	445d      	add	r5, fp
 8011462:	442b      	add	r3, r5
 8011464:	6123      	str	r3, [r4, #16]
 8011466:	2000      	movs	r0, #0
 8011468:	b007      	add	sp, #28
 801146a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801146e:	f04f 0b00 	mov.w	fp, #0
 8011472:	e7ca      	b.n	801140a <_scanf_i+0x15e>
 8011474:	07ca      	lsls	r2, r1, #31
 8011476:	bf4c      	ite	mi
 8011478:	8018      	strhmi	r0, [r3, #0]
 801147a:	6018      	strpl	r0, [r3, #0]
 801147c:	e7eb      	b.n	8011456 <_scanf_i+0x1aa>
 801147e:	2001      	movs	r0, #1
 8011480:	e7f2      	b.n	8011468 <_scanf_i+0x1bc>
 8011482:	bf00      	nop
 8011484:	080125f0 	.word	0x080125f0
 8011488:	08011fd5 	.word	0x08011fd5
 801148c:	08010ba1 	.word	0x08010ba1
 8011490:	080129b2 	.word	0x080129b2

08011494 <__sflush_r>:
 8011494:	898a      	ldrh	r2, [r1, #12]
 8011496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801149a:	4605      	mov	r5, r0
 801149c:	0710      	lsls	r0, r2, #28
 801149e:	460c      	mov	r4, r1
 80114a0:	d458      	bmi.n	8011554 <__sflush_r+0xc0>
 80114a2:	684b      	ldr	r3, [r1, #4]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	dc05      	bgt.n	80114b4 <__sflush_r+0x20>
 80114a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	dc02      	bgt.n	80114b4 <__sflush_r+0x20>
 80114ae:	2000      	movs	r0, #0
 80114b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80114b6:	2e00      	cmp	r6, #0
 80114b8:	d0f9      	beq.n	80114ae <__sflush_r+0x1a>
 80114ba:	2300      	movs	r3, #0
 80114bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80114c0:	682f      	ldr	r7, [r5, #0]
 80114c2:	6a21      	ldr	r1, [r4, #32]
 80114c4:	602b      	str	r3, [r5, #0]
 80114c6:	d032      	beq.n	801152e <__sflush_r+0x9a>
 80114c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80114ca:	89a3      	ldrh	r3, [r4, #12]
 80114cc:	075a      	lsls	r2, r3, #29
 80114ce:	d505      	bpl.n	80114dc <__sflush_r+0x48>
 80114d0:	6863      	ldr	r3, [r4, #4]
 80114d2:	1ac0      	subs	r0, r0, r3
 80114d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80114d6:	b10b      	cbz	r3, 80114dc <__sflush_r+0x48>
 80114d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80114da:	1ac0      	subs	r0, r0, r3
 80114dc:	2300      	movs	r3, #0
 80114de:	4602      	mov	r2, r0
 80114e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80114e2:	6a21      	ldr	r1, [r4, #32]
 80114e4:	4628      	mov	r0, r5
 80114e6:	47b0      	blx	r6
 80114e8:	1c43      	adds	r3, r0, #1
 80114ea:	89a3      	ldrh	r3, [r4, #12]
 80114ec:	d106      	bne.n	80114fc <__sflush_r+0x68>
 80114ee:	6829      	ldr	r1, [r5, #0]
 80114f0:	291d      	cmp	r1, #29
 80114f2:	d82b      	bhi.n	801154c <__sflush_r+0xb8>
 80114f4:	4a29      	ldr	r2, [pc, #164]	; (801159c <__sflush_r+0x108>)
 80114f6:	410a      	asrs	r2, r1
 80114f8:	07d6      	lsls	r6, r2, #31
 80114fa:	d427      	bmi.n	801154c <__sflush_r+0xb8>
 80114fc:	2200      	movs	r2, #0
 80114fe:	6062      	str	r2, [r4, #4]
 8011500:	04d9      	lsls	r1, r3, #19
 8011502:	6922      	ldr	r2, [r4, #16]
 8011504:	6022      	str	r2, [r4, #0]
 8011506:	d504      	bpl.n	8011512 <__sflush_r+0x7e>
 8011508:	1c42      	adds	r2, r0, #1
 801150a:	d101      	bne.n	8011510 <__sflush_r+0x7c>
 801150c:	682b      	ldr	r3, [r5, #0]
 801150e:	b903      	cbnz	r3, 8011512 <__sflush_r+0x7e>
 8011510:	6560      	str	r0, [r4, #84]	; 0x54
 8011512:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011514:	602f      	str	r7, [r5, #0]
 8011516:	2900      	cmp	r1, #0
 8011518:	d0c9      	beq.n	80114ae <__sflush_r+0x1a>
 801151a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801151e:	4299      	cmp	r1, r3
 8011520:	d002      	beq.n	8011528 <__sflush_r+0x94>
 8011522:	4628      	mov	r0, r5
 8011524:	f7fd ffae 	bl	800f484 <_free_r>
 8011528:	2000      	movs	r0, #0
 801152a:	6360      	str	r0, [r4, #52]	; 0x34
 801152c:	e7c0      	b.n	80114b0 <__sflush_r+0x1c>
 801152e:	2301      	movs	r3, #1
 8011530:	4628      	mov	r0, r5
 8011532:	47b0      	blx	r6
 8011534:	1c41      	adds	r1, r0, #1
 8011536:	d1c8      	bne.n	80114ca <__sflush_r+0x36>
 8011538:	682b      	ldr	r3, [r5, #0]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d0c5      	beq.n	80114ca <__sflush_r+0x36>
 801153e:	2b1d      	cmp	r3, #29
 8011540:	d001      	beq.n	8011546 <__sflush_r+0xb2>
 8011542:	2b16      	cmp	r3, #22
 8011544:	d101      	bne.n	801154a <__sflush_r+0xb6>
 8011546:	602f      	str	r7, [r5, #0]
 8011548:	e7b1      	b.n	80114ae <__sflush_r+0x1a>
 801154a:	89a3      	ldrh	r3, [r4, #12]
 801154c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011550:	81a3      	strh	r3, [r4, #12]
 8011552:	e7ad      	b.n	80114b0 <__sflush_r+0x1c>
 8011554:	690f      	ldr	r7, [r1, #16]
 8011556:	2f00      	cmp	r7, #0
 8011558:	d0a9      	beq.n	80114ae <__sflush_r+0x1a>
 801155a:	0793      	lsls	r3, r2, #30
 801155c:	680e      	ldr	r6, [r1, #0]
 801155e:	bf08      	it	eq
 8011560:	694b      	ldreq	r3, [r1, #20]
 8011562:	600f      	str	r7, [r1, #0]
 8011564:	bf18      	it	ne
 8011566:	2300      	movne	r3, #0
 8011568:	eba6 0807 	sub.w	r8, r6, r7
 801156c:	608b      	str	r3, [r1, #8]
 801156e:	f1b8 0f00 	cmp.w	r8, #0
 8011572:	dd9c      	ble.n	80114ae <__sflush_r+0x1a>
 8011574:	6a21      	ldr	r1, [r4, #32]
 8011576:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011578:	4643      	mov	r3, r8
 801157a:	463a      	mov	r2, r7
 801157c:	4628      	mov	r0, r5
 801157e:	47b0      	blx	r6
 8011580:	2800      	cmp	r0, #0
 8011582:	dc06      	bgt.n	8011592 <__sflush_r+0xfe>
 8011584:	89a3      	ldrh	r3, [r4, #12]
 8011586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801158a:	81a3      	strh	r3, [r4, #12]
 801158c:	f04f 30ff 	mov.w	r0, #4294967295
 8011590:	e78e      	b.n	80114b0 <__sflush_r+0x1c>
 8011592:	4407      	add	r7, r0
 8011594:	eba8 0800 	sub.w	r8, r8, r0
 8011598:	e7e9      	b.n	801156e <__sflush_r+0xda>
 801159a:	bf00      	nop
 801159c:	dfbffffe 	.word	0xdfbffffe

080115a0 <_fflush_r>:
 80115a0:	b538      	push	{r3, r4, r5, lr}
 80115a2:	690b      	ldr	r3, [r1, #16]
 80115a4:	4605      	mov	r5, r0
 80115a6:	460c      	mov	r4, r1
 80115a8:	b913      	cbnz	r3, 80115b0 <_fflush_r+0x10>
 80115aa:	2500      	movs	r5, #0
 80115ac:	4628      	mov	r0, r5
 80115ae:	bd38      	pop	{r3, r4, r5, pc}
 80115b0:	b118      	cbz	r0, 80115ba <_fflush_r+0x1a>
 80115b2:	6a03      	ldr	r3, [r0, #32]
 80115b4:	b90b      	cbnz	r3, 80115ba <_fflush_r+0x1a>
 80115b6:	f7fc ff3b 	bl	800e430 <__sinit>
 80115ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d0f3      	beq.n	80115aa <_fflush_r+0xa>
 80115c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80115c4:	07d0      	lsls	r0, r2, #31
 80115c6:	d404      	bmi.n	80115d2 <_fflush_r+0x32>
 80115c8:	0599      	lsls	r1, r3, #22
 80115ca:	d402      	bmi.n	80115d2 <_fflush_r+0x32>
 80115cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115ce:	f7fd f8c6 	bl	800e75e <__retarget_lock_acquire_recursive>
 80115d2:	4628      	mov	r0, r5
 80115d4:	4621      	mov	r1, r4
 80115d6:	f7ff ff5d 	bl	8011494 <__sflush_r>
 80115da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80115dc:	07da      	lsls	r2, r3, #31
 80115de:	4605      	mov	r5, r0
 80115e0:	d4e4      	bmi.n	80115ac <_fflush_r+0xc>
 80115e2:	89a3      	ldrh	r3, [r4, #12]
 80115e4:	059b      	lsls	r3, r3, #22
 80115e6:	d4e1      	bmi.n	80115ac <_fflush_r+0xc>
 80115e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115ea:	f7fd f8b9 	bl	800e760 <__retarget_lock_release_recursive>
 80115ee:	e7dd      	b.n	80115ac <_fflush_r+0xc>

080115f0 <__sccl>:
 80115f0:	b570      	push	{r4, r5, r6, lr}
 80115f2:	780b      	ldrb	r3, [r1, #0]
 80115f4:	4604      	mov	r4, r0
 80115f6:	2b5e      	cmp	r3, #94	; 0x5e
 80115f8:	bf0b      	itete	eq
 80115fa:	784b      	ldrbeq	r3, [r1, #1]
 80115fc:	1c4a      	addne	r2, r1, #1
 80115fe:	1c8a      	addeq	r2, r1, #2
 8011600:	2100      	movne	r1, #0
 8011602:	bf08      	it	eq
 8011604:	2101      	moveq	r1, #1
 8011606:	3801      	subs	r0, #1
 8011608:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801160c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011610:	42a8      	cmp	r0, r5
 8011612:	d1fb      	bne.n	801160c <__sccl+0x1c>
 8011614:	b90b      	cbnz	r3, 801161a <__sccl+0x2a>
 8011616:	1e50      	subs	r0, r2, #1
 8011618:	bd70      	pop	{r4, r5, r6, pc}
 801161a:	f081 0101 	eor.w	r1, r1, #1
 801161e:	54e1      	strb	r1, [r4, r3]
 8011620:	4610      	mov	r0, r2
 8011622:	4602      	mov	r2, r0
 8011624:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011628:	2d2d      	cmp	r5, #45	; 0x2d
 801162a:	d005      	beq.n	8011638 <__sccl+0x48>
 801162c:	2d5d      	cmp	r5, #93	; 0x5d
 801162e:	d016      	beq.n	801165e <__sccl+0x6e>
 8011630:	2d00      	cmp	r5, #0
 8011632:	d0f1      	beq.n	8011618 <__sccl+0x28>
 8011634:	462b      	mov	r3, r5
 8011636:	e7f2      	b.n	801161e <__sccl+0x2e>
 8011638:	7846      	ldrb	r6, [r0, #1]
 801163a:	2e5d      	cmp	r6, #93	; 0x5d
 801163c:	d0fa      	beq.n	8011634 <__sccl+0x44>
 801163e:	42b3      	cmp	r3, r6
 8011640:	dcf8      	bgt.n	8011634 <__sccl+0x44>
 8011642:	3002      	adds	r0, #2
 8011644:	461a      	mov	r2, r3
 8011646:	3201      	adds	r2, #1
 8011648:	4296      	cmp	r6, r2
 801164a:	54a1      	strb	r1, [r4, r2]
 801164c:	dcfb      	bgt.n	8011646 <__sccl+0x56>
 801164e:	1af2      	subs	r2, r6, r3
 8011650:	3a01      	subs	r2, #1
 8011652:	1c5d      	adds	r5, r3, #1
 8011654:	42b3      	cmp	r3, r6
 8011656:	bfa8      	it	ge
 8011658:	2200      	movge	r2, #0
 801165a:	18ab      	adds	r3, r5, r2
 801165c:	e7e1      	b.n	8011622 <__sccl+0x32>
 801165e:	4610      	mov	r0, r2
 8011660:	e7da      	b.n	8011618 <__sccl+0x28>

08011662 <__submore>:
 8011662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011666:	460c      	mov	r4, r1
 8011668:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801166a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801166e:	4299      	cmp	r1, r3
 8011670:	d11d      	bne.n	80116ae <__submore+0x4c>
 8011672:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011676:	f7fb ff4d 	bl	800d514 <_malloc_r>
 801167a:	b918      	cbnz	r0, 8011684 <__submore+0x22>
 801167c:	f04f 30ff 	mov.w	r0, #4294967295
 8011680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011688:	63a3      	str	r3, [r4, #56]	; 0x38
 801168a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801168e:	6360      	str	r0, [r4, #52]	; 0x34
 8011690:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8011694:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011698:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801169c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80116a0:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80116a4:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80116a8:	6020      	str	r0, [r4, #0]
 80116aa:	2000      	movs	r0, #0
 80116ac:	e7e8      	b.n	8011680 <__submore+0x1e>
 80116ae:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80116b0:	0077      	lsls	r7, r6, #1
 80116b2:	463a      	mov	r2, r7
 80116b4:	f000 fbed 	bl	8011e92 <_realloc_r>
 80116b8:	4605      	mov	r5, r0
 80116ba:	2800      	cmp	r0, #0
 80116bc:	d0de      	beq.n	801167c <__submore+0x1a>
 80116be:	eb00 0806 	add.w	r8, r0, r6
 80116c2:	4601      	mov	r1, r0
 80116c4:	4632      	mov	r2, r6
 80116c6:	4640      	mov	r0, r8
 80116c8:	f7fd f84b 	bl	800e762 <memcpy>
 80116cc:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80116d0:	f8c4 8000 	str.w	r8, [r4]
 80116d4:	e7e9      	b.n	80116aa <__submore+0x48>

080116d6 <memmove>:
 80116d6:	4288      	cmp	r0, r1
 80116d8:	b510      	push	{r4, lr}
 80116da:	eb01 0402 	add.w	r4, r1, r2
 80116de:	d902      	bls.n	80116e6 <memmove+0x10>
 80116e0:	4284      	cmp	r4, r0
 80116e2:	4623      	mov	r3, r4
 80116e4:	d807      	bhi.n	80116f6 <memmove+0x20>
 80116e6:	1e43      	subs	r3, r0, #1
 80116e8:	42a1      	cmp	r1, r4
 80116ea:	d008      	beq.n	80116fe <memmove+0x28>
 80116ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80116f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80116f4:	e7f8      	b.n	80116e8 <memmove+0x12>
 80116f6:	4402      	add	r2, r0
 80116f8:	4601      	mov	r1, r0
 80116fa:	428a      	cmp	r2, r1
 80116fc:	d100      	bne.n	8011700 <memmove+0x2a>
 80116fe:	bd10      	pop	{r4, pc}
 8011700:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011704:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011708:	e7f7      	b.n	80116fa <memmove+0x24>

0801170a <strncmp>:
 801170a:	b510      	push	{r4, lr}
 801170c:	b16a      	cbz	r2, 801172a <strncmp+0x20>
 801170e:	3901      	subs	r1, #1
 8011710:	1884      	adds	r4, r0, r2
 8011712:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011716:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801171a:	429a      	cmp	r2, r3
 801171c:	d103      	bne.n	8011726 <strncmp+0x1c>
 801171e:	42a0      	cmp	r0, r4
 8011720:	d001      	beq.n	8011726 <strncmp+0x1c>
 8011722:	2a00      	cmp	r2, #0
 8011724:	d1f5      	bne.n	8011712 <strncmp+0x8>
 8011726:	1ad0      	subs	r0, r2, r3
 8011728:	bd10      	pop	{r4, pc}
 801172a:	4610      	mov	r0, r2
 801172c:	e7fc      	b.n	8011728 <strncmp+0x1e>

0801172e <strnlen>:
 801172e:	b510      	push	{r4, lr}
 8011730:	4602      	mov	r2, r0
 8011732:	4401      	add	r1, r0
 8011734:	428a      	cmp	r2, r1
 8011736:	4613      	mov	r3, r2
 8011738:	d003      	beq.n	8011742 <strnlen+0x14>
 801173a:	781c      	ldrb	r4, [r3, #0]
 801173c:	3201      	adds	r2, #1
 801173e:	2c00      	cmp	r4, #0
 8011740:	d1f8      	bne.n	8011734 <strnlen+0x6>
 8011742:	1a18      	subs	r0, r3, r0
 8011744:	bd10      	pop	{r4, pc}
	...

08011748 <nan>:
 8011748:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011750 <nan+0x8>
 801174c:	4770      	bx	lr
 801174e:	bf00      	nop
 8011750:	00000000 	.word	0x00000000
 8011754:	7ff80000 	.word	0x7ff80000

08011758 <__assert_func>:
 8011758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801175a:	4614      	mov	r4, r2
 801175c:	461a      	mov	r2, r3
 801175e:	4b09      	ldr	r3, [pc, #36]	; (8011784 <__assert_func+0x2c>)
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	4605      	mov	r5, r0
 8011764:	68d8      	ldr	r0, [r3, #12]
 8011766:	b14c      	cbz	r4, 801177c <__assert_func+0x24>
 8011768:	4b07      	ldr	r3, [pc, #28]	; (8011788 <__assert_func+0x30>)
 801176a:	9100      	str	r1, [sp, #0]
 801176c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011770:	4906      	ldr	r1, [pc, #24]	; (801178c <__assert_func+0x34>)
 8011772:	462b      	mov	r3, r5
 8011774:	f000 fc3e 	bl	8011ff4 <fiprintf>
 8011778:	f000 fc4e 	bl	8012018 <abort>
 801177c:	4b04      	ldr	r3, [pc, #16]	; (8011790 <__assert_func+0x38>)
 801177e:	461c      	mov	r4, r3
 8011780:	e7f3      	b.n	801176a <__assert_func+0x12>
 8011782:	bf00      	nop
 8011784:	20000084 	.word	0x20000084
 8011788:	080129c5 	.word	0x080129c5
 801178c:	080129d2 	.word	0x080129d2
 8011790:	08012a00 	.word	0x08012a00

08011794 <_calloc_r>:
 8011794:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011796:	fba1 2402 	umull	r2, r4, r1, r2
 801179a:	b94c      	cbnz	r4, 80117b0 <_calloc_r+0x1c>
 801179c:	4611      	mov	r1, r2
 801179e:	9201      	str	r2, [sp, #4]
 80117a0:	f7fb feb8 	bl	800d514 <_malloc_r>
 80117a4:	9a01      	ldr	r2, [sp, #4]
 80117a6:	4605      	mov	r5, r0
 80117a8:	b930      	cbnz	r0, 80117b8 <_calloc_r+0x24>
 80117aa:	4628      	mov	r0, r5
 80117ac:	b003      	add	sp, #12
 80117ae:	bd30      	pop	{r4, r5, pc}
 80117b0:	220c      	movs	r2, #12
 80117b2:	6002      	str	r2, [r0, #0]
 80117b4:	2500      	movs	r5, #0
 80117b6:	e7f8      	b.n	80117aa <_calloc_r+0x16>
 80117b8:	4621      	mov	r1, r4
 80117ba:	f7fc ff00 	bl	800e5be <memset>
 80117be:	e7f4      	b.n	80117aa <_calloc_r+0x16>

080117c0 <rshift>:
 80117c0:	6903      	ldr	r3, [r0, #16]
 80117c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80117c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80117ca:	ea4f 1261 	mov.w	r2, r1, asr #5
 80117ce:	f100 0414 	add.w	r4, r0, #20
 80117d2:	dd45      	ble.n	8011860 <rshift+0xa0>
 80117d4:	f011 011f 	ands.w	r1, r1, #31
 80117d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80117dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80117e0:	d10c      	bne.n	80117fc <rshift+0x3c>
 80117e2:	f100 0710 	add.w	r7, r0, #16
 80117e6:	4629      	mov	r1, r5
 80117e8:	42b1      	cmp	r1, r6
 80117ea:	d334      	bcc.n	8011856 <rshift+0x96>
 80117ec:	1a9b      	subs	r3, r3, r2
 80117ee:	009b      	lsls	r3, r3, #2
 80117f0:	1eea      	subs	r2, r5, #3
 80117f2:	4296      	cmp	r6, r2
 80117f4:	bf38      	it	cc
 80117f6:	2300      	movcc	r3, #0
 80117f8:	4423      	add	r3, r4
 80117fa:	e015      	b.n	8011828 <rshift+0x68>
 80117fc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011800:	f1c1 0820 	rsb	r8, r1, #32
 8011804:	40cf      	lsrs	r7, r1
 8011806:	f105 0e04 	add.w	lr, r5, #4
 801180a:	46a1      	mov	r9, r4
 801180c:	4576      	cmp	r6, lr
 801180e:	46f4      	mov	ip, lr
 8011810:	d815      	bhi.n	801183e <rshift+0x7e>
 8011812:	1a9a      	subs	r2, r3, r2
 8011814:	0092      	lsls	r2, r2, #2
 8011816:	3a04      	subs	r2, #4
 8011818:	3501      	adds	r5, #1
 801181a:	42ae      	cmp	r6, r5
 801181c:	bf38      	it	cc
 801181e:	2200      	movcc	r2, #0
 8011820:	18a3      	adds	r3, r4, r2
 8011822:	50a7      	str	r7, [r4, r2]
 8011824:	b107      	cbz	r7, 8011828 <rshift+0x68>
 8011826:	3304      	adds	r3, #4
 8011828:	1b1a      	subs	r2, r3, r4
 801182a:	42a3      	cmp	r3, r4
 801182c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011830:	bf08      	it	eq
 8011832:	2300      	moveq	r3, #0
 8011834:	6102      	str	r2, [r0, #16]
 8011836:	bf08      	it	eq
 8011838:	6143      	streq	r3, [r0, #20]
 801183a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801183e:	f8dc c000 	ldr.w	ip, [ip]
 8011842:	fa0c fc08 	lsl.w	ip, ip, r8
 8011846:	ea4c 0707 	orr.w	r7, ip, r7
 801184a:	f849 7b04 	str.w	r7, [r9], #4
 801184e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011852:	40cf      	lsrs	r7, r1
 8011854:	e7da      	b.n	801180c <rshift+0x4c>
 8011856:	f851 cb04 	ldr.w	ip, [r1], #4
 801185a:	f847 cf04 	str.w	ip, [r7, #4]!
 801185e:	e7c3      	b.n	80117e8 <rshift+0x28>
 8011860:	4623      	mov	r3, r4
 8011862:	e7e1      	b.n	8011828 <rshift+0x68>

08011864 <__hexdig_fun>:
 8011864:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011868:	2b09      	cmp	r3, #9
 801186a:	d802      	bhi.n	8011872 <__hexdig_fun+0xe>
 801186c:	3820      	subs	r0, #32
 801186e:	b2c0      	uxtb	r0, r0
 8011870:	4770      	bx	lr
 8011872:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011876:	2b05      	cmp	r3, #5
 8011878:	d801      	bhi.n	801187e <__hexdig_fun+0x1a>
 801187a:	3847      	subs	r0, #71	; 0x47
 801187c:	e7f7      	b.n	801186e <__hexdig_fun+0xa>
 801187e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011882:	2b05      	cmp	r3, #5
 8011884:	d801      	bhi.n	801188a <__hexdig_fun+0x26>
 8011886:	3827      	subs	r0, #39	; 0x27
 8011888:	e7f1      	b.n	801186e <__hexdig_fun+0xa>
 801188a:	2000      	movs	r0, #0
 801188c:	4770      	bx	lr
	...

08011890 <__gethex>:
 8011890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011894:	4617      	mov	r7, r2
 8011896:	680a      	ldr	r2, [r1, #0]
 8011898:	b085      	sub	sp, #20
 801189a:	f102 0b02 	add.w	fp, r2, #2
 801189e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80118a2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80118a6:	4681      	mov	r9, r0
 80118a8:	468a      	mov	sl, r1
 80118aa:	9302      	str	r3, [sp, #8]
 80118ac:	32fe      	adds	r2, #254	; 0xfe
 80118ae:	eb02 030b 	add.w	r3, r2, fp
 80118b2:	46d8      	mov	r8, fp
 80118b4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80118b8:	9301      	str	r3, [sp, #4]
 80118ba:	2830      	cmp	r0, #48	; 0x30
 80118bc:	d0f7      	beq.n	80118ae <__gethex+0x1e>
 80118be:	f7ff ffd1 	bl	8011864 <__hexdig_fun>
 80118c2:	4604      	mov	r4, r0
 80118c4:	2800      	cmp	r0, #0
 80118c6:	d138      	bne.n	801193a <__gethex+0xaa>
 80118c8:	49a7      	ldr	r1, [pc, #668]	; (8011b68 <__gethex+0x2d8>)
 80118ca:	2201      	movs	r2, #1
 80118cc:	4640      	mov	r0, r8
 80118ce:	f7ff ff1c 	bl	801170a <strncmp>
 80118d2:	4606      	mov	r6, r0
 80118d4:	2800      	cmp	r0, #0
 80118d6:	d169      	bne.n	80119ac <__gethex+0x11c>
 80118d8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80118dc:	465d      	mov	r5, fp
 80118de:	f7ff ffc1 	bl	8011864 <__hexdig_fun>
 80118e2:	2800      	cmp	r0, #0
 80118e4:	d064      	beq.n	80119b0 <__gethex+0x120>
 80118e6:	465a      	mov	r2, fp
 80118e8:	7810      	ldrb	r0, [r2, #0]
 80118ea:	2830      	cmp	r0, #48	; 0x30
 80118ec:	4690      	mov	r8, r2
 80118ee:	f102 0201 	add.w	r2, r2, #1
 80118f2:	d0f9      	beq.n	80118e8 <__gethex+0x58>
 80118f4:	f7ff ffb6 	bl	8011864 <__hexdig_fun>
 80118f8:	2301      	movs	r3, #1
 80118fa:	fab0 f480 	clz	r4, r0
 80118fe:	0964      	lsrs	r4, r4, #5
 8011900:	465e      	mov	r6, fp
 8011902:	9301      	str	r3, [sp, #4]
 8011904:	4642      	mov	r2, r8
 8011906:	4615      	mov	r5, r2
 8011908:	3201      	adds	r2, #1
 801190a:	7828      	ldrb	r0, [r5, #0]
 801190c:	f7ff ffaa 	bl	8011864 <__hexdig_fun>
 8011910:	2800      	cmp	r0, #0
 8011912:	d1f8      	bne.n	8011906 <__gethex+0x76>
 8011914:	4994      	ldr	r1, [pc, #592]	; (8011b68 <__gethex+0x2d8>)
 8011916:	2201      	movs	r2, #1
 8011918:	4628      	mov	r0, r5
 801191a:	f7ff fef6 	bl	801170a <strncmp>
 801191e:	b978      	cbnz	r0, 8011940 <__gethex+0xb0>
 8011920:	b946      	cbnz	r6, 8011934 <__gethex+0xa4>
 8011922:	1c6e      	adds	r6, r5, #1
 8011924:	4632      	mov	r2, r6
 8011926:	4615      	mov	r5, r2
 8011928:	3201      	adds	r2, #1
 801192a:	7828      	ldrb	r0, [r5, #0]
 801192c:	f7ff ff9a 	bl	8011864 <__hexdig_fun>
 8011930:	2800      	cmp	r0, #0
 8011932:	d1f8      	bne.n	8011926 <__gethex+0x96>
 8011934:	1b73      	subs	r3, r6, r5
 8011936:	009e      	lsls	r6, r3, #2
 8011938:	e004      	b.n	8011944 <__gethex+0xb4>
 801193a:	2400      	movs	r4, #0
 801193c:	4626      	mov	r6, r4
 801193e:	e7e1      	b.n	8011904 <__gethex+0x74>
 8011940:	2e00      	cmp	r6, #0
 8011942:	d1f7      	bne.n	8011934 <__gethex+0xa4>
 8011944:	782b      	ldrb	r3, [r5, #0]
 8011946:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801194a:	2b50      	cmp	r3, #80	; 0x50
 801194c:	d13d      	bne.n	80119ca <__gethex+0x13a>
 801194e:	786b      	ldrb	r3, [r5, #1]
 8011950:	2b2b      	cmp	r3, #43	; 0x2b
 8011952:	d02f      	beq.n	80119b4 <__gethex+0x124>
 8011954:	2b2d      	cmp	r3, #45	; 0x2d
 8011956:	d031      	beq.n	80119bc <__gethex+0x12c>
 8011958:	1c69      	adds	r1, r5, #1
 801195a:	f04f 0b00 	mov.w	fp, #0
 801195e:	7808      	ldrb	r0, [r1, #0]
 8011960:	f7ff ff80 	bl	8011864 <__hexdig_fun>
 8011964:	1e42      	subs	r2, r0, #1
 8011966:	b2d2      	uxtb	r2, r2
 8011968:	2a18      	cmp	r2, #24
 801196a:	d82e      	bhi.n	80119ca <__gethex+0x13a>
 801196c:	f1a0 0210 	sub.w	r2, r0, #16
 8011970:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011974:	f7ff ff76 	bl	8011864 <__hexdig_fun>
 8011978:	f100 3cff 	add.w	ip, r0, #4294967295
 801197c:	fa5f fc8c 	uxtb.w	ip, ip
 8011980:	f1bc 0f18 	cmp.w	ip, #24
 8011984:	d91d      	bls.n	80119c2 <__gethex+0x132>
 8011986:	f1bb 0f00 	cmp.w	fp, #0
 801198a:	d000      	beq.n	801198e <__gethex+0xfe>
 801198c:	4252      	negs	r2, r2
 801198e:	4416      	add	r6, r2
 8011990:	f8ca 1000 	str.w	r1, [sl]
 8011994:	b1dc      	cbz	r4, 80119ce <__gethex+0x13e>
 8011996:	9b01      	ldr	r3, [sp, #4]
 8011998:	2b00      	cmp	r3, #0
 801199a:	bf14      	ite	ne
 801199c:	f04f 0800 	movne.w	r8, #0
 80119a0:	f04f 0806 	moveq.w	r8, #6
 80119a4:	4640      	mov	r0, r8
 80119a6:	b005      	add	sp, #20
 80119a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119ac:	4645      	mov	r5, r8
 80119ae:	4626      	mov	r6, r4
 80119b0:	2401      	movs	r4, #1
 80119b2:	e7c7      	b.n	8011944 <__gethex+0xb4>
 80119b4:	f04f 0b00 	mov.w	fp, #0
 80119b8:	1ca9      	adds	r1, r5, #2
 80119ba:	e7d0      	b.n	801195e <__gethex+0xce>
 80119bc:	f04f 0b01 	mov.w	fp, #1
 80119c0:	e7fa      	b.n	80119b8 <__gethex+0x128>
 80119c2:	230a      	movs	r3, #10
 80119c4:	fb03 0002 	mla	r0, r3, r2, r0
 80119c8:	e7d0      	b.n	801196c <__gethex+0xdc>
 80119ca:	4629      	mov	r1, r5
 80119cc:	e7e0      	b.n	8011990 <__gethex+0x100>
 80119ce:	eba5 0308 	sub.w	r3, r5, r8
 80119d2:	3b01      	subs	r3, #1
 80119d4:	4621      	mov	r1, r4
 80119d6:	2b07      	cmp	r3, #7
 80119d8:	dc0a      	bgt.n	80119f0 <__gethex+0x160>
 80119da:	4648      	mov	r0, r9
 80119dc:	f7fd fd9e 	bl	800f51c <_Balloc>
 80119e0:	4604      	mov	r4, r0
 80119e2:	b940      	cbnz	r0, 80119f6 <__gethex+0x166>
 80119e4:	4b61      	ldr	r3, [pc, #388]	; (8011b6c <__gethex+0x2dc>)
 80119e6:	4602      	mov	r2, r0
 80119e8:	21e4      	movs	r1, #228	; 0xe4
 80119ea:	4861      	ldr	r0, [pc, #388]	; (8011b70 <__gethex+0x2e0>)
 80119ec:	f7ff feb4 	bl	8011758 <__assert_func>
 80119f0:	3101      	adds	r1, #1
 80119f2:	105b      	asrs	r3, r3, #1
 80119f4:	e7ef      	b.n	80119d6 <__gethex+0x146>
 80119f6:	f100 0a14 	add.w	sl, r0, #20
 80119fa:	2300      	movs	r3, #0
 80119fc:	495a      	ldr	r1, [pc, #360]	; (8011b68 <__gethex+0x2d8>)
 80119fe:	f8cd a004 	str.w	sl, [sp, #4]
 8011a02:	469b      	mov	fp, r3
 8011a04:	45a8      	cmp	r8, r5
 8011a06:	d342      	bcc.n	8011a8e <__gethex+0x1fe>
 8011a08:	9801      	ldr	r0, [sp, #4]
 8011a0a:	f840 bb04 	str.w	fp, [r0], #4
 8011a0e:	eba0 000a 	sub.w	r0, r0, sl
 8011a12:	1080      	asrs	r0, r0, #2
 8011a14:	6120      	str	r0, [r4, #16]
 8011a16:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8011a1a:	4658      	mov	r0, fp
 8011a1c:	f7fd fe70 	bl	800f700 <__hi0bits>
 8011a20:	683d      	ldr	r5, [r7, #0]
 8011a22:	eba8 0000 	sub.w	r0, r8, r0
 8011a26:	42a8      	cmp	r0, r5
 8011a28:	dd59      	ble.n	8011ade <__gethex+0x24e>
 8011a2a:	eba0 0805 	sub.w	r8, r0, r5
 8011a2e:	4641      	mov	r1, r8
 8011a30:	4620      	mov	r0, r4
 8011a32:	f7fe f9ff 	bl	800fe34 <__any_on>
 8011a36:	4683      	mov	fp, r0
 8011a38:	b1b8      	cbz	r0, 8011a6a <__gethex+0x1da>
 8011a3a:	f108 33ff 	add.w	r3, r8, #4294967295
 8011a3e:	1159      	asrs	r1, r3, #5
 8011a40:	f003 021f 	and.w	r2, r3, #31
 8011a44:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011a48:	f04f 0b01 	mov.w	fp, #1
 8011a4c:	fa0b f202 	lsl.w	r2, fp, r2
 8011a50:	420a      	tst	r2, r1
 8011a52:	d00a      	beq.n	8011a6a <__gethex+0x1da>
 8011a54:	455b      	cmp	r3, fp
 8011a56:	dd06      	ble.n	8011a66 <__gethex+0x1d6>
 8011a58:	f1a8 0102 	sub.w	r1, r8, #2
 8011a5c:	4620      	mov	r0, r4
 8011a5e:	f7fe f9e9 	bl	800fe34 <__any_on>
 8011a62:	2800      	cmp	r0, #0
 8011a64:	d138      	bne.n	8011ad8 <__gethex+0x248>
 8011a66:	f04f 0b02 	mov.w	fp, #2
 8011a6a:	4641      	mov	r1, r8
 8011a6c:	4620      	mov	r0, r4
 8011a6e:	f7ff fea7 	bl	80117c0 <rshift>
 8011a72:	4446      	add	r6, r8
 8011a74:	68bb      	ldr	r3, [r7, #8]
 8011a76:	42b3      	cmp	r3, r6
 8011a78:	da41      	bge.n	8011afe <__gethex+0x26e>
 8011a7a:	4621      	mov	r1, r4
 8011a7c:	4648      	mov	r0, r9
 8011a7e:	f7fd fd8d 	bl	800f59c <_Bfree>
 8011a82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011a84:	2300      	movs	r3, #0
 8011a86:	6013      	str	r3, [r2, #0]
 8011a88:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8011a8c:	e78a      	b.n	80119a4 <__gethex+0x114>
 8011a8e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8011a92:	2a2e      	cmp	r2, #46	; 0x2e
 8011a94:	d014      	beq.n	8011ac0 <__gethex+0x230>
 8011a96:	2b20      	cmp	r3, #32
 8011a98:	d106      	bne.n	8011aa8 <__gethex+0x218>
 8011a9a:	9b01      	ldr	r3, [sp, #4]
 8011a9c:	f843 bb04 	str.w	fp, [r3], #4
 8011aa0:	f04f 0b00 	mov.w	fp, #0
 8011aa4:	9301      	str	r3, [sp, #4]
 8011aa6:	465b      	mov	r3, fp
 8011aa8:	7828      	ldrb	r0, [r5, #0]
 8011aaa:	9303      	str	r3, [sp, #12]
 8011aac:	f7ff feda 	bl	8011864 <__hexdig_fun>
 8011ab0:	9b03      	ldr	r3, [sp, #12]
 8011ab2:	f000 000f 	and.w	r0, r0, #15
 8011ab6:	4098      	lsls	r0, r3
 8011ab8:	ea4b 0b00 	orr.w	fp, fp, r0
 8011abc:	3304      	adds	r3, #4
 8011abe:	e7a1      	b.n	8011a04 <__gethex+0x174>
 8011ac0:	45a8      	cmp	r8, r5
 8011ac2:	d8e8      	bhi.n	8011a96 <__gethex+0x206>
 8011ac4:	2201      	movs	r2, #1
 8011ac6:	4628      	mov	r0, r5
 8011ac8:	9303      	str	r3, [sp, #12]
 8011aca:	f7ff fe1e 	bl	801170a <strncmp>
 8011ace:	4926      	ldr	r1, [pc, #152]	; (8011b68 <__gethex+0x2d8>)
 8011ad0:	9b03      	ldr	r3, [sp, #12]
 8011ad2:	2800      	cmp	r0, #0
 8011ad4:	d1df      	bne.n	8011a96 <__gethex+0x206>
 8011ad6:	e795      	b.n	8011a04 <__gethex+0x174>
 8011ad8:	f04f 0b03 	mov.w	fp, #3
 8011adc:	e7c5      	b.n	8011a6a <__gethex+0x1da>
 8011ade:	da0b      	bge.n	8011af8 <__gethex+0x268>
 8011ae0:	eba5 0800 	sub.w	r8, r5, r0
 8011ae4:	4621      	mov	r1, r4
 8011ae6:	4642      	mov	r2, r8
 8011ae8:	4648      	mov	r0, r9
 8011aea:	f7fd ff71 	bl	800f9d0 <__lshift>
 8011aee:	eba6 0608 	sub.w	r6, r6, r8
 8011af2:	4604      	mov	r4, r0
 8011af4:	f100 0a14 	add.w	sl, r0, #20
 8011af8:	f04f 0b00 	mov.w	fp, #0
 8011afc:	e7ba      	b.n	8011a74 <__gethex+0x1e4>
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	42b3      	cmp	r3, r6
 8011b02:	dd73      	ble.n	8011bec <__gethex+0x35c>
 8011b04:	1b9e      	subs	r6, r3, r6
 8011b06:	42b5      	cmp	r5, r6
 8011b08:	dc34      	bgt.n	8011b74 <__gethex+0x2e4>
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	2b02      	cmp	r3, #2
 8011b0e:	d023      	beq.n	8011b58 <__gethex+0x2c8>
 8011b10:	2b03      	cmp	r3, #3
 8011b12:	d025      	beq.n	8011b60 <__gethex+0x2d0>
 8011b14:	2b01      	cmp	r3, #1
 8011b16:	d115      	bne.n	8011b44 <__gethex+0x2b4>
 8011b18:	42b5      	cmp	r5, r6
 8011b1a:	d113      	bne.n	8011b44 <__gethex+0x2b4>
 8011b1c:	2d01      	cmp	r5, #1
 8011b1e:	d10b      	bne.n	8011b38 <__gethex+0x2a8>
 8011b20:	9a02      	ldr	r2, [sp, #8]
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	6013      	str	r3, [r2, #0]
 8011b26:	2301      	movs	r3, #1
 8011b28:	6123      	str	r3, [r4, #16]
 8011b2a:	f8ca 3000 	str.w	r3, [sl]
 8011b2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011b30:	f04f 0862 	mov.w	r8, #98	; 0x62
 8011b34:	601c      	str	r4, [r3, #0]
 8011b36:	e735      	b.n	80119a4 <__gethex+0x114>
 8011b38:	1e69      	subs	r1, r5, #1
 8011b3a:	4620      	mov	r0, r4
 8011b3c:	f7fe f97a 	bl	800fe34 <__any_on>
 8011b40:	2800      	cmp	r0, #0
 8011b42:	d1ed      	bne.n	8011b20 <__gethex+0x290>
 8011b44:	4621      	mov	r1, r4
 8011b46:	4648      	mov	r0, r9
 8011b48:	f7fd fd28 	bl	800f59c <_Bfree>
 8011b4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011b4e:	2300      	movs	r3, #0
 8011b50:	6013      	str	r3, [r2, #0]
 8011b52:	f04f 0850 	mov.w	r8, #80	; 0x50
 8011b56:	e725      	b.n	80119a4 <__gethex+0x114>
 8011b58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d1f2      	bne.n	8011b44 <__gethex+0x2b4>
 8011b5e:	e7df      	b.n	8011b20 <__gethex+0x290>
 8011b60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d1dc      	bne.n	8011b20 <__gethex+0x290>
 8011b66:	e7ed      	b.n	8011b44 <__gethex+0x2b4>
 8011b68:	0801283c 	.word	0x0801283c
 8011b6c:	080126cf 	.word	0x080126cf
 8011b70:	08012a01 	.word	0x08012a01
 8011b74:	f106 38ff 	add.w	r8, r6, #4294967295
 8011b78:	f1bb 0f00 	cmp.w	fp, #0
 8011b7c:	d133      	bne.n	8011be6 <__gethex+0x356>
 8011b7e:	f1b8 0f00 	cmp.w	r8, #0
 8011b82:	d004      	beq.n	8011b8e <__gethex+0x2fe>
 8011b84:	4641      	mov	r1, r8
 8011b86:	4620      	mov	r0, r4
 8011b88:	f7fe f954 	bl	800fe34 <__any_on>
 8011b8c:	4683      	mov	fp, r0
 8011b8e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8011b92:	2301      	movs	r3, #1
 8011b94:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011b98:	f008 081f 	and.w	r8, r8, #31
 8011b9c:	fa03 f308 	lsl.w	r3, r3, r8
 8011ba0:	4213      	tst	r3, r2
 8011ba2:	4631      	mov	r1, r6
 8011ba4:	4620      	mov	r0, r4
 8011ba6:	bf18      	it	ne
 8011ba8:	f04b 0b02 	orrne.w	fp, fp, #2
 8011bac:	1bad      	subs	r5, r5, r6
 8011bae:	f7ff fe07 	bl	80117c0 <rshift>
 8011bb2:	687e      	ldr	r6, [r7, #4]
 8011bb4:	f04f 0802 	mov.w	r8, #2
 8011bb8:	f1bb 0f00 	cmp.w	fp, #0
 8011bbc:	d04a      	beq.n	8011c54 <__gethex+0x3c4>
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	2b02      	cmp	r3, #2
 8011bc2:	d016      	beq.n	8011bf2 <__gethex+0x362>
 8011bc4:	2b03      	cmp	r3, #3
 8011bc6:	d018      	beq.n	8011bfa <__gethex+0x36a>
 8011bc8:	2b01      	cmp	r3, #1
 8011bca:	d109      	bne.n	8011be0 <__gethex+0x350>
 8011bcc:	f01b 0f02 	tst.w	fp, #2
 8011bd0:	d006      	beq.n	8011be0 <__gethex+0x350>
 8011bd2:	f8da 3000 	ldr.w	r3, [sl]
 8011bd6:	ea4b 0b03 	orr.w	fp, fp, r3
 8011bda:	f01b 0f01 	tst.w	fp, #1
 8011bde:	d10f      	bne.n	8011c00 <__gethex+0x370>
 8011be0:	f048 0810 	orr.w	r8, r8, #16
 8011be4:	e036      	b.n	8011c54 <__gethex+0x3c4>
 8011be6:	f04f 0b01 	mov.w	fp, #1
 8011bea:	e7d0      	b.n	8011b8e <__gethex+0x2fe>
 8011bec:	f04f 0801 	mov.w	r8, #1
 8011bf0:	e7e2      	b.n	8011bb8 <__gethex+0x328>
 8011bf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011bf4:	f1c3 0301 	rsb	r3, r3, #1
 8011bf8:	930f      	str	r3, [sp, #60]	; 0x3c
 8011bfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d0ef      	beq.n	8011be0 <__gethex+0x350>
 8011c00:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011c04:	f104 0214 	add.w	r2, r4, #20
 8011c08:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8011c0c:	9301      	str	r3, [sp, #4]
 8011c0e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8011c12:	2300      	movs	r3, #0
 8011c14:	4694      	mov	ip, r2
 8011c16:	f852 1b04 	ldr.w	r1, [r2], #4
 8011c1a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8011c1e:	d01e      	beq.n	8011c5e <__gethex+0x3ce>
 8011c20:	3101      	adds	r1, #1
 8011c22:	f8cc 1000 	str.w	r1, [ip]
 8011c26:	f1b8 0f02 	cmp.w	r8, #2
 8011c2a:	f104 0214 	add.w	r2, r4, #20
 8011c2e:	d13d      	bne.n	8011cac <__gethex+0x41c>
 8011c30:	683b      	ldr	r3, [r7, #0]
 8011c32:	3b01      	subs	r3, #1
 8011c34:	42ab      	cmp	r3, r5
 8011c36:	d10b      	bne.n	8011c50 <__gethex+0x3c0>
 8011c38:	1169      	asrs	r1, r5, #5
 8011c3a:	2301      	movs	r3, #1
 8011c3c:	f005 051f 	and.w	r5, r5, #31
 8011c40:	fa03 f505 	lsl.w	r5, r3, r5
 8011c44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011c48:	421d      	tst	r5, r3
 8011c4a:	bf18      	it	ne
 8011c4c:	f04f 0801 	movne.w	r8, #1
 8011c50:	f048 0820 	orr.w	r8, r8, #32
 8011c54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011c56:	601c      	str	r4, [r3, #0]
 8011c58:	9b02      	ldr	r3, [sp, #8]
 8011c5a:	601e      	str	r6, [r3, #0]
 8011c5c:	e6a2      	b.n	80119a4 <__gethex+0x114>
 8011c5e:	4290      	cmp	r0, r2
 8011c60:	f842 3c04 	str.w	r3, [r2, #-4]
 8011c64:	d8d6      	bhi.n	8011c14 <__gethex+0x384>
 8011c66:	68a2      	ldr	r2, [r4, #8]
 8011c68:	4593      	cmp	fp, r2
 8011c6a:	db17      	blt.n	8011c9c <__gethex+0x40c>
 8011c6c:	6861      	ldr	r1, [r4, #4]
 8011c6e:	4648      	mov	r0, r9
 8011c70:	3101      	adds	r1, #1
 8011c72:	f7fd fc53 	bl	800f51c <_Balloc>
 8011c76:	4682      	mov	sl, r0
 8011c78:	b918      	cbnz	r0, 8011c82 <__gethex+0x3f2>
 8011c7a:	4b1b      	ldr	r3, [pc, #108]	; (8011ce8 <__gethex+0x458>)
 8011c7c:	4602      	mov	r2, r0
 8011c7e:	2184      	movs	r1, #132	; 0x84
 8011c80:	e6b3      	b.n	80119ea <__gethex+0x15a>
 8011c82:	6922      	ldr	r2, [r4, #16]
 8011c84:	3202      	adds	r2, #2
 8011c86:	f104 010c 	add.w	r1, r4, #12
 8011c8a:	0092      	lsls	r2, r2, #2
 8011c8c:	300c      	adds	r0, #12
 8011c8e:	f7fc fd68 	bl	800e762 <memcpy>
 8011c92:	4621      	mov	r1, r4
 8011c94:	4648      	mov	r0, r9
 8011c96:	f7fd fc81 	bl	800f59c <_Bfree>
 8011c9a:	4654      	mov	r4, sl
 8011c9c:	6922      	ldr	r2, [r4, #16]
 8011c9e:	1c51      	adds	r1, r2, #1
 8011ca0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011ca4:	6121      	str	r1, [r4, #16]
 8011ca6:	2101      	movs	r1, #1
 8011ca8:	6151      	str	r1, [r2, #20]
 8011caa:	e7bc      	b.n	8011c26 <__gethex+0x396>
 8011cac:	6921      	ldr	r1, [r4, #16]
 8011cae:	4559      	cmp	r1, fp
 8011cb0:	dd0b      	ble.n	8011cca <__gethex+0x43a>
 8011cb2:	2101      	movs	r1, #1
 8011cb4:	4620      	mov	r0, r4
 8011cb6:	f7ff fd83 	bl	80117c0 <rshift>
 8011cba:	68bb      	ldr	r3, [r7, #8]
 8011cbc:	3601      	adds	r6, #1
 8011cbe:	42b3      	cmp	r3, r6
 8011cc0:	f6ff aedb 	blt.w	8011a7a <__gethex+0x1ea>
 8011cc4:	f04f 0801 	mov.w	r8, #1
 8011cc8:	e7c2      	b.n	8011c50 <__gethex+0x3c0>
 8011cca:	f015 051f 	ands.w	r5, r5, #31
 8011cce:	d0f9      	beq.n	8011cc4 <__gethex+0x434>
 8011cd0:	9b01      	ldr	r3, [sp, #4]
 8011cd2:	441a      	add	r2, r3
 8011cd4:	f1c5 0520 	rsb	r5, r5, #32
 8011cd8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8011cdc:	f7fd fd10 	bl	800f700 <__hi0bits>
 8011ce0:	42a8      	cmp	r0, r5
 8011ce2:	dbe6      	blt.n	8011cb2 <__gethex+0x422>
 8011ce4:	e7ee      	b.n	8011cc4 <__gethex+0x434>
 8011ce6:	bf00      	nop
 8011ce8:	080126cf 	.word	0x080126cf

08011cec <L_shift>:
 8011cec:	f1c2 0208 	rsb	r2, r2, #8
 8011cf0:	0092      	lsls	r2, r2, #2
 8011cf2:	b570      	push	{r4, r5, r6, lr}
 8011cf4:	f1c2 0620 	rsb	r6, r2, #32
 8011cf8:	6843      	ldr	r3, [r0, #4]
 8011cfa:	6804      	ldr	r4, [r0, #0]
 8011cfc:	fa03 f506 	lsl.w	r5, r3, r6
 8011d00:	432c      	orrs	r4, r5
 8011d02:	40d3      	lsrs	r3, r2
 8011d04:	6004      	str	r4, [r0, #0]
 8011d06:	f840 3f04 	str.w	r3, [r0, #4]!
 8011d0a:	4288      	cmp	r0, r1
 8011d0c:	d3f4      	bcc.n	8011cf8 <L_shift+0xc>
 8011d0e:	bd70      	pop	{r4, r5, r6, pc}

08011d10 <__match>:
 8011d10:	b530      	push	{r4, r5, lr}
 8011d12:	6803      	ldr	r3, [r0, #0]
 8011d14:	3301      	adds	r3, #1
 8011d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d1a:	b914      	cbnz	r4, 8011d22 <__match+0x12>
 8011d1c:	6003      	str	r3, [r0, #0]
 8011d1e:	2001      	movs	r0, #1
 8011d20:	bd30      	pop	{r4, r5, pc}
 8011d22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011d2a:	2d19      	cmp	r5, #25
 8011d2c:	bf98      	it	ls
 8011d2e:	3220      	addls	r2, #32
 8011d30:	42a2      	cmp	r2, r4
 8011d32:	d0f0      	beq.n	8011d16 <__match+0x6>
 8011d34:	2000      	movs	r0, #0
 8011d36:	e7f3      	b.n	8011d20 <__match+0x10>

08011d38 <__hexnan>:
 8011d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d3c:	680b      	ldr	r3, [r1, #0]
 8011d3e:	6801      	ldr	r1, [r0, #0]
 8011d40:	115e      	asrs	r6, r3, #5
 8011d42:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011d46:	f013 031f 	ands.w	r3, r3, #31
 8011d4a:	b087      	sub	sp, #28
 8011d4c:	bf18      	it	ne
 8011d4e:	3604      	addne	r6, #4
 8011d50:	2500      	movs	r5, #0
 8011d52:	1f37      	subs	r7, r6, #4
 8011d54:	4682      	mov	sl, r0
 8011d56:	4690      	mov	r8, r2
 8011d58:	9301      	str	r3, [sp, #4]
 8011d5a:	f846 5c04 	str.w	r5, [r6, #-4]
 8011d5e:	46b9      	mov	r9, r7
 8011d60:	463c      	mov	r4, r7
 8011d62:	9502      	str	r5, [sp, #8]
 8011d64:	46ab      	mov	fp, r5
 8011d66:	784a      	ldrb	r2, [r1, #1]
 8011d68:	1c4b      	adds	r3, r1, #1
 8011d6a:	9303      	str	r3, [sp, #12]
 8011d6c:	b342      	cbz	r2, 8011dc0 <__hexnan+0x88>
 8011d6e:	4610      	mov	r0, r2
 8011d70:	9105      	str	r1, [sp, #20]
 8011d72:	9204      	str	r2, [sp, #16]
 8011d74:	f7ff fd76 	bl	8011864 <__hexdig_fun>
 8011d78:	2800      	cmp	r0, #0
 8011d7a:	d14f      	bne.n	8011e1c <__hexnan+0xe4>
 8011d7c:	9a04      	ldr	r2, [sp, #16]
 8011d7e:	9905      	ldr	r1, [sp, #20]
 8011d80:	2a20      	cmp	r2, #32
 8011d82:	d818      	bhi.n	8011db6 <__hexnan+0x7e>
 8011d84:	9b02      	ldr	r3, [sp, #8]
 8011d86:	459b      	cmp	fp, r3
 8011d88:	dd13      	ble.n	8011db2 <__hexnan+0x7a>
 8011d8a:	454c      	cmp	r4, r9
 8011d8c:	d206      	bcs.n	8011d9c <__hexnan+0x64>
 8011d8e:	2d07      	cmp	r5, #7
 8011d90:	dc04      	bgt.n	8011d9c <__hexnan+0x64>
 8011d92:	462a      	mov	r2, r5
 8011d94:	4649      	mov	r1, r9
 8011d96:	4620      	mov	r0, r4
 8011d98:	f7ff ffa8 	bl	8011cec <L_shift>
 8011d9c:	4544      	cmp	r4, r8
 8011d9e:	d950      	bls.n	8011e42 <__hexnan+0x10a>
 8011da0:	2300      	movs	r3, #0
 8011da2:	f1a4 0904 	sub.w	r9, r4, #4
 8011da6:	f844 3c04 	str.w	r3, [r4, #-4]
 8011daa:	f8cd b008 	str.w	fp, [sp, #8]
 8011dae:	464c      	mov	r4, r9
 8011db0:	461d      	mov	r5, r3
 8011db2:	9903      	ldr	r1, [sp, #12]
 8011db4:	e7d7      	b.n	8011d66 <__hexnan+0x2e>
 8011db6:	2a29      	cmp	r2, #41	; 0x29
 8011db8:	d155      	bne.n	8011e66 <__hexnan+0x12e>
 8011dba:	3102      	adds	r1, #2
 8011dbc:	f8ca 1000 	str.w	r1, [sl]
 8011dc0:	f1bb 0f00 	cmp.w	fp, #0
 8011dc4:	d04f      	beq.n	8011e66 <__hexnan+0x12e>
 8011dc6:	454c      	cmp	r4, r9
 8011dc8:	d206      	bcs.n	8011dd8 <__hexnan+0xa0>
 8011dca:	2d07      	cmp	r5, #7
 8011dcc:	dc04      	bgt.n	8011dd8 <__hexnan+0xa0>
 8011dce:	462a      	mov	r2, r5
 8011dd0:	4649      	mov	r1, r9
 8011dd2:	4620      	mov	r0, r4
 8011dd4:	f7ff ff8a 	bl	8011cec <L_shift>
 8011dd8:	4544      	cmp	r4, r8
 8011dda:	d934      	bls.n	8011e46 <__hexnan+0x10e>
 8011ddc:	f1a8 0204 	sub.w	r2, r8, #4
 8011de0:	4623      	mov	r3, r4
 8011de2:	f853 1b04 	ldr.w	r1, [r3], #4
 8011de6:	f842 1f04 	str.w	r1, [r2, #4]!
 8011dea:	429f      	cmp	r7, r3
 8011dec:	d2f9      	bcs.n	8011de2 <__hexnan+0xaa>
 8011dee:	1b3b      	subs	r3, r7, r4
 8011df0:	f023 0303 	bic.w	r3, r3, #3
 8011df4:	3304      	adds	r3, #4
 8011df6:	3e03      	subs	r6, #3
 8011df8:	3401      	adds	r4, #1
 8011dfa:	42a6      	cmp	r6, r4
 8011dfc:	bf38      	it	cc
 8011dfe:	2304      	movcc	r3, #4
 8011e00:	4443      	add	r3, r8
 8011e02:	2200      	movs	r2, #0
 8011e04:	f843 2b04 	str.w	r2, [r3], #4
 8011e08:	429f      	cmp	r7, r3
 8011e0a:	d2fb      	bcs.n	8011e04 <__hexnan+0xcc>
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	b91b      	cbnz	r3, 8011e18 <__hexnan+0xe0>
 8011e10:	4547      	cmp	r7, r8
 8011e12:	d126      	bne.n	8011e62 <__hexnan+0x12a>
 8011e14:	2301      	movs	r3, #1
 8011e16:	603b      	str	r3, [r7, #0]
 8011e18:	2005      	movs	r0, #5
 8011e1a:	e025      	b.n	8011e68 <__hexnan+0x130>
 8011e1c:	3501      	adds	r5, #1
 8011e1e:	2d08      	cmp	r5, #8
 8011e20:	f10b 0b01 	add.w	fp, fp, #1
 8011e24:	dd06      	ble.n	8011e34 <__hexnan+0xfc>
 8011e26:	4544      	cmp	r4, r8
 8011e28:	d9c3      	bls.n	8011db2 <__hexnan+0x7a>
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	f844 3c04 	str.w	r3, [r4, #-4]
 8011e30:	2501      	movs	r5, #1
 8011e32:	3c04      	subs	r4, #4
 8011e34:	6822      	ldr	r2, [r4, #0]
 8011e36:	f000 000f 	and.w	r0, r0, #15
 8011e3a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011e3e:	6020      	str	r0, [r4, #0]
 8011e40:	e7b7      	b.n	8011db2 <__hexnan+0x7a>
 8011e42:	2508      	movs	r5, #8
 8011e44:	e7b5      	b.n	8011db2 <__hexnan+0x7a>
 8011e46:	9b01      	ldr	r3, [sp, #4]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d0df      	beq.n	8011e0c <__hexnan+0xd4>
 8011e4c:	f1c3 0320 	rsb	r3, r3, #32
 8011e50:	f04f 32ff 	mov.w	r2, #4294967295
 8011e54:	40da      	lsrs	r2, r3
 8011e56:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011e5a:	4013      	ands	r3, r2
 8011e5c:	f846 3c04 	str.w	r3, [r6, #-4]
 8011e60:	e7d4      	b.n	8011e0c <__hexnan+0xd4>
 8011e62:	3f04      	subs	r7, #4
 8011e64:	e7d2      	b.n	8011e0c <__hexnan+0xd4>
 8011e66:	2004      	movs	r0, #4
 8011e68:	b007      	add	sp, #28
 8011e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011e6e <__ascii_mbtowc>:
 8011e6e:	b082      	sub	sp, #8
 8011e70:	b901      	cbnz	r1, 8011e74 <__ascii_mbtowc+0x6>
 8011e72:	a901      	add	r1, sp, #4
 8011e74:	b142      	cbz	r2, 8011e88 <__ascii_mbtowc+0x1a>
 8011e76:	b14b      	cbz	r3, 8011e8c <__ascii_mbtowc+0x1e>
 8011e78:	7813      	ldrb	r3, [r2, #0]
 8011e7a:	600b      	str	r3, [r1, #0]
 8011e7c:	7812      	ldrb	r2, [r2, #0]
 8011e7e:	1e10      	subs	r0, r2, #0
 8011e80:	bf18      	it	ne
 8011e82:	2001      	movne	r0, #1
 8011e84:	b002      	add	sp, #8
 8011e86:	4770      	bx	lr
 8011e88:	4610      	mov	r0, r2
 8011e8a:	e7fb      	b.n	8011e84 <__ascii_mbtowc+0x16>
 8011e8c:	f06f 0001 	mvn.w	r0, #1
 8011e90:	e7f8      	b.n	8011e84 <__ascii_mbtowc+0x16>

08011e92 <_realloc_r>:
 8011e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e96:	4680      	mov	r8, r0
 8011e98:	4614      	mov	r4, r2
 8011e9a:	460e      	mov	r6, r1
 8011e9c:	b921      	cbnz	r1, 8011ea8 <_realloc_r+0x16>
 8011e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ea2:	4611      	mov	r1, r2
 8011ea4:	f7fb bb36 	b.w	800d514 <_malloc_r>
 8011ea8:	b92a      	cbnz	r2, 8011eb6 <_realloc_r+0x24>
 8011eaa:	f7fd faeb 	bl	800f484 <_free_r>
 8011eae:	4625      	mov	r5, r4
 8011eb0:	4628      	mov	r0, r5
 8011eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011eb6:	f000 f8b6 	bl	8012026 <_malloc_usable_size_r>
 8011eba:	4284      	cmp	r4, r0
 8011ebc:	4607      	mov	r7, r0
 8011ebe:	d802      	bhi.n	8011ec6 <_realloc_r+0x34>
 8011ec0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011ec4:	d812      	bhi.n	8011eec <_realloc_r+0x5a>
 8011ec6:	4621      	mov	r1, r4
 8011ec8:	4640      	mov	r0, r8
 8011eca:	f7fb fb23 	bl	800d514 <_malloc_r>
 8011ece:	4605      	mov	r5, r0
 8011ed0:	2800      	cmp	r0, #0
 8011ed2:	d0ed      	beq.n	8011eb0 <_realloc_r+0x1e>
 8011ed4:	42bc      	cmp	r4, r7
 8011ed6:	4622      	mov	r2, r4
 8011ed8:	4631      	mov	r1, r6
 8011eda:	bf28      	it	cs
 8011edc:	463a      	movcs	r2, r7
 8011ede:	f7fc fc40 	bl	800e762 <memcpy>
 8011ee2:	4631      	mov	r1, r6
 8011ee4:	4640      	mov	r0, r8
 8011ee6:	f7fd facd 	bl	800f484 <_free_r>
 8011eea:	e7e1      	b.n	8011eb0 <_realloc_r+0x1e>
 8011eec:	4635      	mov	r5, r6
 8011eee:	e7df      	b.n	8011eb0 <_realloc_r+0x1e>

08011ef0 <_strtoul_l.constprop.0>:
 8011ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ef4:	4f36      	ldr	r7, [pc, #216]	; (8011fd0 <_strtoul_l.constprop.0+0xe0>)
 8011ef6:	4686      	mov	lr, r0
 8011ef8:	460d      	mov	r5, r1
 8011efa:	4628      	mov	r0, r5
 8011efc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011f00:	5d3e      	ldrb	r6, [r7, r4]
 8011f02:	f016 0608 	ands.w	r6, r6, #8
 8011f06:	d1f8      	bne.n	8011efa <_strtoul_l.constprop.0+0xa>
 8011f08:	2c2d      	cmp	r4, #45	; 0x2d
 8011f0a:	d130      	bne.n	8011f6e <_strtoul_l.constprop.0+0x7e>
 8011f0c:	782c      	ldrb	r4, [r5, #0]
 8011f0e:	2601      	movs	r6, #1
 8011f10:	1c85      	adds	r5, r0, #2
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d057      	beq.n	8011fc6 <_strtoul_l.constprop.0+0xd6>
 8011f16:	2b10      	cmp	r3, #16
 8011f18:	d109      	bne.n	8011f2e <_strtoul_l.constprop.0+0x3e>
 8011f1a:	2c30      	cmp	r4, #48	; 0x30
 8011f1c:	d107      	bne.n	8011f2e <_strtoul_l.constprop.0+0x3e>
 8011f1e:	7828      	ldrb	r0, [r5, #0]
 8011f20:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011f24:	2858      	cmp	r0, #88	; 0x58
 8011f26:	d149      	bne.n	8011fbc <_strtoul_l.constprop.0+0xcc>
 8011f28:	786c      	ldrb	r4, [r5, #1]
 8011f2a:	2310      	movs	r3, #16
 8011f2c:	3502      	adds	r5, #2
 8011f2e:	f04f 38ff 	mov.w	r8, #4294967295
 8011f32:	2700      	movs	r7, #0
 8011f34:	fbb8 f8f3 	udiv	r8, r8, r3
 8011f38:	fb03 f908 	mul.w	r9, r3, r8
 8011f3c:	ea6f 0909 	mvn.w	r9, r9
 8011f40:	4638      	mov	r0, r7
 8011f42:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011f46:	f1bc 0f09 	cmp.w	ip, #9
 8011f4a:	d815      	bhi.n	8011f78 <_strtoul_l.constprop.0+0x88>
 8011f4c:	4664      	mov	r4, ip
 8011f4e:	42a3      	cmp	r3, r4
 8011f50:	dd23      	ble.n	8011f9a <_strtoul_l.constprop.0+0xaa>
 8011f52:	f1b7 3fff 	cmp.w	r7, #4294967295
 8011f56:	d007      	beq.n	8011f68 <_strtoul_l.constprop.0+0x78>
 8011f58:	4580      	cmp	r8, r0
 8011f5a:	d31b      	bcc.n	8011f94 <_strtoul_l.constprop.0+0xa4>
 8011f5c:	d101      	bne.n	8011f62 <_strtoul_l.constprop.0+0x72>
 8011f5e:	45a1      	cmp	r9, r4
 8011f60:	db18      	blt.n	8011f94 <_strtoul_l.constprop.0+0xa4>
 8011f62:	fb00 4003 	mla	r0, r0, r3, r4
 8011f66:	2701      	movs	r7, #1
 8011f68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011f6c:	e7e9      	b.n	8011f42 <_strtoul_l.constprop.0+0x52>
 8011f6e:	2c2b      	cmp	r4, #43	; 0x2b
 8011f70:	bf04      	itt	eq
 8011f72:	782c      	ldrbeq	r4, [r5, #0]
 8011f74:	1c85      	addeq	r5, r0, #2
 8011f76:	e7cc      	b.n	8011f12 <_strtoul_l.constprop.0+0x22>
 8011f78:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011f7c:	f1bc 0f19 	cmp.w	ip, #25
 8011f80:	d801      	bhi.n	8011f86 <_strtoul_l.constprop.0+0x96>
 8011f82:	3c37      	subs	r4, #55	; 0x37
 8011f84:	e7e3      	b.n	8011f4e <_strtoul_l.constprop.0+0x5e>
 8011f86:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011f8a:	f1bc 0f19 	cmp.w	ip, #25
 8011f8e:	d804      	bhi.n	8011f9a <_strtoul_l.constprop.0+0xaa>
 8011f90:	3c57      	subs	r4, #87	; 0x57
 8011f92:	e7dc      	b.n	8011f4e <_strtoul_l.constprop.0+0x5e>
 8011f94:	f04f 37ff 	mov.w	r7, #4294967295
 8011f98:	e7e6      	b.n	8011f68 <_strtoul_l.constprop.0+0x78>
 8011f9a:	1c7b      	adds	r3, r7, #1
 8011f9c:	d106      	bne.n	8011fac <_strtoul_l.constprop.0+0xbc>
 8011f9e:	2322      	movs	r3, #34	; 0x22
 8011fa0:	f8ce 3000 	str.w	r3, [lr]
 8011fa4:	4638      	mov	r0, r7
 8011fa6:	b932      	cbnz	r2, 8011fb6 <_strtoul_l.constprop.0+0xc6>
 8011fa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011fac:	b106      	cbz	r6, 8011fb0 <_strtoul_l.constprop.0+0xc0>
 8011fae:	4240      	negs	r0, r0
 8011fb0:	2a00      	cmp	r2, #0
 8011fb2:	d0f9      	beq.n	8011fa8 <_strtoul_l.constprop.0+0xb8>
 8011fb4:	b107      	cbz	r7, 8011fb8 <_strtoul_l.constprop.0+0xc8>
 8011fb6:	1e69      	subs	r1, r5, #1
 8011fb8:	6011      	str	r1, [r2, #0]
 8011fba:	e7f5      	b.n	8011fa8 <_strtoul_l.constprop.0+0xb8>
 8011fbc:	2430      	movs	r4, #48	; 0x30
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d1b5      	bne.n	8011f2e <_strtoul_l.constprop.0+0x3e>
 8011fc2:	2308      	movs	r3, #8
 8011fc4:	e7b3      	b.n	8011f2e <_strtoul_l.constprop.0+0x3e>
 8011fc6:	2c30      	cmp	r4, #48	; 0x30
 8011fc8:	d0a9      	beq.n	8011f1e <_strtoul_l.constprop.0+0x2e>
 8011fca:	230a      	movs	r3, #10
 8011fcc:	e7af      	b.n	8011f2e <_strtoul_l.constprop.0+0x3e>
 8011fce:	bf00      	nop
 8011fd0:	08012891 	.word	0x08012891

08011fd4 <_strtoul_r>:
 8011fd4:	f7ff bf8c 	b.w	8011ef0 <_strtoul_l.constprop.0>

08011fd8 <__ascii_wctomb>:
 8011fd8:	b149      	cbz	r1, 8011fee <__ascii_wctomb+0x16>
 8011fda:	2aff      	cmp	r2, #255	; 0xff
 8011fdc:	bf85      	ittet	hi
 8011fde:	238a      	movhi	r3, #138	; 0x8a
 8011fe0:	6003      	strhi	r3, [r0, #0]
 8011fe2:	700a      	strbls	r2, [r1, #0]
 8011fe4:	f04f 30ff 	movhi.w	r0, #4294967295
 8011fe8:	bf98      	it	ls
 8011fea:	2001      	movls	r0, #1
 8011fec:	4770      	bx	lr
 8011fee:	4608      	mov	r0, r1
 8011ff0:	4770      	bx	lr
	...

08011ff4 <fiprintf>:
 8011ff4:	b40e      	push	{r1, r2, r3}
 8011ff6:	b503      	push	{r0, r1, lr}
 8011ff8:	4601      	mov	r1, r0
 8011ffa:	ab03      	add	r3, sp, #12
 8011ffc:	4805      	ldr	r0, [pc, #20]	; (8012014 <fiprintf+0x20>)
 8011ffe:	f853 2b04 	ldr.w	r2, [r3], #4
 8012002:	6800      	ldr	r0, [r0, #0]
 8012004:	9301      	str	r3, [sp, #4]
 8012006:	f000 f83f 	bl	8012088 <_vfiprintf_r>
 801200a:	b002      	add	sp, #8
 801200c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012010:	b003      	add	sp, #12
 8012012:	4770      	bx	lr
 8012014:	20000084 	.word	0x20000084

08012018 <abort>:
 8012018:	b508      	push	{r3, lr}
 801201a:	2006      	movs	r0, #6
 801201c:	f000 fa0c 	bl	8012438 <raise>
 8012020:	2001      	movs	r0, #1
 8012022:	f7ef ffe7 	bl	8001ff4 <_exit>

08012026 <_malloc_usable_size_r>:
 8012026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801202a:	1f18      	subs	r0, r3, #4
 801202c:	2b00      	cmp	r3, #0
 801202e:	bfbc      	itt	lt
 8012030:	580b      	ldrlt	r3, [r1, r0]
 8012032:	18c0      	addlt	r0, r0, r3
 8012034:	4770      	bx	lr

08012036 <__sfputc_r>:
 8012036:	6893      	ldr	r3, [r2, #8]
 8012038:	3b01      	subs	r3, #1
 801203a:	2b00      	cmp	r3, #0
 801203c:	b410      	push	{r4}
 801203e:	6093      	str	r3, [r2, #8]
 8012040:	da08      	bge.n	8012054 <__sfputc_r+0x1e>
 8012042:	6994      	ldr	r4, [r2, #24]
 8012044:	42a3      	cmp	r3, r4
 8012046:	db01      	blt.n	801204c <__sfputc_r+0x16>
 8012048:	290a      	cmp	r1, #10
 801204a:	d103      	bne.n	8012054 <__sfputc_r+0x1e>
 801204c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012050:	f000 b934 	b.w	80122bc <__swbuf_r>
 8012054:	6813      	ldr	r3, [r2, #0]
 8012056:	1c58      	adds	r0, r3, #1
 8012058:	6010      	str	r0, [r2, #0]
 801205a:	7019      	strb	r1, [r3, #0]
 801205c:	4608      	mov	r0, r1
 801205e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012062:	4770      	bx	lr

08012064 <__sfputs_r>:
 8012064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012066:	4606      	mov	r6, r0
 8012068:	460f      	mov	r7, r1
 801206a:	4614      	mov	r4, r2
 801206c:	18d5      	adds	r5, r2, r3
 801206e:	42ac      	cmp	r4, r5
 8012070:	d101      	bne.n	8012076 <__sfputs_r+0x12>
 8012072:	2000      	movs	r0, #0
 8012074:	e007      	b.n	8012086 <__sfputs_r+0x22>
 8012076:	f814 1b01 	ldrb.w	r1, [r4], #1
 801207a:	463a      	mov	r2, r7
 801207c:	4630      	mov	r0, r6
 801207e:	f7ff ffda 	bl	8012036 <__sfputc_r>
 8012082:	1c43      	adds	r3, r0, #1
 8012084:	d1f3      	bne.n	801206e <__sfputs_r+0xa>
 8012086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012088 <_vfiprintf_r>:
 8012088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801208c:	460d      	mov	r5, r1
 801208e:	b09d      	sub	sp, #116	; 0x74
 8012090:	4614      	mov	r4, r2
 8012092:	4698      	mov	r8, r3
 8012094:	4606      	mov	r6, r0
 8012096:	b118      	cbz	r0, 80120a0 <_vfiprintf_r+0x18>
 8012098:	6a03      	ldr	r3, [r0, #32]
 801209a:	b90b      	cbnz	r3, 80120a0 <_vfiprintf_r+0x18>
 801209c:	f7fc f9c8 	bl	800e430 <__sinit>
 80120a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80120a2:	07d9      	lsls	r1, r3, #31
 80120a4:	d405      	bmi.n	80120b2 <_vfiprintf_r+0x2a>
 80120a6:	89ab      	ldrh	r3, [r5, #12]
 80120a8:	059a      	lsls	r2, r3, #22
 80120aa:	d402      	bmi.n	80120b2 <_vfiprintf_r+0x2a>
 80120ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80120ae:	f7fc fb56 	bl	800e75e <__retarget_lock_acquire_recursive>
 80120b2:	89ab      	ldrh	r3, [r5, #12]
 80120b4:	071b      	lsls	r3, r3, #28
 80120b6:	d501      	bpl.n	80120bc <_vfiprintf_r+0x34>
 80120b8:	692b      	ldr	r3, [r5, #16]
 80120ba:	b99b      	cbnz	r3, 80120e4 <_vfiprintf_r+0x5c>
 80120bc:	4629      	mov	r1, r5
 80120be:	4630      	mov	r0, r6
 80120c0:	f000 f93a 	bl	8012338 <__swsetup_r>
 80120c4:	b170      	cbz	r0, 80120e4 <_vfiprintf_r+0x5c>
 80120c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80120c8:	07dc      	lsls	r4, r3, #31
 80120ca:	d504      	bpl.n	80120d6 <_vfiprintf_r+0x4e>
 80120cc:	f04f 30ff 	mov.w	r0, #4294967295
 80120d0:	b01d      	add	sp, #116	; 0x74
 80120d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120d6:	89ab      	ldrh	r3, [r5, #12]
 80120d8:	0598      	lsls	r0, r3, #22
 80120da:	d4f7      	bmi.n	80120cc <_vfiprintf_r+0x44>
 80120dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80120de:	f7fc fb3f 	bl	800e760 <__retarget_lock_release_recursive>
 80120e2:	e7f3      	b.n	80120cc <_vfiprintf_r+0x44>
 80120e4:	2300      	movs	r3, #0
 80120e6:	9309      	str	r3, [sp, #36]	; 0x24
 80120e8:	2320      	movs	r3, #32
 80120ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80120ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80120f2:	2330      	movs	r3, #48	; 0x30
 80120f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80122a8 <_vfiprintf_r+0x220>
 80120f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80120fc:	f04f 0901 	mov.w	r9, #1
 8012100:	4623      	mov	r3, r4
 8012102:	469a      	mov	sl, r3
 8012104:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012108:	b10a      	cbz	r2, 801210e <_vfiprintf_r+0x86>
 801210a:	2a25      	cmp	r2, #37	; 0x25
 801210c:	d1f9      	bne.n	8012102 <_vfiprintf_r+0x7a>
 801210e:	ebba 0b04 	subs.w	fp, sl, r4
 8012112:	d00b      	beq.n	801212c <_vfiprintf_r+0xa4>
 8012114:	465b      	mov	r3, fp
 8012116:	4622      	mov	r2, r4
 8012118:	4629      	mov	r1, r5
 801211a:	4630      	mov	r0, r6
 801211c:	f7ff ffa2 	bl	8012064 <__sfputs_r>
 8012120:	3001      	adds	r0, #1
 8012122:	f000 80a9 	beq.w	8012278 <_vfiprintf_r+0x1f0>
 8012126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012128:	445a      	add	r2, fp
 801212a:	9209      	str	r2, [sp, #36]	; 0x24
 801212c:	f89a 3000 	ldrb.w	r3, [sl]
 8012130:	2b00      	cmp	r3, #0
 8012132:	f000 80a1 	beq.w	8012278 <_vfiprintf_r+0x1f0>
 8012136:	2300      	movs	r3, #0
 8012138:	f04f 32ff 	mov.w	r2, #4294967295
 801213c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012140:	f10a 0a01 	add.w	sl, sl, #1
 8012144:	9304      	str	r3, [sp, #16]
 8012146:	9307      	str	r3, [sp, #28]
 8012148:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801214c:	931a      	str	r3, [sp, #104]	; 0x68
 801214e:	4654      	mov	r4, sl
 8012150:	2205      	movs	r2, #5
 8012152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012156:	4854      	ldr	r0, [pc, #336]	; (80122a8 <_vfiprintf_r+0x220>)
 8012158:	f7ee f83a 	bl	80001d0 <memchr>
 801215c:	9a04      	ldr	r2, [sp, #16]
 801215e:	b9d8      	cbnz	r0, 8012198 <_vfiprintf_r+0x110>
 8012160:	06d1      	lsls	r1, r2, #27
 8012162:	bf44      	itt	mi
 8012164:	2320      	movmi	r3, #32
 8012166:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801216a:	0713      	lsls	r3, r2, #28
 801216c:	bf44      	itt	mi
 801216e:	232b      	movmi	r3, #43	; 0x2b
 8012170:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012174:	f89a 3000 	ldrb.w	r3, [sl]
 8012178:	2b2a      	cmp	r3, #42	; 0x2a
 801217a:	d015      	beq.n	80121a8 <_vfiprintf_r+0x120>
 801217c:	9a07      	ldr	r2, [sp, #28]
 801217e:	4654      	mov	r4, sl
 8012180:	2000      	movs	r0, #0
 8012182:	f04f 0c0a 	mov.w	ip, #10
 8012186:	4621      	mov	r1, r4
 8012188:	f811 3b01 	ldrb.w	r3, [r1], #1
 801218c:	3b30      	subs	r3, #48	; 0x30
 801218e:	2b09      	cmp	r3, #9
 8012190:	d94d      	bls.n	801222e <_vfiprintf_r+0x1a6>
 8012192:	b1b0      	cbz	r0, 80121c2 <_vfiprintf_r+0x13a>
 8012194:	9207      	str	r2, [sp, #28]
 8012196:	e014      	b.n	80121c2 <_vfiprintf_r+0x13a>
 8012198:	eba0 0308 	sub.w	r3, r0, r8
 801219c:	fa09 f303 	lsl.w	r3, r9, r3
 80121a0:	4313      	orrs	r3, r2
 80121a2:	9304      	str	r3, [sp, #16]
 80121a4:	46a2      	mov	sl, r4
 80121a6:	e7d2      	b.n	801214e <_vfiprintf_r+0xc6>
 80121a8:	9b03      	ldr	r3, [sp, #12]
 80121aa:	1d19      	adds	r1, r3, #4
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	9103      	str	r1, [sp, #12]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	bfbb      	ittet	lt
 80121b4:	425b      	neglt	r3, r3
 80121b6:	f042 0202 	orrlt.w	r2, r2, #2
 80121ba:	9307      	strge	r3, [sp, #28]
 80121bc:	9307      	strlt	r3, [sp, #28]
 80121be:	bfb8      	it	lt
 80121c0:	9204      	strlt	r2, [sp, #16]
 80121c2:	7823      	ldrb	r3, [r4, #0]
 80121c4:	2b2e      	cmp	r3, #46	; 0x2e
 80121c6:	d10c      	bne.n	80121e2 <_vfiprintf_r+0x15a>
 80121c8:	7863      	ldrb	r3, [r4, #1]
 80121ca:	2b2a      	cmp	r3, #42	; 0x2a
 80121cc:	d134      	bne.n	8012238 <_vfiprintf_r+0x1b0>
 80121ce:	9b03      	ldr	r3, [sp, #12]
 80121d0:	1d1a      	adds	r2, r3, #4
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	9203      	str	r2, [sp, #12]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	bfb8      	it	lt
 80121da:	f04f 33ff 	movlt.w	r3, #4294967295
 80121de:	3402      	adds	r4, #2
 80121e0:	9305      	str	r3, [sp, #20]
 80121e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80122b8 <_vfiprintf_r+0x230>
 80121e6:	7821      	ldrb	r1, [r4, #0]
 80121e8:	2203      	movs	r2, #3
 80121ea:	4650      	mov	r0, sl
 80121ec:	f7ed fff0 	bl	80001d0 <memchr>
 80121f0:	b138      	cbz	r0, 8012202 <_vfiprintf_r+0x17a>
 80121f2:	9b04      	ldr	r3, [sp, #16]
 80121f4:	eba0 000a 	sub.w	r0, r0, sl
 80121f8:	2240      	movs	r2, #64	; 0x40
 80121fa:	4082      	lsls	r2, r0
 80121fc:	4313      	orrs	r3, r2
 80121fe:	3401      	adds	r4, #1
 8012200:	9304      	str	r3, [sp, #16]
 8012202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012206:	4829      	ldr	r0, [pc, #164]	; (80122ac <_vfiprintf_r+0x224>)
 8012208:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801220c:	2206      	movs	r2, #6
 801220e:	f7ed ffdf 	bl	80001d0 <memchr>
 8012212:	2800      	cmp	r0, #0
 8012214:	d03f      	beq.n	8012296 <_vfiprintf_r+0x20e>
 8012216:	4b26      	ldr	r3, [pc, #152]	; (80122b0 <_vfiprintf_r+0x228>)
 8012218:	bb1b      	cbnz	r3, 8012262 <_vfiprintf_r+0x1da>
 801221a:	9b03      	ldr	r3, [sp, #12]
 801221c:	3307      	adds	r3, #7
 801221e:	f023 0307 	bic.w	r3, r3, #7
 8012222:	3308      	adds	r3, #8
 8012224:	9303      	str	r3, [sp, #12]
 8012226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012228:	443b      	add	r3, r7
 801222a:	9309      	str	r3, [sp, #36]	; 0x24
 801222c:	e768      	b.n	8012100 <_vfiprintf_r+0x78>
 801222e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012232:	460c      	mov	r4, r1
 8012234:	2001      	movs	r0, #1
 8012236:	e7a6      	b.n	8012186 <_vfiprintf_r+0xfe>
 8012238:	2300      	movs	r3, #0
 801223a:	3401      	adds	r4, #1
 801223c:	9305      	str	r3, [sp, #20]
 801223e:	4619      	mov	r1, r3
 8012240:	f04f 0c0a 	mov.w	ip, #10
 8012244:	4620      	mov	r0, r4
 8012246:	f810 2b01 	ldrb.w	r2, [r0], #1
 801224a:	3a30      	subs	r2, #48	; 0x30
 801224c:	2a09      	cmp	r2, #9
 801224e:	d903      	bls.n	8012258 <_vfiprintf_r+0x1d0>
 8012250:	2b00      	cmp	r3, #0
 8012252:	d0c6      	beq.n	80121e2 <_vfiprintf_r+0x15a>
 8012254:	9105      	str	r1, [sp, #20]
 8012256:	e7c4      	b.n	80121e2 <_vfiprintf_r+0x15a>
 8012258:	fb0c 2101 	mla	r1, ip, r1, r2
 801225c:	4604      	mov	r4, r0
 801225e:	2301      	movs	r3, #1
 8012260:	e7f0      	b.n	8012244 <_vfiprintf_r+0x1bc>
 8012262:	ab03      	add	r3, sp, #12
 8012264:	9300      	str	r3, [sp, #0]
 8012266:	462a      	mov	r2, r5
 8012268:	4b12      	ldr	r3, [pc, #72]	; (80122b4 <_vfiprintf_r+0x22c>)
 801226a:	a904      	add	r1, sp, #16
 801226c:	4630      	mov	r0, r6
 801226e:	f7fb fa7d 	bl	800d76c <_printf_float>
 8012272:	4607      	mov	r7, r0
 8012274:	1c78      	adds	r0, r7, #1
 8012276:	d1d6      	bne.n	8012226 <_vfiprintf_r+0x19e>
 8012278:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801227a:	07d9      	lsls	r1, r3, #31
 801227c:	d405      	bmi.n	801228a <_vfiprintf_r+0x202>
 801227e:	89ab      	ldrh	r3, [r5, #12]
 8012280:	059a      	lsls	r2, r3, #22
 8012282:	d402      	bmi.n	801228a <_vfiprintf_r+0x202>
 8012284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012286:	f7fc fa6b 	bl	800e760 <__retarget_lock_release_recursive>
 801228a:	89ab      	ldrh	r3, [r5, #12]
 801228c:	065b      	lsls	r3, r3, #25
 801228e:	f53f af1d 	bmi.w	80120cc <_vfiprintf_r+0x44>
 8012292:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012294:	e71c      	b.n	80120d0 <_vfiprintf_r+0x48>
 8012296:	ab03      	add	r3, sp, #12
 8012298:	9300      	str	r3, [sp, #0]
 801229a:	462a      	mov	r2, r5
 801229c:	4b05      	ldr	r3, [pc, #20]	; (80122b4 <_vfiprintf_r+0x22c>)
 801229e:	a904      	add	r1, sp, #16
 80122a0:	4630      	mov	r0, r6
 80122a2:	f7fb fd07 	bl	800dcb4 <_printf_i>
 80122a6:	e7e4      	b.n	8012272 <_vfiprintf_r+0x1ea>
 80122a8:	08012991 	.word	0x08012991
 80122ac:	0801299b 	.word	0x0801299b
 80122b0:	0800d76d 	.word	0x0800d76d
 80122b4:	08012065 	.word	0x08012065
 80122b8:	08012997 	.word	0x08012997

080122bc <__swbuf_r>:
 80122bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122be:	460e      	mov	r6, r1
 80122c0:	4614      	mov	r4, r2
 80122c2:	4605      	mov	r5, r0
 80122c4:	b118      	cbz	r0, 80122ce <__swbuf_r+0x12>
 80122c6:	6a03      	ldr	r3, [r0, #32]
 80122c8:	b90b      	cbnz	r3, 80122ce <__swbuf_r+0x12>
 80122ca:	f7fc f8b1 	bl	800e430 <__sinit>
 80122ce:	69a3      	ldr	r3, [r4, #24]
 80122d0:	60a3      	str	r3, [r4, #8]
 80122d2:	89a3      	ldrh	r3, [r4, #12]
 80122d4:	071a      	lsls	r2, r3, #28
 80122d6:	d525      	bpl.n	8012324 <__swbuf_r+0x68>
 80122d8:	6923      	ldr	r3, [r4, #16]
 80122da:	b31b      	cbz	r3, 8012324 <__swbuf_r+0x68>
 80122dc:	6823      	ldr	r3, [r4, #0]
 80122de:	6922      	ldr	r2, [r4, #16]
 80122e0:	1a98      	subs	r0, r3, r2
 80122e2:	6963      	ldr	r3, [r4, #20]
 80122e4:	b2f6      	uxtb	r6, r6
 80122e6:	4283      	cmp	r3, r0
 80122e8:	4637      	mov	r7, r6
 80122ea:	dc04      	bgt.n	80122f6 <__swbuf_r+0x3a>
 80122ec:	4621      	mov	r1, r4
 80122ee:	4628      	mov	r0, r5
 80122f0:	f7ff f956 	bl	80115a0 <_fflush_r>
 80122f4:	b9e0      	cbnz	r0, 8012330 <__swbuf_r+0x74>
 80122f6:	68a3      	ldr	r3, [r4, #8]
 80122f8:	3b01      	subs	r3, #1
 80122fa:	60a3      	str	r3, [r4, #8]
 80122fc:	6823      	ldr	r3, [r4, #0]
 80122fe:	1c5a      	adds	r2, r3, #1
 8012300:	6022      	str	r2, [r4, #0]
 8012302:	701e      	strb	r6, [r3, #0]
 8012304:	6962      	ldr	r2, [r4, #20]
 8012306:	1c43      	adds	r3, r0, #1
 8012308:	429a      	cmp	r2, r3
 801230a:	d004      	beq.n	8012316 <__swbuf_r+0x5a>
 801230c:	89a3      	ldrh	r3, [r4, #12]
 801230e:	07db      	lsls	r3, r3, #31
 8012310:	d506      	bpl.n	8012320 <__swbuf_r+0x64>
 8012312:	2e0a      	cmp	r6, #10
 8012314:	d104      	bne.n	8012320 <__swbuf_r+0x64>
 8012316:	4621      	mov	r1, r4
 8012318:	4628      	mov	r0, r5
 801231a:	f7ff f941 	bl	80115a0 <_fflush_r>
 801231e:	b938      	cbnz	r0, 8012330 <__swbuf_r+0x74>
 8012320:	4638      	mov	r0, r7
 8012322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012324:	4621      	mov	r1, r4
 8012326:	4628      	mov	r0, r5
 8012328:	f000 f806 	bl	8012338 <__swsetup_r>
 801232c:	2800      	cmp	r0, #0
 801232e:	d0d5      	beq.n	80122dc <__swbuf_r+0x20>
 8012330:	f04f 37ff 	mov.w	r7, #4294967295
 8012334:	e7f4      	b.n	8012320 <__swbuf_r+0x64>
	...

08012338 <__swsetup_r>:
 8012338:	b538      	push	{r3, r4, r5, lr}
 801233a:	4b2a      	ldr	r3, [pc, #168]	; (80123e4 <__swsetup_r+0xac>)
 801233c:	4605      	mov	r5, r0
 801233e:	6818      	ldr	r0, [r3, #0]
 8012340:	460c      	mov	r4, r1
 8012342:	b118      	cbz	r0, 801234c <__swsetup_r+0x14>
 8012344:	6a03      	ldr	r3, [r0, #32]
 8012346:	b90b      	cbnz	r3, 801234c <__swsetup_r+0x14>
 8012348:	f7fc f872 	bl	800e430 <__sinit>
 801234c:	89a3      	ldrh	r3, [r4, #12]
 801234e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012352:	0718      	lsls	r0, r3, #28
 8012354:	d422      	bmi.n	801239c <__swsetup_r+0x64>
 8012356:	06d9      	lsls	r1, r3, #27
 8012358:	d407      	bmi.n	801236a <__swsetup_r+0x32>
 801235a:	2309      	movs	r3, #9
 801235c:	602b      	str	r3, [r5, #0]
 801235e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012362:	81a3      	strh	r3, [r4, #12]
 8012364:	f04f 30ff 	mov.w	r0, #4294967295
 8012368:	e034      	b.n	80123d4 <__swsetup_r+0x9c>
 801236a:	0758      	lsls	r0, r3, #29
 801236c:	d512      	bpl.n	8012394 <__swsetup_r+0x5c>
 801236e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012370:	b141      	cbz	r1, 8012384 <__swsetup_r+0x4c>
 8012372:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012376:	4299      	cmp	r1, r3
 8012378:	d002      	beq.n	8012380 <__swsetup_r+0x48>
 801237a:	4628      	mov	r0, r5
 801237c:	f7fd f882 	bl	800f484 <_free_r>
 8012380:	2300      	movs	r3, #0
 8012382:	6363      	str	r3, [r4, #52]	; 0x34
 8012384:	89a3      	ldrh	r3, [r4, #12]
 8012386:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801238a:	81a3      	strh	r3, [r4, #12]
 801238c:	2300      	movs	r3, #0
 801238e:	6063      	str	r3, [r4, #4]
 8012390:	6923      	ldr	r3, [r4, #16]
 8012392:	6023      	str	r3, [r4, #0]
 8012394:	89a3      	ldrh	r3, [r4, #12]
 8012396:	f043 0308 	orr.w	r3, r3, #8
 801239a:	81a3      	strh	r3, [r4, #12]
 801239c:	6923      	ldr	r3, [r4, #16]
 801239e:	b94b      	cbnz	r3, 80123b4 <__swsetup_r+0x7c>
 80123a0:	89a3      	ldrh	r3, [r4, #12]
 80123a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80123a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80123aa:	d003      	beq.n	80123b4 <__swsetup_r+0x7c>
 80123ac:	4621      	mov	r1, r4
 80123ae:	4628      	mov	r0, r5
 80123b0:	f000 f884 	bl	80124bc <__smakebuf_r>
 80123b4:	89a0      	ldrh	r0, [r4, #12]
 80123b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80123ba:	f010 0301 	ands.w	r3, r0, #1
 80123be:	d00a      	beq.n	80123d6 <__swsetup_r+0x9e>
 80123c0:	2300      	movs	r3, #0
 80123c2:	60a3      	str	r3, [r4, #8]
 80123c4:	6963      	ldr	r3, [r4, #20]
 80123c6:	425b      	negs	r3, r3
 80123c8:	61a3      	str	r3, [r4, #24]
 80123ca:	6923      	ldr	r3, [r4, #16]
 80123cc:	b943      	cbnz	r3, 80123e0 <__swsetup_r+0xa8>
 80123ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80123d2:	d1c4      	bne.n	801235e <__swsetup_r+0x26>
 80123d4:	bd38      	pop	{r3, r4, r5, pc}
 80123d6:	0781      	lsls	r1, r0, #30
 80123d8:	bf58      	it	pl
 80123da:	6963      	ldrpl	r3, [r4, #20]
 80123dc:	60a3      	str	r3, [r4, #8]
 80123de:	e7f4      	b.n	80123ca <__swsetup_r+0x92>
 80123e0:	2000      	movs	r0, #0
 80123e2:	e7f7      	b.n	80123d4 <__swsetup_r+0x9c>
 80123e4:	20000084 	.word	0x20000084

080123e8 <_raise_r>:
 80123e8:	291f      	cmp	r1, #31
 80123ea:	b538      	push	{r3, r4, r5, lr}
 80123ec:	4604      	mov	r4, r0
 80123ee:	460d      	mov	r5, r1
 80123f0:	d904      	bls.n	80123fc <_raise_r+0x14>
 80123f2:	2316      	movs	r3, #22
 80123f4:	6003      	str	r3, [r0, #0]
 80123f6:	f04f 30ff 	mov.w	r0, #4294967295
 80123fa:	bd38      	pop	{r3, r4, r5, pc}
 80123fc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80123fe:	b112      	cbz	r2, 8012406 <_raise_r+0x1e>
 8012400:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012404:	b94b      	cbnz	r3, 801241a <_raise_r+0x32>
 8012406:	4620      	mov	r0, r4
 8012408:	f000 f830 	bl	801246c <_getpid_r>
 801240c:	462a      	mov	r2, r5
 801240e:	4601      	mov	r1, r0
 8012410:	4620      	mov	r0, r4
 8012412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012416:	f000 b817 	b.w	8012448 <_kill_r>
 801241a:	2b01      	cmp	r3, #1
 801241c:	d00a      	beq.n	8012434 <_raise_r+0x4c>
 801241e:	1c59      	adds	r1, r3, #1
 8012420:	d103      	bne.n	801242a <_raise_r+0x42>
 8012422:	2316      	movs	r3, #22
 8012424:	6003      	str	r3, [r0, #0]
 8012426:	2001      	movs	r0, #1
 8012428:	e7e7      	b.n	80123fa <_raise_r+0x12>
 801242a:	2400      	movs	r4, #0
 801242c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012430:	4628      	mov	r0, r5
 8012432:	4798      	blx	r3
 8012434:	2000      	movs	r0, #0
 8012436:	e7e0      	b.n	80123fa <_raise_r+0x12>

08012438 <raise>:
 8012438:	4b02      	ldr	r3, [pc, #8]	; (8012444 <raise+0xc>)
 801243a:	4601      	mov	r1, r0
 801243c:	6818      	ldr	r0, [r3, #0]
 801243e:	f7ff bfd3 	b.w	80123e8 <_raise_r>
 8012442:	bf00      	nop
 8012444:	20000084 	.word	0x20000084

08012448 <_kill_r>:
 8012448:	b538      	push	{r3, r4, r5, lr}
 801244a:	4d07      	ldr	r5, [pc, #28]	; (8012468 <_kill_r+0x20>)
 801244c:	2300      	movs	r3, #0
 801244e:	4604      	mov	r4, r0
 8012450:	4608      	mov	r0, r1
 8012452:	4611      	mov	r1, r2
 8012454:	602b      	str	r3, [r5, #0]
 8012456:	f7ef fdbd 	bl	8001fd4 <_kill>
 801245a:	1c43      	adds	r3, r0, #1
 801245c:	d102      	bne.n	8012464 <_kill_r+0x1c>
 801245e:	682b      	ldr	r3, [r5, #0]
 8012460:	b103      	cbz	r3, 8012464 <_kill_r+0x1c>
 8012462:	6023      	str	r3, [r4, #0]
 8012464:	bd38      	pop	{r3, r4, r5, pc}
 8012466:	bf00      	nop
 8012468:	200011c4 	.word	0x200011c4

0801246c <_getpid_r>:
 801246c:	f7ef bdaa 	b.w	8001fc4 <_getpid>

08012470 <__swhatbuf_r>:
 8012470:	b570      	push	{r4, r5, r6, lr}
 8012472:	460c      	mov	r4, r1
 8012474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012478:	2900      	cmp	r1, #0
 801247a:	b096      	sub	sp, #88	; 0x58
 801247c:	4615      	mov	r5, r2
 801247e:	461e      	mov	r6, r3
 8012480:	da0d      	bge.n	801249e <__swhatbuf_r+0x2e>
 8012482:	89a3      	ldrh	r3, [r4, #12]
 8012484:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012488:	f04f 0100 	mov.w	r1, #0
 801248c:	bf0c      	ite	eq
 801248e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012492:	2340      	movne	r3, #64	; 0x40
 8012494:	2000      	movs	r0, #0
 8012496:	6031      	str	r1, [r6, #0]
 8012498:	602b      	str	r3, [r5, #0]
 801249a:	b016      	add	sp, #88	; 0x58
 801249c:	bd70      	pop	{r4, r5, r6, pc}
 801249e:	466a      	mov	r2, sp
 80124a0:	f000 f848 	bl	8012534 <_fstat_r>
 80124a4:	2800      	cmp	r0, #0
 80124a6:	dbec      	blt.n	8012482 <__swhatbuf_r+0x12>
 80124a8:	9901      	ldr	r1, [sp, #4]
 80124aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80124ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80124b2:	4259      	negs	r1, r3
 80124b4:	4159      	adcs	r1, r3
 80124b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124ba:	e7eb      	b.n	8012494 <__swhatbuf_r+0x24>

080124bc <__smakebuf_r>:
 80124bc:	898b      	ldrh	r3, [r1, #12]
 80124be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80124c0:	079d      	lsls	r5, r3, #30
 80124c2:	4606      	mov	r6, r0
 80124c4:	460c      	mov	r4, r1
 80124c6:	d507      	bpl.n	80124d8 <__smakebuf_r+0x1c>
 80124c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80124cc:	6023      	str	r3, [r4, #0]
 80124ce:	6123      	str	r3, [r4, #16]
 80124d0:	2301      	movs	r3, #1
 80124d2:	6163      	str	r3, [r4, #20]
 80124d4:	b002      	add	sp, #8
 80124d6:	bd70      	pop	{r4, r5, r6, pc}
 80124d8:	ab01      	add	r3, sp, #4
 80124da:	466a      	mov	r2, sp
 80124dc:	f7ff ffc8 	bl	8012470 <__swhatbuf_r>
 80124e0:	9900      	ldr	r1, [sp, #0]
 80124e2:	4605      	mov	r5, r0
 80124e4:	4630      	mov	r0, r6
 80124e6:	f7fb f815 	bl	800d514 <_malloc_r>
 80124ea:	b948      	cbnz	r0, 8012500 <__smakebuf_r+0x44>
 80124ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124f0:	059a      	lsls	r2, r3, #22
 80124f2:	d4ef      	bmi.n	80124d4 <__smakebuf_r+0x18>
 80124f4:	f023 0303 	bic.w	r3, r3, #3
 80124f8:	f043 0302 	orr.w	r3, r3, #2
 80124fc:	81a3      	strh	r3, [r4, #12]
 80124fe:	e7e3      	b.n	80124c8 <__smakebuf_r+0xc>
 8012500:	89a3      	ldrh	r3, [r4, #12]
 8012502:	6020      	str	r0, [r4, #0]
 8012504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012508:	81a3      	strh	r3, [r4, #12]
 801250a:	9b00      	ldr	r3, [sp, #0]
 801250c:	6163      	str	r3, [r4, #20]
 801250e:	9b01      	ldr	r3, [sp, #4]
 8012510:	6120      	str	r0, [r4, #16]
 8012512:	b15b      	cbz	r3, 801252c <__smakebuf_r+0x70>
 8012514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012518:	4630      	mov	r0, r6
 801251a:	f000 f81d 	bl	8012558 <_isatty_r>
 801251e:	b128      	cbz	r0, 801252c <__smakebuf_r+0x70>
 8012520:	89a3      	ldrh	r3, [r4, #12]
 8012522:	f023 0303 	bic.w	r3, r3, #3
 8012526:	f043 0301 	orr.w	r3, r3, #1
 801252a:	81a3      	strh	r3, [r4, #12]
 801252c:	89a3      	ldrh	r3, [r4, #12]
 801252e:	431d      	orrs	r5, r3
 8012530:	81a5      	strh	r5, [r4, #12]
 8012532:	e7cf      	b.n	80124d4 <__smakebuf_r+0x18>

08012534 <_fstat_r>:
 8012534:	b538      	push	{r3, r4, r5, lr}
 8012536:	4d07      	ldr	r5, [pc, #28]	; (8012554 <_fstat_r+0x20>)
 8012538:	2300      	movs	r3, #0
 801253a:	4604      	mov	r4, r0
 801253c:	4608      	mov	r0, r1
 801253e:	4611      	mov	r1, r2
 8012540:	602b      	str	r3, [r5, #0]
 8012542:	f7ef fda6 	bl	8002092 <_fstat>
 8012546:	1c43      	adds	r3, r0, #1
 8012548:	d102      	bne.n	8012550 <_fstat_r+0x1c>
 801254a:	682b      	ldr	r3, [r5, #0]
 801254c:	b103      	cbz	r3, 8012550 <_fstat_r+0x1c>
 801254e:	6023      	str	r3, [r4, #0]
 8012550:	bd38      	pop	{r3, r4, r5, pc}
 8012552:	bf00      	nop
 8012554:	200011c4 	.word	0x200011c4

08012558 <_isatty_r>:
 8012558:	b538      	push	{r3, r4, r5, lr}
 801255a:	4d06      	ldr	r5, [pc, #24]	; (8012574 <_isatty_r+0x1c>)
 801255c:	2300      	movs	r3, #0
 801255e:	4604      	mov	r4, r0
 8012560:	4608      	mov	r0, r1
 8012562:	602b      	str	r3, [r5, #0]
 8012564:	f7ef fda5 	bl	80020b2 <_isatty>
 8012568:	1c43      	adds	r3, r0, #1
 801256a:	d102      	bne.n	8012572 <_isatty_r+0x1a>
 801256c:	682b      	ldr	r3, [r5, #0]
 801256e:	b103      	cbz	r3, 8012572 <_isatty_r+0x1a>
 8012570:	6023      	str	r3, [r4, #0]
 8012572:	bd38      	pop	{r3, r4, r5, pc}
 8012574:	200011c4 	.word	0x200011c4

08012578 <_init>:
 8012578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801257a:	bf00      	nop
 801257c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801257e:	bc08      	pop	{r3}
 8012580:	469e      	mov	lr, r3
 8012582:	4770      	bx	lr

08012584 <_fini>:
 8012584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012586:	bf00      	nop
 8012588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801258a:	bc08      	pop	{r3}
 801258c:	469e      	mov	lr, r3
 801258e:	4770      	bx	lr
