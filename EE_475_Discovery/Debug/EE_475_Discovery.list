
EE_475_Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a528  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800a6b0  0800a6b0  0001a6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6cc  0800a6cc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6cc  0800a6cc  0001a6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6d4  0800a6d4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6d4  0800a6d4  0001a6d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6d8  0800a6d8  0001a6d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800a6dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000af4  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b70  20000b70  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c8f0  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004111  00000000  00000000  0003c9df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018b8  00000000  00000000  00040af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001347  00000000  00000000  000423a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000252bb  00000000  00000000  000436ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002082e  00000000  00000000  000689aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6ce6  00000000  00000000  000891d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006d00  00000000  00000000  0015fec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00166bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a698 	.word	0x0800a698

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800a698 	.word	0x0800a698

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	f5ad 6dfb 	sub.w	sp, sp, #2008	; 0x7d8
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fe4a 	bl	8001164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f876 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 fa68 	bl	80009a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d8:	f000 f8dc 	bl	8000694 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004dc:	f000 f908 	bl	80006f0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e0:	f000 f936 	bl	8000750 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e4:	f009 fc82 	bl	8009dec <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 fa0a 	bl	8000900 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80004ec:	f000 f966 	bl	80007bc <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80004f0:	f000 fa30 	bl	8000954 <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80004f4:	2100      	movs	r1, #0
 80004f6:	481c      	ldr	r0, [pc, #112]	; (8000568 <main+0xa4>)
 80004f8:	f004 ff9c 	bl	8005434 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004fc:	f009 fc9c 	bl	8009e38 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    //HAL_UART_Receive_DMA(huart, pData, Size)
    //HAL_UART_Receive(&huart3, UART3_Rx_buf, 1000, 500);
    int i = receive_GPS(UART3_Rx_buf);
 8000500:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8000504:	4618      	mov	r0, r3
 8000506:	f000 f833 	bl	8000570 <receive_GPS>
 800050a:	f8c7 07d4 	str.w	r0, [r7, #2004]	; 0x7d4
    if (i) {
 800050e:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8000512:	2b00      	cmp	r3, #0
 8000514:	d01e      	beq.n	8000554 <main+0x90>
    	UART3_Rx_buf[i++] = '\r';
 8000516:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 800051a:	1c5a      	adds	r2, r3, #1
 800051c:	f8c7 27d4 	str.w	r2, [r7, #2004]	; 0x7d4
 8000520:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 8000524:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 8000528:	210d      	movs	r1, #13
 800052a:	54d1      	strb	r1, [r2, r3]
    	UART3_Rx_buf[i++] = '\n';
 800052c:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8000530:	1c5a      	adds	r2, r3, #1
 8000532:	f8c7 27d4 	str.w	r2, [r7, #2004]	; 0x7d4
 8000536:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800053a:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 800053e:	210a      	movs	r1, #10
 8000540:	54d1      	strb	r1, [r2, r3]
    	HAL_UART_Transmit(&huart2, UART3_Rx_buf, i, 100);
 8000542:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8000546:	b29a      	uxth	r2, r3
 8000548:	f507 717b 	add.w	r1, r7, #1004	; 0x3ec
 800054c:	2364      	movs	r3, #100	; 0x64
 800054e:	4807      	ldr	r0, [pc, #28]	; (800056c <main+0xa8>)
 8000550:	f005 fdfc 	bl	800614c <HAL_UART_Transmit>
    }

    // int p = 1500 + 500*sin(i/100.0);
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1500);
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <main+0xa4>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800055c:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(10);
 800055e:	200a      	movs	r0, #10
 8000560:	f000 fe72 	bl	8001248 <HAL_Delay>
  {
 8000564:	e7ca      	b.n	80004fc <main+0x38>
 8000566:	bf00      	nop
 8000568:	2000018c 	.word	0x2000018c
 800056c:	200001d4 	.word	0x200001d4

08000570 <receive_GPS>:
  }
  /* USER CODE END 3 */
}

int receive_GPS(uint8_t* rxBuf) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
	uint8_t c = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	72fb      	strb	r3, [r7, #11]
	while (i < 1000) {
 8000580:	e011      	b.n	80005a6 <receive_GPS+0x36>
		if (HAL_UART_Receive(&huart3, &c, 1, 5) == HAL_OK) {
 8000582:	f107 010b 	add.w	r1, r7, #11
 8000586:	2305      	movs	r3, #5
 8000588:	2201      	movs	r2, #1
 800058a:	480c      	ldr	r0, [pc, #48]	; (80005bc <receive_GPS+0x4c>)
 800058c:	f005 fe69 	bl	8006262 <HAL_UART_Receive>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d10c      	bne.n	80005b0 <receive_GPS+0x40>
			rxBuf[i++] = c;
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	1c5a      	adds	r2, r3, #1
 800059a:	60fa      	str	r2, [r7, #12]
 800059c:	461a      	mov	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4413      	add	r3, r2
 80005a2:	7afa      	ldrb	r2, [r7, #11]
 80005a4:	701a      	strb	r2, [r3, #0]
	while (i < 1000) {
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005ac:	dbe9      	blt.n	8000582 <receive_GPS+0x12>
 80005ae:	e000      	b.n	80005b2 <receive_GPS+0x42>
	    } else break;
 80005b0:	bf00      	nop
	}
	return i;
 80005b2:	68fb      	ldr	r3, [r7, #12]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	2000021c 	.word	0x2000021c

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f009 ffd2 	bl	800a578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	4a27      	ldr	r2, [pc, #156]	; (800068c <SystemClock_Config+0xcc>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a21      	ldr	r2, [pc, #132]	; (8000690 <SystemClock_Config+0xd0>)
 800060a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061c:	2301      	movs	r3, #1
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000630:	2308      	movs	r3, #8
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000634:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000638:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800063e:	2307      	movs	r3, #7
 8000640:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	4618      	mov	r0, r3
 8000648:	f003 ffe8 	bl	800461c <HAL_RCC_OscConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000652:	f000 faa7 	bl	8000ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000656:	230f      	movs	r3, #15
 8000658:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065a:	2302      	movs	r3, #2
 800065c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000662:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000666:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2105      	movs	r1, #5
 8000674:	4618      	mov	r0, r3
 8000676:	f004 fa49 	bl	8004b0c <HAL_RCC_ClockConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000680:	f000 fa90 	bl	8000ba4 <Error_Handler>
  }
}
 8000684:	bf00      	nop
 8000686:	3750      	adds	r7, #80	; 0x50
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_I2C1_Init+0x50>)
 800069a:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <MX_I2C1_Init+0x54>)
 800069c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006a0:	4a12      	ldr	r2, [pc, #72]	; (80006ec <MX_I2C1_Init+0x58>)
 80006a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006d2:	f003 f9bf 	bl	8003a54 <HAL_I2C_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006dc:	f000 fa62 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000098 	.word	0x20000098
 80006e8:	40005400 	.word	0x40005400
 80006ec:	000186a0 	.word	0x000186a0

080006f0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_I2S3_Init+0x54>)
 80006f6:	4a14      	ldr	r2, [pc, #80]	; (8000748 <MX_I2S3_Init+0x58>)
 80006f8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_I2S3_Init+0x54>)
 80006fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000700:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_I2S3_Init+0x54>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000708:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_I2S3_Init+0x54>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <MX_I2S3_Init+0x54>)
 8000710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000714:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_I2S3_Init+0x54>)
 8000718:	4a0c      	ldr	r2, [pc, #48]	; (800074c <MX_I2S3_Init+0x5c>)
 800071a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_I2S3_Init+0x54>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_I2S3_Init+0x54>)
 8000724:	2200      	movs	r2, #0
 8000726:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_I2S3_Init+0x54>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_I2S3_Init+0x54>)
 8000730:	f003 fad4 	bl	8003cdc <HAL_I2S_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800073a:	f000 fa33 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200000ec 	.word	0x200000ec
 8000748:	40003c00 	.word	0x40003c00
 800074c:	00017700 	.word	0x00017700

08000750 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000754:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000756:	4a18      	ldr	r2, [pc, #96]	; (80007b8 <MX_SPI1_Init+0x68>)
 8000758:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_SPI1_Init+0x64>)
 800075c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000760:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_SPI1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_SPI1_Init+0x64>)
 800077c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000780:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_SPI1_Init+0x64>)
 800079c:	220a      	movs	r2, #10
 800079e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_SPI1_Init+0x64>)
 80007a2:	f004 fd15 	bl	80051d0 <HAL_SPI_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007ac:	f000 f9fa 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000134 	.word	0x20000134
 80007b8:	40013000 	.word	0x40013000

080007bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b096      	sub	sp, #88	; 0x58
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
 80007ea:	615a      	str	r2, [r3, #20]
 80007ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2220      	movs	r2, #32
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f009 febf 	bl	800a578 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007fa:	4b3f      	ldr	r3, [pc, #252]	; (80008f8 <MX_TIM1_Init+0x13c>)
 80007fc:	4a3f      	ldr	r2, [pc, #252]	; (80008fc <MX_TIM1_Init+0x140>)
 80007fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168;
 8000800:	4b3d      	ldr	r3, [pc, #244]	; (80008f8 <MX_TIM1_Init+0x13c>)
 8000802:	22a8      	movs	r2, #168	; 0xa8
 8000804:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000806:	4b3c      	ldr	r3, [pc, #240]	; (80008f8 <MX_TIM1_Init+0x13c>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 800080c:	4b3a      	ldr	r3, [pc, #232]	; (80008f8 <MX_TIM1_Init+0x13c>)
 800080e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000812:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000814:	4b38      	ldr	r3, [pc, #224]	; (80008f8 <MX_TIM1_Init+0x13c>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800081a:	4b37      	ldr	r3, [pc, #220]	; (80008f8 <MX_TIM1_Init+0x13c>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000820:	4b35      	ldr	r3, [pc, #212]	; (80008f8 <MX_TIM1_Init+0x13c>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000826:	4834      	ldr	r0, [pc, #208]	; (80008f8 <MX_TIM1_Init+0x13c>)
 8000828:	f004 fd5b 	bl	80052e2 <HAL_TIM_Base_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000832:	f000 f9b7 	bl	8000ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800083c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000840:	4619      	mov	r1, r3
 8000842:	482d      	ldr	r0, [pc, #180]	; (80008f8 <MX_TIM1_Init+0x13c>)
 8000844:	f004 ff80 	bl	8005748 <HAL_TIM_ConfigClockSource>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800084e:	f000 f9a9 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000852:	4829      	ldr	r0, [pc, #164]	; (80008f8 <MX_TIM1_Init+0x13c>)
 8000854:	f004 fd94 	bl	8005380 <HAL_TIM_PWM_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800085e:	f000 f9a1 	bl	8000ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000862:	2300      	movs	r3, #0
 8000864:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800086a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800086e:	4619      	mov	r1, r3
 8000870:	4821      	ldr	r0, [pc, #132]	; (80008f8 <MX_TIM1_Init+0x13c>)
 8000872:	f005 fb4d 	bl	8005f10 <HAL_TIMEx_MasterConfigSynchronization>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800087c:	f000 f992 	bl	8000ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000880:	2360      	movs	r3, #96	; 0x60
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8000884:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800088a:	2300      	movs	r3, #0
 800088c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800088e:	2300      	movs	r3, #0
 8000890:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000892:	2300      	movs	r3, #0
 8000894:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000896:	2300      	movs	r3, #0
 8000898:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800089a:	2300      	movs	r3, #0
 800089c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800089e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a2:	2200      	movs	r2, #0
 80008a4:	4619      	mov	r1, r3
 80008a6:	4814      	ldr	r0, [pc, #80]	; (80008f8 <MX_TIM1_Init+0x13c>)
 80008a8:	f004 fe8c 	bl	80055c4 <HAL_TIM_PWM_ConfigChannel>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80008b2:	f000 f977 	bl	8000ba4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	4619      	mov	r1, r3
 80008d8:	4807      	ldr	r0, [pc, #28]	; (80008f8 <MX_TIM1_Init+0x13c>)
 80008da:	f005 fb95 	bl	8006008 <HAL_TIMEx_ConfigBreakDeadTime>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80008e4:	f000 f95e 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008e8:	4803      	ldr	r0, [pc, #12]	; (80008f8 <MX_TIM1_Init+0x13c>)
 80008ea:	f000 fabb 	bl	8000e64 <HAL_TIM_MspPostInit>

}
 80008ee:	bf00      	nop
 80008f0:	3758      	adds	r7, #88	; 0x58
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2000018c 	.word	0x2000018c
 80008fc:	40010000 	.word	0x40010000

08000900 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <MX_USART2_UART_Init+0x50>)
 8000908:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <MX_USART2_UART_Init+0x4c>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_USART2_UART_Init+0x4c>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <MX_USART2_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000938:	f005 fbb8 	bl	80060ac <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000942:	f000 f92f 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200001d4 	.word	0x200001d4
 8000950:	40004400 	.word	0x40004400

08000954 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_USART3_UART_Init+0x4c>)
 800095a:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <MX_USART3_UART_Init+0x50>)
 800095c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <MX_USART3_UART_Init+0x4c>)
 8000960:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000964:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_USART3_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_USART3_UART_Init+0x4c>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_USART3_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_USART3_UART_Init+0x4c>)
 800097a:	220c      	movs	r2, #12
 800097c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_USART3_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_USART3_UART_Init+0x4c>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_USART3_UART_Init+0x4c>)
 800098c:	f005 fb8e 	bl	80060ac <HAL_UART_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000996:	f000 f905 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000021c 	.word	0x2000021c
 80009a4:	40004800 	.word	0x40004800

080009a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08c      	sub	sp, #48	; 0x30
 80009ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	61bb      	str	r3, [r7, #24]
 80009c2:	4b72      	ldr	r3, [pc, #456]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a71      	ldr	r2, [pc, #452]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 80009c8:	f043 0310 	orr.w	r3, r3, #16
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b6f      	ldr	r3, [pc, #444]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0310 	and.w	r3, r3, #16
 80009d6:	61bb      	str	r3, [r7, #24]
 80009d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
 80009de:	4b6b      	ldr	r3, [pc, #428]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a6a      	ldr	r2, [pc, #424]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b68      	ldr	r3, [pc, #416]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b64      	ldr	r3, [pc, #400]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a63      	ldr	r2, [pc, #396]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b61      	ldr	r3, [pc, #388]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	4b5d      	ldr	r3, [pc, #372]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a5c      	ldr	r2, [pc, #368]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b5a      	ldr	r3, [pc, #360]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	4b56      	ldr	r3, [pc, #344]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a55      	ldr	r2, [pc, #340]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b53      	ldr	r3, [pc, #332]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b4f      	ldr	r3, [pc, #316]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a4e      	ldr	r2, [pc, #312]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b4c      	ldr	r3, [pc, #304]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2108      	movs	r1, #8
 8000a6a:	4849      	ldr	r0, [pc, #292]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000a6c:	f000 febe 	bl	80017ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	2101      	movs	r1, #1
 8000a74:	4847      	ldr	r0, [pc, #284]	; (8000b94 <MX_GPIO_Init+0x1ec>)
 8000a76:	f000 feb9 	bl	80017ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a80:	4845      	ldr	r0, [pc, #276]	; (8000b98 <MX_GPIO_Init+0x1f0>)
 8000a82:	f000 feb3 	bl	80017ec <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a86:	2308      	movs	r3, #8
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	483c      	ldr	r0, [pc, #240]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000a9e:	f000 fd09 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4836      	ldr	r0, [pc, #216]	; (8000b94 <MX_GPIO_Init+0x1ec>)
 8000aba:	f000 fcfb 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000abe:	2308      	movs	r3, #8
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ace:	2305      	movs	r3, #5
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	482e      	ldr	r0, [pc, #184]	; (8000b94 <MX_GPIO_Init+0x1ec>)
 8000ada:	f000 fceb 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ae2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	482a      	ldr	r0, [pc, #168]	; (8000b9c <MX_GPIO_Init+0x1f4>)
 8000af4:	f000 fcde 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000af8:	2304      	movs	r3, #4
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afc:	2300      	movs	r3, #0
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4825      	ldr	r0, [pc, #148]	; (8000ba0 <MX_GPIO_Init+0x1f8>)
 8000b0c:	f000 fcd2 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b22:	2305      	movs	r3, #5
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	481c      	ldr	r0, [pc, #112]	; (8000ba0 <MX_GPIO_Init+0x1f8>)
 8000b2e:	f000 fcc1 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b32:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b36:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4813      	ldr	r0, [pc, #76]	; (8000b98 <MX_GPIO_Init+0x1f0>)
 8000b4c:	f000 fcb2 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b50:	2320      	movs	r3, #32
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	4619      	mov	r1, r3
 8000b62:	480d      	ldr	r0, [pc, #52]	; (8000b98 <MX_GPIO_Init+0x1f0>)
 8000b64:	f000 fca6 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b6c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4804      	ldr	r0, [pc, #16]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000b7e:	f000 fc99 	bl	80014b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b82:	bf00      	nop
 8000b84:	3730      	adds	r7, #48	; 0x30
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40020800 	.word	0x40020800
 8000b98:	40020c00 	.word	0x40020c00
 8000b9c:	40020000 	.word	0x40020000
 8000ba0:	40020400 	.word	0x40020400

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba8:	b672      	cpsid	i
}
 8000baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bac:	e7fe      	b.n	8000bac <Error_Handler+0x8>
	...

08000bb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <HAL_MspInit+0x4c>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	4a0f      	ldr	r2, [pc, #60]	; (8000bfc <HAL_MspInit+0x4c>)
 8000bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <HAL_MspInit+0x4c>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <HAL_MspInit+0x4c>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	4a08      	ldr	r2, [pc, #32]	; (8000bfc <HAL_MspInit+0x4c>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be0:	6413      	str	r3, [r2, #64]	; 0x40
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_MspInit+0x4c>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bee:	2007      	movs	r0, #7
 8000bf0:	f000 fc1e 	bl	8001430 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40023800 	.word	0x40023800

08000c00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a19      	ldr	r2, [pc, #100]	; (8000c84 <HAL_I2C_MspInit+0x84>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d12c      	bne.n	8000c7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <HAL_I2C_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a17      	ldr	r2, [pc, #92]	; (8000c88 <HAL_I2C_MspInit+0x88>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_I2C_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c3e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c44:	2312      	movs	r3, #18
 8000c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c50:	2304      	movs	r3, #4
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	480c      	ldr	r0, [pc, #48]	; (8000c8c <HAL_I2C_MspInit+0x8c>)
 8000c5c:	f000 fc2a 	bl	80014b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_I2C_MspInit+0x88>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	4a07      	ldr	r2, [pc, #28]	; (8000c88 <HAL_I2C_MspInit+0x88>)
 8000c6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_I2C_MspInit+0x88>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c7c:	bf00      	nop
 8000c7e:	3728      	adds	r7, #40	; 0x28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40005400 	.word	0x40005400
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020400 	.word	0x40020400

08000c90 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08e      	sub	sp, #56	; 0x38
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a31      	ldr	r2, [pc, #196]	; (8000d80 <HAL_I2S_MspInit+0xf0>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d15a      	bne.n	8000d76 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000cc4:	23c0      	movs	r3, #192	; 0xc0
 8000cc6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f004 f93b 	bl	8004f4c <HAL_RCCEx_PeriphCLKConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000cdc:	f7ff ff62 	bl	8000ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	4b27      	ldr	r3, [pc, #156]	; (8000d84 <HAL_I2S_MspInit+0xf4>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce8:	4a26      	ldr	r2, [pc, #152]	; (8000d84 <HAL_I2S_MspInit+0xf4>)
 8000cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cee:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf0:	4b24      	ldr	r3, [pc, #144]	; (8000d84 <HAL_I2S_MspInit+0xf4>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <HAL_I2S_MspInit+0xf4>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d04:	4a1f      	ldr	r2, [pc, #124]	; (8000d84 <HAL_I2S_MspInit+0xf4>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <HAL_I2S_MspInit+0xf4>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <HAL_I2S_MspInit+0xf4>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	4a18      	ldr	r2, [pc, #96]	; (8000d84 <HAL_I2S_MspInit+0xf4>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	6313      	str	r3, [r2, #48]	; 0x30
 8000d28:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <HAL_I2S_MspInit+0xf4>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d34:	2310      	movs	r3, #16
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d44:	2306      	movs	r3, #6
 8000d46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480e      	ldr	r0, [pc, #56]	; (8000d88 <HAL_I2S_MspInit+0xf8>)
 8000d50:	f000 fbb0 	bl	80014b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d54:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d66:	2306      	movs	r3, #6
 8000d68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4806      	ldr	r0, [pc, #24]	; (8000d8c <HAL_I2S_MspInit+0xfc>)
 8000d72:	f000 fb9f 	bl	80014b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d76:	bf00      	nop
 8000d78:	3738      	adds	r7, #56	; 0x38
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40003c00 	.word	0x40003c00
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020000 	.word	0x40020000
 8000d8c:	40020800 	.word	0x40020800

08000d90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a19      	ldr	r2, [pc, #100]	; (8000e14 <HAL_SPI_MspInit+0x84>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d12b      	bne.n	8000e0a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <HAL_SPI_MspInit+0x88>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	4a17      	ldr	r2, [pc, #92]	; (8000e18 <HAL_SPI_MspInit+0x88>)
 8000dbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <HAL_SPI_MspInit+0x88>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <HAL_SPI_MspInit+0x88>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a10      	ldr	r2, [pc, #64]	; (8000e18 <HAL_SPI_MspInit+0x88>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <HAL_SPI_MspInit+0x88>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000dea:	23e0      	movs	r3, #224	; 0xe0
 8000dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dfa:	2305      	movs	r3, #5
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <HAL_SPI_MspInit+0x8c>)
 8000e06:	f000 fb55 	bl	80014b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	; 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40013000 	.word	0x40013000
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020000 	.word	0x40020000

08000e20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0b      	ldr	r2, [pc, #44]	; (8000e5c <HAL_TIM_Base_MspInit+0x3c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d10d      	bne.n	8000e4e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <HAL_TIM_Base_MspInit+0x40>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	4a09      	ldr	r2, [pc, #36]	; (8000e60 <HAL_TIM_Base_MspInit+0x40>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6453      	str	r3, [r2, #68]	; 0x44
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <HAL_TIM_Base_MspInit+0x40>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e4e:	bf00      	nop
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40010000 	.word	0x40010000
 8000e60:	40023800 	.word	0x40023800

08000e64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <HAL_TIM_MspPostInit+0x68>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d11e      	bne.n	8000ec4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <HAL_TIM_MspPostInit+0x6c>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a10      	ldr	r2, [pc, #64]	; (8000ed0 <HAL_TIM_MspPostInit+0x6c>)
 8000e90:	f043 0310 	orr.w	r3, r3, #16
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_TIM_MspPostInit+0x6c>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0310 	and.w	r3, r3, #16
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ea2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ea6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <HAL_TIM_MspPostInit+0x70>)
 8000ec0:	f000 faf8 	bl	80014b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ec4:	bf00      	nop
 8000ec6:	3720      	adds	r7, #32
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40010000 	.word	0x40010000
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08c      	sub	sp, #48	; 0x30
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a42      	ldr	r2, [pc, #264]	; (8001000 <HAL_UART_MspInit+0x128>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d12c      	bne.n	8000f54 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
 8000efe:	4b41      	ldr	r3, [pc, #260]	; (8001004 <HAL_UART_MspInit+0x12c>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a40      	ldr	r2, [pc, #256]	; (8001004 <HAL_UART_MspInit+0x12c>)
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0a:	4b3e      	ldr	r3, [pc, #248]	; (8001004 <HAL_UART_MspInit+0x12c>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f12:	61bb      	str	r3, [r7, #24]
 8000f14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	4b3a      	ldr	r3, [pc, #232]	; (8001004 <HAL_UART_MspInit+0x12c>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a39      	ldr	r2, [pc, #228]	; (8001004 <HAL_UART_MspInit+0x12c>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b37      	ldr	r3, [pc, #220]	; (8001004 <HAL_UART_MspInit+0x12c>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f32:	230c      	movs	r3, #12
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f42:	2307      	movs	r3, #7
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	482e      	ldr	r0, [pc, #184]	; (8001008 <HAL_UART_MspInit+0x130>)
 8000f4e:	f000 fab1 	bl	80014b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f52:	e050      	b.n	8000ff6 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a2c      	ldr	r2, [pc, #176]	; (800100c <HAL_UART_MspInit+0x134>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d14b      	bne.n	8000ff6 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	4b28      	ldr	r3, [pc, #160]	; (8001004 <HAL_UART_MspInit+0x12c>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	4a27      	ldr	r2, [pc, #156]	; (8001004 <HAL_UART_MspInit+0x12c>)
 8000f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6e:	4b25      	ldr	r3, [pc, #148]	; (8001004 <HAL_UART_MspInit+0x12c>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b21      	ldr	r3, [pc, #132]	; (8001004 <HAL_UART_MspInit+0x12c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a20      	ldr	r2, [pc, #128]	; (8001004 <HAL_UART_MspInit+0x12c>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <HAL_UART_MspInit+0x12c>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <HAL_UART_MspInit+0x12c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a19      	ldr	r2, [pc, #100]	; (8001004 <HAL_UART_MspInit+0x12c>)
 8000fa0:	f043 0308 	orr.w	r3, r3, #8
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <HAL_UART_MspInit+0x12c>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fc4:	2307      	movs	r3, #7
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4810      	ldr	r0, [pc, #64]	; (8001010 <HAL_UART_MspInit+0x138>)
 8000fd0:	f000 fa70 	bl	80014b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4808      	ldr	r0, [pc, #32]	; (8001014 <HAL_UART_MspInit+0x13c>)
 8000ff2:	f000 fa5f 	bl	80014b4 <HAL_GPIO_Init>
}
 8000ff6:	bf00      	nop
 8000ff8:	3730      	adds	r7, #48	; 0x30
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40004400 	.word	0x40004400
 8001004:	40023800 	.word	0x40023800
 8001008:	40020000 	.word	0x40020000
 800100c:	40004800 	.word	0x40004800
 8001010:	40020400 	.word	0x40020400
 8001014:	40020c00 	.word	0x40020c00

08001018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800101c:	e7fe      	b.n	800101c <NMI_Handler+0x4>

0800101e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <HardFault_Handler+0x4>

08001024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <MemManage_Handler+0x4>

0800102a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102e:	e7fe      	b.n	800102e <BusFault_Handler+0x4>

08001030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <UsageFault_Handler+0x4>

08001036 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001064:	f000 f8d0 	bl	8001208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}

0800106c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <OTG_FS_IRQHandler+0x10>)
 8001072:	f000 feb5 	bl	8001de0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000648 	.word	0x20000648

08001080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001088:	4a14      	ldr	r2, [pc, #80]	; (80010dc <_sbrk+0x5c>)
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <_sbrk+0x60>)
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d102      	bne.n	80010a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <_sbrk+0x64>)
 800109e:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <_sbrk+0x68>)
 80010a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d207      	bcs.n	80010c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b0:	f009 fa7a 	bl	800a5a8 <__errno>
 80010b4:	4603      	mov	r3, r0
 80010b6:	220c      	movs	r2, #12
 80010b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	e009      	b.n	80010d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <_sbrk+0x64>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <_sbrk+0x64>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <_sbrk+0x64>)
 80010d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20020000 	.word	0x20020000
 80010e0:	00000400 	.word	0x00000400
 80010e4:	20000264 	.word	0x20000264
 80010e8:	20000b70 	.word	0x20000b70

080010ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <SystemInit+0x20>)
 80010f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <SystemInit+0x20>)
 80010f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001110:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001148 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001114:	f7ff ffea 	bl	80010ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001118:	480c      	ldr	r0, [pc, #48]	; (800114c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800111a:	490d      	ldr	r1, [pc, #52]	; (8001150 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800111c:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001120:	e002      	b.n	8001128 <LoopCopyDataInit>

08001122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001126:	3304      	adds	r3, #4

08001128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800112c:	d3f9      	bcc.n	8001122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001130:	4c0a      	ldr	r4, [pc, #40]	; (800115c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001134:	e001      	b.n	800113a <LoopFillZerobss>

08001136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001138:	3204      	adds	r2, #4

0800113a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800113c:	d3fb      	bcc.n	8001136 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800113e:	f009 fa39 	bl	800a5b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001142:	f7ff f9bf 	bl	80004c4 <main>
  bx  lr    
 8001146:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001148:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800114c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001150:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001154:	0800a6dc 	.word	0x0800a6dc
  ldr r2, =_sbss
 8001158:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800115c:	20000b70 	.word	0x20000b70

08001160 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC_IRQHandler>
	...

08001164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <HAL_Init+0x40>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0d      	ldr	r2, [pc, #52]	; (80011a4 <HAL_Init+0x40>)
 800116e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001172:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <HAL_Init+0x40>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <HAL_Init+0x40>)
 800117a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800117e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <HAL_Init+0x40>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <HAL_Init+0x40>)
 8001186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800118c:	2003      	movs	r0, #3
 800118e:	f000 f94f 	bl	8001430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001192:	2000      	movs	r0, #0
 8001194:	f000 f808 	bl	80011a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001198:	f7ff fd0a 	bl	8000bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40023c00 	.word	0x40023c00

080011a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_InitTick+0x54>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_InitTick+0x58>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	4619      	mov	r1, r3
 80011ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011be:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 f967 	bl	800149a <HAL_SYSTICK_Config>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e00e      	b.n	80011f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b0f      	cmp	r3, #15
 80011da:	d80a      	bhi.n	80011f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011dc:	2200      	movs	r2, #0
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	f000 f92f 	bl	8001446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e8:	4a06      	ldr	r2, [pc, #24]	; (8001204 <HAL_InitTick+0x5c>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	e000      	b.n	80011f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000000 	.word	0x20000000
 8001200:	20000008 	.word	0x20000008
 8001204:	20000004 	.word	0x20000004

08001208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_IncTick+0x20>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_IncTick+0x24>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4413      	add	r3, r2
 8001218:	4a04      	ldr	r2, [pc, #16]	; (800122c <HAL_IncTick+0x24>)
 800121a:	6013      	str	r3, [r2, #0]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000008 	.word	0x20000008
 800122c:	20000268 	.word	0x20000268

08001230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return uwTick;
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <HAL_GetTick+0x14>)
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20000268 	.word	0x20000268

08001248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001250:	f7ff ffee 	bl	8001230 <HAL_GetTick>
 8001254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001260:	d005      	beq.n	800126e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001262:	4b0a      	ldr	r3, [pc, #40]	; (800128c <HAL_Delay+0x44>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4413      	add	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800126e:	bf00      	nop
 8001270:	f7ff ffde 	bl	8001230 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	429a      	cmp	r2, r3
 800127e:	d8f7      	bhi.n	8001270 <HAL_Delay+0x28>
  {
  }
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000008 	.word	0x20000008

08001290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <__NVIC_SetPriorityGrouping+0x44>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ac:	4013      	ands	r3, r2
 80012ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c2:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	60d3      	str	r3, [r2, #12]
}
 80012c8:	bf00      	nop
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012dc:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <__NVIC_GetPriorityGrouping+0x18>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	0a1b      	lsrs	r3, r3, #8
 80012e2:	f003 0307 	and.w	r3, r3, #7
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	2b00      	cmp	r3, #0
 8001304:	db0b      	blt.n	800131e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	f003 021f 	and.w	r2, r3, #31
 800130c:	4907      	ldr	r1, [pc, #28]	; (800132c <__NVIC_EnableIRQ+0x38>)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	095b      	lsrs	r3, r3, #5
 8001314:	2001      	movs	r0, #1
 8001316:	fa00 f202 	lsl.w	r2, r0, r2
 800131a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000e100 	.word	0xe000e100

08001330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	db0a      	blt.n	800135a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	b2da      	uxtb	r2, r3
 8001348:	490c      	ldr	r1, [pc, #48]	; (800137c <__NVIC_SetPriority+0x4c>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	0112      	lsls	r2, r2, #4
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	440b      	add	r3, r1
 8001354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001358:	e00a      	b.n	8001370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4908      	ldr	r1, [pc, #32]	; (8001380 <__NVIC_SetPriority+0x50>)
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	3b04      	subs	r3, #4
 8001368:	0112      	lsls	r2, r2, #4
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	440b      	add	r3, r1
 800136e:	761a      	strb	r2, [r3, #24]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000e100 	.word	0xe000e100
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f1c3 0307 	rsb	r3, r3, #7
 800139e:	2b04      	cmp	r3, #4
 80013a0:	bf28      	it	cs
 80013a2:	2304      	movcs	r3, #4
 80013a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3304      	adds	r3, #4
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d902      	bls.n	80013b4 <NVIC_EncodePriority+0x30>
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3b03      	subs	r3, #3
 80013b2:	e000      	b.n	80013b6 <NVIC_EncodePriority+0x32>
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	f04f 32ff 	mov.w	r2, #4294967295
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43da      	mvns	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	401a      	ands	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa01 f303 	lsl.w	r3, r1, r3
 80013d6:	43d9      	mvns	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	4313      	orrs	r3, r2
         );
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3724      	adds	r7, #36	; 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013fc:	d301      	bcc.n	8001402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fe:	2301      	movs	r3, #1
 8001400:	e00f      	b.n	8001422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <SysTick_Config+0x40>)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140a:	210f      	movs	r1, #15
 800140c:	f04f 30ff 	mov.w	r0, #4294967295
 8001410:	f7ff ff8e 	bl	8001330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001414:	4b05      	ldr	r3, [pc, #20]	; (800142c <SysTick_Config+0x40>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141a:	4b04      	ldr	r3, [pc, #16]	; (800142c <SysTick_Config+0x40>)
 800141c:	2207      	movs	r2, #7
 800141e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	e000e010 	.word	0xe000e010

08001430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ff29 	bl	8001290 <__NVIC_SetPriorityGrouping>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001446:	b580      	push	{r7, lr}
 8001448:	b086      	sub	sp, #24
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
 8001452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001458:	f7ff ff3e 	bl	80012d8 <__NVIC_GetPriorityGrouping>
 800145c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	68b9      	ldr	r1, [r7, #8]
 8001462:	6978      	ldr	r0, [r7, #20]
 8001464:	f7ff ff8e 	bl	8001384 <NVIC_EncodePriority>
 8001468:	4602      	mov	r2, r0
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff5d 	bl	8001330 <__NVIC_SetPriority>
}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff31 	bl	80012f4 <__NVIC_EnableIRQ>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ffa2 	bl	80013ec <SysTick_Config>
 80014a8:	4603      	mov	r3, r0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	; 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
 80014ce:	e16b      	b.n	80017a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014d0:	2201      	movs	r2, #1
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	f040 815a 	bne.w	80017a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 0303 	and.w	r3, r3, #3
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d005      	beq.n	8001506 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001502:	2b02      	cmp	r3, #2
 8001504:	d130      	bne.n	8001568 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	2203      	movs	r2, #3
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	68da      	ldr	r2, [r3, #12]
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800153c:	2201      	movs	r2, #1
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	091b      	lsrs	r3, r3, #4
 8001552:	f003 0201 	and.w	r2, r3, #1
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	2b03      	cmp	r3, #3
 8001572:	d017      	beq.n	80015a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	2203      	movs	r2, #3
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4313      	orrs	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d123      	bne.n	80015f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	08da      	lsrs	r2, r3, #3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3208      	adds	r2, #8
 80015b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	220f      	movs	r2, #15
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	691a      	ldr	r2, [r3, #16]
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	08da      	lsrs	r2, r3, #3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3208      	adds	r2, #8
 80015f2:	69b9      	ldr	r1, [r7, #24]
 80015f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	2203      	movs	r2, #3
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0203 	and.w	r2, r3, #3
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 80b4 	beq.w	80017a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	4b60      	ldr	r3, [pc, #384]	; (80017c0 <HAL_GPIO_Init+0x30c>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	4a5f      	ldr	r2, [pc, #380]	; (80017c0 <HAL_GPIO_Init+0x30c>)
 8001644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001648:	6453      	str	r3, [r2, #68]	; 0x44
 800164a:	4b5d      	ldr	r3, [pc, #372]	; (80017c0 <HAL_GPIO_Init+0x30c>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001656:	4a5b      	ldr	r2, [pc, #364]	; (80017c4 <HAL_GPIO_Init+0x310>)
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	089b      	lsrs	r3, r3, #2
 800165c:	3302      	adds	r3, #2
 800165e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001662:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	220f      	movs	r2, #15
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a52      	ldr	r2, [pc, #328]	; (80017c8 <HAL_GPIO_Init+0x314>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d02b      	beq.n	80016da <HAL_GPIO_Init+0x226>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a51      	ldr	r2, [pc, #324]	; (80017cc <HAL_GPIO_Init+0x318>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d025      	beq.n	80016d6 <HAL_GPIO_Init+0x222>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a50      	ldr	r2, [pc, #320]	; (80017d0 <HAL_GPIO_Init+0x31c>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d01f      	beq.n	80016d2 <HAL_GPIO_Init+0x21e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a4f      	ldr	r2, [pc, #316]	; (80017d4 <HAL_GPIO_Init+0x320>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d019      	beq.n	80016ce <HAL_GPIO_Init+0x21a>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a4e      	ldr	r2, [pc, #312]	; (80017d8 <HAL_GPIO_Init+0x324>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d013      	beq.n	80016ca <HAL_GPIO_Init+0x216>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4d      	ldr	r2, [pc, #308]	; (80017dc <HAL_GPIO_Init+0x328>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d00d      	beq.n	80016c6 <HAL_GPIO_Init+0x212>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a4c      	ldr	r2, [pc, #304]	; (80017e0 <HAL_GPIO_Init+0x32c>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d007      	beq.n	80016c2 <HAL_GPIO_Init+0x20e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a4b      	ldr	r2, [pc, #300]	; (80017e4 <HAL_GPIO_Init+0x330>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d101      	bne.n	80016be <HAL_GPIO_Init+0x20a>
 80016ba:	2307      	movs	r3, #7
 80016bc:	e00e      	b.n	80016dc <HAL_GPIO_Init+0x228>
 80016be:	2308      	movs	r3, #8
 80016c0:	e00c      	b.n	80016dc <HAL_GPIO_Init+0x228>
 80016c2:	2306      	movs	r3, #6
 80016c4:	e00a      	b.n	80016dc <HAL_GPIO_Init+0x228>
 80016c6:	2305      	movs	r3, #5
 80016c8:	e008      	b.n	80016dc <HAL_GPIO_Init+0x228>
 80016ca:	2304      	movs	r3, #4
 80016cc:	e006      	b.n	80016dc <HAL_GPIO_Init+0x228>
 80016ce:	2303      	movs	r3, #3
 80016d0:	e004      	b.n	80016dc <HAL_GPIO_Init+0x228>
 80016d2:	2302      	movs	r3, #2
 80016d4:	e002      	b.n	80016dc <HAL_GPIO_Init+0x228>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <HAL_GPIO_Init+0x228>
 80016da:	2300      	movs	r3, #0
 80016dc:	69fa      	ldr	r2, [r7, #28]
 80016de:	f002 0203 	and.w	r2, r2, #3
 80016e2:	0092      	lsls	r2, r2, #2
 80016e4:	4093      	lsls	r3, r2
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016ec:	4935      	ldr	r1, [pc, #212]	; (80017c4 <HAL_GPIO_Init+0x310>)
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	089b      	lsrs	r3, r3, #2
 80016f2:	3302      	adds	r3, #2
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016fa:	4b3b      	ldr	r3, [pc, #236]	; (80017e8 <HAL_GPIO_Init+0x334>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	43db      	mvns	r3, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800171e:	4a32      	ldr	r2, [pc, #200]	; (80017e8 <HAL_GPIO_Init+0x334>)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001724:	4b30      	ldr	r3, [pc, #192]	; (80017e8 <HAL_GPIO_Init+0x334>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001748:	4a27      	ldr	r2, [pc, #156]	; (80017e8 <HAL_GPIO_Init+0x334>)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800174e:	4b26      	ldr	r3, [pc, #152]	; (80017e8 <HAL_GPIO_Init+0x334>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001772:	4a1d      	ldr	r2, [pc, #116]	; (80017e8 <HAL_GPIO_Init+0x334>)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001778:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <HAL_GPIO_Init+0x334>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800179c:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <HAL_GPIO_Init+0x334>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3301      	adds	r3, #1
 80017a6:	61fb      	str	r3, [r7, #28]
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	2b0f      	cmp	r3, #15
 80017ac:	f67f ae90 	bls.w	80014d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017b0:	bf00      	nop
 80017b2:	bf00      	nop
 80017b4:	3724      	adds	r7, #36	; 0x24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40013800 	.word	0x40013800
 80017c8:	40020000 	.word	0x40020000
 80017cc:	40020400 	.word	0x40020400
 80017d0:	40020800 	.word	0x40020800
 80017d4:	40020c00 	.word	0x40020c00
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40021400 	.word	0x40021400
 80017e0:	40021800 	.word	0x40021800
 80017e4:	40021c00 	.word	0x40021c00
 80017e8:	40013c00 	.word	0x40013c00

080017ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	807b      	strh	r3, [r7, #2]
 80017f8:	4613      	mov	r3, r2
 80017fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017fc:	787b      	ldrb	r3, [r7, #1]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001802:	887a      	ldrh	r2, [r7, #2]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001808:	e003      	b.n	8001812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800180a:	887b      	ldrh	r3, [r7, #2]
 800180c:	041a      	lsls	r2, r3, #16
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	619a      	str	r2, [r3, #24]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af02      	add	r7, sp, #8
 8001824:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e059      	b.n	80018e4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d106      	bne.n	8001850 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f008 fb2c 	bl	8009ea8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2203      	movs	r2, #3
 8001854:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800185e:	d102      	bne.n	8001866 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f005 f935 	bl	8006ada <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6818      	ldr	r0, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	7c1a      	ldrb	r2, [r3, #16]
 8001878:	f88d 2000 	strb.w	r2, [sp]
 800187c:	3304      	adds	r3, #4
 800187e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001880:	f005 f8b6 	bl	80069f0 <USB_CoreInit>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d005      	beq.n	8001896 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2202      	movs	r2, #2
 800188e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e026      	b.n	80018e4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2101      	movs	r1, #1
 800189c:	4618      	mov	r0, r3
 800189e:	f005 f92d 	bl	8006afc <USB_SetCurrentMode>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d005      	beq.n	80018b4 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2202      	movs	r2, #2
 80018ac:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e017      	b.n	80018e4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	7c1a      	ldrb	r2, [r3, #16]
 80018bc:	f88d 2000 	strb.w	r2, [sp]
 80018c0:	3304      	adds	r3, #4
 80018c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018c4:	f005 fad0 	bl	8006e68 <USB_HostInit>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d005      	beq.n	80018da <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2202      	movs	r2, #2
 80018d2:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e004      	b.n	80018e4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	b08b      	sub	sp, #44	; 0x2c
 80018f0:	af04      	add	r7, sp, #16
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	4608      	mov	r0, r1
 80018f6:	4611      	mov	r1, r2
 80018f8:	461a      	mov	r2, r3
 80018fa:	4603      	mov	r3, r0
 80018fc:	70fb      	strb	r3, [r7, #3]
 80018fe:	460b      	mov	r3, r1
 8001900:	70bb      	strb	r3, [r7, #2]
 8001902:	4613      	mov	r3, r2
 8001904:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001906:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001908:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001910:	2b01      	cmp	r3, #1
 8001912:	d101      	bne.n	8001918 <HAL_HCD_HC_Init+0x2c>
 8001914:	2302      	movs	r3, #2
 8001916:	e09d      	b.n	8001a54 <HAL_HCD_HC_Init+0x168>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	1a9b      	subs	r3, r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	3319      	adds	r3, #25
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	1a9b      	subs	r3, r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	3314      	adds	r3, #20
 8001944:	787a      	ldrb	r2, [r7, #1]
 8001946:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001948:	78fa      	ldrb	r2, [r7, #3]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	1a9b      	subs	r3, r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	3315      	adds	r3, #21
 8001958:	78fa      	ldrb	r2, [r7, #3]
 800195a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800195c:	78fa      	ldrb	r2, [r7, #3]
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	1a9b      	subs	r3, r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	3326      	adds	r3, #38	; 0x26
 800196c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001970:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001972:	78fa      	ldrb	r2, [r7, #3]
 8001974:	78bb      	ldrb	r3, [r7, #2]
 8001976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800197a:	b2d8      	uxtb	r0, r3
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	1a9b      	subs	r3, r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	440b      	add	r3, r1
 8001988:	3316      	adds	r3, #22
 800198a:	4602      	mov	r2, r0
 800198c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	4619      	mov	r1, r3
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 fbc8 	bl	8002128 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001998:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800199c:	2b00      	cmp	r3, #0
 800199e:	da0a      	bge.n	80019b6 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80019a0:	78fa      	ldrb	r2, [r7, #3]
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	1a9b      	subs	r3, r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	3317      	adds	r3, #23
 80019b0:	2201      	movs	r2, #1
 80019b2:	701a      	strb	r2, [r3, #0]
 80019b4:	e009      	b.n	80019ca <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80019b6:	78fa      	ldrb	r2, [r7, #3]
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	1a9b      	subs	r3, r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	440b      	add	r3, r1
 80019c4:	3317      	adds	r3, #23
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f005 fbae 	bl	8007130 <USB_GetHostSpeed>
 80019d4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80019d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d10b      	bne.n	80019f6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80019de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d107      	bne.n	80019f6 <HAL_HCD_HC_Init+0x10a>
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d104      	bne.n	80019f6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	2bbc      	cmp	r3, #188	; 0xbc
 80019f0:	d901      	bls.n	80019f6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80019f2:	23bc      	movs	r3, #188	; 0xbc
 80019f4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80019f6:	78fa      	ldrb	r2, [r7, #3]
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	1a9b      	subs	r3, r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	440b      	add	r3, r1
 8001a04:	3318      	adds	r3, #24
 8001a06:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001a0c:	78fa      	ldrb	r2, [r7, #3]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	b298      	uxth	r0, r3
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	1a9b      	subs	r3, r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	3328      	adds	r3, #40	; 0x28
 8001a20:	4602      	mov	r2, r0
 8001a22:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6818      	ldr	r0, [r3, #0]
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	787c      	ldrb	r4, [r7, #1]
 8001a2e:	78ba      	ldrb	r2, [r7, #2]
 8001a30:	78f9      	ldrb	r1, [r7, #3]
 8001a32:	9302      	str	r3, [sp, #8]
 8001a34:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a38:	9301      	str	r3, [sp, #4]
 8001a3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	4623      	mov	r3, r4
 8001a42:	f005 fb9d 	bl	8007180 <USB_HC_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	371c      	adds	r7, #28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd90      	pop	{r4, r7, pc}

08001a5c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d101      	bne.n	8001a7a <HAL_HCD_HC_Halt+0x1e>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e00f      	b.n	8001a9a <HAL_HCD_HC_Halt+0x3e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	78fa      	ldrb	r2, [r7, #3]
 8001a88:	4611      	mov	r1, r2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f005 ff2f 	bl	80078ee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	4608      	mov	r0, r1
 8001aae:	4611      	mov	r1, r2
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	70fb      	strb	r3, [r7, #3]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	70bb      	strb	r3, [r7, #2]
 8001aba:	4613      	mov	r3, r2
 8001abc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001abe:	78fa      	ldrb	r2, [r7, #3]
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	011b      	lsls	r3, r3, #4
 8001ac6:	1a9b      	subs	r3, r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	440b      	add	r3, r1
 8001acc:	3317      	adds	r3, #23
 8001ace:	78ba      	ldrb	r2, [r7, #2]
 8001ad0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001ad2:	78fa      	ldrb	r2, [r7, #3]
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	1a9b      	subs	r3, r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	440b      	add	r3, r1
 8001ae0:	3326      	adds	r3, #38	; 0x26
 8001ae2:	787a      	ldrb	r2, [r7, #1]
 8001ae4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001ae6:	7c3b      	ldrb	r3, [r7, #16]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d114      	bne.n	8001b16 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001aec:	78fa      	ldrb	r2, [r7, #3]
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	1a9b      	subs	r3, r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	332a      	adds	r3, #42	; 0x2a
 8001afc:	2203      	movs	r2, #3
 8001afe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b00:	78fa      	ldrb	r2, [r7, #3]
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	011b      	lsls	r3, r3, #4
 8001b08:	1a9b      	subs	r3, r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	3319      	adds	r3, #25
 8001b10:	7f3a      	ldrb	r2, [r7, #28]
 8001b12:	701a      	strb	r2, [r3, #0]
 8001b14:	e009      	b.n	8001b2a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b16:	78fa      	ldrb	r2, [r7, #3]
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	1a9b      	subs	r3, r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	440b      	add	r3, r1
 8001b24:	332a      	adds	r3, #42	; 0x2a
 8001b26:	2202      	movs	r2, #2
 8001b28:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b2a:	787b      	ldrb	r3, [r7, #1]
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	f200 8102 	bhi.w	8001d36 <HAL_HCD_HC_SubmitRequest+0x292>
 8001b32:	a201      	add	r2, pc, #4	; (adr r2, 8001b38 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b38:	08001b49 	.word	0x08001b49
 8001b3c:	08001d21 	.word	0x08001d21
 8001b40:	08001c0d 	.word	0x08001c0d
 8001b44:	08001c97 	.word	0x08001c97
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001b48:	7c3b      	ldrb	r3, [r7, #16]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	f040 80f5 	bne.w	8001d3a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001b50:	78bb      	ldrb	r3, [r7, #2]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d12d      	bne.n	8001bb2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001b56:	8b3b      	ldrh	r3, [r7, #24]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d109      	bne.n	8001b70 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001b5c:	78fa      	ldrb	r2, [r7, #3]
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	333d      	adds	r3, #61	; 0x3d
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b70:	78fa      	ldrb	r2, [r7, #3]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	1a9b      	subs	r3, r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	333d      	adds	r3, #61	; 0x3d
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10a      	bne.n	8001b9c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b86:	78fa      	ldrb	r2, [r7, #3]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	011b      	lsls	r3, r3, #4
 8001b8e:	1a9b      	subs	r3, r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	332a      	adds	r3, #42	; 0x2a
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001b9a:	e0ce      	b.n	8001d3a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b9c:	78fa      	ldrb	r2, [r7, #3]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	011b      	lsls	r3, r3, #4
 8001ba4:	1a9b      	subs	r3, r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	332a      	adds	r3, #42	; 0x2a
 8001bac:	2202      	movs	r2, #2
 8001bae:	701a      	strb	r2, [r3, #0]
      break;
 8001bb0:	e0c3      	b.n	8001d3a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001bb2:	78fa      	ldrb	r2, [r7, #3]
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	011b      	lsls	r3, r3, #4
 8001bba:	1a9b      	subs	r3, r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	331a      	adds	r3, #26
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	f040 80b8 	bne.w	8001d3a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bca:	78fa      	ldrb	r2, [r7, #3]
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	011b      	lsls	r3, r3, #4
 8001bd2:	1a9b      	subs	r3, r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	333c      	adds	r3, #60	; 0x3c
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10a      	bne.n	8001bf6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001be0:	78fa      	ldrb	r2, [r7, #3]
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	1a9b      	subs	r3, r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	332a      	adds	r3, #42	; 0x2a
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
      break;
 8001bf4:	e0a1      	b.n	8001d3a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bf6:	78fa      	ldrb	r2, [r7, #3]
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	1a9b      	subs	r3, r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	440b      	add	r3, r1
 8001c04:	332a      	adds	r3, #42	; 0x2a
 8001c06:	2202      	movs	r2, #2
 8001c08:	701a      	strb	r2, [r3, #0]
      break;
 8001c0a:	e096      	b.n	8001d3a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001c0c:	78bb      	ldrb	r3, [r7, #2]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d120      	bne.n	8001c54 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c12:	78fa      	ldrb	r2, [r7, #3]
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	011b      	lsls	r3, r3, #4
 8001c1a:	1a9b      	subs	r3, r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	440b      	add	r3, r1
 8001c20:	333d      	adds	r3, #61	; 0x3d
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10a      	bne.n	8001c3e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c28:	78fa      	ldrb	r2, [r7, #3]
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	011b      	lsls	r3, r3, #4
 8001c30:	1a9b      	subs	r3, r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	332a      	adds	r3, #42	; 0x2a
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c3c:	e07e      	b.n	8001d3c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c3e:	78fa      	ldrb	r2, [r7, #3]
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	4613      	mov	r3, r2
 8001c44:	011b      	lsls	r3, r3, #4
 8001c46:	1a9b      	subs	r3, r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	332a      	adds	r3, #42	; 0x2a
 8001c4e:	2202      	movs	r2, #2
 8001c50:	701a      	strb	r2, [r3, #0]
      break;
 8001c52:	e073      	b.n	8001d3c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c54:	78fa      	ldrb	r2, [r7, #3]
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	011b      	lsls	r3, r3, #4
 8001c5c:	1a9b      	subs	r3, r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	440b      	add	r3, r1
 8001c62:	333c      	adds	r3, #60	; 0x3c
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10a      	bne.n	8001c80 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c6a:	78fa      	ldrb	r2, [r7, #3]
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	1a9b      	subs	r3, r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	440b      	add	r3, r1
 8001c78:	332a      	adds	r3, #42	; 0x2a
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
      break;
 8001c7e:	e05d      	b.n	8001d3c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c80:	78fa      	ldrb	r2, [r7, #3]
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	1a9b      	subs	r3, r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	332a      	adds	r3, #42	; 0x2a
 8001c90:	2202      	movs	r2, #2
 8001c92:	701a      	strb	r2, [r3, #0]
      break;
 8001c94:	e052      	b.n	8001d3c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c96:	78bb      	ldrb	r3, [r7, #2]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d120      	bne.n	8001cde <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c9c:	78fa      	ldrb	r2, [r7, #3]
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	333d      	adds	r3, #61	; 0x3d
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10a      	bne.n	8001cc8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cb2:	78fa      	ldrb	r2, [r7, #3]
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	1a9b      	subs	r3, r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	332a      	adds	r3, #42	; 0x2a
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001cc6:	e039      	b.n	8001d3c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cc8:	78fa      	ldrb	r2, [r7, #3]
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	011b      	lsls	r3, r3, #4
 8001cd0:	1a9b      	subs	r3, r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	332a      	adds	r3, #42	; 0x2a
 8001cd8:	2202      	movs	r2, #2
 8001cda:	701a      	strb	r2, [r3, #0]
      break;
 8001cdc:	e02e      	b.n	8001d3c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cde:	78fa      	ldrb	r2, [r7, #3]
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	1a9b      	subs	r3, r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	440b      	add	r3, r1
 8001cec:	333c      	adds	r3, #60	; 0x3c
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d10a      	bne.n	8001d0a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cf4:	78fa      	ldrb	r2, [r7, #3]
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	1a9b      	subs	r3, r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	332a      	adds	r3, #42	; 0x2a
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
      break;
 8001d08:	e018      	b.n	8001d3c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d0a:	78fa      	ldrb	r2, [r7, #3]
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	1a9b      	subs	r3, r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	440b      	add	r3, r1
 8001d18:	332a      	adds	r3, #42	; 0x2a
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	701a      	strb	r2, [r3, #0]
      break;
 8001d1e:	e00d      	b.n	8001d3c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d20:	78fa      	ldrb	r2, [r7, #3]
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	011b      	lsls	r3, r3, #4
 8001d28:	1a9b      	subs	r3, r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	332a      	adds	r3, #42	; 0x2a
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
      break;
 8001d34:	e002      	b.n	8001d3c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001d36:	bf00      	nop
 8001d38:	e000      	b.n	8001d3c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001d3a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d3c:	78fa      	ldrb	r2, [r7, #3]
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	1a9b      	subs	r3, r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	332c      	adds	r3, #44	; 0x2c
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d50:	78fa      	ldrb	r2, [r7, #3]
 8001d52:	8b39      	ldrh	r1, [r7, #24]
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	011b      	lsls	r3, r3, #4
 8001d5a:	1a9b      	subs	r3, r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4403      	add	r3, r0
 8001d60:	3334      	adds	r3, #52	; 0x34
 8001d62:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d64:	78fa      	ldrb	r2, [r7, #3]
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	1a9b      	subs	r3, r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	334c      	adds	r3, #76	; 0x4c
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d78:	78fa      	ldrb	r2, [r7, #3]
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	1a9b      	subs	r3, r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	3338      	adds	r3, #56	; 0x38
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d8c:	78fa      	ldrb	r2, [r7, #3]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	3315      	adds	r3, #21
 8001d9c:	78fa      	ldrb	r2, [r7, #3]
 8001d9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001da0:	78fa      	ldrb	r2, [r7, #3]
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	011b      	lsls	r3, r3, #4
 8001da8:	1a9b      	subs	r3, r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	440b      	add	r3, r1
 8001dae:	334d      	adds	r3, #77	; 0x4d
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	78fa      	ldrb	r2, [r7, #3]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	1a9b      	subs	r3, r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	3310      	adds	r3, #16
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	1d19      	adds	r1, r3, #4
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	799b      	ldrb	r3, [r3, #6]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	f005 fb02 	bl	80073d8 <USB_HC_StartXfer>
 8001dd4:	4603      	mov	r3, r0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop

08001de0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f004 fff6 	bl	8006de8 <USB_GetMode>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	f040 80fb 	bne.w	8001ffa <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f004 ffb9 	bl	8006d80 <USB_ReadInterrupts>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 80f1 	beq.w	8001ff8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f004 ffb0 	bl	8006d80 <USB_ReadInterrupts>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e2a:	d104      	bne.n	8001e36 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f004 ffa0 	bl	8006d80 <USB_ReadInterrupts>
 8001e40:	4603      	mov	r3, r0
 8001e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e4a:	d104      	bne.n	8001e56 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f004 ff90 	bl	8006d80 <USB_ReadInterrupts>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e6a:	d104      	bne.n	8001e76 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f004 ff80 	bl	8006d80 <USB_ReadInterrupts>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d103      	bne.n	8001e92 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f004 ff72 	bl	8006d80 <USB_ReadInterrupts>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ea2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ea6:	d120      	bne.n	8001eea <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001eb0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d113      	bne.n	8001eea <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001ec2:	2110      	movs	r1, #16
 8001ec4:	6938      	ldr	r0, [r7, #16]
 8001ec6:	f004 fe65 	bl	8006b94 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001eca:	6938      	ldr	r0, [r7, #16]
 8001ecc:	f004 fe94 	bl	8006bf8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	7a5b      	ldrb	r3, [r3, #9]
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d105      	bne.n	8001ee4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2101      	movs	r1, #1
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f005 f886 	bl	8006ff0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f008 f85d 	bl	8009fa4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f004 ff46 	bl	8006d80 <USB_ReadInterrupts>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001efa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001efe:	d102      	bne.n	8001f06 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f001 fd33 	bl	800396c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f004 ff38 	bl	8006d80 <USB_ReadInterrupts>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d106      	bne.n	8001f28 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f008 f826 	bl	8009f6c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2208      	movs	r2, #8
 8001f26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f004 ff27 	bl	8006d80 <USB_ReadInterrupts>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f3c:	d139      	bne.n	8001fb2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f005 fcc2 	bl	80078cc <USB_HC_ReadInterrupt>
 8001f48:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	e025      	b.n	8001f9c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d018      	beq.n	8001f96 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	015a      	lsls	r2, r3, #5
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f7a:	d106      	bne.n	8001f8a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	4619      	mov	r1, r3
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f905 	bl	8002192 <HCD_HC_IN_IRQHandler>
 8001f88:	e005      	b.n	8001f96 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	4619      	mov	r1, r3
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 ff67 	bl	8002e64 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	795b      	ldrb	r3, [r3, #5]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d3d3      	bcc.n	8001f50 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f004 fee2 	bl	8006d80 <USB_ReadInterrupts>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	2b10      	cmp	r3, #16
 8001fc4:	d101      	bne.n	8001fca <HAL_HCD_IRQHandler+0x1ea>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <HAL_HCD_IRQHandler+0x1ec>
 8001fca:	2300      	movs	r3, #0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d014      	beq.n	8001ffa <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699a      	ldr	r2, [r3, #24]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0210 	bic.w	r2, r2, #16
 8001fde:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f001 fbe4 	bl	80037ae <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	699a      	ldr	r2, [r3, #24]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f042 0210 	orr.w	r2, r2, #16
 8001ff4:	619a      	str	r2, [r3, #24]
 8001ff6:	e000      	b.n	8001ffa <HAL_HCD_IRQHandler+0x21a>
      return;
 8001ff8:	bf00      	nop
    }
  }
}
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <HAL_HCD_Start+0x16>
 8002012:	2302      	movs	r3, #2
 8002014:	e013      	b.n	800203e <HAL_HCD_Start+0x3e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2101      	movs	r1, #1
 8002024:	4618      	mov	r0, r3
 8002026:	f005 f84a 	bl	80070be <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f004 fd42 	bl	8006ab8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_HCD_Stop+0x16>
 8002058:	2302      	movs	r3, #2
 800205a:	e00d      	b.n	8002078 <HAL_HCD_Stop+0x32>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f005 fd9d 	bl	8007ba8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f004 ffec 	bl	800706a <USB_ResetPort>
 8002092:	4603      	mov	r3, r0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80020a8:	78fa      	ldrb	r2, [r7, #3]
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	011b      	lsls	r3, r3, #4
 80020b0:	1a9b      	subs	r3, r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	334c      	adds	r3, #76	; 0x4c
 80020b8:	781b      	ldrb	r3, [r3, #0]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	460b      	mov	r3, r1
 80020d0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80020d2:	78fa      	ldrb	r2, [r7, #3]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	3338      	adds	r3, #56	; 0x38
 80020e2:	681b      	ldr	r3, [r3, #0]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f005 f82e 	bl	800715e <USB_GetCurrentFrame>
 8002102:	4603      	mov	r3, r0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f005 f809 	bl	8007130 <USB_GetHostSpeed>
 800211e:	4603      	mov	r3, r0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002134:	78fa      	ldrb	r2, [r7, #3]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	1a9b      	subs	r3, r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	331a      	adds	r3, #26
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002148:	78fa      	ldrb	r2, [r7, #3]
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	011b      	lsls	r3, r3, #4
 8002150:	1a9b      	subs	r3, r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	331b      	adds	r3, #27
 8002158:	2200      	movs	r2, #0
 800215a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800215c:	78fa      	ldrb	r2, [r7, #3]
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	1a9b      	subs	r3, r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	3325      	adds	r3, #37	; 0x25
 800216c:	2200      	movs	r2, #0
 800216e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002170:	78fa      	ldrb	r2, [r7, #3]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	3324      	adds	r3, #36	; 0x24
 8002180:	2200      	movs	r2, #0
 8002182:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b086      	sub	sp, #24
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	460b      	mov	r3, r1
 800219c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	78fa      	ldrb	r2, [r7, #3]
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f004 fdf8 	bl	8006da6 <USB_ReadChInterrupts>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d11a      	bne.n	80021f6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	015a      	lsls	r2, r3, #5
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021cc:	461a      	mov	r2, r3
 80021ce:	2304      	movs	r3, #4
 80021d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80021d2:	78fa      	ldrb	r2, [r7, #3]
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	1a9b      	subs	r3, r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	334d      	adds	r3, #77	; 0x4d
 80021e2:	2207      	movs	r2, #7
 80021e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	4611      	mov	r1, r2
 80021ee:	4618      	mov	r0, r3
 80021f0:	f005 fb7d 	bl	80078ee <USB_HC_Halt>
 80021f4:	e09e      	b.n	8002334 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	78fa      	ldrb	r2, [r7, #3]
 80021fc:	4611      	mov	r1, r2
 80021fe:	4618      	mov	r0, r3
 8002200:	f004 fdd1 	bl	8006da6 <USB_ReadChInterrupts>
 8002204:	4603      	mov	r3, r0
 8002206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800220e:	d11b      	bne.n	8002248 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	015a      	lsls	r2, r3, #5
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4413      	add	r3, r2
 8002218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221c:	461a      	mov	r2, r3
 800221e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002222:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002224:	78fa      	ldrb	r2, [r7, #3]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	011b      	lsls	r3, r3, #4
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	334d      	adds	r3, #77	; 0x4d
 8002234:	2208      	movs	r2, #8
 8002236:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	78fa      	ldrb	r2, [r7, #3]
 800223e:	4611      	mov	r1, r2
 8002240:	4618      	mov	r0, r3
 8002242:	f005 fb54 	bl	80078ee <USB_HC_Halt>
 8002246:	e075      	b.n	8002334 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	78fa      	ldrb	r2, [r7, #3]
 800224e:	4611      	mov	r1, r2
 8002250:	4618      	mov	r0, r3
 8002252:	f004 fda8 	bl	8006da6 <USB_ReadChInterrupts>
 8002256:	4603      	mov	r3, r0
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b08      	cmp	r3, #8
 800225e:	d11a      	bne.n	8002296 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	015a      	lsls	r2, r3, #5
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4413      	add	r3, r2
 8002268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226c:	461a      	mov	r2, r3
 800226e:	2308      	movs	r3, #8
 8002270:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002272:	78fa      	ldrb	r2, [r7, #3]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	011b      	lsls	r3, r3, #4
 800227a:	1a9b      	subs	r3, r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	440b      	add	r3, r1
 8002280:	334d      	adds	r3, #77	; 0x4d
 8002282:	2206      	movs	r2, #6
 8002284:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	78fa      	ldrb	r2, [r7, #3]
 800228c:	4611      	mov	r1, r2
 800228e:	4618      	mov	r0, r3
 8002290:	f005 fb2d 	bl	80078ee <USB_HC_Halt>
 8002294:	e04e      	b.n	8002334 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	78fa      	ldrb	r2, [r7, #3]
 800229c:	4611      	mov	r1, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	f004 fd81 	bl	8006da6 <USB_ReadChInterrupts>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ae:	d11b      	bne.n	80022e8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80022b0:	78fb      	ldrb	r3, [r7, #3]
 80022b2:	015a      	lsls	r2, r3, #5
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4413      	add	r3, r2
 80022b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022bc:	461a      	mov	r2, r3
 80022be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	334d      	adds	r3, #77	; 0x4d
 80022d4:	2209      	movs	r2, #9
 80022d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	78fa      	ldrb	r2, [r7, #3]
 80022de:	4611      	mov	r1, r2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f005 fb04 	bl	80078ee <USB_HC_Halt>
 80022e6:	e025      	b.n	8002334 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	78fa      	ldrb	r2, [r7, #3]
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f004 fd58 	bl	8006da6 <USB_ReadChInterrupts>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fc:	2b80      	cmp	r3, #128	; 0x80
 80022fe:	d119      	bne.n	8002334 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	015a      	lsls	r2, r3, #5
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4413      	add	r3, r2
 8002308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230c:	461a      	mov	r2, r3
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002312:	78fa      	ldrb	r2, [r7, #3]
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	1a9b      	subs	r3, r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	334d      	adds	r3, #77	; 0x4d
 8002322:	2207      	movs	r2, #7
 8002324:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	78fa      	ldrb	r2, [r7, #3]
 800232c:	4611      	mov	r1, r2
 800232e:	4618      	mov	r0, r3
 8002330:	f005 fadd 	bl	80078ee <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	4611      	mov	r1, r2
 800233c:	4618      	mov	r0, r3
 800233e:	f004 fd32 	bl	8006da6 <USB_ReadChInterrupts>
 8002342:	4603      	mov	r3, r0
 8002344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800234c:	d112      	bne.n	8002374 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	78fa      	ldrb	r2, [r7, #3]
 8002354:	4611      	mov	r1, r2
 8002356:	4618      	mov	r0, r3
 8002358:	f005 fac9 	bl	80078ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800235c:	78fb      	ldrb	r3, [r7, #3]
 800235e:	015a      	lsls	r2, r3, #5
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4413      	add	r3, r2
 8002364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002368:	461a      	mov	r2, r3
 800236a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800236e:	6093      	str	r3, [r2, #8]
 8002370:	f000 bd75 	b.w	8002e5e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f004 fd12 	bl	8006da6 <USB_ReadChInterrupts>
 8002382:	4603      	mov	r3, r0
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b01      	cmp	r3, #1
 800238a:	f040 8128 	bne.w	80025de <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800238e:	78fb      	ldrb	r3, [r7, #3]
 8002390:	015a      	lsls	r2, r3, #5
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4413      	add	r3, r2
 8002396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239a:	461a      	mov	r2, r3
 800239c:	2320      	movs	r3, #32
 800239e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	331b      	adds	r3, #27
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d119      	bne.n	80023ea <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80023b6:	78fa      	ldrb	r2, [r7, #3]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	1a9b      	subs	r3, r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	331b      	adds	r3, #27
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	78fa      	ldrb	r2, [r7, #3]
 80023da:	0151      	lsls	r1, r2, #5
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	440a      	add	r2, r1
 80023e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	799b      	ldrb	r3, [r3, #6]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d01b      	beq.n	800242a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80023f2:	78fa      	ldrb	r2, [r7, #3]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	1a9b      	subs	r3, r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	3330      	adds	r3, #48	; 0x30
 8002402:	6819      	ldr	r1, [r3, #0]
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	015a      	lsls	r2, r3, #5
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4413      	add	r3, r2
 800240c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002416:	78fa      	ldrb	r2, [r7, #3]
 8002418:	1ac9      	subs	r1, r1, r3
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4403      	add	r3, r0
 8002426:	3338      	adds	r3, #56	; 0x38
 8002428:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800242a:	78fa      	ldrb	r2, [r7, #3]
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	1a9b      	subs	r3, r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	334d      	adds	r3, #77	; 0x4d
 800243a:	2201      	movs	r2, #1
 800243c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800243e:	78fa      	ldrb	r2, [r7, #3]
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	1a9b      	subs	r3, r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	3344      	adds	r3, #68	; 0x44
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002452:	78fb      	ldrb	r3, [r7, #3]
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4413      	add	r3, r2
 800245a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245e:	461a      	mov	r2, r3
 8002460:	2301      	movs	r3, #1
 8002462:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002464:	78fa      	ldrb	r2, [r7, #3]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	3326      	adds	r3, #38	; 0x26
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00a      	beq.n	8002490 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800247a:	78fa      	ldrb	r2, [r7, #3]
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	1a9b      	subs	r3, r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	3326      	adds	r3, #38	; 0x26
 800248a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800248c:	2b02      	cmp	r3, #2
 800248e:	d110      	bne.n	80024b2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	4611      	mov	r1, r2
 8002498:	4618      	mov	r0, r3
 800249a:	f005 fa28 	bl	80078ee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800249e:	78fb      	ldrb	r3, [r7, #3]
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024aa:	461a      	mov	r2, r3
 80024ac:	2310      	movs	r3, #16
 80024ae:	6093      	str	r3, [r2, #8]
 80024b0:	e03d      	b.n	800252e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80024b2:	78fa      	ldrb	r2, [r7, #3]
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	1a9b      	subs	r3, r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	440b      	add	r3, r1
 80024c0:	3326      	adds	r3, #38	; 0x26
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d00a      	beq.n	80024de <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	3326      	adds	r3, #38	; 0x26
 80024d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d127      	bne.n	800252e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80024de:	78fb      	ldrb	r3, [r7, #3]
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	78fa      	ldrb	r2, [r7, #3]
 80024ee:	0151      	lsls	r1, r2, #5
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	440a      	add	r2, r1
 80024f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80024fc:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80024fe:	78fa      	ldrb	r2, [r7, #3]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	011b      	lsls	r3, r3, #4
 8002506:	1a9b      	subs	r3, r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	334c      	adds	r3, #76	; 0x4c
 800250e:	2201      	movs	r2, #1
 8002510:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002512:	78fa      	ldrb	r2, [r7, #3]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	1a9b      	subs	r3, r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	334c      	adds	r3, #76	; 0x4c
 8002522:	781a      	ldrb	r2, [r3, #0]
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	4619      	mov	r1, r3
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f007 fd49 	bl	8009fc0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	799b      	ldrb	r3, [r3, #6]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d13b      	bne.n	80025ae <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002536:	78fa      	ldrb	r2, [r7, #3]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	011b      	lsls	r3, r3, #4
 800253e:	1a9b      	subs	r3, r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	3338      	adds	r3, #56	; 0x38
 8002546:	6819      	ldr	r1, [r3, #0]
 8002548:	78fa      	ldrb	r2, [r7, #3]
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	1a9b      	subs	r3, r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4403      	add	r3, r0
 8002556:	3328      	adds	r3, #40	; 0x28
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	440b      	add	r3, r1
 800255c:	1e59      	subs	r1, r3, #1
 800255e:	78fa      	ldrb	r2, [r7, #3]
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	1a9b      	subs	r3, r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4403      	add	r3, r0
 800256c:	3328      	adds	r3, #40	; 0x28
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	fbb1 f3f3 	udiv	r3, r1, r3
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 8470 	beq.w	8002e5e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	1a9b      	subs	r3, r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	333c      	adds	r3, #60	; 0x3c
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	f083 0301 	eor.w	r3, r3, #1
 8002596:	b2d8      	uxtb	r0, r3
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	333c      	adds	r3, #60	; 0x3c
 80025a6:	4602      	mov	r2, r0
 80025a8:	701a      	strb	r2, [r3, #0]
 80025aa:	f000 bc58 	b.w	8002e5e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80025ae:	78fa      	ldrb	r2, [r7, #3]
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	1a9b      	subs	r3, r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	333c      	adds	r3, #60	; 0x3c
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	78fa      	ldrb	r2, [r7, #3]
 80025c2:	f083 0301 	eor.w	r3, r3, #1
 80025c6:	b2d8      	uxtb	r0, r3
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	011b      	lsls	r3, r3, #4
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	333c      	adds	r3, #60	; 0x3c
 80025d6:	4602      	mov	r2, r0
 80025d8:	701a      	strb	r2, [r3, #0]
 80025da:	f000 bc40 	b.w	8002e5e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	78fa      	ldrb	r2, [r7, #3]
 80025e4:	4611      	mov	r1, r2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f004 fbdd 	bl	8006da6 <USB_ReadChInterrupts>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	d131      	bne.n	800265a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80025f6:	78fb      	ldrb	r3, [r7, #3]
 80025f8:	015a      	lsls	r2, r3, #5
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002602:	461a      	mov	r2, r3
 8002604:	2320      	movs	r3, #32
 8002606:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002608:	78fa      	ldrb	r2, [r7, #3]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	331a      	adds	r3, #26
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b01      	cmp	r3, #1
 800261c:	f040 841f 	bne.w	8002e5e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002620:	78fa      	ldrb	r2, [r7, #3]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	1a9b      	subs	r3, r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	331b      	adds	r3, #27
 8002630:	2201      	movs	r2, #1
 8002632:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	1a9b      	subs	r3, r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	334d      	adds	r3, #77	; 0x4d
 8002644:	2203      	movs	r2, #3
 8002646:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	4611      	mov	r1, r2
 8002650:	4618      	mov	r0, r3
 8002652:	f005 f94c 	bl	80078ee <USB_HC_Halt>
 8002656:	f000 bc02 	b.w	8002e5e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	78fa      	ldrb	r2, [r7, #3]
 8002660:	4611      	mov	r1, r2
 8002662:	4618      	mov	r0, r3
 8002664:	f004 fb9f 	bl	8006da6 <USB_ReadChInterrupts>
 8002668:	4603      	mov	r3, r0
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b02      	cmp	r3, #2
 8002670:	f040 8305 	bne.w	8002c7e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4413      	add	r3, r2
 800267c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002680:	461a      	mov	r2, r3
 8002682:	2302      	movs	r3, #2
 8002684:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	334d      	adds	r3, #77	; 0x4d
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d114      	bne.n	80026c6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	334d      	adds	r3, #77	; 0x4d
 80026ac:	2202      	movs	r2, #2
 80026ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	334c      	adds	r3, #76	; 0x4c
 80026c0:	2201      	movs	r2, #1
 80026c2:	701a      	strb	r2, [r3, #0]
 80026c4:	e2cc      	b.n	8002c60 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80026c6:	78fa      	ldrb	r2, [r7, #3]
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	1a9b      	subs	r3, r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	440b      	add	r3, r1
 80026d4:	334d      	adds	r3, #77	; 0x4d
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b06      	cmp	r3, #6
 80026da:	d114      	bne.n	8002706 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026dc:	78fa      	ldrb	r2, [r7, #3]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	1a9b      	subs	r3, r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	334d      	adds	r3, #77	; 0x4d
 80026ec:	2202      	movs	r2, #2
 80026ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80026f0:	78fa      	ldrb	r2, [r7, #3]
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	4613      	mov	r3, r2
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	1a9b      	subs	r3, r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	334c      	adds	r3, #76	; 0x4c
 8002700:	2205      	movs	r2, #5
 8002702:	701a      	strb	r2, [r3, #0]
 8002704:	e2ac      	b.n	8002c60 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002706:	78fa      	ldrb	r2, [r7, #3]
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	1a9b      	subs	r3, r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	440b      	add	r3, r1
 8002714:	334d      	adds	r3, #77	; 0x4d
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b07      	cmp	r3, #7
 800271a:	d00b      	beq.n	8002734 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800271c:	78fa      	ldrb	r2, [r7, #3]
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	1a9b      	subs	r3, r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	334d      	adds	r3, #77	; 0x4d
 800272c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800272e:	2b09      	cmp	r3, #9
 8002730:	f040 80a6 	bne.w	8002880 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	1a9b      	subs	r3, r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	334d      	adds	r3, #77	; 0x4d
 8002744:	2202      	movs	r2, #2
 8002746:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002748:	78fa      	ldrb	r2, [r7, #3]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	3344      	adds	r3, #68	; 0x44
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	1c59      	adds	r1, r3, #1
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	1a9b      	subs	r3, r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4403      	add	r3, r0
 8002768:	3344      	adds	r3, #68	; 0x44
 800276a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800276c:	78fa      	ldrb	r2, [r7, #3]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	1a9b      	subs	r3, r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	3344      	adds	r3, #68	; 0x44
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d943      	bls.n	800280a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002782:	78fa      	ldrb	r2, [r7, #3]
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	011b      	lsls	r3, r3, #4
 800278a:	1a9b      	subs	r3, r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	440b      	add	r3, r1
 8002790:	3344      	adds	r3, #68	; 0x44
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002796:	78fa      	ldrb	r2, [r7, #3]
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	1a9b      	subs	r3, r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	331a      	adds	r3, #26
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d123      	bne.n	80027f4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80027ac:	78fa      	ldrb	r2, [r7, #3]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	331b      	adds	r3, #27
 80027bc:	2200      	movs	r2, #0
 80027be:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80027c0:	78fa      	ldrb	r2, [r7, #3]
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	1a9b      	subs	r3, r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	331c      	adds	r3, #28
 80027d0:	2200      	movs	r2, #0
 80027d2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80027d4:	78fb      	ldrb	r3, [r7, #3]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	78fa      	ldrb	r2, [r7, #3]
 80027e4:	0151      	lsls	r1, r2, #5
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	440a      	add	r2, r1
 80027ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80027f4:	78fa      	ldrb	r2, [r7, #3]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	334c      	adds	r3, #76	; 0x4c
 8002804:	2204      	movs	r2, #4
 8002806:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002808:	e229      	b.n	8002c5e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800280a:	78fa      	ldrb	r2, [r7, #3]
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	4613      	mov	r3, r2
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	1a9b      	subs	r3, r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	440b      	add	r3, r1
 8002818:	334c      	adds	r3, #76	; 0x4c
 800281a:	2202      	movs	r2, #2
 800281c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800281e:	78fa      	ldrb	r2, [r7, #3]
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	1a9b      	subs	r3, r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	3326      	adds	r3, #38	; 0x26
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00b      	beq.n	800284c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002834:	78fa      	ldrb	r2, [r7, #3]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	1a9b      	subs	r3, r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	3326      	adds	r3, #38	; 0x26
 8002844:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002846:	2b02      	cmp	r3, #2
 8002848:	f040 8209 	bne.w	8002c5e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800284c:	78fb      	ldrb	r3, [r7, #3]
 800284e:	015a      	lsls	r2, r3, #5
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4413      	add	r3, r2
 8002854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002862:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800286a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4413      	add	r3, r2
 8002874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002878:	461a      	mov	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800287e:	e1ee      	b.n	8002c5e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002880:	78fa      	ldrb	r2, [r7, #3]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	1a9b      	subs	r3, r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	334d      	adds	r3, #77	; 0x4d
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b05      	cmp	r3, #5
 8002894:	f040 80c8 	bne.w	8002a28 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002898:	78fa      	ldrb	r2, [r7, #3]
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	334d      	adds	r3, #77	; 0x4d
 80028a8:	2202      	movs	r2, #2
 80028aa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80028ac:	78fa      	ldrb	r2, [r7, #3]
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	331b      	adds	r3, #27
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	f040 81ce 	bne.w	8002c60 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	3326      	adds	r3, #38	; 0x26
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d16b      	bne.n	80029b2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80028da:	78fa      	ldrb	r2, [r7, #3]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	1a9b      	subs	r3, r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	3348      	adds	r3, #72	; 0x48
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	1c59      	adds	r1, r3, #1
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4403      	add	r3, r0
 80028fa:	3348      	adds	r3, #72	; 0x48
 80028fc:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80028fe:	78fa      	ldrb	r2, [r7, #3]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	3348      	adds	r3, #72	; 0x48
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b02      	cmp	r3, #2
 8002912:	d943      	bls.n	800299c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	3348      	adds	r3, #72	; 0x48
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002928:	78fa      	ldrb	r2, [r7, #3]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	1a9b      	subs	r3, r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	331b      	adds	r3, #27
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800293c:	78fa      	ldrb	r2, [r7, #3]
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	3344      	adds	r3, #68	; 0x44
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d809      	bhi.n	8002966 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002952:	78fa      	ldrb	r2, [r7, #3]
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	1a9b      	subs	r3, r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	440b      	add	r3, r1
 8002960:	331c      	adds	r3, #28
 8002962:	2201      	movs	r2, #1
 8002964:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002966:	78fb      	ldrb	r3, [r7, #3]
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4413      	add	r3, r2
 800296e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	78fa      	ldrb	r2, [r7, #3]
 8002976:	0151      	lsls	r1, r2, #5
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	440a      	add	r2, r1
 800297c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002984:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002986:	78fa      	ldrb	r2, [r7, #3]
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	1a9b      	subs	r3, r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	334c      	adds	r3, #76	; 0x4c
 8002996:	2204      	movs	r2, #4
 8002998:	701a      	strb	r2, [r3, #0]
 800299a:	e014      	b.n	80029c6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800299c:	78fa      	ldrb	r2, [r7, #3]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	334c      	adds	r3, #76	; 0x4c
 80029ac:	2202      	movs	r2, #2
 80029ae:	701a      	strb	r2, [r3, #0]
 80029b0:	e009      	b.n	80029c6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029b2:	78fa      	ldrb	r2, [r7, #3]
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	1a9b      	subs	r3, r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	440b      	add	r3, r1
 80029c0:	334c      	adds	r3, #76	; 0x4c
 80029c2:	2202      	movs	r2, #2
 80029c4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029c6:	78fa      	ldrb	r2, [r7, #3]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	1a9b      	subs	r3, r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	3326      	adds	r3, #38	; 0x26
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00b      	beq.n	80029f4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029dc:	78fa      	ldrb	r2, [r7, #3]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	3326      	adds	r3, #38	; 0x26
 80029ec:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	f040 8136 	bne.w	8002c60 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a0a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a12:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a14:	78fb      	ldrb	r3, [r7, #3]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a20:	461a      	mov	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	e11b      	b.n	8002c60 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	1a9b      	subs	r3, r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	334d      	adds	r3, #77	; 0x4d
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	f040 8081 	bne.w	8002b42 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a40:	78fa      	ldrb	r2, [r7, #3]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	1a9b      	subs	r3, r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	334d      	adds	r3, #77	; 0x4d
 8002a50:	2202      	movs	r2, #2
 8002a52:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	331b      	adds	r3, #27
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	f040 80fa 	bne.w	8002c60 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a6c:	78fa      	ldrb	r2, [r7, #3]
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	334c      	adds	r3, #76	; 0x4c
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	015a      	lsls	r2, r3, #5
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4413      	add	r3, r2
 8002a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	78fa      	ldrb	r2, [r7, #3]
 8002a90:	0151      	lsls	r1, r2, #5
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	440a      	add	r2, r1
 8002a96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	78fa      	ldrb	r2, [r7, #3]
 8002ab0:	0151      	lsls	r1, r2, #5
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	440a      	add	r2, r1
 8002ab6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002abe:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	78fa      	ldrb	r2, [r7, #3]
 8002ad0:	0151      	lsls	r1, r2, #5
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	440a      	add	r2, r1
 8002ad6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ada:	f023 0320 	bic.w	r3, r3, #32
 8002ade:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	3326      	adds	r3, #38	; 0x26
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00b      	beq.n	8002b0e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002af6:	78fa      	ldrb	r2, [r7, #3]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	3326      	adds	r3, #38	; 0x26
 8002b06:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	f040 80a9 	bne.w	8002c60 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b0e:	78fb      	ldrb	r3, [r7, #3]
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b24:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b2c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	e08e      	b.n	8002c60 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002b42:	78fa      	ldrb	r2, [r7, #3]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	1a9b      	subs	r3, r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	440b      	add	r3, r1
 8002b50:	334d      	adds	r3, #77	; 0x4d
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b04      	cmp	r3, #4
 8002b56:	d143      	bne.n	8002be0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b58:	78fa      	ldrb	r2, [r7, #3]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	1a9b      	subs	r3, r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	334d      	adds	r3, #77	; 0x4d
 8002b68:	2202      	movs	r2, #2
 8002b6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b6c:	78fa      	ldrb	r2, [r7, #3]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	334c      	adds	r3, #76	; 0x4c
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b80:	78fa      	ldrb	r2, [r7, #3]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	3326      	adds	r3, #38	; 0x26
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b96:	78fa      	ldrb	r2, [r7, #3]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	1a9b      	subs	r3, r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	3326      	adds	r3, #38	; 0x26
 8002ba6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d159      	bne.n	8002c60 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002bac:	78fb      	ldrb	r3, [r7, #3]
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bc2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bca:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd8:	461a      	mov	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	e03f      	b.n	8002c60 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002be0:	78fa      	ldrb	r2, [r7, #3]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	1a9b      	subs	r3, r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	334d      	adds	r3, #77	; 0x4d
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d126      	bne.n	8002c44 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002bf6:	78fa      	ldrb	r2, [r7, #3]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	1a9b      	subs	r3, r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	334d      	adds	r3, #77	; 0x4d
 8002c06:	2202      	movs	r2, #2
 8002c08:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002c0a:	78fa      	ldrb	r2, [r7, #3]
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	1a9b      	subs	r3, r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	440b      	add	r3, r1
 8002c18:	3344      	adds	r3, #68	; 0x44
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	1c59      	adds	r1, r3, #1
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	1a9b      	subs	r3, r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4403      	add	r3, r0
 8002c2a:	3344      	adds	r3, #68	; 0x44
 8002c2c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002c2e:	78fa      	ldrb	r2, [r7, #3]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	1a9b      	subs	r3, r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	334c      	adds	r3, #76	; 0x4c
 8002c3e:	2204      	movs	r2, #4
 8002c40:	701a      	strb	r2, [r3, #0]
 8002c42:	e00d      	b.n	8002c60 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002c44:	78fa      	ldrb	r2, [r7, #3]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	1a9b      	subs	r3, r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	334d      	adds	r3, #77	; 0x4d
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	f000 8100 	beq.w	8002e5c <HCD_HC_IN_IRQHandler+0xcca>
 8002c5c:	e000      	b.n	8002c60 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c5e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002c60:	78fa      	ldrb	r2, [r7, #3]
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	1a9b      	subs	r3, r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	334c      	adds	r3, #76	; 0x4c
 8002c70:	781a      	ldrb	r2, [r3, #0]
 8002c72:	78fb      	ldrb	r3, [r7, #3]
 8002c74:	4619      	mov	r1, r3
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f007 f9a2 	bl	8009fc0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c7c:	e0ef      	b.n	8002e5e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	4611      	mov	r1, r2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f004 f88d 	bl	8006da6 <USB_ReadChInterrupts>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c92:	2b40      	cmp	r3, #64	; 0x40
 8002c94:	d12f      	bne.n	8002cf6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	015a      	lsls	r2, r3, #5
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	2340      	movs	r3, #64	; 0x40
 8002ca6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	1a9b      	subs	r3, r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	334d      	adds	r3, #77	; 0x4d
 8002cb8:	2205      	movs	r2, #5
 8002cba:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	331a      	adds	r3, #26
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	3344      	adds	r3, #68	; 0x44
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	78fa      	ldrb	r2, [r7, #3]
 8002cec:	4611      	mov	r1, r2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f004 fdfd 	bl	80078ee <USB_HC_Halt>
 8002cf4:	e0b3      	b.n	8002e5e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f004 f851 	bl	8006da6 <USB_ReadChInterrupts>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f003 0310 	and.w	r3, r3, #16
 8002d0a:	2b10      	cmp	r3, #16
 8002d0c:	f040 80a7 	bne.w	8002e5e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	1a9b      	subs	r3, r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3326      	adds	r3, #38	; 0x26
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	d11b      	bne.n	8002d5e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	1a9b      	subs	r3, r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	440b      	add	r3, r1
 8002d34:	3344      	adds	r3, #68	; 0x44
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002d3a:	78fa      	ldrb	r2, [r7, #3]
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	334d      	adds	r3, #77	; 0x4d
 8002d4a:	2204      	movs	r2, #4
 8002d4c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	78fa      	ldrb	r2, [r7, #3]
 8002d54:	4611      	mov	r1, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f004 fdc9 	bl	80078ee <USB_HC_Halt>
 8002d5c:	e03f      	b.n	8002dde <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d5e:	78fa      	ldrb	r2, [r7, #3]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	1a9b      	subs	r3, r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	3326      	adds	r3, #38	; 0x26
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d74:	78fa      	ldrb	r2, [r7, #3]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	1a9b      	subs	r3, r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	3326      	adds	r3, #38	; 0x26
 8002d84:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d129      	bne.n	8002dde <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	3344      	adds	r3, #68	; 0x44
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	799b      	ldrb	r3, [r3, #6]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <HCD_HC_IN_IRQHandler+0xc2a>
 8002da6:	78fa      	ldrb	r2, [r7, #3]
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	1a9b      	subs	r3, r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	440b      	add	r3, r1
 8002db4:	331b      	adds	r3, #27
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d110      	bne.n	8002dde <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	334d      	adds	r3, #77	; 0x4d
 8002dcc:	2204      	movs	r2, #4
 8002dce:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f004 fd88 	bl	80078ee <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	1a9b      	subs	r3, r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	440b      	add	r3, r1
 8002dec:	331b      	adds	r3, #27
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d129      	bne.n	8002e48 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002df4:	78fa      	ldrb	r2, [r7, #3]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	1a9b      	subs	r3, r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	331b      	adds	r3, #27
 8002e04:	2200      	movs	r2, #0
 8002e06:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	0151      	lsls	r1, r2, #5
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	440a      	add	r2, r1
 8002e1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e26:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	78fa      	ldrb	r2, [r7, #3]
 8002e38:	0151      	lsls	r1, r2, #5
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	440a      	add	r2, r1
 8002e3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e42:	f043 0320 	orr.w	r3, r3, #32
 8002e46:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	015a      	lsls	r2, r3, #5
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e54:	461a      	mov	r2, r3
 8002e56:	2310      	movs	r3, #16
 8002e58:	6093      	str	r3, [r2, #8]
 8002e5a:	e000      	b.n	8002e5e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002e5c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	78fa      	ldrb	r2, [r7, #3]
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f003 ff8f 	bl	8006da6 <USB_ReadChInterrupts>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d11b      	bne.n	8002eca <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	2304      	movs	r3, #4
 8002ea2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002ea4:	78fa      	ldrb	r2, [r7, #3]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	334d      	adds	r3, #77	; 0x4d
 8002eb4:	2207      	movs	r2, #7
 8002eb6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	78fa      	ldrb	r2, [r7, #3]
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f004 fd14 	bl	80078ee <USB_HC_Halt>
 8002ec6:	f000 bc6f 	b.w	80037a8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f003 ff67 	bl	8006da6 <USB_ReadChInterrupts>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	f003 0320 	and.w	r3, r3, #32
 8002ede:	2b20      	cmp	r3, #32
 8002ee0:	f040 8082 	bne.w	8002fe8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002ee4:	78fb      	ldrb	r3, [r7, #3]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	2320      	movs	r3, #32
 8002ef4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002ef6:	78fa      	ldrb	r2, [r7, #3]
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	1a9b      	subs	r3, r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	3319      	adds	r3, #25
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d124      	bne.n	8002f56 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002f0c:	78fa      	ldrb	r2, [r7, #3]
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	4613      	mov	r3, r2
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	1a9b      	subs	r3, r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	3319      	adds	r3, #25
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f20:	78fa      	ldrb	r2, [r7, #3]
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	1a9b      	subs	r3, r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	334c      	adds	r3, #76	; 0x4c
 8002f30:	2202      	movs	r2, #2
 8002f32:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002f34:	78fa      	ldrb	r2, [r7, #3]
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	1a9b      	subs	r3, r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	334d      	adds	r3, #77	; 0x4d
 8002f44:	2203      	movs	r2, #3
 8002f46:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	78fa      	ldrb	r2, [r7, #3]
 8002f4e:	4611      	mov	r1, r2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f004 fccc 	bl	80078ee <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	331a      	adds	r3, #26
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	f040 841d 	bne.w	80037a8 <HCD_HC_OUT_IRQHandler+0x944>
 8002f6e:	78fa      	ldrb	r2, [r7, #3]
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	4613      	mov	r3, r2
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	1a9b      	subs	r3, r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	331b      	adds	r3, #27
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f040 8411 	bne.w	80037a8 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002f86:	78fa      	ldrb	r2, [r7, #3]
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	1a9b      	subs	r3, r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	3326      	adds	r3, #38	; 0x26
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d009      	beq.n	8002fb0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002f9c:	78fa      	ldrb	r2, [r7, #3]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	1a9b      	subs	r3, r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	331b      	adds	r3, #27
 8002fac:	2201      	movs	r2, #1
 8002fae:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	334d      	adds	r3, #77	; 0x4d
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f004 fc8e 	bl	80078ee <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002fd2:	78fa      	ldrb	r2, [r7, #3]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	3344      	adds	r3, #68	; 0x44
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	e3df      	b.n	80037a8 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	78fa      	ldrb	r2, [r7, #3]
 8002fee:	4611      	mov	r1, r2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f003 fed8 	bl	8006da6 <USB_ReadChInterrupts>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003000:	d111      	bne.n	8003026 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4413      	add	r3, r2
 800300a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300e:	461a      	mov	r2, r3
 8003010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003014:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	78fa      	ldrb	r2, [r7, #3]
 800301c:	4611      	mov	r1, r2
 800301e:	4618      	mov	r0, r3
 8003020:	f004 fc65 	bl	80078ee <USB_HC_Halt>
 8003024:	e3c0      	b.n	80037a8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	4611      	mov	r1, r2
 800302e:	4618      	mov	r0, r3
 8003030:	f003 feb9 	bl	8006da6 <USB_ReadChInterrupts>
 8003034:	4603      	mov	r3, r0
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b01      	cmp	r3, #1
 800303c:	d168      	bne.n	8003110 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800303e:	78fa      	ldrb	r2, [r7, #3]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	1a9b      	subs	r3, r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	3344      	adds	r3, #68	; 0x44
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	78fa      	ldrb	r2, [r7, #3]
 8003058:	4611      	mov	r1, r2
 800305a:	4618      	mov	r0, r3
 800305c:	f003 fea3 	bl	8006da6 <USB_ReadChInterrupts>
 8003060:	4603      	mov	r3, r0
 8003062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003066:	2b40      	cmp	r3, #64	; 0x40
 8003068:	d112      	bne.n	8003090 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	1a9b      	subs	r3, r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	3319      	adds	r3, #25
 800307a:	2201      	movs	r2, #1
 800307c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800307e:	78fb      	ldrb	r3, [r7, #3]
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4413      	add	r3, r2
 8003086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800308a:	461a      	mov	r2, r3
 800308c:	2340      	movs	r3, #64	; 0x40
 800308e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	1a9b      	subs	r3, r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	331b      	adds	r3, #27
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d019      	beq.n	80030da <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	1a9b      	subs	r3, r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	331b      	adds	r3, #27
 80030b6:	2200      	movs	r2, #0
 80030b8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80030ba:	78fb      	ldrb	r3, [r7, #3]
 80030bc:	015a      	lsls	r2, r3, #5
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	4413      	add	r3, r2
 80030c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	0151      	lsls	r1, r2, #5
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	440a      	add	r2, r1
 80030d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80030da:	78fb      	ldrb	r3, [r7, #3]
 80030dc:	015a      	lsls	r2, r3, #5
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e6:	461a      	mov	r2, r3
 80030e8:	2301      	movs	r3, #1
 80030ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80030ec:	78fa      	ldrb	r2, [r7, #3]
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	1a9b      	subs	r3, r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	334d      	adds	r3, #77	; 0x4d
 80030fc:	2201      	movs	r2, #1
 80030fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	4611      	mov	r1, r2
 8003108:	4618      	mov	r0, r3
 800310a:	f004 fbf0 	bl	80078ee <USB_HC_Halt>
 800310e:	e34b      	b.n	80037a8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	4611      	mov	r1, r2
 8003118:	4618      	mov	r0, r3
 800311a:	f003 fe44 	bl	8006da6 <USB_ReadChInterrupts>
 800311e:	4603      	mov	r3, r0
 8003120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003124:	2b40      	cmp	r3, #64	; 0x40
 8003126:	d139      	bne.n	800319c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003128:	78fa      	ldrb	r2, [r7, #3]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	334d      	adds	r3, #77	; 0x4d
 8003138:	2205      	movs	r2, #5
 800313a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800313c:	78fa      	ldrb	r2, [r7, #3]
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	331a      	adds	r3, #26
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d109      	bne.n	8003166 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003152:	78fa      	ldrb	r2, [r7, #3]
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	1a9b      	subs	r3, r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	440b      	add	r3, r1
 8003160:	3319      	adds	r3, #25
 8003162:	2201      	movs	r2, #1
 8003164:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003166:	78fa      	ldrb	r2, [r7, #3]
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	1a9b      	subs	r3, r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	3344      	adds	r3, #68	; 0x44
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	78fa      	ldrb	r2, [r7, #3]
 8003180:	4611      	mov	r1, r2
 8003182:	4618      	mov	r0, r3
 8003184:	f004 fbb3 	bl	80078ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	4413      	add	r3, r2
 8003190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003194:	461a      	mov	r2, r3
 8003196:	2340      	movs	r3, #64	; 0x40
 8003198:	6093      	str	r3, [r2, #8]
 800319a:	e305      	b.n	80037a8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	4611      	mov	r1, r2
 80031a4:	4618      	mov	r0, r3
 80031a6:	f003 fdfe 	bl	8006da6 <USB_ReadChInterrupts>
 80031aa:	4603      	mov	r3, r0
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d11a      	bne.n	80031ea <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	015a      	lsls	r2, r3, #5
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	4413      	add	r3, r2
 80031bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c0:	461a      	mov	r2, r3
 80031c2:	2308      	movs	r3, #8
 80031c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	334d      	adds	r3, #77	; 0x4d
 80031d6:	2206      	movs	r2, #6
 80031d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	78fa      	ldrb	r2, [r7, #3]
 80031e0:	4611      	mov	r1, r2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f004 fb83 	bl	80078ee <USB_HC_Halt>
 80031e8:	e2de      	b.n	80037a8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	4611      	mov	r1, r2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f003 fdd7 	bl	8006da6 <USB_ReadChInterrupts>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f003 0310 	and.w	r3, r3, #16
 80031fe:	2b10      	cmp	r3, #16
 8003200:	d144      	bne.n	800328c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	3344      	adds	r3, #68	; 0x44
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	334d      	adds	r3, #77	; 0x4d
 8003226:	2204      	movs	r2, #4
 8003228:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800322a:	78fa      	ldrb	r2, [r7, #3]
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	1a9b      	subs	r3, r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	3319      	adds	r3, #25
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d114      	bne.n	800326a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	3318      	adds	r3, #24
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d109      	bne.n	800326a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	3319      	adds	r3, #25
 8003266:	2201      	movs	r2, #1
 8003268:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	4611      	mov	r1, r2
 8003272:	4618      	mov	r0, r3
 8003274:	f004 fb3b 	bl	80078ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	4413      	add	r3, r2
 8003280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003284:	461a      	mov	r2, r3
 8003286:	2310      	movs	r3, #16
 8003288:	6093      	str	r3, [r2, #8]
 800328a:	e28d      	b.n	80037a8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	4611      	mov	r1, r2
 8003294:	4618      	mov	r0, r3
 8003296:	f003 fd86 	bl	8006da6 <USB_ReadChInterrupts>
 800329a:	4603      	mov	r3, r0
 800329c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a0:	2b80      	cmp	r3, #128	; 0x80
 80032a2:	d169      	bne.n	8003378 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	799b      	ldrb	r3, [r3, #6]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d111      	bne.n	80032d0 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	334d      	adds	r3, #77	; 0x4d
 80032bc:	2207      	movs	r2, #7
 80032be:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	4611      	mov	r1, r2
 80032c8:	4618      	mov	r0, r3
 80032ca:	f004 fb10 	bl	80078ee <USB_HC_Halt>
 80032ce:	e049      	b.n	8003364 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80032d0:	78fa      	ldrb	r2, [r7, #3]
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	3344      	adds	r3, #68	; 0x44
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	1c59      	adds	r1, r3, #1
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	1a9b      	subs	r3, r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4403      	add	r3, r0
 80032f0:	3344      	adds	r3, #68	; 0x44
 80032f2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032f4:	78fa      	ldrb	r2, [r7, #3]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	1a9b      	subs	r3, r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	3344      	adds	r3, #68	; 0x44
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d922      	bls.n	8003350 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800330a:	78fa      	ldrb	r2, [r7, #3]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	1a9b      	subs	r3, r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	3344      	adds	r3, #68	; 0x44
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800331e:	78fa      	ldrb	r2, [r7, #3]
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	4613      	mov	r3, r2
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	1a9b      	subs	r3, r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	334c      	adds	r3, #76	; 0x4c
 800332e:	2204      	movs	r2, #4
 8003330:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003332:	78fa      	ldrb	r2, [r7, #3]
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	1a9b      	subs	r3, r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	334c      	adds	r3, #76	; 0x4c
 8003342:	781a      	ldrb	r2, [r3, #0]
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	4619      	mov	r1, r3
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f006 fe39 	bl	8009fc0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800334e:	e009      	b.n	8003364 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003350:	78fa      	ldrb	r2, [r7, #3]
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	1a9b      	subs	r3, r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	334c      	adds	r3, #76	; 0x4c
 8003360:	2202      	movs	r2, #2
 8003362:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003370:	461a      	mov	r2, r3
 8003372:	2380      	movs	r3, #128	; 0x80
 8003374:	6093      	str	r3, [r2, #8]
 8003376:	e217      	b.n	80037a8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	4611      	mov	r1, r2
 8003380:	4618      	mov	r0, r3
 8003382:	f003 fd10 	bl	8006da6 <USB_ReadChInterrupts>
 8003386:	4603      	mov	r3, r0
 8003388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800338c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003390:	d11b      	bne.n	80033ca <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	334d      	adds	r3, #77	; 0x4d
 80033a2:	2209      	movs	r2, #9
 80033a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	78fa      	ldrb	r2, [r7, #3]
 80033ac:	4611      	mov	r1, r2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f004 fa9d 	bl	80078ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80033b4:	78fb      	ldrb	r3, [r7, #3]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c0:	461a      	mov	r2, r3
 80033c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033c6:	6093      	str	r3, [r2, #8]
 80033c8:	e1ee      	b.n	80037a8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	4611      	mov	r1, r2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f003 fce7 	bl	8006da6 <USB_ReadChInterrupts>
 80033d8:	4603      	mov	r3, r0
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b02      	cmp	r3, #2
 80033e0:	f040 81df 	bne.w	80037a2 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80033e4:	78fb      	ldrb	r3, [r7, #3]
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f0:	461a      	mov	r2, r3
 80033f2:	2302      	movs	r3, #2
 80033f4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80033f6:	78fa      	ldrb	r2, [r7, #3]
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	4613      	mov	r3, r2
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	1a9b      	subs	r3, r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	334d      	adds	r3, #77	; 0x4d
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b01      	cmp	r3, #1
 800340a:	f040 8093 	bne.w	8003534 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800340e:	78fa      	ldrb	r2, [r7, #3]
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	334d      	adds	r3, #77	; 0x4d
 800341e:	2202      	movs	r2, #2
 8003420:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003422:	78fa      	ldrb	r2, [r7, #3]
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	1a9b      	subs	r3, r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	440b      	add	r3, r1
 8003430:	334c      	adds	r3, #76	; 0x4c
 8003432:	2201      	movs	r2, #1
 8003434:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	3326      	adds	r3, #38	; 0x26
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b02      	cmp	r3, #2
 800344a:	d00b      	beq.n	8003464 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800344c:	78fa      	ldrb	r2, [r7, #3]
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	3326      	adds	r3, #38	; 0x26
 800345c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800345e:	2b03      	cmp	r3, #3
 8003460:	f040 8190 	bne.w	8003784 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	799b      	ldrb	r3, [r3, #6]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d115      	bne.n	8003498 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800346c:	78fa      	ldrb	r2, [r7, #3]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	1a9b      	subs	r3, r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	333d      	adds	r3, #61	; 0x3d
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	78fa      	ldrb	r2, [r7, #3]
 8003480:	f083 0301 	eor.w	r3, r3, #1
 8003484:	b2d8      	uxtb	r0, r3
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	1a9b      	subs	r3, r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	333d      	adds	r3, #61	; 0x3d
 8003494:	4602      	mov	r2, r0
 8003496:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	799b      	ldrb	r3, [r3, #6]
 800349c:	2b01      	cmp	r3, #1
 800349e:	f040 8171 	bne.w	8003784 <HCD_HC_OUT_IRQHandler+0x920>
 80034a2:	78fa      	ldrb	r2, [r7, #3]
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	1a9b      	subs	r3, r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	3334      	adds	r3, #52	; 0x34
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 8165 	beq.w	8003784 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	3334      	adds	r3, #52	; 0x34
 80034ca:	6819      	ldr	r1, [r3, #0]
 80034cc:	78fa      	ldrb	r2, [r7, #3]
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	1a9b      	subs	r3, r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4403      	add	r3, r0
 80034da:	3328      	adds	r3, #40	; 0x28
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	440b      	add	r3, r1
 80034e0:	1e59      	subs	r1, r3, #1
 80034e2:	78fa      	ldrb	r2, [r7, #3]
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	1a9b      	subs	r3, r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4403      	add	r3, r0
 80034f0:	3328      	adds	r3, #40	; 0x28
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80034f8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 813f 	beq.w	8003784 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003506:	78fa      	ldrb	r2, [r7, #3]
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	4613      	mov	r3, r2
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	333d      	adds	r3, #61	; 0x3d
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	78fa      	ldrb	r2, [r7, #3]
 800351a:	f083 0301 	eor.w	r3, r3, #1
 800351e:	b2d8      	uxtb	r0, r3
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	4613      	mov	r3, r2
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	333d      	adds	r3, #61	; 0x3d
 800352e:	4602      	mov	r2, r0
 8003530:	701a      	strb	r2, [r3, #0]
 8003532:	e127      	b.n	8003784 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003534:	78fa      	ldrb	r2, [r7, #3]
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	334d      	adds	r3, #77	; 0x4d
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b03      	cmp	r3, #3
 8003548:	d120      	bne.n	800358c <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800354a:	78fa      	ldrb	r2, [r7, #3]
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	1a9b      	subs	r3, r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	334d      	adds	r3, #77	; 0x4d
 800355a:	2202      	movs	r2, #2
 800355c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	331b      	adds	r3, #27
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b01      	cmp	r3, #1
 8003572:	f040 8107 	bne.w	8003784 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003576:	78fa      	ldrb	r2, [r7, #3]
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	1a9b      	subs	r3, r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	334c      	adds	r3, #76	; 0x4c
 8003586:	2202      	movs	r2, #2
 8003588:	701a      	strb	r2, [r3, #0]
 800358a:	e0fb      	b.n	8003784 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800358c:	78fa      	ldrb	r2, [r7, #3]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	334d      	adds	r3, #77	; 0x4d
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d13a      	bne.n	8003618 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035a2:	78fa      	ldrb	r2, [r7, #3]
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	334d      	adds	r3, #77	; 0x4d
 80035b2:	2202      	movs	r2, #2
 80035b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035b6:	78fa      	ldrb	r2, [r7, #3]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	334c      	adds	r3, #76	; 0x4c
 80035c6:	2202      	movs	r2, #2
 80035c8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80035ca:	78fa      	ldrb	r2, [r7, #3]
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	1a9b      	subs	r3, r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	331b      	adds	r3, #27
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	f040 80d1 	bne.w	8003784 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80035e2:	78fa      	ldrb	r2, [r7, #3]
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	1a9b      	subs	r3, r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	331b      	adds	r3, #27
 80035f2:	2200      	movs	r2, #0
 80035f4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80035f6:	78fb      	ldrb	r3, [r7, #3]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	78fa      	ldrb	r2, [r7, #3]
 8003606:	0151      	lsls	r1, r2, #5
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	440a      	add	r2, r1
 800360c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003614:	6053      	str	r3, [r2, #4]
 8003616:	e0b5      	b.n	8003784 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	334d      	adds	r3, #77	; 0x4d
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b05      	cmp	r3, #5
 800362c:	d114      	bne.n	8003658 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	334d      	adds	r3, #77	; 0x4d
 800363e:	2202      	movs	r2, #2
 8003640:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	334c      	adds	r3, #76	; 0x4c
 8003652:	2202      	movs	r2, #2
 8003654:	701a      	strb	r2, [r3, #0]
 8003656:	e095      	b.n	8003784 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003658:	78fa      	ldrb	r2, [r7, #3]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	334d      	adds	r3, #77	; 0x4d
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b06      	cmp	r3, #6
 800366c:	d114      	bne.n	8003698 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800366e:	78fa      	ldrb	r2, [r7, #3]
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	1a9b      	subs	r3, r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	334d      	adds	r3, #77	; 0x4d
 800367e:	2202      	movs	r2, #2
 8003680:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003682:	78fa      	ldrb	r2, [r7, #3]
 8003684:	6879      	ldr	r1, [r7, #4]
 8003686:	4613      	mov	r3, r2
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	1a9b      	subs	r3, r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	440b      	add	r3, r1
 8003690:	334c      	adds	r3, #76	; 0x4c
 8003692:	2205      	movs	r2, #5
 8003694:	701a      	strb	r2, [r3, #0]
 8003696:	e075      	b.n	8003784 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003698:	78fa      	ldrb	r2, [r7, #3]
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	4613      	mov	r3, r2
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	1a9b      	subs	r3, r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	334d      	adds	r3, #77	; 0x4d
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b07      	cmp	r3, #7
 80036ac:	d00a      	beq.n	80036c4 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80036ae:	78fa      	ldrb	r2, [r7, #3]
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	4613      	mov	r3, r2
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	1a9b      	subs	r3, r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	334d      	adds	r3, #77	; 0x4d
 80036be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80036c0:	2b09      	cmp	r3, #9
 80036c2:	d170      	bne.n	80037a6 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036c4:	78fa      	ldrb	r2, [r7, #3]
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	334d      	adds	r3, #77	; 0x4d
 80036d4:	2202      	movs	r2, #2
 80036d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80036d8:	78fa      	ldrb	r2, [r7, #3]
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	1a9b      	subs	r3, r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	3344      	adds	r3, #68	; 0x44
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	1c59      	adds	r1, r3, #1
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4403      	add	r3, r0
 80036f8:	3344      	adds	r3, #68	; 0x44
 80036fa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036fc:	78fa      	ldrb	r2, [r7, #3]
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	4613      	mov	r3, r2
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	1a9b      	subs	r3, r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	3344      	adds	r3, #68	; 0x44
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d914      	bls.n	800373c <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003712:	78fa      	ldrb	r2, [r7, #3]
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	1a9b      	subs	r3, r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	3344      	adds	r3, #68	; 0x44
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003726:	78fa      	ldrb	r2, [r7, #3]
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	1a9b      	subs	r3, r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	334c      	adds	r3, #76	; 0x4c
 8003736:	2204      	movs	r2, #4
 8003738:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800373a:	e022      	b.n	8003782 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800373c:	78fa      	ldrb	r2, [r7, #3]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	334c      	adds	r3, #76	; 0x4c
 800374c:	2202      	movs	r2, #2
 800374e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	4413      	add	r3, r2
 8003758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003766:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800376e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	4413      	add	r3, r2
 8003778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377c:	461a      	mov	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003782:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003784:	78fa      	ldrb	r2, [r7, #3]
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	4613      	mov	r3, r2
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	334c      	adds	r3, #76	; 0x4c
 8003794:	781a      	ldrb	r2, [r3, #0]
 8003796:	78fb      	ldrb	r3, [r7, #3]
 8003798:	4619      	mov	r1, r3
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f006 fc10 	bl	8009fc0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80037a0:	e002      	b.n	80037a8 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80037a2:	bf00      	nop
 80037a4:	e000      	b.n	80037a8 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80037a6:	bf00      	nop
  }
}
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b08a      	sub	sp, #40	; 0x28
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	0c5b      	lsrs	r3, r3, #17
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	091b      	lsrs	r3, r3, #4
 80037de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037e2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d004      	beq.n	80037f4 <HCD_RXQLVL_IRQHandler+0x46>
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	2b05      	cmp	r3, #5
 80037ee:	f000 80b6 	beq.w	800395e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80037f2:	e0b7      	b.n	8003964 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 80b3 	beq.w	8003962 <HCD_RXQLVL_IRQHandler+0x1b4>
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4613      	mov	r3, r2
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	332c      	adds	r3, #44	; 0x2c
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 80a7 	beq.w	8003962 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4613      	mov	r3, r2
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	1a9b      	subs	r3, r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	3338      	adds	r3, #56	; 0x38
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	18d1      	adds	r1, r2, r3
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4613      	mov	r3, r2
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	1a9b      	subs	r3, r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4403      	add	r3, r0
 8003838:	3334      	adds	r3, #52	; 0x34
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4299      	cmp	r1, r3
 800383e:	f200 8083 	bhi.w	8003948 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4613      	mov	r3, r2
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	332c      	adds	r3, #44	; 0x2c
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	b292      	uxth	r2, r2
 800385c:	4619      	mov	r1, r3
 800385e:	f003 fa37 	bl	8006cd0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4613      	mov	r3, r2
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	1a9b      	subs	r3, r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	332c      	adds	r3, #44	; 0x2c
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	18d1      	adds	r1, r2, r3
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	4613      	mov	r3, r2
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4403      	add	r3, r0
 8003886:	332c      	adds	r3, #44	; 0x2c
 8003888:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4613      	mov	r3, r2
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	3338      	adds	r3, #56	; 0x38
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	18d1      	adds	r1, r2, r3
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4613      	mov	r3, r2
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	1a9b      	subs	r3, r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4403      	add	r3, r0
 80038ae:	3338      	adds	r3, #56	; 0x38
 80038b0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	0cdb      	lsrs	r3, r3, #19
 80038c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038c6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4613      	mov	r3, r2
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	3328      	adds	r3, #40	; 0x28
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	461a      	mov	r2, r3
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4293      	cmp	r3, r2
 80038e0:	d13f      	bne.n	8003962 <HCD_RXQLVL_IRQHandler+0x1b4>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d03c      	beq.n	8003962 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038fe:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003906:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	4413      	add	r3, r2
 8003910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003914:	461a      	mov	r2, r3
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4613      	mov	r3, r2
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	333c      	adds	r3, #60	; 0x3c
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	f083 0301 	eor.w	r3, r3, #1
 8003930:	b2d8      	uxtb	r0, r3
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4613      	mov	r3, r2
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	333c      	adds	r3, #60	; 0x3c
 8003942:	4602      	mov	r2, r0
 8003944:	701a      	strb	r2, [r3, #0]
      break;
 8003946:	e00c      	b.n	8003962 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4613      	mov	r3, r2
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	1a9b      	subs	r3, r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	334c      	adds	r3, #76	; 0x4c
 8003958:	2204      	movs	r2, #4
 800395a:	701a      	strb	r2, [r3, #0]
      break;
 800395c:	e001      	b.n	8003962 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800395e:	bf00      	nop
 8003960:	e000      	b.n	8003964 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003962:	bf00      	nop
  }
}
 8003964:	bf00      	nop
 8003966:	3728      	adds	r7, #40	; 0x28
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003998:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d10b      	bne.n	80039bc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d102      	bne.n	80039b4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f006 faea 	bl	8009f88 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	f043 0302 	orr.w	r3, r3, #2
 80039ba:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d132      	bne.n	8003a2c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f043 0308 	orr.w	r3, r3, #8
 80039cc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d126      	bne.n	8003a26 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	7a5b      	ldrb	r3, [r3, #9]
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d113      	bne.n	8003a08 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80039e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039ea:	d106      	bne.n	80039fa <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2102      	movs	r1, #2
 80039f2:	4618      	mov	r0, r3
 80039f4:	f003 fafc 	bl	8006ff0 <USB_InitFSLSPClkSel>
 80039f8:	e011      	b.n	8003a1e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2101      	movs	r1, #1
 8003a00:	4618      	mov	r0, r3
 8003a02:	f003 faf5 	bl	8006ff0 <USB_InitFSLSPClkSel>
 8003a06:	e00a      	b.n	8003a1e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	79db      	ldrb	r3, [r3, #7]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d106      	bne.n	8003a1e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a16:	461a      	mov	r2, r3
 8003a18:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003a1c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f006 fadc 	bl	8009fdc <HAL_HCD_PortEnabled_Callback>
 8003a24:	e002      	b.n	8003a2c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f006 fae6 	bl	8009ff8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	d103      	bne.n	8003a3e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f043 0320 	orr.w	r3, r3, #32
 8003a3c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a44:	461a      	mov	r2, r3
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	6013      	str	r3, [r2, #0]
}
 8003a4a:	bf00      	nop
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e12b      	b.n	8003cbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7fd f8c0 	bl	8000c00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2224      	movs	r2, #36	; 0x24
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0201 	bic.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aa6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ab8:	f001 fa20 	bl	8004efc <HAL_RCC_GetPCLK1Freq>
 8003abc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	4a81      	ldr	r2, [pc, #516]	; (8003cc8 <HAL_I2C_Init+0x274>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d807      	bhi.n	8003ad8 <HAL_I2C_Init+0x84>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4a80      	ldr	r2, [pc, #512]	; (8003ccc <HAL_I2C_Init+0x278>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	bf94      	ite	ls
 8003ad0:	2301      	movls	r3, #1
 8003ad2:	2300      	movhi	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	e006      	b.n	8003ae6 <HAL_I2C_Init+0x92>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4a7d      	ldr	r2, [pc, #500]	; (8003cd0 <HAL_I2C_Init+0x27c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	bf94      	ite	ls
 8003ae0:	2301      	movls	r3, #1
 8003ae2:	2300      	movhi	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e0e7      	b.n	8003cbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4a78      	ldr	r2, [pc, #480]	; (8003cd4 <HAL_I2C_Init+0x280>)
 8003af2:	fba2 2303 	umull	r2, r3, r2, r3
 8003af6:	0c9b      	lsrs	r3, r3, #18
 8003af8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	4a6a      	ldr	r2, [pc, #424]	; (8003cc8 <HAL_I2C_Init+0x274>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d802      	bhi.n	8003b28 <HAL_I2C_Init+0xd4>
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	3301      	adds	r3, #1
 8003b26:	e009      	b.n	8003b3c <HAL_I2C_Init+0xe8>
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b2e:	fb02 f303 	mul.w	r3, r2, r3
 8003b32:	4a69      	ldr	r2, [pc, #420]	; (8003cd8 <HAL_I2C_Init+0x284>)
 8003b34:	fba2 2303 	umull	r2, r3, r2, r3
 8003b38:	099b      	lsrs	r3, r3, #6
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	430b      	orrs	r3, r1
 8003b42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	495c      	ldr	r1, [pc, #368]	; (8003cc8 <HAL_I2C_Init+0x274>)
 8003b58:	428b      	cmp	r3, r1
 8003b5a:	d819      	bhi.n	8003b90 <HAL_I2C_Init+0x13c>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	1e59      	subs	r1, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b6a:	1c59      	adds	r1, r3, #1
 8003b6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b70:	400b      	ands	r3, r1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <HAL_I2C_Init+0x138>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1e59      	subs	r1, r3, #1
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b84:	3301      	adds	r3, #1
 8003b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b8a:	e051      	b.n	8003c30 <HAL_I2C_Init+0x1dc>
 8003b8c:	2304      	movs	r3, #4
 8003b8e:	e04f      	b.n	8003c30 <HAL_I2C_Init+0x1dc>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d111      	bne.n	8003bbc <HAL_I2C_Init+0x168>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1e58      	subs	r0, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6859      	ldr	r1, [r3, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	440b      	add	r3, r1
 8003ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003baa:	3301      	adds	r3, #1
 8003bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	bf0c      	ite	eq
 8003bb4:	2301      	moveq	r3, #1
 8003bb6:	2300      	movne	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	e012      	b.n	8003be2 <HAL_I2C_Init+0x18e>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1e58      	subs	r0, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6859      	ldr	r1, [r3, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	0099      	lsls	r1, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_I2C_Init+0x196>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e022      	b.n	8003c30 <HAL_I2C_Init+0x1dc>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10e      	bne.n	8003c10 <HAL_I2C_Init+0x1bc>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	1e58      	subs	r0, r3, #1
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6859      	ldr	r1, [r3, #4]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	440b      	add	r3, r1
 8003c00:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c04:	3301      	adds	r3, #1
 8003c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c0e:	e00f      	b.n	8003c30 <HAL_I2C_Init+0x1dc>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	1e58      	subs	r0, r3, #1
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6859      	ldr	r1, [r3, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	0099      	lsls	r1, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c26:	3301      	adds	r3, #1
 8003c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	6809      	ldr	r1, [r1, #0]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69da      	ldr	r2, [r3, #28]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6911      	ldr	r1, [r2, #16]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68d2      	ldr	r2, [r2, #12]
 8003c6a:	4311      	orrs	r1, r2
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	430b      	orrs	r3, r1
 8003c72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695a      	ldr	r2, [r3, #20]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	000186a0 	.word	0x000186a0
 8003ccc:	001e847f 	.word	0x001e847f
 8003cd0:	003d08ff 	.word	0x003d08ff
 8003cd4:	431bde83 	.word	0x431bde83
 8003cd8:	10624dd3 	.word	0x10624dd3

08003cdc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b088      	sub	sp, #32
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e128      	b.n	8003f40 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d109      	bne.n	8003d0e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a90      	ldr	r2, [pc, #576]	; (8003f48 <HAL_I2S_Init+0x26c>)
 8003d06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7fc ffc1 	bl	8000c90 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2202      	movs	r2, #2
 8003d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6812      	ldr	r2, [r2, #0]
 8003d20:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d24:	f023 030f 	bic.w	r3, r3, #15
 8003d28:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d060      	beq.n	8003dfc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d102      	bne.n	8003d48 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003d42:	2310      	movs	r3, #16
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	e001      	b.n	8003d4c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003d48:	2320      	movs	r3, #32
 8003d4a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b20      	cmp	r3, #32
 8003d52:	d802      	bhi.n	8003d5a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003d5a:	2001      	movs	r0, #1
 8003d5c:	f001 f9d8 	bl	8005110 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d60:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d6a:	d125      	bne.n	8003db8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d010      	beq.n	8003d96 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d7e:	4613      	mov	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	461a      	mov	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d90:	3305      	adds	r3, #5
 8003d92:	613b      	str	r3, [r7, #16]
 8003d94:	e01f      	b.n	8003dd6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	461a      	mov	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db2:	3305      	adds	r3, #5
 8003db4:	613b      	str	r3, [r7, #16]
 8003db6:	e00e      	b.n	8003dd6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	461a      	mov	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd2:	3305      	adds	r3, #5
 8003dd4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4a5c      	ldr	r2, [pc, #368]	; (8003f4c <HAL_I2S_Init+0x270>)
 8003dda:	fba2 2303 	umull	r2, r3, r2, r3
 8003dde:	08db      	lsrs	r3, r3, #3
 8003de0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	085b      	lsrs	r3, r3, #1
 8003df2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	021b      	lsls	r3, r3, #8
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	e003      	b.n	8003e04 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d902      	bls.n	8003e10 <HAL_I2S_Init+0x134>
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	2bff      	cmp	r3, #255	; 0xff
 8003e0e:	d907      	bls.n	8003e20 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e14:	f043 0210 	orr.w	r2, r3, #16
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e08f      	b.n	8003f40 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	ea42 0103 	orr.w	r1, r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69fa      	ldr	r2, [r7, #28]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e3e:	f023 030f 	bic.w	r3, r3, #15
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6851      	ldr	r1, [r2, #4]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6892      	ldr	r2, [r2, #8]
 8003e4a:	4311      	orrs	r1, r2
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	68d2      	ldr	r2, [r2, #12]
 8003e50:	4311      	orrs	r1, r2
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6992      	ldr	r2, [r2, #24]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e62:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d161      	bne.n	8003f30 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a38      	ldr	r2, [pc, #224]	; (8003f50 <HAL_I2S_Init+0x274>)
 8003e70:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a37      	ldr	r2, [pc, #220]	; (8003f54 <HAL_I2S_Init+0x278>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d101      	bne.n	8003e80 <HAL_I2S_Init+0x1a4>
 8003e7c:	4b36      	ldr	r3, [pc, #216]	; (8003f58 <HAL_I2S_Init+0x27c>)
 8003e7e:	e001      	b.n	8003e84 <HAL_I2S_Init+0x1a8>
 8003e80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6812      	ldr	r2, [r2, #0]
 8003e8a:	4932      	ldr	r1, [pc, #200]	; (8003f54 <HAL_I2S_Init+0x278>)
 8003e8c:	428a      	cmp	r2, r1
 8003e8e:	d101      	bne.n	8003e94 <HAL_I2S_Init+0x1b8>
 8003e90:	4a31      	ldr	r2, [pc, #196]	; (8003f58 <HAL_I2S_Init+0x27c>)
 8003e92:	e001      	b.n	8003e98 <HAL_I2S_Init+0x1bc>
 8003e94:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003e98:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e9c:	f023 030f 	bic.w	r3, r3, #15
 8003ea0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a2b      	ldr	r2, [pc, #172]	; (8003f54 <HAL_I2S_Init+0x278>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d101      	bne.n	8003eb0 <HAL_I2S_Init+0x1d4>
 8003eac:	4b2a      	ldr	r3, [pc, #168]	; (8003f58 <HAL_I2S_Init+0x27c>)
 8003eae:	e001      	b.n	8003eb4 <HAL_I2S_Init+0x1d8>
 8003eb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a25      	ldr	r2, [pc, #148]	; (8003f54 <HAL_I2S_Init+0x278>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d101      	bne.n	8003ec6 <HAL_I2S_Init+0x1ea>
 8003ec2:	4b25      	ldr	r3, [pc, #148]	; (8003f58 <HAL_I2S_Init+0x27c>)
 8003ec4:	e001      	b.n	8003eca <HAL_I2S_Init+0x1ee>
 8003ec6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed6:	d003      	beq.n	8003ee0 <HAL_I2S_Init+0x204>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d103      	bne.n	8003ee8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003ee0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	e001      	b.n	8003eec <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f00:	4313      	orrs	r3, r2
 8003f02:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	897b      	ldrh	r3, [r7, #10]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f18:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a0d      	ldr	r2, [pc, #52]	; (8003f54 <HAL_I2S_Init+0x278>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d101      	bne.n	8003f28 <HAL_I2S_Init+0x24c>
 8003f24:	4b0c      	ldr	r3, [pc, #48]	; (8003f58 <HAL_I2S_Init+0x27c>)
 8003f26:	e001      	b.n	8003f2c <HAL_I2S_Init+0x250>
 8003f28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f2c:	897a      	ldrh	r2, [r7, #10]
 8003f2e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3720      	adds	r7, #32
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	08004053 	.word	0x08004053
 8003f4c:	cccccccd 	.word	0xcccccccd
 8003f50:	08004169 	.word	0x08004169
 8003f54:	40003800 	.word	0x40003800
 8003f58:	40003400 	.word	0x40003400

08003f5c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	881a      	ldrh	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	1c9a      	adds	r2, r3, #2
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10e      	bne.n	8003fec <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fdc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7ff ffb8 	bl	8003f5c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003fec:	bf00      	nop
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	b292      	uxth	r2, r2
 8004008:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400e:	1c9a      	adds	r2, r3, #2
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004026:	b29b      	uxth	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10e      	bne.n	800404a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800403a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7ff ff93 	bl	8003f70 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b086      	sub	sp, #24
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b04      	cmp	r3, #4
 800406c:	d13a      	bne.n	80040e4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b01      	cmp	r3, #1
 8004076:	d109      	bne.n	800408c <I2S_IRQHandler+0x3a>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004082:	2b40      	cmp	r3, #64	; 0x40
 8004084:	d102      	bne.n	800408c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7ff ffb4 	bl	8003ff4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004092:	2b40      	cmp	r3, #64	; 0x40
 8004094:	d126      	bne.n	80040e4 <I2S_IRQHandler+0x92>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f003 0320 	and.w	r3, r3, #32
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	d11f      	bne.n	80040e4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040b2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040b4:	2300      	movs	r3, #0
 80040b6:	613b      	str	r3, [r7, #16]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	613b      	str	r3, [r7, #16]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d6:	f043 0202 	orr.w	r2, r3, #2
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff ff50 	bl	8003f84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b03      	cmp	r3, #3
 80040ee:	d136      	bne.n	800415e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d109      	bne.n	800410e <I2S_IRQHandler+0xbc>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004104:	2b80      	cmp	r3, #128	; 0x80
 8004106:	d102      	bne.n	800410e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff ff45 	bl	8003f98 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b08      	cmp	r3, #8
 8004116:	d122      	bne.n	800415e <I2S_IRQHandler+0x10c>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f003 0320 	and.w	r3, r3, #32
 8004122:	2b20      	cmp	r3, #32
 8004124:	d11b      	bne.n	800415e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004134:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004150:	f043 0204 	orr.w	r2, r3, #4
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff ff13 	bl	8003f84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800415e:	bf00      	nop
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
	...

08004168 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b088      	sub	sp, #32
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a92      	ldr	r2, [pc, #584]	; (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d101      	bne.n	8004186 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004182:	4b92      	ldr	r3, [pc, #584]	; (80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004184:	e001      	b.n	800418a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004186:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a8b      	ldr	r2, [pc, #556]	; (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d101      	bne.n	80041a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80041a0:	4b8a      	ldr	r3, [pc, #552]	; (80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041a2:	e001      	b.n	80041a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80041a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b4:	d004      	beq.n	80041c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f040 8099 	bne.w	80042f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d107      	bne.n	80041da <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f925 	bl	8004424 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d107      	bne.n	80041f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f9c8 	bl	8004584 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fa:	2b40      	cmp	r3, #64	; 0x40
 80041fc:	d13a      	bne.n	8004274 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b00      	cmp	r3, #0
 8004206:	d035      	beq.n	8004274 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a6e      	ldr	r2, [pc, #440]	; (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d101      	bne.n	8004216 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004212:	4b6e      	ldr	r3, [pc, #440]	; (80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004214:	e001      	b.n	800421a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004216:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4969      	ldr	r1, [pc, #420]	; (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004222:	428b      	cmp	r3, r1
 8004224:	d101      	bne.n	800422a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004226:	4b69      	ldr	r3, [pc, #420]	; (80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004228:	e001      	b.n	800422e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800422a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800422e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004232:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004242:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004244:	2300      	movs	r3, #0
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004266:	f043 0202 	orr.w	r2, r3, #2
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff fe88 	bl	8003f84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b08      	cmp	r3, #8
 800427c:	f040 80c3 	bne.w	8004406 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f003 0320 	and.w	r3, r3, #32
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 80bd 	beq.w	8004406 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800429a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a49      	ldr	r2, [pc, #292]	; (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d101      	bne.n	80042aa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80042a6:	4b49      	ldr	r3, [pc, #292]	; (80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042a8:	e001      	b.n	80042ae <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80042aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4944      	ldr	r1, [pc, #272]	; (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042b6:	428b      	cmp	r3, r1
 80042b8:	d101      	bne.n	80042be <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80042ba:	4b44      	ldr	r3, [pc, #272]	; (80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042bc:	e001      	b.n	80042c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80042be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042c6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80042c8:	2300      	movs	r3, #0
 80042ca:	60bb      	str	r3, [r7, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e2:	f043 0204 	orr.w	r2, r3, #4
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7ff fe4a 	bl	8003f84 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042f0:	e089      	b.n	8004406 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d107      	bne.n	800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f8be 	bl	8004488 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b01      	cmp	r3, #1
 8004314:	d107      	bne.n	8004326 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f8fd 	bl	8004520 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432c:	2b40      	cmp	r3, #64	; 0x40
 800432e:	d12f      	bne.n	8004390 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f003 0320 	and.w	r3, r3, #32
 8004336:	2b00      	cmp	r3, #0
 8004338:	d02a      	beq.n	8004390 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004348:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a1e      	ldr	r2, [pc, #120]	; (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d101      	bne.n	8004358 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004354:	4b1d      	ldr	r3, [pc, #116]	; (80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004356:	e001      	b.n	800435c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004358:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4919      	ldr	r1, [pc, #100]	; (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004364:	428b      	cmp	r3, r1
 8004366:	d101      	bne.n	800436c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004368:	4b18      	ldr	r3, [pc, #96]	; (80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800436a:	e001      	b.n	8004370 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800436c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004370:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004374:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004382:	f043 0202 	orr.w	r2, r3, #2
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff fdfa 	bl	8003f84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b08      	cmp	r3, #8
 8004398:	d136      	bne.n	8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f003 0320 	and.w	r3, r3, #32
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d031      	beq.n	8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a07      	ldr	r2, [pc, #28]	; (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d101      	bne.n	80043b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80043ae:	4b07      	ldr	r3, [pc, #28]	; (80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043b0:	e001      	b.n	80043b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80043b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4902      	ldr	r1, [pc, #8]	; (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043be:	428b      	cmp	r3, r1
 80043c0:	d106      	bne.n	80043d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80043c2:	4b02      	ldr	r3, [pc, #8]	; (80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043c4:	e006      	b.n	80043d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80043c6:	bf00      	nop
 80043c8:	40003800 	.word	0x40003800
 80043cc:	40003400 	.word	0x40003400
 80043d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043d8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043e8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f6:	f043 0204 	orr.w	r2, r3, #4
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7ff fdc0 	bl	8003f84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004404:	e000      	b.n	8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004406:	bf00      	nop
}
 8004408:	bf00      	nop
 800440a:	3720      	adds	r7, #32
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	1c99      	adds	r1, r3, #2
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6251      	str	r1, [r2, #36]	; 0x24
 8004436:	881a      	ldrh	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004442:	b29b      	uxth	r3, r3
 8004444:	3b01      	subs	r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d113      	bne.n	800447e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004464:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d106      	bne.n	800447e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff ffc9 	bl	8004410 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800447e:	bf00      	nop
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
	...

08004488 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	1c99      	adds	r1, r3, #2
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6251      	str	r1, [r2, #36]	; 0x24
 800449a:	8819      	ldrh	r1, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1d      	ldr	r2, [pc, #116]	; (8004518 <I2SEx_TxISR_I2SExt+0x90>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d101      	bne.n	80044aa <I2SEx_TxISR_I2SExt+0x22>
 80044a6:	4b1d      	ldr	r3, [pc, #116]	; (800451c <I2SEx_TxISR_I2SExt+0x94>)
 80044a8:	e001      	b.n	80044ae <I2SEx_TxISR_I2SExt+0x26>
 80044aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044ae:	460a      	mov	r2, r1
 80044b0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d121      	bne.n	800450e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a12      	ldr	r2, [pc, #72]	; (8004518 <I2SEx_TxISR_I2SExt+0x90>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d101      	bne.n	80044d8 <I2SEx_TxISR_I2SExt+0x50>
 80044d4:	4b11      	ldr	r3, [pc, #68]	; (800451c <I2SEx_TxISR_I2SExt+0x94>)
 80044d6:	e001      	b.n	80044dc <I2SEx_TxISR_I2SExt+0x54>
 80044d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	490d      	ldr	r1, [pc, #52]	; (8004518 <I2SEx_TxISR_I2SExt+0x90>)
 80044e4:	428b      	cmp	r3, r1
 80044e6:	d101      	bne.n	80044ec <I2SEx_TxISR_I2SExt+0x64>
 80044e8:	4b0c      	ldr	r3, [pc, #48]	; (800451c <I2SEx_TxISR_I2SExt+0x94>)
 80044ea:	e001      	b.n	80044f0 <I2SEx_TxISR_I2SExt+0x68>
 80044ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044f4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d106      	bne.n	800450e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff ff81 	bl	8004410 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800450e:	bf00      	nop
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40003800 	.word	0x40003800
 800451c:	40003400 	.word	0x40003400

08004520 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68d8      	ldr	r0, [r3, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004532:	1c99      	adds	r1, r3, #2
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004538:	b282      	uxth	r2, r0
 800453a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004540:	b29b      	uxth	r3, r3
 8004542:	3b01      	subs	r3, #1
 8004544:	b29a      	uxth	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800454e:	b29b      	uxth	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d113      	bne.n	800457c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004562:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004568:	b29b      	uxth	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d106      	bne.n	800457c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff ff4a 	bl	8004410 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800457c:	bf00      	nop
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a20      	ldr	r2, [pc, #128]	; (8004614 <I2SEx_RxISR_I2SExt+0x90>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d101      	bne.n	800459a <I2SEx_RxISR_I2SExt+0x16>
 8004596:	4b20      	ldr	r3, [pc, #128]	; (8004618 <I2SEx_RxISR_I2SExt+0x94>)
 8004598:	e001      	b.n	800459e <I2SEx_RxISR_I2SExt+0x1a>
 800459a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800459e:	68d8      	ldr	r0, [r3, #12]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	1c99      	adds	r1, r3, #2
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80045aa:	b282      	uxth	r2, r0
 80045ac:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d121      	bne.n	800460a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a12      	ldr	r2, [pc, #72]	; (8004614 <I2SEx_RxISR_I2SExt+0x90>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d101      	bne.n	80045d4 <I2SEx_RxISR_I2SExt+0x50>
 80045d0:	4b11      	ldr	r3, [pc, #68]	; (8004618 <I2SEx_RxISR_I2SExt+0x94>)
 80045d2:	e001      	b.n	80045d8 <I2SEx_RxISR_I2SExt+0x54>
 80045d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	490d      	ldr	r1, [pc, #52]	; (8004614 <I2SEx_RxISR_I2SExt+0x90>)
 80045e0:	428b      	cmp	r3, r1
 80045e2:	d101      	bne.n	80045e8 <I2SEx_RxISR_I2SExt+0x64>
 80045e4:	4b0c      	ldr	r3, [pc, #48]	; (8004618 <I2SEx_RxISR_I2SExt+0x94>)
 80045e6:	e001      	b.n	80045ec <I2SEx_RxISR_I2SExt+0x68>
 80045e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045f0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d106      	bne.n	800460a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff ff03 	bl	8004410 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800460a:	bf00      	nop
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40003800 	.word	0x40003800
 8004618:	40003400 	.word	0x40003400

0800461c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e267      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d075      	beq.n	8004726 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800463a:	4b88      	ldr	r3, [pc, #544]	; (800485c <HAL_RCC_OscConfig+0x240>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
 8004642:	2b04      	cmp	r3, #4
 8004644:	d00c      	beq.n	8004660 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004646:	4b85      	ldr	r3, [pc, #532]	; (800485c <HAL_RCC_OscConfig+0x240>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800464e:	2b08      	cmp	r3, #8
 8004650:	d112      	bne.n	8004678 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004652:	4b82      	ldr	r3, [pc, #520]	; (800485c <HAL_RCC_OscConfig+0x240>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800465a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800465e:	d10b      	bne.n	8004678 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004660:	4b7e      	ldr	r3, [pc, #504]	; (800485c <HAL_RCC_OscConfig+0x240>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d05b      	beq.n	8004724 <HAL_RCC_OscConfig+0x108>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d157      	bne.n	8004724 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e242      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004680:	d106      	bne.n	8004690 <HAL_RCC_OscConfig+0x74>
 8004682:	4b76      	ldr	r3, [pc, #472]	; (800485c <HAL_RCC_OscConfig+0x240>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a75      	ldr	r2, [pc, #468]	; (800485c <HAL_RCC_OscConfig+0x240>)
 8004688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	e01d      	b.n	80046cc <HAL_RCC_OscConfig+0xb0>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004698:	d10c      	bne.n	80046b4 <HAL_RCC_OscConfig+0x98>
 800469a:	4b70      	ldr	r3, [pc, #448]	; (800485c <HAL_RCC_OscConfig+0x240>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a6f      	ldr	r2, [pc, #444]	; (800485c <HAL_RCC_OscConfig+0x240>)
 80046a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	4b6d      	ldr	r3, [pc, #436]	; (800485c <HAL_RCC_OscConfig+0x240>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a6c      	ldr	r2, [pc, #432]	; (800485c <HAL_RCC_OscConfig+0x240>)
 80046ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	e00b      	b.n	80046cc <HAL_RCC_OscConfig+0xb0>
 80046b4:	4b69      	ldr	r3, [pc, #420]	; (800485c <HAL_RCC_OscConfig+0x240>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a68      	ldr	r2, [pc, #416]	; (800485c <HAL_RCC_OscConfig+0x240>)
 80046ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	4b66      	ldr	r3, [pc, #408]	; (800485c <HAL_RCC_OscConfig+0x240>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a65      	ldr	r2, [pc, #404]	; (800485c <HAL_RCC_OscConfig+0x240>)
 80046c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d013      	beq.n	80046fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d4:	f7fc fdac 	bl	8001230 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046dc:	f7fc fda8 	bl	8001230 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b64      	cmp	r3, #100	; 0x64
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e207      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ee:	4b5b      	ldr	r3, [pc, #364]	; (800485c <HAL_RCC_OscConfig+0x240>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCC_OscConfig+0xc0>
 80046fa:	e014      	b.n	8004726 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fc:	f7fc fd98 	bl	8001230 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004704:	f7fc fd94 	bl	8001230 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b64      	cmp	r3, #100	; 0x64
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e1f3      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004716:	4b51      	ldr	r3, [pc, #324]	; (800485c <HAL_RCC_OscConfig+0x240>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0xe8>
 8004722:	e000      	b.n	8004726 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d063      	beq.n	80047fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004732:	4b4a      	ldr	r3, [pc, #296]	; (800485c <HAL_RCC_OscConfig+0x240>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 030c 	and.w	r3, r3, #12
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00b      	beq.n	8004756 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800473e:	4b47      	ldr	r3, [pc, #284]	; (800485c <HAL_RCC_OscConfig+0x240>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004746:	2b08      	cmp	r3, #8
 8004748:	d11c      	bne.n	8004784 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800474a:	4b44      	ldr	r3, [pc, #272]	; (800485c <HAL_RCC_OscConfig+0x240>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d116      	bne.n	8004784 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004756:	4b41      	ldr	r3, [pc, #260]	; (800485c <HAL_RCC_OscConfig+0x240>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d005      	beq.n	800476e <HAL_RCC_OscConfig+0x152>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d001      	beq.n	800476e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e1c7      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800476e:	4b3b      	ldr	r3, [pc, #236]	; (800485c <HAL_RCC_OscConfig+0x240>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	4937      	ldr	r1, [pc, #220]	; (800485c <HAL_RCC_OscConfig+0x240>)
 800477e:	4313      	orrs	r3, r2
 8004780:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004782:	e03a      	b.n	80047fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d020      	beq.n	80047ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800478c:	4b34      	ldr	r3, [pc, #208]	; (8004860 <HAL_RCC_OscConfig+0x244>)
 800478e:	2201      	movs	r2, #1
 8004790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004792:	f7fc fd4d 	bl	8001230 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800479a:	f7fc fd49 	bl	8001230 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e1a8      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ac:	4b2b      	ldr	r3, [pc, #172]	; (800485c <HAL_RCC_OscConfig+0x240>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0f0      	beq.n	800479a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b8:	4b28      	ldr	r3, [pc, #160]	; (800485c <HAL_RCC_OscConfig+0x240>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	4925      	ldr	r1, [pc, #148]	; (800485c <HAL_RCC_OscConfig+0x240>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	600b      	str	r3, [r1, #0]
 80047cc:	e015      	b.n	80047fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ce:	4b24      	ldr	r3, [pc, #144]	; (8004860 <HAL_RCC_OscConfig+0x244>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d4:	f7fc fd2c 	bl	8001230 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047dc:	f7fc fd28 	bl	8001230 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e187      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ee:	4b1b      	ldr	r3, [pc, #108]	; (800485c <HAL_RCC_OscConfig+0x240>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	2b00      	cmp	r3, #0
 8004804:	d036      	beq.n	8004874 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d016      	beq.n	800483c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800480e:	4b15      	ldr	r3, [pc, #84]	; (8004864 <HAL_RCC_OscConfig+0x248>)
 8004810:	2201      	movs	r2, #1
 8004812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004814:	f7fc fd0c 	bl	8001230 <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800481c:	f7fc fd08 	bl	8001230 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e167      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800482e:	4b0b      	ldr	r3, [pc, #44]	; (800485c <HAL_RCC_OscConfig+0x240>)
 8004830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0f0      	beq.n	800481c <HAL_RCC_OscConfig+0x200>
 800483a:	e01b      	b.n	8004874 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800483c:	4b09      	ldr	r3, [pc, #36]	; (8004864 <HAL_RCC_OscConfig+0x248>)
 800483e:	2200      	movs	r2, #0
 8004840:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004842:	f7fc fcf5 	bl	8001230 <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004848:	e00e      	b.n	8004868 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800484a:	f7fc fcf1 	bl	8001230 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d907      	bls.n	8004868 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e150      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
 800485c:	40023800 	.word	0x40023800
 8004860:	42470000 	.word	0x42470000
 8004864:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004868:	4b88      	ldr	r3, [pc, #544]	; (8004a8c <HAL_RCC_OscConfig+0x470>)
 800486a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1ea      	bne.n	800484a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 8097 	beq.w	80049b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004882:	2300      	movs	r3, #0
 8004884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004886:	4b81      	ldr	r3, [pc, #516]	; (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10f      	bne.n	80048b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004892:	2300      	movs	r3, #0
 8004894:	60bb      	str	r3, [r7, #8]
 8004896:	4b7d      	ldr	r3, [pc, #500]	; (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	4a7c      	ldr	r2, [pc, #496]	; (8004a8c <HAL_RCC_OscConfig+0x470>)
 800489c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a0:	6413      	str	r3, [r2, #64]	; 0x40
 80048a2:	4b7a      	ldr	r3, [pc, #488]	; (8004a8c <HAL_RCC_OscConfig+0x470>)
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048aa:	60bb      	str	r3, [r7, #8]
 80048ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ae:	2301      	movs	r3, #1
 80048b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b2:	4b77      	ldr	r3, [pc, #476]	; (8004a90 <HAL_RCC_OscConfig+0x474>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d118      	bne.n	80048f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048be:	4b74      	ldr	r3, [pc, #464]	; (8004a90 <HAL_RCC_OscConfig+0x474>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a73      	ldr	r2, [pc, #460]	; (8004a90 <HAL_RCC_OscConfig+0x474>)
 80048c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ca:	f7fc fcb1 	bl	8001230 <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d0:	e008      	b.n	80048e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048d2:	f7fc fcad 	bl	8001230 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e10c      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e4:	4b6a      	ldr	r3, [pc, #424]	; (8004a90 <HAL_RCC_OscConfig+0x474>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0f0      	beq.n	80048d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d106      	bne.n	8004906 <HAL_RCC_OscConfig+0x2ea>
 80048f8:	4b64      	ldr	r3, [pc, #400]	; (8004a8c <HAL_RCC_OscConfig+0x470>)
 80048fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fc:	4a63      	ldr	r2, [pc, #396]	; (8004a8c <HAL_RCC_OscConfig+0x470>)
 80048fe:	f043 0301 	orr.w	r3, r3, #1
 8004902:	6713      	str	r3, [r2, #112]	; 0x70
 8004904:	e01c      	b.n	8004940 <HAL_RCC_OscConfig+0x324>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	2b05      	cmp	r3, #5
 800490c:	d10c      	bne.n	8004928 <HAL_RCC_OscConfig+0x30c>
 800490e:	4b5f      	ldr	r3, [pc, #380]	; (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004912:	4a5e      	ldr	r2, [pc, #376]	; (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004914:	f043 0304 	orr.w	r3, r3, #4
 8004918:	6713      	str	r3, [r2, #112]	; 0x70
 800491a:	4b5c      	ldr	r3, [pc, #368]	; (8004a8c <HAL_RCC_OscConfig+0x470>)
 800491c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491e:	4a5b      	ldr	r2, [pc, #364]	; (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004920:	f043 0301 	orr.w	r3, r3, #1
 8004924:	6713      	str	r3, [r2, #112]	; 0x70
 8004926:	e00b      	b.n	8004940 <HAL_RCC_OscConfig+0x324>
 8004928:	4b58      	ldr	r3, [pc, #352]	; (8004a8c <HAL_RCC_OscConfig+0x470>)
 800492a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492c:	4a57      	ldr	r2, [pc, #348]	; (8004a8c <HAL_RCC_OscConfig+0x470>)
 800492e:	f023 0301 	bic.w	r3, r3, #1
 8004932:	6713      	str	r3, [r2, #112]	; 0x70
 8004934:	4b55      	ldr	r3, [pc, #340]	; (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004938:	4a54      	ldr	r2, [pc, #336]	; (8004a8c <HAL_RCC_OscConfig+0x470>)
 800493a:	f023 0304 	bic.w	r3, r3, #4
 800493e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d015      	beq.n	8004974 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004948:	f7fc fc72 	bl	8001230 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800494e:	e00a      	b.n	8004966 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004950:	f7fc fc6e 	bl	8001230 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	f241 3288 	movw	r2, #5000	; 0x1388
 800495e:	4293      	cmp	r3, r2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e0cb      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004966:	4b49      	ldr	r3, [pc, #292]	; (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0ee      	beq.n	8004950 <HAL_RCC_OscConfig+0x334>
 8004972:	e014      	b.n	800499e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004974:	f7fc fc5c 	bl	8001230 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800497a:	e00a      	b.n	8004992 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800497c:	f7fc fc58 	bl	8001230 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	f241 3288 	movw	r2, #5000	; 0x1388
 800498a:	4293      	cmp	r3, r2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e0b5      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004992:	4b3e      	ldr	r3, [pc, #248]	; (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1ee      	bne.n	800497c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800499e:	7dfb      	ldrb	r3, [r7, #23]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d105      	bne.n	80049b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a4:	4b39      	ldr	r3, [pc, #228]	; (8004a8c <HAL_RCC_OscConfig+0x470>)
 80049a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a8:	4a38      	ldr	r2, [pc, #224]	; (8004a8c <HAL_RCC_OscConfig+0x470>)
 80049aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 80a1 	beq.w	8004afc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049ba:	4b34      	ldr	r3, [pc, #208]	; (8004a8c <HAL_RCC_OscConfig+0x470>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 030c 	and.w	r3, r3, #12
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	d05c      	beq.n	8004a80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d141      	bne.n	8004a52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ce:	4b31      	ldr	r3, [pc, #196]	; (8004a94 <HAL_RCC_OscConfig+0x478>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d4:	f7fc fc2c 	bl	8001230 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049dc:	f7fc fc28 	bl	8001230 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e087      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ee:	4b27      	ldr	r3, [pc, #156]	; (8004a8c <HAL_RCC_OscConfig+0x470>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69da      	ldr	r2, [r3, #28]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	019b      	lsls	r3, r3, #6
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a10:	085b      	lsrs	r3, r3, #1
 8004a12:	3b01      	subs	r3, #1
 8004a14:	041b      	lsls	r3, r3, #16
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	061b      	lsls	r3, r3, #24
 8004a1e:	491b      	ldr	r1, [pc, #108]	; (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a24:	4b1b      	ldr	r3, [pc, #108]	; (8004a94 <HAL_RCC_OscConfig+0x478>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2a:	f7fc fc01 	bl	8001230 <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a30:	e008      	b.n	8004a44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a32:	f7fc fbfd 	bl	8001230 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e05c      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a44:	4b11      	ldr	r3, [pc, #68]	; (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0f0      	beq.n	8004a32 <HAL_RCC_OscConfig+0x416>
 8004a50:	e054      	b.n	8004afc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a52:	4b10      	ldr	r3, [pc, #64]	; (8004a94 <HAL_RCC_OscConfig+0x478>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a58:	f7fc fbea 	bl	8001230 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a60:	f7fc fbe6 	bl	8001230 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e045      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a72:	4b06      	ldr	r3, [pc, #24]	; (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1f0      	bne.n	8004a60 <HAL_RCC_OscConfig+0x444>
 8004a7e:	e03d      	b.n	8004afc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d107      	bne.n	8004a98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e038      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
 8004a8c:	40023800 	.word	0x40023800
 8004a90:	40007000 	.word	0x40007000
 8004a94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a98:	4b1b      	ldr	r3, [pc, #108]	; (8004b08 <HAL_RCC_OscConfig+0x4ec>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d028      	beq.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d121      	bne.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d11a      	bne.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ac8:	4013      	ands	r3, r2
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ace:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d111      	bne.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ade:	085b      	lsrs	r3, r3, #1
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d107      	bne.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d001      	beq.n	8004afc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e000      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40023800 	.word	0x40023800

08004b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e0cc      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b20:	4b68      	ldr	r3, [pc, #416]	; (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d90c      	bls.n	8004b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2e:	4b65      	ldr	r3, [pc, #404]	; (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b36:	4b63      	ldr	r3, [pc, #396]	; (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d001      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e0b8      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d020      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d005      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b60:	4b59      	ldr	r3, [pc, #356]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	4a58      	ldr	r2, [pc, #352]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d005      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b78:	4b53      	ldr	r3, [pc, #332]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	4a52      	ldr	r2, [pc, #328]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b84:	4b50      	ldr	r3, [pc, #320]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	494d      	ldr	r1, [pc, #308]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d044      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d107      	bne.n	8004bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004baa:	4b47      	ldr	r3, [pc, #284]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d119      	bne.n	8004bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e07f      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d003      	beq.n	8004bca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d107      	bne.n	8004bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bca:	4b3f      	ldr	r3, [pc, #252]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d109      	bne.n	8004bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e06f      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bda:	4b3b      	ldr	r3, [pc, #236]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e067      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bea:	4b37      	ldr	r3, [pc, #220]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f023 0203 	bic.w	r2, r3, #3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	4934      	ldr	r1, [pc, #208]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bfc:	f7fc fb18 	bl	8001230 <HAL_GetTick>
 8004c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c02:	e00a      	b.n	8004c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c04:	f7fc fb14 	bl	8001230 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e04f      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c1a:	4b2b      	ldr	r3, [pc, #172]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 020c 	and.w	r2, r3, #12
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d1eb      	bne.n	8004c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c2c:	4b25      	ldr	r3, [pc, #148]	; (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d20c      	bcs.n	8004c54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3a:	4b22      	ldr	r3, [pc, #136]	; (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c42:	4b20      	ldr	r3, [pc, #128]	; (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d001      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e032      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d008      	beq.n	8004c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c60:	4b19      	ldr	r3, [pc, #100]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	4916      	ldr	r1, [pc, #88]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d009      	beq.n	8004c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c7e:	4b12      	ldr	r3, [pc, #72]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	490e      	ldr	r1, [pc, #56]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c92:	f000 f821 	bl	8004cd8 <HAL_RCC_GetSysClockFreq>
 8004c96:	4602      	mov	r2, r0
 8004c98:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	091b      	lsrs	r3, r3, #4
 8004c9e:	f003 030f 	and.w	r3, r3, #15
 8004ca2:	490a      	ldr	r1, [pc, #40]	; (8004ccc <HAL_RCC_ClockConfig+0x1c0>)
 8004ca4:	5ccb      	ldrb	r3, [r1, r3]
 8004ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8004caa:	4a09      	ldr	r2, [pc, #36]	; (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cae:	4b09      	ldr	r3, [pc, #36]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fc fa78 	bl	80011a8 <HAL_InitTick>

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	40023c00 	.word	0x40023c00
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	0800a6b4 	.word	0x0800a6b4
 8004cd0:	20000000 	.word	0x20000000
 8004cd4:	20000004 	.word	0x20000004

08004cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cdc:	b094      	sub	sp, #80	; 0x50
 8004cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ce8:	2300      	movs	r3, #0
 8004cea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cf0:	4b79      	ldr	r3, [pc, #484]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f003 030c 	and.w	r3, r3, #12
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d00d      	beq.n	8004d18 <HAL_RCC_GetSysClockFreq+0x40>
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	f200 80e1 	bhi.w	8004ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <HAL_RCC_GetSysClockFreq+0x34>
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d003      	beq.n	8004d12 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d0a:	e0db      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d0c:	4b73      	ldr	r3, [pc, #460]	; (8004edc <HAL_RCC_GetSysClockFreq+0x204>)
 8004d0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004d10:	e0db      	b.n	8004eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d12:	4b73      	ldr	r3, [pc, #460]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d16:	e0d8      	b.n	8004eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d18:	4b6f      	ldr	r3, [pc, #444]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d22:	4b6d      	ldr	r3, [pc, #436]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d063      	beq.n	8004df6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d2e:	4b6a      	ldr	r3, [pc, #424]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	099b      	lsrs	r3, r3, #6
 8004d34:	2200      	movs	r2, #0
 8004d36:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d40:	633b      	str	r3, [r7, #48]	; 0x30
 8004d42:	2300      	movs	r3, #0
 8004d44:	637b      	str	r3, [r7, #52]	; 0x34
 8004d46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d4a:	4622      	mov	r2, r4
 8004d4c:	462b      	mov	r3, r5
 8004d4e:	f04f 0000 	mov.w	r0, #0
 8004d52:	f04f 0100 	mov.w	r1, #0
 8004d56:	0159      	lsls	r1, r3, #5
 8004d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d5c:	0150      	lsls	r0, r2, #5
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	4621      	mov	r1, r4
 8004d64:	1a51      	subs	r1, r2, r1
 8004d66:	6139      	str	r1, [r7, #16]
 8004d68:	4629      	mov	r1, r5
 8004d6a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d7c:	4659      	mov	r1, fp
 8004d7e:	018b      	lsls	r3, r1, #6
 8004d80:	4651      	mov	r1, sl
 8004d82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d86:	4651      	mov	r1, sl
 8004d88:	018a      	lsls	r2, r1, #6
 8004d8a:	4651      	mov	r1, sl
 8004d8c:	ebb2 0801 	subs.w	r8, r2, r1
 8004d90:	4659      	mov	r1, fp
 8004d92:	eb63 0901 	sbc.w	r9, r3, r1
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	f04f 0300 	mov.w	r3, #0
 8004d9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004da2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004da6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004daa:	4690      	mov	r8, r2
 8004dac:	4699      	mov	r9, r3
 8004dae:	4623      	mov	r3, r4
 8004db0:	eb18 0303 	adds.w	r3, r8, r3
 8004db4:	60bb      	str	r3, [r7, #8]
 8004db6:	462b      	mov	r3, r5
 8004db8:	eb49 0303 	adc.w	r3, r9, r3
 8004dbc:	60fb      	str	r3, [r7, #12]
 8004dbe:	f04f 0200 	mov.w	r2, #0
 8004dc2:	f04f 0300 	mov.w	r3, #0
 8004dc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004dca:	4629      	mov	r1, r5
 8004dcc:	024b      	lsls	r3, r1, #9
 8004dce:	4621      	mov	r1, r4
 8004dd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	024a      	lsls	r2, r1, #9
 8004dd8:	4610      	mov	r0, r2
 8004dda:	4619      	mov	r1, r3
 8004ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dde:	2200      	movs	r2, #0
 8004de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004de2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004de4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004de8:	f7fb f9ee 	bl	80001c8 <__aeabi_uldivmod>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4613      	mov	r3, r2
 8004df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004df4:	e058      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004df6:	4b38      	ldr	r3, [pc, #224]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	099b      	lsrs	r3, r3, #6
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	4618      	mov	r0, r3
 8004e00:	4611      	mov	r1, r2
 8004e02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e06:	623b      	str	r3, [r7, #32]
 8004e08:	2300      	movs	r3, #0
 8004e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e10:	4642      	mov	r2, r8
 8004e12:	464b      	mov	r3, r9
 8004e14:	f04f 0000 	mov.w	r0, #0
 8004e18:	f04f 0100 	mov.w	r1, #0
 8004e1c:	0159      	lsls	r1, r3, #5
 8004e1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e22:	0150      	lsls	r0, r2, #5
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4641      	mov	r1, r8
 8004e2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e2e:	4649      	mov	r1, r9
 8004e30:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e48:	ebb2 040a 	subs.w	r4, r2, sl
 8004e4c:	eb63 050b 	sbc.w	r5, r3, fp
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	f04f 0300 	mov.w	r3, #0
 8004e58:	00eb      	lsls	r3, r5, #3
 8004e5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e5e:	00e2      	lsls	r2, r4, #3
 8004e60:	4614      	mov	r4, r2
 8004e62:	461d      	mov	r5, r3
 8004e64:	4643      	mov	r3, r8
 8004e66:	18e3      	adds	r3, r4, r3
 8004e68:	603b      	str	r3, [r7, #0]
 8004e6a:	464b      	mov	r3, r9
 8004e6c:	eb45 0303 	adc.w	r3, r5, r3
 8004e70:	607b      	str	r3, [r7, #4]
 8004e72:	f04f 0200 	mov.w	r2, #0
 8004e76:	f04f 0300 	mov.w	r3, #0
 8004e7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e7e:	4629      	mov	r1, r5
 8004e80:	028b      	lsls	r3, r1, #10
 8004e82:	4621      	mov	r1, r4
 8004e84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e88:	4621      	mov	r1, r4
 8004e8a:	028a      	lsls	r2, r1, #10
 8004e8c:	4610      	mov	r0, r2
 8004e8e:	4619      	mov	r1, r3
 8004e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e92:	2200      	movs	r2, #0
 8004e94:	61bb      	str	r3, [r7, #24]
 8004e96:	61fa      	str	r2, [r7, #28]
 8004e98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e9c:	f7fb f994 	bl	80001c8 <__aeabi_uldivmod>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ea8:	4b0b      	ldr	r3, [pc, #44]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	0c1b      	lsrs	r3, r3, #16
 8004eae:	f003 0303 	and.w	r3, r3, #3
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004eb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ec2:	e002      	b.n	8004eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ec4:	4b05      	ldr	r3, [pc, #20]	; (8004edc <HAL_RCC_GetSysClockFreq+0x204>)
 8004ec6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3750      	adds	r7, #80	; 0x50
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	00f42400 	.word	0x00f42400
 8004ee0:	007a1200 	.word	0x007a1200

08004ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ee8:	4b03      	ldr	r3, [pc, #12]	; (8004ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eea:	681b      	ldr	r3, [r3, #0]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	20000000 	.word	0x20000000

08004efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f00:	f7ff fff0 	bl	8004ee4 <HAL_RCC_GetHCLKFreq>
 8004f04:	4602      	mov	r2, r0
 8004f06:	4b05      	ldr	r3, [pc, #20]	; (8004f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	0a9b      	lsrs	r3, r3, #10
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	4903      	ldr	r1, [pc, #12]	; (8004f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f12:	5ccb      	ldrb	r3, [r1, r3]
 8004f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	40023800 	.word	0x40023800
 8004f20:	0800a6c4 	.word	0x0800a6c4

08004f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f28:	f7ff ffdc 	bl	8004ee4 <HAL_RCC_GetHCLKFreq>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	4b05      	ldr	r3, [pc, #20]	; (8004f44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	0b5b      	lsrs	r3, r3, #13
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	4903      	ldr	r1, [pc, #12]	; (8004f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f3a:	5ccb      	ldrb	r3, [r1, r3]
 8004f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40023800 	.word	0x40023800
 8004f48:	0800a6c4 	.word	0x0800a6c4

08004f4c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d105      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d035      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f74:	4b62      	ldr	r3, [pc, #392]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f7a:	f7fc f959 	bl	8001230 <HAL_GetTick>
 8004f7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f80:	e008      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f82:	f7fc f955 	bl	8001230 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e0b0      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f94:	4b5b      	ldr	r3, [pc, #364]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1f0      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	019a      	lsls	r2, r3, #6
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	071b      	lsls	r3, r3, #28
 8004fac:	4955      	ldr	r1, [pc, #340]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fb4:	4b52      	ldr	r3, [pc, #328]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fba:	f7fc f939 	bl	8001230 <HAL_GetTick>
 8004fbe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fc0:	e008      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fc2:	f7fc f935 	bl	8001230 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e090      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fd4:	4b4b      	ldr	r3, [pc, #300]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0f0      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 8083 	beq.w	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]
 8004ff2:	4b44      	ldr	r3, [pc, #272]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	4a43      	ldr	r2, [pc, #268]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ffe:	4b41      	ldr	r3, [pc, #260]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800500a:	4b3f      	ldr	r3, [pc, #252]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a3e      	ldr	r2, [pc, #248]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005014:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005016:	f7fc f90b 	bl	8001230 <HAL_GetTick>
 800501a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800501c:	e008      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800501e:	f7fc f907 	bl	8001230 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e062      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005030:	4b35      	ldr	r3, [pc, #212]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0f0      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800503c:	4b31      	ldr	r3, [pc, #196]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800503e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005044:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d02f      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x160>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	429a      	cmp	r2, r3
 8005058:	d028      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800505a:	4b2a      	ldr	r3, [pc, #168]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800505c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005062:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005064:	4b29      	ldr	r3, [pc, #164]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005066:	2201      	movs	r2, #1
 8005068:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800506a:	4b28      	ldr	r3, [pc, #160]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005070:	4a24      	ldr	r2, [pc, #144]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005076:	4b23      	ldr	r3, [pc, #140]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b01      	cmp	r3, #1
 8005080:	d114      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005082:	f7fc f8d5 	bl	8001230 <HAL_GetTick>
 8005086:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005088:	e00a      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800508a:	f7fc f8d1 	bl	8001230 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	f241 3288 	movw	r2, #5000	; 0x1388
 8005098:	4293      	cmp	r3, r2
 800509a:	d901      	bls.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e02a      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050a0:	4b18      	ldr	r3, [pc, #96]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0ee      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050b8:	d10d      	bne.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80050ba:	4b12      	ldr	r3, [pc, #72]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ce:	490d      	ldr	r1, [pc, #52]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	608b      	str	r3, [r1, #8]
 80050d4:	e005      	b.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80050d6:	4b0b      	ldr	r3, [pc, #44]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	4a0a      	ldr	r2, [pc, #40]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050dc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050e0:	6093      	str	r3, [r2, #8]
 80050e2:	4b08      	ldr	r3, [pc, #32]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ee:	4905      	ldr	r1, [pc, #20]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	42470068 	.word	0x42470068
 8005104:	40023800 	.word	0x40023800
 8005108:	40007000 	.word	0x40007000
 800510c:	42470e40 	.word	0x42470e40

08005110 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d13f      	bne.n	80051ae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800512e:	4b24      	ldr	r3, [pc, #144]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005136:	60fb      	str	r3, [r7, #12]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d006      	beq.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005144:	d12f      	bne.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005146:	4b1f      	ldr	r3, [pc, #124]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005148:	617b      	str	r3, [r7, #20]
          break;
 800514a:	e02f      	b.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800514c:	4b1c      	ldr	r3, [pc, #112]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005154:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005158:	d108      	bne.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800515a:	4b19      	ldr	r3, [pc, #100]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005162:	4a19      	ldr	r2, [pc, #100]	; (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005164:	fbb2 f3f3 	udiv	r3, r2, r3
 8005168:	613b      	str	r3, [r7, #16]
 800516a:	e007      	b.n	800517c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800516c:	4b14      	ldr	r3, [pc, #80]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005174:	4a15      	ldr	r2, [pc, #84]	; (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005176:	fbb2 f3f3 	udiv	r3, r2, r3
 800517a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800517c:	4b10      	ldr	r3, [pc, #64]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800517e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005182:	099b      	lsrs	r3, r3, #6
 8005184:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	fb02 f303 	mul.w	r3, r2, r3
 800518e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005190:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005196:	0f1b      	lsrs	r3, r3, #28
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a2:	617b      	str	r3, [r7, #20]
          break;
 80051a4:	e002      	b.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	617b      	str	r3, [r7, #20]
          break;
 80051aa:	bf00      	nop
        }
      }
      break;
 80051ac:	e000      	b.n	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 80051ae:	bf00      	nop
    }
  }
  return frequency;
 80051b0:	697b      	ldr	r3, [r7, #20]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	371c      	adds	r7, #28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40023800 	.word	0x40023800
 80051c4:	00bb8000 	.word	0x00bb8000
 80051c8:	007a1200 	.word	0x007a1200
 80051cc:	00f42400 	.word	0x00f42400

080051d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e07b      	b.n	80052da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d108      	bne.n	80051fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051f2:	d009      	beq.n	8005208 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	61da      	str	r2, [r3, #28]
 80051fa:	e005      	b.n	8005208 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d106      	bne.n	8005228 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7fb fdb4 	bl	8000d90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800523e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005250:	431a      	orrs	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800525a:	431a      	orrs	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	431a      	orrs	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	431a      	orrs	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005278:	431a      	orrs	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528c:	ea42 0103 	orr.w	r1, r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005294:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	430a      	orrs	r2, r1
 800529e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	0c1b      	lsrs	r3, r3, #16
 80052a6:	f003 0104 	and.w	r1, r3, #4
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	f003 0210 	and.w	r2, r3, #16
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69da      	ldr	r2, [r3, #28]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b082      	sub	sp, #8
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e041      	b.n	8005378 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d106      	bne.n	800530e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7fb fd89 	bl	8000e20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2202      	movs	r2, #2
 8005312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	3304      	adds	r3, #4
 800531e:	4619      	mov	r1, r3
 8005320:	4610      	mov	r0, r2
 8005322:	f000 fad9 	bl	80058d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e041      	b.n	8005416 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d106      	bne.n	80053ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f839 	bl	800541e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3304      	adds	r3, #4
 80053bc:	4619      	mov	r1, r3
 80053be:	4610      	mov	r0, r2
 80053c0:	f000 fa8a 	bl	80058d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
	...

08005434 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d109      	bne.n	8005458 <HAL_TIM_PWM_Start+0x24>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b01      	cmp	r3, #1
 800544e:	bf14      	ite	ne
 8005450:	2301      	movne	r3, #1
 8005452:	2300      	moveq	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	e022      	b.n	800549e <HAL_TIM_PWM_Start+0x6a>
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2b04      	cmp	r3, #4
 800545c:	d109      	bne.n	8005472 <HAL_TIM_PWM_Start+0x3e>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b01      	cmp	r3, #1
 8005468:	bf14      	ite	ne
 800546a:	2301      	movne	r3, #1
 800546c:	2300      	moveq	r3, #0
 800546e:	b2db      	uxtb	r3, r3
 8005470:	e015      	b.n	800549e <HAL_TIM_PWM_Start+0x6a>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b08      	cmp	r3, #8
 8005476:	d109      	bne.n	800548c <HAL_TIM_PWM_Start+0x58>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b01      	cmp	r3, #1
 8005482:	bf14      	ite	ne
 8005484:	2301      	movne	r3, #1
 8005486:	2300      	moveq	r3, #0
 8005488:	b2db      	uxtb	r3, r3
 800548a:	e008      	b.n	800549e <HAL_TIM_PWM_Start+0x6a>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b01      	cmp	r3, #1
 8005496:	bf14      	ite	ne
 8005498:	2301      	movne	r3, #1
 800549a:	2300      	moveq	r3, #0
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e07c      	b.n	80055a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d104      	bne.n	80054b6 <HAL_TIM_PWM_Start+0x82>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054b4:	e013      	b.n	80054de <HAL_TIM_PWM_Start+0xaa>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	d104      	bne.n	80054c6 <HAL_TIM_PWM_Start+0x92>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054c4:	e00b      	b.n	80054de <HAL_TIM_PWM_Start+0xaa>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	d104      	bne.n	80054d6 <HAL_TIM_PWM_Start+0xa2>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054d4:	e003      	b.n	80054de <HAL_TIM_PWM_Start+0xaa>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2202      	movs	r2, #2
 80054da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2201      	movs	r2, #1
 80054e4:	6839      	ldr	r1, [r7, #0]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fcec 	bl	8005ec4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a2d      	ldr	r2, [pc, #180]	; (80055a8 <HAL_TIM_PWM_Start+0x174>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d004      	beq.n	8005500 <HAL_TIM_PWM_Start+0xcc>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a2c      	ldr	r2, [pc, #176]	; (80055ac <HAL_TIM_PWM_Start+0x178>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d101      	bne.n	8005504 <HAL_TIM_PWM_Start+0xd0>
 8005500:	2301      	movs	r3, #1
 8005502:	e000      	b.n	8005506 <HAL_TIM_PWM_Start+0xd2>
 8005504:	2300      	movs	r3, #0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d007      	beq.n	800551a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005518:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a22      	ldr	r2, [pc, #136]	; (80055a8 <HAL_TIM_PWM_Start+0x174>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d022      	beq.n	800556a <HAL_TIM_PWM_Start+0x136>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552c:	d01d      	beq.n	800556a <HAL_TIM_PWM_Start+0x136>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a1f      	ldr	r2, [pc, #124]	; (80055b0 <HAL_TIM_PWM_Start+0x17c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d018      	beq.n	800556a <HAL_TIM_PWM_Start+0x136>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a1d      	ldr	r2, [pc, #116]	; (80055b4 <HAL_TIM_PWM_Start+0x180>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d013      	beq.n	800556a <HAL_TIM_PWM_Start+0x136>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a1c      	ldr	r2, [pc, #112]	; (80055b8 <HAL_TIM_PWM_Start+0x184>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d00e      	beq.n	800556a <HAL_TIM_PWM_Start+0x136>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a16      	ldr	r2, [pc, #88]	; (80055ac <HAL_TIM_PWM_Start+0x178>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d009      	beq.n	800556a <HAL_TIM_PWM_Start+0x136>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a18      	ldr	r2, [pc, #96]	; (80055bc <HAL_TIM_PWM_Start+0x188>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d004      	beq.n	800556a <HAL_TIM_PWM_Start+0x136>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a16      	ldr	r2, [pc, #88]	; (80055c0 <HAL_TIM_PWM_Start+0x18c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d111      	bne.n	800558e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 0307 	and.w	r3, r3, #7
 8005574:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2b06      	cmp	r3, #6
 800557a:	d010      	beq.n	800559e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0201 	orr.w	r2, r2, #1
 800558a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800558c:	e007      	b.n	800559e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f042 0201 	orr.w	r2, r2, #1
 800559c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	40010000 	.word	0x40010000
 80055ac:	40010400 	.word	0x40010400
 80055b0:	40000400 	.word	0x40000400
 80055b4:	40000800 	.word	0x40000800
 80055b8:	40000c00 	.word	0x40000c00
 80055bc:	40014000 	.word	0x40014000
 80055c0:	40001800 	.word	0x40001800

080055c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055d0:	2300      	movs	r3, #0
 80055d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d101      	bne.n	80055e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055de:	2302      	movs	r3, #2
 80055e0:	e0ae      	b.n	8005740 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b0c      	cmp	r3, #12
 80055ee:	f200 809f 	bhi.w	8005730 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80055f2:	a201      	add	r2, pc, #4	; (adr r2, 80055f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f8:	0800562d 	.word	0x0800562d
 80055fc:	08005731 	.word	0x08005731
 8005600:	08005731 	.word	0x08005731
 8005604:	08005731 	.word	0x08005731
 8005608:	0800566d 	.word	0x0800566d
 800560c:	08005731 	.word	0x08005731
 8005610:	08005731 	.word	0x08005731
 8005614:	08005731 	.word	0x08005731
 8005618:	080056af 	.word	0x080056af
 800561c:	08005731 	.word	0x08005731
 8005620:	08005731 	.word	0x08005731
 8005624:	08005731 	.word	0x08005731
 8005628:	080056ef 	.word	0x080056ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68b9      	ldr	r1, [r7, #8]
 8005632:	4618      	mov	r0, r3
 8005634:	f000 f9fc 	bl	8005a30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699a      	ldr	r2, [r3, #24]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0208 	orr.w	r2, r2, #8
 8005646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699a      	ldr	r2, [r3, #24]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0204 	bic.w	r2, r2, #4
 8005656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6999      	ldr	r1, [r3, #24]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	691a      	ldr	r2, [r3, #16]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	619a      	str	r2, [r3, #24]
      break;
 800566a:	e064      	b.n	8005736 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68b9      	ldr	r1, [r7, #8]
 8005672:	4618      	mov	r0, r3
 8005674:	f000 fa4c 	bl	8005b10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699a      	ldr	r2, [r3, #24]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699a      	ldr	r2, [r3, #24]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6999      	ldr	r1, [r3, #24]
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	021a      	lsls	r2, r3, #8
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	619a      	str	r2, [r3, #24]
      break;
 80056ac:	e043      	b.n	8005736 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68b9      	ldr	r1, [r7, #8]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 faa1 	bl	8005bfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	69da      	ldr	r2, [r3, #28]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f042 0208 	orr.w	r2, r2, #8
 80056c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69da      	ldr	r2, [r3, #28]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f022 0204 	bic.w	r2, r2, #4
 80056d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	69d9      	ldr	r1, [r3, #28]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	61da      	str	r2, [r3, #28]
      break;
 80056ec:	e023      	b.n	8005736 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68b9      	ldr	r1, [r7, #8]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 faf5 	bl	8005ce4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69da      	ldr	r2, [r3, #28]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69da      	ldr	r2, [r3, #28]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69d9      	ldr	r1, [r3, #28]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	021a      	lsls	r2, r3, #8
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	61da      	str	r2, [r3, #28]
      break;
 800572e:	e002      	b.n	8005736 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	75fb      	strb	r3, [r7, #23]
      break;
 8005734:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800573e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005740:	4618      	mov	r0, r3
 8005742:	3718      	adds	r7, #24
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005752:	2300      	movs	r3, #0
 8005754:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800575c:	2b01      	cmp	r3, #1
 800575e:	d101      	bne.n	8005764 <HAL_TIM_ConfigClockSource+0x1c>
 8005760:	2302      	movs	r3, #2
 8005762:	e0b4      	b.n	80058ce <HAL_TIM_ConfigClockSource+0x186>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005782:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800578a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800579c:	d03e      	beq.n	800581c <HAL_TIM_ConfigClockSource+0xd4>
 800579e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057a2:	f200 8087 	bhi.w	80058b4 <HAL_TIM_ConfigClockSource+0x16c>
 80057a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057aa:	f000 8086 	beq.w	80058ba <HAL_TIM_ConfigClockSource+0x172>
 80057ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b2:	d87f      	bhi.n	80058b4 <HAL_TIM_ConfigClockSource+0x16c>
 80057b4:	2b70      	cmp	r3, #112	; 0x70
 80057b6:	d01a      	beq.n	80057ee <HAL_TIM_ConfigClockSource+0xa6>
 80057b8:	2b70      	cmp	r3, #112	; 0x70
 80057ba:	d87b      	bhi.n	80058b4 <HAL_TIM_ConfigClockSource+0x16c>
 80057bc:	2b60      	cmp	r3, #96	; 0x60
 80057be:	d050      	beq.n	8005862 <HAL_TIM_ConfigClockSource+0x11a>
 80057c0:	2b60      	cmp	r3, #96	; 0x60
 80057c2:	d877      	bhi.n	80058b4 <HAL_TIM_ConfigClockSource+0x16c>
 80057c4:	2b50      	cmp	r3, #80	; 0x50
 80057c6:	d03c      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0xfa>
 80057c8:	2b50      	cmp	r3, #80	; 0x50
 80057ca:	d873      	bhi.n	80058b4 <HAL_TIM_ConfigClockSource+0x16c>
 80057cc:	2b40      	cmp	r3, #64	; 0x40
 80057ce:	d058      	beq.n	8005882 <HAL_TIM_ConfigClockSource+0x13a>
 80057d0:	2b40      	cmp	r3, #64	; 0x40
 80057d2:	d86f      	bhi.n	80058b4 <HAL_TIM_ConfigClockSource+0x16c>
 80057d4:	2b30      	cmp	r3, #48	; 0x30
 80057d6:	d064      	beq.n	80058a2 <HAL_TIM_ConfigClockSource+0x15a>
 80057d8:	2b30      	cmp	r3, #48	; 0x30
 80057da:	d86b      	bhi.n	80058b4 <HAL_TIM_ConfigClockSource+0x16c>
 80057dc:	2b20      	cmp	r3, #32
 80057de:	d060      	beq.n	80058a2 <HAL_TIM_ConfigClockSource+0x15a>
 80057e0:	2b20      	cmp	r3, #32
 80057e2:	d867      	bhi.n	80058b4 <HAL_TIM_ConfigClockSource+0x16c>
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d05c      	beq.n	80058a2 <HAL_TIM_ConfigClockSource+0x15a>
 80057e8:	2b10      	cmp	r3, #16
 80057ea:	d05a      	beq.n	80058a2 <HAL_TIM_ConfigClockSource+0x15a>
 80057ec:	e062      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057fe:	f000 fb41 	bl	8005e84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005810:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	609a      	str	r2, [r3, #8]
      break;
 800581a:	e04f      	b.n	80058bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800582c:	f000 fb2a 	bl	8005e84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689a      	ldr	r2, [r3, #8]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800583e:	609a      	str	r2, [r3, #8]
      break;
 8005840:	e03c      	b.n	80058bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800584e:	461a      	mov	r2, r3
 8005850:	f000 fa9e 	bl	8005d90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2150      	movs	r1, #80	; 0x50
 800585a:	4618      	mov	r0, r3
 800585c:	f000 faf7 	bl	8005e4e <TIM_ITRx_SetConfig>
      break;
 8005860:	e02c      	b.n	80058bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800586e:	461a      	mov	r2, r3
 8005870:	f000 fabd 	bl	8005dee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2160      	movs	r1, #96	; 0x60
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fae7 	bl	8005e4e <TIM_ITRx_SetConfig>
      break;
 8005880:	e01c      	b.n	80058bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800588e:	461a      	mov	r2, r3
 8005890:	f000 fa7e 	bl	8005d90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2140      	movs	r1, #64	; 0x40
 800589a:	4618      	mov	r0, r3
 800589c:	f000 fad7 	bl	8005e4e <TIM_ITRx_SetConfig>
      break;
 80058a0:	e00c      	b.n	80058bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4619      	mov	r1, r3
 80058ac:	4610      	mov	r0, r2
 80058ae:	f000 face 	bl	8005e4e <TIM_ITRx_SetConfig>
      break;
 80058b2:	e003      	b.n	80058bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	73fb      	strb	r3, [r7, #15]
      break;
 80058b8:	e000      	b.n	80058bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
	...

080058d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a46      	ldr	r2, [pc, #280]	; (8005a04 <TIM_Base_SetConfig+0x12c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d013      	beq.n	8005918 <TIM_Base_SetConfig+0x40>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f6:	d00f      	beq.n	8005918 <TIM_Base_SetConfig+0x40>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a43      	ldr	r2, [pc, #268]	; (8005a08 <TIM_Base_SetConfig+0x130>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d00b      	beq.n	8005918 <TIM_Base_SetConfig+0x40>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a42      	ldr	r2, [pc, #264]	; (8005a0c <TIM_Base_SetConfig+0x134>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d007      	beq.n	8005918 <TIM_Base_SetConfig+0x40>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a41      	ldr	r2, [pc, #260]	; (8005a10 <TIM_Base_SetConfig+0x138>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d003      	beq.n	8005918 <TIM_Base_SetConfig+0x40>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a40      	ldr	r2, [pc, #256]	; (8005a14 <TIM_Base_SetConfig+0x13c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d108      	bne.n	800592a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	4313      	orrs	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a35      	ldr	r2, [pc, #212]	; (8005a04 <TIM_Base_SetConfig+0x12c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d02b      	beq.n	800598a <TIM_Base_SetConfig+0xb2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005938:	d027      	beq.n	800598a <TIM_Base_SetConfig+0xb2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a32      	ldr	r2, [pc, #200]	; (8005a08 <TIM_Base_SetConfig+0x130>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d023      	beq.n	800598a <TIM_Base_SetConfig+0xb2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a31      	ldr	r2, [pc, #196]	; (8005a0c <TIM_Base_SetConfig+0x134>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d01f      	beq.n	800598a <TIM_Base_SetConfig+0xb2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a30      	ldr	r2, [pc, #192]	; (8005a10 <TIM_Base_SetConfig+0x138>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d01b      	beq.n	800598a <TIM_Base_SetConfig+0xb2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a2f      	ldr	r2, [pc, #188]	; (8005a14 <TIM_Base_SetConfig+0x13c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d017      	beq.n	800598a <TIM_Base_SetConfig+0xb2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a2e      	ldr	r2, [pc, #184]	; (8005a18 <TIM_Base_SetConfig+0x140>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d013      	beq.n	800598a <TIM_Base_SetConfig+0xb2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a2d      	ldr	r2, [pc, #180]	; (8005a1c <TIM_Base_SetConfig+0x144>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d00f      	beq.n	800598a <TIM_Base_SetConfig+0xb2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a2c      	ldr	r2, [pc, #176]	; (8005a20 <TIM_Base_SetConfig+0x148>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d00b      	beq.n	800598a <TIM_Base_SetConfig+0xb2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a2b      	ldr	r2, [pc, #172]	; (8005a24 <TIM_Base_SetConfig+0x14c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d007      	beq.n	800598a <TIM_Base_SetConfig+0xb2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a2a      	ldr	r2, [pc, #168]	; (8005a28 <TIM_Base_SetConfig+0x150>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d003      	beq.n	800598a <TIM_Base_SetConfig+0xb2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a29      	ldr	r2, [pc, #164]	; (8005a2c <TIM_Base_SetConfig+0x154>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d108      	bne.n	800599c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	4313      	orrs	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a10      	ldr	r2, [pc, #64]	; (8005a04 <TIM_Base_SetConfig+0x12c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d003      	beq.n	80059d0 <TIM_Base_SetConfig+0xf8>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a12      	ldr	r2, [pc, #72]	; (8005a14 <TIM_Base_SetConfig+0x13c>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d103      	bne.n	80059d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	691a      	ldr	r2, [r3, #16]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d105      	bne.n	80059f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f023 0201 	bic.w	r2, r3, #1
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	611a      	str	r2, [r3, #16]
  }
}
 80059f6:	bf00      	nop
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	40010000 	.word	0x40010000
 8005a08:	40000400 	.word	0x40000400
 8005a0c:	40000800 	.word	0x40000800
 8005a10:	40000c00 	.word	0x40000c00
 8005a14:	40010400 	.word	0x40010400
 8005a18:	40014000 	.word	0x40014000
 8005a1c:	40014400 	.word	0x40014400
 8005a20:	40014800 	.word	0x40014800
 8005a24:	40001800 	.word	0x40001800
 8005a28:	40001c00 	.word	0x40001c00
 8005a2c:	40002000 	.word	0x40002000

08005a30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b087      	sub	sp, #28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	f023 0201 	bic.w	r2, r3, #1
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0303 	bic.w	r3, r3, #3
 8005a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f023 0302 	bic.w	r3, r3, #2
 8005a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a20      	ldr	r2, [pc, #128]	; (8005b08 <TIM_OC1_SetConfig+0xd8>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d003      	beq.n	8005a94 <TIM_OC1_SetConfig+0x64>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a1f      	ldr	r2, [pc, #124]	; (8005b0c <TIM_OC1_SetConfig+0xdc>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d10c      	bne.n	8005aae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f023 0308 	bic.w	r3, r3, #8
 8005a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f023 0304 	bic.w	r3, r3, #4
 8005aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a15      	ldr	r2, [pc, #84]	; (8005b08 <TIM_OC1_SetConfig+0xd8>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d003      	beq.n	8005abe <TIM_OC1_SetConfig+0x8e>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a14      	ldr	r2, [pc, #80]	; (8005b0c <TIM_OC1_SetConfig+0xdc>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d111      	bne.n	8005ae2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	621a      	str	r2, [r3, #32]
}
 8005afc:	bf00      	nop
 8005afe:	371c      	adds	r7, #28
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	40010000 	.word	0x40010000
 8005b0c:	40010400 	.word	0x40010400

08005b10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	f023 0210 	bic.w	r2, r3, #16
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	021b      	lsls	r3, r3, #8
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	f023 0320 	bic.w	r3, r3, #32
 8005b5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	011b      	lsls	r3, r3, #4
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a22      	ldr	r2, [pc, #136]	; (8005bf4 <TIM_OC2_SetConfig+0xe4>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d003      	beq.n	8005b78 <TIM_OC2_SetConfig+0x68>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a21      	ldr	r2, [pc, #132]	; (8005bf8 <TIM_OC2_SetConfig+0xe8>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d10d      	bne.n	8005b94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	011b      	lsls	r3, r3, #4
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a17      	ldr	r2, [pc, #92]	; (8005bf4 <TIM_OC2_SetConfig+0xe4>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d003      	beq.n	8005ba4 <TIM_OC2_SetConfig+0x94>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a16      	ldr	r2, [pc, #88]	; (8005bf8 <TIM_OC2_SetConfig+0xe8>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d113      	bne.n	8005bcc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005baa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	621a      	str	r2, [r3, #32]
}
 8005be6:	bf00      	nop
 8005be8:	371c      	adds	r7, #28
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	40010000 	.word	0x40010000
 8005bf8:	40010400 	.word	0x40010400

08005bfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 0303 	bic.w	r3, r3, #3
 8005c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	021b      	lsls	r3, r3, #8
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a21      	ldr	r2, [pc, #132]	; (8005cdc <TIM_OC3_SetConfig+0xe0>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d003      	beq.n	8005c62 <TIM_OC3_SetConfig+0x66>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a20      	ldr	r2, [pc, #128]	; (8005ce0 <TIM_OC3_SetConfig+0xe4>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d10d      	bne.n	8005c7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	021b      	lsls	r3, r3, #8
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a16      	ldr	r2, [pc, #88]	; (8005cdc <TIM_OC3_SetConfig+0xe0>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d003      	beq.n	8005c8e <TIM_OC3_SetConfig+0x92>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a15      	ldr	r2, [pc, #84]	; (8005ce0 <TIM_OC3_SetConfig+0xe4>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d113      	bne.n	8005cb6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	011b      	lsls	r3, r3, #4
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	011b      	lsls	r3, r3, #4
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	621a      	str	r2, [r3, #32]
}
 8005cd0:	bf00      	nop
 8005cd2:	371c      	adds	r7, #28
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	40010000 	.word	0x40010000
 8005ce0:	40010400 	.word	0x40010400

08005ce4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	021b      	lsls	r3, r3, #8
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	031b      	lsls	r3, r3, #12
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a12      	ldr	r2, [pc, #72]	; (8005d88 <TIM_OC4_SetConfig+0xa4>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d003      	beq.n	8005d4c <TIM_OC4_SetConfig+0x68>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a11      	ldr	r2, [pc, #68]	; (8005d8c <TIM_OC4_SetConfig+0xa8>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d109      	bne.n	8005d60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	019b      	lsls	r3, r3, #6
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	621a      	str	r2, [r3, #32]
}
 8005d7a:	bf00      	nop
 8005d7c:	371c      	adds	r7, #28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	40010000 	.word	0x40010000
 8005d8c:	40010400 	.word	0x40010400

08005d90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b087      	sub	sp, #28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	f023 0201 	bic.w	r2, r3, #1
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f023 030a 	bic.w	r3, r3, #10
 8005dcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	621a      	str	r2, [r3, #32]
}
 8005de2:	bf00      	nop
 8005de4:	371c      	adds	r7, #28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b087      	sub	sp, #28
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	60f8      	str	r0, [r7, #12]
 8005df6:	60b9      	str	r1, [r7, #8]
 8005df8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	f023 0210 	bic.w	r2, r3, #16
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	031b      	lsls	r3, r3, #12
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	011b      	lsls	r3, r3, #4
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	621a      	str	r2, [r3, #32]
}
 8005e42:	bf00      	nop
 8005e44:	371c      	adds	r7, #28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b085      	sub	sp, #20
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	f043 0307 	orr.w	r3, r3, #7
 8005e70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	609a      	str	r2, [r3, #8]
}
 8005e78:	bf00      	nop
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	021a      	lsls	r2, r3, #8
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	609a      	str	r2, [r3, #8]
}
 8005eb8:	bf00      	nop
 8005eba:	371c      	adds	r7, #28
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f003 031f 	and.w	r3, r3, #31
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8005edc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a1a      	ldr	r2, [r3, #32]
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	43db      	mvns	r3, r3
 8005ee6:	401a      	ands	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6a1a      	ldr	r2, [r3, #32]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	f003 031f 	and.w	r3, r3, #31
 8005ef6:	6879      	ldr	r1, [r7, #4]
 8005ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8005efc:	431a      	orrs	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	621a      	str	r2, [r3, #32]
}
 8005f02:	bf00      	nop
 8005f04:	371c      	adds	r7, #28
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
	...

08005f10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d101      	bne.n	8005f28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f24:	2302      	movs	r3, #2
 8005f26:	e05a      	b.n	8005fde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a21      	ldr	r2, [pc, #132]	; (8005fec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d022      	beq.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f74:	d01d      	beq.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a1d      	ldr	r2, [pc, #116]	; (8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d018      	beq.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a1b      	ldr	r2, [pc, #108]	; (8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d013      	beq.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a1a      	ldr	r2, [pc, #104]	; (8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d00e      	beq.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a18      	ldr	r2, [pc, #96]	; (8005ffc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d009      	beq.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a17      	ldr	r2, [pc, #92]	; (8006000 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d004      	beq.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a15      	ldr	r2, [pc, #84]	; (8006004 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d10c      	bne.n	8005fcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	40010000 	.word	0x40010000
 8005ff0:	40000400 	.word	0x40000400
 8005ff4:	40000800 	.word	0x40000800
 8005ff8:	40000c00 	.word	0x40000c00
 8005ffc:	40010400 	.word	0x40010400
 8006000:	40014000 	.word	0x40014000
 8006004:	40001800 	.word	0x40001800

08006008 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800601c:	2b01      	cmp	r3, #1
 800601e:	d101      	bne.n	8006024 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006020:	2302      	movs	r3, #2
 8006022:	e03d      	b.n	80060a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	4313      	orrs	r3, r2
 8006046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	4313      	orrs	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4313      	orrs	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	4313      	orrs	r3, r2
 800607e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e042      	b.n	8006144 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d106      	bne.n	80060d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7fa ff00 	bl	8000ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2224      	movs	r2, #36	; 0x24
 80060dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68da      	ldr	r2, [r3, #12]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fa09 	bl	8006508 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	691a      	ldr	r2, [r3, #16]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006104:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	695a      	ldr	r2, [r3, #20]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006114:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68da      	ldr	r2, [r3, #12]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006124:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2220      	movs	r2, #32
 8006130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2220      	movs	r2, #32
 8006138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b08a      	sub	sp, #40	; 0x28
 8006150:	af02      	add	r7, sp, #8
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	603b      	str	r3, [r7, #0]
 8006158:	4613      	mov	r3, r2
 800615a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800615c:	2300      	movs	r3, #0
 800615e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b20      	cmp	r3, #32
 800616a:	d175      	bne.n	8006258 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d002      	beq.n	8006178 <HAL_UART_Transmit+0x2c>
 8006172:	88fb      	ldrh	r3, [r7, #6]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e06e      	b.n	800625a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2221      	movs	r2, #33	; 0x21
 8006186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800618a:	f7fb f851 	bl	8001230 <HAL_GetTick>
 800618e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	88fa      	ldrh	r2, [r7, #6]
 8006194:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	88fa      	ldrh	r2, [r7, #6]
 800619a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061a4:	d108      	bne.n	80061b8 <HAL_UART_Transmit+0x6c>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d104      	bne.n	80061b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80061ae:	2300      	movs	r3, #0
 80061b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	61bb      	str	r3, [r7, #24]
 80061b6:	e003      	b.n	80061c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061bc:	2300      	movs	r3, #0
 80061be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061c0:	e02e      	b.n	8006220 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	9300      	str	r3, [sp, #0]
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2200      	movs	r2, #0
 80061ca:	2180      	movs	r1, #128	; 0x80
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 f8df 	bl	8006390 <UART_WaitOnFlagUntilTimeout>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d005      	beq.n	80061e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2220      	movs	r2, #32
 80061dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e03a      	b.n	800625a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10b      	bne.n	8006202 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	881b      	ldrh	r3, [r3, #0]
 80061ee:	461a      	mov	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	3302      	adds	r3, #2
 80061fe:	61bb      	str	r3, [r7, #24]
 8006200:	e007      	b.n	8006212 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	781a      	ldrb	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	3301      	adds	r3, #1
 8006210:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006216:	b29b      	uxth	r3, r3
 8006218:	3b01      	subs	r3, #1
 800621a:	b29a      	uxth	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006224:	b29b      	uxth	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1cb      	bne.n	80061c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	2200      	movs	r2, #0
 8006232:	2140      	movs	r1, #64	; 0x40
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f000 f8ab 	bl	8006390 <UART_WaitOnFlagUntilTimeout>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d005      	beq.n	800624c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2220      	movs	r2, #32
 8006244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e006      	b.n	800625a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2220      	movs	r2, #32
 8006250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006254:	2300      	movs	r3, #0
 8006256:	e000      	b.n	800625a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006258:	2302      	movs	r3, #2
  }
}
 800625a:	4618      	mov	r0, r3
 800625c:	3720      	adds	r7, #32
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b08a      	sub	sp, #40	; 0x28
 8006266:	af02      	add	r7, sp, #8
 8006268:	60f8      	str	r0, [r7, #12]
 800626a:	60b9      	str	r1, [r7, #8]
 800626c:	603b      	str	r3, [r7, #0]
 800626e:	4613      	mov	r3, r2
 8006270:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006272:	2300      	movs	r3, #0
 8006274:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b20      	cmp	r3, #32
 8006280:	f040 8081 	bne.w	8006386 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <HAL_UART_Receive+0x2e>
 800628a:	88fb      	ldrh	r3, [r7, #6]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e079      	b.n	8006388 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2222      	movs	r2, #34	; 0x22
 800629e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062a8:	f7fa ffc2 	bl	8001230 <HAL_GetTick>
 80062ac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	88fa      	ldrh	r2, [r7, #6]
 80062b2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	88fa      	ldrh	r2, [r7, #6]
 80062b8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062c2:	d108      	bne.n	80062d6 <HAL_UART_Receive+0x74>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d104      	bne.n	80062d6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80062cc:	2300      	movs	r3, #0
 80062ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	61bb      	str	r3, [r7, #24]
 80062d4:	e003      	b.n	80062de <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062da:	2300      	movs	r3, #0
 80062dc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80062de:	e047      	b.n	8006370 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	2200      	movs	r2, #0
 80062e8:	2120      	movs	r1, #32
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f000 f850 	bl	8006390 <UART_WaitOnFlagUntilTimeout>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d005      	beq.n	8006302 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2220      	movs	r2, #32
 80062fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e042      	b.n	8006388 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10c      	bne.n	8006322 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	b29b      	uxth	r3, r3
 8006310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006314:	b29a      	uxth	r2, r3
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	3302      	adds	r3, #2
 800631e:	61bb      	str	r3, [r7, #24]
 8006320:	e01f      	b.n	8006362 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800632a:	d007      	beq.n	800633c <HAL_UART_Receive+0xda>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10a      	bne.n	800634a <HAL_UART_Receive+0xe8>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d106      	bne.n	800634a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	b2da      	uxtb	r2, r3
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	701a      	strb	r2, [r3, #0]
 8006348:	e008      	b.n	800635c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	b2db      	uxtb	r3, r3
 8006352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006356:	b2da      	uxtb	r2, r3
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	3301      	adds	r3, #1
 8006360:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006366:	b29b      	uxth	r3, r3
 8006368:	3b01      	subs	r3, #1
 800636a:	b29a      	uxth	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006374:	b29b      	uxth	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1b2      	bne.n	80062e0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2220      	movs	r2, #32
 800637e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8006382:	2300      	movs	r3, #0
 8006384:	e000      	b.n	8006388 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006386:	2302      	movs	r3, #2
  }
}
 8006388:	4618      	mov	r0, r3
 800638a:	3720      	adds	r7, #32
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	603b      	str	r3, [r7, #0]
 800639c:	4613      	mov	r3, r2
 800639e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063a0:	e03b      	b.n	800641a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063a2:	6a3b      	ldr	r3, [r7, #32]
 80063a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a8:	d037      	beq.n	800641a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063aa:	f7fa ff41 	bl	8001230 <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	6a3a      	ldr	r2, [r7, #32]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d302      	bcc.n	80063c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80063ba:	6a3b      	ldr	r3, [r7, #32]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d101      	bne.n	80063c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e03a      	b.n	800643a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	f003 0304 	and.w	r3, r3, #4
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d023      	beq.n	800641a <UART_WaitOnFlagUntilTimeout+0x8a>
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2b80      	cmp	r3, #128	; 0x80
 80063d6:	d020      	beq.n	800641a <UART_WaitOnFlagUntilTimeout+0x8a>
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2b40      	cmp	r3, #64	; 0x40
 80063dc:	d01d      	beq.n	800641a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0308 	and.w	r3, r3, #8
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	d116      	bne.n	800641a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80063ec:	2300      	movs	r3, #0
 80063ee:	617b      	str	r3, [r7, #20]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	617b      	str	r3, [r7, #20]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 f81d 	bl	8006442 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2208      	movs	r2, #8
 800640c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e00f      	b.n	800643a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	4013      	ands	r3, r2
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	429a      	cmp	r2, r3
 8006428:	bf0c      	ite	eq
 800642a:	2301      	moveq	r3, #1
 800642c:	2300      	movne	r3, #0
 800642e:	b2db      	uxtb	r3, r3
 8006430:	461a      	mov	r2, r3
 8006432:	79fb      	ldrb	r3, [r7, #7]
 8006434:	429a      	cmp	r2, r3
 8006436:	d0b4      	beq.n	80063a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3718      	adds	r7, #24
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006442:	b480      	push	{r7}
 8006444:	b095      	sub	sp, #84	; 0x54
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	330c      	adds	r3, #12
 8006450:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006454:	e853 3f00 	ldrex	r3, [r3]
 8006458:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800645a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006460:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	330c      	adds	r3, #12
 8006468:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800646a:	643a      	str	r2, [r7, #64]	; 0x40
 800646c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006470:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006472:	e841 2300 	strex	r3, r2, [r1]
 8006476:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1e5      	bne.n	800644a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	3314      	adds	r3, #20
 8006484:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006486:	6a3b      	ldr	r3, [r7, #32]
 8006488:	e853 3f00 	ldrex	r3, [r3]
 800648c:	61fb      	str	r3, [r7, #28]
   return(result);
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	f023 0301 	bic.w	r3, r3, #1
 8006494:	64bb      	str	r3, [r7, #72]	; 0x48
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3314      	adds	r3, #20
 800649c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800649e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064a6:	e841 2300 	strex	r3, r2, [r1]
 80064aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1e5      	bne.n	800647e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d119      	bne.n	80064ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	330c      	adds	r3, #12
 80064c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	e853 3f00 	ldrex	r3, [r3]
 80064c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	f023 0310 	bic.w	r3, r3, #16
 80064d0:	647b      	str	r3, [r7, #68]	; 0x44
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	330c      	adds	r3, #12
 80064d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064da:	61ba      	str	r2, [r7, #24]
 80064dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064de:	6979      	ldr	r1, [r7, #20]
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	e841 2300 	strex	r3, r2, [r1]
 80064e6:	613b      	str	r3, [r7, #16]
   return(result);
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1e5      	bne.n	80064ba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2220      	movs	r2, #32
 80064f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	631a      	str	r2, [r3, #48]	; 0x30
}
 80064fc:	bf00      	nop
 80064fe:	3754      	adds	r7, #84	; 0x54
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800650c:	b0c0      	sub	sp, #256	; 0x100
 800650e:	af00      	add	r7, sp, #0
 8006510:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006524:	68d9      	ldr	r1, [r3, #12]
 8006526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	ea40 0301 	orr.w	r3, r0, r1
 8006530:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	431a      	orrs	r2, r3
 8006540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	431a      	orrs	r2, r3
 8006548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	4313      	orrs	r3, r2
 8006550:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006560:	f021 010c 	bic.w	r1, r1, #12
 8006564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800656e:	430b      	orrs	r3, r1
 8006570:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800657e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006582:	6999      	ldr	r1, [r3, #24]
 8006584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	ea40 0301 	orr.w	r3, r0, r1
 800658e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	4b8f      	ldr	r3, [pc, #572]	; (80067d4 <UART_SetConfig+0x2cc>)
 8006598:	429a      	cmp	r2, r3
 800659a:	d005      	beq.n	80065a8 <UART_SetConfig+0xa0>
 800659c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	4b8d      	ldr	r3, [pc, #564]	; (80067d8 <UART_SetConfig+0x2d0>)
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d104      	bne.n	80065b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065a8:	f7fe fcbc 	bl	8004f24 <HAL_RCC_GetPCLK2Freq>
 80065ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80065b0:	e003      	b.n	80065ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065b2:	f7fe fca3 	bl	8004efc <HAL_RCC_GetPCLK1Freq>
 80065b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065c4:	f040 810c 	bne.w	80067e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065cc:	2200      	movs	r2, #0
 80065ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80065d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80065da:	4622      	mov	r2, r4
 80065dc:	462b      	mov	r3, r5
 80065de:	1891      	adds	r1, r2, r2
 80065e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80065e2:	415b      	adcs	r3, r3
 80065e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80065ea:	4621      	mov	r1, r4
 80065ec:	eb12 0801 	adds.w	r8, r2, r1
 80065f0:	4629      	mov	r1, r5
 80065f2:	eb43 0901 	adc.w	r9, r3, r1
 80065f6:	f04f 0200 	mov.w	r2, #0
 80065fa:	f04f 0300 	mov.w	r3, #0
 80065fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006602:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006606:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800660a:	4690      	mov	r8, r2
 800660c:	4699      	mov	r9, r3
 800660e:	4623      	mov	r3, r4
 8006610:	eb18 0303 	adds.w	r3, r8, r3
 8006614:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006618:	462b      	mov	r3, r5
 800661a:	eb49 0303 	adc.w	r3, r9, r3
 800661e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800662e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006632:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006636:	460b      	mov	r3, r1
 8006638:	18db      	adds	r3, r3, r3
 800663a:	653b      	str	r3, [r7, #80]	; 0x50
 800663c:	4613      	mov	r3, r2
 800663e:	eb42 0303 	adc.w	r3, r2, r3
 8006642:	657b      	str	r3, [r7, #84]	; 0x54
 8006644:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006648:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800664c:	f7f9 fdbc 	bl	80001c8 <__aeabi_uldivmod>
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	4b61      	ldr	r3, [pc, #388]	; (80067dc <UART_SetConfig+0x2d4>)
 8006656:	fba3 2302 	umull	r2, r3, r3, r2
 800665a:	095b      	lsrs	r3, r3, #5
 800665c:	011c      	lsls	r4, r3, #4
 800665e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006662:	2200      	movs	r2, #0
 8006664:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006668:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800666c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006670:	4642      	mov	r2, r8
 8006672:	464b      	mov	r3, r9
 8006674:	1891      	adds	r1, r2, r2
 8006676:	64b9      	str	r1, [r7, #72]	; 0x48
 8006678:	415b      	adcs	r3, r3
 800667a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800667c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006680:	4641      	mov	r1, r8
 8006682:	eb12 0a01 	adds.w	sl, r2, r1
 8006686:	4649      	mov	r1, r9
 8006688:	eb43 0b01 	adc.w	fp, r3, r1
 800668c:	f04f 0200 	mov.w	r2, #0
 8006690:	f04f 0300 	mov.w	r3, #0
 8006694:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006698:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800669c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066a0:	4692      	mov	sl, r2
 80066a2:	469b      	mov	fp, r3
 80066a4:	4643      	mov	r3, r8
 80066a6:	eb1a 0303 	adds.w	r3, sl, r3
 80066aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066ae:	464b      	mov	r3, r9
 80066b0:	eb4b 0303 	adc.w	r3, fp, r3
 80066b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80066b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80066c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80066cc:	460b      	mov	r3, r1
 80066ce:	18db      	adds	r3, r3, r3
 80066d0:	643b      	str	r3, [r7, #64]	; 0x40
 80066d2:	4613      	mov	r3, r2
 80066d4:	eb42 0303 	adc.w	r3, r2, r3
 80066d8:	647b      	str	r3, [r7, #68]	; 0x44
 80066da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80066de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80066e2:	f7f9 fd71 	bl	80001c8 <__aeabi_uldivmod>
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	4611      	mov	r1, r2
 80066ec:	4b3b      	ldr	r3, [pc, #236]	; (80067dc <UART_SetConfig+0x2d4>)
 80066ee:	fba3 2301 	umull	r2, r3, r3, r1
 80066f2:	095b      	lsrs	r3, r3, #5
 80066f4:	2264      	movs	r2, #100	; 0x64
 80066f6:	fb02 f303 	mul.w	r3, r2, r3
 80066fa:	1acb      	subs	r3, r1, r3
 80066fc:	00db      	lsls	r3, r3, #3
 80066fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006702:	4b36      	ldr	r3, [pc, #216]	; (80067dc <UART_SetConfig+0x2d4>)
 8006704:	fba3 2302 	umull	r2, r3, r3, r2
 8006708:	095b      	lsrs	r3, r3, #5
 800670a:	005b      	lsls	r3, r3, #1
 800670c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006710:	441c      	add	r4, r3
 8006712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006716:	2200      	movs	r2, #0
 8006718:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800671c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006720:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006724:	4642      	mov	r2, r8
 8006726:	464b      	mov	r3, r9
 8006728:	1891      	adds	r1, r2, r2
 800672a:	63b9      	str	r1, [r7, #56]	; 0x38
 800672c:	415b      	adcs	r3, r3
 800672e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006730:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006734:	4641      	mov	r1, r8
 8006736:	1851      	adds	r1, r2, r1
 8006738:	6339      	str	r1, [r7, #48]	; 0x30
 800673a:	4649      	mov	r1, r9
 800673c:	414b      	adcs	r3, r1
 800673e:	637b      	str	r3, [r7, #52]	; 0x34
 8006740:	f04f 0200 	mov.w	r2, #0
 8006744:	f04f 0300 	mov.w	r3, #0
 8006748:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800674c:	4659      	mov	r1, fp
 800674e:	00cb      	lsls	r3, r1, #3
 8006750:	4651      	mov	r1, sl
 8006752:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006756:	4651      	mov	r1, sl
 8006758:	00ca      	lsls	r2, r1, #3
 800675a:	4610      	mov	r0, r2
 800675c:	4619      	mov	r1, r3
 800675e:	4603      	mov	r3, r0
 8006760:	4642      	mov	r2, r8
 8006762:	189b      	adds	r3, r3, r2
 8006764:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006768:	464b      	mov	r3, r9
 800676a:	460a      	mov	r2, r1
 800676c:	eb42 0303 	adc.w	r3, r2, r3
 8006770:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006780:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006784:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006788:	460b      	mov	r3, r1
 800678a:	18db      	adds	r3, r3, r3
 800678c:	62bb      	str	r3, [r7, #40]	; 0x28
 800678e:	4613      	mov	r3, r2
 8006790:	eb42 0303 	adc.w	r3, r2, r3
 8006794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006796:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800679a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800679e:	f7f9 fd13 	bl	80001c8 <__aeabi_uldivmod>
 80067a2:	4602      	mov	r2, r0
 80067a4:	460b      	mov	r3, r1
 80067a6:	4b0d      	ldr	r3, [pc, #52]	; (80067dc <UART_SetConfig+0x2d4>)
 80067a8:	fba3 1302 	umull	r1, r3, r3, r2
 80067ac:	095b      	lsrs	r3, r3, #5
 80067ae:	2164      	movs	r1, #100	; 0x64
 80067b0:	fb01 f303 	mul.w	r3, r1, r3
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	00db      	lsls	r3, r3, #3
 80067b8:	3332      	adds	r3, #50	; 0x32
 80067ba:	4a08      	ldr	r2, [pc, #32]	; (80067dc <UART_SetConfig+0x2d4>)
 80067bc:	fba2 2303 	umull	r2, r3, r2, r3
 80067c0:	095b      	lsrs	r3, r3, #5
 80067c2:	f003 0207 	and.w	r2, r3, #7
 80067c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4422      	add	r2, r4
 80067ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067d0:	e106      	b.n	80069e0 <UART_SetConfig+0x4d8>
 80067d2:	bf00      	nop
 80067d4:	40011000 	.word	0x40011000
 80067d8:	40011400 	.word	0x40011400
 80067dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067e4:	2200      	movs	r2, #0
 80067e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80067ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80067ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80067f2:	4642      	mov	r2, r8
 80067f4:	464b      	mov	r3, r9
 80067f6:	1891      	adds	r1, r2, r2
 80067f8:	6239      	str	r1, [r7, #32]
 80067fa:	415b      	adcs	r3, r3
 80067fc:	627b      	str	r3, [r7, #36]	; 0x24
 80067fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006802:	4641      	mov	r1, r8
 8006804:	1854      	adds	r4, r2, r1
 8006806:	4649      	mov	r1, r9
 8006808:	eb43 0501 	adc.w	r5, r3, r1
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	f04f 0300 	mov.w	r3, #0
 8006814:	00eb      	lsls	r3, r5, #3
 8006816:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800681a:	00e2      	lsls	r2, r4, #3
 800681c:	4614      	mov	r4, r2
 800681e:	461d      	mov	r5, r3
 8006820:	4643      	mov	r3, r8
 8006822:	18e3      	adds	r3, r4, r3
 8006824:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006828:	464b      	mov	r3, r9
 800682a:	eb45 0303 	adc.w	r3, r5, r3
 800682e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800683e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006842:	f04f 0200 	mov.w	r2, #0
 8006846:	f04f 0300 	mov.w	r3, #0
 800684a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800684e:	4629      	mov	r1, r5
 8006850:	008b      	lsls	r3, r1, #2
 8006852:	4621      	mov	r1, r4
 8006854:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006858:	4621      	mov	r1, r4
 800685a:	008a      	lsls	r2, r1, #2
 800685c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006860:	f7f9 fcb2 	bl	80001c8 <__aeabi_uldivmod>
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	4b60      	ldr	r3, [pc, #384]	; (80069ec <UART_SetConfig+0x4e4>)
 800686a:	fba3 2302 	umull	r2, r3, r3, r2
 800686e:	095b      	lsrs	r3, r3, #5
 8006870:	011c      	lsls	r4, r3, #4
 8006872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006876:	2200      	movs	r2, #0
 8006878:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800687c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006880:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006884:	4642      	mov	r2, r8
 8006886:	464b      	mov	r3, r9
 8006888:	1891      	adds	r1, r2, r2
 800688a:	61b9      	str	r1, [r7, #24]
 800688c:	415b      	adcs	r3, r3
 800688e:	61fb      	str	r3, [r7, #28]
 8006890:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006894:	4641      	mov	r1, r8
 8006896:	1851      	adds	r1, r2, r1
 8006898:	6139      	str	r1, [r7, #16]
 800689a:	4649      	mov	r1, r9
 800689c:	414b      	adcs	r3, r1
 800689e:	617b      	str	r3, [r7, #20]
 80068a0:	f04f 0200 	mov.w	r2, #0
 80068a4:	f04f 0300 	mov.w	r3, #0
 80068a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068ac:	4659      	mov	r1, fp
 80068ae:	00cb      	lsls	r3, r1, #3
 80068b0:	4651      	mov	r1, sl
 80068b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068b6:	4651      	mov	r1, sl
 80068b8:	00ca      	lsls	r2, r1, #3
 80068ba:	4610      	mov	r0, r2
 80068bc:	4619      	mov	r1, r3
 80068be:	4603      	mov	r3, r0
 80068c0:	4642      	mov	r2, r8
 80068c2:	189b      	adds	r3, r3, r2
 80068c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068c8:	464b      	mov	r3, r9
 80068ca:	460a      	mov	r2, r1
 80068cc:	eb42 0303 	adc.w	r3, r2, r3
 80068d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80068de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80068e0:	f04f 0200 	mov.w	r2, #0
 80068e4:	f04f 0300 	mov.w	r3, #0
 80068e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80068ec:	4649      	mov	r1, r9
 80068ee:	008b      	lsls	r3, r1, #2
 80068f0:	4641      	mov	r1, r8
 80068f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068f6:	4641      	mov	r1, r8
 80068f8:	008a      	lsls	r2, r1, #2
 80068fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80068fe:	f7f9 fc63 	bl	80001c8 <__aeabi_uldivmod>
 8006902:	4602      	mov	r2, r0
 8006904:	460b      	mov	r3, r1
 8006906:	4611      	mov	r1, r2
 8006908:	4b38      	ldr	r3, [pc, #224]	; (80069ec <UART_SetConfig+0x4e4>)
 800690a:	fba3 2301 	umull	r2, r3, r3, r1
 800690e:	095b      	lsrs	r3, r3, #5
 8006910:	2264      	movs	r2, #100	; 0x64
 8006912:	fb02 f303 	mul.w	r3, r2, r3
 8006916:	1acb      	subs	r3, r1, r3
 8006918:	011b      	lsls	r3, r3, #4
 800691a:	3332      	adds	r3, #50	; 0x32
 800691c:	4a33      	ldr	r2, [pc, #204]	; (80069ec <UART_SetConfig+0x4e4>)
 800691e:	fba2 2303 	umull	r2, r3, r2, r3
 8006922:	095b      	lsrs	r3, r3, #5
 8006924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006928:	441c      	add	r4, r3
 800692a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800692e:	2200      	movs	r2, #0
 8006930:	673b      	str	r3, [r7, #112]	; 0x70
 8006932:	677a      	str	r2, [r7, #116]	; 0x74
 8006934:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006938:	4642      	mov	r2, r8
 800693a:	464b      	mov	r3, r9
 800693c:	1891      	adds	r1, r2, r2
 800693e:	60b9      	str	r1, [r7, #8]
 8006940:	415b      	adcs	r3, r3
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006948:	4641      	mov	r1, r8
 800694a:	1851      	adds	r1, r2, r1
 800694c:	6039      	str	r1, [r7, #0]
 800694e:	4649      	mov	r1, r9
 8006950:	414b      	adcs	r3, r1
 8006952:	607b      	str	r3, [r7, #4]
 8006954:	f04f 0200 	mov.w	r2, #0
 8006958:	f04f 0300 	mov.w	r3, #0
 800695c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006960:	4659      	mov	r1, fp
 8006962:	00cb      	lsls	r3, r1, #3
 8006964:	4651      	mov	r1, sl
 8006966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800696a:	4651      	mov	r1, sl
 800696c:	00ca      	lsls	r2, r1, #3
 800696e:	4610      	mov	r0, r2
 8006970:	4619      	mov	r1, r3
 8006972:	4603      	mov	r3, r0
 8006974:	4642      	mov	r2, r8
 8006976:	189b      	adds	r3, r3, r2
 8006978:	66bb      	str	r3, [r7, #104]	; 0x68
 800697a:	464b      	mov	r3, r9
 800697c:	460a      	mov	r2, r1
 800697e:	eb42 0303 	adc.w	r3, r2, r3
 8006982:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	663b      	str	r3, [r7, #96]	; 0x60
 800698e:	667a      	str	r2, [r7, #100]	; 0x64
 8006990:	f04f 0200 	mov.w	r2, #0
 8006994:	f04f 0300 	mov.w	r3, #0
 8006998:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800699c:	4649      	mov	r1, r9
 800699e:	008b      	lsls	r3, r1, #2
 80069a0:	4641      	mov	r1, r8
 80069a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069a6:	4641      	mov	r1, r8
 80069a8:	008a      	lsls	r2, r1, #2
 80069aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80069ae:	f7f9 fc0b 	bl	80001c8 <__aeabi_uldivmod>
 80069b2:	4602      	mov	r2, r0
 80069b4:	460b      	mov	r3, r1
 80069b6:	4b0d      	ldr	r3, [pc, #52]	; (80069ec <UART_SetConfig+0x4e4>)
 80069b8:	fba3 1302 	umull	r1, r3, r3, r2
 80069bc:	095b      	lsrs	r3, r3, #5
 80069be:	2164      	movs	r1, #100	; 0x64
 80069c0:	fb01 f303 	mul.w	r3, r1, r3
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	011b      	lsls	r3, r3, #4
 80069c8:	3332      	adds	r3, #50	; 0x32
 80069ca:	4a08      	ldr	r2, [pc, #32]	; (80069ec <UART_SetConfig+0x4e4>)
 80069cc:	fba2 2303 	umull	r2, r3, r2, r3
 80069d0:	095b      	lsrs	r3, r3, #5
 80069d2:	f003 020f 	and.w	r2, r3, #15
 80069d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4422      	add	r2, r4
 80069de:	609a      	str	r2, [r3, #8]
}
 80069e0:	bf00      	nop
 80069e2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80069e6:	46bd      	mov	sp, r7
 80069e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069ec:	51eb851f 	.word	0x51eb851f

080069f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069f0:	b084      	sub	sp, #16
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b084      	sub	sp, #16
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	f107 001c 	add.w	r0, r7, #28
 80069fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a02:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d123      	bne.n	8006a52 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006a1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d105      	bne.n	8006a46 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f9dc 	bl	8006e04 <USB_CoreReset>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	73fb      	strb	r3, [r7, #15]
 8006a50:	e01b      	b.n	8006a8a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f9d0 	bl	8006e04 <USB_CoreReset>
 8006a64:	4603      	mov	r3, r0
 8006a66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006a68:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d106      	bne.n	8006a7e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	639a      	str	r2, [r3, #56]	; 0x38
 8006a7c:	e005      	b.n	8006a8a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006a8a:	7fbb      	ldrb	r3, [r7, #30]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d10b      	bne.n	8006aa8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f043 0206 	orr.w	r2, r3, #6
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f043 0220 	orr.w	r2, r3, #32
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ab4:	b004      	add	sp, #16
 8006ab6:	4770      	bx	lr

08006ab8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f043 0201 	orr.w	r2, r3, #1
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b083      	sub	sp, #12
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f023 0201 	bic.w	r2, r3, #1
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	460b      	mov	r3, r1
 8006b06:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b18:	78fb      	ldrb	r3, [r7, #3]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d115      	bne.n	8006b4a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b2a:	200a      	movs	r0, #10
 8006b2c:	f7fa fb8c 	bl	8001248 <HAL_Delay>
      ms += 10U;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	330a      	adds	r3, #10
 8006b34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f956 	bl	8006de8 <USB_GetMode>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d01e      	beq.n	8006b80 <USB_SetCurrentMode+0x84>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2bc7      	cmp	r3, #199	; 0xc7
 8006b46:	d9f0      	bls.n	8006b2a <USB_SetCurrentMode+0x2e>
 8006b48:	e01a      	b.n	8006b80 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b4a:	78fb      	ldrb	r3, [r7, #3]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d115      	bne.n	8006b7c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b5c:	200a      	movs	r0, #10
 8006b5e:	f7fa fb73 	bl	8001248 <HAL_Delay>
      ms += 10U;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	330a      	adds	r3, #10
 8006b66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f93d 	bl	8006de8 <USB_GetMode>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d005      	beq.n	8006b80 <USB_SetCurrentMode+0x84>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2bc7      	cmp	r3, #199	; 0xc7
 8006b78:	d9f0      	bls.n	8006b5c <USB_SetCurrentMode+0x60>
 8006b7a:	e001      	b.n	8006b80 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e005      	b.n	8006b8c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2bc8      	cmp	r3, #200	; 0xc8
 8006b84:	d101      	bne.n	8006b8a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e000      	b.n	8006b8c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006bae:	d901      	bls.n	8006bb4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e01b      	b.n	8006bec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	daf2      	bge.n	8006ba2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	019b      	lsls	r3, r3, #6
 8006bc4:	f043 0220 	orr.w	r2, r3, #32
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006bd8:	d901      	bls.n	8006bde <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e006      	b.n	8006bec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	f003 0320 	and.w	r3, r3, #32
 8006be6:	2b20      	cmp	r3, #32
 8006be8:	d0f0      	beq.n	8006bcc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3714      	adds	r7, #20
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c00:	2300      	movs	r3, #0
 8006c02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	3301      	adds	r3, #1
 8006c08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006c10:	d901      	bls.n	8006c16 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e018      	b.n	8006c48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	daf2      	bge.n	8006c04 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2210      	movs	r2, #16
 8006c26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006c34:	d901      	bls.n	8006c3a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e006      	b.n	8006c48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	f003 0310 	and.w	r3, r3, #16
 8006c42:	2b10      	cmp	r3, #16
 8006c44:	d0f0      	beq.n	8006c28 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b089      	sub	sp, #36	; 0x24
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	4611      	mov	r1, r2
 8006c60:	461a      	mov	r2, r3
 8006c62:	460b      	mov	r3, r1
 8006c64:	71fb      	strb	r3, [r7, #7]
 8006c66:	4613      	mov	r3, r2
 8006c68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006c72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d123      	bne.n	8006cc2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006c7a:	88bb      	ldrh	r3, [r7, #4]
 8006c7c:	3303      	adds	r3, #3
 8006c7e:	089b      	lsrs	r3, r3, #2
 8006c80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006c82:	2300      	movs	r3, #0
 8006c84:	61bb      	str	r3, [r7, #24]
 8006c86:	e018      	b.n	8006cba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006c88:	79fb      	ldrb	r3, [r7, #7]
 8006c8a:	031a      	lsls	r2, r3, #12
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c94:	461a      	mov	r2, r3
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	3301      	adds	r3, #1
 8006cac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	61bb      	str	r3, [r7, #24]
 8006cba:	69ba      	ldr	r2, [r7, #24]
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d3e2      	bcc.n	8006c88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3724      	adds	r7, #36	; 0x24
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b08b      	sub	sp, #44	; 0x2c
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006ce6:	88fb      	ldrh	r3, [r7, #6]
 8006ce8:	089b      	lsrs	r3, r3, #2
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006cee:	88fb      	ldrh	r3, [r7, #6]
 8006cf0:	f003 0303 	and.w	r3, r3, #3
 8006cf4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	623b      	str	r3, [r7, #32]
 8006cfa:	e014      	b.n	8006d26 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	601a      	str	r2, [r3, #0]
    pDest++;
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	3301      	adds	r3, #1
 8006d12:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	3301      	adds	r3, #1
 8006d18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	3301      	adds	r3, #1
 8006d24:	623b      	str	r3, [r7, #32]
 8006d26:	6a3a      	ldr	r2, [r7, #32]
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d3e6      	bcc.n	8006cfc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006d2e:	8bfb      	ldrh	r3, [r7, #30]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d01e      	beq.n	8006d72 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d3e:	461a      	mov	r2, r3
 8006d40:	f107 0310 	add.w	r3, r7, #16
 8006d44:	6812      	ldr	r2, [r2, #0]
 8006d46:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	00db      	lsls	r3, r3, #3
 8006d50:	fa22 f303 	lsr.w	r3, r2, r3
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d58:	701a      	strb	r2, [r3, #0]
      i++;
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	3301      	adds	r3, #1
 8006d64:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006d66:	8bfb      	ldrh	r3, [r7, #30]
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006d6c:	8bfb      	ldrh	r3, [r7, #30]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1ea      	bne.n	8006d48 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	372c      	adds	r7, #44	; 0x2c
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	4013      	ands	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d98:	68fb      	ldr	r3, [r7, #12]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b085      	sub	sp, #20
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	460b      	mov	r3, r1
 8006db0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006db6:	78fb      	ldrb	r3, [r7, #3]
 8006db8:	015a      	lsls	r2, r3, #5
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006dc6:	78fb      	ldrb	r3, [r7, #3]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	68ba      	ldr	r2, [r7, #8]
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006dda:	68bb      	ldr	r3, [r7, #8]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3714      	adds	r7, #20
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	f003 0301 	and.w	r3, r3, #1
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	3301      	adds	r3, #1
 8006e14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006e1c:	d901      	bls.n	8006e22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e01b      	b.n	8006e5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	daf2      	bge.n	8006e10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	f043 0201 	orr.w	r2, r3, #1
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006e46:	d901      	bls.n	8006e4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e006      	b.n	8006e5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	f003 0301 	and.w	r3, r3, #1
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d0f0      	beq.n	8006e3a <USB_CoreReset+0x36>

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
	...

08006e68 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e68:	b084      	sub	sp, #16
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b086      	sub	sp, #24
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006e76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e88:	461a      	mov	r2, r3
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eaa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d119      	bne.n	8006ef2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006ebe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d10a      	bne.n	8006edc <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ed4:	f043 0304 	orr.w	r3, r3, #4
 8006ed8:	6013      	str	r3, [r2, #0]
 8006eda:	e014      	b.n	8006f06 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006eea:	f023 0304 	bic.w	r3, r3, #4
 8006eee:	6013      	str	r3, [r2, #0]
 8006ef0:	e009      	b.n	8006f06 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f00:	f023 0304 	bic.w	r3, r3, #4
 8006f04:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f06:	2110      	movs	r1, #16
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f7ff fe43 	bl	8006b94 <USB_FlushTxFifo>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7ff fe6d 	bl	8006bf8 <USB_FlushRxFifo>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f28:	2300      	movs	r3, #0
 8006f2a:	613b      	str	r3, [r7, #16]
 8006f2c:	e015      	b.n	8006f5a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f40:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f4e:	461a      	mov	r2, r3
 8006f50:	2300      	movs	r3, #0
 8006f52:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	3301      	adds	r3, #1
 8006f58:	613b      	str	r3, [r7, #16]
 8006f5a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006f5e:	461a      	mov	r2, r3
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d3e3      	bcc.n	8006f2e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f72:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a18      	ldr	r2, [pc, #96]	; (8006fd8 <USB_HostInit+0x170>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d10b      	bne.n	8006f94 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f82:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a15      	ldr	r2, [pc, #84]	; (8006fdc <USB_HostInit+0x174>)
 8006f88:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a14      	ldr	r2, [pc, #80]	; (8006fe0 <USB_HostInit+0x178>)
 8006f8e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006f92:	e009      	b.n	8006fa8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2280      	movs	r2, #128	; 0x80
 8006f98:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a11      	ldr	r2, [pc, #68]	; (8006fe4 <USB_HostInit+0x17c>)
 8006f9e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a11      	ldr	r2, [pc, #68]	; (8006fe8 <USB_HostInit+0x180>)
 8006fa4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fa8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d105      	bne.n	8006fbc <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	f043 0210 	orr.w	r2, r3, #16
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	699a      	ldr	r2, [r3, #24]
 8006fc0:	4b0a      	ldr	r3, [pc, #40]	; (8006fec <USB_HostInit+0x184>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fd4:	b004      	add	sp, #16
 8006fd6:	4770      	bx	lr
 8006fd8:	40040000 	.word	0x40040000
 8006fdc:	01000200 	.word	0x01000200
 8006fe0:	00e00300 	.word	0x00e00300
 8006fe4:	00600080 	.word	0x00600080
 8006fe8:	004000e0 	.word	0x004000e0
 8006fec:	a3200008 	.word	0xa3200008

08006ff0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800700e:	f023 0303 	bic.w	r3, r3, #3
 8007012:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	78fb      	ldrb	r3, [r7, #3]
 800701e:	f003 0303 	and.w	r3, r3, #3
 8007022:	68f9      	ldr	r1, [r7, #12]
 8007024:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007028:	4313      	orrs	r3, r2
 800702a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800702c:	78fb      	ldrb	r3, [r7, #3]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d107      	bne.n	8007042 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007038:	461a      	mov	r2, r3
 800703a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800703e:	6053      	str	r3, [r2, #4]
 8007040:	e00c      	b.n	800705c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007042:	78fb      	ldrb	r3, [r7, #3]
 8007044:	2b02      	cmp	r3, #2
 8007046:	d107      	bne.n	8007058 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800704e:	461a      	mov	r2, r3
 8007050:	f241 7370 	movw	r3, #6000	; 0x1770
 8007054:	6053      	str	r3, [r2, #4]
 8007056:	e001      	b.n	800705c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e000      	b.n	800705e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b084      	sub	sp, #16
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007076:	2300      	movs	r3, #0
 8007078:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800708a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007098:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800709a:	2064      	movs	r0, #100	; 0x64
 800709c:	f7fa f8d4 	bl	8001248 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80070a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070ac:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80070ae:	200a      	movs	r0, #10
 80070b0:	f7fa f8ca 	bl	8001248 <HAL_Delay>

  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80070be:	b480      	push	{r7}
 80070c0:	b085      	sub	sp, #20
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
 80070c6:	460b      	mov	r3, r1
 80070c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80070e2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d109      	bne.n	8007102 <USB_DriveVbus+0x44>
 80070ee:	78fb      	ldrb	r3, [r7, #3]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d106      	bne.n	8007102 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80070fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007100:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800710c:	d109      	bne.n	8007122 <USB_DriveVbus+0x64>
 800710e:	78fb      	ldrb	r3, [r7, #3]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d106      	bne.n	8007122 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800711c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007120:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800713c:	2300      	movs	r3, #0
 800713e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	0c5b      	lsrs	r3, r3, #17
 800714e:	f003 0303 	and.w	r3, r3, #3
}
 8007152:	4618      	mov	r0, r3
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800715e:	b480      	push	{r7}
 8007160:	b085      	sub	sp, #20
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	b29b      	uxth	r3, r3
}
 8007174:	4618      	mov	r0, r3
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b088      	sub	sp, #32
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	4608      	mov	r0, r1
 800718a:	4611      	mov	r1, r2
 800718c:	461a      	mov	r2, r3
 800718e:	4603      	mov	r3, r0
 8007190:	70fb      	strb	r3, [r7, #3]
 8007192:	460b      	mov	r3, r1
 8007194:	70bb      	strb	r3, [r7, #2]
 8007196:	4613      	mov	r3, r2
 8007198:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80071a2:	78fb      	ldrb	r3, [r7, #3]
 80071a4:	015a      	lsls	r2, r3, #5
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	4413      	add	r3, r2
 80071aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ae:	461a      	mov	r2, r3
 80071b0:	f04f 33ff 	mov.w	r3, #4294967295
 80071b4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80071b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d87c      	bhi.n	80072b8 <USB_HC_Init+0x138>
 80071be:	a201      	add	r2, pc, #4	; (adr r2, 80071c4 <USB_HC_Init+0x44>)
 80071c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c4:	080071d5 	.word	0x080071d5
 80071c8:	0800727b 	.word	0x0800727b
 80071cc:	080071d5 	.word	0x080071d5
 80071d0:	0800723d 	.word	0x0800723d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80071d4:	78fb      	ldrb	r3, [r7, #3]
 80071d6:	015a      	lsls	r2, r3, #5
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	4413      	add	r3, r2
 80071dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071e0:	461a      	mov	r2, r3
 80071e2:	f240 439d 	movw	r3, #1181	; 0x49d
 80071e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80071e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	da10      	bge.n	8007212 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80071f0:	78fb      	ldrb	r3, [r7, #3]
 80071f2:	015a      	lsls	r2, r3, #5
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	4413      	add	r3, r2
 80071f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	78fa      	ldrb	r2, [r7, #3]
 8007200:	0151      	lsls	r1, r2, #5
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	440a      	add	r2, r1
 8007206:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800720a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800720e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007210:	e055      	b.n	80072be <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a6f      	ldr	r2, [pc, #444]	; (80073d4 <USB_HC_Init+0x254>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d151      	bne.n	80072be <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800721a:	78fb      	ldrb	r3, [r7, #3]
 800721c:	015a      	lsls	r2, r3, #5
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	4413      	add	r3, r2
 8007222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	78fa      	ldrb	r2, [r7, #3]
 800722a:	0151      	lsls	r1, r2, #5
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	440a      	add	r2, r1
 8007230:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007234:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007238:	60d3      	str	r3, [r2, #12]
      break;
 800723a:	e040      	b.n	80072be <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800723c:	78fb      	ldrb	r3, [r7, #3]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	4413      	add	r3, r2
 8007244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007248:	461a      	mov	r2, r3
 800724a:	f240 639d 	movw	r3, #1693	; 0x69d
 800724e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007250:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007254:	2b00      	cmp	r3, #0
 8007256:	da34      	bge.n	80072c2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007258:	78fb      	ldrb	r3, [r7, #3]
 800725a:	015a      	lsls	r2, r3, #5
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	4413      	add	r3, r2
 8007260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	78fa      	ldrb	r2, [r7, #3]
 8007268:	0151      	lsls	r1, r2, #5
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	440a      	add	r2, r1
 800726e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007276:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007278:	e023      	b.n	80072c2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800727a:	78fb      	ldrb	r3, [r7, #3]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	4413      	add	r3, r2
 8007282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007286:	461a      	mov	r2, r3
 8007288:	f240 2325 	movw	r3, #549	; 0x225
 800728c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800728e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007292:	2b00      	cmp	r3, #0
 8007294:	da17      	bge.n	80072c6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007296:	78fb      	ldrb	r3, [r7, #3]
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	4413      	add	r3, r2
 800729e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	78fa      	ldrb	r2, [r7, #3]
 80072a6:	0151      	lsls	r1, r2, #5
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	440a      	add	r2, r1
 80072ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072b0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80072b4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80072b6:	e006      	b.n	80072c6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	77fb      	strb	r3, [r7, #31]
      break;
 80072bc:	e004      	b.n	80072c8 <USB_HC_Init+0x148>
      break;
 80072be:	bf00      	nop
 80072c0:	e002      	b.n	80072c8 <USB_HC_Init+0x148>
      break;
 80072c2:	bf00      	nop
 80072c4:	e000      	b.n	80072c8 <USB_HC_Init+0x148>
      break;
 80072c6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80072c8:	78fb      	ldrb	r3, [r7, #3]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d4:	461a      	mov	r2, r3
 80072d6:	2300      	movs	r3, #0
 80072d8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80072da:	78fb      	ldrb	r3, [r7, #3]
 80072dc:	015a      	lsls	r2, r3, #5
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	78fa      	ldrb	r2, [r7, #3]
 80072ea:	0151      	lsls	r1, r2, #5
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	440a      	add	r2, r1
 80072f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072f4:	f043 0302 	orr.w	r3, r3, #2
 80072f8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007300:	699a      	ldr	r2, [r3, #24]
 8007302:	78fb      	ldrb	r3, [r7, #3]
 8007304:	f003 030f 	and.w	r3, r3, #15
 8007308:	2101      	movs	r1, #1
 800730a:	fa01 f303 	lsl.w	r3, r1, r3
 800730e:	6939      	ldr	r1, [r7, #16]
 8007310:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007314:	4313      	orrs	r3, r2
 8007316:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007324:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007328:	2b00      	cmp	r3, #0
 800732a:	da03      	bge.n	8007334 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800732c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007330:	61bb      	str	r3, [r7, #24]
 8007332:	e001      	b.n	8007338 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7ff fef9 	bl	8007130 <USB_GetHostSpeed>
 800733e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007340:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007344:	2b02      	cmp	r3, #2
 8007346:	d106      	bne.n	8007356 <USB_HC_Init+0x1d6>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2b02      	cmp	r3, #2
 800734c:	d003      	beq.n	8007356 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800734e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007352:	617b      	str	r3, [r7, #20]
 8007354:	e001      	b.n	800735a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007356:	2300      	movs	r3, #0
 8007358:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800735a:	787b      	ldrb	r3, [r7, #1]
 800735c:	059b      	lsls	r3, r3, #22
 800735e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007362:	78bb      	ldrb	r3, [r7, #2]
 8007364:	02db      	lsls	r3, r3, #11
 8007366:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800736a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800736c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007370:	049b      	lsls	r3, r3, #18
 8007372:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007376:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007378:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800737a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800737e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	431a      	orrs	r2, r3
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007388:	78fa      	ldrb	r2, [r7, #3]
 800738a:	0151      	lsls	r1, r2, #5
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	440a      	add	r2, r1
 8007390:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007394:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007398:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800739a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800739e:	2b03      	cmp	r3, #3
 80073a0:	d003      	beq.n	80073aa <USB_HC_Init+0x22a>
 80073a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d10f      	bne.n	80073ca <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80073aa:	78fb      	ldrb	r3, [r7, #3]
 80073ac:	015a      	lsls	r2, r3, #5
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	78fa      	ldrb	r2, [r7, #3]
 80073ba:	0151      	lsls	r1, r2, #5
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	440a      	add	r2, r1
 80073c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073c8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80073ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3720      	adds	r7, #32
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	40040000 	.word	0x40040000

080073d8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08c      	sub	sp, #48	; 0x30
 80073dc:	af02      	add	r7, sp, #8
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	4613      	mov	r3, r2
 80073e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	785b      	ldrb	r3, [r3, #1]
 80073ee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80073f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073f4:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4a5d      	ldr	r2, [pc, #372]	; (8007570 <USB_HC_StartXfer+0x198>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d12f      	bne.n	800745e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80073fe:	79fb      	ldrb	r3, [r7, #7]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d11c      	bne.n	800743e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	7c9b      	ldrb	r3, [r3, #18]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d003      	beq.n	8007414 <USB_HC_StartXfer+0x3c>
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	7c9b      	ldrb	r3, [r3, #18]
 8007410:	2b02      	cmp	r3, #2
 8007412:	d124      	bne.n	800745e <USB_HC_StartXfer+0x86>
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	799b      	ldrb	r3, [r3, #6]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d120      	bne.n	800745e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	015a      	lsls	r2, r3, #5
 8007420:	6a3b      	ldr	r3, [r7, #32]
 8007422:	4413      	add	r3, r2
 8007424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	69fa      	ldr	r2, [r7, #28]
 800742c:	0151      	lsls	r1, r2, #5
 800742e:	6a3a      	ldr	r2, [r7, #32]
 8007430:	440a      	add	r2, r1
 8007432:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800743a:	60d3      	str	r3, [r2, #12]
 800743c:	e00f      	b.n	800745e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	791b      	ldrb	r3, [r3, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10b      	bne.n	800745e <USB_HC_StartXfer+0x86>
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	795b      	ldrb	r3, [r3, #5]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d107      	bne.n	800745e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	785b      	ldrb	r3, [r3, #1]
 8007452:	4619      	mov	r1, r3
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 fb6b 	bl	8007b30 <USB_DoPing>
        return HAL_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	e232      	b.n	80078c4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	799b      	ldrb	r3, [r3, #6]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d158      	bne.n	8007518 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007466:	2301      	movs	r3, #1
 8007468:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	78db      	ldrb	r3, [r3, #3]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d007      	beq.n	8007482 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007472:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	8a92      	ldrh	r2, [r2, #20]
 8007478:	fb03 f202 	mul.w	r2, r3, r2
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	61da      	str	r2, [r3, #28]
 8007480:	e07c      	b.n	800757c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	7c9b      	ldrb	r3, [r3, #18]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d130      	bne.n	80074ec <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	2bbc      	cmp	r3, #188	; 0xbc
 8007490:	d918      	bls.n	80074c4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	8a9b      	ldrh	r3, [r3, #20]
 8007496:	461a      	mov	r2, r3
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	69da      	ldr	r2, [r3, #28]
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d003      	beq.n	80074b4 <USB_HC_StartXfer+0xdc>
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d103      	bne.n	80074bc <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	2202      	movs	r2, #2
 80074b8:	60da      	str	r2, [r3, #12]
 80074ba:	e05f      	b.n	800757c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	2201      	movs	r2, #1
 80074c0:	60da      	str	r2, [r3, #12]
 80074c2:	e05b      	b.n	800757c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	6a1a      	ldr	r2, [r3, #32]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d007      	beq.n	80074e4 <USB_HC_StartXfer+0x10c>
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d003      	beq.n	80074e4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2204      	movs	r2, #4
 80074e0:	60da      	str	r2, [r3, #12]
 80074e2:	e04b      	b.n	800757c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2203      	movs	r2, #3
 80074e8:	60da      	str	r2, [r3, #12]
 80074ea:	e047      	b.n	800757c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80074ec:	79fb      	ldrb	r3, [r7, #7]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d10d      	bne.n	800750e <USB_HC_StartXfer+0x136>
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	68ba      	ldr	r2, [r7, #8]
 80074f8:	8a92      	ldrh	r2, [r2, #20]
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d907      	bls.n	800750e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80074fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	8a92      	ldrh	r2, [r2, #20]
 8007504:	fb03 f202 	mul.w	r2, r3, r2
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	61da      	str	r2, [r3, #28]
 800750c:	e036      	b.n	800757c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	6a1a      	ldr	r2, [r3, #32]
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	61da      	str	r2, [r3, #28]
 8007516:	e031      	b.n	800757c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	6a1b      	ldr	r3, [r3, #32]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d018      	beq.n	8007552 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	6a1b      	ldr	r3, [r3, #32]
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	8a92      	ldrh	r2, [r2, #20]
 8007528:	4413      	add	r3, r2
 800752a:	3b01      	subs	r3, #1
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	8a92      	ldrh	r2, [r2, #20]
 8007530:	fbb3 f3f2 	udiv	r3, r3, r2
 8007534:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8007536:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007538:	8b7b      	ldrh	r3, [r7, #26]
 800753a:	429a      	cmp	r2, r3
 800753c:	d90b      	bls.n	8007556 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800753e:	8b7b      	ldrh	r3, [r7, #26]
 8007540:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007542:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	8a92      	ldrh	r2, [r2, #20]
 8007548:	fb03 f202 	mul.w	r2, r3, r2
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	61da      	str	r2, [r3, #28]
 8007550:	e001      	b.n	8007556 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007552:	2301      	movs	r3, #1
 8007554:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	78db      	ldrb	r3, [r3, #3]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00a      	beq.n	8007574 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800755e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	8a92      	ldrh	r2, [r2, #20]
 8007564:	fb03 f202 	mul.w	r2, r3, r2
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	61da      	str	r2, [r3, #28]
 800756c:	e006      	b.n	800757c <USB_HC_StartXfer+0x1a4>
 800756e:	bf00      	nop
 8007570:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	6a1a      	ldr	r2, [r3, #32]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	69db      	ldr	r3, [r3, #28]
 8007580:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007584:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007586:	04d9      	lsls	r1, r3, #19
 8007588:	4ba3      	ldr	r3, [pc, #652]	; (8007818 <USB_HC_StartXfer+0x440>)
 800758a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800758c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	7d9b      	ldrb	r3, [r3, #22]
 8007592:	075b      	lsls	r3, r3, #29
 8007594:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007598:	69f9      	ldr	r1, [r7, #28]
 800759a:	0148      	lsls	r0, r1, #5
 800759c:	6a39      	ldr	r1, [r7, #32]
 800759e:	4401      	add	r1, r0
 80075a0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80075a4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80075a6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80075a8:	79fb      	ldrb	r3, [r7, #7]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d009      	beq.n	80075c2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	6999      	ldr	r1, [r3, #24]
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	015a      	lsls	r2, r3, #5
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075be:	460a      	mov	r2, r1
 80075c0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80075c2:	6a3b      	ldr	r3, [r7, #32]
 80075c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	bf0c      	ite	eq
 80075d2:	2301      	moveq	r3, #1
 80075d4:	2300      	movne	r3, #0
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	015a      	lsls	r2, r3, #5
 80075de:	6a3b      	ldr	r3, [r7, #32]
 80075e0:	4413      	add	r3, r2
 80075e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	69fa      	ldr	r2, [r7, #28]
 80075ea:	0151      	lsls	r1, r2, #5
 80075ec:	6a3a      	ldr	r2, [r7, #32]
 80075ee:	440a      	add	r2, r1
 80075f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80075f8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	015a      	lsls	r2, r3, #5
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	4413      	add	r3, r2
 8007602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	7e7b      	ldrb	r3, [r7, #25]
 800760a:	075b      	lsls	r3, r3, #29
 800760c:	69f9      	ldr	r1, [r7, #28]
 800760e:	0148      	lsls	r0, r1, #5
 8007610:	6a39      	ldr	r1, [r7, #32]
 8007612:	4401      	add	r1, r0
 8007614:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007618:	4313      	orrs	r3, r2
 800761a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	799b      	ldrb	r3, [r3, #6]
 8007620:	2b01      	cmp	r3, #1
 8007622:	f040 80c3 	bne.w	80077ac <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	7c5b      	ldrb	r3, [r3, #17]
 800762a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007630:	4313      	orrs	r3, r2
 8007632:	69fa      	ldr	r2, [r7, #28]
 8007634:	0151      	lsls	r1, r2, #5
 8007636:	6a3a      	ldr	r2, [r7, #32]
 8007638:	440a      	add	r2, r1
 800763a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800763e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007642:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	6a3b      	ldr	r3, [r7, #32]
 800764a:	4413      	add	r3, r2
 800764c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	69fa      	ldr	r2, [r7, #28]
 8007654:	0151      	lsls	r1, r2, #5
 8007656:	6a3a      	ldr	r2, [r7, #32]
 8007658:	440a      	add	r2, r1
 800765a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800765e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007662:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	79db      	ldrb	r3, [r3, #7]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d123      	bne.n	80076b4 <USB_HC_StartXfer+0x2dc>
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	78db      	ldrb	r3, [r3, #3]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d11f      	bne.n	80076b4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	015a      	lsls	r2, r3, #5
 8007678:	6a3b      	ldr	r3, [r7, #32]
 800767a:	4413      	add	r3, r2
 800767c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	69fa      	ldr	r2, [r7, #28]
 8007684:	0151      	lsls	r1, r2, #5
 8007686:	6a3a      	ldr	r2, [r7, #32]
 8007688:	440a      	add	r2, r1
 800768a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800768e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007692:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	015a      	lsls	r2, r3, #5
 8007698:	6a3b      	ldr	r3, [r7, #32]
 800769a:	4413      	add	r3, r2
 800769c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	69fa      	ldr	r2, [r7, #28]
 80076a4:	0151      	lsls	r1, r2, #5
 80076a6:	6a3a      	ldr	r2, [r7, #32]
 80076a8:	440a      	add	r2, r1
 80076aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076b2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	7c9b      	ldrb	r3, [r3, #18]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d003      	beq.n	80076c4 <USB_HC_StartXfer+0x2ec>
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	7c9b      	ldrb	r3, [r3, #18]
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d117      	bne.n	80076f4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d113      	bne.n	80076f4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	78db      	ldrb	r3, [r3, #3]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d10f      	bne.n	80076f4 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	015a      	lsls	r2, r3, #5
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	4413      	add	r3, r2
 80076dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	69fa      	ldr	r2, [r7, #28]
 80076e4:	0151      	lsls	r1, r2, #5
 80076e6:	6a3a      	ldr	r2, [r7, #32]
 80076e8:	440a      	add	r2, r1
 80076ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076f2:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	7c9b      	ldrb	r3, [r3, #18]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d162      	bne.n	80077c2 <USB_HC_StartXfer+0x3ea>
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	78db      	ldrb	r3, [r3, #3]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d15e      	bne.n	80077c2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	3b01      	subs	r3, #1
 800770a:	2b03      	cmp	r3, #3
 800770c:	d858      	bhi.n	80077c0 <USB_HC_StartXfer+0x3e8>
 800770e:	a201      	add	r2, pc, #4	; (adr r2, 8007714 <USB_HC_StartXfer+0x33c>)
 8007710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007714:	08007725 	.word	0x08007725
 8007718:	08007747 	.word	0x08007747
 800771c:	08007769 	.word	0x08007769
 8007720:	0800778b 	.word	0x0800778b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	6a3b      	ldr	r3, [r7, #32]
 800772a:	4413      	add	r3, r2
 800772c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	69fa      	ldr	r2, [r7, #28]
 8007734:	0151      	lsls	r1, r2, #5
 8007736:	6a3a      	ldr	r2, [r7, #32]
 8007738:	440a      	add	r2, r1
 800773a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800773e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007742:	6053      	str	r3, [r2, #4]
          break;
 8007744:	e03d      	b.n	80077c2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	015a      	lsls	r2, r3, #5
 800774a:	6a3b      	ldr	r3, [r7, #32]
 800774c:	4413      	add	r3, r2
 800774e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	69fa      	ldr	r2, [r7, #28]
 8007756:	0151      	lsls	r1, r2, #5
 8007758:	6a3a      	ldr	r2, [r7, #32]
 800775a:	440a      	add	r2, r1
 800775c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007760:	f043 030e 	orr.w	r3, r3, #14
 8007764:	6053      	str	r3, [r2, #4]
          break;
 8007766:	e02c      	b.n	80077c2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	015a      	lsls	r2, r3, #5
 800776c:	6a3b      	ldr	r3, [r7, #32]
 800776e:	4413      	add	r3, r2
 8007770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	69fa      	ldr	r2, [r7, #28]
 8007778:	0151      	lsls	r1, r2, #5
 800777a:	6a3a      	ldr	r2, [r7, #32]
 800777c:	440a      	add	r2, r1
 800777e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007786:	6053      	str	r3, [r2, #4]
          break;
 8007788:	e01b      	b.n	80077c2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	015a      	lsls	r2, r3, #5
 800778e:	6a3b      	ldr	r3, [r7, #32]
 8007790:	4413      	add	r3, r2
 8007792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	69fa      	ldr	r2, [r7, #28]
 800779a:	0151      	lsls	r1, r2, #5
 800779c:	6a3a      	ldr	r2, [r7, #32]
 800779e:	440a      	add	r2, r1
 80077a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077a8:	6053      	str	r3, [r2, #4]
          break;
 80077aa:	e00a      	b.n	80077c2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	015a      	lsls	r2, r3, #5
 80077b0:	6a3b      	ldr	r3, [r7, #32]
 80077b2:	4413      	add	r3, r2
 80077b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077b8:	461a      	mov	r2, r3
 80077ba:	2300      	movs	r3, #0
 80077bc:	6053      	str	r3, [r2, #4]
 80077be:	e000      	b.n	80077c2 <USB_HC_StartXfer+0x3ea>
          break;
 80077c0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	015a      	lsls	r2, r3, #5
 80077c6:	6a3b      	ldr	r3, [r7, #32]
 80077c8:	4413      	add	r3, r2
 80077ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80077d8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	78db      	ldrb	r3, [r3, #3]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d004      	beq.n	80077ec <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077e8:	613b      	str	r3, [r7, #16]
 80077ea:	e003      	b.n	80077f4 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80077f2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077fa:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	015a      	lsls	r2, r3, #5
 8007800:	6a3b      	ldr	r3, [r7, #32]
 8007802:	4413      	add	r3, r2
 8007804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007808:	461a      	mov	r2, r3
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800780e:	79fb      	ldrb	r3, [r7, #7]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d003      	beq.n	800781c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	e055      	b.n	80078c4 <USB_HC_StartXfer+0x4ec>
 8007818:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	78db      	ldrb	r3, [r3, #3]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d14e      	bne.n	80078c2 <USB_HC_StartXfer+0x4ea>
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	6a1b      	ldr	r3, [r3, #32]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d04a      	beq.n	80078c2 <USB_HC_StartXfer+0x4ea>
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	79db      	ldrb	r3, [r3, #7]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d146      	bne.n	80078c2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	7c9b      	ldrb	r3, [r3, #18]
 8007838:	2b03      	cmp	r3, #3
 800783a:	d831      	bhi.n	80078a0 <USB_HC_StartXfer+0x4c8>
 800783c:	a201      	add	r2, pc, #4	; (adr r2, 8007844 <USB_HC_StartXfer+0x46c>)
 800783e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007842:	bf00      	nop
 8007844:	08007855 	.word	0x08007855
 8007848:	08007879 	.word	0x08007879
 800784c:	08007855 	.word	0x08007855
 8007850:	08007879 	.word	0x08007879
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	6a1b      	ldr	r3, [r3, #32]
 8007858:	3303      	adds	r3, #3
 800785a:	089b      	lsrs	r3, r3, #2
 800785c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800785e:	8afa      	ldrh	r2, [r7, #22]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007864:	b29b      	uxth	r3, r3
 8007866:	429a      	cmp	r2, r3
 8007868:	d91c      	bls.n	80078a4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	f043 0220 	orr.w	r2, r3, #32
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	619a      	str	r2, [r3, #24]
        }
        break;
 8007876:	e015      	b.n	80078a4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	6a1b      	ldr	r3, [r3, #32]
 800787c:	3303      	adds	r3, #3
 800787e:	089b      	lsrs	r3, r3, #2
 8007880:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007882:	8afa      	ldrh	r2, [r7, #22]
 8007884:	6a3b      	ldr	r3, [r7, #32]
 8007886:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	b29b      	uxth	r3, r3
 800788e:	429a      	cmp	r2, r3
 8007890:	d90a      	bls.n	80078a8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	619a      	str	r2, [r3, #24]
        }
        break;
 800789e:	e003      	b.n	80078a8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80078a0:	bf00      	nop
 80078a2:	e002      	b.n	80078aa <USB_HC_StartXfer+0x4d2>
        break;
 80078a4:	bf00      	nop
 80078a6:	e000      	b.n	80078aa <USB_HC_StartXfer+0x4d2>
        break;
 80078a8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	6999      	ldr	r1, [r3, #24]
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	785a      	ldrb	r2, [r3, #1]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	2000      	movs	r0, #0
 80078ba:	9000      	str	r0, [sp, #0]
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f7ff f9c9 	bl	8006c54 <USB_WritePacket>
  }

  return HAL_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3728      	adds	r7, #40	; 0x28
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	b29b      	uxth	r3, r3
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3714      	adds	r7, #20
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr

080078ee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80078ee:	b480      	push	{r7}
 80078f0:	b089      	sub	sp, #36	; 0x24
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	460b      	mov	r3, r1
 80078f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80078fe:	78fb      	ldrb	r3, [r7, #3]
 8007900:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007902:	2300      	movs	r3, #0
 8007904:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	015a      	lsls	r2, r3, #5
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	4413      	add	r3, r2
 800790e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	0c9b      	lsrs	r3, r3, #18
 8007916:	f003 0303 	and.w	r3, r3, #3
 800791a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	015a      	lsls	r2, r3, #5
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	4413      	add	r3, r2
 8007924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	0fdb      	lsrs	r3, r3, #31
 800792c:	f003 0301 	and.w	r3, r3, #1
 8007930:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	015a      	lsls	r2, r3, #5
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	4413      	add	r3, r2
 800793a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	0fdb      	lsrs	r3, r3, #31
 8007942:	f003 0301 	and.w	r3, r3, #1
 8007946:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	f003 0320 	and.w	r3, r3, #32
 8007950:	2b20      	cmp	r3, #32
 8007952:	d10d      	bne.n	8007970 <USB_HC_Halt+0x82>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10a      	bne.n	8007970 <USB_HC_Halt+0x82>
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d005      	beq.n	800796c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d002      	beq.n	800796c <USB_HC_Halt+0x7e>
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	2b03      	cmp	r3, #3
 800796a:	d101      	bne.n	8007970 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800796c:	2300      	movs	r3, #0
 800796e:	e0d8      	b.n	8007b22 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d002      	beq.n	800797c <USB_HC_Halt+0x8e>
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	2b02      	cmp	r3, #2
 800797a:	d173      	bne.n	8007a64 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	015a      	lsls	r2, r3, #5
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	4413      	add	r3, r2
 8007984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	69ba      	ldr	r2, [r7, #24]
 800798c:	0151      	lsls	r1, r2, #5
 800798e:	69fa      	ldr	r2, [r7, #28]
 8007990:	440a      	add	r2, r1
 8007992:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007996:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800799a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f003 0320 	and.w	r3, r3, #32
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d14a      	bne.n	8007a3e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d133      	bne.n	8007a1c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	69ba      	ldr	r2, [r7, #24]
 80079c4:	0151      	lsls	r1, r2, #5
 80079c6:	69fa      	ldr	r2, [r7, #28]
 80079c8:	440a      	add	r2, r1
 80079ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079d2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	015a      	lsls	r2, r3, #5
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	4413      	add	r3, r2
 80079dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	69ba      	ldr	r2, [r7, #24]
 80079e4:	0151      	lsls	r1, r2, #5
 80079e6:	69fa      	ldr	r2, [r7, #28]
 80079e8:	440a      	add	r2, r1
 80079ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079f2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	3301      	adds	r3, #1
 80079f8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a00:	d82e      	bhi.n	8007a60 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	015a      	lsls	r2, r3, #5
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	4413      	add	r3, r2
 8007a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a18:	d0ec      	beq.n	80079f4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a1a:	e081      	b.n	8007b20 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	015a      	lsls	r2, r3, #5
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	69ba      	ldr	r2, [r7, #24]
 8007a2c:	0151      	lsls	r1, r2, #5
 8007a2e:	69fa      	ldr	r2, [r7, #28]
 8007a30:	440a      	add	r2, r1
 8007a32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a3a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a3c:	e070      	b.n	8007b20 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	015a      	lsls	r2, r3, #5
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	4413      	add	r3, r2
 8007a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	69ba      	ldr	r2, [r7, #24]
 8007a4e:	0151      	lsls	r1, r2, #5
 8007a50:	69fa      	ldr	r2, [r7, #28]
 8007a52:	440a      	add	r2, r1
 8007a54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a5c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a5e:	e05f      	b.n	8007b20 <USB_HC_Halt+0x232>
            break;
 8007a60:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a62:	e05d      	b.n	8007b20 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	69ba      	ldr	r2, [r7, #24]
 8007a74:	0151      	lsls	r1, r2, #5
 8007a76:	69fa      	ldr	r2, [r7, #28]
 8007a78:	440a      	add	r2, r1
 8007a7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a82:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d133      	bne.n	8007afc <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	69ba      	ldr	r2, [r7, #24]
 8007aa4:	0151      	lsls	r1, r2, #5
 8007aa6:	69fa      	ldr	r2, [r7, #28]
 8007aa8:	440a      	add	r2, r1
 8007aaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007aae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ab2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	015a      	lsls	r2, r3, #5
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	4413      	add	r3, r2
 8007abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	69ba      	ldr	r2, [r7, #24]
 8007ac4:	0151      	lsls	r1, r2, #5
 8007ac6:	69fa      	ldr	r2, [r7, #28]
 8007ac8:	440a      	add	r2, r1
 8007aca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ad2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ae0:	d81d      	bhi.n	8007b1e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	015a      	lsls	r2, r3, #5
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	4413      	add	r3, r2
 8007aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007af4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007af8:	d0ec      	beq.n	8007ad4 <USB_HC_Halt+0x1e6>
 8007afa:	e011      	b.n	8007b20 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	015a      	lsls	r2, r3, #5
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	4413      	add	r3, r2
 8007b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	69ba      	ldr	r2, [r7, #24]
 8007b0c:	0151      	lsls	r1, r2, #5
 8007b0e:	69fa      	ldr	r2, [r7, #28]
 8007b10:	440a      	add	r2, r1
 8007b12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b1a:	6013      	str	r3, [r2, #0]
 8007b1c:	e000      	b.n	8007b20 <USB_HC_Halt+0x232>
          break;
 8007b1e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3724      	adds	r7, #36	; 0x24
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
	...

08007b30 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b087      	sub	sp, #28
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007b40:	78fb      	ldrb	r3, [r7, #3]
 8007b42:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007b44:	2301      	movs	r3, #1
 8007b46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	04da      	lsls	r2, r3, #19
 8007b4c:	4b15      	ldr	r3, [pc, #84]	; (8007ba4 <USB_DoPing+0x74>)
 8007b4e:	4013      	ands	r3, r2
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	0151      	lsls	r1, r2, #5
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	440a      	add	r2, r1
 8007b58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b60:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	015a      	lsls	r2, r3, #5
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b78:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b80:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	015a      	lsls	r2, r3, #5
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b8e:	461a      	mov	r2, r3
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	371c      	adds	r7, #28
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	1ff80000 	.word	0x1ff80000

08007ba8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b088      	sub	sp, #32
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7fe ff8c 	bl	8006ada <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007bc2:	2110      	movs	r1, #16
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f7fe ffe5 	bl	8006b94 <USB_FlushTxFifo>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d001      	beq.n	8007bd4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7ff f80f 	bl	8006bf8 <USB_FlushRxFifo>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d001      	beq.n	8007be4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007be4:	2300      	movs	r3, #0
 8007be6:	61bb      	str	r3, [r7, #24]
 8007be8:	e01f      	b.n	8007c2a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	015a      	lsls	r2, r3, #5
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c00:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c08:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c10:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	015a      	lsls	r2, r3, #5
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	4413      	add	r3, r2
 8007c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c1e:	461a      	mov	r2, r3
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	3301      	adds	r3, #1
 8007c28:	61bb      	str	r3, [r7, #24]
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	2b0f      	cmp	r3, #15
 8007c2e:	d9dc      	bls.n	8007bea <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007c30:	2300      	movs	r3, #0
 8007c32:	61bb      	str	r3, [r7, #24]
 8007c34:	e034      	b.n	8007ca0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	015a      	lsls	r2, r3, #5
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c4c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c54:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c5c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	015a      	lsls	r2, r3, #5
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	4413      	add	r3, r2
 8007c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	3301      	adds	r3, #1
 8007c74:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c7c:	d80c      	bhi.n	8007c98 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	015a      	lsls	r2, r3, #5
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	4413      	add	r3, r2
 8007c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c94:	d0ec      	beq.n	8007c70 <USB_StopHost+0xc8>
 8007c96:	e000      	b.n	8007c9a <USB_StopHost+0xf2>
        break;
 8007c98:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	61bb      	str	r3, [r7, #24]
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	2b0f      	cmp	r3, #15
 8007ca4:	d9c7      	bls.n	8007c36 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cac:	461a      	mov	r2, r3
 8007cae:	f04f 33ff 	mov.w	r3, #4294967295
 8007cb2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cba:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7fe fefb 	bl	8006ab8 <USB_EnableGlobalInt>

  return ret;
 8007cc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3720      	adds	r7, #32
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007ccc:	b590      	push	{r4, r7, lr}
 8007cce:	b089      	sub	sp, #36	; 0x24
 8007cd0:	af04      	add	r7, sp, #16
 8007cd2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	2102      	movs	r1, #2
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fc85 	bl	80085ea <USBH_FindInterface>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
 8007ce6:	2bff      	cmp	r3, #255	; 0xff
 8007ce8:	d002      	beq.n	8007cf0 <USBH_CDC_InterfaceInit+0x24>
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d901      	bls.n	8007cf4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	e13d      	b.n	8007f70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 fc5a 	bl	80085b2 <USBH_SelectInterface>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007d02:	7bbb      	ldrb	r3, [r7, #14]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d001      	beq.n	8007d0c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007d08:	2302      	movs	r3, #2
 8007d0a:	e131      	b.n	8007f70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007d12:	2050      	movs	r0, #80	; 0x50
 8007d14:	f002 fb74 	bl	800a400 <malloc>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d22:	69db      	ldr	r3, [r3, #28]
 8007d24:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d101      	bne.n	8007d30 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007d2c:	2302      	movs	r3, #2
 8007d2e:	e11f      	b.n	8007f70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007d30:	2250      	movs	r2, #80	; 0x50
 8007d32:	2100      	movs	r1, #0
 8007d34:	68b8      	ldr	r0, [r7, #8]
 8007d36:	f002 fc1f 	bl	800a578 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007d3a:	7bfb      	ldrb	r3, [r7, #15]
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	211a      	movs	r1, #26
 8007d40:	fb01 f303 	mul.w	r3, r1, r3
 8007d44:	4413      	add	r3, r2
 8007d46:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	b25b      	sxtb	r3, r3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	da15      	bge.n	8007d7e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007d52:	7bfb      	ldrb	r3, [r7, #15]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	211a      	movs	r1, #26
 8007d58:	fb01 f303 	mul.w	r3, r1, r3
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007d62:	781a      	ldrb	r2, [r3, #0]
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	211a      	movs	r1, #26
 8007d6e:	fb01 f303 	mul.w	r3, r1, r3
 8007d72:	4413      	add	r3, r2
 8007d74:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007d78:	881a      	ldrh	r2, [r3, #0]
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	785b      	ldrb	r3, [r3, #1]
 8007d82:	4619      	mov	r1, r3
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f001 ffce 	bl	8009d26 <USBH_AllocPipe>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	7819      	ldrb	r1, [r3, #0]
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	7858      	ldrb	r0, [r3, #1]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	8952      	ldrh	r2, [r2, #10]
 8007daa:	9202      	str	r2, [sp, #8]
 8007dac:	2203      	movs	r2, #3
 8007dae:	9201      	str	r2, [sp, #4]
 8007db0:	9300      	str	r3, [sp, #0]
 8007db2:	4623      	mov	r3, r4
 8007db4:	4602      	mov	r2, r0
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f001 ff86 	bl	8009cc8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f002 fa95 	bl	800a2f4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007dca:	2300      	movs	r3, #0
 8007dcc:	2200      	movs	r2, #0
 8007dce:	210a      	movs	r1, #10
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fc0a 	bl	80085ea <USBH_FindInterface>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007dda:	7bfb      	ldrb	r3, [r7, #15]
 8007ddc:	2bff      	cmp	r3, #255	; 0xff
 8007dde:	d002      	beq.n	8007de6 <USBH_CDC_InterfaceInit+0x11a>
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d901      	bls.n	8007dea <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007de6:	2302      	movs	r3, #2
 8007de8:	e0c2      	b.n	8007f70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	211a      	movs	r1, #26
 8007df0:	fb01 f303 	mul.w	r3, r1, r3
 8007df4:	4413      	add	r3, r2
 8007df6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	b25b      	sxtb	r3, r3
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	da16      	bge.n	8007e30 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	211a      	movs	r1, #26
 8007e08:	fb01 f303 	mul.w	r3, r1, r3
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e12:	781a      	ldrb	r2, [r3, #0]
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	211a      	movs	r1, #26
 8007e1e:	fb01 f303 	mul.w	r3, r1, r3
 8007e22:	4413      	add	r3, r2
 8007e24:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007e28:	881a      	ldrh	r2, [r3, #0]
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	835a      	strh	r2, [r3, #26]
 8007e2e:	e015      	b.n	8007e5c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007e30:	7bfb      	ldrb	r3, [r7, #15]
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	211a      	movs	r1, #26
 8007e36:	fb01 f303 	mul.w	r3, r1, r3
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e40:	781a      	ldrb	r2, [r3, #0]
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	211a      	movs	r1, #26
 8007e4c:	fb01 f303 	mul.w	r3, r1, r3
 8007e50:	4413      	add	r3, r2
 8007e52:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007e56:	881a      	ldrh	r2, [r3, #0]
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	211a      	movs	r1, #26
 8007e62:	fb01 f303 	mul.w	r3, r1, r3
 8007e66:	4413      	add	r3, r2
 8007e68:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	b25b      	sxtb	r3, r3
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	da16      	bge.n	8007ea2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	211a      	movs	r1, #26
 8007e7a:	fb01 f303 	mul.w	r3, r1, r3
 8007e7e:	4413      	add	r3, r2
 8007e80:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007e84:	781a      	ldrb	r2, [r3, #0]
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007e8a:	7bfb      	ldrb	r3, [r7, #15]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	211a      	movs	r1, #26
 8007e90:	fb01 f303 	mul.w	r3, r1, r3
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007e9a:	881a      	ldrh	r2, [r3, #0]
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	835a      	strh	r2, [r3, #26]
 8007ea0:	e015      	b.n	8007ece <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	211a      	movs	r1, #26
 8007ea8:	fb01 f303 	mul.w	r3, r1, r3
 8007eac:	4413      	add	r3, r2
 8007eae:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007eb2:	781a      	ldrb	r2, [r3, #0]
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007eb8:	7bfb      	ldrb	r3, [r7, #15]
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	211a      	movs	r1, #26
 8007ebe:	fb01 f303 	mul.w	r3, r1, r3
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007ec8:	881a      	ldrh	r2, [r3, #0]
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	7b9b      	ldrb	r3, [r3, #14]
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f001 ff26 	bl	8009d26 <USBH_AllocPipe>
 8007eda:	4603      	mov	r3, r0
 8007edc:	461a      	mov	r2, r3
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	7bdb      	ldrb	r3, [r3, #15]
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f001 ff1c 	bl	8009d26 <USBH_AllocPipe>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	7b59      	ldrb	r1, [r3, #13]
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	7b98      	ldrb	r0, [r3, #14]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f0a:	68ba      	ldr	r2, [r7, #8]
 8007f0c:	8b12      	ldrh	r2, [r2, #24]
 8007f0e:	9202      	str	r2, [sp, #8]
 8007f10:	2202      	movs	r2, #2
 8007f12:	9201      	str	r2, [sp, #4]
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	4623      	mov	r3, r4
 8007f18:	4602      	mov	r2, r0
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f001 fed4 	bl	8009cc8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	7b19      	ldrb	r1, [r3, #12]
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	7bd8      	ldrb	r0, [r3, #15]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	8b52      	ldrh	r2, [r2, #26]
 8007f38:	9202      	str	r2, [sp, #8]
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	9201      	str	r2, [sp, #4]
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	4623      	mov	r3, r4
 8007f42:	4602      	mov	r2, r0
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f001 febf 	bl	8009cc8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	7b5b      	ldrb	r3, [r3, #13]
 8007f56:	2200      	movs	r2, #0
 8007f58:	4619      	mov	r1, r3
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f002 f9ca 	bl	800a2f4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	7b1b      	ldrb	r3, [r3, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	4619      	mov	r1, r3
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f002 f9c3 	bl	800a2f4 <USBH_LL_SetToggle>

  return USBH_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3714      	adds	r7, #20
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd90      	pop	{r4, r7, pc}

08007f78 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f86:	69db      	ldr	r3, [r3, #28]
 8007f88:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00e      	beq.n	8007fb0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	4619      	mov	r1, r3
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f001 feb4 	bl	8009d06 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f001 fedf 	bl	8009d68 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	7b1b      	ldrb	r3, [r3, #12]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00e      	beq.n	8007fd6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	7b1b      	ldrb	r3, [r3, #12]
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f001 fea1 	bl	8009d06 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	7b1b      	ldrb	r3, [r3, #12]
 8007fc8:	4619      	mov	r1, r3
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f001 fecc 	bl	8009d68 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	7b5b      	ldrb	r3, [r3, #13]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00e      	beq.n	8007ffc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	7b5b      	ldrb	r3, [r3, #13]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f001 fe8e 	bl	8009d06 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	7b5b      	ldrb	r3, [r3, #13]
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f001 feb9 	bl	8009d68 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008002:	69db      	ldr	r3, [r3, #28]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00b      	beq.n	8008020 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800800e:	69db      	ldr	r3, [r3, #28]
 8008010:	4618      	mov	r0, r3
 8008012:	f002 f9fd 	bl	800a410 <free>
    phost->pActiveClass->pData = 0U;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800801c:	2200      	movs	r2, #0
 800801e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b084      	sub	sp, #16
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008038:	69db      	ldr	r3, [r3, #28]
 800803a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	3340      	adds	r3, #64	; 0x40
 8008040:	4619      	mov	r1, r3
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f8b1 	bl	80081aa <GetLineCoding>
 8008048:	4603      	mov	r3, r0
 800804a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800804c:	7afb      	ldrb	r3, [r7, #11]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d105      	bne.n	800805e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008058:	2102      	movs	r1, #2
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800805e:	7afb      	ldrb	r3, [r7, #11]
}
 8008060:	4618      	mov	r0, r3
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008070:	2301      	movs	r3, #1
 8008072:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800807e:	69db      	ldr	r3, [r3, #28]
 8008080:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008088:	2b04      	cmp	r3, #4
 800808a:	d877      	bhi.n	800817c <USBH_CDC_Process+0x114>
 800808c:	a201      	add	r2, pc, #4	; (adr r2, 8008094 <USBH_CDC_Process+0x2c>)
 800808e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008092:	bf00      	nop
 8008094:	080080a9 	.word	0x080080a9
 8008098:	080080af 	.word	0x080080af
 800809c:	080080df 	.word	0x080080df
 80080a0:	08008153 	.word	0x08008153
 80080a4:	08008161 	.word	0x08008161
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	73fb      	strb	r3, [r7, #15]
      break;
 80080ac:	e06d      	b.n	800818a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f897 	bl	80081e8 <SetLineCoding>
 80080ba:	4603      	mov	r3, r0
 80080bc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80080be:	7bbb      	ldrb	r3, [r7, #14]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d104      	bne.n	80080ce <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	2202      	movs	r2, #2
 80080c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80080cc:	e058      	b.n	8008180 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80080ce:	7bbb      	ldrb	r3, [r7, #14]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d055      	beq.n	8008180 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	2204      	movs	r2, #4
 80080d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80080dc:	e050      	b.n	8008180 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	3340      	adds	r3, #64	; 0x40
 80080e2:	4619      	mov	r1, r3
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f860 	bl	80081aa <GetLineCoding>
 80080ea:	4603      	mov	r3, r0
 80080ec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80080ee:	7bbb      	ldrb	r3, [r7, #14]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d126      	bne.n	8008142 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008106:	791b      	ldrb	r3, [r3, #4]
 8008108:	429a      	cmp	r2, r3
 800810a:	d13b      	bne.n	8008184 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008116:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008118:	429a      	cmp	r2, r3
 800811a:	d133      	bne.n	8008184 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008126:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008128:	429a      	cmp	r2, r3
 800812a:	d12b      	bne.n	8008184 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008134:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008136:	429a      	cmp	r2, r3
 8008138:	d124      	bne.n	8008184 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f958 	bl	80083f0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008140:	e020      	b.n	8008184 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008142:	7bbb      	ldrb	r3, [r7, #14]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d01d      	beq.n	8008184 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	2204      	movs	r2, #4
 800814c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008150:	e018      	b.n	8008184 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f867 	bl	8008226 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 f8da 	bl	8008312 <CDC_ProcessReception>
      break;
 800815e:	e014      	b.n	800818a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008160:	2100      	movs	r1, #0
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f001 f822 	bl	80091ac <USBH_ClrFeature>
 8008168:	4603      	mov	r3, r0
 800816a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800816c:	7bbb      	ldrb	r3, [r7, #14]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10a      	bne.n	8008188 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800817a:	e005      	b.n	8008188 <USBH_CDC_Process+0x120>

    default:
      break;
 800817c:	bf00      	nop
 800817e:	e004      	b.n	800818a <USBH_CDC_Process+0x122>
      break;
 8008180:	bf00      	nop
 8008182:	e002      	b.n	800818a <USBH_CDC_Process+0x122>
      break;
 8008184:	bf00      	nop
 8008186:	e000      	b.n	800818a <USBH_CDC_Process+0x122>
      break;
 8008188:	bf00      	nop

  }

  return status;
 800818a:	7bfb      	ldrb	r3, [r7, #15]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	370c      	adds	r7, #12
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b082      	sub	sp, #8
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	22a1      	movs	r2, #161	; 0xa1
 80081b8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2221      	movs	r2, #33	; 0x21
 80081be:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2207      	movs	r2, #7
 80081d0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2207      	movs	r2, #7
 80081d6:	4619      	mov	r1, r3
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f001 fb23 	bl	8009824 <USBH_CtlReq>
 80081de:	4603      	mov	r3, r0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2221      	movs	r2, #33	; 0x21
 80081f6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2220      	movs	r2, #32
 80081fc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2207      	movs	r2, #7
 800820e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	2207      	movs	r2, #7
 8008214:	4619      	mov	r1, r3
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f001 fb04 	bl	8009824 <USBH_CtlReq>
 800821c:	4603      	mov	r3, r0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b086      	sub	sp, #24
 800822a:	af02      	add	r7, sp, #8
 800822c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008234:	69db      	ldr	r3, [r3, #28]
 8008236:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008238:	2300      	movs	r3, #0
 800823a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008242:	2b01      	cmp	r3, #1
 8008244:	d002      	beq.n	800824c <CDC_ProcessTransmission+0x26>
 8008246:	2b02      	cmp	r3, #2
 8008248:	d023      	beq.n	8008292 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800824a:	e05e      	b.n	800830a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	8b12      	ldrh	r2, [r2, #24]
 8008254:	4293      	cmp	r3, r2
 8008256:	d90b      	bls.n	8008270 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	69d9      	ldr	r1, [r3, #28]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	8b1a      	ldrh	r2, [r3, #24]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	7b5b      	ldrb	r3, [r3, #13]
 8008264:	2001      	movs	r0, #1
 8008266:	9000      	str	r0, [sp, #0]
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f001 fcea 	bl	8009c42 <USBH_BulkSendData>
 800826e:	e00b      	b.n	8008288 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8008278:	b29a      	uxth	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	7b5b      	ldrb	r3, [r3, #13]
 800827e:	2001      	movs	r0, #1
 8008280:	9000      	str	r0, [sp, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f001 fcdd 	bl	8009c42 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2202      	movs	r2, #2
 800828c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008290:	e03b      	b.n	800830a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	7b5b      	ldrb	r3, [r3, #13]
 8008296:	4619      	mov	r1, r3
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f002 f801 	bl	800a2a0 <USBH_LL_GetURBState>
 800829e:	4603      	mov	r3, r0
 80082a0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80082a2:	7afb      	ldrb	r3, [r7, #11]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d128      	bne.n	80082fa <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	8b12      	ldrh	r2, [r2, #24]
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d90e      	bls.n	80082d2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	8b12      	ldrh	r2, [r2, #24]
 80082bc:	1a9a      	subs	r2, r3, r2
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	69db      	ldr	r3, [r3, #28]
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	8b12      	ldrh	r2, [r2, #24]
 80082ca:	441a      	add	r2, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	61da      	str	r2, [r3, #28]
 80082d0:	e002      	b.n	80082d8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d004      	beq.n	80082ea <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80082e8:	e00e      	b.n	8008308 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f868 	bl	80083c8 <USBH_CDC_TransmitCallback>
      break;
 80082f8:	e006      	b.n	8008308 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80082fa:	7afb      	ldrb	r3, [r7, #11]
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d103      	bne.n	8008308 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008308:	bf00      	nop
  }
}
 800830a:	bf00      	nop
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b086      	sub	sp, #24
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008320:	69db      	ldr	r3, [r3, #28]
 8008322:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008324:	2300      	movs	r3, #0
 8008326:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800832e:	2b03      	cmp	r3, #3
 8008330:	d002      	beq.n	8008338 <CDC_ProcessReception+0x26>
 8008332:	2b04      	cmp	r3, #4
 8008334:	d00e      	beq.n	8008354 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008336:	e043      	b.n	80083c0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	6a19      	ldr	r1, [r3, #32]
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	8b5a      	ldrh	r2, [r3, #26]
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	7b1b      	ldrb	r3, [r3, #12]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f001 fca1 	bl	8009c8c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2204      	movs	r2, #4
 800834e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008352:	e035      	b.n	80083c0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	7b1b      	ldrb	r3, [r3, #12]
 8008358:	4619      	mov	r1, r3
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f001 ffa0 	bl	800a2a0 <USBH_LL_GetURBState>
 8008360:	4603      	mov	r3, r0
 8008362:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008364:	7cfb      	ldrb	r3, [r7, #19]
 8008366:	2b01      	cmp	r3, #1
 8008368:	d129      	bne.n	80083be <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	7b1b      	ldrb	r3, [r3, #12]
 800836e:	4619      	mov	r1, r3
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f001 ff03 	bl	800a17c <USBH_LL_GetLastXferSize>
 8008376:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	429a      	cmp	r2, r3
 8008380:	d016      	beq.n	80083b0 <CDC_ProcessReception+0x9e>
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	8b5b      	ldrh	r3, [r3, #26]
 8008386:	461a      	mov	r2, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	4293      	cmp	r3, r2
 800838c:	d910      	bls.n	80083b0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	1ad2      	subs	r2, r2, r3
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	6a1a      	ldr	r2, [r3, #32]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	441a      	add	r2, r3
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	2203      	movs	r2, #3
 80083aa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80083ae:	e006      	b.n	80083be <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 f80f 	bl	80083dc <USBH_CDC_ReceiveCallback>
      break;
 80083be:	bf00      	nop
  }
}
 80083c0:	bf00      	nop
 80083c2:	3718      	adds	r7, #24
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80083e4:	bf00      	nop
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80083f8:	bf00      	nop
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	4613      	mov	r3, r2
 8008410:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d101      	bne.n	800841c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008418:	2302      	movs	r3, #2
 800841a:	e029      	b.n	8008470 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	79fa      	ldrb	r2, [r7, #7]
 8008420:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2200      	movs	r2, #0
 8008428:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008434:	68f8      	ldr	r0, [r7, #12]
 8008436:	f000 f81f 	bl	8008478 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d003      	beq.n	8008468 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f001 fdd3 	bl	800a014 <USBH_LL_Init>

  return USBH_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008480:	2300      	movs	r3, #0
 8008482:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008484:	2300      	movs	r3, #0
 8008486:	60fb      	str	r3, [r7, #12]
 8008488:	e009      	b.n	800849e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	33e0      	adds	r3, #224	; 0xe0
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	4413      	add	r3, r2
 8008494:	2200      	movs	r2, #0
 8008496:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	3301      	adds	r3, #1
 800849c:	60fb      	str	r3, [r7, #12]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2b0f      	cmp	r3, #15
 80084a2:	d9f2      	bls.n	800848a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80084a4:	2300      	movs	r3, #0
 80084a6:	60fb      	str	r3, [r7, #12]
 80084a8:	e009      	b.n	80084be <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	4413      	add	r3, r2
 80084b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80084b4:	2200      	movs	r2, #0
 80084b6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	3301      	adds	r3, #1
 80084bc:	60fb      	str	r3, [r7, #12]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084c4:	d3f1      	bcc.n	80084aa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2240      	movs	r2, #64	; 0x40
 80084ea:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	331c      	adds	r3, #28
 8008516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800851a:	2100      	movs	r1, #0
 800851c:	4618      	mov	r0, r3
 800851e:	f002 f82b 	bl	800a578 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800852c:	2100      	movs	r1, #0
 800852e:	4618      	mov	r0, r3
 8008530:	f002 f822 	bl	800a578 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f203 3326 	addw	r3, r3, #806	; 0x326
 800853a:	2212      	movs	r2, #18
 800853c:	2100      	movs	r1, #0
 800853e:	4618      	mov	r0, r3
 8008540:	f002 f81a 	bl	800a578 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800854a:	223e      	movs	r2, #62	; 0x3e
 800854c:	2100      	movs	r1, #0
 800854e:	4618      	mov	r0, r3
 8008550:	f002 f812 	bl	800a578 <memset>

  return USBH_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800855e:	b480      	push	{r7}
 8008560:	b085      	sub	sp, #20
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
 8008566:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008568:	2300      	movs	r3, #0
 800856a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d016      	beq.n	80085a0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10e      	bne.n	800859a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008582:	1c59      	adds	r1, r3, #1
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	33de      	adds	r3, #222	; 0xde
 800858e:	6839      	ldr	r1, [r7, #0]
 8008590:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008594:	2300      	movs	r3, #0
 8008596:	73fb      	strb	r3, [r7, #15]
 8008598:	e004      	b.n	80085a4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800859a:	2302      	movs	r3, #2
 800859c:	73fb      	strb	r3, [r7, #15]
 800859e:	e001      	b.n	80085a4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80085a0:	2302      	movs	r3, #2
 80085a2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3714      	adds	r7, #20
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr

080085b2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80085b2:	b480      	push	{r7}
 80085b4:	b085      	sub	sp, #20
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
 80085ba:	460b      	mov	r3, r1
 80085bc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80085be:	2300      	movs	r3, #0
 80085c0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80085c8:	78fa      	ldrb	r2, [r7, #3]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d204      	bcs.n	80085d8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	78fa      	ldrb	r2, [r7, #3]
 80085d2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80085d6:	e001      	b.n	80085dc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80085d8:	2302      	movs	r3, #2
 80085da:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b087      	sub	sp, #28
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	4608      	mov	r0, r1
 80085f4:	4611      	mov	r1, r2
 80085f6:	461a      	mov	r2, r3
 80085f8:	4603      	mov	r3, r0
 80085fa:	70fb      	strb	r3, [r7, #3]
 80085fc:	460b      	mov	r3, r1
 80085fe:	70bb      	strb	r3, [r7, #2]
 8008600:	4613      	mov	r3, r2
 8008602:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008604:	2300      	movs	r3, #0
 8008606:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008608:	2300      	movs	r3, #0
 800860a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008612:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008614:	e025      	b.n	8008662 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008616:	7dfb      	ldrb	r3, [r7, #23]
 8008618:	221a      	movs	r2, #26
 800861a:	fb02 f303 	mul.w	r3, r2, r3
 800861e:	3308      	adds	r3, #8
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	4413      	add	r3, r2
 8008624:	3302      	adds	r3, #2
 8008626:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	795b      	ldrb	r3, [r3, #5]
 800862c:	78fa      	ldrb	r2, [r7, #3]
 800862e:	429a      	cmp	r2, r3
 8008630:	d002      	beq.n	8008638 <USBH_FindInterface+0x4e>
 8008632:	78fb      	ldrb	r3, [r7, #3]
 8008634:	2bff      	cmp	r3, #255	; 0xff
 8008636:	d111      	bne.n	800865c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800863c:	78ba      	ldrb	r2, [r7, #2]
 800863e:	429a      	cmp	r2, r3
 8008640:	d002      	beq.n	8008648 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008642:	78bb      	ldrb	r3, [r7, #2]
 8008644:	2bff      	cmp	r3, #255	; 0xff
 8008646:	d109      	bne.n	800865c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800864c:	787a      	ldrb	r2, [r7, #1]
 800864e:	429a      	cmp	r2, r3
 8008650:	d002      	beq.n	8008658 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008652:	787b      	ldrb	r3, [r7, #1]
 8008654:	2bff      	cmp	r3, #255	; 0xff
 8008656:	d101      	bne.n	800865c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008658:	7dfb      	ldrb	r3, [r7, #23]
 800865a:	e006      	b.n	800866a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800865c:	7dfb      	ldrb	r3, [r7, #23]
 800865e:	3301      	adds	r3, #1
 8008660:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008662:	7dfb      	ldrb	r3, [r7, #23]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d9d6      	bls.n	8008616 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008668:	23ff      	movs	r3, #255	; 0xff
}
 800866a:	4618      	mov	r0, r3
 800866c:	371c      	adds	r7, #28
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b082      	sub	sp, #8
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f001 fd04 	bl	800a08c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008684:	2101      	movs	r1, #1
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f001 fe1d 	bl	800a2c6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3708      	adds	r7, #8
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
	...

08008698 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b088      	sub	sp, #32
 800869c:	af04      	add	r7, sp, #16
 800869e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80086a0:	2302      	movs	r3, #2
 80086a2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80086a4:	2300      	movs	r3, #0
 80086a6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d102      	bne.n	80086ba <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2203      	movs	r2, #3
 80086b8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	2b0b      	cmp	r3, #11
 80086c2:	f200 81be 	bhi.w	8008a42 <USBH_Process+0x3aa>
 80086c6:	a201      	add	r2, pc, #4	; (adr r2, 80086cc <USBH_Process+0x34>)
 80086c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086cc:	080086fd 	.word	0x080086fd
 80086d0:	0800872f 	.word	0x0800872f
 80086d4:	08008797 	.word	0x08008797
 80086d8:	080089dd 	.word	0x080089dd
 80086dc:	08008a43 	.word	0x08008a43
 80086e0:	0800883b 	.word	0x0800883b
 80086e4:	08008983 	.word	0x08008983
 80086e8:	08008871 	.word	0x08008871
 80086ec:	08008891 	.word	0x08008891
 80086f0:	080088b1 	.word	0x080088b1
 80086f4:	080088f5 	.word	0x080088f5
 80086f8:	080089c5 	.word	0x080089c5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008702:	b2db      	uxtb	r3, r3
 8008704:	2b00      	cmp	r3, #0
 8008706:	f000 819e 	beq.w	8008a46 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008710:	20c8      	movs	r0, #200	; 0xc8
 8008712:	f001 fe22 	bl	800a35a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f001 fd15 	bl	800a146 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800872c:	e18b      	b.n	8008a46 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008734:	2b01      	cmp	r3, #1
 8008736:	d107      	bne.n	8008748 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2202      	movs	r2, #2
 8008744:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008746:	e18d      	b.n	8008a64 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800874e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008752:	d914      	bls.n	800877e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800875a:	3301      	adds	r3, #1
 800875c:	b2da      	uxtb	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800876a:	2b03      	cmp	r3, #3
 800876c:	d903      	bls.n	8008776 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	220d      	movs	r2, #13
 8008772:	701a      	strb	r2, [r3, #0]
      break;
 8008774:	e176      	b.n	8008a64 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	701a      	strb	r2, [r3, #0]
      break;
 800877c:	e172      	b.n	8008a64 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008784:	f103 020a 	add.w	r2, r3, #10
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800878e:	200a      	movs	r0, #10
 8008790:	f001 fde3 	bl	800a35a <USBH_Delay>
      break;
 8008794:	e166      	b.n	8008a64 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800879c:	2b00      	cmp	r3, #0
 800879e:	d005      	beq.n	80087ac <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80087a6:	2104      	movs	r1, #4
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80087ac:	2064      	movs	r0, #100	; 0x64
 80087ae:	f001 fdd4 	bl	800a35a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f001 fca0 	bl	800a0f8 <USBH_LL_GetSpeed>
 80087b8:	4603      	mov	r3, r0
 80087ba:	461a      	mov	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2205      	movs	r2, #5
 80087c6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80087c8:	2100      	movs	r1, #0
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f001 faab 	bl	8009d26 <USBH_AllocPipe>
 80087d0:	4603      	mov	r3, r0
 80087d2:	461a      	mov	r2, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80087d8:	2180      	movs	r1, #128	; 0x80
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f001 faa3 	bl	8009d26 <USBH_AllocPipe>
 80087e0:	4603      	mov	r3, r0
 80087e2:	461a      	mov	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	7919      	ldrb	r1, [r3, #4]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80087fc:	b292      	uxth	r2, r2
 80087fe:	9202      	str	r2, [sp, #8]
 8008800:	2200      	movs	r2, #0
 8008802:	9201      	str	r2, [sp, #4]
 8008804:	9300      	str	r3, [sp, #0]
 8008806:	4603      	mov	r3, r0
 8008808:	2280      	movs	r2, #128	; 0x80
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f001 fa5c 	bl	8009cc8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	7959      	ldrb	r1, [r3, #5]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008824:	b292      	uxth	r2, r2
 8008826:	9202      	str	r2, [sp, #8]
 8008828:	2200      	movs	r2, #0
 800882a:	9201      	str	r2, [sp, #4]
 800882c:	9300      	str	r3, [sp, #0]
 800882e:	4603      	mov	r3, r0
 8008830:	2200      	movs	r2, #0
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f001 fa48 	bl	8009cc8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008838:	e114      	b.n	8008a64 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f918 	bl	8008a70 <USBH_HandleEnum>
 8008840:	4603      	mov	r3, r0
 8008842:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008844:	7bbb      	ldrb	r3, [r7, #14]
 8008846:	b2db      	uxtb	r3, r3
 8008848:	2b00      	cmp	r3, #0
 800884a:	f040 80fe 	bne.w	8008a4a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800885c:	2b01      	cmp	r3, #1
 800885e:	d103      	bne.n	8008868 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2208      	movs	r2, #8
 8008864:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008866:	e0f0      	b.n	8008a4a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2207      	movs	r2, #7
 800886c:	701a      	strb	r2, [r3, #0]
      break;
 800886e:	e0ec      	b.n	8008a4a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008876:	2b00      	cmp	r3, #0
 8008878:	f000 80e9 	beq.w	8008a4e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008882:	2101      	movs	r1, #1
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2208      	movs	r2, #8
 800888c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800888e:	e0de      	b.n	8008a4e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008896:	b29b      	uxth	r3, r3
 8008898:	4619      	mov	r1, r3
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fc3f 	bl	800911e <USBH_SetCfg>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f040 80d5 	bne.w	8008a52 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2209      	movs	r2, #9
 80088ac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80088ae:	e0d0      	b.n	8008a52 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80088b6:	f003 0320 	and.w	r3, r3, #32
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d016      	beq.n	80088ec <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80088be:	2101      	movs	r1, #1
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fc4f 	bl	8009164 <USBH_SetFeature>
 80088c6:	4603      	mov	r3, r0
 80088c8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80088ca:	7bbb      	ldrb	r3, [r7, #14]
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d103      	bne.n	80088da <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	220a      	movs	r2, #10
 80088d6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80088d8:	e0bd      	b.n	8008a56 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80088da:	7bbb      	ldrb	r3, [r7, #14]
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2b03      	cmp	r3, #3
 80088e0:	f040 80b9 	bne.w	8008a56 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	220a      	movs	r2, #10
 80088e8:	701a      	strb	r2, [r3, #0]
      break;
 80088ea:	e0b4      	b.n	8008a56 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	220a      	movs	r2, #10
 80088f0:	701a      	strb	r2, [r3, #0]
      break;
 80088f2:	e0b0      	b.n	8008a56 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f000 80ad 	beq.w	8008a5a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008908:	2300      	movs	r3, #0
 800890a:	73fb      	strb	r3, [r7, #15]
 800890c:	e016      	b.n	800893c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800890e:	7bfa      	ldrb	r2, [r7, #15]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	32de      	adds	r2, #222	; 0xde
 8008914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008918:	791a      	ldrb	r2, [r3, #4]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008920:	429a      	cmp	r2, r3
 8008922:	d108      	bne.n	8008936 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008924:	7bfa      	ldrb	r2, [r7, #15]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	32de      	adds	r2, #222	; 0xde
 800892a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008934:	e005      	b.n	8008942 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008936:	7bfb      	ldrb	r3, [r7, #15]
 8008938:	3301      	adds	r3, #1
 800893a:	73fb      	strb	r3, [r7, #15]
 800893c:	7bfb      	ldrb	r3, [r7, #15]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d0e5      	beq.n	800890e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008948:	2b00      	cmp	r3, #0
 800894a:	d016      	beq.n	800897a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	4798      	blx	r3
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d109      	bne.n	8008972 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2206      	movs	r2, #6
 8008962:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800896a:	2103      	movs	r1, #3
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008970:	e073      	b.n	8008a5a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	220d      	movs	r2, #13
 8008976:	701a      	strb	r2, [r3, #0]
      break;
 8008978:	e06f      	b.n	8008a5a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	220d      	movs	r2, #13
 800897e:	701a      	strb	r2, [r3, #0]
      break;
 8008980:	e06b      	b.n	8008a5a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008988:	2b00      	cmp	r3, #0
 800898a:	d017      	beq.n	80089bc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	4798      	blx	r3
 8008998:	4603      	mov	r3, r0
 800899a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800899c:	7bbb      	ldrb	r3, [r7, #14]
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d103      	bne.n	80089ac <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	220b      	movs	r2, #11
 80089a8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80089aa:	e058      	b.n	8008a5e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80089ac:	7bbb      	ldrb	r3, [r7, #14]
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d154      	bne.n	8008a5e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	220d      	movs	r2, #13
 80089b8:	701a      	strb	r2, [r3, #0]
      break;
 80089ba:	e050      	b.n	8008a5e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	220d      	movs	r2, #13
 80089c0:	701a      	strb	r2, [r3, #0]
      break;
 80089c2:	e04c      	b.n	8008a5e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d049      	beq.n	8008a62 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089d4:	695b      	ldr	r3, [r3, #20]
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	4798      	blx	r3
      }
      break;
 80089da:	e042      	b.n	8008a62 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f7ff fd47 	bl	8008478 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d009      	beq.n	8008a08 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d005      	beq.n	8008a1e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a18:	2105      	movs	r1, #5
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d107      	bne.n	8008a3a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f7ff fe1f 	bl	8008676 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a38:	e014      	b.n	8008a64 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f001 fb26 	bl	800a08c <USBH_LL_Start>
      break;
 8008a40:	e010      	b.n	8008a64 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008a42:	bf00      	nop
 8008a44:	e00e      	b.n	8008a64 <USBH_Process+0x3cc>
      break;
 8008a46:	bf00      	nop
 8008a48:	e00c      	b.n	8008a64 <USBH_Process+0x3cc>
      break;
 8008a4a:	bf00      	nop
 8008a4c:	e00a      	b.n	8008a64 <USBH_Process+0x3cc>
    break;
 8008a4e:	bf00      	nop
 8008a50:	e008      	b.n	8008a64 <USBH_Process+0x3cc>
      break;
 8008a52:	bf00      	nop
 8008a54:	e006      	b.n	8008a64 <USBH_Process+0x3cc>
      break;
 8008a56:	bf00      	nop
 8008a58:	e004      	b.n	8008a64 <USBH_Process+0x3cc>
      break;
 8008a5a:	bf00      	nop
 8008a5c:	e002      	b.n	8008a64 <USBH_Process+0x3cc>
      break;
 8008a5e:	bf00      	nop
 8008a60:	e000      	b.n	8008a64 <USBH_Process+0x3cc>
      break;
 8008a62:	bf00      	nop
  }
  return USBH_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop

08008a70 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b088      	sub	sp, #32
 8008a74:	af04      	add	r7, sp, #16
 8008a76:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	785b      	ldrb	r3, [r3, #1]
 8008a84:	2b07      	cmp	r3, #7
 8008a86:	f200 81c1 	bhi.w	8008e0c <USBH_HandleEnum+0x39c>
 8008a8a:	a201      	add	r2, pc, #4	; (adr r2, 8008a90 <USBH_HandleEnum+0x20>)
 8008a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a90:	08008ab1 	.word	0x08008ab1
 8008a94:	08008b6f 	.word	0x08008b6f
 8008a98:	08008bd9 	.word	0x08008bd9
 8008a9c:	08008c67 	.word	0x08008c67
 8008aa0:	08008cd1 	.word	0x08008cd1
 8008aa4:	08008d41 	.word	0x08008d41
 8008aa8:	08008d87 	.word	0x08008d87
 8008aac:	08008dcd 	.word	0x08008dcd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008ab0:	2108      	movs	r1, #8
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 fa50 	bl	8008f58 <USBH_Get_DevDesc>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008abc:	7bbb      	ldrb	r3, [r7, #14]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d130      	bne.n	8008b24 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	7919      	ldrb	r1, [r3, #4]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008ae6:	b292      	uxth	r2, r2
 8008ae8:	9202      	str	r2, [sp, #8]
 8008aea:	2200      	movs	r2, #0
 8008aec:	9201      	str	r2, [sp, #4]
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	4603      	mov	r3, r0
 8008af2:	2280      	movs	r2, #128	; 0x80
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f001 f8e7 	bl	8009cc8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	7959      	ldrb	r1, [r3, #5]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008b0e:	b292      	uxth	r2, r2
 8008b10:	9202      	str	r2, [sp, #8]
 8008b12:	2200      	movs	r2, #0
 8008b14:	9201      	str	r2, [sp, #4]
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f001 f8d3 	bl	8009cc8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008b22:	e175      	b.n	8008e10 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b24:	7bbb      	ldrb	r3, [r7, #14]
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	f040 8172 	bne.w	8008e10 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b32:	3301      	adds	r3, #1
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b42:	2b03      	cmp	r3, #3
 8008b44:	d903      	bls.n	8008b4e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	220d      	movs	r2, #13
 8008b4a:	701a      	strb	r2, [r3, #0]
      break;
 8008b4c:	e160      	b.n	8008e10 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	795b      	ldrb	r3, [r3, #5]
 8008b52:	4619      	mov	r1, r3
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f001 f907 	bl	8009d68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	791b      	ldrb	r3, [r3, #4]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f001 f901 	bl	8009d68 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	701a      	strb	r2, [r3, #0]
      break;
 8008b6c:	e150      	b.n	8008e10 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008b6e:	2112      	movs	r1, #18
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f9f1 	bl	8008f58 <USBH_Get_DevDesc>
 8008b76:	4603      	mov	r3, r0
 8008b78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008b7a:	7bbb      	ldrb	r3, [r7, #14]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d103      	bne.n	8008b88 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2202      	movs	r2, #2
 8008b84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008b86:	e145      	b.n	8008e14 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
 8008b8a:	2b03      	cmp	r3, #3
 8008b8c:	f040 8142 	bne.w	8008e14 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b96:	3301      	adds	r3, #1
 8008b98:	b2da      	uxtb	r2, r3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ba6:	2b03      	cmp	r3, #3
 8008ba8:	d903      	bls.n	8008bb2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	220d      	movs	r2, #13
 8008bae:	701a      	strb	r2, [r3, #0]
      break;
 8008bb0:	e130      	b.n	8008e14 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	795b      	ldrb	r3, [r3, #5]
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f001 f8d5 	bl	8009d68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	791b      	ldrb	r3, [r3, #4]
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f001 f8cf 	bl	8009d68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	701a      	strb	r2, [r3, #0]
      break;
 8008bd6:	e11d      	b.n	8008e14 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008bd8:	2101      	movs	r1, #1
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 fa7b 	bl	80090d6 <USBH_SetAddress>
 8008be0:	4603      	mov	r3, r0
 8008be2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008be4:	7bbb      	ldrb	r3, [r7, #14]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d132      	bne.n	8008c50 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008bea:	2002      	movs	r0, #2
 8008bec:	f001 fbb5 	bl	800a35a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2203      	movs	r2, #3
 8008bfc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	7919      	ldrb	r1, [r3, #4]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008c12:	b292      	uxth	r2, r2
 8008c14:	9202      	str	r2, [sp, #8]
 8008c16:	2200      	movs	r2, #0
 8008c18:	9201      	str	r2, [sp, #4]
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2280      	movs	r2, #128	; 0x80
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f001 f851 	bl	8009cc8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	7959      	ldrb	r1, [r3, #5]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c3a:	b292      	uxth	r2, r2
 8008c3c:	9202      	str	r2, [sp, #8]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	9201      	str	r2, [sp, #4]
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	4603      	mov	r3, r0
 8008c46:	2200      	movs	r2, #0
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f001 f83d 	bl	8009cc8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008c4e:	e0e3      	b.n	8008e18 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c50:	7bbb      	ldrb	r3, [r7, #14]
 8008c52:	2b03      	cmp	r3, #3
 8008c54:	f040 80e0 	bne.w	8008e18 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	220d      	movs	r2, #13
 8008c5c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	705a      	strb	r2, [r3, #1]
      break;
 8008c64:	e0d8      	b.n	8008e18 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008c66:	2109      	movs	r1, #9
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 f9a1 	bl	8008fb0 <USBH_Get_CfgDesc>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c72:	7bbb      	ldrb	r3, [r7, #14]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d103      	bne.n	8008c80 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2204      	movs	r2, #4
 8008c7c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008c7e:	e0cd      	b.n	8008e1c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
 8008c82:	2b03      	cmp	r3, #3
 8008c84:	f040 80ca 	bne.w	8008e1c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008c8e:	3301      	adds	r3, #1
 8008c90:	b2da      	uxtb	r2, r3
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008c9e:	2b03      	cmp	r3, #3
 8008ca0:	d903      	bls.n	8008caa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	220d      	movs	r2, #13
 8008ca6:	701a      	strb	r2, [r3, #0]
      break;
 8008ca8:	e0b8      	b.n	8008e1c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	795b      	ldrb	r3, [r3, #5]
 8008cae:	4619      	mov	r1, r3
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f001 f859 	bl	8009d68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	791b      	ldrb	r3, [r3, #4]
 8008cba:	4619      	mov	r1, r3
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f001 f853 	bl	8009d68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	701a      	strb	r2, [r3, #0]
      break;
 8008cce:	e0a5      	b.n	8008e1c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f969 	bl	8008fb0 <USBH_Get_CfgDesc>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ce2:	7bbb      	ldrb	r3, [r7, #14]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d103      	bne.n	8008cf0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2205      	movs	r2, #5
 8008cec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008cee:	e097      	b.n	8008e20 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008cf0:	7bbb      	ldrb	r3, [r7, #14]
 8008cf2:	2b03      	cmp	r3, #3
 8008cf4:	f040 8094 	bne.w	8008e20 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008cfe:	3301      	adds	r3, #1
 8008d00:	b2da      	uxtb	r2, r3
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008d0e:	2b03      	cmp	r3, #3
 8008d10:	d903      	bls.n	8008d1a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	220d      	movs	r2, #13
 8008d16:	701a      	strb	r2, [r3, #0]
      break;
 8008d18:	e082      	b.n	8008e20 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	795b      	ldrb	r3, [r3, #5]
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f001 f821 	bl	8009d68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	791b      	ldrb	r3, [r3, #4]
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f001 f81b 	bl	8009d68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	701a      	strb	r2, [r3, #0]
      break;
 8008d3e:	e06f      	b.n	8008e20 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d019      	beq.n	8008d7e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008d56:	23ff      	movs	r3, #255	; 0xff
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 f953 	bl	8009004 <USBH_Get_StringDesc>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008d62:	7bbb      	ldrb	r3, [r7, #14]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d103      	bne.n	8008d70 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2206      	movs	r2, #6
 8008d6c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008d6e:	e059      	b.n	8008e24 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d70:	7bbb      	ldrb	r3, [r7, #14]
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	d156      	bne.n	8008e24 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2206      	movs	r2, #6
 8008d7a:	705a      	strb	r2, [r3, #1]
      break;
 8008d7c:	e052      	b.n	8008e24 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2206      	movs	r2, #6
 8008d82:	705a      	strb	r2, [r3, #1]
      break;
 8008d84:	e04e      	b.n	8008e24 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d019      	beq.n	8008dc4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008d9c:	23ff      	movs	r3, #255	; 0xff
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f930 	bl	8009004 <USBH_Get_StringDesc>
 8008da4:	4603      	mov	r3, r0
 8008da6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008da8:	7bbb      	ldrb	r3, [r7, #14]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d103      	bne.n	8008db6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2207      	movs	r2, #7
 8008db2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008db4:	e038      	b.n	8008e28 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008db6:	7bbb      	ldrb	r3, [r7, #14]
 8008db8:	2b03      	cmp	r3, #3
 8008dba:	d135      	bne.n	8008e28 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2207      	movs	r2, #7
 8008dc0:	705a      	strb	r2, [r3, #1]
      break;
 8008dc2:	e031      	b.n	8008e28 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2207      	movs	r2, #7
 8008dc8:	705a      	strb	r2, [r3, #1]
      break;
 8008dca:	e02d      	b.n	8008e28 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d017      	beq.n	8008e06 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008de2:	23ff      	movs	r3, #255	; 0xff
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f90d 	bl	8009004 <USBH_Get_StringDesc>
 8008dea:	4603      	mov	r3, r0
 8008dec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008dee:	7bbb      	ldrb	r3, [r7, #14]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d102      	bne.n	8008dfa <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008df4:	2300      	movs	r3, #0
 8008df6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008df8:	e018      	b.n	8008e2c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008dfa:	7bbb      	ldrb	r3, [r7, #14]
 8008dfc:	2b03      	cmp	r3, #3
 8008dfe:	d115      	bne.n	8008e2c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	73fb      	strb	r3, [r7, #15]
      break;
 8008e04:	e012      	b.n	8008e2c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008e06:	2300      	movs	r3, #0
 8008e08:	73fb      	strb	r3, [r7, #15]
      break;
 8008e0a:	e00f      	b.n	8008e2c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008e0c:	bf00      	nop
 8008e0e:	e00e      	b.n	8008e2e <USBH_HandleEnum+0x3be>
      break;
 8008e10:	bf00      	nop
 8008e12:	e00c      	b.n	8008e2e <USBH_HandleEnum+0x3be>
      break;
 8008e14:	bf00      	nop
 8008e16:	e00a      	b.n	8008e2e <USBH_HandleEnum+0x3be>
      break;
 8008e18:	bf00      	nop
 8008e1a:	e008      	b.n	8008e2e <USBH_HandleEnum+0x3be>
      break;
 8008e1c:	bf00      	nop
 8008e1e:	e006      	b.n	8008e2e <USBH_HandleEnum+0x3be>
      break;
 8008e20:	bf00      	nop
 8008e22:	e004      	b.n	8008e2e <USBH_HandleEnum+0x3be>
      break;
 8008e24:	bf00      	nop
 8008e26:	e002      	b.n	8008e2e <USBH_HandleEnum+0x3be>
      break;
 8008e28:	bf00      	nop
 8008e2a:	e000      	b.n	8008e2e <USBH_HandleEnum+0x3be>
      break;
 8008e2c:	bf00      	nop
  }
  return Status;
 8008e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	683a      	ldr	r2, [r7, #0]
 8008e46:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008e4a:	bf00      	nop
 8008e4c:	370c      	adds	r7, #12
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr

08008e56 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b082      	sub	sp, #8
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e64:	1c5a      	adds	r2, r3, #1
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 f804 	bl	8008e7a <USBH_HandleSof>
}
 8008e72:	bf00      	nop
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b082      	sub	sp, #8
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	2b0b      	cmp	r3, #11
 8008e8a:	d10a      	bne.n	8008ea2 <USBH_HandleSof+0x28>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d005      	beq.n	8008ea2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	4798      	blx	r3
  }
}
 8008ea2:	bf00      	nop
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b083      	sub	sp, #12
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008eba:	bf00      	nop
}
 8008ebc:	370c      	adds	r7, #12
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr

08008ec6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008ec6:	b480      	push	{r7}
 8008ec8:	b083      	sub	sp, #12
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008ed6:	bf00      	nop
}
 8008ed8:	370c      	adds	r7, #12
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr

08008ee2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008ee2:	b480      	push	{r7}
 8008ee4:	b083      	sub	sp, #12
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2201      	movs	r2, #1
 8008eee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f001 f8c6 	bl	800a0c2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	791b      	ldrb	r3, [r3, #4]
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 ff13 	bl	8009d68 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	795b      	ldrb	r3, [r3, #5]
 8008f46:	4619      	mov	r1, r3
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 ff0d 	bl	8009d68 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3708      	adds	r7, #8
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af02      	add	r7, sp, #8
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	460b      	mov	r3, r1
 8008f62:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008f64:	887b      	ldrh	r3, [r7, #2]
 8008f66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f6a:	d901      	bls.n	8008f70 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e01b      	b.n	8008fa8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008f76:	887b      	ldrh	r3, [r7, #2]
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f80:	2100      	movs	r1, #0
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f872 	bl	800906c <USBH_GetDescriptor>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008f8c:	7bfb      	ldrb	r3, [r7, #15]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d109      	bne.n	8008fa6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008f98:	887a      	ldrh	r2, [r7, #2]
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f929 	bl	80091f4 <USBH_ParseDevDesc>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b086      	sub	sp, #24
 8008fb4:	af02      	add	r7, sp, #8
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	460b      	mov	r3, r1
 8008fba:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	331c      	adds	r3, #28
 8008fc0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008fc2:	887b      	ldrh	r3, [r7, #2]
 8008fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fc8:	d901      	bls.n	8008fce <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008fca:	2303      	movs	r3, #3
 8008fcc:	e016      	b.n	8008ffc <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008fce:	887b      	ldrh	r3, [r7, #2]
 8008fd0:	9300      	str	r3, [sp, #0]
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fd8:	2100      	movs	r1, #0
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 f846 	bl	800906c <USBH_GetDescriptor>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008fe4:	7bfb      	ldrb	r3, [r7, #15]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d107      	bne.n	8008ffa <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008fea:	887b      	ldrh	r3, [r7, #2]
 8008fec:	461a      	mov	r2, r3
 8008fee:	68b9      	ldr	r1, [r7, #8]
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 f9b3 	bl	800935c <USBH_ParseCfgDesc>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3710      	adds	r7, #16
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b088      	sub	sp, #32
 8009008:	af02      	add	r7, sp, #8
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	607a      	str	r2, [r7, #4]
 800900e:	461a      	mov	r2, r3
 8009010:	460b      	mov	r3, r1
 8009012:	72fb      	strb	r3, [r7, #11]
 8009014:	4613      	mov	r3, r2
 8009016:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009018:	893b      	ldrh	r3, [r7, #8]
 800901a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800901e:	d802      	bhi.n	8009026 <USBH_Get_StringDesc+0x22>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d101      	bne.n	800902a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009026:	2303      	movs	r3, #3
 8009028:	e01c      	b.n	8009064 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800902a:	7afb      	ldrb	r3, [r7, #11]
 800902c:	b29b      	uxth	r3, r3
 800902e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009032:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800903a:	893b      	ldrh	r3, [r7, #8]
 800903c:	9300      	str	r3, [sp, #0]
 800903e:	460b      	mov	r3, r1
 8009040:	2100      	movs	r1, #0
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f000 f812 	bl	800906c <USBH_GetDescriptor>
 8009048:	4603      	mov	r3, r0
 800904a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800904c:	7dfb      	ldrb	r3, [r7, #23]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d107      	bne.n	8009062 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009058:	893a      	ldrh	r2, [r7, #8]
 800905a:	6879      	ldr	r1, [r7, #4]
 800905c:	4618      	mov	r0, r3
 800905e:	f000 fb93 	bl	8009788 <USBH_ParseStringDesc>
  }

  return status;
 8009062:	7dfb      	ldrb	r3, [r7, #23]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3718      	adds	r7, #24
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	607b      	str	r3, [r7, #4]
 8009076:	460b      	mov	r3, r1
 8009078:	72fb      	strb	r3, [r7, #11]
 800907a:	4613      	mov	r3, r2
 800907c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	789b      	ldrb	r3, [r3, #2]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d11c      	bne.n	80090c0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009086:	7afb      	ldrb	r3, [r7, #11]
 8009088:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800908c:	b2da      	uxtb	r2, r3
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2206      	movs	r2, #6
 8009096:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	893a      	ldrh	r2, [r7, #8]
 800909c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800909e:	893b      	ldrh	r3, [r7, #8]
 80090a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80090a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090a8:	d104      	bne.n	80090b4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f240 4209 	movw	r2, #1033	; 0x409
 80090b0:	829a      	strh	r2, [r3, #20]
 80090b2:	e002      	b.n	80090ba <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2200      	movs	r2, #0
 80090b8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	8b3a      	ldrh	r2, [r7, #24]
 80090be:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80090c0:	8b3b      	ldrh	r3, [r7, #24]
 80090c2:	461a      	mov	r2, r3
 80090c4:	6879      	ldr	r1, [r7, #4]
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	f000 fbac 	bl	8009824 <USBH_CtlReq>
 80090cc:	4603      	mov	r3, r0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b082      	sub	sp, #8
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
 80090de:	460b      	mov	r3, r1
 80090e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	789b      	ldrb	r3, [r3, #2]
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d10f      	bne.n	800910a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2205      	movs	r2, #5
 80090f4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80090f6:	78fb      	ldrb	r3, [r7, #3]
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800910a:	2200      	movs	r2, #0
 800910c:	2100      	movs	r1, #0
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 fb88 	bl	8009824 <USBH_CtlReq>
 8009114:	4603      	mov	r3, r0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800911e:	b580      	push	{r7, lr}
 8009120:	b082      	sub	sp, #8
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
 8009126:	460b      	mov	r3, r1
 8009128:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	789b      	ldrb	r3, [r3, #2]
 800912e:	2b01      	cmp	r3, #1
 8009130:	d10e      	bne.n	8009150 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2209      	movs	r2, #9
 800913c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	887a      	ldrh	r2, [r7, #2]
 8009142:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009150:	2200      	movs	r2, #0
 8009152:	2100      	movs	r1, #0
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 fb65 	bl	8009824 <USBH_CtlReq>
 800915a:	4603      	mov	r3, r0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3708      	adds	r7, #8
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	460b      	mov	r3, r1
 800916e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	789b      	ldrb	r3, [r3, #2]
 8009174:	2b01      	cmp	r3, #1
 8009176:	d10f      	bne.n	8009198 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2203      	movs	r2, #3
 8009182:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009184:	78fb      	ldrb	r3, [r7, #3]
 8009186:	b29a      	uxth	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009198:	2200      	movs	r2, #0
 800919a:	2100      	movs	r1, #0
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fb41 	bl	8009824 <USBH_CtlReq>
 80091a2:	4603      	mov	r3, r0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	460b      	mov	r3, r1
 80091b6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	789b      	ldrb	r3, [r3, #2]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d10f      	bne.n	80091e0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2202      	movs	r2, #2
 80091c4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2201      	movs	r2, #1
 80091ca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80091d2:	78fb      	ldrb	r3, [r7, #3]
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80091e0:	2200      	movs	r2, #0
 80091e2:	2100      	movs	r1, #0
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 fb1d 	bl	8009824 <USBH_CtlReq>
 80091ea:	4603      	mov	r3, r0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b087      	sub	sp, #28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	4613      	mov	r3, r2
 8009200:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f203 3326 	addw	r3, r3, #806	; 0x326
 8009208:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d101      	bne.n	8009218 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009214:	2302      	movs	r3, #2
 8009216:	e098      	b.n	800934a <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	781a      	ldrb	r2, [r3, #0]
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	785a      	ldrb	r2, [r3, #1]
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	3302      	adds	r3, #2
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	b29a      	uxth	r2, r3
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	3303      	adds	r3, #3
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	b29b      	uxth	r3, r3
 8009238:	021b      	lsls	r3, r3, #8
 800923a:	b29b      	uxth	r3, r3
 800923c:	4313      	orrs	r3, r2
 800923e:	b29a      	uxth	r2, r3
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	791a      	ldrb	r2, [r3, #4]
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	795a      	ldrb	r2, [r3, #5]
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	799a      	ldrb	r2, [r3, #6]
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	79da      	ldrb	r2, [r3, #7]
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800926a:	2b00      	cmp	r3, #0
 800926c:	d004      	beq.n	8009278 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009274:	2b01      	cmp	r3, #1
 8009276:	d11b      	bne.n	80092b0 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	79db      	ldrb	r3, [r3, #7]
 800927c:	2b20      	cmp	r3, #32
 800927e:	dc0f      	bgt.n	80092a0 <USBH_ParseDevDesc+0xac>
 8009280:	2b08      	cmp	r3, #8
 8009282:	db0f      	blt.n	80092a4 <USBH_ParseDevDesc+0xb0>
 8009284:	3b08      	subs	r3, #8
 8009286:	4a34      	ldr	r2, [pc, #208]	; (8009358 <USBH_ParseDevDesc+0x164>)
 8009288:	fa22 f303 	lsr.w	r3, r2, r3
 800928c:	f003 0301 	and.w	r3, r3, #1
 8009290:	2b00      	cmp	r3, #0
 8009292:	bf14      	ite	ne
 8009294:	2301      	movne	r3, #1
 8009296:	2300      	moveq	r3, #0
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b00      	cmp	r3, #0
 800929c:	d106      	bne.n	80092ac <USBH_ParseDevDesc+0xb8>
 800929e:	e001      	b.n	80092a4 <USBH_ParseDevDesc+0xb0>
 80092a0:	2b40      	cmp	r3, #64	; 0x40
 80092a2:	d003      	beq.n	80092ac <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	2208      	movs	r2, #8
 80092a8:	71da      	strb	r2, [r3, #7]
        break;
 80092aa:	e000      	b.n	80092ae <USBH_ParseDevDesc+0xba>
        break;
 80092ac:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80092ae:	e00e      	b.n	80092ce <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	d107      	bne.n	80092ca <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	79db      	ldrb	r3, [r3, #7]
 80092be:	2b08      	cmp	r3, #8
 80092c0:	d005      	beq.n	80092ce <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	2208      	movs	r2, #8
 80092c6:	71da      	strb	r2, [r3, #7]
 80092c8:	e001      	b.n	80092ce <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80092ca:	2303      	movs	r3, #3
 80092cc:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80092ce:	88fb      	ldrh	r3, [r7, #6]
 80092d0:	2b08      	cmp	r3, #8
 80092d2:	d939      	bls.n	8009348 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	3308      	adds	r3, #8
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	b29a      	uxth	r2, r3
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	3309      	adds	r3, #9
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	021b      	lsls	r3, r3, #8
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	4313      	orrs	r3, r2
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	330a      	adds	r3, #10
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	b29a      	uxth	r2, r3
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	330b      	adds	r3, #11
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	b29b      	uxth	r3, r3
 8009300:	021b      	lsls	r3, r3, #8
 8009302:	b29b      	uxth	r3, r3
 8009304:	4313      	orrs	r3, r2
 8009306:	b29a      	uxth	r2, r3
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	330c      	adds	r3, #12
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	b29a      	uxth	r2, r3
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	330d      	adds	r3, #13
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	b29b      	uxth	r3, r3
 800931c:	021b      	lsls	r3, r3, #8
 800931e:	b29b      	uxth	r3, r3
 8009320:	4313      	orrs	r3, r2
 8009322:	b29a      	uxth	r2, r3
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	7b9a      	ldrb	r2, [r3, #14]
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	7bda      	ldrb	r2, [r3, #15]
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	7c1a      	ldrb	r2, [r3, #16]
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	7c5a      	ldrb	r2, [r3, #17]
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009348:	7dfb      	ldrb	r3, [r7, #23]
}
 800934a:	4618      	mov	r0, r3
 800934c:	371c      	adds	r7, #28
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr
 8009356:	bf00      	nop
 8009358:	01000101 	.word	0x01000101

0800935c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b08c      	sub	sp, #48	; 0x30
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	4613      	mov	r3, r2
 8009368:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009370:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009372:	2300      	movs	r3, #0
 8009374:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009378:	2300      	movs	r3, #0
 800937a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800937e:	2300      	movs	r3, #0
 8009380:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d101      	bne.n	800938e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800938a:	2302      	movs	r3, #2
 800938c:	e0db      	b.n	8009546 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	781a      	ldrb	r2, [r3, #0]
 8009396:	6a3b      	ldr	r3, [r7, #32]
 8009398:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	785a      	ldrb	r2, [r3, #1]
 800939e:	6a3b      	ldr	r3, [r7, #32]
 80093a0:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	3302      	adds	r3, #2
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	3303      	adds	r3, #3
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	021b      	lsls	r3, r3, #8
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	4313      	orrs	r3, r2
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093be:	bf28      	it	cs
 80093c0:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	6a3b      	ldr	r3, [r7, #32]
 80093c8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	791a      	ldrb	r2, [r3, #4]
 80093ce:	6a3b      	ldr	r3, [r7, #32]
 80093d0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	795a      	ldrb	r2, [r3, #5]
 80093d6:	6a3b      	ldr	r3, [r7, #32]
 80093d8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	799a      	ldrb	r2, [r3, #6]
 80093de:	6a3b      	ldr	r3, [r7, #32]
 80093e0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	79da      	ldrb	r2, [r3, #7]
 80093e6:	6a3b      	ldr	r3, [r7, #32]
 80093e8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	7a1a      	ldrb	r2, [r3, #8]
 80093ee:	6a3b      	ldr	r3, [r7, #32]
 80093f0:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80093f2:	6a3b      	ldr	r3, [r7, #32]
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	2b09      	cmp	r3, #9
 80093f8:	d002      	beq.n	8009400 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80093fa:	6a3b      	ldr	r3, [r7, #32]
 80093fc:	2209      	movs	r2, #9
 80093fe:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009400:	88fb      	ldrh	r3, [r7, #6]
 8009402:	2b09      	cmp	r3, #9
 8009404:	f240 809d 	bls.w	8009542 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 8009408:	2309      	movs	r3, #9
 800940a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800940c:	2300      	movs	r3, #0
 800940e:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009410:	e081      	b.n	8009516 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009412:	f107 0316 	add.w	r3, r7, #22
 8009416:	4619      	mov	r1, r3
 8009418:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800941a:	f000 f9e8 	bl	80097ee <USBH_GetNextDesc>
 800941e:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009422:	785b      	ldrb	r3, [r3, #1]
 8009424:	2b04      	cmp	r3, #4
 8009426:	d176      	bne.n	8009516 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	2b09      	cmp	r3, #9
 800942e:	d002      	beq.n	8009436 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009432:	2209      	movs	r2, #9
 8009434:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009436:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800943a:	221a      	movs	r2, #26
 800943c:	fb02 f303 	mul.w	r3, r2, r3
 8009440:	3308      	adds	r3, #8
 8009442:	6a3a      	ldr	r2, [r7, #32]
 8009444:	4413      	add	r3, r2
 8009446:	3302      	adds	r3, #2
 8009448:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800944a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800944c:	69f8      	ldr	r0, [r7, #28]
 800944e:	f000 f87e 	bl	800954e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009452:	2300      	movs	r3, #0
 8009454:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009458:	2300      	movs	r3, #0
 800945a:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800945c:	e043      	b.n	80094e6 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800945e:	f107 0316 	add.w	r3, r7, #22
 8009462:	4619      	mov	r1, r3
 8009464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009466:	f000 f9c2 	bl	80097ee <USBH_GetNextDesc>
 800946a:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800946c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946e:	785b      	ldrb	r3, [r3, #1]
 8009470:	2b05      	cmp	r3, #5
 8009472:	d138      	bne.n	80094e6 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	795b      	ldrb	r3, [r3, #5]
 8009478:	2b01      	cmp	r3, #1
 800947a:	d113      	bne.n	80094a4 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009480:	2b02      	cmp	r3, #2
 8009482:	d003      	beq.n	800948c <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	799b      	ldrb	r3, [r3, #6]
 8009488:	2b03      	cmp	r3, #3
 800948a:	d10b      	bne.n	80094a4 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	79db      	ldrb	r3, [r3, #7]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d10b      	bne.n	80094ac <USBH_ParseCfgDesc+0x150>
 8009494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	2b09      	cmp	r3, #9
 800949a:	d007      	beq.n	80094ac <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800949c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949e:	2209      	movs	r2, #9
 80094a0:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80094a2:	e003      	b.n	80094ac <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80094a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a6:	2207      	movs	r2, #7
 80094a8:	701a      	strb	r2, [r3, #0]
 80094aa:	e000      	b.n	80094ae <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80094ac:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80094ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094b2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80094b6:	3201      	adds	r2, #1
 80094b8:	00d2      	lsls	r2, r2, #3
 80094ba:	211a      	movs	r1, #26
 80094bc:	fb01 f303 	mul.w	r3, r1, r3
 80094c0:	4413      	add	r3, r2
 80094c2:	3308      	adds	r3, #8
 80094c4:	6a3a      	ldr	r2, [r7, #32]
 80094c6:	4413      	add	r3, r2
 80094c8:	3304      	adds	r3, #4
 80094ca:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80094cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094ce:	69b9      	ldr	r1, [r7, #24]
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f000 f870 	bl	80095b6 <USBH_ParseEPDesc>
 80094d6:	4603      	mov	r3, r0
 80094d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80094dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80094e0:	3301      	adds	r3, #1
 80094e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	791b      	ldrb	r3, [r3, #4]
 80094ea:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d204      	bcs.n	80094fc <USBH_ParseCfgDesc+0x1a0>
 80094f2:	6a3b      	ldr	r3, [r7, #32]
 80094f4:	885a      	ldrh	r2, [r3, #2]
 80094f6:	8afb      	ldrh	r3, [r7, #22]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d8b0      	bhi.n	800945e <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	791b      	ldrb	r3, [r3, #4]
 8009500:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009504:	429a      	cmp	r2, r3
 8009506:	d201      	bcs.n	800950c <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 8009508:	2303      	movs	r3, #3
 800950a:	e01c      	b.n	8009546 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800950c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009510:	3301      	adds	r3, #1
 8009512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009516:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800951a:	2b01      	cmp	r3, #1
 800951c:	d805      	bhi.n	800952a <USBH_ParseCfgDesc+0x1ce>
 800951e:	6a3b      	ldr	r3, [r7, #32]
 8009520:	885a      	ldrh	r2, [r3, #2]
 8009522:	8afb      	ldrh	r3, [r7, #22]
 8009524:	429a      	cmp	r2, r3
 8009526:	f63f af74 	bhi.w	8009412 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800952a:	6a3b      	ldr	r3, [r7, #32]
 800952c:	791b      	ldrb	r3, [r3, #4]
 800952e:	2b02      	cmp	r3, #2
 8009530:	bf28      	it	cs
 8009532:	2302      	movcs	r3, #2
 8009534:	b2db      	uxtb	r3, r3
 8009536:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800953a:	429a      	cmp	r2, r3
 800953c:	d201      	bcs.n	8009542 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800953e:	2303      	movs	r3, #3
 8009540:	e001      	b.n	8009546 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 8009542:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009546:	4618      	mov	r0, r3
 8009548:	3730      	adds	r7, #48	; 0x30
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800954e:	b480      	push	{r7}
 8009550:	b083      	sub	sp, #12
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
 8009556:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	781a      	ldrb	r2, [r3, #0]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	785a      	ldrb	r2, [r3, #1]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	789a      	ldrb	r2, [r3, #2]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	78da      	ldrb	r2, [r3, #3]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	3304      	adds	r3, #4
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	2b02      	cmp	r3, #2
 8009580:	bf28      	it	cs
 8009582:	2302      	movcs	r3, #2
 8009584:	b2da      	uxtb	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	795a      	ldrb	r2, [r3, #5]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	799a      	ldrb	r2, [r3, #6]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	79da      	ldrb	r2, [r3, #7]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	7a1a      	ldrb	r2, [r3, #8]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	721a      	strb	r2, [r3, #8]
}
 80095aa:	bf00      	nop
 80095ac:	370c      	adds	r7, #12
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr

080095b6 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80095b6:	b480      	push	{r7}
 80095b8:	b087      	sub	sp, #28
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	60f8      	str	r0, [r7, #12]
 80095be:	60b9      	str	r1, [r7, #8]
 80095c0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80095c2:	2300      	movs	r3, #0
 80095c4:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	781a      	ldrb	r2, [r3, #0]
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	785a      	ldrb	r2, [r3, #1]
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	789a      	ldrb	r2, [r3, #2]
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	78da      	ldrb	r2, [r3, #3]
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	3304      	adds	r3, #4
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	3305      	adds	r3, #5
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	021b      	lsls	r3, r3, #8
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	4313      	orrs	r3, r2
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	799a      	ldrb	r2, [r3, #6]
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	889b      	ldrh	r3, [r3, #4]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d009      	beq.n	8009626 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800961a:	d804      	bhi.n	8009626 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009624:	d901      	bls.n	800962a <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8009626:	2303      	movs	r3, #3
 8009628:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009630:	2b00      	cmp	r3, #0
 8009632:	d136      	bne.n	80096a2 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	78db      	ldrb	r3, [r3, #3]
 8009638:	f003 0303 	and.w	r3, r3, #3
 800963c:	2b02      	cmp	r3, #2
 800963e:	d108      	bne.n	8009652 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	889b      	ldrh	r3, [r3, #4]
 8009644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009648:	f240 8097 	bls.w	800977a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800964c:	2303      	movs	r3, #3
 800964e:	75fb      	strb	r3, [r7, #23]
 8009650:	e093      	b.n	800977a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	78db      	ldrb	r3, [r3, #3]
 8009656:	f003 0303 	and.w	r3, r3, #3
 800965a:	2b00      	cmp	r3, #0
 800965c:	d107      	bne.n	800966e <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	889b      	ldrh	r3, [r3, #4]
 8009662:	2b40      	cmp	r3, #64	; 0x40
 8009664:	f240 8089 	bls.w	800977a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009668:	2303      	movs	r3, #3
 800966a:	75fb      	strb	r3, [r7, #23]
 800966c:	e085      	b.n	800977a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	78db      	ldrb	r3, [r3, #3]
 8009672:	f003 0303 	and.w	r3, r3, #3
 8009676:	2b01      	cmp	r3, #1
 8009678:	d005      	beq.n	8009686 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	78db      	ldrb	r3, [r3, #3]
 800967e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009682:	2b03      	cmp	r3, #3
 8009684:	d10a      	bne.n	800969c <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	799b      	ldrb	r3, [r3, #6]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d003      	beq.n	8009696 <USBH_ParseEPDesc+0xe0>
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	799b      	ldrb	r3, [r3, #6]
 8009692:	2b10      	cmp	r3, #16
 8009694:	d970      	bls.n	8009778 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009696:	2303      	movs	r3, #3
 8009698:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800969a:	e06d      	b.n	8009778 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800969c:	2303      	movs	r3, #3
 800969e:	75fb      	strb	r3, [r7, #23]
 80096a0:	e06b      	b.n	800977a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d13c      	bne.n	8009726 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	78db      	ldrb	r3, [r3, #3]
 80096b0:	f003 0303 	and.w	r3, r3, #3
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d005      	beq.n	80096c4 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	78db      	ldrb	r3, [r3, #3]
 80096bc:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d106      	bne.n	80096d2 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	889b      	ldrh	r3, [r3, #4]
 80096c8:	2b40      	cmp	r3, #64	; 0x40
 80096ca:	d956      	bls.n	800977a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80096cc:	2303      	movs	r3, #3
 80096ce:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80096d0:	e053      	b.n	800977a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	78db      	ldrb	r3, [r3, #3]
 80096d6:	f003 0303 	and.w	r3, r3, #3
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d10e      	bne.n	80096fc <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	799b      	ldrb	r3, [r3, #6]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d007      	beq.n	80096f6 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80096ea:	2b10      	cmp	r3, #16
 80096ec:	d803      	bhi.n	80096f6 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80096f2:	2b40      	cmp	r3, #64	; 0x40
 80096f4:	d941      	bls.n	800977a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80096f6:	2303      	movs	r3, #3
 80096f8:	75fb      	strb	r3, [r7, #23]
 80096fa:	e03e      	b.n	800977a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	78db      	ldrb	r3, [r3, #3]
 8009700:	f003 0303 	and.w	r3, r3, #3
 8009704:	2b03      	cmp	r3, #3
 8009706:	d10b      	bne.n	8009720 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	799b      	ldrb	r3, [r3, #6]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d004      	beq.n	800971a <USBH_ParseEPDesc+0x164>
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	889b      	ldrh	r3, [r3, #4]
 8009714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009718:	d32f      	bcc.n	800977a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800971a:	2303      	movs	r3, #3
 800971c:	75fb      	strb	r3, [r7, #23]
 800971e:	e02c      	b.n	800977a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009720:	2303      	movs	r3, #3
 8009722:	75fb      	strb	r3, [r7, #23]
 8009724:	e029      	b.n	800977a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800972c:	2b02      	cmp	r3, #2
 800972e:	d120      	bne.n	8009772 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	78db      	ldrb	r3, [r3, #3]
 8009734:	f003 0303 	and.w	r3, r3, #3
 8009738:	2b00      	cmp	r3, #0
 800973a:	d106      	bne.n	800974a <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	889b      	ldrh	r3, [r3, #4]
 8009740:	2b08      	cmp	r3, #8
 8009742:	d01a      	beq.n	800977a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009744:	2303      	movs	r3, #3
 8009746:	75fb      	strb	r3, [r7, #23]
 8009748:	e017      	b.n	800977a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	78db      	ldrb	r3, [r3, #3]
 800974e:	f003 0303 	and.w	r3, r3, #3
 8009752:	2b03      	cmp	r3, #3
 8009754:	d10a      	bne.n	800976c <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	799b      	ldrb	r3, [r3, #6]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d003      	beq.n	8009766 <USBH_ParseEPDesc+0x1b0>
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	889b      	ldrh	r3, [r3, #4]
 8009762:	2b08      	cmp	r3, #8
 8009764:	d909      	bls.n	800977a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009766:	2303      	movs	r3, #3
 8009768:	75fb      	strb	r3, [r7, #23]
 800976a:	e006      	b.n	800977a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800976c:	2303      	movs	r3, #3
 800976e:	75fb      	strb	r3, [r7, #23]
 8009770:	e003      	b.n	800977a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009772:	2303      	movs	r3, #3
 8009774:	75fb      	strb	r3, [r7, #23]
 8009776:	e000      	b.n	800977a <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009778:	bf00      	nop
  }

  return status;
 800977a:	7dfb      	ldrb	r3, [r7, #23]
}
 800977c:	4618      	mov	r0, r3
 800977e:	371c      	adds	r7, #28
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009788:	b480      	push	{r7}
 800978a:	b087      	sub	sp, #28
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	4613      	mov	r3, r2
 8009794:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	3301      	adds	r3, #1
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	2b03      	cmp	r3, #3
 800979e:	d120      	bne.n	80097e2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	1e9a      	subs	r2, r3, #2
 80097a6:	88fb      	ldrh	r3, [r7, #6]
 80097a8:	4293      	cmp	r3, r2
 80097aa:	bf28      	it	cs
 80097ac:	4613      	movcs	r3, r2
 80097ae:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	3302      	adds	r3, #2
 80097b4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80097b6:	2300      	movs	r3, #0
 80097b8:	82fb      	strh	r3, [r7, #22]
 80097ba:	e00b      	b.n	80097d4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80097bc:	8afb      	ldrh	r3, [r7, #22]
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	4413      	add	r3, r2
 80097c2:	781a      	ldrb	r2, [r3, #0]
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	3301      	adds	r3, #1
 80097cc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80097ce:	8afb      	ldrh	r3, [r7, #22]
 80097d0:	3302      	adds	r3, #2
 80097d2:	82fb      	strh	r3, [r7, #22]
 80097d4:	8afa      	ldrh	r2, [r7, #22]
 80097d6:	8abb      	ldrh	r3, [r7, #20]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d3ef      	bcc.n	80097bc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	2200      	movs	r2, #0
 80097e0:	701a      	strb	r2, [r3, #0]
  }
}
 80097e2:	bf00      	nop
 80097e4:	371c      	adds	r7, #28
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b085      	sub	sp, #20
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	881a      	ldrh	r2, [r3, #0]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	b29b      	uxth	r3, r3
 8009802:	4413      	add	r3, r2
 8009804:	b29a      	uxth	r2, r3
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4413      	add	r3, r2
 8009814:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009816:	68fb      	ldr	r3, [r7, #12]
}
 8009818:	4618      	mov	r0, r3
 800981a:	3714      	adds	r7, #20
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b086      	sub	sp, #24
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	4613      	mov	r3, r2
 8009830:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009832:	2301      	movs	r3, #1
 8009834:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	789b      	ldrb	r3, [r3, #2]
 800983a:	2b01      	cmp	r3, #1
 800983c:	d002      	beq.n	8009844 <USBH_CtlReq+0x20>
 800983e:	2b02      	cmp	r3, #2
 8009840:	d00f      	beq.n	8009862 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009842:	e027      	b.n	8009894 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	68ba      	ldr	r2, [r7, #8]
 8009848:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	88fa      	ldrh	r2, [r7, #6]
 800984e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2201      	movs	r2, #1
 8009854:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2202      	movs	r2, #2
 800985a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800985c:	2301      	movs	r3, #1
 800985e:	75fb      	strb	r3, [r7, #23]
      break;
 8009860:	e018      	b.n	8009894 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f000 f81c 	bl	80098a0 <USBH_HandleControl>
 8009868:	4603      	mov	r3, r0
 800986a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800986c:	7dfb      	ldrb	r3, [r7, #23]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d002      	beq.n	8009878 <USBH_CtlReq+0x54>
 8009872:	7dfb      	ldrb	r3, [r7, #23]
 8009874:	2b03      	cmp	r3, #3
 8009876:	d106      	bne.n	8009886 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2201      	movs	r2, #1
 800987c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2200      	movs	r2, #0
 8009882:	761a      	strb	r2, [r3, #24]
      break;
 8009884:	e005      	b.n	8009892 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009886:	7dfb      	ldrb	r3, [r7, #23]
 8009888:	2b02      	cmp	r3, #2
 800988a:	d102      	bne.n	8009892 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2201      	movs	r2, #1
 8009890:	709a      	strb	r2, [r3, #2]
      break;
 8009892:	bf00      	nop
  }
  return status;
 8009894:	7dfb      	ldrb	r3, [r7, #23]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3718      	adds	r7, #24
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
	...

080098a0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b086      	sub	sp, #24
 80098a4:	af02      	add	r7, sp, #8
 80098a6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80098a8:	2301      	movs	r3, #1
 80098aa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80098ac:	2300      	movs	r3, #0
 80098ae:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	7e1b      	ldrb	r3, [r3, #24]
 80098b4:	3b01      	subs	r3, #1
 80098b6:	2b0a      	cmp	r3, #10
 80098b8:	f200 8156 	bhi.w	8009b68 <USBH_HandleControl+0x2c8>
 80098bc:	a201      	add	r2, pc, #4	; (adr r2, 80098c4 <USBH_HandleControl+0x24>)
 80098be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c2:	bf00      	nop
 80098c4:	080098f1 	.word	0x080098f1
 80098c8:	0800990b 	.word	0x0800990b
 80098cc:	08009975 	.word	0x08009975
 80098d0:	0800999b 	.word	0x0800999b
 80098d4:	080099d3 	.word	0x080099d3
 80098d8:	080099fd 	.word	0x080099fd
 80098dc:	08009a4f 	.word	0x08009a4f
 80098e0:	08009a71 	.word	0x08009a71
 80098e4:	08009aad 	.word	0x08009aad
 80098e8:	08009ad3 	.word	0x08009ad3
 80098ec:	08009b11 	.word	0x08009b11
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f103 0110 	add.w	r1, r3, #16
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	795b      	ldrb	r3, [r3, #5]
 80098fa:	461a      	mov	r2, r3
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 f943 	bl	8009b88 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2202      	movs	r2, #2
 8009906:	761a      	strb	r2, [r3, #24]
      break;
 8009908:	e139      	b.n	8009b7e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	795b      	ldrb	r3, [r3, #5]
 800990e:	4619      	mov	r1, r3
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 fcc5 	bl	800a2a0 <USBH_LL_GetURBState>
 8009916:	4603      	mov	r3, r0
 8009918:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800991a:	7bbb      	ldrb	r3, [r7, #14]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d11e      	bne.n	800995e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	7c1b      	ldrb	r3, [r3, #16]
 8009924:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009928:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	8adb      	ldrh	r3, [r3, #22]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00a      	beq.n	8009948 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009932:	7b7b      	ldrb	r3, [r7, #13]
 8009934:	2b80      	cmp	r3, #128	; 0x80
 8009936:	d103      	bne.n	8009940 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2203      	movs	r2, #3
 800993c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800993e:	e115      	b.n	8009b6c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2205      	movs	r2, #5
 8009944:	761a      	strb	r2, [r3, #24]
      break;
 8009946:	e111      	b.n	8009b6c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009948:	7b7b      	ldrb	r3, [r7, #13]
 800994a:	2b80      	cmp	r3, #128	; 0x80
 800994c:	d103      	bne.n	8009956 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2209      	movs	r2, #9
 8009952:	761a      	strb	r2, [r3, #24]
      break;
 8009954:	e10a      	b.n	8009b6c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2207      	movs	r2, #7
 800995a:	761a      	strb	r2, [r3, #24]
      break;
 800995c:	e106      	b.n	8009b6c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800995e:	7bbb      	ldrb	r3, [r7, #14]
 8009960:	2b04      	cmp	r3, #4
 8009962:	d003      	beq.n	800996c <USBH_HandleControl+0xcc>
 8009964:	7bbb      	ldrb	r3, [r7, #14]
 8009966:	2b02      	cmp	r3, #2
 8009968:	f040 8100 	bne.w	8009b6c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	220b      	movs	r2, #11
 8009970:	761a      	strb	r2, [r3, #24]
      break;
 8009972:	e0fb      	b.n	8009b6c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800997a:	b29a      	uxth	r2, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6899      	ldr	r1, [r3, #8]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	899a      	ldrh	r2, [r3, #12]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	791b      	ldrb	r3, [r3, #4]
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f93a 	bl	8009c06 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2204      	movs	r2, #4
 8009996:	761a      	strb	r2, [r3, #24]
      break;
 8009998:	e0f1      	b.n	8009b7e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	791b      	ldrb	r3, [r3, #4]
 800999e:	4619      	mov	r1, r3
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 fc7d 	bl	800a2a0 <USBH_LL_GetURBState>
 80099a6:	4603      	mov	r3, r0
 80099a8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80099aa:	7bbb      	ldrb	r3, [r7, #14]
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d102      	bne.n	80099b6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2209      	movs	r2, #9
 80099b4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80099b6:	7bbb      	ldrb	r3, [r7, #14]
 80099b8:	2b05      	cmp	r3, #5
 80099ba:	d102      	bne.n	80099c2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80099bc:	2303      	movs	r3, #3
 80099be:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80099c0:	e0d6      	b.n	8009b70 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80099c2:	7bbb      	ldrb	r3, [r7, #14]
 80099c4:	2b04      	cmp	r3, #4
 80099c6:	f040 80d3 	bne.w	8009b70 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	220b      	movs	r2, #11
 80099ce:	761a      	strb	r2, [r3, #24]
      break;
 80099d0:	e0ce      	b.n	8009b70 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6899      	ldr	r1, [r3, #8]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	899a      	ldrh	r2, [r3, #12]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	795b      	ldrb	r3, [r3, #5]
 80099de:	2001      	movs	r0, #1
 80099e0:	9000      	str	r0, [sp, #0]
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 f8ea 	bl	8009bbc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80099ee:	b29a      	uxth	r2, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2206      	movs	r2, #6
 80099f8:	761a      	strb	r2, [r3, #24]
      break;
 80099fa:	e0c0      	b.n	8009b7e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	795b      	ldrb	r3, [r3, #5]
 8009a00:	4619      	mov	r1, r3
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 fc4c 	bl	800a2a0 <USBH_LL_GetURBState>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009a0c:	7bbb      	ldrb	r3, [r7, #14]
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d103      	bne.n	8009a1a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2207      	movs	r2, #7
 8009a16:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009a18:	e0ac      	b.n	8009b74 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009a1a:	7bbb      	ldrb	r3, [r7, #14]
 8009a1c:	2b05      	cmp	r3, #5
 8009a1e:	d105      	bne.n	8009a2c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	220c      	movs	r2, #12
 8009a24:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009a26:	2303      	movs	r3, #3
 8009a28:	73fb      	strb	r3, [r7, #15]
      break;
 8009a2a:	e0a3      	b.n	8009b74 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009a2c:	7bbb      	ldrb	r3, [r7, #14]
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	d103      	bne.n	8009a3a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2205      	movs	r2, #5
 8009a36:	761a      	strb	r2, [r3, #24]
      break;
 8009a38:	e09c      	b.n	8009b74 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009a3a:	7bbb      	ldrb	r3, [r7, #14]
 8009a3c:	2b04      	cmp	r3, #4
 8009a3e:	f040 8099 	bne.w	8009b74 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	220b      	movs	r2, #11
 8009a46:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009a48:	2302      	movs	r3, #2
 8009a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8009a4c:	e092      	b.n	8009b74 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	791b      	ldrb	r3, [r3, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	2100      	movs	r1, #0
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 f8d5 	bl	8009c06 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009a62:	b29a      	uxth	r2, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2208      	movs	r2, #8
 8009a6c:	761a      	strb	r2, [r3, #24]

      break;
 8009a6e:	e086      	b.n	8009b7e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	791b      	ldrb	r3, [r3, #4]
 8009a74:	4619      	mov	r1, r3
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 fc12 	bl	800a2a0 <USBH_LL_GetURBState>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009a80:	7bbb      	ldrb	r3, [r7, #14]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d105      	bne.n	8009a92 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	220d      	movs	r2, #13
 8009a8a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009a90:	e072      	b.n	8009b78 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009a92:	7bbb      	ldrb	r3, [r7, #14]
 8009a94:	2b04      	cmp	r3, #4
 8009a96:	d103      	bne.n	8009aa0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	220b      	movs	r2, #11
 8009a9c:	761a      	strb	r2, [r3, #24]
      break;
 8009a9e:	e06b      	b.n	8009b78 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009aa0:	7bbb      	ldrb	r3, [r7, #14]
 8009aa2:	2b05      	cmp	r3, #5
 8009aa4:	d168      	bne.n	8009b78 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009aa6:	2303      	movs	r3, #3
 8009aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8009aaa:	e065      	b.n	8009b78 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	795b      	ldrb	r3, [r3, #5]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	9200      	str	r2, [sp, #0]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 f87f 	bl	8009bbc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009ac4:	b29a      	uxth	r2, r3
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	220a      	movs	r2, #10
 8009ace:	761a      	strb	r2, [r3, #24]
      break;
 8009ad0:	e055      	b.n	8009b7e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	795b      	ldrb	r3, [r3, #5]
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fbe1 	bl	800a2a0 <USBH_LL_GetURBState>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009ae2:	7bbb      	ldrb	r3, [r7, #14]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d105      	bne.n	8009af4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	220d      	movs	r2, #13
 8009af0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009af2:	e043      	b.n	8009b7c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009af4:	7bbb      	ldrb	r3, [r7, #14]
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d103      	bne.n	8009b02 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2209      	movs	r2, #9
 8009afe:	761a      	strb	r2, [r3, #24]
      break;
 8009b00:	e03c      	b.n	8009b7c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009b02:	7bbb      	ldrb	r3, [r7, #14]
 8009b04:	2b04      	cmp	r3, #4
 8009b06:	d139      	bne.n	8009b7c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	220b      	movs	r2, #11
 8009b0c:	761a      	strb	r2, [r3, #24]
      break;
 8009b0e:	e035      	b.n	8009b7c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	7e5b      	ldrb	r3, [r3, #25]
 8009b14:	3301      	adds	r3, #1
 8009b16:	b2da      	uxtb	r2, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	765a      	strb	r2, [r3, #25]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	7e5b      	ldrb	r3, [r3, #25]
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	d806      	bhi.n	8009b32 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009b30:	e025      	b.n	8009b7e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009b38:	2106      	movs	r1, #6
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	795b      	ldrb	r3, [r3, #5]
 8009b48:	4619      	mov	r1, r3
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 f90c 	bl	8009d68 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	791b      	ldrb	r3, [r3, #4]
 8009b54:	4619      	mov	r1, r3
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f906 	bl	8009d68 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009b62:	2302      	movs	r3, #2
 8009b64:	73fb      	strb	r3, [r7, #15]
      break;
 8009b66:	e00a      	b.n	8009b7e <USBH_HandleControl+0x2de>

    default:
      break;
 8009b68:	bf00      	nop
 8009b6a:	e008      	b.n	8009b7e <USBH_HandleControl+0x2de>
      break;
 8009b6c:	bf00      	nop
 8009b6e:	e006      	b.n	8009b7e <USBH_HandleControl+0x2de>
      break;
 8009b70:	bf00      	nop
 8009b72:	e004      	b.n	8009b7e <USBH_HandleControl+0x2de>
      break;
 8009b74:	bf00      	nop
 8009b76:	e002      	b.n	8009b7e <USBH_HandleControl+0x2de>
      break;
 8009b78:	bf00      	nop
 8009b7a:	e000      	b.n	8009b7e <USBH_HandleControl+0x2de>
      break;
 8009b7c:	bf00      	nop
  }

  return status;
 8009b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b088      	sub	sp, #32
 8009b8c:	af04      	add	r7, sp, #16
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	4613      	mov	r3, r2
 8009b94:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009b96:	79f9      	ldrb	r1, [r7, #7]
 8009b98:	2300      	movs	r3, #0
 8009b9a:	9303      	str	r3, [sp, #12]
 8009b9c:	2308      	movs	r3, #8
 8009b9e:	9302      	str	r3, [sp, #8]
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	9301      	str	r3, [sp, #4]
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	9300      	str	r3, [sp, #0]
 8009ba8:	2300      	movs	r3, #0
 8009baa:	2200      	movs	r2, #0
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f000 fb46 	bl	800a23e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009bb2:	2300      	movs	r3, #0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b088      	sub	sp, #32
 8009bc0:	af04      	add	r7, sp, #16
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	4611      	mov	r1, r2
 8009bc8:	461a      	mov	r2, r3
 8009bca:	460b      	mov	r3, r1
 8009bcc:	80fb      	strh	r3, [r7, #6]
 8009bce:	4613      	mov	r3, r2
 8009bd0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d001      	beq.n	8009be0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009be0:	7979      	ldrb	r1, [r7, #5]
 8009be2:	7e3b      	ldrb	r3, [r7, #24]
 8009be4:	9303      	str	r3, [sp, #12]
 8009be6:	88fb      	ldrh	r3, [r7, #6]
 8009be8:	9302      	str	r3, [sp, #8]
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	9301      	str	r3, [sp, #4]
 8009bee:	2301      	movs	r3, #1
 8009bf0:	9300      	str	r3, [sp, #0]
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f000 fb21 	bl	800a23e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b088      	sub	sp, #32
 8009c0a:	af04      	add	r7, sp, #16
 8009c0c:	60f8      	str	r0, [r7, #12]
 8009c0e:	60b9      	str	r1, [r7, #8]
 8009c10:	4611      	mov	r1, r2
 8009c12:	461a      	mov	r2, r3
 8009c14:	460b      	mov	r3, r1
 8009c16:	80fb      	strh	r3, [r7, #6]
 8009c18:	4613      	mov	r3, r2
 8009c1a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c1c:	7979      	ldrb	r1, [r7, #5]
 8009c1e:	2300      	movs	r3, #0
 8009c20:	9303      	str	r3, [sp, #12]
 8009c22:	88fb      	ldrh	r3, [r7, #6]
 8009c24:	9302      	str	r3, [sp, #8]
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	9301      	str	r3, [sp, #4]
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	2300      	movs	r3, #0
 8009c30:	2201      	movs	r2, #1
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	f000 fb03 	bl	800a23e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009c38:	2300      	movs	r3, #0

}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b088      	sub	sp, #32
 8009c46:	af04      	add	r7, sp, #16
 8009c48:	60f8      	str	r0, [r7, #12]
 8009c4a:	60b9      	str	r1, [r7, #8]
 8009c4c:	4611      	mov	r1, r2
 8009c4e:	461a      	mov	r2, r3
 8009c50:	460b      	mov	r3, r1
 8009c52:	80fb      	strh	r3, [r7, #6]
 8009c54:	4613      	mov	r3, r2
 8009c56:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d001      	beq.n	8009c66 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009c62:	2300      	movs	r3, #0
 8009c64:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c66:	7979      	ldrb	r1, [r7, #5]
 8009c68:	7e3b      	ldrb	r3, [r7, #24]
 8009c6a:	9303      	str	r3, [sp, #12]
 8009c6c:	88fb      	ldrh	r3, [r7, #6]
 8009c6e:	9302      	str	r3, [sp, #8]
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	9301      	str	r3, [sp, #4]
 8009c74:	2301      	movs	r3, #1
 8009c76:	9300      	str	r3, [sp, #0]
 8009c78:	2302      	movs	r3, #2
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f000 fade 	bl	800a23e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009c82:	2300      	movs	r3, #0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b088      	sub	sp, #32
 8009c90:	af04      	add	r7, sp, #16
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	4611      	mov	r1, r2
 8009c98:	461a      	mov	r2, r3
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	80fb      	strh	r3, [r7, #6]
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009ca2:	7979      	ldrb	r1, [r7, #5]
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	9303      	str	r3, [sp, #12]
 8009ca8:	88fb      	ldrh	r3, [r7, #6]
 8009caa:	9302      	str	r3, [sp, #8]
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	9301      	str	r3, [sp, #4]
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	9300      	str	r3, [sp, #0]
 8009cb4:	2302      	movs	r3, #2
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f000 fac0 	bl	800a23e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009cbe:	2300      	movs	r3, #0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3710      	adds	r7, #16
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b086      	sub	sp, #24
 8009ccc:	af04      	add	r7, sp, #16
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	4608      	mov	r0, r1
 8009cd2:	4611      	mov	r1, r2
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	70fb      	strb	r3, [r7, #3]
 8009cda:	460b      	mov	r3, r1
 8009cdc:	70bb      	strb	r3, [r7, #2]
 8009cde:	4613      	mov	r3, r2
 8009ce0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009ce2:	7878      	ldrb	r0, [r7, #1]
 8009ce4:	78ba      	ldrb	r2, [r7, #2]
 8009ce6:	78f9      	ldrb	r1, [r7, #3]
 8009ce8:	8b3b      	ldrh	r3, [r7, #24]
 8009cea:	9302      	str	r3, [sp, #8]
 8009cec:	7d3b      	ldrb	r3, [r7, #20]
 8009cee:	9301      	str	r3, [sp, #4]
 8009cf0:	7c3b      	ldrb	r3, [r7, #16]
 8009cf2:	9300      	str	r3, [sp, #0]
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 fa53 	bl	800a1a2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b082      	sub	sp, #8
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
 8009d0e:	460b      	mov	r3, r1
 8009d10:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009d12:	78fb      	ldrb	r3, [r7, #3]
 8009d14:	4619      	mov	r1, r3
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 fa72 	bl	800a200 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009d1c:	2300      	movs	r3, #0
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3708      	adds	r7, #8
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b084      	sub	sp, #16
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
 8009d2e:	460b      	mov	r3, r1
 8009d30:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 f836 	bl	8009da4 <USBH_GetFreePipe>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009d3c:	89fb      	ldrh	r3, [r7, #14]
 8009d3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d00a      	beq.n	8009d5c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009d46:	78fa      	ldrb	r2, [r7, #3]
 8009d48:	89fb      	ldrh	r3, [r7, #14]
 8009d4a:	f003 030f 	and.w	r3, r3, #15
 8009d4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d52:	6879      	ldr	r1, [r7, #4]
 8009d54:	33e0      	adds	r3, #224	; 0xe0
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	440b      	add	r3, r1
 8009d5a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009d5c:	89fb      	ldrh	r3, [r7, #14]
 8009d5e:	b2db      	uxtb	r3, r3
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	460b      	mov	r3, r1
 8009d72:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009d74:	78fb      	ldrb	r3, [r7, #3]
 8009d76:	2b0f      	cmp	r3, #15
 8009d78:	d80d      	bhi.n	8009d96 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009d7a:	78fb      	ldrb	r3, [r7, #3]
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	33e0      	adds	r3, #224	; 0xe0
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	4413      	add	r3, r2
 8009d84:	685a      	ldr	r2, [r3, #4]
 8009d86:	78fb      	ldrb	r3, [r7, #3]
 8009d88:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009d8c:	6879      	ldr	r1, [r7, #4]
 8009d8e:	33e0      	adds	r3, #224	; 0xe0
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	440b      	add	r3, r1
 8009d94:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009dac:	2300      	movs	r3, #0
 8009dae:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009db0:	2300      	movs	r3, #0
 8009db2:	73fb      	strb	r3, [r7, #15]
 8009db4:	e00f      	b.n	8009dd6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009db6:	7bfb      	ldrb	r3, [r7, #15]
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	33e0      	adds	r3, #224	; 0xe0
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4413      	add	r3, r2
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d102      	bne.n	8009dd0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009dca:	7bfb      	ldrb	r3, [r7, #15]
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	e007      	b.n	8009de0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009dd0:	7bfb      	ldrb	r3, [r7, #15]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	73fb      	strb	r3, [r7, #15]
 8009dd6:	7bfb      	ldrb	r3, [r7, #15]
 8009dd8:	2b0f      	cmp	r3, #15
 8009dda:	d9ec      	bls.n	8009db6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009ddc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3714      	adds	r7, #20
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009df0:	2201      	movs	r2, #1
 8009df2:	490e      	ldr	r1, [pc, #56]	; (8009e2c <MX_USB_HOST_Init+0x40>)
 8009df4:	480e      	ldr	r0, [pc, #56]	; (8009e30 <MX_USB_HOST_Init+0x44>)
 8009df6:	f7fe fb05 	bl	8008404 <USBH_Init>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d001      	beq.n	8009e04 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009e00:	f7f6 fed0 	bl	8000ba4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009e04:	490b      	ldr	r1, [pc, #44]	; (8009e34 <MX_USB_HOST_Init+0x48>)
 8009e06:	480a      	ldr	r0, [pc, #40]	; (8009e30 <MX_USB_HOST_Init+0x44>)
 8009e08:	f7fe fba9 	bl	800855e <USBH_RegisterClass>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d001      	beq.n	8009e16 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009e12:	f7f6 fec7 	bl	8000ba4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009e16:	4806      	ldr	r0, [pc, #24]	; (8009e30 <MX_USB_HOST_Init+0x44>)
 8009e18:	f7fe fc2d 	bl	8008676 <USBH_Start>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d001      	beq.n	8009e26 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009e22:	f7f6 febf 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009e26:	bf00      	nop
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	08009e4d 	.word	0x08009e4d
 8009e30:	2000026c 	.word	0x2000026c
 8009e34:	2000000c 	.word	0x2000000c

08009e38 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009e3c:	4802      	ldr	r0, [pc, #8]	; (8009e48 <MX_USB_HOST_Process+0x10>)
 8009e3e:	f7fe fc2b 	bl	8008698 <USBH_Process>
}
 8009e42:	bf00      	nop
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	2000026c 	.word	0x2000026c

08009e4c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	460b      	mov	r3, r1
 8009e56:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009e58:	78fb      	ldrb	r3, [r7, #3]
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	2b04      	cmp	r3, #4
 8009e5e:	d819      	bhi.n	8009e94 <USBH_UserProcess+0x48>
 8009e60:	a201      	add	r2, pc, #4	; (adr r2, 8009e68 <USBH_UserProcess+0x1c>)
 8009e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e66:	bf00      	nop
 8009e68:	08009e95 	.word	0x08009e95
 8009e6c:	08009e85 	.word	0x08009e85
 8009e70:	08009e95 	.word	0x08009e95
 8009e74:	08009e8d 	.word	0x08009e8d
 8009e78:	08009e7d 	.word	0x08009e7d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009e7c:	4b09      	ldr	r3, [pc, #36]	; (8009ea4 <USBH_UserProcess+0x58>)
 8009e7e:	2203      	movs	r2, #3
 8009e80:	701a      	strb	r2, [r3, #0]
  break;
 8009e82:	e008      	b.n	8009e96 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009e84:	4b07      	ldr	r3, [pc, #28]	; (8009ea4 <USBH_UserProcess+0x58>)
 8009e86:	2202      	movs	r2, #2
 8009e88:	701a      	strb	r2, [r3, #0]
  break;
 8009e8a:	e004      	b.n	8009e96 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009e8c:	4b05      	ldr	r3, [pc, #20]	; (8009ea4 <USBH_UserProcess+0x58>)
 8009e8e:	2201      	movs	r2, #1
 8009e90:	701a      	strb	r2, [r3, #0]
  break;
 8009e92:	e000      	b.n	8009e96 <USBH_UserProcess+0x4a>

  default:
  break;
 8009e94:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009e96:	bf00      	nop
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	20000644 	.word	0x20000644

08009ea8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b08a      	sub	sp, #40	; 0x28
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009eb0:	f107 0314 	add.w	r3, r7, #20
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	601a      	str	r2, [r3, #0]
 8009eb8:	605a      	str	r2, [r3, #4]
 8009eba:	609a      	str	r2, [r3, #8]
 8009ebc:	60da      	str	r2, [r3, #12]
 8009ebe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ec8:	d147      	bne.n	8009f5a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009eca:	2300      	movs	r3, #0
 8009ecc:	613b      	str	r3, [r7, #16]
 8009ece:	4b25      	ldr	r3, [pc, #148]	; (8009f64 <HAL_HCD_MspInit+0xbc>)
 8009ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed2:	4a24      	ldr	r2, [pc, #144]	; (8009f64 <HAL_HCD_MspInit+0xbc>)
 8009ed4:	f043 0301 	orr.w	r3, r3, #1
 8009ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8009eda:	4b22      	ldr	r3, [pc, #136]	; (8009f64 <HAL_HCD_MspInit+0xbc>)
 8009edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ede:	f003 0301 	and.w	r3, r3, #1
 8009ee2:	613b      	str	r3, [r7, #16]
 8009ee4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009ee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009eec:	2300      	movs	r3, #0
 8009eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009ef4:	f107 0314 	add.w	r3, r7, #20
 8009ef8:	4619      	mov	r1, r3
 8009efa:	481b      	ldr	r0, [pc, #108]	; (8009f68 <HAL_HCD_MspInit+0xc0>)
 8009efc:	f7f7 fada 	bl	80014b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009f00:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f06:	2302      	movs	r3, #2
 8009f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009f12:	230a      	movs	r3, #10
 8009f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f16:	f107 0314 	add.w	r3, r7, #20
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	4812      	ldr	r0, [pc, #72]	; (8009f68 <HAL_HCD_MspInit+0xc0>)
 8009f1e:	f7f7 fac9 	bl	80014b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009f22:	4b10      	ldr	r3, [pc, #64]	; (8009f64 <HAL_HCD_MspInit+0xbc>)
 8009f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f26:	4a0f      	ldr	r2, [pc, #60]	; (8009f64 <HAL_HCD_MspInit+0xbc>)
 8009f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f2c:	6353      	str	r3, [r2, #52]	; 0x34
 8009f2e:	2300      	movs	r3, #0
 8009f30:	60fb      	str	r3, [r7, #12]
 8009f32:	4b0c      	ldr	r3, [pc, #48]	; (8009f64 <HAL_HCD_MspInit+0xbc>)
 8009f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f36:	4a0b      	ldr	r2, [pc, #44]	; (8009f64 <HAL_HCD_MspInit+0xbc>)
 8009f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8009f3e:	4b09      	ldr	r3, [pc, #36]	; (8009f64 <HAL_HCD_MspInit+0xbc>)
 8009f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f46:	60fb      	str	r3, [r7, #12]
 8009f48:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	2043      	movs	r0, #67	; 0x43
 8009f50:	f7f7 fa79 	bl	8001446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009f54:	2043      	movs	r0, #67	; 0x43
 8009f56:	f7f7 fa92 	bl	800147e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009f5a:	bf00      	nop
 8009f5c:	3728      	adds	r7, #40	; 0x28
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop
 8009f64:	40023800 	.word	0x40023800
 8009f68:	40020000 	.word	0x40020000

08009f6c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7fe ff6b 	bl	8008e56 <USBH_LL_IncTimer>
}
 8009f80:	bf00      	nop
 8009f82:	3708      	adds	r7, #8
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7fe ffa3 	bl	8008ee2 <USBH_LL_Connect>
}
 8009f9c:	bf00      	nop
 8009f9e:	3708      	adds	r7, #8
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fe ffac 	bl	8008f10 <USBH_LL_Disconnect>
}
 8009fb8:	bf00      	nop
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	460b      	mov	r3, r1
 8009fca:	70fb      	strb	r3, [r7, #3]
 8009fcc:	4613      	mov	r3, r2
 8009fce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009fd0:	bf00      	nop
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7fe ff5d 	bl	8008eaa <USBH_LL_PortEnabled>
}
 8009ff0:	bf00      	nop
 8009ff2:	3708      	adds	r7, #8
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a006:	4618      	mov	r0, r3
 800a008:	f7fe ff5d 	bl	8008ec6 <USBH_LL_PortDisabled>
}
 800a00c:	bf00      	nop
 800a00e:	3708      	adds	r7, #8
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a022:	2b01      	cmp	r3, #1
 800a024:	d12a      	bne.n	800a07c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a026:	4a18      	ldr	r2, [pc, #96]	; (800a088 <USBH_LL_Init+0x74>)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a15      	ldr	r2, [pc, #84]	; (800a088 <USBH_LL_Init+0x74>)
 800a032:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a036:	4b14      	ldr	r3, [pc, #80]	; (800a088 <USBH_LL_Init+0x74>)
 800a038:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a03c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a03e:	4b12      	ldr	r3, [pc, #72]	; (800a088 <USBH_LL_Init+0x74>)
 800a040:	2208      	movs	r2, #8
 800a042:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a044:	4b10      	ldr	r3, [pc, #64]	; (800a088 <USBH_LL_Init+0x74>)
 800a046:	2201      	movs	r2, #1
 800a048:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a04a:	4b0f      	ldr	r3, [pc, #60]	; (800a088 <USBH_LL_Init+0x74>)
 800a04c:	2200      	movs	r2, #0
 800a04e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a050:	4b0d      	ldr	r3, [pc, #52]	; (800a088 <USBH_LL_Init+0x74>)
 800a052:	2202      	movs	r2, #2
 800a054:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a056:	4b0c      	ldr	r3, [pc, #48]	; (800a088 <USBH_LL_Init+0x74>)
 800a058:	2200      	movs	r2, #0
 800a05a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a05c:	480a      	ldr	r0, [pc, #40]	; (800a088 <USBH_LL_Init+0x74>)
 800a05e:	f7f7 fbde 	bl	800181e <HAL_HCD_Init>
 800a062:	4603      	mov	r3, r0
 800a064:	2b00      	cmp	r3, #0
 800a066:	d001      	beq.n	800a06c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a068:	f7f6 fd9c 	bl	8000ba4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a06c:	4806      	ldr	r0, [pc, #24]	; (800a088 <USBH_LL_Init+0x74>)
 800a06e:	f7f8 f83f 	bl	80020f0 <HAL_HCD_GetCurrentFrame>
 800a072:	4603      	mov	r3, r0
 800a074:	4619      	mov	r1, r3
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f7fe fede 	bl	8008e38 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3708      	adds	r7, #8
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	20000648 	.word	0x20000648

0800a08c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a094:	2300      	movs	r3, #0
 800a096:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a098:	2300      	movs	r3, #0
 800a09a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7f7 ffac 	bl	8002000 <HAL_HCD_Start>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f000 f95e 	bl	800a370 <USBH_Get_USB_Status>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b084      	sub	sp, #16
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7f7 ffb4 	bl	8002046 <HAL_HCD_Stop>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a0e2:	7bfb      	ldrb	r3, [r7, #15]
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f000 f943 	bl	800a370 <USBH_Get_USB_Status>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3710      	adds	r7, #16
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a100:	2301      	movs	r3, #1
 800a102:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7f7 fffe 	bl	800210c <HAL_HCD_GetCurrentSpeed>
 800a110:	4603      	mov	r3, r0
 800a112:	2b02      	cmp	r3, #2
 800a114:	d00c      	beq.n	800a130 <USBH_LL_GetSpeed+0x38>
 800a116:	2b02      	cmp	r3, #2
 800a118:	d80d      	bhi.n	800a136 <USBH_LL_GetSpeed+0x3e>
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d002      	beq.n	800a124 <USBH_LL_GetSpeed+0x2c>
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d003      	beq.n	800a12a <USBH_LL_GetSpeed+0x32>
 800a122:	e008      	b.n	800a136 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a124:	2300      	movs	r3, #0
 800a126:	73fb      	strb	r3, [r7, #15]
    break;
 800a128:	e008      	b.n	800a13c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a12a:	2301      	movs	r3, #1
 800a12c:	73fb      	strb	r3, [r7, #15]
    break;
 800a12e:	e005      	b.n	800a13c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a130:	2302      	movs	r3, #2
 800a132:	73fb      	strb	r3, [r7, #15]
    break;
 800a134:	e002      	b.n	800a13c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a136:	2301      	movs	r3, #1
 800a138:	73fb      	strb	r3, [r7, #15]
    break;
 800a13a:	bf00      	nop
  }
  return  speed;
 800a13c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3710      	adds	r7, #16
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b084      	sub	sp, #16
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a14e:	2300      	movs	r3, #0
 800a150:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a152:	2300      	movs	r3, #0
 800a154:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7f7 ff8f 	bl	8002080 <HAL_HCD_ResetPort>
 800a162:	4603      	mov	r3, r0
 800a164:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a166:	7bfb      	ldrb	r3, [r7, #15]
 800a168:	4618      	mov	r0, r3
 800a16a:	f000 f901 	bl	800a370 <USBH_Get_USB_Status>
 800a16e:	4603      	mov	r3, r0
 800a170:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a172:	7bbb      	ldrb	r3, [r7, #14]
}
 800a174:	4618      	mov	r0, r3
 800a176:	3710      	adds	r7, #16
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	460b      	mov	r3, r1
 800a186:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a18e:	78fa      	ldrb	r2, [r7, #3]
 800a190:	4611      	mov	r1, r2
 800a192:	4618      	mov	r0, r3
 800a194:	f7f7 ff97 	bl	80020c6 <HAL_HCD_HC_GetXferCount>
 800a198:	4603      	mov	r3, r0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3708      	adds	r7, #8
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a1a2:	b590      	push	{r4, r7, lr}
 800a1a4:	b089      	sub	sp, #36	; 0x24
 800a1a6:	af04      	add	r7, sp, #16
 800a1a8:	6078      	str	r0, [r7, #4]
 800a1aa:	4608      	mov	r0, r1
 800a1ac:	4611      	mov	r1, r2
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	70fb      	strb	r3, [r7, #3]
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	70bb      	strb	r3, [r7, #2]
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a1ca:	787c      	ldrb	r4, [r7, #1]
 800a1cc:	78ba      	ldrb	r2, [r7, #2]
 800a1ce:	78f9      	ldrb	r1, [r7, #3]
 800a1d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a1d2:	9302      	str	r3, [sp, #8]
 800a1d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a1d8:	9301      	str	r3, [sp, #4]
 800a1da:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	4623      	mov	r3, r4
 800a1e2:	f7f7 fb83 	bl	80018ec <HAL_HCD_HC_Init>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a1ea:	7bfb      	ldrb	r3, [r7, #15]
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f000 f8bf 	bl	800a370 <USBH_Get_USB_Status>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3714      	adds	r7, #20
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd90      	pop	{r4, r7, pc}

0800a200 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	460b      	mov	r3, r1
 800a20a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a20c:	2300      	movs	r3, #0
 800a20e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a210:	2300      	movs	r3, #0
 800a212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a21a:	78fa      	ldrb	r2, [r7, #3]
 800a21c:	4611      	mov	r1, r2
 800a21e:	4618      	mov	r0, r3
 800a220:	f7f7 fc1c 	bl	8001a5c <HAL_HCD_HC_Halt>
 800a224:	4603      	mov	r3, r0
 800a226:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a228:	7bfb      	ldrb	r3, [r7, #15]
 800a22a:	4618      	mov	r0, r3
 800a22c:	f000 f8a0 	bl	800a370 <USBH_Get_USB_Status>
 800a230:	4603      	mov	r3, r0
 800a232:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a234:	7bbb      	ldrb	r3, [r7, #14]
}
 800a236:	4618      	mov	r0, r3
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a23e:	b590      	push	{r4, r7, lr}
 800a240:	b089      	sub	sp, #36	; 0x24
 800a242:	af04      	add	r7, sp, #16
 800a244:	6078      	str	r0, [r7, #4]
 800a246:	4608      	mov	r0, r1
 800a248:	4611      	mov	r1, r2
 800a24a:	461a      	mov	r2, r3
 800a24c:	4603      	mov	r3, r0
 800a24e:	70fb      	strb	r3, [r7, #3]
 800a250:	460b      	mov	r3, r1
 800a252:	70bb      	strb	r3, [r7, #2]
 800a254:	4613      	mov	r3, r2
 800a256:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a258:	2300      	movs	r3, #0
 800a25a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a25c:	2300      	movs	r3, #0
 800a25e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a266:	787c      	ldrb	r4, [r7, #1]
 800a268:	78ba      	ldrb	r2, [r7, #2]
 800a26a:	78f9      	ldrb	r1, [r7, #3]
 800a26c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a270:	9303      	str	r3, [sp, #12]
 800a272:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a274:	9302      	str	r3, [sp, #8]
 800a276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a278:	9301      	str	r3, [sp, #4]
 800a27a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a27e:	9300      	str	r3, [sp, #0]
 800a280:	4623      	mov	r3, r4
 800a282:	f7f7 fc0f 	bl	8001aa4 <HAL_HCD_HC_SubmitRequest>
 800a286:	4603      	mov	r3, r0
 800a288:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a28a:	7bfb      	ldrb	r3, [r7, #15]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f000 f86f 	bl	800a370 <USBH_Get_USB_Status>
 800a292:	4603      	mov	r3, r0
 800a294:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a296:	7bbb      	ldrb	r3, [r7, #14]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3714      	adds	r7, #20
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd90      	pop	{r4, r7, pc}

0800a2a0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a2b2:	78fa      	ldrb	r2, [r7, #3]
 800a2b4:	4611      	mov	r1, r2
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7f7 fef0 	bl	800209c <HAL_HCD_HC_GetURBState>
 800a2bc:	4603      	mov	r3, r0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3708      	adds	r7, #8
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b082      	sub	sp, #8
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d103      	bne.n	800a2e4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a2dc:	78fb      	ldrb	r3, [r7, #3]
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f000 f872 	bl	800a3c8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a2e4:	20c8      	movs	r0, #200	; 0xc8
 800a2e6:	f7f6 ffaf 	bl	8001248 <HAL_Delay>
  return USBH_OK;
 800a2ea:	2300      	movs	r3, #0
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3708      	adds	r7, #8
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	70fb      	strb	r3, [r7, #3]
 800a300:	4613      	mov	r3, r2
 800a302:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a30a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a30c:	78fa      	ldrb	r2, [r7, #3]
 800a30e:	68f9      	ldr	r1, [r7, #12]
 800a310:	4613      	mov	r3, r2
 800a312:	011b      	lsls	r3, r3, #4
 800a314:	1a9b      	subs	r3, r3, r2
 800a316:	009b      	lsls	r3, r3, #2
 800a318:	440b      	add	r3, r1
 800a31a:	3317      	adds	r3, #23
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d00a      	beq.n	800a338 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a322:	78fa      	ldrb	r2, [r7, #3]
 800a324:	68f9      	ldr	r1, [r7, #12]
 800a326:	4613      	mov	r3, r2
 800a328:	011b      	lsls	r3, r3, #4
 800a32a:	1a9b      	subs	r3, r3, r2
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	440b      	add	r3, r1
 800a330:	333c      	adds	r3, #60	; 0x3c
 800a332:	78ba      	ldrb	r2, [r7, #2]
 800a334:	701a      	strb	r2, [r3, #0]
 800a336:	e009      	b.n	800a34c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a338:	78fa      	ldrb	r2, [r7, #3]
 800a33a:	68f9      	ldr	r1, [r7, #12]
 800a33c:	4613      	mov	r3, r2
 800a33e:	011b      	lsls	r3, r3, #4
 800a340:	1a9b      	subs	r3, r3, r2
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	440b      	add	r3, r1
 800a346:	333d      	adds	r3, #61	; 0x3d
 800a348:	78ba      	ldrb	r2, [r7, #2]
 800a34a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a34c:	2300      	movs	r3, #0
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3714      	adds	r7, #20
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr

0800a35a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b082      	sub	sp, #8
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f7f6 ff70 	bl	8001248 <HAL_Delay>
}
 800a368:	bf00      	nop
 800a36a:	3708      	adds	r7, #8
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a370:	b480      	push	{r7}
 800a372:	b085      	sub	sp, #20
 800a374:	af00      	add	r7, sp, #0
 800a376:	4603      	mov	r3, r0
 800a378:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a37a:	2300      	movs	r3, #0
 800a37c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a37e:	79fb      	ldrb	r3, [r7, #7]
 800a380:	2b03      	cmp	r3, #3
 800a382:	d817      	bhi.n	800a3b4 <USBH_Get_USB_Status+0x44>
 800a384:	a201      	add	r2, pc, #4	; (adr r2, 800a38c <USBH_Get_USB_Status+0x1c>)
 800a386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a38a:	bf00      	nop
 800a38c:	0800a39d 	.word	0x0800a39d
 800a390:	0800a3a3 	.word	0x0800a3a3
 800a394:	0800a3a9 	.word	0x0800a3a9
 800a398:	0800a3af 	.word	0x0800a3af
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a39c:	2300      	movs	r3, #0
 800a39e:	73fb      	strb	r3, [r7, #15]
    break;
 800a3a0:	e00b      	b.n	800a3ba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a3a2:	2302      	movs	r3, #2
 800a3a4:	73fb      	strb	r3, [r7, #15]
    break;
 800a3a6:	e008      	b.n	800a3ba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a3ac:	e005      	b.n	800a3ba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a3ae:	2302      	movs	r3, #2
 800a3b0:	73fb      	strb	r3, [r7, #15]
    break;
 800a3b2:	e002      	b.n	800a3ba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a3b4:	2302      	movs	r3, #2
 800a3b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a3b8:	bf00      	nop
  }
  return usb_status;
 800a3ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3714      	adds	r7, #20
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a3d2:	79fb      	ldrb	r3, [r7, #7]
 800a3d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a3d6:	79fb      	ldrb	r3, [r7, #7]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d102      	bne.n	800a3e2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	73fb      	strb	r3, [r7, #15]
 800a3e0:	e001      	b.n	800a3e6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a3e6:	7bfb      	ldrb	r3, [r7, #15]
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	2101      	movs	r1, #1
 800a3ec:	4803      	ldr	r0, [pc, #12]	; (800a3fc <MX_DriverVbusFS+0x34>)
 800a3ee:	f7f7 f9fd 	bl	80017ec <HAL_GPIO_WritePin>
}
 800a3f2:	bf00      	nop
 800a3f4:	3710      	adds	r7, #16
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	40020800 	.word	0x40020800

0800a400 <malloc>:
 800a400:	4b02      	ldr	r3, [pc, #8]	; (800a40c <malloc+0xc>)
 800a402:	4601      	mov	r1, r0
 800a404:	6818      	ldr	r0, [r3, #0]
 800a406:	f000 b82b 	b.w	800a460 <_malloc_r>
 800a40a:	bf00      	nop
 800a40c:	20000078 	.word	0x20000078

0800a410 <free>:
 800a410:	4b02      	ldr	r3, [pc, #8]	; (800a41c <free+0xc>)
 800a412:	4601      	mov	r1, r0
 800a414:	6818      	ldr	r0, [r3, #0]
 800a416:	f000 b8f3 	b.w	800a600 <_free_r>
 800a41a:	bf00      	nop
 800a41c:	20000078 	.word	0x20000078

0800a420 <sbrk_aligned>:
 800a420:	b570      	push	{r4, r5, r6, lr}
 800a422:	4e0e      	ldr	r6, [pc, #56]	; (800a45c <sbrk_aligned+0x3c>)
 800a424:	460c      	mov	r4, r1
 800a426:	6831      	ldr	r1, [r6, #0]
 800a428:	4605      	mov	r5, r0
 800a42a:	b911      	cbnz	r1, 800a432 <sbrk_aligned+0x12>
 800a42c:	f000 f8ac 	bl	800a588 <_sbrk_r>
 800a430:	6030      	str	r0, [r6, #0]
 800a432:	4621      	mov	r1, r4
 800a434:	4628      	mov	r0, r5
 800a436:	f000 f8a7 	bl	800a588 <_sbrk_r>
 800a43a:	1c43      	adds	r3, r0, #1
 800a43c:	d00a      	beq.n	800a454 <sbrk_aligned+0x34>
 800a43e:	1cc4      	adds	r4, r0, #3
 800a440:	f024 0403 	bic.w	r4, r4, #3
 800a444:	42a0      	cmp	r0, r4
 800a446:	d007      	beq.n	800a458 <sbrk_aligned+0x38>
 800a448:	1a21      	subs	r1, r4, r0
 800a44a:	4628      	mov	r0, r5
 800a44c:	f000 f89c 	bl	800a588 <_sbrk_r>
 800a450:	3001      	adds	r0, #1
 800a452:	d101      	bne.n	800a458 <sbrk_aligned+0x38>
 800a454:	f04f 34ff 	mov.w	r4, #4294967295
 800a458:	4620      	mov	r0, r4
 800a45a:	bd70      	pop	{r4, r5, r6, pc}
 800a45c:	20000a2c 	.word	0x20000a2c

0800a460 <_malloc_r>:
 800a460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a464:	1ccd      	adds	r5, r1, #3
 800a466:	f025 0503 	bic.w	r5, r5, #3
 800a46a:	3508      	adds	r5, #8
 800a46c:	2d0c      	cmp	r5, #12
 800a46e:	bf38      	it	cc
 800a470:	250c      	movcc	r5, #12
 800a472:	2d00      	cmp	r5, #0
 800a474:	4607      	mov	r7, r0
 800a476:	db01      	blt.n	800a47c <_malloc_r+0x1c>
 800a478:	42a9      	cmp	r1, r5
 800a47a:	d905      	bls.n	800a488 <_malloc_r+0x28>
 800a47c:	230c      	movs	r3, #12
 800a47e:	603b      	str	r3, [r7, #0]
 800a480:	2600      	movs	r6, #0
 800a482:	4630      	mov	r0, r6
 800a484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a488:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a55c <_malloc_r+0xfc>
 800a48c:	f000 f868 	bl	800a560 <__malloc_lock>
 800a490:	f8d8 3000 	ldr.w	r3, [r8]
 800a494:	461c      	mov	r4, r3
 800a496:	bb5c      	cbnz	r4, 800a4f0 <_malloc_r+0x90>
 800a498:	4629      	mov	r1, r5
 800a49a:	4638      	mov	r0, r7
 800a49c:	f7ff ffc0 	bl	800a420 <sbrk_aligned>
 800a4a0:	1c43      	adds	r3, r0, #1
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	d155      	bne.n	800a552 <_malloc_r+0xf2>
 800a4a6:	f8d8 4000 	ldr.w	r4, [r8]
 800a4aa:	4626      	mov	r6, r4
 800a4ac:	2e00      	cmp	r6, #0
 800a4ae:	d145      	bne.n	800a53c <_malloc_r+0xdc>
 800a4b0:	2c00      	cmp	r4, #0
 800a4b2:	d048      	beq.n	800a546 <_malloc_r+0xe6>
 800a4b4:	6823      	ldr	r3, [r4, #0]
 800a4b6:	4631      	mov	r1, r6
 800a4b8:	4638      	mov	r0, r7
 800a4ba:	eb04 0903 	add.w	r9, r4, r3
 800a4be:	f000 f863 	bl	800a588 <_sbrk_r>
 800a4c2:	4581      	cmp	r9, r0
 800a4c4:	d13f      	bne.n	800a546 <_malloc_r+0xe6>
 800a4c6:	6821      	ldr	r1, [r4, #0]
 800a4c8:	1a6d      	subs	r5, r5, r1
 800a4ca:	4629      	mov	r1, r5
 800a4cc:	4638      	mov	r0, r7
 800a4ce:	f7ff ffa7 	bl	800a420 <sbrk_aligned>
 800a4d2:	3001      	adds	r0, #1
 800a4d4:	d037      	beq.n	800a546 <_malloc_r+0xe6>
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	442b      	add	r3, r5
 800a4da:	6023      	str	r3, [r4, #0]
 800a4dc:	f8d8 3000 	ldr.w	r3, [r8]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d038      	beq.n	800a556 <_malloc_r+0xf6>
 800a4e4:	685a      	ldr	r2, [r3, #4]
 800a4e6:	42a2      	cmp	r2, r4
 800a4e8:	d12b      	bne.n	800a542 <_malloc_r+0xe2>
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	605a      	str	r2, [r3, #4]
 800a4ee:	e00f      	b.n	800a510 <_malloc_r+0xb0>
 800a4f0:	6822      	ldr	r2, [r4, #0]
 800a4f2:	1b52      	subs	r2, r2, r5
 800a4f4:	d41f      	bmi.n	800a536 <_malloc_r+0xd6>
 800a4f6:	2a0b      	cmp	r2, #11
 800a4f8:	d917      	bls.n	800a52a <_malloc_r+0xca>
 800a4fa:	1961      	adds	r1, r4, r5
 800a4fc:	42a3      	cmp	r3, r4
 800a4fe:	6025      	str	r5, [r4, #0]
 800a500:	bf18      	it	ne
 800a502:	6059      	strne	r1, [r3, #4]
 800a504:	6863      	ldr	r3, [r4, #4]
 800a506:	bf08      	it	eq
 800a508:	f8c8 1000 	streq.w	r1, [r8]
 800a50c:	5162      	str	r2, [r4, r5]
 800a50e:	604b      	str	r3, [r1, #4]
 800a510:	4638      	mov	r0, r7
 800a512:	f104 060b 	add.w	r6, r4, #11
 800a516:	f000 f829 	bl	800a56c <__malloc_unlock>
 800a51a:	f026 0607 	bic.w	r6, r6, #7
 800a51e:	1d23      	adds	r3, r4, #4
 800a520:	1af2      	subs	r2, r6, r3
 800a522:	d0ae      	beq.n	800a482 <_malloc_r+0x22>
 800a524:	1b9b      	subs	r3, r3, r6
 800a526:	50a3      	str	r3, [r4, r2]
 800a528:	e7ab      	b.n	800a482 <_malloc_r+0x22>
 800a52a:	42a3      	cmp	r3, r4
 800a52c:	6862      	ldr	r2, [r4, #4]
 800a52e:	d1dd      	bne.n	800a4ec <_malloc_r+0x8c>
 800a530:	f8c8 2000 	str.w	r2, [r8]
 800a534:	e7ec      	b.n	800a510 <_malloc_r+0xb0>
 800a536:	4623      	mov	r3, r4
 800a538:	6864      	ldr	r4, [r4, #4]
 800a53a:	e7ac      	b.n	800a496 <_malloc_r+0x36>
 800a53c:	4634      	mov	r4, r6
 800a53e:	6876      	ldr	r6, [r6, #4]
 800a540:	e7b4      	b.n	800a4ac <_malloc_r+0x4c>
 800a542:	4613      	mov	r3, r2
 800a544:	e7cc      	b.n	800a4e0 <_malloc_r+0x80>
 800a546:	230c      	movs	r3, #12
 800a548:	603b      	str	r3, [r7, #0]
 800a54a:	4638      	mov	r0, r7
 800a54c:	f000 f80e 	bl	800a56c <__malloc_unlock>
 800a550:	e797      	b.n	800a482 <_malloc_r+0x22>
 800a552:	6025      	str	r5, [r4, #0]
 800a554:	e7dc      	b.n	800a510 <_malloc_r+0xb0>
 800a556:	605b      	str	r3, [r3, #4]
 800a558:	deff      	udf	#255	; 0xff
 800a55a:	bf00      	nop
 800a55c:	20000a28 	.word	0x20000a28

0800a560 <__malloc_lock>:
 800a560:	4801      	ldr	r0, [pc, #4]	; (800a568 <__malloc_lock+0x8>)
 800a562:	f000 b84b 	b.w	800a5fc <__retarget_lock_acquire_recursive>
 800a566:	bf00      	nop
 800a568:	20000b6c 	.word	0x20000b6c

0800a56c <__malloc_unlock>:
 800a56c:	4801      	ldr	r0, [pc, #4]	; (800a574 <__malloc_unlock+0x8>)
 800a56e:	f000 b846 	b.w	800a5fe <__retarget_lock_release_recursive>
 800a572:	bf00      	nop
 800a574:	20000b6c 	.word	0x20000b6c

0800a578 <memset>:
 800a578:	4402      	add	r2, r0
 800a57a:	4603      	mov	r3, r0
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d100      	bne.n	800a582 <memset+0xa>
 800a580:	4770      	bx	lr
 800a582:	f803 1b01 	strb.w	r1, [r3], #1
 800a586:	e7f9      	b.n	800a57c <memset+0x4>

0800a588 <_sbrk_r>:
 800a588:	b538      	push	{r3, r4, r5, lr}
 800a58a:	4d06      	ldr	r5, [pc, #24]	; (800a5a4 <_sbrk_r+0x1c>)
 800a58c:	2300      	movs	r3, #0
 800a58e:	4604      	mov	r4, r0
 800a590:	4608      	mov	r0, r1
 800a592:	602b      	str	r3, [r5, #0]
 800a594:	f7f6 fd74 	bl	8001080 <_sbrk>
 800a598:	1c43      	adds	r3, r0, #1
 800a59a:	d102      	bne.n	800a5a2 <_sbrk_r+0x1a>
 800a59c:	682b      	ldr	r3, [r5, #0]
 800a59e:	b103      	cbz	r3, 800a5a2 <_sbrk_r+0x1a>
 800a5a0:	6023      	str	r3, [r4, #0]
 800a5a2:	bd38      	pop	{r3, r4, r5, pc}
 800a5a4:	20000b68 	.word	0x20000b68

0800a5a8 <__errno>:
 800a5a8:	4b01      	ldr	r3, [pc, #4]	; (800a5b0 <__errno+0x8>)
 800a5aa:	6818      	ldr	r0, [r3, #0]
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	20000078 	.word	0x20000078

0800a5b4 <__libc_init_array>:
 800a5b4:	b570      	push	{r4, r5, r6, lr}
 800a5b6:	4d0d      	ldr	r5, [pc, #52]	; (800a5ec <__libc_init_array+0x38>)
 800a5b8:	4c0d      	ldr	r4, [pc, #52]	; (800a5f0 <__libc_init_array+0x3c>)
 800a5ba:	1b64      	subs	r4, r4, r5
 800a5bc:	10a4      	asrs	r4, r4, #2
 800a5be:	2600      	movs	r6, #0
 800a5c0:	42a6      	cmp	r6, r4
 800a5c2:	d109      	bne.n	800a5d8 <__libc_init_array+0x24>
 800a5c4:	4d0b      	ldr	r5, [pc, #44]	; (800a5f4 <__libc_init_array+0x40>)
 800a5c6:	4c0c      	ldr	r4, [pc, #48]	; (800a5f8 <__libc_init_array+0x44>)
 800a5c8:	f000 f866 	bl	800a698 <_init>
 800a5cc:	1b64      	subs	r4, r4, r5
 800a5ce:	10a4      	asrs	r4, r4, #2
 800a5d0:	2600      	movs	r6, #0
 800a5d2:	42a6      	cmp	r6, r4
 800a5d4:	d105      	bne.n	800a5e2 <__libc_init_array+0x2e>
 800a5d6:	bd70      	pop	{r4, r5, r6, pc}
 800a5d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5dc:	4798      	blx	r3
 800a5de:	3601      	adds	r6, #1
 800a5e0:	e7ee      	b.n	800a5c0 <__libc_init_array+0xc>
 800a5e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5e6:	4798      	blx	r3
 800a5e8:	3601      	adds	r6, #1
 800a5ea:	e7f2      	b.n	800a5d2 <__libc_init_array+0x1e>
 800a5ec:	0800a6d4 	.word	0x0800a6d4
 800a5f0:	0800a6d4 	.word	0x0800a6d4
 800a5f4:	0800a6d4 	.word	0x0800a6d4
 800a5f8:	0800a6d8 	.word	0x0800a6d8

0800a5fc <__retarget_lock_acquire_recursive>:
 800a5fc:	4770      	bx	lr

0800a5fe <__retarget_lock_release_recursive>:
 800a5fe:	4770      	bx	lr

0800a600 <_free_r>:
 800a600:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a602:	2900      	cmp	r1, #0
 800a604:	d044      	beq.n	800a690 <_free_r+0x90>
 800a606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a60a:	9001      	str	r0, [sp, #4]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f1a1 0404 	sub.w	r4, r1, #4
 800a612:	bfb8      	it	lt
 800a614:	18e4      	addlt	r4, r4, r3
 800a616:	f7ff ffa3 	bl	800a560 <__malloc_lock>
 800a61a:	4a1e      	ldr	r2, [pc, #120]	; (800a694 <_free_r+0x94>)
 800a61c:	9801      	ldr	r0, [sp, #4]
 800a61e:	6813      	ldr	r3, [r2, #0]
 800a620:	b933      	cbnz	r3, 800a630 <_free_r+0x30>
 800a622:	6063      	str	r3, [r4, #4]
 800a624:	6014      	str	r4, [r2, #0]
 800a626:	b003      	add	sp, #12
 800a628:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a62c:	f7ff bf9e 	b.w	800a56c <__malloc_unlock>
 800a630:	42a3      	cmp	r3, r4
 800a632:	d908      	bls.n	800a646 <_free_r+0x46>
 800a634:	6825      	ldr	r5, [r4, #0]
 800a636:	1961      	adds	r1, r4, r5
 800a638:	428b      	cmp	r3, r1
 800a63a:	bf01      	itttt	eq
 800a63c:	6819      	ldreq	r1, [r3, #0]
 800a63e:	685b      	ldreq	r3, [r3, #4]
 800a640:	1949      	addeq	r1, r1, r5
 800a642:	6021      	streq	r1, [r4, #0]
 800a644:	e7ed      	b.n	800a622 <_free_r+0x22>
 800a646:	461a      	mov	r2, r3
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	b10b      	cbz	r3, 800a650 <_free_r+0x50>
 800a64c:	42a3      	cmp	r3, r4
 800a64e:	d9fa      	bls.n	800a646 <_free_r+0x46>
 800a650:	6811      	ldr	r1, [r2, #0]
 800a652:	1855      	adds	r5, r2, r1
 800a654:	42a5      	cmp	r5, r4
 800a656:	d10b      	bne.n	800a670 <_free_r+0x70>
 800a658:	6824      	ldr	r4, [r4, #0]
 800a65a:	4421      	add	r1, r4
 800a65c:	1854      	adds	r4, r2, r1
 800a65e:	42a3      	cmp	r3, r4
 800a660:	6011      	str	r1, [r2, #0]
 800a662:	d1e0      	bne.n	800a626 <_free_r+0x26>
 800a664:	681c      	ldr	r4, [r3, #0]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	6053      	str	r3, [r2, #4]
 800a66a:	440c      	add	r4, r1
 800a66c:	6014      	str	r4, [r2, #0]
 800a66e:	e7da      	b.n	800a626 <_free_r+0x26>
 800a670:	d902      	bls.n	800a678 <_free_r+0x78>
 800a672:	230c      	movs	r3, #12
 800a674:	6003      	str	r3, [r0, #0]
 800a676:	e7d6      	b.n	800a626 <_free_r+0x26>
 800a678:	6825      	ldr	r5, [r4, #0]
 800a67a:	1961      	adds	r1, r4, r5
 800a67c:	428b      	cmp	r3, r1
 800a67e:	bf04      	itt	eq
 800a680:	6819      	ldreq	r1, [r3, #0]
 800a682:	685b      	ldreq	r3, [r3, #4]
 800a684:	6063      	str	r3, [r4, #4]
 800a686:	bf04      	itt	eq
 800a688:	1949      	addeq	r1, r1, r5
 800a68a:	6021      	streq	r1, [r4, #0]
 800a68c:	6054      	str	r4, [r2, #4]
 800a68e:	e7ca      	b.n	800a626 <_free_r+0x26>
 800a690:	b003      	add	sp, #12
 800a692:	bd30      	pop	{r4, r5, pc}
 800a694:	20000a28 	.word	0x20000a28

0800a698 <_init>:
 800a698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69a:	bf00      	nop
 800a69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a69e:	bc08      	pop	{r3}
 800a6a0:	469e      	mov	lr, r3
 800a6a2:	4770      	bx	lr

0800a6a4 <_fini>:
 800a6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a6:	bf00      	nop
 800a6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6aa:	bc08      	pop	{r3}
 800a6ac:	469e      	mov	lr, r3
 800a6ae:	4770      	bx	lr
