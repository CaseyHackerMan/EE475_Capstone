
EE_475_Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000136c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000740  08013850  08013850  00023850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013f90  08013f90  00030218  2**0
                  CONTENTS
  4 .ARM          00000008  08013f90  08013f90  00023f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013f98  08013f98  00030218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013f98  08013f98  00023f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013f9c  08013f9c  00023f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  08013fa0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030218  2**0
                  CONTENTS
 10 .bss          00000cbc  20000218  20000218  00030218  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000ed4  20000ed4  00030218  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c5b4  00000000  00000000  0003028b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003fe4  00000000  00000000  0004c83f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001878  00000000  00000000  00050828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001312  00000000  00000000  000520a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025853  00000000  00000000  000533b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ebb7  00000000  00000000  00078c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6ef6  00000000  00000000  000977bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000845c  00000000  00000000  0016e6b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00176b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013838 	.word	0x08013838

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	08013838 	.word	0x08013838

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <deg2rad>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


double deg2rad(double deg) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	ed87 0b00 	vstr	d0, [r7]
    return deg * M_PI / 180.0;
 800101a:	a30e      	add	r3, pc, #56	; (adr r3, 8001054 <deg2rad+0x44>)
 800101c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001020:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001024:	f7ff faf8 	bl	8000618 <__aeabi_dmul>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4610      	mov	r0, r2
 800102e:	4619      	mov	r1, r3
 8001030:	f04f 0200 	mov.w	r2, #0
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <deg2rad+0x40>)
 8001036:	f7ff fc19 	bl	800086c <__aeabi_ddiv>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001042:	eeb0 0a47 	vmov.f32	s0, s14
 8001046:	eef0 0a67 	vmov.f32	s1, s15
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40668000 	.word	0x40668000
 8001054:	54442d18 	.word	0x54442d18
 8001058:	400921fb 	.word	0x400921fb
 800105c:	00000000 	.word	0x00000000

08001060 <update_target>:

double update_target(double lat, double lon, double tar_lat, double tar_lon) {
 8001060:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001064:	ed2d 8b02 	vpush	{d8}
 8001068:	b098      	sub	sp, #96	; 0x60
 800106a:	af00      	add	r7, sp, #0
 800106c:	ed87 0b06 	vstr	d0, [r7, #24]
 8001070:	ed87 1b04 	vstr	d1, [r7, #16]
 8001074:	ed87 2b02 	vstr	d2, [r7, #8]
 8001078:	ed87 3b00 	vstr	d3, [r7]
    double dlon, dlat, a, c, distance;

    // Convert latitude and longitude from degrees to radians
    lat = deg2rad(lat);
 800107c:	ed97 0b06 	vldr	d0, [r7, #24]
 8001080:	f7ff ffc6 	bl	8001010 <deg2rad>
 8001084:	ed87 0b06 	vstr	d0, [r7, #24]
    lon = deg2rad(lon);
 8001088:	ed97 0b04 	vldr	d0, [r7, #16]
 800108c:	f7ff ffc0 	bl	8001010 <deg2rad>
 8001090:	ed87 0b04 	vstr	d0, [r7, #16]
    tar_lat = deg2rad(tar_lat);
 8001094:	ed97 0b02 	vldr	d0, [r7, #8]
 8001098:	f7ff ffba 	bl	8001010 <deg2rad>
 800109c:	ed87 0b02 	vstr	d0, [r7, #8]
    tar_lon = deg2rad(tar_lon);
 80010a0:	ed97 0b00 	vldr	d0, [r7]
 80010a4:	f7ff ffb4 	bl	8001010 <deg2rad>
 80010a8:	ed87 0b00 	vstr	d0, [r7]
    dlon = tar_lon - lon;
 80010ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010b4:	f7ff f8f8 	bl	80002a8 <__aeabi_dsub>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    dlat = tar_lat - lat;
 80010c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010c8:	f7ff f8ee 	bl	80002a8 <__aeabi_dsub>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

    // Calculate the bearing(direction)
    double y = sin(dlon) * cos(tar_lat);
 80010d4:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 80010d8:	f010 f9b2 	bl	8011440 <sin>
 80010dc:	ec55 4b10 	vmov	r4, r5, d0
 80010e0:	ed97 0b02 	vldr	d0, [r7, #8]
 80010e4:	f010 f958 	bl	8011398 <cos>
 80010e8:	ec53 2b10 	vmov	r2, r3, d0
 80010ec:	4620      	mov	r0, r4
 80010ee:	4629      	mov	r1, r5
 80010f0:	f7ff fa92 	bl	8000618 <__aeabi_dmul>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double x = cos(lat) * sin(tar_lat) - sin(lat) * cos(lat) * cos(dlon);
 80010fc:	ed97 0b06 	vldr	d0, [r7, #24]
 8001100:	f010 f94a 	bl	8011398 <cos>
 8001104:	ec55 4b10 	vmov	r4, r5, d0
 8001108:	ed97 0b02 	vldr	d0, [r7, #8]
 800110c:	f010 f998 	bl	8011440 <sin>
 8001110:	ec53 2b10 	vmov	r2, r3, d0
 8001114:	4620      	mov	r0, r4
 8001116:	4629      	mov	r1, r5
 8001118:	f7ff fa7e 	bl	8000618 <__aeabi_dmul>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4614      	mov	r4, r2
 8001122:	461d      	mov	r5, r3
 8001124:	ed97 0b06 	vldr	d0, [r7, #24]
 8001128:	f010 f98a 	bl	8011440 <sin>
 800112c:	ec59 8b10 	vmov	r8, r9, d0
 8001130:	ed97 0b06 	vldr	d0, [r7, #24]
 8001134:	f010 f930 	bl	8011398 <cos>
 8001138:	ec53 2b10 	vmov	r2, r3, d0
 800113c:	4640      	mov	r0, r8
 800113e:	4649      	mov	r1, r9
 8001140:	f7ff fa6a 	bl	8000618 <__aeabi_dmul>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4690      	mov	r8, r2
 800114a:	4699      	mov	r9, r3
 800114c:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 8001150:	f010 f922 	bl	8011398 <cos>
 8001154:	ec53 2b10 	vmov	r2, r3, d0
 8001158:	4640      	mov	r0, r8
 800115a:	4649      	mov	r1, r9
 800115c:	f7ff fa5c 	bl	8000618 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4620      	mov	r0, r4
 8001166:	4629      	mov	r1, r5
 8001168:	f7ff f89e 	bl	80002a8 <__aeabi_dsub>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double heading_rad = atan2(y, x);
 8001174:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 8001178:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 800117c:	f010 f83e 	bl	80111fc <atan2>
 8001180:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
    double heading_deg = heading_rad * (180 / 3.1415926536);
 8001184:	a372      	add	r3, pc, #456	; (adr r3, 8001350 <update_target+0x2f0>)
 8001186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800118e:	f7ff fa43 	bl	8000618 <__aeabi_dmul>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    abs_target_heading = fmod(heading_deg + 360, 360);
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	4b68      	ldr	r3, [pc, #416]	; (8001340 <update_target+0x2e0>)
 80011a0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80011a4:	f7ff f882 	bl	80002ac <__adddf3>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	ec43 2b17 	vmov	d7, r2, r3
 80011b0:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 8001328 <update_target+0x2c8>
 80011b4:	eeb0 0a47 	vmov.f32	s0, s14
 80011b8:	eef0 0a67 	vmov.f32	s1, s15
 80011bc:	f010 f820 	bl	8011200 <fmod>
 80011c0:	eeb0 7a40 	vmov.f32	s14, s0
 80011c4:	eef0 7a60 	vmov.f32	s15, s1
 80011c8:	4b5e      	ldr	r3, [pc, #376]	; (8001344 <update_target+0x2e4>)
 80011ca:	ed83 7b00 	vstr	d7, [r3]

    // Calculate distance
    a = pow(sin(dlat / 2), 2) + cos(lat) * cos(tar_lat) * pow(sin(dlon / 2), 2);
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80011da:	f7ff fb47 	bl	800086c <__aeabi_ddiv>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	ec43 2b17 	vmov	d7, r2, r3
 80011e6:	eeb0 0a47 	vmov.f32	s0, s14
 80011ea:	eef0 0a67 	vmov.f32	s1, s15
 80011ee:	f010 f927 	bl	8011440 <sin>
 80011f2:	eeb0 7a40 	vmov.f32	s14, s0
 80011f6:	eef0 7a60 	vmov.f32	s15, s1
 80011fa:	ed9f 1b4d 	vldr	d1, [pc, #308]	; 8001330 <update_target+0x2d0>
 80011fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001202:	eef0 0a67 	vmov.f32	s1, s15
 8001206:	f010 f829 	bl	801125c <pow>
 800120a:	ec59 8b10 	vmov	r8, r9, d0
 800120e:	ed97 0b06 	vldr	d0, [r7, #24]
 8001212:	f010 f8c1 	bl	8011398 <cos>
 8001216:	ec55 4b10 	vmov	r4, r5, d0
 800121a:	ed97 0b02 	vldr	d0, [r7, #8]
 800121e:	f010 f8bb 	bl	8011398 <cos>
 8001222:	ec53 2b10 	vmov	r2, r3, d0
 8001226:	4620      	mov	r0, r4
 8001228:	4629      	mov	r1, r5
 800122a:	f7ff f9f5 	bl	8000618 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4614      	mov	r4, r2
 8001234:	461d      	mov	r5, r3
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800123e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001242:	f7ff fb13 	bl	800086c <__aeabi_ddiv>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	ec43 2b17 	vmov	d7, r2, r3
 800124e:	eeb0 0a47 	vmov.f32	s0, s14
 8001252:	eef0 0a67 	vmov.f32	s1, s15
 8001256:	f010 f8f3 	bl	8011440 <sin>
 800125a:	eeb0 7a40 	vmov.f32	s14, s0
 800125e:	eef0 7a60 	vmov.f32	s15, s1
 8001262:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8001330 <update_target+0x2d0>
 8001266:	eeb0 0a47 	vmov.f32	s0, s14
 800126a:	eef0 0a67 	vmov.f32	s1, s15
 800126e:	f00f fff5 	bl	801125c <pow>
 8001272:	ec53 2b10 	vmov	r2, r3, d0
 8001276:	4620      	mov	r0, r4
 8001278:	4629      	mov	r1, r5
 800127a:	f7ff f9cd 	bl	8000618 <__aeabi_dmul>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4640      	mov	r0, r8
 8001284:	4649      	mov	r1, r9
 8001286:	f7ff f811 	bl	80002ac <__adddf3>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    c = 2 * atan2(sqrt(a), sqrt(1 - a));
 8001292:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001296:	f010 f851 	bl	801133c <sqrt>
 800129a:	eeb0 8a40 	vmov.f32	s16, s0
 800129e:	eef0 8a60 	vmov.f32	s17, s1
 80012a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80012a6:	f04f 0000 	mov.w	r0, #0
 80012aa:	4927      	ldr	r1, [pc, #156]	; (8001348 <update_target+0x2e8>)
 80012ac:	f7fe fffc 	bl	80002a8 <__aeabi_dsub>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	ec43 2b17 	vmov	d7, r2, r3
 80012b8:	eeb0 0a47 	vmov.f32	s0, s14
 80012bc:	eef0 0a67 	vmov.f32	s1, s15
 80012c0:	f010 f83c 	bl	801133c <sqrt>
 80012c4:	eeb0 7a40 	vmov.f32	s14, s0
 80012c8:	eef0 7a60 	vmov.f32	s15, s1
 80012cc:	eeb0 1a47 	vmov.f32	s2, s14
 80012d0:	eef0 1a67 	vmov.f32	s3, s15
 80012d4:	eeb0 0a48 	vmov.f32	s0, s16
 80012d8:	eef0 0a68 	vmov.f32	s1, s17
 80012dc:	f00f ff8e 	bl	80111fc <atan2>
 80012e0:	ec51 0b10 	vmov	r0, r1, d0
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	f7fe ffe0 	bl	80002ac <__adddf3>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    target_distance = 6371000 * c;
 80012f4:	a310      	add	r3, pc, #64	; (adr r3, 8001338 <update_target+0x2d8>)
 80012f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012fe:	f7ff f98b 	bl	8000618 <__aeabi_dmul>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4911      	ldr	r1, [pc, #68]	; (800134c <update_target+0x2ec>)
 8001308:	e9c1 2300 	strd	r2, r3, [r1]
}
 800130c:	bf00      	nop
 800130e:	eeb0 0a47 	vmov.f32	s0, s14
 8001312:	eef0 0a67 	vmov.f32	s1, s15
 8001316:	3760      	adds	r7, #96	; 0x60
 8001318:	46bd      	mov	sp, r7
 800131a:	ecbd 8b02 	vpop	{d8}
 800131e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001322:	bf00      	nop
 8001324:	f3af 8000 	nop.w
 8001328:	00000000 	.word	0x00000000
 800132c:	40768000 	.word	0x40768000
 8001330:	00000000 	.word	0x00000000
 8001334:	40000000 	.word	0x40000000
 8001338:	00000000 	.word	0x00000000
 800133c:	41584dae 	.word	0x41584dae
 8001340:	40768000 	.word	0x40768000
 8001344:	20000480 	.word	0x20000480
 8001348:	3ff00000 	.word	0x3ff00000
 800134c:	20000488 	.word	0x20000488
 8001350:	1a635ba1 	.word	0x1a635ba1
 8001354:	404ca5dc 	.word	0x404ca5dc

08001358 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	if (huart == &huart3) {
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a28      	ldr	r2, [pc, #160]	; (8001404 <HAL_UART_RxCpltCallback+0xac>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d122      	bne.n	80013ae <HAL_UART_RxCpltCallback+0x56>
		uint8_t c = UART3_Rx_buf[UART3_Rx_count++];
 8001368:	4b27      	ldr	r3, [pc, #156]	; (8001408 <HAL_UART_RxCpltCallback+0xb0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	1c5a      	adds	r2, r3, #1
 800136e:	4926      	ldr	r1, [pc, #152]	; (8001408 <HAL_UART_RxCpltCallback+0xb0>)
 8001370:	600a      	str	r2, [r1, #0]
 8001372:	4a26      	ldr	r2, [pc, #152]	; (800140c <HAL_UART_RxCpltCallback+0xb4>)
 8001374:	5cd3      	ldrb	r3, [r2, r3]
 8001376:	73bb      	strb	r3, [r7, #14]

		if(c == '\n' || UART3_Rx_count >= 100) {
 8001378:	7bbb      	ldrb	r3, [r7, #14]
 800137a:	2b0a      	cmp	r3, #10
 800137c:	d003      	beq.n	8001386 <HAL_UART_RxCpltCallback+0x2e>
 800137e:	4b22      	ldr	r3, [pc, #136]	; (8001408 <HAL_UART_RxCpltCallback+0xb0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b63      	cmp	r3, #99	; 0x63
 8001384:	dd08      	ble.n	8001398 <HAL_UART_RxCpltCallback+0x40>
			parse_GPS(UART3_Rx_buf, UART3_Rx_count);
 8001386:	4b20      	ldr	r3, [pc, #128]	; (8001408 <HAL_UART_RxCpltCallback+0xb0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4619      	mov	r1, r3
 800138c:	481f      	ldr	r0, [pc, #124]	; (800140c <HAL_UART_RxCpltCallback+0xb4>)
 800138e:	f000 f859 	bl	8001444 <parse_GPS>
			UART3_Rx_count = 0;
 8001392:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <HAL_UART_RxCpltCallback+0xb0>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, UART3_Rx_buf + UART3_Rx_count, 1);
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <HAL_UART_RxCpltCallback+0xb0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	4b1b      	ldr	r3, [pc, #108]	; (800140c <HAL_UART_RxCpltCallback+0xb4>)
 80013a0:	4413      	add	r3, r2
 80013a2:	2201      	movs	r2, #1
 80013a4:	4619      	mov	r1, r3
 80013a6:	4817      	ldr	r0, [pc, #92]	; (8001404 <HAL_UART_RxCpltCallback+0xac>)
 80013a8:	f006 feb3 	bl	8008112 <HAL_UART_Receive_IT>
			UART5_Rx_count = 0;
		}

		HAL_UART_Receive_IT(&huart5, UART5_Rx_buf + UART5_Rx_count, 1);
	}
}
 80013ac:	e025      	b.n	80013fa <HAL_UART_RxCpltCallback+0xa2>
	} else if (huart == &huart5) {
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a17      	ldr	r2, [pc, #92]	; (8001410 <HAL_UART_RxCpltCallback+0xb8>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d121      	bne.n	80013fa <HAL_UART_RxCpltCallback+0xa2>
		uint8_t c = UART5_Rx_buf[UART5_Rx_count++];
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <HAL_UART_RxCpltCallback+0xbc>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	4915      	ldr	r1, [pc, #84]	; (8001414 <HAL_UART_RxCpltCallback+0xbc>)
 80013be:	600a      	str	r2, [r1, #0]
 80013c0:	4a15      	ldr	r2, [pc, #84]	; (8001418 <HAL_UART_RxCpltCallback+0xc0>)
 80013c2:	5cd3      	ldrb	r3, [r2, r3]
 80013c4:	73fb      	strb	r3, [r7, #15]
		if(c == '\n' || UART5_Rx_count >= 100) {
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	2b0a      	cmp	r3, #10
 80013ca:	d003      	beq.n	80013d4 <HAL_UART_RxCpltCallback+0x7c>
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <HAL_UART_RxCpltCallback+0xbc>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b63      	cmp	r3, #99	; 0x63
 80013d2:	dd08      	ble.n	80013e6 <HAL_UART_RxCpltCallback+0x8e>
			parse_lora(UART5_Rx_buf, UART5_Rx_count);
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <HAL_UART_RxCpltCallback+0xbc>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	480f      	ldr	r0, [pc, #60]	; (8001418 <HAL_UART_RxCpltCallback+0xc0>)
 80013dc:	f000 f81e 	bl	800141c <parse_lora>
			UART5_Rx_count = 0;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <HAL_UART_RxCpltCallback+0xbc>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart5, UART5_Rx_buf + UART5_Rx_count, 1);
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_UART_RxCpltCallback+0xbc>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_UART_RxCpltCallback+0xc0>)
 80013ee:	4413      	add	r3, r2
 80013f0:	2201      	movs	r2, #1
 80013f2:	4619      	mov	r1, r3
 80013f4:	4806      	ldr	r0, [pc, #24]	; (8001410 <HAL_UART_RxCpltCallback+0xb8>)
 80013f6:	f006 fe8c 	bl	8008112 <HAL_UART_Receive_IT>
}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200003b8 	.word	0x200003b8
 8001408:	20000558 	.word	0x20000558
 800140c:	200004f4 	.word	0x200004f4
 8001410:	20000328 	.word	0x20000328
 8001414:	200005c0 	.word	0x200005c0
 8001418:	2000055c 	.word	0x2000055c

0800141c <parse_lora>:

void parse_lora(uint8_t* buf, int count) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, buf, count, HAL_MAX_DELAY);
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	b29a      	uxth	r2, r3
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4803      	ldr	r0, [pc, #12]	; (8001440 <parse_lora+0x24>)
 8001432:	f006 fde3 	bl	8007ffc <HAL_UART_Transmit>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000370 	.word	0x20000370

08001444 <parse_GPS>:

void parse_GPS(uint8_t* buf, int count) {
 8001444:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001448:	b094      	sub	sp, #80	; 0x50
 800144a:	af04      	add	r7, sp, #16
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	6039      	str	r1, [r7, #0]
	// $GPRMC,011725.00,A,4739.21106,N,12218.32692,W,0.019,,190224,,,D*6A
	// 0      1         2 3          4 5           6

	if (count <= 6 || strcmp((char*) buf, "$GPRMC")) return;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	2b06      	cmp	r3, #6
 8001454:	f340 80d5 	ble.w	8001602 <parse_GPS+0x1be>
 8001458:	496c      	ldr	r1, [pc, #432]	; (800160c <parse_GPS+0x1c8>)
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7fe feb8 	bl	80001d0 <strcmp>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	f040 80cd 	bne.w	8001602 <parse_GPS+0x1be>

	HAL_UART_Transmit(&huart2, buf, count, HAL_MAX_DELAY);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	b29a      	uxth	r2, r3
 800146c:	f04f 33ff 	mov.w	r3, #4294967295
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	4867      	ldr	r0, [pc, #412]	; (8001610 <parse_GPS+0x1cc>)
 8001474:	f006 fdc2 	bl	8007ffc <HAL_UART_Transmit>

	int i = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t* items[11];
	uint8_t* ptr = buf;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	63bb      	str	r3, [r7, #56]	; 0x38
	items[i++] = ptr;
 8001480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001482:	1c5a      	adds	r2, r3, #1
 8001484:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	3340      	adds	r3, #64	; 0x40
 800148a:	443b      	add	r3, r7
 800148c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800148e:	f843 2c34 	str.w	r2, [r3, #-52]

	while (ptr < buf+count) {
 8001492:	e016      	b.n	80014c2 <parse_GPS+0x7e>
		if (*ptr == ',') {
 8001494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b2c      	cmp	r3, #44	; 0x2c
 800149a:	d10f      	bne.n	80014bc <parse_GPS+0x78>
			*ptr = '\0';
 800149c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
			if (i < 11) items[i++] = ptr+1;
 80014a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014a4:	2b0a      	cmp	r3, #10
 80014a6:	dc13      	bgt.n	80014d0 <parse_GPS+0x8c>
 80014a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80014ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014b0:	3201      	adds	r2, #1
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	3340      	adds	r3, #64	; 0x40
 80014b6:	443b      	add	r3, r7
 80014b8:	f843 2c34 	str.w	r2, [r3, #-52]
			else break;
		}
		ptr++;
 80014bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014be:	3301      	adds	r3, #1
 80014c0:	63bb      	str	r3, [r7, #56]	; 0x38
	while (ptr < buf+count) {
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d3e2      	bcc.n	8001494 <parse_GPS+0x50>
 80014ce:	e000      	b.n	80014d2 <parse_GPS+0x8e>
			else break;
 80014d0:	bf00      	nop
	}

	if (*items[2] == 'A') time = atof(items[1]);
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b41      	cmp	r3, #65	; 0x41
 80014d8:	d10a      	bne.n	80014f0 <parse_GPS+0xac>
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4618      	mov	r0, r3
 80014de:	f00b fa9b 	bl	800ca18 <atof>
 80014e2:	eeb0 7a40 	vmov.f32	s14, s0
 80014e6:	eef0 7a60 	vmov.f32	s15, s1
 80014ea:	4b4a      	ldr	r3, [pc, #296]	; (8001614 <parse_GPS+0x1d0>)
 80014ec:	ed83 7b00 	vstr	d7, [r3]
	if (*items[4] == 'N') latitude = format_NMEA(items[3]);
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b4e      	cmp	r3, #78	; 0x4e
 80014f6:	d10b      	bne.n	8001510 <parse_GPS+0xcc>
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f89e 	bl	800163c <format_NMEA>
 8001500:	eeb0 7a40 	vmov.f32	s14, s0
 8001504:	eef0 7a60 	vmov.f32	s15, s1
 8001508:	4b43      	ldr	r3, [pc, #268]	; (8001618 <parse_GPS+0x1d4>)
 800150a:	ed83 7b00 	vstr	d7, [r3]
 800150e:	e00f      	b.n	8001530 <parse_GPS+0xec>
	else if (*items[4] == 'S') latitude = -format_NMEA(items[3]);
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b53      	cmp	r3, #83	; 0x53
 8001516:	d10b      	bne.n	8001530 <parse_GPS+0xec>
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f88e 	bl	800163c <format_NMEA>
 8001520:	ec53 2b10 	vmov	r2, r3, d0
 8001524:	4690      	mov	r8, r2
 8001526:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800152a:	4b3b      	ldr	r3, [pc, #236]	; (8001618 <parse_GPS+0x1d4>)
 800152c:	e9c3 8900 	strd	r8, r9, [r3]
	if (*items[6] == 'E') longitude = format_NMEA(items[5]);
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b45      	cmp	r3, #69	; 0x45
 8001536:	d10b      	bne.n	8001550 <parse_GPS+0x10c>
 8001538:	6a3b      	ldr	r3, [r7, #32]
 800153a:	4618      	mov	r0, r3
 800153c:	f000 f87e 	bl	800163c <format_NMEA>
 8001540:	eeb0 7a40 	vmov.f32	s14, s0
 8001544:	eef0 7a60 	vmov.f32	s15, s1
 8001548:	4b34      	ldr	r3, [pc, #208]	; (800161c <parse_GPS+0x1d8>)
 800154a:	ed83 7b00 	vstr	d7, [r3]
 800154e:	e00f      	b.n	8001570 <parse_GPS+0x12c>
	else if (*items[6] == 'W') longitude = -format_NMEA(items[5]);
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b57      	cmp	r3, #87	; 0x57
 8001556:	d10b      	bne.n	8001570 <parse_GPS+0x12c>
 8001558:	6a3b      	ldr	r3, [r7, #32]
 800155a:	4618      	mov	r0, r3
 800155c:	f000 f86e 	bl	800163c <format_NMEA>
 8001560:	ec53 2b10 	vmov	r2, r3, d0
 8001564:	4614      	mov	r4, r2
 8001566:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800156a:	4b2c      	ldr	r3, [pc, #176]	; (800161c <parse_GPS+0x1d8>)
 800156c:	e9c3 4500 	strd	r4, r5, [r3]
	if (*items[8] != '\0') abs_heading = atof(items[8]);
 8001570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d00c      	beq.n	8001592 <parse_GPS+0x14e>
 8001578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157a:	4618      	mov	r0, r3
 800157c:	f00b fa4c 	bl	800ca18 <atof>
 8001580:	ec53 2b10 	vmov	r2, r3, d0
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	f7ff fb3e 	bl	8000c08 <__aeabi_d2f>
 800158c:	4603      	mov	r3, r0
 800158e:	4a24      	ldr	r2, [pc, #144]	; (8001620 <parse_GPS+0x1dc>)
 8001590:	6013      	str	r3, [r2, #0]

	update_target(latitude, longitude, target_latitude, target_longitude);
 8001592:	4b21      	ldr	r3, [pc, #132]	; (8001618 <parse_GPS+0x1d4>)
 8001594:	ed93 7b00 	vldr	d7, [r3]
 8001598:	4b20      	ldr	r3, [pc, #128]	; (800161c <parse_GPS+0x1d8>)
 800159a:	ed93 6b00 	vldr	d6, [r3]
 800159e:	4b21      	ldr	r3, [pc, #132]	; (8001624 <parse_GPS+0x1e0>)
 80015a0:	ed93 5b00 	vldr	d5, [r3]
 80015a4:	4b20      	ldr	r3, [pc, #128]	; (8001628 <parse_GPS+0x1e4>)
 80015a6:	ed93 4b00 	vldr	d4, [r3]
 80015aa:	eeb0 3a44 	vmov.f32	s6, s8
 80015ae:	eef0 3a64 	vmov.f32	s7, s9
 80015b2:	eeb0 2a45 	vmov.f32	s4, s10
 80015b6:	eef0 2a65 	vmov.f32	s5, s11
 80015ba:	eeb0 1a46 	vmov.f32	s2, s12
 80015be:	eef0 1a66 	vmov.f32	s3, s13
 80015c2:	eeb0 0a47 	vmov.f32	s0, s14
 80015c6:	eef0 0a67 	vmov.f32	s1, s15
 80015ca:	f7ff fd49 	bl	8001060 <update_target>

	sprintf((char*) UART2_Tx_buf, "T_Dist=%f, T_Head=%f, C_Head=%f\r\n",
 80015ce:	4b17      	ldr	r3, [pc, #92]	; (800162c <parse_GPS+0x1e8>)
 80015d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80015d4:	4b16      	ldr	r3, [pc, #88]	; (8001630 <parse_GPS+0x1ec>)
 80015d6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <parse_GPS+0x1dc>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ffc2 	bl	8000568 <__aeabi_f2d>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80015ec:	e9cd 4500 	strd	r4, r5, [sp]
 80015f0:	4642      	mov	r2, r8
 80015f2:	464b      	mov	r3, r9
 80015f4:	490f      	ldr	r1, [pc, #60]	; (8001634 <parse_GPS+0x1f0>)
 80015f6:	4810      	ldr	r0, [pc, #64]	; (8001638 <parse_GPS+0x1f4>)
 80015f8:	f00d f824 	bl	800e644 <siprintf>
				target_distance, abs_target_heading, abs_heading);
	printd();
 80015fc:	f000 f8f6 	bl	80017ec <printd>
 8001600:	e000      	b.n	8001604 <parse_GPS+0x1c0>
	if (count <= 6 || strcmp((char*) buf, "$GPRMC")) return;
 8001602:	bf00      	nop
}
 8001604:	3740      	adds	r7, #64	; 0x40
 8001606:	46bd      	mov	sp, r7
 8001608:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800160c:	08013850 	.word	0x08013850
 8001610:	20000370 	.word	0x20000370
 8001614:	20000460 	.word	0x20000460
 8001618:	20000468 	.word	0x20000468
 800161c:	20000470 	.word	0x20000470
 8001620:	20000478 	.word	0x20000478
 8001624:	20000000 	.word	0x20000000
 8001628:	20000008 	.word	0x20000008
 800162c:	20000488 	.word	0x20000488
 8001630:	20000480 	.word	0x20000480
 8001634:	08013858 	.word	0x08013858
 8001638:	20000490 	.word	0x20000490

0800163c <format_NMEA>:

double format_NMEA(uint8_t* buf) {
 800163c:	b5b0      	push	{r4, r5, r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	double val = atof(buf);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f00b f9e7 	bl	800ca18 <atof>
 800164a:	ed87 0b04 	vstr	d0, [r7, #16]
	int deg = val/100;
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <format_NMEA+0x8c>)
 8001654:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001658:	f7ff f908 	bl	800086c <__aeabi_ddiv>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	f7ff fa88 	bl	8000b78 <__aeabi_d2iz>
 8001668:	4603      	mov	r3, r0
 800166a:	60fb      	str	r3, [r7, #12]
	return (val - deg*100)/60 + deg;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2264      	movs	r2, #100	; 0x64
 8001670:	fb02 f303 	mul.w	r3, r2, r3
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe ff65 	bl	8000544 <__aeabi_i2d>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001682:	f7fe fe11 	bl	80002a8 <__aeabi_dsub>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4610      	mov	r0, r2
 800168c:	4619      	mov	r1, r3
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <format_NMEA+0x90>)
 8001694:	f7ff f8ea 	bl	800086c <__aeabi_ddiv>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4614      	mov	r4, r2
 800169e:	461d      	mov	r5, r3
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f7fe ff4f 	bl	8000544 <__aeabi_i2d>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4620      	mov	r0, r4
 80016ac:	4629      	mov	r1, r5
 80016ae:	f7fe fdfd 	bl	80002ac <__adddf3>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	ec43 2b17 	vmov	d7, r2, r3
}
 80016ba:	eeb0 0a47 	vmov.f32	s0, s14
 80016be:	eef0 0a67 	vmov.f32	s1, s15
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bdb0      	pop	{r4, r5, r7, pc}
 80016c8:	40590000 	.word	0x40590000
 80016cc:	404e0000 	.word	0x404e0000

080016d0 <read_rel_heading>:
	sprintf((char*) UART2_Tx_buf, "Time=%d:%d:%d Latitude=%f, Longitude=%f\r\n",
			Hours, Min, Sec, Lat, Long);
	printd();
}

float read_rel_heading() {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af04      	add	r7, sp, #16
	uint8_t data[2];
	HAL_I2C_Mem_Read(&hi2c1, BNO055_ADDRESS << 1, BNO055_ADDR_HEADING, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
 80016da:	9302      	str	r3, [sp, #8]
 80016dc:	2302      	movs	r3, #2
 80016de:	9301      	str	r3, [sp, #4]
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2301      	movs	r3, #1
 80016e6:	221a      	movs	r2, #26
 80016e8:	2150      	movs	r1, #80	; 0x50
 80016ea:	480c      	ldr	r0, [pc, #48]	; (800171c <read_rel_heading+0x4c>)
 80016ec:	f004 fa4a 	bl	8005b84 <HAL_I2C_Mem_Read>
	return (float)((int16_t)(data[1] << 8 | data[0])) / 16.0;
 80016f0:	797b      	ldrb	r3, [r7, #5]
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	793b      	ldrb	r3, [r7, #4]
 80016f8:	b21b      	sxth	r3, r3
 80016fa:	4313      	orrs	r3, r2
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	ee07 3a90 	vmov	s15, r3
 8001702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001706:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800170a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800170e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001712:	eeb0 0a67 	vmov.f32	s0, s15
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000234 	.word	0x20000234

08001720 <set_steering>:
//	double siny_cosp = 2 * (qw * qz + qx * qy);
//	double cosy_cosp = 1 - 2 * (qy * qy + qz * qz);
//	return atan2(siny_cosp, cosy_cosp)*180/3.14159265;
//}

void set_steering(float direction) {
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	ed87 0a01 	vstr	s0, [r7, #4]
	int pulse = direction*500+1500;
 800172a:	edd7 7a01 	vldr	s15, [r7, #4]
 800172e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001778 <set_steering+0x58>
 8001732:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001736:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800177c <set_steering+0x5c>
 800173a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800173e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001742:	ee17 3a90 	vmov	r3, s15
 8001746:	60fb      	str	r3, [r7, #12]
	if (pulse > 2000) pulse = 2000;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800174e:	dd02      	ble.n	8001756 <set_steering+0x36>
 8001750:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001754:	60fb      	str	r3, [r7, #12]
	if (pulse < 1000) pulse = 1000;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800175c:	da02      	bge.n	8001764 <set_steering+0x44>
 800175e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001762:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <set_steering+0x60>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	43fa0000 	.word	0x43fa0000
 800177c:	44bb8000 	.word	0x44bb8000
 8001780:	200002e0 	.word	0x200002e0

08001784 <set_speed>:

void set_speed(float speed) {
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	ed87 0a01 	vstr	s0, [r7, #4]
	int pulse = speed*200+1500;
 800178e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001792:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80017e0 <set_speed+0x5c>
 8001796:	ee67 7a87 	vmul.f32	s15, s15, s14
 800179a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80017e4 <set_speed+0x60>
 800179e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017a6:	ee17 3a90 	vmov	r3, s15
 80017aa:	60fb      	str	r3, [r7, #12]
	if (pulse > 1700) pulse = 1700;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80017b2:	4293      	cmp	r3, r2
 80017b4:	dd02      	ble.n	80017bc <set_speed+0x38>
 80017b6:	f240 63a4 	movw	r3, #1700	; 0x6a4
 80017ba:	60fb      	str	r3, [r7, #12]
	if (pulse < 1500) pulse = 1500;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f240 52db 	movw	r2, #1499	; 0x5db
 80017c2:	4293      	cmp	r3, r2
 80017c4:	dc02      	bgt.n	80017cc <set_speed+0x48>
 80017c6:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80017ca:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse);
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <set_speed+0x64>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	43480000 	.word	0x43480000
 80017e4:	44bb8000 	.word	0x44bb8000
 80017e8:	200002e0 	.word	0x200002e0

080017ec <printd>:

void printd() {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, UART2_Tx_buf, strlen((char*) UART2_Tx_buf), HAL_MAX_DELAY);
 80017f0:	4806      	ldr	r0, [pc, #24]	; (800180c <printd+0x20>)
 80017f2:	f7fe fd4d 	bl	8000290 <strlen>
 80017f6:	4603      	mov	r3, r0
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295
 80017fe:	4903      	ldr	r1, [pc, #12]	; (800180c <printd+0x20>)
 8001800:	4803      	ldr	r0, [pc, #12]	; (8001810 <printd+0x24>)
 8001802:	f006 fbfb 	bl	8007ffc <HAL_UART_Transmit>
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000490 	.word	0x20000490
 8001810:	20000370 	.word	0x20000370

08001814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	; 0x28
 8001818:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800181a:	f000 ff81 	bl	8002720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800181e:	f000 f89f 	bl	8001960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001822:	f000 fab9 	bl	8001d98 <MX_GPIO_Init>
  MX_DMA_Init();
 8001826:	f000 fa97 	bl	8001d58 <MX_DMA_Init>
  MX_I2C1_Init();
 800182a:	f000 f903 	bl	8001a34 <MX_I2C1_Init>
  MX_SPI1_Init();
 800182e:	f000 f92f 	bl	8001a90 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001832:	f00a fde7 	bl	800c404 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8001836:	f000 fa3b 	bl	8001cb0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800183a:	f000 f95f 	bl	8001afc <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800183e:	f000 fa61 	bl	8001d04 <MX_USART3_UART_Init>
  MX_UART5_Init();
 8001842:	f000 fa0b 	bl	8001c5c <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  int i = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
  char ready = 0; // wait for GPS fix
 800184a:	2300      	movs	r3, #0
 800184c:	74fb      	strb	r3, [r7, #19]
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800184e:	2100      	movs	r1, #0
 8001850:	4835      	ldr	r0, [pc, #212]	; (8001928 <main+0x114>)
 8001852:	f005 fd47 	bl	80072e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001856:	2104      	movs	r1, #4
 8001858:	4833      	ldr	r0, [pc, #204]	; (8001928 <main+0x114>)
 800185a:	f005 fd43 	bl	80072e4 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, UART3_Rx_buf, 1);
 800185e:	2201      	movs	r2, #1
 8001860:	4932      	ldr	r1, [pc, #200]	; (800192c <main+0x118>)
 8001862:	4833      	ldr	r0, [pc, #204]	; (8001930 <main+0x11c>)
 8001864:	f006 fc55 	bl	8008112 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart5, UART5_Rx_buf, 1);
 8001868:	2201      	movs	r2, #1
 800186a:	4932      	ldr	r1, [pc, #200]	; (8001934 <main+0x120>)
 800186c:	4832      	ldr	r0, [pc, #200]	; (8001938 <main+0x124>)
 800186e:	f006 fc50 	bl	8008112 <HAL_UART_Receive_IT>
  uint8_t mode = BNO055_MODE_IMU;
 8001872:	2308      	movs	r3, #8
 8001874:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, BNO055_ADDRESS << 1, BNO055_ADDR_OPRMODE, I2C_MEMADD_SIZE_8BIT, &mode, 1, HAL_MAX_DELAY);
 8001876:	f04f 33ff 	mov.w	r3, #4294967295
 800187a:	9302      	str	r3, [sp, #8]
 800187c:	2301      	movs	r3, #1
 800187e:	9301      	str	r3, [sp, #4]
 8001880:	1dfb      	adds	r3, r7, #7
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	2301      	movs	r3, #1
 8001886:	223d      	movs	r2, #61	; 0x3d
 8001888:	2150      	movs	r1, #80	; 0x50
 800188a:	482c      	ldr	r0, [pc, #176]	; (800193c <main+0x128>)
 800188c:	f004 f880 	bl	8005990 <HAL_I2C_Mem_Write>
  HAL_UART_Transmit(&huart2, (uint8_t*) "Hello!\r\n", 8, HAL_MAX_DELAY);
 8001890:	f04f 33ff 	mov.w	r3, #4294967295
 8001894:	2208      	movs	r2, #8
 8001896:	492a      	ldr	r1, [pc, #168]	; (8001940 <main+0x12c>)
 8001898:	482a      	ldr	r0, [pc, #168]	; (8001944 <main+0x130>)
 800189a:	f006 fbaf 	bl	8007ffc <HAL_UART_Transmit>
  set_steering(0);
 800189e:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8001948 <main+0x134>
 80018a2:	f7ff ff3d 	bl	8001720 <set_steering>
  set_speed(0);
 80018a6:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8001948 <main+0x134>
 80018aa:	f7ff ff6b 	bl	8001784 <set_speed>
  HAL_Delay(2000);
 80018ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018b2:	f000 ffa7 	bl	8002804 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80018b6:	f00a fdcb 	bl	800c450 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    rel_heading = read_rel_heading();
 80018ba:	f7ff ff09 	bl	80016d0 <read_rel_heading>
 80018be:	eef0 7a40 	vmov.f32	s15, s0
 80018c2:	4b22      	ldr	r3, [pc, #136]	; (800194c <main+0x138>)
 80018c4:	edc3 7a00 	vstr	s15, [r3]
    // printd();




    if (latitude && longitude) ready = 1;
 80018c8:	4b21      	ldr	r3, [pc, #132]	; (8001950 <main+0x13c>)
 80018ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	f7ff f907 	bl	8000ae8 <__aeabi_dcmpeq>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10d      	bne.n	80018fc <main+0xe8>
 80018e0:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <main+0x140>)
 80018e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	f04f 0300 	mov.w	r3, #0
 80018ee:	f7ff f8fb 	bl	8000ae8 <__aeabi_dcmpeq>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <main+0xe8>
 80018f8:	2301      	movs	r3, #1
 80018fa:	74fb      	strb	r3, [r7, #19]
    if (ready) {
 80018fc:	7cfb      	ldrb	r3, [r7, #19]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00b      	beq.n	800191a <main+0x106>


    	// If we are outside the wanted radius
    	double dist_err = target_distance - FOUNTAIN_R;
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <main+0x144>)
 8001904:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <main+0x148>)
 800190e:	f7fe fccb 	bl	80002a8 <__aeabi_dsub>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	e9c7 2302 	strd	r2, r3, [r7, #8]
    	}
    } else {
    	set_speed(0);
    }*/

    HAL_Delay(LOOP_DELAY);
 800191a:	2064      	movs	r0, #100	; 0x64
 800191c:	f000 ff72 	bl	8002804 <HAL_Delay>
    i++;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	3301      	adds	r3, #1
 8001924:	617b      	str	r3, [r7, #20]
    MX_USB_HOST_Process();
 8001926:	e7c6      	b.n	80018b6 <main+0xa2>
 8001928:	200002e0 	.word	0x200002e0
 800192c:	200004f4 	.word	0x200004f4
 8001930:	200003b8 	.word	0x200003b8
 8001934:	2000055c 	.word	0x2000055c
 8001938:	20000328 	.word	0x20000328
 800193c:	20000234 	.word	0x20000234
 8001940:	080138a8 	.word	0x080138a8
 8001944:	20000370 	.word	0x20000370
 8001948:	00000000 	.word	0x00000000
 800194c:	2000047c 	.word	0x2000047c
 8001950:	20000468 	.word	0x20000468
 8001954:	20000470 	.word	0x20000470
 8001958:	20000488 	.word	0x20000488
 800195c:	40408000 	.word	0x40408000

08001960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b094      	sub	sp, #80	; 0x50
 8001964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001966:	f107 0320 	add.w	r3, r7, #32
 800196a:	2230      	movs	r2, #48	; 0x30
 800196c:	2100      	movs	r1, #0
 800196e:	4618      	mov	r0, r3
 8001970:	f00c fecb 	bl	800e70a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001974:	f107 030c 	add.w	r3, r7, #12
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001984:	2300      	movs	r3, #0
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	4b28      	ldr	r3, [pc, #160]	; (8001a2c <SystemClock_Config+0xcc>)
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	4a27      	ldr	r2, [pc, #156]	; (8001a2c <SystemClock_Config+0xcc>)
 800198e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001992:	6413      	str	r3, [r2, #64]	; 0x40
 8001994:	4b25      	ldr	r3, [pc, #148]	; (8001a2c <SystemClock_Config+0xcc>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a0:	2300      	movs	r3, #0
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <SystemClock_Config+0xd0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a21      	ldr	r2, [pc, #132]	; (8001a30 <SystemClock_Config+0xd0>)
 80019aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <SystemClock_Config+0xd0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019bc:	2301      	movs	r3, #1
 80019be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019c6:	2302      	movs	r3, #2
 80019c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019d0:	2308      	movs	r3, #8
 80019d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80019d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80019d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019da:	2302      	movs	r3, #2
 80019dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80019de:	2307      	movs	r3, #7
 80019e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e2:	f107 0320 	add.w	r3, r7, #32
 80019e6:	4618      	mov	r0, r3
 80019e8:	f004 feb2 	bl	8006750 <HAL_RCC_OscConfig>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80019f2:	f000 faef 	bl	8001fd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f6:	230f      	movs	r3, #15
 80019f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019fa:	2302      	movs	r3, #2
 80019fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	2105      	movs	r1, #5
 8001a14:	4618      	mov	r0, r3
 8001a16:	f005 f913 	bl	8006c40 <HAL_RCC_ClockConfig>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001a20:	f000 fad8 	bl	8001fd4 <Error_Handler>
  }
}
 8001a24:	bf00      	nop
 8001a26:	3750      	adds	r7, #80	; 0x50
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40007000 	.word	0x40007000

08001a34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a3a:	4a13      	ldr	r2, [pc, #76]	; (8001a88 <MX_I2C1_Init+0x54>)
 8001a3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a40:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <MX_I2C1_Init+0x58>)
 8001a42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a64:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a72:	f003 fe49 	bl	8005708 <HAL_I2C_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a7c:	f000 faaa 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000234 	.word	0x20000234
 8001a88:	40005400 	.word	0x40005400
 8001a8c:	000186a0 	.word	0x000186a0

08001a90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a94:	4b17      	ldr	r3, [pc, #92]	; (8001af4 <MX_SPI1_Init+0x64>)
 8001a96:	4a18      	ldr	r2, [pc, #96]	; (8001af8 <MX_SPI1_Init+0x68>)
 8001a98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a9a:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <MX_SPI1_Init+0x64>)
 8001a9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001aa0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001aa2:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <MX_SPI1_Init+0x64>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <MX_SPI1_Init+0x64>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <MX_SPI1_Init+0x64>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <MX_SPI1_Init+0x64>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <MX_SPI1_Init+0x64>)
 8001abc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ac0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <MX_SPI1_Init+0x64>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <MX_SPI1_Init+0x64>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <MX_SPI1_Init+0x64>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ad4:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <MX_SPI1_Init+0x64>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <MX_SPI1_Init+0x64>)
 8001adc:	220a      	movs	r2, #10
 8001ade:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ae0:	4804      	ldr	r0, [pc, #16]	; (8001af4 <MX_SPI1_Init+0x64>)
 8001ae2:	f005 facd 	bl	8007080 <HAL_SPI_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001aec:	f000 fa72 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000288 	.word	0x20000288
 8001af8:	40013000 	.word	0x40013000

08001afc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b096      	sub	sp, #88	; 0x58
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]
 8001b26:	60da      	str	r2, [r3, #12]
 8001b28:	611a      	str	r2, [r3, #16]
 8001b2a:	615a      	str	r2, [r3, #20]
 8001b2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	2220      	movs	r2, #32
 8001b32:	2100      	movs	r1, #0
 8001b34:	4618      	mov	r0, r3
 8001b36:	f00c fde8 	bl	800e70a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b3a:	4b46      	ldr	r3, [pc, #280]	; (8001c54 <MX_TIM1_Init+0x158>)
 8001b3c:	4a46      	ldr	r2, [pc, #280]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001b3e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168;
 8001b40:	4b44      	ldr	r3, [pc, #272]	; (8001c54 <MX_TIM1_Init+0x158>)
 8001b42:	22a8      	movs	r2, #168	; 0xa8
 8001b44:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b46:	4b43      	ldr	r3, [pc, #268]	; (8001c54 <MX_TIM1_Init+0x158>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001b4c:	4b41      	ldr	r3, [pc, #260]	; (8001c54 <MX_TIM1_Init+0x158>)
 8001b4e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001b52:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b54:	4b3f      	ldr	r3, [pc, #252]	; (8001c54 <MX_TIM1_Init+0x158>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b5a:	4b3e      	ldr	r3, [pc, #248]	; (8001c54 <MX_TIM1_Init+0x158>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b60:	4b3c      	ldr	r3, [pc, #240]	; (8001c54 <MX_TIM1_Init+0x158>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b66:	483b      	ldr	r0, [pc, #236]	; (8001c54 <MX_TIM1_Init+0x158>)
 8001b68:	f005 fb13 	bl	8007192 <HAL_TIM_Base_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001b72:	f000 fa2f 	bl	8001fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b7a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b80:	4619      	mov	r1, r3
 8001b82:	4834      	ldr	r0, [pc, #208]	; (8001c54 <MX_TIM1_Init+0x158>)
 8001b84:	f005 fd38 	bl	80075f8 <HAL_TIM_ConfigClockSource>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b8e:	f000 fa21 	bl	8001fd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b92:	4830      	ldr	r0, [pc, #192]	; (8001c54 <MX_TIM1_Init+0x158>)
 8001b94:	f005 fb4c 	bl	8007230 <HAL_TIM_PWM_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b9e:	f000 fa19 	bl	8001fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001baa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4828      	ldr	r0, [pc, #160]	; (8001c54 <MX_TIM1_Init+0x158>)
 8001bb2:	f006 f905 	bl	8007dc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001bbc:	f000 fa0a 	bl	8001fd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bc0:	2360      	movs	r3, #96	; 0x60
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8001bc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be2:	2200      	movs	r2, #0
 8001be4:	4619      	mov	r1, r3
 8001be6:	481b      	ldr	r0, [pc, #108]	; (8001c54 <MX_TIM1_Init+0x158>)
 8001be8:	f005 fc44 	bl	8007474 <HAL_TIM_PWM_ConfigChannel>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001bf2:	f000 f9ef 	bl	8001fd4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bfe:	2204      	movs	r2, #4
 8001c00:	4619      	mov	r1, r3
 8001c02:	4814      	ldr	r0, [pc, #80]	; (8001c54 <MX_TIM1_Init+0x158>)
 8001c04:	f005 fc36 	bl	8007474 <HAL_TIM_PWM_ConfigChannel>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001c0e:	f000 f9e1 	bl	8001fd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c2a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	4619      	mov	r1, r3
 8001c34:	4807      	ldr	r0, [pc, #28]	; (8001c54 <MX_TIM1_Init+0x158>)
 8001c36:	f006 f93f 	bl	8007eb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8001c40:	f000 f9c8 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c44:	4803      	ldr	r0, [pc, #12]	; (8001c54 <MX_TIM1_Init+0x158>)
 8001c46:	f000 faa5 	bl	8002194 <HAL_TIM_MspPostInit>

}
 8001c4a:	bf00      	nop
 8001c4c:	3758      	adds	r7, #88	; 0x58
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	200002e0 	.word	0x200002e0
 8001c58:	40010000 	.word	0x40010000

08001c5c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <MX_UART5_Init+0x4c>)
 8001c62:	4a12      	ldr	r2, [pc, #72]	; (8001cac <MX_UART5_Init+0x50>)
 8001c64:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 38400;
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <MX_UART5_Init+0x4c>)
 8001c68:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001c6c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <MX_UART5_Init+0x4c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <MX_UART5_Init+0x4c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <MX_UART5_Init+0x4c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <MX_UART5_Init+0x4c>)
 8001c82:	220c      	movs	r2, #12
 8001c84:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <MX_UART5_Init+0x4c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <MX_UART5_Init+0x4c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001c92:	4805      	ldr	r0, [pc, #20]	; (8001ca8 <MX_UART5_Init+0x4c>)
 8001c94:	f006 f962 	bl	8007f5c <HAL_UART_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001c9e:	f000 f999 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000328 	.word	0x20000328
 8001cac:	40005000 	.word	0x40005000

08001cb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <MX_USART2_UART_Init+0x4c>)
 8001cb6:	4a12      	ldr	r2, [pc, #72]	; (8001d00 <MX_USART2_UART_Init+0x50>)
 8001cb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <MX_USART2_UART_Init+0x4c>)
 8001cbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <MX_USART2_UART_Init+0x4c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <MX_USART2_UART_Init+0x4c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <MX_USART2_UART_Init+0x4c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cd4:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <MX_USART2_UART_Init+0x4c>)
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <MX_USART2_UART_Init+0x4c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <MX_USART2_UART_Init+0x4c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ce6:	4805      	ldr	r0, [pc, #20]	; (8001cfc <MX_USART2_UART_Init+0x4c>)
 8001ce8:	f006 f938 	bl	8007f5c <HAL_UART_Init>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cf2:	f000 f96f 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000370 	.word	0x20000370
 8001d00:	40004400 	.word	0x40004400

08001d04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <MX_USART3_UART_Init+0x4c>)
 8001d0a:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <MX_USART3_UART_Init+0x50>)
 8001d0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <MX_USART3_UART_Init+0x4c>)
 8001d10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <MX_USART3_UART_Init+0x4c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <MX_USART3_UART_Init+0x4c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d22:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <MX_USART3_UART_Init+0x4c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <MX_USART3_UART_Init+0x4c>)
 8001d2a:	220c      	movs	r2, #12
 8001d2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d2e:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <MX_USART3_UART_Init+0x4c>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <MX_USART3_UART_Init+0x4c>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d3a:	4805      	ldr	r0, [pc, #20]	; (8001d50 <MX_USART3_UART_Init+0x4c>)
 8001d3c:	f006 f90e 	bl	8007f5c <HAL_UART_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001d46:	f000 f945 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200003b8 	.word	0x200003b8
 8001d54:	40004800 	.word	0x40004800

08001d58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <MX_DMA_Init+0x3c>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a0b      	ldr	r2, [pc, #44]	; (8001d94 <MX_DMA_Init+0x3c>)
 8001d68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <MX_DMA_Init+0x3c>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	200c      	movs	r0, #12
 8001d80:	f000 fe3f 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d84:	200c      	movs	r0, #12
 8001d86:	f000 fe58 	bl	8002a3a <HAL_NVIC_EnableIRQ>

}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40023800 	.word	0x40023800

08001d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08c      	sub	sp, #48	; 0x30
 8001d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9e:	f107 031c 	add.w	r3, r7, #28
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	60da      	str	r2, [r3, #12]
 8001dac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
 8001db2:	4b82      	ldr	r3, [pc, #520]	; (8001fbc <MX_GPIO_Init+0x224>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a81      	ldr	r2, [pc, #516]	; (8001fbc <MX_GPIO_Init+0x224>)
 8001db8:	f043 0310 	orr.w	r3, r3, #16
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b7f      	ldr	r3, [pc, #508]	; (8001fbc <MX_GPIO_Init+0x224>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	61bb      	str	r3, [r7, #24]
 8001dc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	4b7b      	ldr	r3, [pc, #492]	; (8001fbc <MX_GPIO_Init+0x224>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a7a      	ldr	r2, [pc, #488]	; (8001fbc <MX_GPIO_Init+0x224>)
 8001dd4:	f043 0304 	orr.w	r3, r3, #4
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b78      	ldr	r3, [pc, #480]	; (8001fbc <MX_GPIO_Init+0x224>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	4b74      	ldr	r3, [pc, #464]	; (8001fbc <MX_GPIO_Init+0x224>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a73      	ldr	r2, [pc, #460]	; (8001fbc <MX_GPIO_Init+0x224>)
 8001df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b71      	ldr	r3, [pc, #452]	; (8001fbc <MX_GPIO_Init+0x224>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b6d      	ldr	r3, [pc, #436]	; (8001fbc <MX_GPIO_Init+0x224>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a6c      	ldr	r2, [pc, #432]	; (8001fbc <MX_GPIO_Init+0x224>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b6a      	ldr	r3, [pc, #424]	; (8001fbc <MX_GPIO_Init+0x224>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	4b66      	ldr	r3, [pc, #408]	; (8001fbc <MX_GPIO_Init+0x224>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a65      	ldr	r2, [pc, #404]	; (8001fbc <MX_GPIO_Init+0x224>)
 8001e28:	f043 0302 	orr.w	r3, r3, #2
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b63      	ldr	r3, [pc, #396]	; (8001fbc <MX_GPIO_Init+0x224>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	4b5f      	ldr	r3, [pc, #380]	; (8001fbc <MX_GPIO_Init+0x224>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a5e      	ldr	r2, [pc, #376]	; (8001fbc <MX_GPIO_Init+0x224>)
 8001e44:	f043 0308 	orr.w	r3, r3, #8
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b5c      	ldr	r3, [pc, #368]	; (8001fbc <MX_GPIO_Init+0x224>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2108      	movs	r1, #8
 8001e5a:	4859      	ldr	r0, [pc, #356]	; (8001fc0 <MX_GPIO_Init+0x228>)
 8001e5c:	f001 fb20 	bl	80034a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001e60:	2201      	movs	r2, #1
 8001e62:	2101      	movs	r1, #1
 8001e64:	4857      	ldr	r0, [pc, #348]	; (8001fc4 <MX_GPIO_Init+0x22c>)
 8001e66:	f001 fb1b 	bl	80034a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001e70:	4855      	ldr	r0, [pc, #340]	; (8001fc8 <MX_GPIO_Init+0x230>)
 8001e72:	f001 fb15 	bl	80034a0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001e76:	2308      	movs	r3, #8
 8001e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e82:	2300      	movs	r3, #0
 8001e84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001e86:	f107 031c 	add.w	r3, r7, #28
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	484c      	ldr	r0, [pc, #304]	; (8001fc0 <MX_GPIO_Init+0x228>)
 8001e8e:	f001 f96b 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001e92:	2301      	movs	r3, #1
 8001e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e96:	2301      	movs	r3, #1
 8001e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001ea2:	f107 031c 	add.w	r3, r7, #28
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4846      	ldr	r0, [pc, #280]	; (8001fc4 <MX_GPIO_Init+0x22c>)
 8001eaa:	f001 f95d 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001eae:	2308      	movs	r3, #8
 8001eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ebe:	2305      	movs	r3, #5
 8001ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001ec2:	f107 031c 	add.w	r3, r7, #28
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	483e      	ldr	r0, [pc, #248]	; (8001fc4 <MX_GPIO_Init+0x22c>)
 8001eca:	f001 f94d 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ed2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001ed6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001edc:	f107 031c 	add.w	r3, r7, #28
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	483a      	ldr	r0, [pc, #232]	; (8001fcc <MX_GPIO_Init+0x234>)
 8001ee4:	f001 f940 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ee8:	2310      	movs	r3, #16
 8001eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eec:	2302      	movs	r3, #2
 8001eee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ef8:	2306      	movs	r3, #6
 8001efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efc:	f107 031c 	add.w	r3, r7, #28
 8001f00:	4619      	mov	r1, r3
 8001f02:	4832      	ldr	r0, [pc, #200]	; (8001fcc <MX_GPIO_Init+0x234>)
 8001f04:	f001 f930 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001f08:	2304      	movs	r3, #4
 8001f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001f14:	f107 031c 	add.w	r3, r7, #28
 8001f18:	4619      	mov	r1, r3
 8001f1a:	482d      	ldr	r0, [pc, #180]	; (8001fd0 <MX_GPIO_Init+0x238>)
 8001f1c:	f001 f924 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f32:	2305      	movs	r3, #5
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001f36:	f107 031c 	add.w	r3, r7, #28
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4824      	ldr	r0, [pc, #144]	; (8001fd0 <MX_GPIO_Init+0x238>)
 8001f3e:	f001 f913 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001f42:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001f46:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f54:	f107 031c 	add.w	r3, r7, #28
 8001f58:	4619      	mov	r1, r3
 8001f5a:	481b      	ldr	r0, [pc, #108]	; (8001fc8 <MX_GPIO_Init+0x230>)
 8001f5c:	f001 f904 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 8001f60:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8001f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f72:	2306      	movs	r3, #6
 8001f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f76:	f107 031c 	add.w	r3, r7, #28
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4811      	ldr	r0, [pc, #68]	; (8001fc4 <MX_GPIO_Init+0x22c>)
 8001f7e:	f001 f8f3 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001f82:	2320      	movs	r3, #32
 8001f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	f107 031c 	add.w	r3, r7, #28
 8001f92:	4619      	mov	r1, r3
 8001f94:	480c      	ldr	r0, [pc, #48]	; (8001fc8 <MX_GPIO_Init+0x230>)
 8001f96:	f001 f8e7 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f9e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001fa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001fa8:	f107 031c 	add.w	r3, r7, #28
 8001fac:	4619      	mov	r1, r3
 8001fae:	4804      	ldr	r0, [pc, #16]	; (8001fc0 <MX_GPIO_Init+0x228>)
 8001fb0:	f001 f8da 	bl	8003168 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fb4:	bf00      	nop
 8001fb6:	3730      	adds	r7, #48	; 0x30
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40020800 	.word	0x40020800
 8001fc8:	40020c00 	.word	0x40020c00
 8001fcc:	40020000 	.word	0x40020000
 8001fd0:	40020400 	.word	0x40020400

08001fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd8:	b672      	cpsid	i
}
 8001fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fdc:	e7fe      	b.n	8001fdc <Error_Handler+0x8>
	...

08001fe0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	607b      	str	r3, [r7, #4]
 8001fea:	4b10      	ldr	r3, [pc, #64]	; (800202c <HAL_MspInit+0x4c>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	4a0f      	ldr	r2, [pc, #60]	; (800202c <HAL_MspInit+0x4c>)
 8001ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	; (800202c <HAL_MspInit+0x4c>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffe:	607b      	str	r3, [r7, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	603b      	str	r3, [r7, #0]
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_MspInit+0x4c>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	4a08      	ldr	r2, [pc, #32]	; (800202c <HAL_MspInit+0x4c>)
 800200c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002010:	6413      	str	r3, [r2, #64]	; 0x40
 8002012:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_MspInit+0x4c>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800201e:	2007      	movs	r0, #7
 8002020:	f000 fce4 	bl	80029ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40023800 	.word	0x40023800

08002030 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	; 0x28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a19      	ldr	r2, [pc, #100]	; (80020b4 <HAL_I2C_MspInit+0x84>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d12c      	bne.n	80020ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <HAL_I2C_MspInit+0x88>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a17      	ldr	r2, [pc, #92]	; (80020b8 <HAL_I2C_MspInit+0x88>)
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <HAL_I2C_MspInit+0x88>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800206e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002074:	2312      	movs	r3, #18
 8002076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002078:	2301      	movs	r3, #1
 800207a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002080:	2304      	movs	r3, #4
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	4619      	mov	r1, r3
 800208a:	480c      	ldr	r0, [pc, #48]	; (80020bc <HAL_I2C_MspInit+0x8c>)
 800208c:	f001 f86c 	bl	8003168 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <HAL_I2C_MspInit+0x88>)
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	4a07      	ldr	r2, [pc, #28]	; (80020b8 <HAL_I2C_MspInit+0x88>)
 800209a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800209e:	6413      	str	r3, [r2, #64]	; 0x40
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <HAL_I2C_MspInit+0x88>)
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020ac:	bf00      	nop
 80020ae:	3728      	adds	r7, #40	; 0x28
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40005400 	.word	0x40005400
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40020400 	.word	0x40020400

080020c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	; 0x28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a19      	ldr	r2, [pc, #100]	; (8002144 <HAL_SPI_MspInit+0x84>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d12b      	bne.n	800213a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	4b18      	ldr	r3, [pc, #96]	; (8002148 <HAL_SPI_MspInit+0x88>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	4a17      	ldr	r2, [pc, #92]	; (8002148 <HAL_SPI_MspInit+0x88>)
 80020ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020f0:	6453      	str	r3, [r2, #68]	; 0x44
 80020f2:	4b15      	ldr	r3, [pc, #84]	; (8002148 <HAL_SPI_MspInit+0x88>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	4b11      	ldr	r3, [pc, #68]	; (8002148 <HAL_SPI_MspInit+0x88>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a10      	ldr	r2, [pc, #64]	; (8002148 <HAL_SPI_MspInit+0x88>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <HAL_SPI_MspInit+0x88>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800211a:	23e0      	movs	r3, #224	; 0xe0
 800211c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	2302      	movs	r3, #2
 8002120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002126:	2300      	movs	r3, #0
 8002128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800212a:	2305      	movs	r3, #5
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212e:	f107 0314 	add.w	r3, r7, #20
 8002132:	4619      	mov	r1, r3
 8002134:	4805      	ldr	r0, [pc, #20]	; (800214c <HAL_SPI_MspInit+0x8c>)
 8002136:	f001 f817 	bl	8003168 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800213a:	bf00      	nop
 800213c:	3728      	adds	r7, #40	; 0x28
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40013000 	.word	0x40013000
 8002148:	40023800 	.word	0x40023800
 800214c:	40020000 	.word	0x40020000

08002150 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a0b      	ldr	r2, [pc, #44]	; (800218c <HAL_TIM_Base_MspInit+0x3c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d10d      	bne.n	800217e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <HAL_TIM_Base_MspInit+0x40>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	4a09      	ldr	r2, [pc, #36]	; (8002190 <HAL_TIM_Base_MspInit+0x40>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6453      	str	r3, [r2, #68]	; 0x44
 8002172:	4b07      	ldr	r3, [pc, #28]	; (8002190 <HAL_TIM_Base_MspInit+0x40>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800217e:	bf00      	nop
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40010000 	.word	0x40010000
 8002190:	40023800 	.word	0x40023800

08002194 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a12      	ldr	r2, [pc, #72]	; (80021fc <HAL_TIM_MspPostInit+0x68>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d11e      	bne.n	80021f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	4b11      	ldr	r3, [pc, #68]	; (8002200 <HAL_TIM_MspPostInit+0x6c>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a10      	ldr	r2, [pc, #64]	; (8002200 <HAL_TIM_MspPostInit+0x6c>)
 80021c0:	f043 0310 	orr.w	r3, r3, #16
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <HAL_TIM_MspPostInit+0x6c>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80021d2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80021d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d8:	2302      	movs	r3, #2
 80021da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021e4:	2301      	movs	r3, #1
 80021e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021e8:	f107 030c 	add.w	r3, r7, #12
 80021ec:	4619      	mov	r1, r3
 80021ee:	4805      	ldr	r0, [pc, #20]	; (8002204 <HAL_TIM_MspPostInit+0x70>)
 80021f0:	f000 ffba 	bl	8003168 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80021f4:	bf00      	nop
 80021f6:	3720      	adds	r7, #32
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40010000 	.word	0x40010000
 8002200:	40023800 	.word	0x40023800
 8002204:	40021000 	.word	0x40021000

08002208 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b090      	sub	sp, #64	; 0x40
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a8a      	ldr	r2, [pc, #552]	; (8002450 <HAL_UART_MspInit+0x248>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d153      	bne.n	80022d2 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	62bb      	str	r3, [r7, #40]	; 0x28
 800222e:	4b89      	ldr	r3, [pc, #548]	; (8002454 <HAL_UART_MspInit+0x24c>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	4a88      	ldr	r2, [pc, #544]	; (8002454 <HAL_UART_MspInit+0x24c>)
 8002234:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002238:	6413      	str	r3, [r2, #64]	; 0x40
 800223a:	4b86      	ldr	r3, [pc, #536]	; (8002454 <HAL_UART_MspInit+0x24c>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002242:	62bb      	str	r3, [r7, #40]	; 0x28
 8002244:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
 800224a:	4b82      	ldr	r3, [pc, #520]	; (8002454 <HAL_UART_MspInit+0x24c>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a81      	ldr	r2, [pc, #516]	; (8002454 <HAL_UART_MspInit+0x24c>)
 8002250:	f043 0304 	orr.w	r3, r3, #4
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b7f      	ldr	r3, [pc, #508]	; (8002454 <HAL_UART_MspInit+0x24c>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	623b      	str	r3, [r7, #32]
 8002266:	4b7b      	ldr	r3, [pc, #492]	; (8002454 <HAL_UART_MspInit+0x24c>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	4a7a      	ldr	r2, [pc, #488]	; (8002454 <HAL_UART_MspInit+0x24c>)
 800226c:	f043 0308 	orr.w	r3, r3, #8
 8002270:	6313      	str	r3, [r2, #48]	; 0x30
 8002272:	4b78      	ldr	r3, [pc, #480]	; (8002454 <HAL_UART_MspInit+0x24c>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	623b      	str	r3, [r7, #32]
 800227c:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800227e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002284:	2302      	movs	r3, #2
 8002286:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228c:	2303      	movs	r3, #3
 800228e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002290:	2308      	movs	r3, #8
 8002292:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002294:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002298:	4619      	mov	r1, r3
 800229a:	486f      	ldr	r0, [pc, #444]	; (8002458 <HAL_UART_MspInit+0x250>)
 800229c:	f000 ff64 	bl	8003168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022a0:	2304      	movs	r3, #4
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ac:	2303      	movs	r3, #3
 80022ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80022b0:	2308      	movs	r3, #8
 80022b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022b8:	4619      	mov	r1, r3
 80022ba:	4868      	ldr	r0, [pc, #416]	; (800245c <HAL_UART_MspInit+0x254>)
 80022bc:	f000 ff54 	bl	8003168 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80022c0:	2200      	movs	r2, #0
 80022c2:	2100      	movs	r1, #0
 80022c4:	2035      	movs	r0, #53	; 0x35
 80022c6:	f000 fb9c 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80022ca:	2035      	movs	r0, #53	; 0x35
 80022cc:	f000 fbb5 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80022d0:	e0ba      	b.n	8002448 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART2)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a62      	ldr	r2, [pc, #392]	; (8002460 <HAL_UART_MspInit+0x258>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d12c      	bne.n	8002336 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022dc:	2300      	movs	r3, #0
 80022de:	61fb      	str	r3, [r7, #28]
 80022e0:	4b5c      	ldr	r3, [pc, #368]	; (8002454 <HAL_UART_MspInit+0x24c>)
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	4a5b      	ldr	r2, [pc, #364]	; (8002454 <HAL_UART_MspInit+0x24c>)
 80022e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ea:	6413      	str	r3, [r2, #64]	; 0x40
 80022ec:	4b59      	ldr	r3, [pc, #356]	; (8002454 <HAL_UART_MspInit+0x24c>)
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f8:	2300      	movs	r3, #0
 80022fa:	61bb      	str	r3, [r7, #24]
 80022fc:	4b55      	ldr	r3, [pc, #340]	; (8002454 <HAL_UART_MspInit+0x24c>)
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	4a54      	ldr	r2, [pc, #336]	; (8002454 <HAL_UART_MspInit+0x24c>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	6313      	str	r3, [r2, #48]	; 0x30
 8002308:	4b52      	ldr	r3, [pc, #328]	; (8002454 <HAL_UART_MspInit+0x24c>)
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	61bb      	str	r3, [r7, #24]
 8002312:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002314:	230c      	movs	r3, #12
 8002316:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002320:	2303      	movs	r3, #3
 8002322:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002324:	2307      	movs	r3, #7
 8002326:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002328:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800232c:	4619      	mov	r1, r3
 800232e:	484d      	ldr	r0, [pc, #308]	; (8002464 <HAL_UART_MspInit+0x25c>)
 8002330:	f000 ff1a 	bl	8003168 <HAL_GPIO_Init>
}
 8002334:	e088      	b.n	8002448 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART3)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a4b      	ldr	r2, [pc, #300]	; (8002468 <HAL_UART_MspInit+0x260>)
 800233c:	4293      	cmp	r3, r2
 800233e:	f040 8083 	bne.w	8002448 <HAL_UART_MspInit+0x240>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	4b43      	ldr	r3, [pc, #268]	; (8002454 <HAL_UART_MspInit+0x24c>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	4a42      	ldr	r2, [pc, #264]	; (8002454 <HAL_UART_MspInit+0x24c>)
 800234c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002350:	6413      	str	r3, [r2, #64]	; 0x40
 8002352:	4b40      	ldr	r3, [pc, #256]	; (8002454 <HAL_UART_MspInit+0x24c>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	4b3c      	ldr	r3, [pc, #240]	; (8002454 <HAL_UART_MspInit+0x24c>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a3b      	ldr	r2, [pc, #236]	; (8002454 <HAL_UART_MspInit+0x24c>)
 8002368:	f043 0302 	orr.w	r3, r3, #2
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b39      	ldr	r3, [pc, #228]	; (8002454 <HAL_UART_MspInit+0x24c>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	4b35      	ldr	r3, [pc, #212]	; (8002454 <HAL_UART_MspInit+0x24c>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	4a34      	ldr	r2, [pc, #208]	; (8002454 <HAL_UART_MspInit+0x24c>)
 8002384:	f043 0308 	orr.w	r3, r3, #8
 8002388:	6313      	str	r3, [r2, #48]	; 0x30
 800238a:	4b32      	ldr	r3, [pc, #200]	; (8002454 <HAL_UART_MspInit+0x24c>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002396:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800239a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239c:	2302      	movs	r3, #2
 800239e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a4:	2303      	movs	r3, #3
 80023a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023a8:	2307      	movs	r3, #7
 80023aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023b0:	4619      	mov	r1, r3
 80023b2:	482e      	ldr	r0, [pc, #184]	; (800246c <HAL_UART_MspInit+0x264>)
 80023b4:	f000 fed8 	bl	8003168 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023be:	2302      	movs	r3, #2
 80023c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c6:	2303      	movs	r3, #3
 80023c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023ca:	2307      	movs	r3, #7
 80023cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023d2:	4619      	mov	r1, r3
 80023d4:	4821      	ldr	r0, [pc, #132]	; (800245c <HAL_UART_MspInit+0x254>)
 80023d6:	f000 fec7 	bl	8003168 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80023da:	4b25      	ldr	r3, [pc, #148]	; (8002470 <HAL_UART_MspInit+0x268>)
 80023dc:	4a25      	ldr	r2, [pc, #148]	; (8002474 <HAL_UART_MspInit+0x26c>)
 80023de:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80023e0:	4b23      	ldr	r3, [pc, #140]	; (8002470 <HAL_UART_MspInit+0x268>)
 80023e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023e6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023e8:	4b21      	ldr	r3, [pc, #132]	; (8002470 <HAL_UART_MspInit+0x268>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023ee:	4b20      	ldr	r3, [pc, #128]	; (8002470 <HAL_UART_MspInit+0x268>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023f4:	4b1e      	ldr	r3, [pc, #120]	; (8002470 <HAL_UART_MspInit+0x268>)
 80023f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023fa:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023fc:	4b1c      	ldr	r3, [pc, #112]	; (8002470 <HAL_UART_MspInit+0x268>)
 80023fe:	2200      	movs	r2, #0
 8002400:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002402:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <HAL_UART_MspInit+0x268>)
 8002404:	2200      	movs	r2, #0
 8002406:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002408:	4b19      	ldr	r3, [pc, #100]	; (8002470 <HAL_UART_MspInit+0x268>)
 800240a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800240e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002410:	4b17      	ldr	r3, [pc, #92]	; (8002470 <HAL_UART_MspInit+0x268>)
 8002412:	2200      	movs	r2, #0
 8002414:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002416:	4b16      	ldr	r3, [pc, #88]	; (8002470 <HAL_UART_MspInit+0x268>)
 8002418:	2200      	movs	r2, #0
 800241a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800241c:	4814      	ldr	r0, [pc, #80]	; (8002470 <HAL_UART_MspInit+0x268>)
 800241e:	f000 fb27 	bl	8002a70 <HAL_DMA_Init>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_UART_MspInit+0x224>
      Error_Handler();
 8002428:	f7ff fdd4 	bl	8001fd4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a10      	ldr	r2, [pc, #64]	; (8002470 <HAL_UART_MspInit+0x268>)
 8002430:	63da      	str	r2, [r3, #60]	; 0x3c
 8002432:	4a0f      	ldr	r2, [pc, #60]	; (8002470 <HAL_UART_MspInit+0x268>)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002438:	2200      	movs	r2, #0
 800243a:	2100      	movs	r1, #0
 800243c:	2027      	movs	r0, #39	; 0x27
 800243e:	f000 fae0 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002442:	2027      	movs	r0, #39	; 0x27
 8002444:	f000 faf9 	bl	8002a3a <HAL_NVIC_EnableIRQ>
}
 8002448:	bf00      	nop
 800244a:	3740      	adds	r7, #64	; 0x40
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40005000 	.word	0x40005000
 8002454:	40023800 	.word	0x40023800
 8002458:	40020800 	.word	0x40020800
 800245c:	40020c00 	.word	0x40020c00
 8002460:	40004400 	.word	0x40004400
 8002464:	40020000 	.word	0x40020000
 8002468:	40004800 	.word	0x40004800
 800246c:	40020400 	.word	0x40020400
 8002470:	20000400 	.word	0x20000400
 8002474:	40026028 	.word	0x40026028

08002478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800247c:	e7fe      	b.n	800247c <NMI_Handler+0x4>

0800247e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002482:	e7fe      	b.n	8002482 <HardFault_Handler+0x4>

08002484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002488:	e7fe      	b.n	8002488 <MemManage_Handler+0x4>

0800248a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800248e:	e7fe      	b.n	800248e <BusFault_Handler+0x4>

08002490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002494:	e7fe      	b.n	8002494 <UsageFault_Handler+0x4>

08002496 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024c4:	f000 f97e 	bl	80027c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}

080024cc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80024d0:	4802      	ldr	r0, [pc, #8]	; (80024dc <DMA1_Stream1_IRQHandler+0x10>)
 80024d2:	f000 fc0d 	bl	8002cf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000400 	.word	0x20000400

080024e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80024e4:	4802      	ldr	r0, [pc, #8]	; (80024f0 <USART3_IRQHandler+0x10>)
 80024e6:	f005 fe39 	bl	800815c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	200003b8 	.word	0x200003b8

080024f4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80024f8:	4802      	ldr	r0, [pc, #8]	; (8002504 <UART5_IRQHandler+0x10>)
 80024fa:	f005 fe2f 	bl	800815c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000328 	.word	0x20000328

08002508 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <OTG_FS_IRQHandler+0x10>)
 800250e:	f001 fac1 	bl	8003a94 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	200009a8 	.word	0x200009a8

0800251c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return 1;
 8002520:	2301      	movs	r3, #1
}
 8002522:	4618      	mov	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <_kill>:

int _kill(int pid, int sig)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002536:	f00c f95d 	bl	800e7f4 <__errno>
 800253a:	4603      	mov	r3, r0
 800253c:	2216      	movs	r2, #22
 800253e:	601a      	str	r2, [r3, #0]
  return -1;
 8002540:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <_exit>:

void _exit (int status)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002554:	f04f 31ff 	mov.w	r1, #4294967295
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff ffe7 	bl	800252c <_kill>
  while (1) {}    /* Make sure we hang here */
 800255e:	e7fe      	b.n	800255e <_exit+0x12>

08002560 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	e00a      	b.n	8002588 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002572:	f3af 8000 	nop.w
 8002576:	4601      	mov	r1, r0
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	60ba      	str	r2, [r7, #8]
 800257e:	b2ca      	uxtb	r2, r1
 8002580:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	3301      	adds	r3, #1
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	429a      	cmp	r2, r3
 800258e:	dbf0      	blt.n	8002572 <_read+0x12>
  }

  return len;
 8002590:	687b      	ldr	r3, [r7, #4]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b086      	sub	sp, #24
 800259e:	af00      	add	r7, sp, #0
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	e009      	b.n	80025c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	60ba      	str	r2, [r7, #8]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	3301      	adds	r3, #1
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	dbf1      	blt.n	80025ac <_write+0x12>
  }
  return len;
 80025c8:	687b      	ldr	r3, [r7, #4]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <_close>:

int _close(int file)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025de:	4618      	mov	r0, r3
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025fa:	605a      	str	r2, [r3, #4]
  return 0;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <_isatty>:

int _isatty(int file)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002612:	2301      	movs	r3, #1
}
 8002614:	4618      	mov	r0, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002644:	4a14      	ldr	r2, [pc, #80]	; (8002698 <_sbrk+0x5c>)
 8002646:	4b15      	ldr	r3, [pc, #84]	; (800269c <_sbrk+0x60>)
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <_sbrk+0x64>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d102      	bne.n	800265e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <_sbrk+0x64>)
 800265a:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <_sbrk+0x68>)
 800265c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <_sbrk+0x64>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4413      	add	r3, r2
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	429a      	cmp	r2, r3
 800266a:	d207      	bcs.n	800267c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800266c:	f00c f8c2 	bl	800e7f4 <__errno>
 8002670:	4603      	mov	r3, r0
 8002672:	220c      	movs	r2, #12
 8002674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002676:	f04f 33ff 	mov.w	r3, #4294967295
 800267a:	e009      	b.n	8002690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <_sbrk+0x64>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002682:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <_sbrk+0x64>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	4a05      	ldr	r2, [pc, #20]	; (80026a0 <_sbrk+0x64>)
 800268c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800268e:	68fb      	ldr	r3, [r7, #12]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3718      	adds	r7, #24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20020000 	.word	0x20020000
 800269c:	00000400 	.word	0x00000400
 80026a0:	200005c4 	.word	0x200005c4
 80026a4:	20000ed8 	.word	0x20000ed8

080026a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <SystemInit+0x20>)
 80026ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b2:	4a05      	ldr	r2, [pc, #20]	; (80026c8 <SystemInit+0x20>)
 80026b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002704 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80026d0:	f7ff ffea 	bl	80026a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026d4:	480c      	ldr	r0, [pc, #48]	; (8002708 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026d6:	490d      	ldr	r1, [pc, #52]	; (800270c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026d8:	4a0d      	ldr	r2, [pc, #52]	; (8002710 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026dc:	e002      	b.n	80026e4 <LoopCopyDataInit>

080026de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026e2:	3304      	adds	r3, #4

080026e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026e8:	d3f9      	bcc.n	80026de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ea:	4a0a      	ldr	r2, [pc, #40]	; (8002714 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026ec:	4c0a      	ldr	r4, [pc, #40]	; (8002718 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026f0:	e001      	b.n	80026f6 <LoopFillZerobss>

080026f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026f4:	3204      	adds	r2, #4

080026f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026f8:	d3fb      	bcc.n	80026f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026fa:	f00c f881 	bl	800e800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026fe:	f7ff f889 	bl	8001814 <main>
  bx  lr    
 8002702:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002704:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800270c:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8002710:	08013fa0 	.word	0x08013fa0
  ldr r2, =_sbss
 8002714:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8002718:	20000ed4 	.word	0x20000ed4

0800271c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800271c:	e7fe      	b.n	800271c <ADC_IRQHandler>
	...

08002720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002724:	4b0e      	ldr	r3, [pc, #56]	; (8002760 <HAL_Init+0x40>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0d      	ldr	r2, [pc, #52]	; (8002760 <HAL_Init+0x40>)
 800272a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800272e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <HAL_Init+0x40>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a0a      	ldr	r2, [pc, #40]	; (8002760 <HAL_Init+0x40>)
 8002736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800273a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800273c:	4b08      	ldr	r3, [pc, #32]	; (8002760 <HAL_Init+0x40>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a07      	ldr	r2, [pc, #28]	; (8002760 <HAL_Init+0x40>)
 8002742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002746:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002748:	2003      	movs	r0, #3
 800274a:	f000 f94f 	bl	80029ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800274e:	2000      	movs	r0, #0
 8002750:	f000 f808 	bl	8002764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002754:	f7ff fc44 	bl	8001fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40023c00 	.word	0x40023c00

08002764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800276c:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <HAL_InitTick+0x54>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_InitTick+0x58>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	4619      	mov	r1, r3
 8002776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800277a:	fbb3 f3f1 	udiv	r3, r3, r1
 800277e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002782:	4618      	mov	r0, r3
 8002784:	f000 f967 	bl	8002a56 <HAL_SYSTICK_Config>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e00e      	b.n	80027b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b0f      	cmp	r3, #15
 8002796:	d80a      	bhi.n	80027ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002798:	2200      	movs	r2, #0
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	f04f 30ff 	mov.w	r0, #4294967295
 80027a0:	f000 f92f 	bl	8002a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027a4:	4a06      	ldr	r2, [pc, #24]	; (80027c0 <HAL_InitTick+0x5c>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	e000      	b.n	80027b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20000010 	.word	0x20000010
 80027bc:	20000018 	.word	0x20000018
 80027c0:	20000014 	.word	0x20000014

080027c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_IncTick+0x20>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_IncTick+0x24>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4413      	add	r3, r2
 80027d4:	4a04      	ldr	r2, [pc, #16]	; (80027e8 <HAL_IncTick+0x24>)
 80027d6:	6013      	str	r3, [r2, #0]
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000018 	.word	0x20000018
 80027e8:	200005c8 	.word	0x200005c8

080027ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return uwTick;
 80027f0:	4b03      	ldr	r3, [pc, #12]	; (8002800 <HAL_GetTick+0x14>)
 80027f2:	681b      	ldr	r3, [r3, #0]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	200005c8 	.word	0x200005c8

08002804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800280c:	f7ff ffee 	bl	80027ec <HAL_GetTick>
 8002810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d005      	beq.n	800282a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800281e:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <HAL_Delay+0x44>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4413      	add	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800282a:	bf00      	nop
 800282c:	f7ff ffde 	bl	80027ec <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	429a      	cmp	r2, r3
 800283a:	d8f7      	bhi.n	800282c <HAL_Delay+0x28>
  {
  }
}
 800283c:	bf00      	nop
 800283e:	bf00      	nop
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20000018 	.word	0x20000018

0800284c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002868:	4013      	ands	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800287c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800287e:	4a04      	ldr	r2, [pc, #16]	; (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	60d3      	str	r3, [r2, #12]
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <__NVIC_GetPriorityGrouping+0x18>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	f003 0307 	and.w	r3, r3, #7
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	db0b      	blt.n	80028da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	f003 021f 	and.w	r2, r3, #31
 80028c8:	4907      	ldr	r1, [pc, #28]	; (80028e8 <__NVIC_EnableIRQ+0x38>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	2001      	movs	r0, #1
 80028d2:	fa00 f202 	lsl.w	r2, r0, r2
 80028d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000e100 	.word	0xe000e100

080028ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	6039      	str	r1, [r7, #0]
 80028f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	db0a      	blt.n	8002916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	490c      	ldr	r1, [pc, #48]	; (8002938 <__NVIC_SetPriority+0x4c>)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	0112      	lsls	r2, r2, #4
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	440b      	add	r3, r1
 8002910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002914:	e00a      	b.n	800292c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4908      	ldr	r1, [pc, #32]	; (800293c <__NVIC_SetPriority+0x50>)
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	3b04      	subs	r3, #4
 8002924:	0112      	lsls	r2, r2, #4
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	440b      	add	r3, r1
 800292a:	761a      	strb	r2, [r3, #24]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000e100 	.word	0xe000e100
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	; 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f1c3 0307 	rsb	r3, r3, #7
 800295a:	2b04      	cmp	r3, #4
 800295c:	bf28      	it	cs
 800295e:	2304      	movcs	r3, #4
 8002960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3304      	adds	r3, #4
 8002966:	2b06      	cmp	r3, #6
 8002968:	d902      	bls.n	8002970 <NVIC_EncodePriority+0x30>
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3b03      	subs	r3, #3
 800296e:	e000      	b.n	8002972 <NVIC_EncodePriority+0x32>
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002974:	f04f 32ff 	mov.w	r2, #4294967295
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	401a      	ands	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002988:	f04f 31ff 	mov.w	r1, #4294967295
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	43d9      	mvns	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	4313      	orrs	r3, r2
         );
}
 800299a:	4618      	mov	r0, r3
 800299c:	3724      	adds	r7, #36	; 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b8:	d301      	bcc.n	80029be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00f      	b.n	80029de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029be:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <SysTick_Config+0x40>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029c6:	210f      	movs	r1, #15
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295
 80029cc:	f7ff ff8e 	bl	80028ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <SysTick_Config+0x40>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029d6:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <SysTick_Config+0x40>)
 80029d8:	2207      	movs	r2, #7
 80029da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	e000e010 	.word	0xe000e010

080029ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ff29 	bl	800284c <__NVIC_SetPriorityGrouping>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a14:	f7ff ff3e 	bl	8002894 <__NVIC_GetPriorityGrouping>
 8002a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	6978      	ldr	r0, [r7, #20]
 8002a20:	f7ff ff8e 	bl	8002940 <NVIC_EncodePriority>
 8002a24:	4602      	mov	r2, r0
 8002a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ff5d 	bl	80028ec <__NVIC_SetPriority>
}
 8002a32:	bf00      	nop
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	4603      	mov	r3, r0
 8002a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff31 	bl	80028b0 <__NVIC_EnableIRQ>
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff ffa2 	bl	80029a8 <SysTick_Config>
 8002a64:	4603      	mov	r3, r0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a7c:	f7ff feb6 	bl	80027ec <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e099      	b.n	8002bc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0201 	bic.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aac:	e00f      	b.n	8002ace <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aae:	f7ff fe9d 	bl	80027ec <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b05      	cmp	r3, #5
 8002aba:	d908      	bls.n	8002ace <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e078      	b.n	8002bc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1e8      	bne.n	8002aae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	4b38      	ldr	r3, [pc, #224]	; (8002bc8 <HAL_DMA_Init+0x158>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d107      	bne.n	8002b38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	4313      	orrs	r3, r2
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f023 0307 	bic.w	r3, r3, #7
 8002b4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d117      	bne.n	8002b92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00e      	beq.n	8002b92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 fa7b 	bl	8003070 <DMA_CheckFifoParam>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2240      	movs	r2, #64	; 0x40
 8002b84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e016      	b.n	8002bc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fa32 	bl	8003004 <DMA_CalcBaseAndBitshift>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba8:	223f      	movs	r2, #63	; 0x3f
 8002baa:	409a      	lsls	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	f010803f 	.word	0xf010803f

08002bcc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bda:	f7ff fe07 	bl	80027ec <HAL_GetTick>
 8002bde:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d008      	beq.n	8002bfe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2280      	movs	r2, #128	; 0x80
 8002bf0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e052      	b.n	8002ca4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0216 	bic.w	r2, r2, #22
 8002c0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c1c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d103      	bne.n	8002c2e <HAL_DMA_Abort+0x62>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d007      	beq.n	8002c3e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0208 	bic.w	r2, r2, #8
 8002c3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0201 	bic.w	r2, r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c4e:	e013      	b.n	8002c78 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c50:	f7ff fdcc 	bl	80027ec <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b05      	cmp	r3, #5
 8002c5c:	d90c      	bls.n	8002c78 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2220      	movs	r2, #32
 8002c62:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2203      	movs	r2, #3
 8002c68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e015      	b.n	8002ca4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1e4      	bne.n	8002c50 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8a:	223f      	movs	r2, #63	; 0x3f
 8002c8c:	409a      	lsls	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d004      	beq.n	8002cca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2280      	movs	r2, #128	; 0x80
 8002cc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e00c      	b.n	8002ce4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2205      	movs	r2, #5
 8002cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0201 	bic.w	r2, r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cfc:	4b8e      	ldr	r3, [pc, #568]	; (8002f38 <HAL_DMA_IRQHandler+0x248>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a8e      	ldr	r2, [pc, #568]	; (8002f3c <HAL_DMA_IRQHandler+0x24c>)
 8002d02:	fba2 2303 	umull	r2, r3, r2, r3
 8002d06:	0a9b      	lsrs	r3, r3, #10
 8002d08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1a:	2208      	movs	r2, #8
 8002d1c:	409a      	lsls	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d01a      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d013      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0204 	bic.w	r2, r2, #4
 8002d42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d48:	2208      	movs	r2, #8
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d54:	f043 0201 	orr.w	r2, r3, #1
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d60:	2201      	movs	r2, #1
 8002d62:	409a      	lsls	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d012      	beq.n	8002d92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7e:	2201      	movs	r2, #1
 8002d80:	409a      	lsls	r2, r3
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8a:	f043 0202 	orr.w	r2, r3, #2
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d96:	2204      	movs	r2, #4
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d012      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00b      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db4:	2204      	movs	r2, #4
 8002db6:	409a      	lsls	r2, r3
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc0:	f043 0204 	orr.w	r2, r3, #4
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dcc:	2210      	movs	r2, #16
 8002dce:	409a      	lsls	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d043      	beq.n	8002e60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d03c      	beq.n	8002e60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dea:	2210      	movs	r2, #16
 8002dec:	409a      	lsls	r2, r3
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d018      	beq.n	8002e32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d108      	bne.n	8002e20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d024      	beq.n	8002e60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	4798      	blx	r3
 8002e1e:	e01f      	b.n	8002e60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d01b      	beq.n	8002e60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	4798      	blx	r3
 8002e30:	e016      	b.n	8002e60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d107      	bne.n	8002e50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0208 	bic.w	r2, r2, #8
 8002e4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e64:	2220      	movs	r2, #32
 8002e66:	409a      	lsls	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 808f 	beq.w	8002f90 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 8087 	beq.w	8002f90 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e86:	2220      	movs	r2, #32
 8002e88:	409a      	lsls	r2, r3
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b05      	cmp	r3, #5
 8002e98:	d136      	bne.n	8002f08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0216 	bic.w	r2, r2, #22
 8002ea8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695a      	ldr	r2, [r3, #20]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eb8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d103      	bne.n	8002eca <HAL_DMA_IRQHandler+0x1da>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d007      	beq.n	8002eda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0208 	bic.w	r2, r2, #8
 8002ed8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ede:	223f      	movs	r2, #63	; 0x3f
 8002ee0:	409a      	lsls	r2, r3
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d07e      	beq.n	8002ffc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	4798      	blx	r3
        }
        return;
 8002f06:	e079      	b.n	8002ffc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d01d      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10d      	bne.n	8002f40 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d031      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	4798      	blx	r3
 8002f34:	e02c      	b.n	8002f90 <HAL_DMA_IRQHandler+0x2a0>
 8002f36:	bf00      	nop
 8002f38:	20000010 	.word	0x20000010
 8002f3c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d023      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	4798      	blx	r3
 8002f50:	e01e      	b.n	8002f90 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10f      	bne.n	8002f80 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0210 	bic.w	r2, r2, #16
 8002f6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d032      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d022      	beq.n	8002fea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2205      	movs	r2, #5
 8002fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0201 	bic.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d307      	bcc.n	8002fd8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f2      	bne.n	8002fbc <HAL_DMA_IRQHandler+0x2cc>
 8002fd6:	e000      	b.n	8002fda <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fd8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	4798      	blx	r3
 8002ffa:	e000      	b.n	8002ffe <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ffc:	bf00      	nop
    }
  }
}
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	3b10      	subs	r3, #16
 8003014:	4a14      	ldr	r2, [pc, #80]	; (8003068 <DMA_CalcBaseAndBitshift+0x64>)
 8003016:	fba2 2303 	umull	r2, r3, r2, r3
 800301a:	091b      	lsrs	r3, r3, #4
 800301c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800301e:	4a13      	ldr	r2, [pc, #76]	; (800306c <DMA_CalcBaseAndBitshift+0x68>)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4413      	add	r3, r2
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2b03      	cmp	r3, #3
 8003030:	d909      	bls.n	8003046 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800303a:	f023 0303 	bic.w	r3, r3, #3
 800303e:	1d1a      	adds	r2, r3, #4
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	659a      	str	r2, [r3, #88]	; 0x58
 8003044:	e007      	b.n	8003056 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800304e:	f023 0303 	bic.w	r3, r3, #3
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800305a:	4618      	mov	r0, r3
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	aaaaaaab 	.word	0xaaaaaaab
 800306c:	080138d0 	.word	0x080138d0

08003070 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003080:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d11f      	bne.n	80030ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b03      	cmp	r3, #3
 800308e:	d856      	bhi.n	800313e <DMA_CheckFifoParam+0xce>
 8003090:	a201      	add	r2, pc, #4	; (adr r2, 8003098 <DMA_CheckFifoParam+0x28>)
 8003092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003096:	bf00      	nop
 8003098:	080030a9 	.word	0x080030a9
 800309c:	080030bb 	.word	0x080030bb
 80030a0:	080030a9 	.word	0x080030a9
 80030a4:	0800313f 	.word	0x0800313f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d046      	beq.n	8003142 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b8:	e043      	b.n	8003142 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030c2:	d140      	bne.n	8003146 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c8:	e03d      	b.n	8003146 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d2:	d121      	bne.n	8003118 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d837      	bhi.n	800314a <DMA_CheckFifoParam+0xda>
 80030da:	a201      	add	r2, pc, #4	; (adr r2, 80030e0 <DMA_CheckFifoParam+0x70>)
 80030dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e0:	080030f1 	.word	0x080030f1
 80030e4:	080030f7 	.word	0x080030f7
 80030e8:	080030f1 	.word	0x080030f1
 80030ec:	08003109 	.word	0x08003109
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
      break;
 80030f4:	e030      	b.n	8003158 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d025      	beq.n	800314e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003106:	e022      	b.n	800314e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003110:	d11f      	bne.n	8003152 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003116:	e01c      	b.n	8003152 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d903      	bls.n	8003126 <DMA_CheckFifoParam+0xb6>
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2b03      	cmp	r3, #3
 8003122:	d003      	beq.n	800312c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003124:	e018      	b.n	8003158 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	73fb      	strb	r3, [r7, #15]
      break;
 800312a:	e015      	b.n	8003158 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00e      	beq.n	8003156 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
      break;
 800313c:	e00b      	b.n	8003156 <DMA_CheckFifoParam+0xe6>
      break;
 800313e:	bf00      	nop
 8003140:	e00a      	b.n	8003158 <DMA_CheckFifoParam+0xe8>
      break;
 8003142:	bf00      	nop
 8003144:	e008      	b.n	8003158 <DMA_CheckFifoParam+0xe8>
      break;
 8003146:	bf00      	nop
 8003148:	e006      	b.n	8003158 <DMA_CheckFifoParam+0xe8>
      break;
 800314a:	bf00      	nop
 800314c:	e004      	b.n	8003158 <DMA_CheckFifoParam+0xe8>
      break;
 800314e:	bf00      	nop
 8003150:	e002      	b.n	8003158 <DMA_CheckFifoParam+0xe8>
      break;   
 8003152:	bf00      	nop
 8003154:	e000      	b.n	8003158 <DMA_CheckFifoParam+0xe8>
      break;
 8003156:	bf00      	nop
    }
  } 
  
  return status; 
 8003158:	7bfb      	ldrb	r3, [r7, #15]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop

08003168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003168:	b480      	push	{r7}
 800316a:	b089      	sub	sp, #36	; 0x24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003176:	2300      	movs	r3, #0
 8003178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800317a:	2300      	movs	r3, #0
 800317c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	e16b      	b.n	800345c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003184:	2201      	movs	r2, #1
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	4013      	ands	r3, r2
 8003196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	429a      	cmp	r2, r3
 800319e:	f040 815a 	bne.w	8003456 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d005      	beq.n	80031ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d130      	bne.n	800321c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	2203      	movs	r2, #3
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4013      	ands	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031f0:	2201      	movs	r2, #1
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	091b      	lsrs	r3, r3, #4
 8003206:	f003 0201 	and.w	r2, r3, #1
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	2b03      	cmp	r3, #3
 8003226:	d017      	beq.n	8003258 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	2203      	movs	r2, #3
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4013      	ands	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d123      	bne.n	80032ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	08da      	lsrs	r2, r3, #3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3208      	adds	r2, #8
 800326c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003270:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	220f      	movs	r2, #15
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4313      	orrs	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	08da      	lsrs	r2, r3, #3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3208      	adds	r2, #8
 80032a6:	69b9      	ldr	r1, [r7, #24]
 80032a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	2203      	movs	r2, #3
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4013      	ands	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 0203 	and.w	r2, r3, #3
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 80b4 	beq.w	8003456 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	4b60      	ldr	r3, [pc, #384]	; (8003474 <HAL_GPIO_Init+0x30c>)
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	4a5f      	ldr	r2, [pc, #380]	; (8003474 <HAL_GPIO_Init+0x30c>)
 80032f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032fc:	6453      	str	r3, [r2, #68]	; 0x44
 80032fe:	4b5d      	ldr	r3, [pc, #372]	; (8003474 <HAL_GPIO_Init+0x30c>)
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800330a:	4a5b      	ldr	r2, [pc, #364]	; (8003478 <HAL_GPIO_Init+0x310>)
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	089b      	lsrs	r3, r3, #2
 8003310:	3302      	adds	r3, #2
 8003312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	220f      	movs	r2, #15
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4013      	ands	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a52      	ldr	r2, [pc, #328]	; (800347c <HAL_GPIO_Init+0x314>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d02b      	beq.n	800338e <HAL_GPIO_Init+0x226>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a51      	ldr	r2, [pc, #324]	; (8003480 <HAL_GPIO_Init+0x318>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d025      	beq.n	800338a <HAL_GPIO_Init+0x222>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a50      	ldr	r2, [pc, #320]	; (8003484 <HAL_GPIO_Init+0x31c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d01f      	beq.n	8003386 <HAL_GPIO_Init+0x21e>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a4f      	ldr	r2, [pc, #316]	; (8003488 <HAL_GPIO_Init+0x320>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d019      	beq.n	8003382 <HAL_GPIO_Init+0x21a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a4e      	ldr	r2, [pc, #312]	; (800348c <HAL_GPIO_Init+0x324>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d013      	beq.n	800337e <HAL_GPIO_Init+0x216>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a4d      	ldr	r2, [pc, #308]	; (8003490 <HAL_GPIO_Init+0x328>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00d      	beq.n	800337a <HAL_GPIO_Init+0x212>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a4c      	ldr	r2, [pc, #304]	; (8003494 <HAL_GPIO_Init+0x32c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d007      	beq.n	8003376 <HAL_GPIO_Init+0x20e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a4b      	ldr	r2, [pc, #300]	; (8003498 <HAL_GPIO_Init+0x330>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d101      	bne.n	8003372 <HAL_GPIO_Init+0x20a>
 800336e:	2307      	movs	r3, #7
 8003370:	e00e      	b.n	8003390 <HAL_GPIO_Init+0x228>
 8003372:	2308      	movs	r3, #8
 8003374:	e00c      	b.n	8003390 <HAL_GPIO_Init+0x228>
 8003376:	2306      	movs	r3, #6
 8003378:	e00a      	b.n	8003390 <HAL_GPIO_Init+0x228>
 800337a:	2305      	movs	r3, #5
 800337c:	e008      	b.n	8003390 <HAL_GPIO_Init+0x228>
 800337e:	2304      	movs	r3, #4
 8003380:	e006      	b.n	8003390 <HAL_GPIO_Init+0x228>
 8003382:	2303      	movs	r3, #3
 8003384:	e004      	b.n	8003390 <HAL_GPIO_Init+0x228>
 8003386:	2302      	movs	r3, #2
 8003388:	e002      	b.n	8003390 <HAL_GPIO_Init+0x228>
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <HAL_GPIO_Init+0x228>
 800338e:	2300      	movs	r3, #0
 8003390:	69fa      	ldr	r2, [r7, #28]
 8003392:	f002 0203 	and.w	r2, r2, #3
 8003396:	0092      	lsls	r2, r2, #2
 8003398:	4093      	lsls	r3, r2
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4313      	orrs	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033a0:	4935      	ldr	r1, [pc, #212]	; (8003478 <HAL_GPIO_Init+0x310>)
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	089b      	lsrs	r3, r3, #2
 80033a6:	3302      	adds	r3, #2
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ae:	4b3b      	ldr	r3, [pc, #236]	; (800349c <HAL_GPIO_Init+0x334>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	43db      	mvns	r3, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4013      	ands	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033d2:	4a32      	ldr	r2, [pc, #200]	; (800349c <HAL_GPIO_Init+0x334>)
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033d8:	4b30      	ldr	r3, [pc, #192]	; (800349c <HAL_GPIO_Init+0x334>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	43db      	mvns	r3, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4013      	ands	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033fc:	4a27      	ldr	r2, [pc, #156]	; (800349c <HAL_GPIO_Init+0x334>)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003402:	4b26      	ldr	r3, [pc, #152]	; (800349c <HAL_GPIO_Init+0x334>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	43db      	mvns	r3, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4013      	ands	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003426:	4a1d      	ldr	r2, [pc, #116]	; (800349c <HAL_GPIO_Init+0x334>)
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800342c:	4b1b      	ldr	r3, [pc, #108]	; (800349c <HAL_GPIO_Init+0x334>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	43db      	mvns	r3, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4013      	ands	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003450:	4a12      	ldr	r2, [pc, #72]	; (800349c <HAL_GPIO_Init+0x334>)
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	3301      	adds	r3, #1
 800345a:	61fb      	str	r3, [r7, #28]
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	2b0f      	cmp	r3, #15
 8003460:	f67f ae90 	bls.w	8003184 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003464:	bf00      	nop
 8003466:	bf00      	nop
 8003468:	3724      	adds	r7, #36	; 0x24
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	40023800 	.word	0x40023800
 8003478:	40013800 	.word	0x40013800
 800347c:	40020000 	.word	0x40020000
 8003480:	40020400 	.word	0x40020400
 8003484:	40020800 	.word	0x40020800
 8003488:	40020c00 	.word	0x40020c00
 800348c:	40021000 	.word	0x40021000
 8003490:	40021400 	.word	0x40021400
 8003494:	40021800 	.word	0x40021800
 8003498:	40021c00 	.word	0x40021c00
 800349c:	40013c00 	.word	0x40013c00

080034a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	807b      	strh	r3, [r7, #2]
 80034ac:	4613      	mov	r3, r2
 80034ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034b0:	787b      	ldrb	r3, [r7, #1]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034b6:	887a      	ldrh	r2, [r7, #2]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034bc:	e003      	b.n	80034c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034be:	887b      	ldrh	r3, [r7, #2]
 80034c0:	041a      	lsls	r2, r3, #16
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	619a      	str	r2, [r3, #24]
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b086      	sub	sp, #24
 80034d6:	af02      	add	r7, sp, #8
 80034d8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e059      	b.n	8003598 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d106      	bne.n	8003504 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f008 ffde 	bl	800c4c0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2203      	movs	r2, #3
 8003508:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003512:	d102      	bne.n	800351a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f005 fde7 	bl	80090f2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6818      	ldr	r0, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	7c1a      	ldrb	r2, [r3, #16]
 800352c:	f88d 2000 	strb.w	r2, [sp]
 8003530:	3304      	adds	r3, #4
 8003532:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003534:	f005 fd68 	bl	8009008 <USB_CoreInit>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2202      	movs	r2, #2
 8003542:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e026      	b.n	8003598 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2101      	movs	r1, #1
 8003550:	4618      	mov	r0, r3
 8003552:	f005 fddf 	bl	8009114 <USB_SetCurrentMode>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e017      	b.n	8003598 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6818      	ldr	r0, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	7c1a      	ldrb	r2, [r3, #16]
 8003570:	f88d 2000 	strb.w	r2, [sp]
 8003574:	3304      	adds	r3, #4
 8003576:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003578:	f005 ff82 	bl	8009480 <USB_HostInit>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d005      	beq.n	800358e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2202      	movs	r2, #2
 8003586:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e004      	b.n	8003598 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b08b      	sub	sp, #44	; 0x2c
 80035a4:	af04      	add	r7, sp, #16
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	4608      	mov	r0, r1
 80035aa:	4611      	mov	r1, r2
 80035ac:	461a      	mov	r2, r3
 80035ae:	4603      	mov	r3, r0
 80035b0:	70fb      	strb	r3, [r7, #3]
 80035b2:	460b      	mov	r3, r1
 80035b4:	70bb      	strb	r3, [r7, #2]
 80035b6:	4613      	mov	r3, r2
 80035b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80035ba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80035bc:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_HCD_HC_Init+0x2c>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e09d      	b.n	8003708 <HAL_HCD_HC_Init+0x168>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80035d4:	78fa      	ldrb	r2, [r7, #3]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	3319      	adds	r3, #25
 80035e4:	2200      	movs	r2, #0
 80035e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80035e8:	78fa      	ldrb	r2, [r7, #3]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	3314      	adds	r3, #20
 80035f8:	787a      	ldrb	r2, [r7, #1]
 80035fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80035fc:	78fa      	ldrb	r2, [r7, #3]
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	1a9b      	subs	r3, r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	3315      	adds	r3, #21
 800360c:	78fa      	ldrb	r2, [r7, #3]
 800360e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003610:	78fa      	ldrb	r2, [r7, #3]
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	3326      	adds	r3, #38	; 0x26
 8003620:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8003624:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003626:	78fa      	ldrb	r2, [r7, #3]
 8003628:	78bb      	ldrb	r3, [r7, #2]
 800362a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800362e:	b2d8      	uxtb	r0, r3
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	3316      	adds	r3, #22
 800363e:	4602      	mov	r2, r0
 8003640:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003642:	78fb      	ldrb	r3, [r7, #3]
 8003644:	4619      	mov	r1, r3
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fbc8 	bl	8003ddc <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800364c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003650:	2b00      	cmp	r3, #0
 8003652:	da0a      	bge.n	800366a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003654:	78fa      	ldrb	r2, [r7, #3]
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	3317      	adds	r3, #23
 8003664:	2201      	movs	r2, #1
 8003666:	701a      	strb	r2, [r3, #0]
 8003668:	e009      	b.n	800367e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800366a:	78fa      	ldrb	r2, [r7, #3]
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	3317      	adds	r3, #23
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f006 f860 	bl	8009748 <USB_GetHostSpeed>
 8003688:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800368a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800368e:	2b01      	cmp	r3, #1
 8003690:	d10b      	bne.n	80036aa <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003692:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003696:	2b01      	cmp	r3, #1
 8003698:	d107      	bne.n	80036aa <HAL_HCD_HC_Init+0x10a>
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d104      	bne.n	80036aa <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	2bbc      	cmp	r3, #188	; 0xbc
 80036a4:	d901      	bls.n	80036aa <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80036a6:	23bc      	movs	r3, #188	; 0xbc
 80036a8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80036aa:	78fa      	ldrb	r2, [r7, #3]
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	1a9b      	subs	r3, r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	3318      	adds	r3, #24
 80036ba:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80036be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80036c0:	78fa      	ldrb	r2, [r7, #3]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	b298      	uxth	r0, r3
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	3328      	adds	r3, #40	; 0x28
 80036d4:	4602      	mov	r2, r0
 80036d6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6818      	ldr	r0, [r3, #0]
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	b29b      	uxth	r3, r3
 80036e0:	787c      	ldrb	r4, [r7, #1]
 80036e2:	78ba      	ldrb	r2, [r7, #2]
 80036e4:	78f9      	ldrb	r1, [r7, #3]
 80036e6:	9302      	str	r3, [sp, #8]
 80036e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80036ec:	9301      	str	r3, [sp, #4]
 80036ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	4623      	mov	r3, r4
 80036f6:	f006 f84f 	bl	8009798 <USB_HC_Init>
 80036fa:	4603      	mov	r3, r0
 80036fc:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8003706:	7bfb      	ldrb	r3, [r7, #15]
}
 8003708:	4618      	mov	r0, r3
 800370a:	371c      	adds	r7, #28
 800370c:	46bd      	mov	sp, r7
 800370e:	bd90      	pop	{r4, r7, pc}

08003710 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_HCD_HC_Halt+0x1e>
 800372a:	2302      	movs	r3, #2
 800372c:	e00f      	b.n	800374e <HAL_HCD_HC_Halt+0x3e>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	78fa      	ldrb	r2, [r7, #3]
 800373c:	4611      	mov	r1, r2
 800373e:	4618      	mov	r0, r3
 8003740:	f006 fbe1 	bl	8009f06 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 800374c:	7bfb      	ldrb	r3, [r7, #15]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	4608      	mov	r0, r1
 8003762:	4611      	mov	r1, r2
 8003764:	461a      	mov	r2, r3
 8003766:	4603      	mov	r3, r0
 8003768:	70fb      	strb	r3, [r7, #3]
 800376a:	460b      	mov	r3, r1
 800376c:	70bb      	strb	r3, [r7, #2]
 800376e:	4613      	mov	r3, r2
 8003770:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003772:	78fa      	ldrb	r2, [r7, #3]
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	1a9b      	subs	r3, r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	3317      	adds	r3, #23
 8003782:	78ba      	ldrb	r2, [r7, #2]
 8003784:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003786:	78fa      	ldrb	r2, [r7, #3]
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	1a9b      	subs	r3, r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	3326      	adds	r3, #38	; 0x26
 8003796:	787a      	ldrb	r2, [r7, #1]
 8003798:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800379a:	7c3b      	ldrb	r3, [r7, #16]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d114      	bne.n	80037ca <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80037a0:	78fa      	ldrb	r2, [r7, #3]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	332a      	adds	r3, #42	; 0x2a
 80037b0:	2203      	movs	r2, #3
 80037b2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80037b4:	78fa      	ldrb	r2, [r7, #3]
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4613      	mov	r3, r2
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	1a9b      	subs	r3, r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	3319      	adds	r3, #25
 80037c4:	7f3a      	ldrb	r2, [r7, #28]
 80037c6:	701a      	strb	r2, [r3, #0]
 80037c8:	e009      	b.n	80037de <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037ca:	78fa      	ldrb	r2, [r7, #3]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	332a      	adds	r3, #42	; 0x2a
 80037da:	2202      	movs	r2, #2
 80037dc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80037de:	787b      	ldrb	r3, [r7, #1]
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	f200 8102 	bhi.w	80039ea <HAL_HCD_HC_SubmitRequest+0x292>
 80037e6:	a201      	add	r2, pc, #4	; (adr r2, 80037ec <HAL_HCD_HC_SubmitRequest+0x94>)
 80037e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ec:	080037fd 	.word	0x080037fd
 80037f0:	080039d5 	.word	0x080039d5
 80037f4:	080038c1 	.word	0x080038c1
 80037f8:	0800394b 	.word	0x0800394b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80037fc:	7c3b      	ldrb	r3, [r7, #16]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	f040 80f5 	bne.w	80039ee <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003804:	78bb      	ldrb	r3, [r7, #2]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d12d      	bne.n	8003866 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800380a:	8b3b      	ldrh	r3, [r7, #24]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d109      	bne.n	8003824 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003810:	78fa      	ldrb	r2, [r7, #3]
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	333d      	adds	r3, #61	; 0x3d
 8003820:	2201      	movs	r2, #1
 8003822:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003824:	78fa      	ldrb	r2, [r7, #3]
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	4613      	mov	r3, r2
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	1a9b      	subs	r3, r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	333d      	adds	r3, #61	; 0x3d
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10a      	bne.n	8003850 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800383a:	78fa      	ldrb	r2, [r7, #3]
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	332a      	adds	r3, #42	; 0x2a
 800384a:	2200      	movs	r2, #0
 800384c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800384e:	e0ce      	b.n	80039ee <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003850:	78fa      	ldrb	r2, [r7, #3]
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	332a      	adds	r3, #42	; 0x2a
 8003860:	2202      	movs	r2, #2
 8003862:	701a      	strb	r2, [r3, #0]
      break;
 8003864:	e0c3      	b.n	80039ee <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003866:	78fa      	ldrb	r2, [r7, #3]
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	331a      	adds	r3, #26
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b01      	cmp	r3, #1
 800387a:	f040 80b8 	bne.w	80039ee <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800387e:	78fa      	ldrb	r2, [r7, #3]
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	4613      	mov	r3, r2
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	1a9b      	subs	r3, r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	440b      	add	r3, r1
 800388c:	333c      	adds	r3, #60	; 0x3c
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10a      	bne.n	80038aa <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003894:	78fa      	ldrb	r2, [r7, #3]
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	1a9b      	subs	r3, r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	332a      	adds	r3, #42	; 0x2a
 80038a4:	2200      	movs	r2, #0
 80038a6:	701a      	strb	r2, [r3, #0]
      break;
 80038a8:	e0a1      	b.n	80039ee <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038aa:	78fa      	ldrb	r2, [r7, #3]
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	1a9b      	subs	r3, r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	440b      	add	r3, r1
 80038b8:	332a      	adds	r3, #42	; 0x2a
 80038ba:	2202      	movs	r2, #2
 80038bc:	701a      	strb	r2, [r3, #0]
      break;
 80038be:	e096      	b.n	80039ee <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80038c0:	78bb      	ldrb	r3, [r7, #2]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d120      	bne.n	8003908 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80038c6:	78fa      	ldrb	r2, [r7, #3]
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	4613      	mov	r3, r2
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	1a9b      	subs	r3, r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	440b      	add	r3, r1
 80038d4:	333d      	adds	r3, #61	; 0x3d
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10a      	bne.n	80038f2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038dc:	78fa      	ldrb	r2, [r7, #3]
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	4613      	mov	r3, r2
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	1a9b      	subs	r3, r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	332a      	adds	r3, #42	; 0x2a
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80038f0:	e07e      	b.n	80039f0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038f2:	78fa      	ldrb	r2, [r7, #3]
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	1a9b      	subs	r3, r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	440b      	add	r3, r1
 8003900:	332a      	adds	r3, #42	; 0x2a
 8003902:	2202      	movs	r2, #2
 8003904:	701a      	strb	r2, [r3, #0]
      break;
 8003906:	e073      	b.n	80039f0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003908:	78fa      	ldrb	r2, [r7, #3]
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	1a9b      	subs	r3, r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	333c      	adds	r3, #60	; 0x3c
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10a      	bne.n	8003934 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800391e:	78fa      	ldrb	r2, [r7, #3]
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	4613      	mov	r3, r2
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	1a9b      	subs	r3, r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	440b      	add	r3, r1
 800392c:	332a      	adds	r3, #42	; 0x2a
 800392e:	2200      	movs	r2, #0
 8003930:	701a      	strb	r2, [r3, #0]
      break;
 8003932:	e05d      	b.n	80039f0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003934:	78fa      	ldrb	r2, [r7, #3]
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	1a9b      	subs	r3, r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	332a      	adds	r3, #42	; 0x2a
 8003944:	2202      	movs	r2, #2
 8003946:	701a      	strb	r2, [r3, #0]
      break;
 8003948:	e052      	b.n	80039f0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800394a:	78bb      	ldrb	r3, [r7, #2]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d120      	bne.n	8003992 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003950:	78fa      	ldrb	r2, [r7, #3]
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	4613      	mov	r3, r2
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	333d      	adds	r3, #61	; 0x3d
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10a      	bne.n	800397c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003966:	78fa      	ldrb	r2, [r7, #3]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	332a      	adds	r3, #42	; 0x2a
 8003976:	2200      	movs	r2, #0
 8003978:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800397a:	e039      	b.n	80039f0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800397c:	78fa      	ldrb	r2, [r7, #3]
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	4613      	mov	r3, r2
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	1a9b      	subs	r3, r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	332a      	adds	r3, #42	; 0x2a
 800398c:	2202      	movs	r2, #2
 800398e:	701a      	strb	r2, [r3, #0]
      break;
 8003990:	e02e      	b.n	80039f0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003992:	78fa      	ldrb	r2, [r7, #3]
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	1a9b      	subs	r3, r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	333c      	adds	r3, #60	; 0x3c
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039a8:	78fa      	ldrb	r2, [r7, #3]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	1a9b      	subs	r3, r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	332a      	adds	r3, #42	; 0x2a
 80039b8:	2200      	movs	r2, #0
 80039ba:	701a      	strb	r2, [r3, #0]
      break;
 80039bc:	e018      	b.n	80039f0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039be:	78fa      	ldrb	r2, [r7, #3]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	1a9b      	subs	r3, r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	332a      	adds	r3, #42	; 0x2a
 80039ce:	2202      	movs	r2, #2
 80039d0:	701a      	strb	r2, [r3, #0]
      break;
 80039d2:	e00d      	b.n	80039f0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039d4:	78fa      	ldrb	r2, [r7, #3]
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	1a9b      	subs	r3, r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	332a      	adds	r3, #42	; 0x2a
 80039e4:	2200      	movs	r2, #0
 80039e6:	701a      	strb	r2, [r3, #0]
      break;
 80039e8:	e002      	b.n	80039f0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80039ea:	bf00      	nop
 80039ec:	e000      	b.n	80039f0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80039ee:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80039f0:	78fa      	ldrb	r2, [r7, #3]
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	4613      	mov	r3, r2
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	332c      	adds	r3, #44	; 0x2c
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003a04:	78fa      	ldrb	r2, [r7, #3]
 8003a06:	8b39      	ldrh	r1, [r7, #24]
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	1a9b      	subs	r3, r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4403      	add	r3, r0
 8003a14:	3334      	adds	r3, #52	; 0x34
 8003a16:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003a18:	78fa      	ldrb	r2, [r7, #3]
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	334c      	adds	r3, #76	; 0x4c
 8003a28:	2200      	movs	r2, #0
 8003a2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003a2c:	78fa      	ldrb	r2, [r7, #3]
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	4613      	mov	r3, r2
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	3338      	adds	r3, #56	; 0x38
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003a40:	78fa      	ldrb	r2, [r7, #3]
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	1a9b      	subs	r3, r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	3315      	adds	r3, #21
 8003a50:	78fa      	ldrb	r2, [r7, #3]
 8003a52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003a54:	78fa      	ldrb	r2, [r7, #3]
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	1a9b      	subs	r3, r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	334d      	adds	r3, #77	; 0x4d
 8003a64:	2200      	movs	r2, #0
 8003a66:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6818      	ldr	r0, [r3, #0]
 8003a6c:	78fa      	ldrb	r2, [r7, #3]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	1a9b      	subs	r3, r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	3310      	adds	r3, #16
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	1d19      	adds	r1, r3, #4
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	799b      	ldrb	r3, [r3, #6]
 8003a82:	461a      	mov	r2, r3
 8003a84:	f005 ffb4 	bl	80099f0 <USB_HC_StartXfer>
 8003a88:	4603      	mov	r3, r0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop

08003a94 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f005 fca8 	bl	8009400 <USB_GetMode>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	f040 80fb 	bne.w	8003cae <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f005 fc6b 	bl	8009398 <USB_ReadInterrupts>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 80f1 	beq.w	8003cac <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f005 fc62 	bl	8009398 <USB_ReadInterrupts>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ada:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ade:	d104      	bne.n	8003aea <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003ae8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f005 fc52 	bl	8009398 <USB_ReadInterrupts>
 8003af4:	4603      	mov	r3, r0
 8003af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003afa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003afe:	d104      	bne.n	8003b0a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f005 fc42 	bl	8009398 <USB_ReadInterrupts>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b1e:	d104      	bne.n	8003b2a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003b28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f005 fc32 	bl	8009398 <USB_ReadInterrupts>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d103      	bne.n	8003b46 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2202      	movs	r2, #2
 8003b44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f005 fc24 	bl	8009398 <USB_ReadInterrupts>
 8003b50:	4603      	mov	r3, r0
 8003b52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b5a:	d120      	bne.n	8003b9e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003b64:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d113      	bne.n	8003b9e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003b76:	2110      	movs	r1, #16
 8003b78:	6938      	ldr	r0, [r7, #16]
 8003b7a:	f005 fb17 	bl	80091ac <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003b7e:	6938      	ldr	r0, [r7, #16]
 8003b80:	f005 fb46 	bl	8009210 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	7a5b      	ldrb	r3, [r3, #9]
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d105      	bne.n	8003b98 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2101      	movs	r1, #1
 8003b92:	4618      	mov	r0, r3
 8003b94:	f005 fd38 	bl	8009608 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f008 fd0f 	bl	800c5bc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f005 fbf8 	bl	8009398 <USB_ReadInterrupts>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bb2:	d102      	bne.n	8003bba <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f001 fd33 	bl	8005620 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f005 fbea 	bl	8009398 <USB_ReadInterrupts>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d106      	bne.n	8003bdc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f008 fcd8 	bl	800c584 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2208      	movs	r2, #8
 8003bda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f005 fbd9 	bl	8009398 <USB_ReadInterrupts>
 8003be6:	4603      	mov	r3, r0
 8003be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bf0:	d139      	bne.n	8003c66 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f006 f974 	bl	8009ee4 <USB_HC_ReadInterrupt>
 8003bfc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	e025      	b.n	8003c50 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d018      	beq.n	8003c4a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c2e:	d106      	bne.n	8003c3e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	4619      	mov	r1, r3
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f905 	bl	8003e46 <HCD_HC_IN_IRQHandler>
 8003c3c:	e005      	b.n	8003c4a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	4619      	mov	r1, r3
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 ff67 	bl	8004b18 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	795b      	ldrb	r3, [r3, #5]
 8003c54:	461a      	mov	r2, r3
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d3d3      	bcc.n	8003c04 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f005 fb94 	bl	8009398 <USB_ReadInterrupts>
 8003c70:	4603      	mov	r3, r0
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	2b10      	cmp	r3, #16
 8003c78:	d101      	bne.n	8003c7e <HAL_HCD_IRQHandler+0x1ea>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <HAL_HCD_IRQHandler+0x1ec>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d014      	beq.n	8003cae <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0210 	bic.w	r2, r2, #16
 8003c92:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f001 fbe4 	bl	8005462 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	699a      	ldr	r2, [r3, #24]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0210 	orr.w	r2, r2, #16
 8003ca8:	619a      	str	r2, [r3, #24]
 8003caa:	e000      	b.n	8003cae <HAL_HCD_IRQHandler+0x21a>
      return;
 8003cac:	bf00      	nop
    }
  }
}
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <HAL_HCD_Start+0x16>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	e013      	b.n	8003cf2 <HAL_HCD_Start+0x3e>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f005 fcfc 	bl	80096d6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f005 f9f4 	bl	80090d0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_HCD_Stop+0x16>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e00d      	b.n	8003d2c <HAL_HCD_Stop+0x32>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f006 fa4f 	bl	800a1c0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f005 fc9e 	bl	8009682 <USB_ResetPort>
 8003d46:	4603      	mov	r3, r0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003d5c:	78fa      	ldrb	r2, [r7, #3]
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	4613      	mov	r3, r2
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	1a9b      	subs	r3, r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	334c      	adds	r3, #76	; 0x4c
 8003d6c:	781b      	ldrb	r3, [r3, #0]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	460b      	mov	r3, r1
 8003d84:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003d86:	78fa      	ldrb	r2, [r7, #3]
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	1a9b      	subs	r3, r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	3338      	adds	r3, #56	; 0x38
 8003d96:	681b      	ldr	r3, [r3, #0]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f005 fce0 	bl	8009776 <USB_GetCurrentFrame>
 8003db6:	4603      	mov	r3, r0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f005 fcbb 	bl	8009748 <USB_GetHostSpeed>
 8003dd2:	4603      	mov	r3, r0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	460b      	mov	r3, r1
 8003de6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003de8:	78fa      	ldrb	r2, [r7, #3]
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	4613      	mov	r3, r2
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	1a9b      	subs	r3, r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	440b      	add	r3, r1
 8003df6:	331a      	adds	r3, #26
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003dfc:	78fa      	ldrb	r2, [r7, #3]
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	4613      	mov	r3, r2
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	1a9b      	subs	r3, r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	331b      	adds	r3, #27
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003e10:	78fa      	ldrb	r2, [r7, #3]
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	4613      	mov	r3, r2
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	1a9b      	subs	r3, r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	3325      	adds	r3, #37	; 0x25
 8003e20:	2200      	movs	r2, #0
 8003e22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003e24:	78fa      	ldrb	r2, [r7, #3]
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	1a9b      	subs	r3, r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	3324      	adds	r3, #36	; 0x24
 8003e34:	2200      	movs	r2, #0
 8003e36:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b086      	sub	sp, #24
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	78fa      	ldrb	r2, [r7, #3]
 8003e62:	4611      	mov	r1, r2
 8003e64:	4618      	mov	r0, r3
 8003e66:	f005 faaa 	bl	80093be <USB_ReadChInterrupts>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d11a      	bne.n	8003eaa <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e80:	461a      	mov	r2, r3
 8003e82:	2304      	movs	r3, #4
 8003e84:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003e86:	78fa      	ldrb	r2, [r7, #3]
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	1a9b      	subs	r3, r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	440b      	add	r3, r1
 8003e94:	334d      	adds	r3, #77	; 0x4d
 8003e96:	2207      	movs	r2, #7
 8003e98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	78fa      	ldrb	r2, [r7, #3]
 8003ea0:	4611      	mov	r1, r2
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f006 f82f 	bl	8009f06 <USB_HC_Halt>
 8003ea8:	e09e      	b.n	8003fe8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	78fa      	ldrb	r2, [r7, #3]
 8003eb0:	4611      	mov	r1, r2
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f005 fa83 	bl	80093be <USB_ReadChInterrupts>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ec2:	d11b      	bne.n	8003efc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003ec4:	78fb      	ldrb	r3, [r7, #3]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ed6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003ed8:	78fa      	ldrb	r2, [r7, #3]
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	1a9b      	subs	r3, r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	334d      	adds	r3, #77	; 0x4d
 8003ee8:	2208      	movs	r2, #8
 8003eea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	78fa      	ldrb	r2, [r7, #3]
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f006 f806 	bl	8009f06 <USB_HC_Halt>
 8003efa:	e075      	b.n	8003fe8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	78fa      	ldrb	r2, [r7, #3]
 8003f02:	4611      	mov	r1, r2
 8003f04:	4618      	mov	r0, r3
 8003f06:	f005 fa5a 	bl	80093be <USB_ReadChInterrupts>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d11a      	bne.n	8003f4a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f20:	461a      	mov	r2, r3
 8003f22:	2308      	movs	r3, #8
 8003f24:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003f26:	78fa      	ldrb	r2, [r7, #3]
 8003f28:	6879      	ldr	r1, [r7, #4]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	1a9b      	subs	r3, r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	440b      	add	r3, r1
 8003f34:	334d      	adds	r3, #77	; 0x4d
 8003f36:	2206      	movs	r2, #6
 8003f38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	78fa      	ldrb	r2, [r7, #3]
 8003f40:	4611      	mov	r1, r2
 8003f42:	4618      	mov	r0, r3
 8003f44:	f005 ffdf 	bl	8009f06 <USB_HC_Halt>
 8003f48:	e04e      	b.n	8003fe8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	78fa      	ldrb	r2, [r7, #3]
 8003f50:	4611      	mov	r1, r2
 8003f52:	4618      	mov	r0, r3
 8003f54:	f005 fa33 	bl	80093be <USB_ReadChInterrupts>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f62:	d11b      	bne.n	8003f9c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003f64:	78fb      	ldrb	r3, [r7, #3]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f70:	461a      	mov	r2, r3
 8003f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f76:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003f78:	78fa      	ldrb	r2, [r7, #3]
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	1a9b      	subs	r3, r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	334d      	adds	r3, #77	; 0x4d
 8003f88:	2209      	movs	r2, #9
 8003f8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	78fa      	ldrb	r2, [r7, #3]
 8003f92:	4611      	mov	r1, r2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f005 ffb6 	bl	8009f06 <USB_HC_Halt>
 8003f9a:	e025      	b.n	8003fe8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	78fa      	ldrb	r2, [r7, #3]
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f005 fa0a 	bl	80093be <USB_ReadChInterrupts>
 8003faa:	4603      	mov	r3, r0
 8003fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb0:	2b80      	cmp	r3, #128	; 0x80
 8003fb2:	d119      	bne.n	8003fe8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003fb4:	78fb      	ldrb	r3, [r7, #3]
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	2380      	movs	r3, #128	; 0x80
 8003fc4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003fc6:	78fa      	ldrb	r2, [r7, #3]
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	011b      	lsls	r3, r3, #4
 8003fce:	1a9b      	subs	r3, r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	440b      	add	r3, r1
 8003fd4:	334d      	adds	r3, #77	; 0x4d
 8003fd6:	2207      	movs	r2, #7
 8003fd8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	78fa      	ldrb	r2, [r7, #3]
 8003fe0:	4611      	mov	r1, r2
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f005 ff8f 	bl	8009f06 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	78fa      	ldrb	r2, [r7, #3]
 8003fee:	4611      	mov	r1, r2
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f005 f9e4 	bl	80093be <USB_ReadChInterrupts>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004000:	d112      	bne.n	8004028 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	78fa      	ldrb	r2, [r7, #3]
 8004008:	4611      	mov	r1, r2
 800400a:	4618      	mov	r0, r3
 800400c:	f005 ff7b 	bl	8009f06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	4413      	add	r3, r2
 8004018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800401c:	461a      	mov	r2, r3
 800401e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004022:	6093      	str	r3, [r2, #8]
 8004024:	f000 bd75 	b.w	8004b12 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	78fa      	ldrb	r2, [r7, #3]
 800402e:	4611      	mov	r1, r2
 8004030:	4618      	mov	r0, r3
 8004032:	f005 f9c4 	bl	80093be <USB_ReadChInterrupts>
 8004036:	4603      	mov	r3, r0
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b01      	cmp	r3, #1
 800403e:	f040 8128 	bne.w	8004292 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004042:	78fb      	ldrb	r3, [r7, #3]
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	4413      	add	r3, r2
 800404a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800404e:	461a      	mov	r2, r3
 8004050:	2320      	movs	r3, #32
 8004052:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004054:	78fa      	ldrb	r2, [r7, #3]
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	4613      	mov	r3, r2
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	1a9b      	subs	r3, r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	331b      	adds	r3, #27
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d119      	bne.n	800409e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800406a:	78fa      	ldrb	r2, [r7, #3]
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	4613      	mov	r3, r2
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	1a9b      	subs	r3, r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	440b      	add	r3, r1
 8004078:	331b      	adds	r3, #27
 800407a:	2200      	movs	r2, #0
 800407c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800407e:	78fb      	ldrb	r3, [r7, #3]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4413      	add	r3, r2
 8004086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	78fa      	ldrb	r2, [r7, #3]
 800408e:	0151      	lsls	r1, r2, #5
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	440a      	add	r2, r1
 8004094:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800409c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	799b      	ldrb	r3, [r3, #6]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d01b      	beq.n	80040de <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80040a6:	78fa      	ldrb	r2, [r7, #3]
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	4613      	mov	r3, r2
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	1a9b      	subs	r3, r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	3330      	adds	r3, #48	; 0x30
 80040b6:	6819      	ldr	r1, [r3, #0]
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ca:	78fa      	ldrb	r2, [r7, #3]
 80040cc:	1ac9      	subs	r1, r1, r3
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	4613      	mov	r3, r2
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4403      	add	r3, r0
 80040da:	3338      	adds	r3, #56	; 0x38
 80040dc:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80040de:	78fa      	ldrb	r2, [r7, #3]
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	4613      	mov	r3, r2
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	1a9b      	subs	r3, r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	440b      	add	r3, r1
 80040ec:	334d      	adds	r3, #77	; 0x4d
 80040ee:	2201      	movs	r2, #1
 80040f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80040f2:	78fa      	ldrb	r2, [r7, #3]
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	440b      	add	r3, r1
 8004100:	3344      	adds	r3, #68	; 0x44
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004106:	78fb      	ldrb	r3, [r7, #3]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	4413      	add	r3, r2
 800410e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004112:	461a      	mov	r2, r3
 8004114:	2301      	movs	r3, #1
 8004116:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004118:	78fa      	ldrb	r2, [r7, #3]
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	3326      	adds	r3, #38	; 0x26
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800412e:	78fa      	ldrb	r2, [r7, #3]
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	4613      	mov	r3, r2
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	1a9b      	subs	r3, r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	440b      	add	r3, r1
 800413c:	3326      	adds	r3, #38	; 0x26
 800413e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004140:	2b02      	cmp	r3, #2
 8004142:	d110      	bne.n	8004166 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	78fa      	ldrb	r2, [r7, #3]
 800414a:	4611      	mov	r1, r2
 800414c:	4618      	mov	r0, r3
 800414e:	f005 feda 	bl	8009f06 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4413      	add	r3, r2
 800415a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800415e:	461a      	mov	r2, r3
 8004160:	2310      	movs	r3, #16
 8004162:	6093      	str	r3, [r2, #8]
 8004164:	e03d      	b.n	80041e2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004166:	78fa      	ldrb	r2, [r7, #3]
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	4613      	mov	r3, r2
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	1a9b      	subs	r3, r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	3326      	adds	r3, #38	; 0x26
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b03      	cmp	r3, #3
 800417a:	d00a      	beq.n	8004192 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800417c:	78fa      	ldrb	r2, [r7, #3]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	1a9b      	subs	r3, r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	3326      	adds	r3, #38	; 0x26
 800418c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800418e:	2b01      	cmp	r3, #1
 8004190:	d127      	bne.n	80041e2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004192:	78fb      	ldrb	r3, [r7, #3]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	4413      	add	r3, r2
 800419a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	78fa      	ldrb	r2, [r7, #3]
 80041a2:	0151      	lsls	r1, r2, #5
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	440a      	add	r2, r1
 80041a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041b0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80041b2:	78fa      	ldrb	r2, [r7, #3]
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	1a9b      	subs	r3, r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	440b      	add	r3, r1
 80041c0:	334c      	adds	r3, #76	; 0x4c
 80041c2:	2201      	movs	r2, #1
 80041c4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80041c6:	78fa      	ldrb	r2, [r7, #3]
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	4613      	mov	r3, r2
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	1a9b      	subs	r3, r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	334c      	adds	r3, #76	; 0x4c
 80041d6:	781a      	ldrb	r2, [r3, #0]
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	4619      	mov	r1, r3
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f008 f9fb 	bl	800c5d8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	799b      	ldrb	r3, [r3, #6]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d13b      	bne.n	8004262 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80041ea:	78fa      	ldrb	r2, [r7, #3]
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	1a9b      	subs	r3, r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	3338      	adds	r3, #56	; 0x38
 80041fa:	6819      	ldr	r1, [r3, #0]
 80041fc:	78fa      	ldrb	r2, [r7, #3]
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	4613      	mov	r3, r2
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	1a9b      	subs	r3, r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4403      	add	r3, r0
 800420a:	3328      	adds	r3, #40	; 0x28
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	440b      	add	r3, r1
 8004210:	1e59      	subs	r1, r3, #1
 8004212:	78fa      	ldrb	r2, [r7, #3]
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	4613      	mov	r3, r2
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	1a9b      	subs	r3, r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4403      	add	r3, r0
 8004220:	3328      	adds	r3, #40	; 0x28
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	fbb1 f3f3 	udiv	r3, r1, r3
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8470 	beq.w	8004b12 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004232:	78fa      	ldrb	r2, [r7, #3]
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	4613      	mov	r3, r2
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	1a9b      	subs	r3, r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	440b      	add	r3, r1
 8004240:	333c      	adds	r3, #60	; 0x3c
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	78fa      	ldrb	r2, [r7, #3]
 8004246:	f083 0301 	eor.w	r3, r3, #1
 800424a:	b2d8      	uxtb	r0, r3
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	4613      	mov	r3, r2
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	1a9b      	subs	r3, r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	440b      	add	r3, r1
 8004258:	333c      	adds	r3, #60	; 0x3c
 800425a:	4602      	mov	r2, r0
 800425c:	701a      	strb	r2, [r3, #0]
 800425e:	f000 bc58 	b.w	8004b12 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004262:	78fa      	ldrb	r2, [r7, #3]
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	4613      	mov	r3, r2
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	1a9b      	subs	r3, r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	333c      	adds	r3, #60	; 0x3c
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	78fa      	ldrb	r2, [r7, #3]
 8004276:	f083 0301 	eor.w	r3, r3, #1
 800427a:	b2d8      	uxtb	r0, r3
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	4613      	mov	r3, r2
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	1a9b      	subs	r3, r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	440b      	add	r3, r1
 8004288:	333c      	adds	r3, #60	; 0x3c
 800428a:	4602      	mov	r2, r0
 800428c:	701a      	strb	r2, [r3, #0]
 800428e:	f000 bc40 	b.w	8004b12 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	78fa      	ldrb	r2, [r7, #3]
 8004298:	4611      	mov	r1, r2
 800429a:	4618      	mov	r0, r3
 800429c:	f005 f88f 	bl	80093be <USB_ReadChInterrupts>
 80042a0:	4603      	mov	r3, r0
 80042a2:	f003 0320 	and.w	r3, r3, #32
 80042a6:	2b20      	cmp	r3, #32
 80042a8:	d131      	bne.n	800430e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80042aa:	78fb      	ldrb	r3, [r7, #3]
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b6:	461a      	mov	r2, r3
 80042b8:	2320      	movs	r3, #32
 80042ba:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80042bc:	78fa      	ldrb	r2, [r7, #3]
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	331a      	adds	r3, #26
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	f040 841f 	bne.w	8004b12 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80042d4:	78fa      	ldrb	r2, [r7, #3]
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	4613      	mov	r3, r2
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	1a9b      	subs	r3, r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	331b      	adds	r3, #27
 80042e4:	2201      	movs	r2, #1
 80042e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80042e8:	78fa      	ldrb	r2, [r7, #3]
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	4613      	mov	r3, r2
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	1a9b      	subs	r3, r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	334d      	adds	r3, #77	; 0x4d
 80042f8:	2203      	movs	r2, #3
 80042fa:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	78fa      	ldrb	r2, [r7, #3]
 8004302:	4611      	mov	r1, r2
 8004304:	4618      	mov	r0, r3
 8004306:	f005 fdfe 	bl	8009f06 <USB_HC_Halt>
 800430a:	f000 bc02 	b.w	8004b12 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	78fa      	ldrb	r2, [r7, #3]
 8004314:	4611      	mov	r1, r2
 8004316:	4618      	mov	r0, r3
 8004318:	f005 f851 	bl	80093be <USB_ReadChInterrupts>
 800431c:	4603      	mov	r3, r0
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b02      	cmp	r3, #2
 8004324:	f040 8305 	bne.w	8004932 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	4413      	add	r3, r2
 8004330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004334:	461a      	mov	r2, r3
 8004336:	2302      	movs	r3, #2
 8004338:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800433a:	78fa      	ldrb	r2, [r7, #3]
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	4613      	mov	r3, r2
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	1a9b      	subs	r3, r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	440b      	add	r3, r1
 8004348:	334d      	adds	r3, #77	; 0x4d
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d114      	bne.n	800437a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004350:	78fa      	ldrb	r2, [r7, #3]
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	4613      	mov	r3, r2
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	1a9b      	subs	r3, r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	334d      	adds	r3, #77	; 0x4d
 8004360:	2202      	movs	r2, #2
 8004362:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004364:	78fa      	ldrb	r2, [r7, #3]
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	4613      	mov	r3, r2
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	1a9b      	subs	r3, r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	334c      	adds	r3, #76	; 0x4c
 8004374:	2201      	movs	r2, #1
 8004376:	701a      	strb	r2, [r3, #0]
 8004378:	e2cc      	b.n	8004914 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800437a:	78fa      	ldrb	r2, [r7, #3]
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	4613      	mov	r3, r2
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	1a9b      	subs	r3, r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	440b      	add	r3, r1
 8004388:	334d      	adds	r3, #77	; 0x4d
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b06      	cmp	r3, #6
 800438e:	d114      	bne.n	80043ba <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004390:	78fa      	ldrb	r2, [r7, #3]
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	4613      	mov	r3, r2
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	1a9b      	subs	r3, r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	334d      	adds	r3, #77	; 0x4d
 80043a0:	2202      	movs	r2, #2
 80043a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80043a4:	78fa      	ldrb	r2, [r7, #3]
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	4613      	mov	r3, r2
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	1a9b      	subs	r3, r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	334c      	adds	r3, #76	; 0x4c
 80043b4:	2205      	movs	r2, #5
 80043b6:	701a      	strb	r2, [r3, #0]
 80043b8:	e2ac      	b.n	8004914 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80043ba:	78fa      	ldrb	r2, [r7, #3]
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	1a9b      	subs	r3, r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	334d      	adds	r3, #77	; 0x4d
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b07      	cmp	r3, #7
 80043ce:	d00b      	beq.n	80043e8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80043d0:	78fa      	ldrb	r2, [r7, #3]
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	4613      	mov	r3, r2
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	1a9b      	subs	r3, r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	334d      	adds	r3, #77	; 0x4d
 80043e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80043e2:	2b09      	cmp	r3, #9
 80043e4:	f040 80a6 	bne.w	8004534 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043e8:	78fa      	ldrb	r2, [r7, #3]
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	334d      	adds	r3, #77	; 0x4d
 80043f8:	2202      	movs	r2, #2
 80043fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80043fc:	78fa      	ldrb	r2, [r7, #3]
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	4613      	mov	r3, r2
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	1a9b      	subs	r3, r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	3344      	adds	r3, #68	; 0x44
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	1c59      	adds	r1, r3, #1
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	4613      	mov	r3, r2
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	1a9b      	subs	r3, r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4403      	add	r3, r0
 800441c:	3344      	adds	r3, #68	; 0x44
 800441e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004420:	78fa      	ldrb	r2, [r7, #3]
 8004422:	6879      	ldr	r1, [r7, #4]
 8004424:	4613      	mov	r3, r2
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	1a9b      	subs	r3, r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	3344      	adds	r3, #68	; 0x44
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b02      	cmp	r3, #2
 8004434:	d943      	bls.n	80044be <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004436:	78fa      	ldrb	r2, [r7, #3]
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	4613      	mov	r3, r2
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	1a9b      	subs	r3, r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	440b      	add	r3, r1
 8004444:	3344      	adds	r3, #68	; 0x44
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800444a:	78fa      	ldrb	r2, [r7, #3]
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	4613      	mov	r3, r2
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	1a9b      	subs	r3, r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	440b      	add	r3, r1
 8004458:	331a      	adds	r3, #26
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d123      	bne.n	80044a8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004460:	78fa      	ldrb	r2, [r7, #3]
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	4613      	mov	r3, r2
 8004466:	011b      	lsls	r3, r3, #4
 8004468:	1a9b      	subs	r3, r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	331b      	adds	r3, #27
 8004470:	2200      	movs	r2, #0
 8004472:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004474:	78fa      	ldrb	r2, [r7, #3]
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	4613      	mov	r3, r2
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	331c      	adds	r3, #28
 8004484:	2200      	movs	r2, #0
 8004486:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004488:	78fb      	ldrb	r3, [r7, #3]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	4413      	add	r3, r2
 8004490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	78fa      	ldrb	r2, [r7, #3]
 8004498:	0151      	lsls	r1, r2, #5
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	440a      	add	r2, r1
 800449e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80044a8:	78fa      	ldrb	r2, [r7, #3]
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	4613      	mov	r3, r2
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	1a9b      	subs	r3, r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	440b      	add	r3, r1
 80044b6:	334c      	adds	r3, #76	; 0x4c
 80044b8:	2204      	movs	r2, #4
 80044ba:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044bc:	e229      	b.n	8004912 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80044be:	78fa      	ldrb	r2, [r7, #3]
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	4613      	mov	r3, r2
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	1a9b      	subs	r3, r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	440b      	add	r3, r1
 80044cc:	334c      	adds	r3, #76	; 0x4c
 80044ce:	2202      	movs	r2, #2
 80044d0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80044d2:	78fa      	ldrb	r2, [r7, #3]
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	1a9b      	subs	r3, r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	440b      	add	r3, r1
 80044e0:	3326      	adds	r3, #38	; 0x26
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00b      	beq.n	8004500 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80044e8:	78fa      	ldrb	r2, [r7, #3]
 80044ea:	6879      	ldr	r1, [r7, #4]
 80044ec:	4613      	mov	r3, r2
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	1a9b      	subs	r3, r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	3326      	adds	r3, #38	; 0x26
 80044f8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	f040 8209 	bne.w	8004912 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004500:	78fb      	ldrb	r3, [r7, #3]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	4413      	add	r3, r2
 8004508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004516:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800451e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	4413      	add	r3, r2
 8004528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452c:	461a      	mov	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004532:	e1ee      	b.n	8004912 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004534:	78fa      	ldrb	r2, [r7, #3]
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	4613      	mov	r3, r2
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	1a9b      	subs	r3, r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	440b      	add	r3, r1
 8004542:	334d      	adds	r3, #77	; 0x4d
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	2b05      	cmp	r3, #5
 8004548:	f040 80c8 	bne.w	80046dc <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800454c:	78fa      	ldrb	r2, [r7, #3]
 800454e:	6879      	ldr	r1, [r7, #4]
 8004550:	4613      	mov	r3, r2
 8004552:	011b      	lsls	r3, r3, #4
 8004554:	1a9b      	subs	r3, r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	440b      	add	r3, r1
 800455a:	334d      	adds	r3, #77	; 0x4d
 800455c:	2202      	movs	r2, #2
 800455e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004560:	78fa      	ldrb	r2, [r7, #3]
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	4613      	mov	r3, r2
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	1a9b      	subs	r3, r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	440b      	add	r3, r1
 800456e:	331b      	adds	r3, #27
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	2b01      	cmp	r3, #1
 8004574:	f040 81ce 	bne.w	8004914 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004578:	78fa      	ldrb	r2, [r7, #3]
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	4613      	mov	r3, r2
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	1a9b      	subs	r3, r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	3326      	adds	r3, #38	; 0x26
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b03      	cmp	r3, #3
 800458c:	d16b      	bne.n	8004666 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800458e:	78fa      	ldrb	r2, [r7, #3]
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	1a9b      	subs	r3, r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	3348      	adds	r3, #72	; 0x48
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	1c59      	adds	r1, r3, #1
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	4613      	mov	r3, r2
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	1a9b      	subs	r3, r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4403      	add	r3, r0
 80045ae:	3348      	adds	r3, #72	; 0x48
 80045b0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80045b2:	78fa      	ldrb	r2, [r7, #3]
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	4613      	mov	r3, r2
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	440b      	add	r3, r1
 80045c0:	3348      	adds	r3, #72	; 0x48
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d943      	bls.n	8004650 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80045c8:	78fa      	ldrb	r2, [r7, #3]
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	1a9b      	subs	r3, r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	3348      	adds	r3, #72	; 0x48
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80045dc:	78fa      	ldrb	r2, [r7, #3]
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	1a9b      	subs	r3, r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	331b      	adds	r3, #27
 80045ec:	2200      	movs	r2, #0
 80045ee:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80045f0:	78fa      	ldrb	r2, [r7, #3]
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	4613      	mov	r3, r2
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	3344      	adds	r3, #68	; 0x44
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b02      	cmp	r3, #2
 8004604:	d809      	bhi.n	800461a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004606:	78fa      	ldrb	r2, [r7, #3]
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	1a9b      	subs	r3, r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	331c      	adds	r3, #28
 8004616:	2201      	movs	r2, #1
 8004618:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800461a:	78fb      	ldrb	r3, [r7, #3]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	4413      	add	r3, r2
 8004622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	78fa      	ldrb	r2, [r7, #3]
 800462a:	0151      	lsls	r1, r2, #5
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	440a      	add	r2, r1
 8004630:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004634:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004638:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800463a:	78fa      	ldrb	r2, [r7, #3]
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	4613      	mov	r3, r2
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	1a9b      	subs	r3, r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	334c      	adds	r3, #76	; 0x4c
 800464a:	2204      	movs	r2, #4
 800464c:	701a      	strb	r2, [r3, #0]
 800464e:	e014      	b.n	800467a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004650:	78fa      	ldrb	r2, [r7, #3]
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	4613      	mov	r3, r2
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	334c      	adds	r3, #76	; 0x4c
 8004660:	2202      	movs	r2, #2
 8004662:	701a      	strb	r2, [r3, #0]
 8004664:	e009      	b.n	800467a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004666:	78fa      	ldrb	r2, [r7, #3]
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	4613      	mov	r3, r2
 800466c:	011b      	lsls	r3, r3, #4
 800466e:	1a9b      	subs	r3, r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	440b      	add	r3, r1
 8004674:	334c      	adds	r3, #76	; 0x4c
 8004676:	2202      	movs	r2, #2
 8004678:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800467a:	78fa      	ldrb	r2, [r7, #3]
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	4613      	mov	r3, r2
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	1a9b      	subs	r3, r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	440b      	add	r3, r1
 8004688:	3326      	adds	r3, #38	; 0x26
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00b      	beq.n	80046a8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004690:	78fa      	ldrb	r2, [r7, #3]
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	4613      	mov	r3, r2
 8004696:	011b      	lsls	r3, r3, #4
 8004698:	1a9b      	subs	r3, r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	3326      	adds	r3, #38	; 0x26
 80046a0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	f040 8136 	bne.w	8004914 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80046a8:	78fb      	ldrb	r3, [r7, #3]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046be:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046c6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d4:	461a      	mov	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	e11b      	b.n	8004914 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80046dc:	78fa      	ldrb	r2, [r7, #3]
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	4613      	mov	r3, r2
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	1a9b      	subs	r3, r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	334d      	adds	r3, #77	; 0x4d
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	f040 8081 	bne.w	80047f6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046f4:	78fa      	ldrb	r2, [r7, #3]
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	4613      	mov	r3, r2
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	1a9b      	subs	r3, r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	334d      	adds	r3, #77	; 0x4d
 8004704:	2202      	movs	r2, #2
 8004706:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004708:	78fa      	ldrb	r2, [r7, #3]
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	4613      	mov	r3, r2
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	1a9b      	subs	r3, r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	331b      	adds	r3, #27
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b01      	cmp	r3, #1
 800471c:	f040 80fa 	bne.w	8004914 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004720:	78fa      	ldrb	r2, [r7, #3]
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	1a9b      	subs	r3, r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	334c      	adds	r3, #76	; 0x4c
 8004730:	2202      	movs	r2, #2
 8004732:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004734:	78fb      	ldrb	r3, [r7, #3]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	4413      	add	r3, r2
 800473c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	78fa      	ldrb	r2, [r7, #3]
 8004744:	0151      	lsls	r1, r2, #5
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	440a      	add	r2, r1
 800474a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800474e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004752:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004754:	78fb      	ldrb	r3, [r7, #3]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	4413      	add	r3, r2
 800475c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	78fa      	ldrb	r2, [r7, #3]
 8004764:	0151      	lsls	r1, r2, #5
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	440a      	add	r2, r1
 800476a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800476e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004772:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004774:	78fb      	ldrb	r3, [r7, #3]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	4413      	add	r3, r2
 800477c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	78fa      	ldrb	r2, [r7, #3]
 8004784:	0151      	lsls	r1, r2, #5
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	440a      	add	r2, r1
 800478a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800478e:	f023 0320 	bic.w	r3, r3, #32
 8004792:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004794:	78fa      	ldrb	r2, [r7, #3]
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	4613      	mov	r3, r2
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	1a9b      	subs	r3, r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	3326      	adds	r3, #38	; 0x26
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00b      	beq.n	80047c2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80047aa:	78fa      	ldrb	r2, [r7, #3]
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	4613      	mov	r3, r2
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	1a9b      	subs	r3, r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	440b      	add	r3, r1
 80047b8:	3326      	adds	r3, #38	; 0x26
 80047ba:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80047bc:	2b02      	cmp	r3, #2
 80047be:	f040 80a9 	bne.w	8004914 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80047c2:	78fb      	ldrb	r3, [r7, #3]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047d8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047e0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80047e2:	78fb      	ldrb	r3, [r7, #3]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ee:	461a      	mov	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6013      	str	r3, [r2, #0]
 80047f4:	e08e      	b.n	8004914 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80047f6:	78fa      	ldrb	r2, [r7, #3]
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	4613      	mov	r3, r2
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	1a9b      	subs	r3, r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	440b      	add	r3, r1
 8004804:	334d      	adds	r3, #77	; 0x4d
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	2b04      	cmp	r3, #4
 800480a:	d143      	bne.n	8004894 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800480c:	78fa      	ldrb	r2, [r7, #3]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	334d      	adds	r3, #77	; 0x4d
 800481c:	2202      	movs	r2, #2
 800481e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004820:	78fa      	ldrb	r2, [r7, #3]
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	4613      	mov	r3, r2
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	1a9b      	subs	r3, r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	334c      	adds	r3, #76	; 0x4c
 8004830:	2202      	movs	r2, #2
 8004832:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004834:	78fa      	ldrb	r2, [r7, #3]
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	4613      	mov	r3, r2
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	1a9b      	subs	r3, r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	3326      	adds	r3, #38	; 0x26
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800484a:	78fa      	ldrb	r2, [r7, #3]
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	4613      	mov	r3, r2
 8004850:	011b      	lsls	r3, r3, #4
 8004852:	1a9b      	subs	r3, r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	440b      	add	r3, r1
 8004858:	3326      	adds	r3, #38	; 0x26
 800485a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800485c:	2b02      	cmp	r3, #2
 800485e:	d159      	bne.n	8004914 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004860:	78fb      	ldrb	r3, [r7, #3]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	4413      	add	r3, r2
 8004868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004876:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800487e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	4413      	add	r3, r2
 8004888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800488c:	461a      	mov	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	e03f      	b.n	8004914 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004894:	78fa      	ldrb	r2, [r7, #3]
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	4613      	mov	r3, r2
 800489a:	011b      	lsls	r3, r3, #4
 800489c:	1a9b      	subs	r3, r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	334d      	adds	r3, #77	; 0x4d
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d126      	bne.n	80048f8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048aa:	78fa      	ldrb	r2, [r7, #3]
 80048ac:	6879      	ldr	r1, [r7, #4]
 80048ae:	4613      	mov	r3, r2
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	1a9b      	subs	r3, r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	440b      	add	r3, r1
 80048b8:	334d      	adds	r3, #77	; 0x4d
 80048ba:	2202      	movs	r2, #2
 80048bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80048be:	78fa      	ldrb	r2, [r7, #3]
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	4613      	mov	r3, r2
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	1a9b      	subs	r3, r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	440b      	add	r3, r1
 80048cc:	3344      	adds	r3, #68	; 0x44
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	1c59      	adds	r1, r3, #1
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	4613      	mov	r3, r2
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	1a9b      	subs	r3, r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4403      	add	r3, r0
 80048de:	3344      	adds	r3, #68	; 0x44
 80048e0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80048e2:	78fa      	ldrb	r2, [r7, #3]
 80048e4:	6879      	ldr	r1, [r7, #4]
 80048e6:	4613      	mov	r3, r2
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	1a9b      	subs	r3, r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	440b      	add	r3, r1
 80048f0:	334c      	adds	r3, #76	; 0x4c
 80048f2:	2204      	movs	r2, #4
 80048f4:	701a      	strb	r2, [r3, #0]
 80048f6:	e00d      	b.n	8004914 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80048f8:	78fa      	ldrb	r2, [r7, #3]
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	4613      	mov	r3, r2
 80048fe:	011b      	lsls	r3, r3, #4
 8004900:	1a9b      	subs	r3, r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	440b      	add	r3, r1
 8004906:	334d      	adds	r3, #77	; 0x4d
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	2b02      	cmp	r3, #2
 800490c:	f000 8100 	beq.w	8004b10 <HCD_HC_IN_IRQHandler+0xcca>
 8004910:	e000      	b.n	8004914 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004912:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004914:	78fa      	ldrb	r2, [r7, #3]
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	4613      	mov	r3, r2
 800491a:	011b      	lsls	r3, r3, #4
 800491c:	1a9b      	subs	r3, r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	440b      	add	r3, r1
 8004922:	334c      	adds	r3, #76	; 0x4c
 8004924:	781a      	ldrb	r2, [r3, #0]
 8004926:	78fb      	ldrb	r3, [r7, #3]
 8004928:	4619      	mov	r1, r3
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f007 fe54 	bl	800c5d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004930:	e0ef      	b.n	8004b12 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	78fa      	ldrb	r2, [r7, #3]
 8004938:	4611      	mov	r1, r2
 800493a:	4618      	mov	r0, r3
 800493c:	f004 fd3f 	bl	80093be <USB_ReadChInterrupts>
 8004940:	4603      	mov	r3, r0
 8004942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004946:	2b40      	cmp	r3, #64	; 0x40
 8004948:	d12f      	bne.n	80049aa <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800494a:	78fb      	ldrb	r3, [r7, #3]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	4413      	add	r3, r2
 8004952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004956:	461a      	mov	r2, r3
 8004958:	2340      	movs	r3, #64	; 0x40
 800495a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800495c:	78fa      	ldrb	r2, [r7, #3]
 800495e:	6879      	ldr	r1, [r7, #4]
 8004960:	4613      	mov	r3, r2
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	1a9b      	subs	r3, r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	440b      	add	r3, r1
 800496a:	334d      	adds	r3, #77	; 0x4d
 800496c:	2205      	movs	r2, #5
 800496e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004970:	78fa      	ldrb	r2, [r7, #3]
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	4613      	mov	r3, r2
 8004976:	011b      	lsls	r3, r3, #4
 8004978:	1a9b      	subs	r3, r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	440b      	add	r3, r1
 800497e:	331a      	adds	r3, #26
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d109      	bne.n	800499a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004986:	78fa      	ldrb	r2, [r7, #3]
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	4613      	mov	r3, r2
 800498c:	011b      	lsls	r3, r3, #4
 800498e:	1a9b      	subs	r3, r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	440b      	add	r3, r1
 8004994:	3344      	adds	r3, #68	; 0x44
 8004996:	2200      	movs	r2, #0
 8004998:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	78fa      	ldrb	r2, [r7, #3]
 80049a0:	4611      	mov	r1, r2
 80049a2:	4618      	mov	r0, r3
 80049a4:	f005 faaf 	bl	8009f06 <USB_HC_Halt>
 80049a8:	e0b3      	b.n	8004b12 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	78fa      	ldrb	r2, [r7, #3]
 80049b0:	4611      	mov	r1, r2
 80049b2:	4618      	mov	r0, r3
 80049b4:	f004 fd03 	bl	80093be <USB_ReadChInterrupts>
 80049b8:	4603      	mov	r3, r0
 80049ba:	f003 0310 	and.w	r3, r3, #16
 80049be:	2b10      	cmp	r3, #16
 80049c0:	f040 80a7 	bne.w	8004b12 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80049c4:	78fa      	ldrb	r2, [r7, #3]
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	4613      	mov	r3, r2
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	1a9b      	subs	r3, r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	3326      	adds	r3, #38	; 0x26
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	d11b      	bne.n	8004a12 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80049da:	78fa      	ldrb	r2, [r7, #3]
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	440b      	add	r3, r1
 80049e8:	3344      	adds	r3, #68	; 0x44
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80049ee:	78fa      	ldrb	r2, [r7, #3]
 80049f0:	6879      	ldr	r1, [r7, #4]
 80049f2:	4613      	mov	r3, r2
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	1a9b      	subs	r3, r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	440b      	add	r3, r1
 80049fc:	334d      	adds	r3, #77	; 0x4d
 80049fe:	2204      	movs	r2, #4
 8004a00:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	78fa      	ldrb	r2, [r7, #3]
 8004a08:	4611      	mov	r1, r2
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f005 fa7b 	bl	8009f06 <USB_HC_Halt>
 8004a10:	e03f      	b.n	8004a92 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a12:	78fa      	ldrb	r2, [r7, #3]
 8004a14:	6879      	ldr	r1, [r7, #4]
 8004a16:	4613      	mov	r3, r2
 8004a18:	011b      	lsls	r3, r3, #4
 8004a1a:	1a9b      	subs	r3, r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	440b      	add	r3, r1
 8004a20:	3326      	adds	r3, #38	; 0x26
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004a28:	78fa      	ldrb	r2, [r7, #3]
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	1a9b      	subs	r3, r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	3326      	adds	r3, #38	; 0x26
 8004a38:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d129      	bne.n	8004a92 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004a3e:	78fa      	ldrb	r2, [r7, #3]
 8004a40:	6879      	ldr	r1, [r7, #4]
 8004a42:	4613      	mov	r3, r2
 8004a44:	011b      	lsls	r3, r3, #4
 8004a46:	1a9b      	subs	r3, r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	440b      	add	r3, r1
 8004a4c:	3344      	adds	r3, #68	; 0x44
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	799b      	ldrb	r3, [r3, #6]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <HCD_HC_IN_IRQHandler+0xc2a>
 8004a5a:	78fa      	ldrb	r2, [r7, #3]
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	1a9b      	subs	r3, r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	331b      	adds	r3, #27
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d110      	bne.n	8004a92 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004a70:	78fa      	ldrb	r2, [r7, #3]
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	4613      	mov	r3, r2
 8004a76:	011b      	lsls	r3, r3, #4
 8004a78:	1a9b      	subs	r3, r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	334d      	adds	r3, #77	; 0x4d
 8004a80:	2204      	movs	r2, #4
 8004a82:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	78fa      	ldrb	r2, [r7, #3]
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f005 fa3a 	bl	8009f06 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004a92:	78fa      	ldrb	r2, [r7, #3]
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	331b      	adds	r3, #27
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d129      	bne.n	8004afc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004aa8:	78fa      	ldrb	r2, [r7, #3]
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	4613      	mov	r3, r2
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	1a9b      	subs	r3, r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	331b      	adds	r3, #27
 8004ab8:	2200      	movs	r2, #0
 8004aba:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004abc:	78fb      	ldrb	r3, [r7, #3]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	78fa      	ldrb	r2, [r7, #3]
 8004acc:	0151      	lsls	r1, r2, #5
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	440a      	add	r2, r1
 8004ad2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ada:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004adc:	78fb      	ldrb	r3, [r7, #3]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	78fa      	ldrb	r2, [r7, #3]
 8004aec:	0151      	lsls	r1, r2, #5
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	440a      	add	r2, r1
 8004af2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004af6:	f043 0320 	orr.w	r3, r3, #32
 8004afa:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004afc:	78fb      	ldrb	r3, [r7, #3]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b08:	461a      	mov	r2, r3
 8004b0a:	2310      	movs	r3, #16
 8004b0c:	6093      	str	r3, [r2, #8]
 8004b0e:	e000      	b.n	8004b12 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004b10:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	78fa      	ldrb	r2, [r7, #3]
 8004b34:	4611      	mov	r1, r2
 8004b36:	4618      	mov	r0, r3
 8004b38:	f004 fc41 	bl	80093be <USB_ReadChInterrupts>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	f003 0304 	and.w	r3, r3, #4
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d11b      	bne.n	8004b7e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004b46:	78fb      	ldrb	r3, [r7, #3]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b52:	461a      	mov	r2, r3
 8004b54:	2304      	movs	r3, #4
 8004b56:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004b58:	78fa      	ldrb	r2, [r7, #3]
 8004b5a:	6879      	ldr	r1, [r7, #4]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	011b      	lsls	r3, r3, #4
 8004b60:	1a9b      	subs	r3, r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	440b      	add	r3, r1
 8004b66:	334d      	adds	r3, #77	; 0x4d
 8004b68:	2207      	movs	r2, #7
 8004b6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	78fa      	ldrb	r2, [r7, #3]
 8004b72:	4611      	mov	r1, r2
 8004b74:	4618      	mov	r0, r3
 8004b76:	f005 f9c6 	bl	8009f06 <USB_HC_Halt>
 8004b7a:	f000 bc6f 	b.w	800545c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	78fa      	ldrb	r2, [r7, #3]
 8004b84:	4611      	mov	r1, r2
 8004b86:	4618      	mov	r0, r3
 8004b88:	f004 fc19 	bl	80093be <USB_ReadChInterrupts>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	f003 0320 	and.w	r3, r3, #32
 8004b92:	2b20      	cmp	r3, #32
 8004b94:	f040 8082 	bne.w	8004c9c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004b98:	78fb      	ldrb	r3, [r7, #3]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	2320      	movs	r3, #32
 8004ba8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004baa:	78fa      	ldrb	r2, [r7, #3]
 8004bac:	6879      	ldr	r1, [r7, #4]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	1a9b      	subs	r3, r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	440b      	add	r3, r1
 8004bb8:	3319      	adds	r3, #25
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d124      	bne.n	8004c0a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004bc0:	78fa      	ldrb	r2, [r7, #3]
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	1a9b      	subs	r3, r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	3319      	adds	r3, #25
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004bd4:	78fa      	ldrb	r2, [r7, #3]
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	1a9b      	subs	r3, r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	440b      	add	r3, r1
 8004be2:	334c      	adds	r3, #76	; 0x4c
 8004be4:	2202      	movs	r2, #2
 8004be6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004be8:	78fa      	ldrb	r2, [r7, #3]
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	4613      	mov	r3, r2
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	334d      	adds	r3, #77	; 0x4d
 8004bf8:	2203      	movs	r2, #3
 8004bfa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	78fa      	ldrb	r2, [r7, #3]
 8004c02:	4611      	mov	r1, r2
 8004c04:	4618      	mov	r0, r3
 8004c06:	f005 f97e 	bl	8009f06 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004c0a:	78fa      	ldrb	r2, [r7, #3]
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	1a9b      	subs	r3, r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	440b      	add	r3, r1
 8004c18:	331a      	adds	r3, #26
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	f040 841d 	bne.w	800545c <HCD_HC_OUT_IRQHandler+0x944>
 8004c22:	78fa      	ldrb	r2, [r7, #3]
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	4613      	mov	r3, r2
 8004c28:	011b      	lsls	r3, r3, #4
 8004c2a:	1a9b      	subs	r3, r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	440b      	add	r3, r1
 8004c30:	331b      	adds	r3, #27
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f040 8411 	bne.w	800545c <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004c3a:	78fa      	ldrb	r2, [r7, #3]
 8004c3c:	6879      	ldr	r1, [r7, #4]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	011b      	lsls	r3, r3, #4
 8004c42:	1a9b      	subs	r3, r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	440b      	add	r3, r1
 8004c48:	3326      	adds	r3, #38	; 0x26
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d009      	beq.n	8004c64 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004c50:	78fa      	ldrb	r2, [r7, #3]
 8004c52:	6879      	ldr	r1, [r7, #4]
 8004c54:	4613      	mov	r3, r2
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	1a9b      	subs	r3, r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	331b      	adds	r3, #27
 8004c60:	2201      	movs	r2, #1
 8004c62:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004c64:	78fa      	ldrb	r2, [r7, #3]
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	1a9b      	subs	r3, r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	334d      	adds	r3, #77	; 0x4d
 8004c74:	2203      	movs	r2, #3
 8004c76:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	78fa      	ldrb	r2, [r7, #3]
 8004c7e:	4611      	mov	r1, r2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f005 f940 	bl	8009f06 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004c86:	78fa      	ldrb	r2, [r7, #3]
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	1a9b      	subs	r3, r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	440b      	add	r3, r1
 8004c94:	3344      	adds	r3, #68	; 0x44
 8004c96:	2200      	movs	r2, #0
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	e3df      	b.n	800545c <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	78fa      	ldrb	r2, [r7, #3]
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f004 fb8a 	bl	80093be <USB_ReadChInterrupts>
 8004caa:	4603      	mov	r3, r0
 8004cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cb4:	d111      	bne.n	8004cda <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004cb6:	78fb      	ldrb	r3, [r7, #3]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cc8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	78fa      	ldrb	r2, [r7, #3]
 8004cd0:	4611      	mov	r1, r2
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f005 f917 	bl	8009f06 <USB_HC_Halt>
 8004cd8:	e3c0      	b.n	800545c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	78fa      	ldrb	r2, [r7, #3]
 8004ce0:	4611      	mov	r1, r2
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f004 fb6b 	bl	80093be <USB_ReadChInterrupts>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d168      	bne.n	8004dc4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004cf2:	78fa      	ldrb	r2, [r7, #3]
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	1a9b      	subs	r3, r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	440b      	add	r3, r1
 8004d00:	3344      	adds	r3, #68	; 0x44
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	78fa      	ldrb	r2, [r7, #3]
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f004 fb55 	bl	80093be <USB_ReadChInterrupts>
 8004d14:	4603      	mov	r3, r0
 8004d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1a:	2b40      	cmp	r3, #64	; 0x40
 8004d1c:	d112      	bne.n	8004d44 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004d1e:	78fa      	ldrb	r2, [r7, #3]
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	3319      	adds	r3, #25
 8004d2e:	2201      	movs	r2, #1
 8004d30:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004d32:	78fb      	ldrb	r3, [r7, #3]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d3e:	461a      	mov	r2, r3
 8004d40:	2340      	movs	r3, #64	; 0x40
 8004d42:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004d44:	78fa      	ldrb	r2, [r7, #3]
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	011b      	lsls	r3, r3, #4
 8004d4c:	1a9b      	subs	r3, r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	331b      	adds	r3, #27
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d019      	beq.n	8004d8e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004d5a:	78fa      	ldrb	r2, [r7, #3]
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	1a9b      	subs	r3, r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	440b      	add	r3, r1
 8004d68:	331b      	adds	r3, #27
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004d6e:	78fb      	ldrb	r3, [r7, #3]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	78fa      	ldrb	r2, [r7, #3]
 8004d7e:	0151      	lsls	r1, r2, #5
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	440a      	add	r2, r1
 8004d84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d8c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004d8e:	78fb      	ldrb	r3, [r7, #3]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004da0:	78fa      	ldrb	r2, [r7, #3]
 8004da2:	6879      	ldr	r1, [r7, #4]
 8004da4:	4613      	mov	r3, r2
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	1a9b      	subs	r3, r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	334d      	adds	r3, #77	; 0x4d
 8004db0:	2201      	movs	r2, #1
 8004db2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	78fa      	ldrb	r2, [r7, #3]
 8004dba:	4611      	mov	r1, r2
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f005 f8a2 	bl	8009f06 <USB_HC_Halt>
 8004dc2:	e34b      	b.n	800545c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	78fa      	ldrb	r2, [r7, #3]
 8004dca:	4611      	mov	r1, r2
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f004 faf6 	bl	80093be <USB_ReadChInterrupts>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd8:	2b40      	cmp	r3, #64	; 0x40
 8004dda:	d139      	bne.n	8004e50 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004ddc:	78fa      	ldrb	r2, [r7, #3]
 8004dde:	6879      	ldr	r1, [r7, #4]
 8004de0:	4613      	mov	r3, r2
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	1a9b      	subs	r3, r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	440b      	add	r3, r1
 8004dea:	334d      	adds	r3, #77	; 0x4d
 8004dec:	2205      	movs	r2, #5
 8004dee:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004df0:	78fa      	ldrb	r2, [r7, #3]
 8004df2:	6879      	ldr	r1, [r7, #4]
 8004df4:	4613      	mov	r3, r2
 8004df6:	011b      	lsls	r3, r3, #4
 8004df8:	1a9b      	subs	r3, r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	440b      	add	r3, r1
 8004dfe:	331a      	adds	r3, #26
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d109      	bne.n	8004e1a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004e06:	78fa      	ldrb	r2, [r7, #3]
 8004e08:	6879      	ldr	r1, [r7, #4]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	011b      	lsls	r3, r3, #4
 8004e0e:	1a9b      	subs	r3, r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	440b      	add	r3, r1
 8004e14:	3319      	adds	r3, #25
 8004e16:	2201      	movs	r2, #1
 8004e18:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004e1a:	78fa      	ldrb	r2, [r7, #3]
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	1a9b      	subs	r3, r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	440b      	add	r3, r1
 8004e28:	3344      	adds	r3, #68	; 0x44
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	78fa      	ldrb	r2, [r7, #3]
 8004e34:	4611      	mov	r1, r2
 8004e36:	4618      	mov	r0, r3
 8004e38:	f005 f865 	bl	8009f06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004e3c:	78fb      	ldrb	r3, [r7, #3]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e48:	461a      	mov	r2, r3
 8004e4a:	2340      	movs	r3, #64	; 0x40
 8004e4c:	6093      	str	r3, [r2, #8]
 8004e4e:	e305      	b.n	800545c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	78fa      	ldrb	r2, [r7, #3]
 8004e56:	4611      	mov	r1, r2
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f004 fab0 	bl	80093be <USB_ReadChInterrupts>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	f003 0308 	and.w	r3, r3, #8
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d11a      	bne.n	8004e9e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004e68:	78fb      	ldrb	r3, [r7, #3]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e74:	461a      	mov	r2, r3
 8004e76:	2308      	movs	r3, #8
 8004e78:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004e7a:	78fa      	ldrb	r2, [r7, #3]
 8004e7c:	6879      	ldr	r1, [r7, #4]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	011b      	lsls	r3, r3, #4
 8004e82:	1a9b      	subs	r3, r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	440b      	add	r3, r1
 8004e88:	334d      	adds	r3, #77	; 0x4d
 8004e8a:	2206      	movs	r2, #6
 8004e8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	78fa      	ldrb	r2, [r7, #3]
 8004e94:	4611      	mov	r1, r2
 8004e96:	4618      	mov	r0, r3
 8004e98:	f005 f835 	bl	8009f06 <USB_HC_Halt>
 8004e9c:	e2de      	b.n	800545c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	78fa      	ldrb	r2, [r7, #3]
 8004ea4:	4611      	mov	r1, r2
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f004 fa89 	bl	80093be <USB_ReadChInterrupts>
 8004eac:	4603      	mov	r3, r0
 8004eae:	f003 0310 	and.w	r3, r3, #16
 8004eb2:	2b10      	cmp	r3, #16
 8004eb4:	d144      	bne.n	8004f40 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004eb6:	78fa      	ldrb	r2, [r7, #3]
 8004eb8:	6879      	ldr	r1, [r7, #4]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	1a9b      	subs	r3, r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	440b      	add	r3, r1
 8004ec4:	3344      	adds	r3, #68	; 0x44
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004eca:	78fa      	ldrb	r2, [r7, #3]
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	334d      	adds	r3, #77	; 0x4d
 8004eda:	2204      	movs	r2, #4
 8004edc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004ede:	78fa      	ldrb	r2, [r7, #3]
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	440b      	add	r3, r1
 8004eec:	3319      	adds	r3, #25
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d114      	bne.n	8004f1e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004ef4:	78fa      	ldrb	r2, [r7, #3]
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	1a9b      	subs	r3, r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	3318      	adds	r3, #24
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d109      	bne.n	8004f1e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004f0a:	78fa      	ldrb	r2, [r7, #3]
 8004f0c:	6879      	ldr	r1, [r7, #4]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	1a9b      	subs	r3, r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	440b      	add	r3, r1
 8004f18:	3319      	adds	r3, #25
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	78fa      	ldrb	r2, [r7, #3]
 8004f24:	4611      	mov	r1, r2
 8004f26:	4618      	mov	r0, r3
 8004f28:	f004 ffed 	bl	8009f06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004f2c:	78fb      	ldrb	r3, [r7, #3]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f38:	461a      	mov	r2, r3
 8004f3a:	2310      	movs	r3, #16
 8004f3c:	6093      	str	r3, [r2, #8]
 8004f3e:	e28d      	b.n	800545c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	78fa      	ldrb	r2, [r7, #3]
 8004f46:	4611      	mov	r1, r2
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f004 fa38 	bl	80093be <USB_ReadChInterrupts>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f54:	2b80      	cmp	r3, #128	; 0x80
 8004f56:	d169      	bne.n	800502c <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	799b      	ldrb	r3, [r3, #6]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d111      	bne.n	8004f84 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004f60:	78fa      	ldrb	r2, [r7, #3]
 8004f62:	6879      	ldr	r1, [r7, #4]
 8004f64:	4613      	mov	r3, r2
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	1a9b      	subs	r3, r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	440b      	add	r3, r1
 8004f6e:	334d      	adds	r3, #77	; 0x4d
 8004f70:	2207      	movs	r2, #7
 8004f72:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	78fa      	ldrb	r2, [r7, #3]
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f004 ffc2 	bl	8009f06 <USB_HC_Halt>
 8004f82:	e049      	b.n	8005018 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004f84:	78fa      	ldrb	r2, [r7, #3]
 8004f86:	6879      	ldr	r1, [r7, #4]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	011b      	lsls	r3, r3, #4
 8004f8c:	1a9b      	subs	r3, r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	440b      	add	r3, r1
 8004f92:	3344      	adds	r3, #68	; 0x44
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	1c59      	adds	r1, r3, #1
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	011b      	lsls	r3, r3, #4
 8004f9e:	1a9b      	subs	r3, r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4403      	add	r3, r0
 8004fa4:	3344      	adds	r3, #68	; 0x44
 8004fa6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004fa8:	78fa      	ldrb	r2, [r7, #3]
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	4613      	mov	r3, r2
 8004fae:	011b      	lsls	r3, r3, #4
 8004fb0:	1a9b      	subs	r3, r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	3344      	adds	r3, #68	; 0x44
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d922      	bls.n	8005004 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004fbe:	78fa      	ldrb	r2, [r7, #3]
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	1a9b      	subs	r3, r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	440b      	add	r3, r1
 8004fcc:	3344      	adds	r3, #68	; 0x44
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004fd2:	78fa      	ldrb	r2, [r7, #3]
 8004fd4:	6879      	ldr	r1, [r7, #4]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	011b      	lsls	r3, r3, #4
 8004fda:	1a9b      	subs	r3, r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	440b      	add	r3, r1
 8004fe0:	334c      	adds	r3, #76	; 0x4c
 8004fe2:	2204      	movs	r2, #4
 8004fe4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004fe6:	78fa      	ldrb	r2, [r7, #3]
 8004fe8:	6879      	ldr	r1, [r7, #4]
 8004fea:	4613      	mov	r3, r2
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	1a9b      	subs	r3, r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	334c      	adds	r3, #76	; 0x4c
 8004ff6:	781a      	ldrb	r2, [r3, #0]
 8004ff8:	78fb      	ldrb	r3, [r7, #3]
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f007 faeb 	bl	800c5d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005002:	e009      	b.n	8005018 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005004:	78fa      	ldrb	r2, [r7, #3]
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	4613      	mov	r3, r2
 800500a:	011b      	lsls	r3, r3, #4
 800500c:	1a9b      	subs	r3, r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	440b      	add	r3, r1
 8005012:	334c      	adds	r3, #76	; 0x4c
 8005014:	2202      	movs	r2, #2
 8005016:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005018:	78fb      	ldrb	r3, [r7, #3]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	4413      	add	r3, r2
 8005020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005024:	461a      	mov	r2, r3
 8005026:	2380      	movs	r3, #128	; 0x80
 8005028:	6093      	str	r3, [r2, #8]
 800502a:	e217      	b.n	800545c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	78fa      	ldrb	r2, [r7, #3]
 8005032:	4611      	mov	r1, r2
 8005034:	4618      	mov	r0, r3
 8005036:	f004 f9c2 	bl	80093be <USB_ReadChInterrupts>
 800503a:	4603      	mov	r3, r0
 800503c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005044:	d11b      	bne.n	800507e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005046:	78fa      	ldrb	r2, [r7, #3]
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	4613      	mov	r3, r2
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	1a9b      	subs	r3, r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	440b      	add	r3, r1
 8005054:	334d      	adds	r3, #77	; 0x4d
 8005056:	2209      	movs	r2, #9
 8005058:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	78fa      	ldrb	r2, [r7, #3]
 8005060:	4611      	mov	r1, r2
 8005062:	4618      	mov	r0, r3
 8005064:	f004 ff4f 	bl	8009f06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005068:	78fb      	ldrb	r3, [r7, #3]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	4413      	add	r3, r2
 8005070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005074:	461a      	mov	r2, r3
 8005076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800507a:	6093      	str	r3, [r2, #8]
 800507c:	e1ee      	b.n	800545c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	78fa      	ldrb	r2, [r7, #3]
 8005084:	4611      	mov	r1, r2
 8005086:	4618      	mov	r0, r3
 8005088:	f004 f999 	bl	80093be <USB_ReadChInterrupts>
 800508c:	4603      	mov	r3, r0
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b02      	cmp	r3, #2
 8005094:	f040 81df 	bne.w	8005456 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005098:	78fb      	ldrb	r3, [r7, #3]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a4:	461a      	mov	r2, r3
 80050a6:	2302      	movs	r3, #2
 80050a8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80050aa:	78fa      	ldrb	r2, [r7, #3]
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	1a9b      	subs	r3, r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	440b      	add	r3, r1
 80050b8:	334d      	adds	r3, #77	; 0x4d
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	f040 8093 	bne.w	80051e8 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80050c2:	78fa      	ldrb	r2, [r7, #3]
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	4613      	mov	r3, r2
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	1a9b      	subs	r3, r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	440b      	add	r3, r1
 80050d0:	334d      	adds	r3, #77	; 0x4d
 80050d2:	2202      	movs	r2, #2
 80050d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80050d6:	78fa      	ldrb	r2, [r7, #3]
 80050d8:	6879      	ldr	r1, [r7, #4]
 80050da:	4613      	mov	r3, r2
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	1a9b      	subs	r3, r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	440b      	add	r3, r1
 80050e4:	334c      	adds	r3, #76	; 0x4c
 80050e6:	2201      	movs	r2, #1
 80050e8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80050ea:	78fa      	ldrb	r2, [r7, #3]
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	4613      	mov	r3, r2
 80050f0:	011b      	lsls	r3, r3, #4
 80050f2:	1a9b      	subs	r3, r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	440b      	add	r3, r1
 80050f8:	3326      	adds	r3, #38	; 0x26
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d00b      	beq.n	8005118 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005100:	78fa      	ldrb	r2, [r7, #3]
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	4613      	mov	r3, r2
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	1a9b      	subs	r3, r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	440b      	add	r3, r1
 800510e:	3326      	adds	r3, #38	; 0x26
 8005110:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005112:	2b03      	cmp	r3, #3
 8005114:	f040 8190 	bne.w	8005438 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	799b      	ldrb	r3, [r3, #6]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d115      	bne.n	800514c <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005120:	78fa      	ldrb	r2, [r7, #3]
 8005122:	6879      	ldr	r1, [r7, #4]
 8005124:	4613      	mov	r3, r2
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	1a9b      	subs	r3, r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	440b      	add	r3, r1
 800512e:	333d      	adds	r3, #61	; 0x3d
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	78fa      	ldrb	r2, [r7, #3]
 8005134:	f083 0301 	eor.w	r3, r3, #1
 8005138:	b2d8      	uxtb	r0, r3
 800513a:	6879      	ldr	r1, [r7, #4]
 800513c:	4613      	mov	r3, r2
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	1a9b      	subs	r3, r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	440b      	add	r3, r1
 8005146:	333d      	adds	r3, #61	; 0x3d
 8005148:	4602      	mov	r2, r0
 800514a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	799b      	ldrb	r3, [r3, #6]
 8005150:	2b01      	cmp	r3, #1
 8005152:	f040 8171 	bne.w	8005438 <HCD_HC_OUT_IRQHandler+0x920>
 8005156:	78fa      	ldrb	r2, [r7, #3]
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	4613      	mov	r3, r2
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	1a9b      	subs	r3, r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	440b      	add	r3, r1
 8005164:	3334      	adds	r3, #52	; 0x34
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 8165 	beq.w	8005438 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800516e:	78fa      	ldrb	r2, [r7, #3]
 8005170:	6879      	ldr	r1, [r7, #4]
 8005172:	4613      	mov	r3, r2
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	1a9b      	subs	r3, r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	440b      	add	r3, r1
 800517c:	3334      	adds	r3, #52	; 0x34
 800517e:	6819      	ldr	r1, [r3, #0]
 8005180:	78fa      	ldrb	r2, [r7, #3]
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	4613      	mov	r3, r2
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	1a9b      	subs	r3, r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4403      	add	r3, r0
 800518e:	3328      	adds	r3, #40	; 0x28
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	440b      	add	r3, r1
 8005194:	1e59      	subs	r1, r3, #1
 8005196:	78fa      	ldrb	r2, [r7, #3]
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	4613      	mov	r3, r2
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	1a9b      	subs	r3, r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4403      	add	r3, r0
 80051a4:	3328      	adds	r3, #40	; 0x28
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80051ac:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 813f 	beq.w	8005438 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80051ba:	78fa      	ldrb	r2, [r7, #3]
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	4613      	mov	r3, r2
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	1a9b      	subs	r3, r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	440b      	add	r3, r1
 80051c8:	333d      	adds	r3, #61	; 0x3d
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	78fa      	ldrb	r2, [r7, #3]
 80051ce:	f083 0301 	eor.w	r3, r3, #1
 80051d2:	b2d8      	uxtb	r0, r3
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	4613      	mov	r3, r2
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	1a9b      	subs	r3, r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	440b      	add	r3, r1
 80051e0:	333d      	adds	r3, #61	; 0x3d
 80051e2:	4602      	mov	r2, r0
 80051e4:	701a      	strb	r2, [r3, #0]
 80051e6:	e127      	b.n	8005438 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80051e8:	78fa      	ldrb	r2, [r7, #3]
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	4613      	mov	r3, r2
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	1a9b      	subs	r3, r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	440b      	add	r3, r1
 80051f6:	334d      	adds	r3, #77	; 0x4d
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b03      	cmp	r3, #3
 80051fc:	d120      	bne.n	8005240 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80051fe:	78fa      	ldrb	r2, [r7, #3]
 8005200:	6879      	ldr	r1, [r7, #4]
 8005202:	4613      	mov	r3, r2
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	1a9b      	subs	r3, r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	440b      	add	r3, r1
 800520c:	334d      	adds	r3, #77	; 0x4d
 800520e:	2202      	movs	r2, #2
 8005210:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005212:	78fa      	ldrb	r2, [r7, #3]
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	4613      	mov	r3, r2
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	1a9b      	subs	r3, r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	440b      	add	r3, r1
 8005220:	331b      	adds	r3, #27
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	2b01      	cmp	r3, #1
 8005226:	f040 8107 	bne.w	8005438 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800522a:	78fa      	ldrb	r2, [r7, #3]
 800522c:	6879      	ldr	r1, [r7, #4]
 800522e:	4613      	mov	r3, r2
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	1a9b      	subs	r3, r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	440b      	add	r3, r1
 8005238:	334c      	adds	r3, #76	; 0x4c
 800523a:	2202      	movs	r2, #2
 800523c:	701a      	strb	r2, [r3, #0]
 800523e:	e0fb      	b.n	8005438 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005240:	78fa      	ldrb	r2, [r7, #3]
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	4613      	mov	r3, r2
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	1a9b      	subs	r3, r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	440b      	add	r3, r1
 800524e:	334d      	adds	r3, #77	; 0x4d
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	2b04      	cmp	r3, #4
 8005254:	d13a      	bne.n	80052cc <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005256:	78fa      	ldrb	r2, [r7, #3]
 8005258:	6879      	ldr	r1, [r7, #4]
 800525a:	4613      	mov	r3, r2
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	1a9b      	subs	r3, r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	440b      	add	r3, r1
 8005264:	334d      	adds	r3, #77	; 0x4d
 8005266:	2202      	movs	r2, #2
 8005268:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800526a:	78fa      	ldrb	r2, [r7, #3]
 800526c:	6879      	ldr	r1, [r7, #4]
 800526e:	4613      	mov	r3, r2
 8005270:	011b      	lsls	r3, r3, #4
 8005272:	1a9b      	subs	r3, r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	440b      	add	r3, r1
 8005278:	334c      	adds	r3, #76	; 0x4c
 800527a:	2202      	movs	r2, #2
 800527c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800527e:	78fa      	ldrb	r2, [r7, #3]
 8005280:	6879      	ldr	r1, [r7, #4]
 8005282:	4613      	mov	r3, r2
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	1a9b      	subs	r3, r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	440b      	add	r3, r1
 800528c:	331b      	adds	r3, #27
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	2b01      	cmp	r3, #1
 8005292:	f040 80d1 	bne.w	8005438 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005296:	78fa      	ldrb	r2, [r7, #3]
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	4613      	mov	r3, r2
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	1a9b      	subs	r3, r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	440b      	add	r3, r1
 80052a4:	331b      	adds	r3, #27
 80052a6:	2200      	movs	r2, #0
 80052a8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80052aa:	78fb      	ldrb	r3, [r7, #3]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	78fa      	ldrb	r2, [r7, #3]
 80052ba:	0151      	lsls	r1, r2, #5
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	440a      	add	r2, r1
 80052c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052c8:	6053      	str	r3, [r2, #4]
 80052ca:	e0b5      	b.n	8005438 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80052cc:	78fa      	ldrb	r2, [r7, #3]
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	4613      	mov	r3, r2
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	1a9b      	subs	r3, r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	334d      	adds	r3, #77	; 0x4d
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	2b05      	cmp	r3, #5
 80052e0:	d114      	bne.n	800530c <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80052e2:	78fa      	ldrb	r2, [r7, #3]
 80052e4:	6879      	ldr	r1, [r7, #4]
 80052e6:	4613      	mov	r3, r2
 80052e8:	011b      	lsls	r3, r3, #4
 80052ea:	1a9b      	subs	r3, r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	440b      	add	r3, r1
 80052f0:	334d      	adds	r3, #77	; 0x4d
 80052f2:	2202      	movs	r2, #2
 80052f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80052f6:	78fa      	ldrb	r2, [r7, #3]
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	1a9b      	subs	r3, r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	440b      	add	r3, r1
 8005304:	334c      	adds	r3, #76	; 0x4c
 8005306:	2202      	movs	r2, #2
 8005308:	701a      	strb	r2, [r3, #0]
 800530a:	e095      	b.n	8005438 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800530c:	78fa      	ldrb	r2, [r7, #3]
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	4613      	mov	r3, r2
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	1a9b      	subs	r3, r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	440b      	add	r3, r1
 800531a:	334d      	adds	r3, #77	; 0x4d
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	2b06      	cmp	r3, #6
 8005320:	d114      	bne.n	800534c <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005322:	78fa      	ldrb	r2, [r7, #3]
 8005324:	6879      	ldr	r1, [r7, #4]
 8005326:	4613      	mov	r3, r2
 8005328:	011b      	lsls	r3, r3, #4
 800532a:	1a9b      	subs	r3, r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	440b      	add	r3, r1
 8005330:	334d      	adds	r3, #77	; 0x4d
 8005332:	2202      	movs	r2, #2
 8005334:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005336:	78fa      	ldrb	r2, [r7, #3]
 8005338:	6879      	ldr	r1, [r7, #4]
 800533a:	4613      	mov	r3, r2
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	1a9b      	subs	r3, r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	440b      	add	r3, r1
 8005344:	334c      	adds	r3, #76	; 0x4c
 8005346:	2205      	movs	r2, #5
 8005348:	701a      	strb	r2, [r3, #0]
 800534a:	e075      	b.n	8005438 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800534c:	78fa      	ldrb	r2, [r7, #3]
 800534e:	6879      	ldr	r1, [r7, #4]
 8005350:	4613      	mov	r3, r2
 8005352:	011b      	lsls	r3, r3, #4
 8005354:	1a9b      	subs	r3, r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	334d      	adds	r3, #77	; 0x4d
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	2b07      	cmp	r3, #7
 8005360:	d00a      	beq.n	8005378 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005362:	78fa      	ldrb	r2, [r7, #3]
 8005364:	6879      	ldr	r1, [r7, #4]
 8005366:	4613      	mov	r3, r2
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	1a9b      	subs	r3, r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	440b      	add	r3, r1
 8005370:	334d      	adds	r3, #77	; 0x4d
 8005372:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005374:	2b09      	cmp	r3, #9
 8005376:	d170      	bne.n	800545a <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005378:	78fa      	ldrb	r2, [r7, #3]
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	4613      	mov	r3, r2
 800537e:	011b      	lsls	r3, r3, #4
 8005380:	1a9b      	subs	r3, r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	440b      	add	r3, r1
 8005386:	334d      	adds	r3, #77	; 0x4d
 8005388:	2202      	movs	r2, #2
 800538a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800538c:	78fa      	ldrb	r2, [r7, #3]
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	4613      	mov	r3, r2
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	1a9b      	subs	r3, r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	440b      	add	r3, r1
 800539a:	3344      	adds	r3, #68	; 0x44
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	1c59      	adds	r1, r3, #1
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	4613      	mov	r3, r2
 80053a4:	011b      	lsls	r3, r3, #4
 80053a6:	1a9b      	subs	r3, r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4403      	add	r3, r0
 80053ac:	3344      	adds	r3, #68	; 0x44
 80053ae:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80053b0:	78fa      	ldrb	r2, [r7, #3]
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	4613      	mov	r3, r2
 80053b6:	011b      	lsls	r3, r3, #4
 80053b8:	1a9b      	subs	r3, r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	440b      	add	r3, r1
 80053be:	3344      	adds	r3, #68	; 0x44
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d914      	bls.n	80053f0 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80053c6:	78fa      	ldrb	r2, [r7, #3]
 80053c8:	6879      	ldr	r1, [r7, #4]
 80053ca:	4613      	mov	r3, r2
 80053cc:	011b      	lsls	r3, r3, #4
 80053ce:	1a9b      	subs	r3, r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	440b      	add	r3, r1
 80053d4:	3344      	adds	r3, #68	; 0x44
 80053d6:	2200      	movs	r2, #0
 80053d8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80053da:	78fa      	ldrb	r2, [r7, #3]
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	4613      	mov	r3, r2
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	1a9b      	subs	r3, r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	440b      	add	r3, r1
 80053e8:	334c      	adds	r3, #76	; 0x4c
 80053ea:	2204      	movs	r2, #4
 80053ec:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80053ee:	e022      	b.n	8005436 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80053f0:	78fa      	ldrb	r2, [r7, #3]
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	4613      	mov	r3, r2
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	1a9b      	subs	r3, r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	440b      	add	r3, r1
 80053fe:	334c      	adds	r3, #76	; 0x4c
 8005400:	2202      	movs	r2, #2
 8005402:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005404:	78fb      	ldrb	r3, [r7, #3]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	4413      	add	r3, r2
 800540c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800541a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005422:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005424:	78fb      	ldrb	r3, [r7, #3]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	4413      	add	r3, r2
 800542c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005430:	461a      	mov	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005436:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005438:	78fa      	ldrb	r2, [r7, #3]
 800543a:	6879      	ldr	r1, [r7, #4]
 800543c:	4613      	mov	r3, r2
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	1a9b      	subs	r3, r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	440b      	add	r3, r1
 8005446:	334c      	adds	r3, #76	; 0x4c
 8005448:	781a      	ldrb	r2, [r3, #0]
 800544a:	78fb      	ldrb	r3, [r7, #3]
 800544c:	4619      	mov	r1, r3
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f007 f8c2 	bl	800c5d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005454:	e002      	b.n	800545c <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005456:	bf00      	nop
 8005458:	e000      	b.n	800545c <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800545a:	bf00      	nop
  }
}
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b08a      	sub	sp, #40	; 0x28
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	f003 030f 	and.w	r3, r3, #15
 8005482:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	0c5b      	lsrs	r3, r3, #17
 8005488:	f003 030f 	and.w	r3, r3, #15
 800548c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	091b      	lsrs	r3, r3, #4
 8005492:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005496:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	2b02      	cmp	r3, #2
 800549c:	d004      	beq.n	80054a8 <HCD_RXQLVL_IRQHandler+0x46>
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	2b05      	cmp	r3, #5
 80054a2:	f000 80b6 	beq.w	8005612 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80054a6:	e0b7      	b.n	8005618 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 80b3 	beq.w	8005616 <HCD_RXQLVL_IRQHandler+0x1b4>
 80054b0:	6879      	ldr	r1, [r7, #4]
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	4613      	mov	r3, r2
 80054b6:	011b      	lsls	r3, r3, #4
 80054b8:	1a9b      	subs	r3, r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	440b      	add	r3, r1
 80054be:	332c      	adds	r3, #44	; 0x2c
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 80a7 	beq.w	8005616 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80054c8:	6879      	ldr	r1, [r7, #4]
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	4613      	mov	r3, r2
 80054ce:	011b      	lsls	r3, r3, #4
 80054d0:	1a9b      	subs	r3, r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	440b      	add	r3, r1
 80054d6:	3338      	adds	r3, #56	; 0x38
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	18d1      	adds	r1, r2, r3
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	4613      	mov	r3, r2
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	1a9b      	subs	r3, r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4403      	add	r3, r0
 80054ec:	3334      	adds	r3, #52	; 0x34
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4299      	cmp	r1, r3
 80054f2:	f200 8083 	bhi.w	80055fc <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6818      	ldr	r0, [r3, #0]
 80054fa:	6879      	ldr	r1, [r7, #4]
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	4613      	mov	r3, r2
 8005500:	011b      	lsls	r3, r3, #4
 8005502:	1a9b      	subs	r3, r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	440b      	add	r3, r1
 8005508:	332c      	adds	r3, #44	; 0x2c
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	b292      	uxth	r2, r2
 8005510:	4619      	mov	r1, r3
 8005512:	f003 fee9 	bl	80092e8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005516:	6879      	ldr	r1, [r7, #4]
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	4613      	mov	r3, r2
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	1a9b      	subs	r3, r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	440b      	add	r3, r1
 8005524:	332c      	adds	r3, #44	; 0x2c
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	18d1      	adds	r1, r2, r3
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	4613      	mov	r3, r2
 8005532:	011b      	lsls	r3, r3, #4
 8005534:	1a9b      	subs	r3, r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4403      	add	r3, r0
 800553a:	332c      	adds	r3, #44	; 0x2c
 800553c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	4613      	mov	r3, r2
 8005544:	011b      	lsls	r3, r3, #4
 8005546:	1a9b      	subs	r3, r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	440b      	add	r3, r1
 800554c:	3338      	adds	r3, #56	; 0x38
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	18d1      	adds	r1, r2, r3
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	4613      	mov	r3, r2
 800555a:	011b      	lsls	r3, r3, #4
 800555c:	1a9b      	subs	r3, r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4403      	add	r3, r0
 8005562:	3338      	adds	r3, #56	; 0x38
 8005564:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	4413      	add	r3, r2
 800556e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	0cdb      	lsrs	r3, r3, #19
 8005576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800557a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800557c:	6879      	ldr	r1, [r7, #4]
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	4613      	mov	r3, r2
 8005582:	011b      	lsls	r3, r3, #4
 8005584:	1a9b      	subs	r3, r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	440b      	add	r3, r1
 800558a:	3328      	adds	r3, #40	; 0x28
 800558c:	881b      	ldrh	r3, [r3, #0]
 800558e:	461a      	mov	r2, r3
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	4293      	cmp	r3, r2
 8005594:	d13f      	bne.n	8005616 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d03c      	beq.n	8005616 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055b2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055ba:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c8:	461a      	mov	r2, r3
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80055ce:	6879      	ldr	r1, [r7, #4]
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	4613      	mov	r3, r2
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	1a9b      	subs	r3, r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	440b      	add	r3, r1
 80055dc:	333c      	adds	r3, #60	; 0x3c
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	f083 0301 	eor.w	r3, r3, #1
 80055e4:	b2d8      	uxtb	r0, r3
 80055e6:	6879      	ldr	r1, [r7, #4]
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	4613      	mov	r3, r2
 80055ec:	011b      	lsls	r3, r3, #4
 80055ee:	1a9b      	subs	r3, r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	440b      	add	r3, r1
 80055f4:	333c      	adds	r3, #60	; 0x3c
 80055f6:	4602      	mov	r2, r0
 80055f8:	701a      	strb	r2, [r3, #0]
      break;
 80055fa:	e00c      	b.n	8005616 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80055fc:	6879      	ldr	r1, [r7, #4]
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	4613      	mov	r3, r2
 8005602:	011b      	lsls	r3, r3, #4
 8005604:	1a9b      	subs	r3, r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	440b      	add	r3, r1
 800560a:	334c      	adds	r3, #76	; 0x4c
 800560c:	2204      	movs	r2, #4
 800560e:	701a      	strb	r2, [r3, #0]
      break;
 8005610:	e001      	b.n	8005616 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005612:	bf00      	nop
 8005614:	e000      	b.n	8005618 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005616:	bf00      	nop
  }
}
 8005618:	bf00      	nop
 800561a:	3728      	adds	r7, #40	; 0x28
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800564c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b02      	cmp	r3, #2
 8005656:	d10b      	bne.n	8005670 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b01      	cmp	r3, #1
 8005660:	d102      	bne.n	8005668 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f006 ff9c 	bl	800c5a0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f043 0302 	orr.w	r3, r3, #2
 800566e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	2b08      	cmp	r3, #8
 8005678:	d132      	bne.n	80056e0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f043 0308 	orr.w	r3, r3, #8
 8005680:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b04      	cmp	r3, #4
 800568a:	d126      	bne.n	80056da <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	7a5b      	ldrb	r3, [r3, #9]
 8005690:	2b02      	cmp	r3, #2
 8005692:	d113      	bne.n	80056bc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800569a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800569e:	d106      	bne.n	80056ae <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2102      	movs	r1, #2
 80056a6:	4618      	mov	r0, r3
 80056a8:	f003 ffae 	bl	8009608 <USB_InitFSLSPClkSel>
 80056ac:	e011      	b.n	80056d2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2101      	movs	r1, #1
 80056b4:	4618      	mov	r0, r3
 80056b6:	f003 ffa7 	bl	8009608 <USB_InitFSLSPClkSel>
 80056ba:	e00a      	b.n	80056d2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	79db      	ldrb	r3, [r3, #7]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d106      	bne.n	80056d2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056ca:	461a      	mov	r2, r3
 80056cc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80056d0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f006 ff8e 	bl	800c5f4 <HAL_HCD_PortEnabled_Callback>
 80056d8:	e002      	b.n	80056e0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f006 ff98 	bl	800c610 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f003 0320 	and.w	r3, r3, #32
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	d103      	bne.n	80056f2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f043 0320 	orr.w	r3, r3, #32
 80056f0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056f8:	461a      	mov	r2, r3
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	6013      	str	r3, [r2, #0]
}
 80056fe:	bf00      	nop
 8005700:	3718      	adds	r7, #24
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e12b      	b.n	8005972 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d106      	bne.n	8005734 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7fc fc7e 	bl	8002030 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2224      	movs	r2, #36	; 0x24
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 0201 	bic.w	r2, r2, #1
 800574a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800575a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800576a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800576c:	f001 fc60 	bl	8007030 <HAL_RCC_GetPCLK1Freq>
 8005770:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	4a81      	ldr	r2, [pc, #516]	; (800597c <HAL_I2C_Init+0x274>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d807      	bhi.n	800578c <HAL_I2C_Init+0x84>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4a80      	ldr	r2, [pc, #512]	; (8005980 <HAL_I2C_Init+0x278>)
 8005780:	4293      	cmp	r3, r2
 8005782:	bf94      	ite	ls
 8005784:	2301      	movls	r3, #1
 8005786:	2300      	movhi	r3, #0
 8005788:	b2db      	uxtb	r3, r3
 800578a:	e006      	b.n	800579a <HAL_I2C_Init+0x92>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4a7d      	ldr	r2, [pc, #500]	; (8005984 <HAL_I2C_Init+0x27c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	bf94      	ite	ls
 8005794:	2301      	movls	r3, #1
 8005796:	2300      	movhi	r3, #0
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e0e7      	b.n	8005972 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	4a78      	ldr	r2, [pc, #480]	; (8005988 <HAL_I2C_Init+0x280>)
 80057a6:	fba2 2303 	umull	r2, r3, r2, r3
 80057aa:	0c9b      	lsrs	r3, r3, #18
 80057ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	430a      	orrs	r2, r1
 80057c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	4a6a      	ldr	r2, [pc, #424]	; (800597c <HAL_I2C_Init+0x274>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d802      	bhi.n	80057dc <HAL_I2C_Init+0xd4>
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	3301      	adds	r3, #1
 80057da:	e009      	b.n	80057f0 <HAL_I2C_Init+0xe8>
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80057e2:	fb02 f303 	mul.w	r3, r2, r3
 80057e6:	4a69      	ldr	r2, [pc, #420]	; (800598c <HAL_I2C_Init+0x284>)
 80057e8:	fba2 2303 	umull	r2, r3, r2, r3
 80057ec:	099b      	lsrs	r3, r3, #6
 80057ee:	3301      	adds	r3, #1
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	6812      	ldr	r2, [r2, #0]
 80057f4:	430b      	orrs	r3, r1
 80057f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005802:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	495c      	ldr	r1, [pc, #368]	; (800597c <HAL_I2C_Init+0x274>)
 800580c:	428b      	cmp	r3, r1
 800580e:	d819      	bhi.n	8005844 <HAL_I2C_Init+0x13c>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	1e59      	subs	r1, r3, #1
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	fbb1 f3f3 	udiv	r3, r1, r3
 800581e:	1c59      	adds	r1, r3, #1
 8005820:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005824:	400b      	ands	r3, r1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <HAL_I2C_Init+0x138>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	1e59      	subs	r1, r3, #1
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	fbb1 f3f3 	udiv	r3, r1, r3
 8005838:	3301      	adds	r3, #1
 800583a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800583e:	e051      	b.n	80058e4 <HAL_I2C_Init+0x1dc>
 8005840:	2304      	movs	r3, #4
 8005842:	e04f      	b.n	80058e4 <HAL_I2C_Init+0x1dc>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d111      	bne.n	8005870 <HAL_I2C_Init+0x168>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	1e58      	subs	r0, r3, #1
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6859      	ldr	r1, [r3, #4]
 8005854:	460b      	mov	r3, r1
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	440b      	add	r3, r1
 800585a:	fbb0 f3f3 	udiv	r3, r0, r3
 800585e:	3301      	adds	r3, #1
 8005860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005864:	2b00      	cmp	r3, #0
 8005866:	bf0c      	ite	eq
 8005868:	2301      	moveq	r3, #1
 800586a:	2300      	movne	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	e012      	b.n	8005896 <HAL_I2C_Init+0x18e>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	1e58      	subs	r0, r3, #1
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6859      	ldr	r1, [r3, #4]
 8005878:	460b      	mov	r3, r1
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	440b      	add	r3, r1
 800587e:	0099      	lsls	r1, r3, #2
 8005880:	440b      	add	r3, r1
 8005882:	fbb0 f3f3 	udiv	r3, r0, r3
 8005886:	3301      	adds	r3, #1
 8005888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800588c:	2b00      	cmp	r3, #0
 800588e:	bf0c      	ite	eq
 8005890:	2301      	moveq	r3, #1
 8005892:	2300      	movne	r3, #0
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <HAL_I2C_Init+0x196>
 800589a:	2301      	movs	r3, #1
 800589c:	e022      	b.n	80058e4 <HAL_I2C_Init+0x1dc>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10e      	bne.n	80058c4 <HAL_I2C_Init+0x1bc>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	1e58      	subs	r0, r3, #1
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6859      	ldr	r1, [r3, #4]
 80058ae:	460b      	mov	r3, r1
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	440b      	add	r3, r1
 80058b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80058b8:	3301      	adds	r3, #1
 80058ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058c2:	e00f      	b.n	80058e4 <HAL_I2C_Init+0x1dc>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	1e58      	subs	r0, r3, #1
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6859      	ldr	r1, [r3, #4]
 80058cc:	460b      	mov	r3, r1
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	440b      	add	r3, r1
 80058d2:	0099      	lsls	r1, r3, #2
 80058d4:	440b      	add	r3, r1
 80058d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80058da:	3301      	adds	r3, #1
 80058dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058e4:	6879      	ldr	r1, [r7, #4]
 80058e6:	6809      	ldr	r1, [r1, #0]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69da      	ldr	r2, [r3, #28]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	430a      	orrs	r2, r1
 8005906:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005912:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	6911      	ldr	r1, [r2, #16]
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	68d2      	ldr	r2, [r2, #12]
 800591e:	4311      	orrs	r1, r2
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	6812      	ldr	r2, [r2, #0]
 8005924:	430b      	orrs	r3, r1
 8005926:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	695a      	ldr	r2, [r3, #20]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	431a      	orrs	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0201 	orr.w	r2, r2, #1
 8005952:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2220      	movs	r2, #32
 800595e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	000186a0 	.word	0x000186a0
 8005980:	001e847f 	.word	0x001e847f
 8005984:	003d08ff 	.word	0x003d08ff
 8005988:	431bde83 	.word	0x431bde83
 800598c:	10624dd3 	.word	0x10624dd3

08005990 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b088      	sub	sp, #32
 8005994:	af02      	add	r7, sp, #8
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	4608      	mov	r0, r1
 800599a:	4611      	mov	r1, r2
 800599c:	461a      	mov	r2, r3
 800599e:	4603      	mov	r3, r0
 80059a0:	817b      	strh	r3, [r7, #10]
 80059a2:	460b      	mov	r3, r1
 80059a4:	813b      	strh	r3, [r7, #8]
 80059a6:	4613      	mov	r3, r2
 80059a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80059aa:	f7fc ff1f 	bl	80027ec <HAL_GetTick>
 80059ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	f040 80d9 	bne.w	8005b70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	2319      	movs	r3, #25
 80059c4:	2201      	movs	r2, #1
 80059c6:	496d      	ldr	r1, [pc, #436]	; (8005b7c <HAL_I2C_Mem_Write+0x1ec>)
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 fc8b 	bl	80062e4 <I2C_WaitOnFlagUntilTimeout>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80059d4:	2302      	movs	r3, #2
 80059d6:	e0cc      	b.n	8005b72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d101      	bne.n	80059e6 <HAL_I2C_Mem_Write+0x56>
 80059e2:	2302      	movs	r3, #2
 80059e4:	e0c5      	b.n	8005b72 <HAL_I2C_Mem_Write+0x1e2>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d007      	beq.n	8005a0c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 0201 	orr.w	r2, r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2221      	movs	r2, #33	; 0x21
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2240      	movs	r2, #64	; 0x40
 8005a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6a3a      	ldr	r2, [r7, #32]
 8005a36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4a4d      	ldr	r2, [pc, #308]	; (8005b80 <HAL_I2C_Mem_Write+0x1f0>)
 8005a4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a4e:	88f8      	ldrh	r0, [r7, #6]
 8005a50:	893a      	ldrh	r2, [r7, #8]
 8005a52:	8979      	ldrh	r1, [r7, #10]
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	9301      	str	r3, [sp, #4]
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 fac2 	bl	8005fe8 <I2C_RequestMemoryWrite>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d052      	beq.n	8005b10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e081      	b.n	8005b72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 fd50 	bl	8006518 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00d      	beq.n	8005a9a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d107      	bne.n	8005a96 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e06b      	b.n	8005b72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9e:	781a      	ldrb	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aaa:	1c5a      	adds	r2, r3, #1
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	f003 0304 	and.w	r3, r3, #4
 8005ad4:	2b04      	cmp	r3, #4
 8005ad6:	d11b      	bne.n	8005b10 <HAL_I2C_Mem_Write+0x180>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d017      	beq.n	8005b10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	781a      	ldrb	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005afa:	3b01      	subs	r3, #1
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1aa      	bne.n	8005a6e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 fd43 	bl	80065a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00d      	beq.n	8005b44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2c:	2b04      	cmp	r3, #4
 8005b2e:	d107      	bne.n	8005b40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e016      	b.n	8005b72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2220      	movs	r2, #32
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	e000      	b.n	8005b72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005b70:	2302      	movs	r3, #2
  }
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	00100002 	.word	0x00100002
 8005b80:	ffff0000 	.word	0xffff0000

08005b84 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b08c      	sub	sp, #48	; 0x30
 8005b88:	af02      	add	r7, sp, #8
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	4608      	mov	r0, r1
 8005b8e:	4611      	mov	r1, r2
 8005b90:	461a      	mov	r2, r3
 8005b92:	4603      	mov	r3, r0
 8005b94:	817b      	strh	r3, [r7, #10]
 8005b96:	460b      	mov	r3, r1
 8005b98:	813b      	strh	r3, [r7, #8]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b9e:	f7fc fe25 	bl	80027ec <HAL_GetTick>
 8005ba2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b20      	cmp	r3, #32
 8005bae:	f040 8214 	bne.w	8005fda <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	2319      	movs	r3, #25
 8005bb8:	2201      	movs	r2, #1
 8005bba:	497b      	ldr	r1, [pc, #492]	; (8005da8 <HAL_I2C_Mem_Read+0x224>)
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f000 fb91 	bl	80062e4 <I2C_WaitOnFlagUntilTimeout>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005bc8:	2302      	movs	r3, #2
 8005bca:	e207      	b.n	8005fdc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d101      	bne.n	8005bda <HAL_I2C_Mem_Read+0x56>
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	e200      	b.n	8005fdc <HAL_I2C_Mem_Read+0x458>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d007      	beq.n	8005c00 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f042 0201 	orr.w	r2, r2, #1
 8005bfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2222      	movs	r2, #34	; 0x22
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2240      	movs	r2, #64	; 0x40
 8005c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005c30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4a5b      	ldr	r2, [pc, #364]	; (8005dac <HAL_I2C_Mem_Read+0x228>)
 8005c40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c42:	88f8      	ldrh	r0, [r7, #6]
 8005c44:	893a      	ldrh	r2, [r7, #8]
 8005c46:	8979      	ldrh	r1, [r7, #10]
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	9301      	str	r3, [sp, #4]
 8005c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	4603      	mov	r3, r0
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 fa5e 	bl	8006114 <I2C_RequestMemoryRead>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e1bc      	b.n	8005fdc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d113      	bne.n	8005c92 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	623b      	str	r3, [r7, #32]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	623b      	str	r3, [r7, #32]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	623b      	str	r3, [r7, #32]
 8005c7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	e190      	b.n	8005fb4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d11b      	bne.n	8005cd2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ca8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005caa:	2300      	movs	r3, #0
 8005cac:	61fb      	str	r3, [r7, #28]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	61fb      	str	r3, [r7, #28]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	61fb      	str	r3, [r7, #28]
 8005cbe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	e170      	b.n	8005fb4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d11b      	bne.n	8005d12 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ce8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cf8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61bb      	str	r3, [r7, #24]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	61bb      	str	r3, [r7, #24]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	61bb      	str	r3, [r7, #24]
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	e150      	b.n	8005fb4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d12:	2300      	movs	r3, #0
 8005d14:	617b      	str	r3, [r7, #20]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	617b      	str	r3, [r7, #20]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	617b      	str	r3, [r7, #20]
 8005d26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005d28:	e144      	b.n	8005fb4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d2e:	2b03      	cmp	r3, #3
 8005d30:	f200 80f1 	bhi.w	8005f16 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d123      	bne.n	8005d84 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 fc79 	bl	8006638 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e145      	b.n	8005fdc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691a      	ldr	r2, [r3, #16]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d82:	e117      	b.n	8005fb4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d14e      	bne.n	8005e2a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d92:	2200      	movs	r2, #0
 8005d94:	4906      	ldr	r1, [pc, #24]	; (8005db0 <HAL_I2C_Mem_Read+0x22c>)
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 faa4 	bl	80062e4 <I2C_WaitOnFlagUntilTimeout>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d008      	beq.n	8005db4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e11a      	b.n	8005fdc <HAL_I2C_Mem_Read+0x458>
 8005da6:	bf00      	nop
 8005da8:	00100002 	.word	0x00100002
 8005dac:	ffff0000 	.word	0xffff0000
 8005db0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	691a      	ldr	r2, [r3, #16]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd6:	1c5a      	adds	r2, r3, #1
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de0:	3b01      	subs	r3, #1
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	3b01      	subs	r3, #1
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	691a      	ldr	r2, [r3, #16]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	1c5a      	adds	r2, r3, #1
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e12:	3b01      	subs	r3, #1
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	3b01      	subs	r3, #1
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e28:	e0c4      	b.n	8005fb4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e30:	2200      	movs	r2, #0
 8005e32:	496c      	ldr	r1, [pc, #432]	; (8005fe4 <HAL_I2C_Mem_Read+0x460>)
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 fa55 	bl	80062e4 <I2C_WaitOnFlagUntilTimeout>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d001      	beq.n	8005e44 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e0cb      	b.n	8005fdc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	691a      	ldr	r2, [r3, #16]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5e:	b2d2      	uxtb	r2, r2
 8005e60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	1c5a      	adds	r2, r3, #1
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e70:	3b01      	subs	r3, #1
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	4955      	ldr	r1, [pc, #340]	; (8005fe4 <HAL_I2C_Mem_Read+0x460>)
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f000 fa27 	bl	80062e4 <I2C_WaitOnFlagUntilTimeout>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e09d      	b.n	8005fdc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	691a      	ldr	r2, [r3, #16]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	3b01      	subs	r3, #1
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	691a      	ldr	r2, [r3, #16]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eec:	b2d2      	uxtb	r2, r2
 8005eee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef4:	1c5a      	adds	r2, r3, #1
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005efe:	3b01      	subs	r3, #1
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f14:	e04e      	b.n	8005fb4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 fb8c 	bl	8006638 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e058      	b.n	8005fdc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	691a      	ldr	r2, [r3, #16]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f34:	b2d2      	uxtb	r2, r2
 8005f36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f46:	3b01      	subs	r3, #1
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	3b01      	subs	r3, #1
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d124      	bne.n	8005fb4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d107      	bne.n	8005f82 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f80:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	691a      	ldr	r2, [r3, #16]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f47f aeb6 	bne.w	8005d2a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	e000      	b.n	8005fdc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005fda:	2302      	movs	r3, #2
  }
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3728      	adds	r7, #40	; 0x28
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	00010004 	.word	0x00010004

08005fe8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b088      	sub	sp, #32
 8005fec:	af02      	add	r7, sp, #8
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	4608      	mov	r0, r1
 8005ff2:	4611      	mov	r1, r2
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	817b      	strh	r3, [r7, #10]
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	813b      	strh	r3, [r7, #8]
 8005ffe:	4613      	mov	r3, r2
 8006000:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006010:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	2200      	movs	r2, #0
 800601a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f000 f960 	bl	80062e4 <I2C_WaitOnFlagUntilTimeout>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00d      	beq.n	8006046 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006038:	d103      	bne.n	8006042 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006040:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e05f      	b.n	8006106 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006046:	897b      	ldrh	r3, [r7, #10]
 8006048:	b2db      	uxtb	r3, r3
 800604a:	461a      	mov	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006054:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	6a3a      	ldr	r2, [r7, #32]
 800605a:	492d      	ldr	r1, [pc, #180]	; (8006110 <I2C_RequestMemoryWrite+0x128>)
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 f9bb 	bl	80063d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d001      	beq.n	800606c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e04c      	b.n	8006106 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800606c:	2300      	movs	r3, #0
 800606e:	617b      	str	r3, [r7, #20]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	617b      	str	r3, [r7, #20]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	617b      	str	r3, [r7, #20]
 8006080:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006084:	6a39      	ldr	r1, [r7, #32]
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 fa46 	bl	8006518 <I2C_WaitOnTXEFlagUntilTimeout>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00d      	beq.n	80060ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	2b04      	cmp	r3, #4
 8006098:	d107      	bne.n	80060aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e02b      	b.n	8006106 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060ae:	88fb      	ldrh	r3, [r7, #6]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d105      	bne.n	80060c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060b4:	893b      	ldrh	r3, [r7, #8]
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	611a      	str	r2, [r3, #16]
 80060be:	e021      	b.n	8006104 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80060c0:	893b      	ldrh	r3, [r7, #8]
 80060c2:	0a1b      	lsrs	r3, r3, #8
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060d0:	6a39      	ldr	r1, [r7, #32]
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 fa20 	bl	8006518 <I2C_WaitOnTXEFlagUntilTimeout>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00d      	beq.n	80060fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	d107      	bne.n	80060f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e005      	b.n	8006106 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060fa:	893b      	ldrh	r3, [r7, #8]
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	00010002 	.word	0x00010002

08006114 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b088      	sub	sp, #32
 8006118:	af02      	add	r7, sp, #8
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	4608      	mov	r0, r1
 800611e:	4611      	mov	r1, r2
 8006120:	461a      	mov	r2, r3
 8006122:	4603      	mov	r3, r0
 8006124:	817b      	strh	r3, [r7, #10]
 8006126:	460b      	mov	r3, r1
 8006128:	813b      	strh	r3, [r7, #8]
 800612a:	4613      	mov	r3, r2
 800612c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800613c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800614c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	6a3b      	ldr	r3, [r7, #32]
 8006154:	2200      	movs	r2, #0
 8006156:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f000 f8c2 	bl	80062e4 <I2C_WaitOnFlagUntilTimeout>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00d      	beq.n	8006182 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006174:	d103      	bne.n	800617e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f44f 7200 	mov.w	r2, #512	; 0x200
 800617c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e0aa      	b.n	80062d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006182:	897b      	ldrh	r3, [r7, #10]
 8006184:	b2db      	uxtb	r3, r3
 8006186:	461a      	mov	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006190:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	6a3a      	ldr	r2, [r7, #32]
 8006196:	4952      	ldr	r1, [pc, #328]	; (80062e0 <I2C_RequestMemoryRead+0x1cc>)
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f000 f91d 	bl	80063d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e097      	b.n	80062d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061a8:	2300      	movs	r3, #0
 80061aa:	617b      	str	r3, [r7, #20]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	617b      	str	r3, [r7, #20]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	617b      	str	r3, [r7, #20]
 80061bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c0:	6a39      	ldr	r1, [r7, #32]
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 f9a8 	bl	8006518 <I2C_WaitOnTXEFlagUntilTimeout>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00d      	beq.n	80061ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	d107      	bne.n	80061e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e076      	b.n	80062d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061ea:	88fb      	ldrh	r3, [r7, #6]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d105      	bne.n	80061fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061f0:	893b      	ldrh	r3, [r7, #8]
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	611a      	str	r2, [r3, #16]
 80061fa:	e021      	b.n	8006240 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80061fc:	893b      	ldrh	r3, [r7, #8]
 80061fe:	0a1b      	lsrs	r3, r3, #8
 8006200:	b29b      	uxth	r3, r3
 8006202:	b2da      	uxtb	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800620a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800620c:	6a39      	ldr	r1, [r7, #32]
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f000 f982 	bl	8006518 <I2C_WaitOnTXEFlagUntilTimeout>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00d      	beq.n	8006236 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	2b04      	cmp	r3, #4
 8006220:	d107      	bne.n	8006232 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006230:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e050      	b.n	80062d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006236:	893b      	ldrh	r3, [r7, #8]
 8006238:	b2da      	uxtb	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006242:	6a39      	ldr	r1, [r7, #32]
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f000 f967 	bl	8006518 <I2C_WaitOnTXEFlagUntilTimeout>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00d      	beq.n	800626c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006254:	2b04      	cmp	r3, #4
 8006256:	d107      	bne.n	8006268 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006266:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e035      	b.n	80062d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800627a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	2200      	movs	r2, #0
 8006284:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 f82b 	bl	80062e4 <I2C_WaitOnFlagUntilTimeout>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00d      	beq.n	80062b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800629e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062a2:	d103      	bne.n	80062ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e013      	b.n	80062d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80062b0:	897b      	ldrh	r3, [r7, #10]
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	f043 0301 	orr.w	r3, r3, #1
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	6a3a      	ldr	r2, [r7, #32]
 80062c4:	4906      	ldr	r1, [pc, #24]	; (80062e0 <I2C_RequestMemoryRead+0x1cc>)
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f000 f886 	bl	80063d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e000      	b.n	80062d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3718      	adds	r7, #24
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	00010002 	.word	0x00010002

080062e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	603b      	str	r3, [r7, #0]
 80062f0:	4613      	mov	r3, r2
 80062f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062f4:	e048      	b.n	8006388 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fc:	d044      	beq.n	8006388 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062fe:	f7fc fa75 	bl	80027ec <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d302      	bcc.n	8006314 <I2C_WaitOnFlagUntilTimeout+0x30>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d139      	bne.n	8006388 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	0c1b      	lsrs	r3, r3, #16
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b01      	cmp	r3, #1
 800631c:	d10d      	bne.n	800633a <I2C_WaitOnFlagUntilTimeout+0x56>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	43da      	mvns	r2, r3
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	4013      	ands	r3, r2
 800632a:	b29b      	uxth	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	bf0c      	ite	eq
 8006330:	2301      	moveq	r3, #1
 8006332:	2300      	movne	r3, #0
 8006334:	b2db      	uxtb	r3, r3
 8006336:	461a      	mov	r2, r3
 8006338:	e00c      	b.n	8006354 <I2C_WaitOnFlagUntilTimeout+0x70>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	43da      	mvns	r2, r3
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	4013      	ands	r3, r2
 8006346:	b29b      	uxth	r3, r3
 8006348:	2b00      	cmp	r3, #0
 800634a:	bf0c      	ite	eq
 800634c:	2301      	moveq	r3, #1
 800634e:	2300      	movne	r3, #0
 8006350:	b2db      	uxtb	r3, r3
 8006352:	461a      	mov	r2, r3
 8006354:	79fb      	ldrb	r3, [r7, #7]
 8006356:	429a      	cmp	r2, r3
 8006358:	d116      	bne.n	8006388 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2220      	movs	r2, #32
 8006364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006374:	f043 0220 	orr.w	r2, r3, #32
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e023      	b.n	80063d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	0c1b      	lsrs	r3, r3, #16
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b01      	cmp	r3, #1
 8006390:	d10d      	bne.n	80063ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	43da      	mvns	r2, r3
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	4013      	ands	r3, r2
 800639e:	b29b      	uxth	r3, r3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	bf0c      	ite	eq
 80063a4:	2301      	moveq	r3, #1
 80063a6:	2300      	movne	r3, #0
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	461a      	mov	r2, r3
 80063ac:	e00c      	b.n	80063c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	43da      	mvns	r2, r3
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	4013      	ands	r3, r2
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	bf0c      	ite	eq
 80063c0:	2301      	moveq	r3, #1
 80063c2:	2300      	movne	r3, #0
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	461a      	mov	r2, r3
 80063c8:	79fb      	ldrb	r3, [r7, #7]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d093      	beq.n	80062f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
 80063e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063e6:	e071      	b.n	80064cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063f6:	d123      	bne.n	8006440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006406:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006410:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2220      	movs	r2, #32
 800641c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642c:	f043 0204 	orr.w	r2, r3, #4
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e067      	b.n	8006510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006446:	d041      	beq.n	80064cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006448:	f7fc f9d0 	bl	80027ec <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	429a      	cmp	r2, r3
 8006456:	d302      	bcc.n	800645e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d136      	bne.n	80064cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	0c1b      	lsrs	r3, r3, #16
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b01      	cmp	r3, #1
 8006466:	d10c      	bne.n	8006482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	43da      	mvns	r2, r3
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	4013      	ands	r3, r2
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	bf14      	ite	ne
 800647a:	2301      	movne	r3, #1
 800647c:	2300      	moveq	r3, #0
 800647e:	b2db      	uxtb	r3, r3
 8006480:	e00b      	b.n	800649a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	43da      	mvns	r2, r3
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	4013      	ands	r3, r2
 800648e:	b29b      	uxth	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	bf14      	ite	ne
 8006494:	2301      	movne	r3, #1
 8006496:	2300      	moveq	r3, #0
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d016      	beq.n	80064cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2220      	movs	r2, #32
 80064a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b8:	f043 0220 	orr.w	r2, r3, #32
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e021      	b.n	8006510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	0c1b      	lsrs	r3, r3, #16
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d10c      	bne.n	80064f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	43da      	mvns	r2, r3
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	4013      	ands	r3, r2
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	bf14      	ite	ne
 80064e8:	2301      	movne	r3, #1
 80064ea:	2300      	moveq	r3, #0
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	e00b      	b.n	8006508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	43da      	mvns	r2, r3
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	4013      	ands	r3, r2
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	bf14      	ite	ne
 8006502:	2301      	movne	r3, #1
 8006504:	2300      	moveq	r3, #0
 8006506:	b2db      	uxtb	r3, r3
 8006508:	2b00      	cmp	r3, #0
 800650a:	f47f af6d 	bne.w	80063e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006524:	e034      	b.n	8006590 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 f8e3 	bl	80066f2 <I2C_IsAcknowledgeFailed>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e034      	b.n	80065a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653c:	d028      	beq.n	8006590 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800653e:	f7fc f955 	bl	80027ec <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	429a      	cmp	r2, r3
 800654c:	d302      	bcc.n	8006554 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d11d      	bne.n	8006590 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800655e:	2b80      	cmp	r3, #128	; 0x80
 8006560:	d016      	beq.n	8006590 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2220      	movs	r2, #32
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657c:	f043 0220 	orr.w	r2, r3, #32
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e007      	b.n	80065a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800659a:	2b80      	cmp	r3, #128	; 0x80
 800659c:	d1c3      	bne.n	8006526 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065b4:	e034      	b.n	8006620 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f000 f89b 	bl	80066f2 <I2C_IsAcknowledgeFailed>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e034      	b.n	8006630 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065cc:	d028      	beq.n	8006620 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ce:	f7fc f90d 	bl	80027ec <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d302      	bcc.n	80065e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d11d      	bne.n	8006620 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	f003 0304 	and.w	r3, r3, #4
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d016      	beq.n	8006620 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2220      	movs	r2, #32
 80065fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660c:	f043 0220 	orr.w	r2, r3, #32
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e007      	b.n	8006630 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	f003 0304 	and.w	r3, r3, #4
 800662a:	2b04      	cmp	r3, #4
 800662c:	d1c3      	bne.n	80065b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006644:	e049      	b.n	80066da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	695b      	ldr	r3, [r3, #20]
 800664c:	f003 0310 	and.w	r3, r3, #16
 8006650:	2b10      	cmp	r3, #16
 8006652:	d119      	bne.n	8006688 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f06f 0210 	mvn.w	r2, #16
 800665c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2220      	movs	r2, #32
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e030      	b.n	80066ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006688:	f7fc f8b0 	bl	80027ec <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	429a      	cmp	r2, r3
 8006696:	d302      	bcc.n	800669e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d11d      	bne.n	80066da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a8:	2b40      	cmp	r3, #64	; 0x40
 80066aa:	d016      	beq.n	80066da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c6:	f043 0220 	orr.w	r2, r3, #32
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e007      	b.n	80066ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e4:	2b40      	cmp	r3, #64	; 0x40
 80066e6:	d1ae      	bne.n	8006646 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006708:	d11b      	bne.n	8006742 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006712:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2220      	movs	r2, #32
 800671e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	f043 0204 	orr.w	r2, r3, #4
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e000      	b.n	8006744 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e267      	b.n	8006c32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b00      	cmp	r3, #0
 800676c:	d075      	beq.n	800685a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800676e:	4b88      	ldr	r3, [pc, #544]	; (8006990 <HAL_RCC_OscConfig+0x240>)
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f003 030c 	and.w	r3, r3, #12
 8006776:	2b04      	cmp	r3, #4
 8006778:	d00c      	beq.n	8006794 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800677a:	4b85      	ldr	r3, [pc, #532]	; (8006990 <HAL_RCC_OscConfig+0x240>)
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006782:	2b08      	cmp	r3, #8
 8006784:	d112      	bne.n	80067ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006786:	4b82      	ldr	r3, [pc, #520]	; (8006990 <HAL_RCC_OscConfig+0x240>)
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800678e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006792:	d10b      	bne.n	80067ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006794:	4b7e      	ldr	r3, [pc, #504]	; (8006990 <HAL_RCC_OscConfig+0x240>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d05b      	beq.n	8006858 <HAL_RCC_OscConfig+0x108>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d157      	bne.n	8006858 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e242      	b.n	8006c32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067b4:	d106      	bne.n	80067c4 <HAL_RCC_OscConfig+0x74>
 80067b6:	4b76      	ldr	r3, [pc, #472]	; (8006990 <HAL_RCC_OscConfig+0x240>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a75      	ldr	r2, [pc, #468]	; (8006990 <HAL_RCC_OscConfig+0x240>)
 80067bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067c0:	6013      	str	r3, [r2, #0]
 80067c2:	e01d      	b.n	8006800 <HAL_RCC_OscConfig+0xb0>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067cc:	d10c      	bne.n	80067e8 <HAL_RCC_OscConfig+0x98>
 80067ce:	4b70      	ldr	r3, [pc, #448]	; (8006990 <HAL_RCC_OscConfig+0x240>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a6f      	ldr	r2, [pc, #444]	; (8006990 <HAL_RCC_OscConfig+0x240>)
 80067d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067d8:	6013      	str	r3, [r2, #0]
 80067da:	4b6d      	ldr	r3, [pc, #436]	; (8006990 <HAL_RCC_OscConfig+0x240>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a6c      	ldr	r2, [pc, #432]	; (8006990 <HAL_RCC_OscConfig+0x240>)
 80067e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067e4:	6013      	str	r3, [r2, #0]
 80067e6:	e00b      	b.n	8006800 <HAL_RCC_OscConfig+0xb0>
 80067e8:	4b69      	ldr	r3, [pc, #420]	; (8006990 <HAL_RCC_OscConfig+0x240>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a68      	ldr	r2, [pc, #416]	; (8006990 <HAL_RCC_OscConfig+0x240>)
 80067ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067f2:	6013      	str	r3, [r2, #0]
 80067f4:	4b66      	ldr	r3, [pc, #408]	; (8006990 <HAL_RCC_OscConfig+0x240>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a65      	ldr	r2, [pc, #404]	; (8006990 <HAL_RCC_OscConfig+0x240>)
 80067fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d013      	beq.n	8006830 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006808:	f7fb fff0 	bl	80027ec <HAL_GetTick>
 800680c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800680e:	e008      	b.n	8006822 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006810:	f7fb ffec 	bl	80027ec <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	2b64      	cmp	r3, #100	; 0x64
 800681c:	d901      	bls.n	8006822 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e207      	b.n	8006c32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006822:	4b5b      	ldr	r3, [pc, #364]	; (8006990 <HAL_RCC_OscConfig+0x240>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0f0      	beq.n	8006810 <HAL_RCC_OscConfig+0xc0>
 800682e:	e014      	b.n	800685a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006830:	f7fb ffdc 	bl	80027ec <HAL_GetTick>
 8006834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006836:	e008      	b.n	800684a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006838:	f7fb ffd8 	bl	80027ec <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	2b64      	cmp	r3, #100	; 0x64
 8006844:	d901      	bls.n	800684a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e1f3      	b.n	8006c32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800684a:	4b51      	ldr	r3, [pc, #324]	; (8006990 <HAL_RCC_OscConfig+0x240>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1f0      	bne.n	8006838 <HAL_RCC_OscConfig+0xe8>
 8006856:	e000      	b.n	800685a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d063      	beq.n	800692e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006866:	4b4a      	ldr	r3, [pc, #296]	; (8006990 <HAL_RCC_OscConfig+0x240>)
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f003 030c 	and.w	r3, r3, #12
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00b      	beq.n	800688a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006872:	4b47      	ldr	r3, [pc, #284]	; (8006990 <HAL_RCC_OscConfig+0x240>)
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800687a:	2b08      	cmp	r3, #8
 800687c:	d11c      	bne.n	80068b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800687e:	4b44      	ldr	r3, [pc, #272]	; (8006990 <HAL_RCC_OscConfig+0x240>)
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d116      	bne.n	80068b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800688a:	4b41      	ldr	r3, [pc, #260]	; (8006990 <HAL_RCC_OscConfig+0x240>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d005      	beq.n	80068a2 <HAL_RCC_OscConfig+0x152>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d001      	beq.n	80068a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e1c7      	b.n	8006c32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068a2:	4b3b      	ldr	r3, [pc, #236]	; (8006990 <HAL_RCC_OscConfig+0x240>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	00db      	lsls	r3, r3, #3
 80068b0:	4937      	ldr	r1, [pc, #220]	; (8006990 <HAL_RCC_OscConfig+0x240>)
 80068b2:	4313      	orrs	r3, r2
 80068b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068b6:	e03a      	b.n	800692e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d020      	beq.n	8006902 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068c0:	4b34      	ldr	r3, [pc, #208]	; (8006994 <HAL_RCC_OscConfig+0x244>)
 80068c2:	2201      	movs	r2, #1
 80068c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c6:	f7fb ff91 	bl	80027ec <HAL_GetTick>
 80068ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068cc:	e008      	b.n	80068e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068ce:	f7fb ff8d 	bl	80027ec <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d901      	bls.n	80068e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e1a8      	b.n	8006c32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068e0:	4b2b      	ldr	r3, [pc, #172]	; (8006990 <HAL_RCC_OscConfig+0x240>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0302 	and.w	r3, r3, #2
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d0f0      	beq.n	80068ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068ec:	4b28      	ldr	r3, [pc, #160]	; (8006990 <HAL_RCC_OscConfig+0x240>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	00db      	lsls	r3, r3, #3
 80068fa:	4925      	ldr	r1, [pc, #148]	; (8006990 <HAL_RCC_OscConfig+0x240>)
 80068fc:	4313      	orrs	r3, r2
 80068fe:	600b      	str	r3, [r1, #0]
 8006900:	e015      	b.n	800692e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006902:	4b24      	ldr	r3, [pc, #144]	; (8006994 <HAL_RCC_OscConfig+0x244>)
 8006904:	2200      	movs	r2, #0
 8006906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006908:	f7fb ff70 	bl	80027ec <HAL_GetTick>
 800690c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800690e:	e008      	b.n	8006922 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006910:	f7fb ff6c 	bl	80027ec <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	2b02      	cmp	r3, #2
 800691c:	d901      	bls.n	8006922 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e187      	b.n	8006c32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006922:	4b1b      	ldr	r3, [pc, #108]	; (8006990 <HAL_RCC_OscConfig+0x240>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1f0      	bne.n	8006910 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0308 	and.w	r3, r3, #8
 8006936:	2b00      	cmp	r3, #0
 8006938:	d036      	beq.n	80069a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d016      	beq.n	8006970 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006942:	4b15      	ldr	r3, [pc, #84]	; (8006998 <HAL_RCC_OscConfig+0x248>)
 8006944:	2201      	movs	r2, #1
 8006946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006948:	f7fb ff50 	bl	80027ec <HAL_GetTick>
 800694c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800694e:	e008      	b.n	8006962 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006950:	f7fb ff4c 	bl	80027ec <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	2b02      	cmp	r3, #2
 800695c:	d901      	bls.n	8006962 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e167      	b.n	8006c32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006962:	4b0b      	ldr	r3, [pc, #44]	; (8006990 <HAL_RCC_OscConfig+0x240>)
 8006964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d0f0      	beq.n	8006950 <HAL_RCC_OscConfig+0x200>
 800696e:	e01b      	b.n	80069a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006970:	4b09      	ldr	r3, [pc, #36]	; (8006998 <HAL_RCC_OscConfig+0x248>)
 8006972:	2200      	movs	r2, #0
 8006974:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006976:	f7fb ff39 	bl	80027ec <HAL_GetTick>
 800697a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800697c:	e00e      	b.n	800699c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800697e:	f7fb ff35 	bl	80027ec <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	2b02      	cmp	r3, #2
 800698a:	d907      	bls.n	800699c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e150      	b.n	8006c32 <HAL_RCC_OscConfig+0x4e2>
 8006990:	40023800 	.word	0x40023800
 8006994:	42470000 	.word	0x42470000
 8006998:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800699c:	4b88      	ldr	r3, [pc, #544]	; (8006bc0 <HAL_RCC_OscConfig+0x470>)
 800699e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1ea      	bne.n	800697e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 8097 	beq.w	8006ae4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069b6:	2300      	movs	r3, #0
 80069b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069ba:	4b81      	ldr	r3, [pc, #516]	; (8006bc0 <HAL_RCC_OscConfig+0x470>)
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10f      	bne.n	80069e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069c6:	2300      	movs	r3, #0
 80069c8:	60bb      	str	r3, [r7, #8]
 80069ca:	4b7d      	ldr	r3, [pc, #500]	; (8006bc0 <HAL_RCC_OscConfig+0x470>)
 80069cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ce:	4a7c      	ldr	r2, [pc, #496]	; (8006bc0 <HAL_RCC_OscConfig+0x470>)
 80069d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069d4:	6413      	str	r3, [r2, #64]	; 0x40
 80069d6:	4b7a      	ldr	r3, [pc, #488]	; (8006bc0 <HAL_RCC_OscConfig+0x470>)
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069de:	60bb      	str	r3, [r7, #8]
 80069e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069e2:	2301      	movs	r3, #1
 80069e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069e6:	4b77      	ldr	r3, [pc, #476]	; (8006bc4 <HAL_RCC_OscConfig+0x474>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d118      	bne.n	8006a24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069f2:	4b74      	ldr	r3, [pc, #464]	; (8006bc4 <HAL_RCC_OscConfig+0x474>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a73      	ldr	r2, [pc, #460]	; (8006bc4 <HAL_RCC_OscConfig+0x474>)
 80069f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069fe:	f7fb fef5 	bl	80027ec <HAL_GetTick>
 8006a02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a04:	e008      	b.n	8006a18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a06:	f7fb fef1 	bl	80027ec <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d901      	bls.n	8006a18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e10c      	b.n	8006c32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a18:	4b6a      	ldr	r3, [pc, #424]	; (8006bc4 <HAL_RCC_OscConfig+0x474>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d0f0      	beq.n	8006a06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d106      	bne.n	8006a3a <HAL_RCC_OscConfig+0x2ea>
 8006a2c:	4b64      	ldr	r3, [pc, #400]	; (8006bc0 <HAL_RCC_OscConfig+0x470>)
 8006a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a30:	4a63      	ldr	r2, [pc, #396]	; (8006bc0 <HAL_RCC_OscConfig+0x470>)
 8006a32:	f043 0301 	orr.w	r3, r3, #1
 8006a36:	6713      	str	r3, [r2, #112]	; 0x70
 8006a38:	e01c      	b.n	8006a74 <HAL_RCC_OscConfig+0x324>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	2b05      	cmp	r3, #5
 8006a40:	d10c      	bne.n	8006a5c <HAL_RCC_OscConfig+0x30c>
 8006a42:	4b5f      	ldr	r3, [pc, #380]	; (8006bc0 <HAL_RCC_OscConfig+0x470>)
 8006a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a46:	4a5e      	ldr	r2, [pc, #376]	; (8006bc0 <HAL_RCC_OscConfig+0x470>)
 8006a48:	f043 0304 	orr.w	r3, r3, #4
 8006a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8006a4e:	4b5c      	ldr	r3, [pc, #368]	; (8006bc0 <HAL_RCC_OscConfig+0x470>)
 8006a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a52:	4a5b      	ldr	r2, [pc, #364]	; (8006bc0 <HAL_RCC_OscConfig+0x470>)
 8006a54:	f043 0301 	orr.w	r3, r3, #1
 8006a58:	6713      	str	r3, [r2, #112]	; 0x70
 8006a5a:	e00b      	b.n	8006a74 <HAL_RCC_OscConfig+0x324>
 8006a5c:	4b58      	ldr	r3, [pc, #352]	; (8006bc0 <HAL_RCC_OscConfig+0x470>)
 8006a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a60:	4a57      	ldr	r2, [pc, #348]	; (8006bc0 <HAL_RCC_OscConfig+0x470>)
 8006a62:	f023 0301 	bic.w	r3, r3, #1
 8006a66:	6713      	str	r3, [r2, #112]	; 0x70
 8006a68:	4b55      	ldr	r3, [pc, #340]	; (8006bc0 <HAL_RCC_OscConfig+0x470>)
 8006a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6c:	4a54      	ldr	r2, [pc, #336]	; (8006bc0 <HAL_RCC_OscConfig+0x470>)
 8006a6e:	f023 0304 	bic.w	r3, r3, #4
 8006a72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d015      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a7c:	f7fb feb6 	bl	80027ec <HAL_GetTick>
 8006a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a82:	e00a      	b.n	8006a9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a84:	f7fb feb2 	bl	80027ec <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e0cb      	b.n	8006c32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a9a:	4b49      	ldr	r3, [pc, #292]	; (8006bc0 <HAL_RCC_OscConfig+0x470>)
 8006a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a9e:	f003 0302 	and.w	r3, r3, #2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0ee      	beq.n	8006a84 <HAL_RCC_OscConfig+0x334>
 8006aa6:	e014      	b.n	8006ad2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006aa8:	f7fb fea0 	bl	80027ec <HAL_GetTick>
 8006aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006aae:	e00a      	b.n	8006ac6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ab0:	f7fb fe9c 	bl	80027ec <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d901      	bls.n	8006ac6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e0b5      	b.n	8006c32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ac6:	4b3e      	ldr	r3, [pc, #248]	; (8006bc0 <HAL_RCC_OscConfig+0x470>)
 8006ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aca:	f003 0302 	and.w	r3, r3, #2
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1ee      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ad2:	7dfb      	ldrb	r3, [r7, #23]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d105      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ad8:	4b39      	ldr	r3, [pc, #228]	; (8006bc0 <HAL_RCC_OscConfig+0x470>)
 8006ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006adc:	4a38      	ldr	r2, [pc, #224]	; (8006bc0 <HAL_RCC_OscConfig+0x470>)
 8006ade:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ae2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 80a1 	beq.w	8006c30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006aee:	4b34      	ldr	r3, [pc, #208]	; (8006bc0 <HAL_RCC_OscConfig+0x470>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f003 030c 	and.w	r3, r3, #12
 8006af6:	2b08      	cmp	r3, #8
 8006af8:	d05c      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d141      	bne.n	8006b86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b02:	4b31      	ldr	r3, [pc, #196]	; (8006bc8 <HAL_RCC_OscConfig+0x478>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b08:	f7fb fe70 	bl	80027ec <HAL_GetTick>
 8006b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b0e:	e008      	b.n	8006b22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b10:	f7fb fe6c 	bl	80027ec <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d901      	bls.n	8006b22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e087      	b.n	8006c32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b22:	4b27      	ldr	r3, [pc, #156]	; (8006bc0 <HAL_RCC_OscConfig+0x470>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1f0      	bne.n	8006b10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	69da      	ldr	r2, [r3, #28]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	431a      	orrs	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3c:	019b      	lsls	r3, r3, #6
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b44:	085b      	lsrs	r3, r3, #1
 8006b46:	3b01      	subs	r3, #1
 8006b48:	041b      	lsls	r3, r3, #16
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b50:	061b      	lsls	r3, r3, #24
 8006b52:	491b      	ldr	r1, [pc, #108]	; (8006bc0 <HAL_RCC_OscConfig+0x470>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b58:	4b1b      	ldr	r3, [pc, #108]	; (8006bc8 <HAL_RCC_OscConfig+0x478>)
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b5e:	f7fb fe45 	bl	80027ec <HAL_GetTick>
 8006b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b64:	e008      	b.n	8006b78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b66:	f7fb fe41 	bl	80027ec <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d901      	bls.n	8006b78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e05c      	b.n	8006c32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b78:	4b11      	ldr	r3, [pc, #68]	; (8006bc0 <HAL_RCC_OscConfig+0x470>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d0f0      	beq.n	8006b66 <HAL_RCC_OscConfig+0x416>
 8006b84:	e054      	b.n	8006c30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b86:	4b10      	ldr	r3, [pc, #64]	; (8006bc8 <HAL_RCC_OscConfig+0x478>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b8c:	f7fb fe2e 	bl	80027ec <HAL_GetTick>
 8006b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b92:	e008      	b.n	8006ba6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b94:	f7fb fe2a 	bl	80027ec <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d901      	bls.n	8006ba6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e045      	b.n	8006c32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ba6:	4b06      	ldr	r3, [pc, #24]	; (8006bc0 <HAL_RCC_OscConfig+0x470>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1f0      	bne.n	8006b94 <HAL_RCC_OscConfig+0x444>
 8006bb2:	e03d      	b.n	8006c30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d107      	bne.n	8006bcc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e038      	b.n	8006c32 <HAL_RCC_OscConfig+0x4e2>
 8006bc0:	40023800 	.word	0x40023800
 8006bc4:	40007000 	.word	0x40007000
 8006bc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006bcc:	4b1b      	ldr	r3, [pc, #108]	; (8006c3c <HAL_RCC_OscConfig+0x4ec>)
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d028      	beq.n	8006c2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d121      	bne.n	8006c2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d11a      	bne.n	8006c2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d111      	bne.n	8006c2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c12:	085b      	lsrs	r3, r3, #1
 8006c14:	3b01      	subs	r3, #1
 8006c16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d107      	bne.n	8006c2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d001      	beq.n	8006c30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e000      	b.n	8006c32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3718      	adds	r7, #24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	40023800 	.word	0x40023800

08006c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e0cc      	b.n	8006dee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c54:	4b68      	ldr	r3, [pc, #416]	; (8006df8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0307 	and.w	r3, r3, #7
 8006c5c:	683a      	ldr	r2, [r7, #0]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d90c      	bls.n	8006c7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c62:	4b65      	ldr	r3, [pc, #404]	; (8006df8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c64:	683a      	ldr	r2, [r7, #0]
 8006c66:	b2d2      	uxtb	r2, r2
 8006c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c6a:	4b63      	ldr	r3, [pc, #396]	; (8006df8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0307 	and.w	r3, r3, #7
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d001      	beq.n	8006c7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e0b8      	b.n	8006dee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0302 	and.w	r3, r3, #2
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d020      	beq.n	8006cca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0304 	and.w	r3, r3, #4
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d005      	beq.n	8006ca0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c94:	4b59      	ldr	r3, [pc, #356]	; (8006dfc <HAL_RCC_ClockConfig+0x1bc>)
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	4a58      	ldr	r2, [pc, #352]	; (8006dfc <HAL_RCC_ClockConfig+0x1bc>)
 8006c9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0308 	and.w	r3, r3, #8
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d005      	beq.n	8006cb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cac:	4b53      	ldr	r3, [pc, #332]	; (8006dfc <HAL_RCC_ClockConfig+0x1bc>)
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	4a52      	ldr	r2, [pc, #328]	; (8006dfc <HAL_RCC_ClockConfig+0x1bc>)
 8006cb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006cb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cb8:	4b50      	ldr	r3, [pc, #320]	; (8006dfc <HAL_RCC_ClockConfig+0x1bc>)
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	494d      	ldr	r1, [pc, #308]	; (8006dfc <HAL_RCC_ClockConfig+0x1bc>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d044      	beq.n	8006d60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d107      	bne.n	8006cee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cde:	4b47      	ldr	r3, [pc, #284]	; (8006dfc <HAL_RCC_ClockConfig+0x1bc>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d119      	bne.n	8006d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e07f      	b.n	8006dee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d003      	beq.n	8006cfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cfa:	2b03      	cmp	r3, #3
 8006cfc:	d107      	bne.n	8006d0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cfe:	4b3f      	ldr	r3, [pc, #252]	; (8006dfc <HAL_RCC_ClockConfig+0x1bc>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d109      	bne.n	8006d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e06f      	b.n	8006dee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d0e:	4b3b      	ldr	r3, [pc, #236]	; (8006dfc <HAL_RCC_ClockConfig+0x1bc>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e067      	b.n	8006dee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d1e:	4b37      	ldr	r3, [pc, #220]	; (8006dfc <HAL_RCC_ClockConfig+0x1bc>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f023 0203 	bic.w	r2, r3, #3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	4934      	ldr	r1, [pc, #208]	; (8006dfc <HAL_RCC_ClockConfig+0x1bc>)
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d30:	f7fb fd5c 	bl	80027ec <HAL_GetTick>
 8006d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d36:	e00a      	b.n	8006d4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d38:	f7fb fd58 	bl	80027ec <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d901      	bls.n	8006d4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e04f      	b.n	8006dee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d4e:	4b2b      	ldr	r3, [pc, #172]	; (8006dfc <HAL_RCC_ClockConfig+0x1bc>)
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f003 020c 	and.w	r2, r3, #12
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d1eb      	bne.n	8006d38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d60:	4b25      	ldr	r3, [pc, #148]	; (8006df8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0307 	and.w	r3, r3, #7
 8006d68:	683a      	ldr	r2, [r7, #0]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d20c      	bcs.n	8006d88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d6e:	4b22      	ldr	r3, [pc, #136]	; (8006df8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	b2d2      	uxtb	r2, r2
 8006d74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d76:	4b20      	ldr	r3, [pc, #128]	; (8006df8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0307 	and.w	r3, r3, #7
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d001      	beq.n	8006d88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e032      	b.n	8006dee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0304 	and.w	r3, r3, #4
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d008      	beq.n	8006da6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d94:	4b19      	ldr	r3, [pc, #100]	; (8006dfc <HAL_RCC_ClockConfig+0x1bc>)
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	4916      	ldr	r1, [pc, #88]	; (8006dfc <HAL_RCC_ClockConfig+0x1bc>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0308 	and.w	r3, r3, #8
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d009      	beq.n	8006dc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006db2:	4b12      	ldr	r3, [pc, #72]	; (8006dfc <HAL_RCC_ClockConfig+0x1bc>)
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	00db      	lsls	r3, r3, #3
 8006dc0:	490e      	ldr	r1, [pc, #56]	; (8006dfc <HAL_RCC_ClockConfig+0x1bc>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006dc6:	f000 f821 	bl	8006e0c <HAL_RCC_GetSysClockFreq>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	4b0b      	ldr	r3, [pc, #44]	; (8006dfc <HAL_RCC_ClockConfig+0x1bc>)
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	091b      	lsrs	r3, r3, #4
 8006dd2:	f003 030f 	and.w	r3, r3, #15
 8006dd6:	490a      	ldr	r1, [pc, #40]	; (8006e00 <HAL_RCC_ClockConfig+0x1c0>)
 8006dd8:	5ccb      	ldrb	r3, [r1, r3]
 8006dda:	fa22 f303 	lsr.w	r3, r2, r3
 8006dde:	4a09      	ldr	r2, [pc, #36]	; (8006e04 <HAL_RCC_ClockConfig+0x1c4>)
 8006de0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006de2:	4b09      	ldr	r3, [pc, #36]	; (8006e08 <HAL_RCC_ClockConfig+0x1c8>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7fb fcbc 	bl	8002764 <HAL_InitTick>

  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	40023c00 	.word	0x40023c00
 8006dfc:	40023800 	.word	0x40023800
 8006e00:	080138b8 	.word	0x080138b8
 8006e04:	20000010 	.word	0x20000010
 8006e08:	20000014 	.word	0x20000014

08006e0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e10:	b094      	sub	sp, #80	; 0x50
 8006e12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e14:	2300      	movs	r3, #0
 8006e16:	647b      	str	r3, [r7, #68]	; 0x44
 8006e18:	2300      	movs	r3, #0
 8006e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e24:	4b79      	ldr	r3, [pc, #484]	; (800700c <HAL_RCC_GetSysClockFreq+0x200>)
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f003 030c 	and.w	r3, r3, #12
 8006e2c:	2b08      	cmp	r3, #8
 8006e2e:	d00d      	beq.n	8006e4c <HAL_RCC_GetSysClockFreq+0x40>
 8006e30:	2b08      	cmp	r3, #8
 8006e32:	f200 80e1 	bhi.w	8006ff8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d002      	beq.n	8006e40 <HAL_RCC_GetSysClockFreq+0x34>
 8006e3a:	2b04      	cmp	r3, #4
 8006e3c:	d003      	beq.n	8006e46 <HAL_RCC_GetSysClockFreq+0x3a>
 8006e3e:	e0db      	b.n	8006ff8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e40:	4b73      	ldr	r3, [pc, #460]	; (8007010 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e42:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006e44:	e0db      	b.n	8006ffe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e46:	4b73      	ldr	r3, [pc, #460]	; (8007014 <HAL_RCC_GetSysClockFreq+0x208>)
 8006e48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e4a:	e0d8      	b.n	8006ffe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e4c:	4b6f      	ldr	r3, [pc, #444]	; (800700c <HAL_RCC_GetSysClockFreq+0x200>)
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e54:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e56:	4b6d      	ldr	r3, [pc, #436]	; (800700c <HAL_RCC_GetSysClockFreq+0x200>)
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d063      	beq.n	8006f2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e62:	4b6a      	ldr	r3, [pc, #424]	; (800700c <HAL_RCC_GetSysClockFreq+0x200>)
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	099b      	lsrs	r3, r3, #6
 8006e68:	2200      	movs	r2, #0
 8006e6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e74:	633b      	str	r3, [r7, #48]	; 0x30
 8006e76:	2300      	movs	r3, #0
 8006e78:	637b      	str	r3, [r7, #52]	; 0x34
 8006e7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006e7e:	4622      	mov	r2, r4
 8006e80:	462b      	mov	r3, r5
 8006e82:	f04f 0000 	mov.w	r0, #0
 8006e86:	f04f 0100 	mov.w	r1, #0
 8006e8a:	0159      	lsls	r1, r3, #5
 8006e8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e90:	0150      	lsls	r0, r2, #5
 8006e92:	4602      	mov	r2, r0
 8006e94:	460b      	mov	r3, r1
 8006e96:	4621      	mov	r1, r4
 8006e98:	1a51      	subs	r1, r2, r1
 8006e9a:	6139      	str	r1, [r7, #16]
 8006e9c:	4629      	mov	r1, r5
 8006e9e:	eb63 0301 	sbc.w	r3, r3, r1
 8006ea2:	617b      	str	r3, [r7, #20]
 8006ea4:	f04f 0200 	mov.w	r2, #0
 8006ea8:	f04f 0300 	mov.w	r3, #0
 8006eac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006eb0:	4659      	mov	r1, fp
 8006eb2:	018b      	lsls	r3, r1, #6
 8006eb4:	4651      	mov	r1, sl
 8006eb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006eba:	4651      	mov	r1, sl
 8006ebc:	018a      	lsls	r2, r1, #6
 8006ebe:	4651      	mov	r1, sl
 8006ec0:	ebb2 0801 	subs.w	r8, r2, r1
 8006ec4:	4659      	mov	r1, fp
 8006ec6:	eb63 0901 	sbc.w	r9, r3, r1
 8006eca:	f04f 0200 	mov.w	r2, #0
 8006ece:	f04f 0300 	mov.w	r3, #0
 8006ed2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ed6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006eda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ede:	4690      	mov	r8, r2
 8006ee0:	4699      	mov	r9, r3
 8006ee2:	4623      	mov	r3, r4
 8006ee4:	eb18 0303 	adds.w	r3, r8, r3
 8006ee8:	60bb      	str	r3, [r7, #8]
 8006eea:	462b      	mov	r3, r5
 8006eec:	eb49 0303 	adc.w	r3, r9, r3
 8006ef0:	60fb      	str	r3, [r7, #12]
 8006ef2:	f04f 0200 	mov.w	r2, #0
 8006ef6:	f04f 0300 	mov.w	r3, #0
 8006efa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006efe:	4629      	mov	r1, r5
 8006f00:	024b      	lsls	r3, r1, #9
 8006f02:	4621      	mov	r1, r4
 8006f04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f08:	4621      	mov	r1, r4
 8006f0a:	024a      	lsls	r2, r1, #9
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	4619      	mov	r1, r3
 8006f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f12:	2200      	movs	r2, #0
 8006f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f1c:	f7f9 fec4 	bl	8000ca8 <__aeabi_uldivmod>
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	4613      	mov	r3, r2
 8006f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f28:	e058      	b.n	8006fdc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f2a:	4b38      	ldr	r3, [pc, #224]	; (800700c <HAL_RCC_GetSysClockFreq+0x200>)
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	099b      	lsrs	r3, r3, #6
 8006f30:	2200      	movs	r2, #0
 8006f32:	4618      	mov	r0, r3
 8006f34:	4611      	mov	r1, r2
 8006f36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006f3a:	623b      	str	r3, [r7, #32]
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006f44:	4642      	mov	r2, r8
 8006f46:	464b      	mov	r3, r9
 8006f48:	f04f 0000 	mov.w	r0, #0
 8006f4c:	f04f 0100 	mov.w	r1, #0
 8006f50:	0159      	lsls	r1, r3, #5
 8006f52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f56:	0150      	lsls	r0, r2, #5
 8006f58:	4602      	mov	r2, r0
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	4641      	mov	r1, r8
 8006f5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f62:	4649      	mov	r1, r9
 8006f64:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f68:	f04f 0200 	mov.w	r2, #0
 8006f6c:	f04f 0300 	mov.w	r3, #0
 8006f70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006f74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006f78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006f7c:	ebb2 040a 	subs.w	r4, r2, sl
 8006f80:	eb63 050b 	sbc.w	r5, r3, fp
 8006f84:	f04f 0200 	mov.w	r2, #0
 8006f88:	f04f 0300 	mov.w	r3, #0
 8006f8c:	00eb      	lsls	r3, r5, #3
 8006f8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f92:	00e2      	lsls	r2, r4, #3
 8006f94:	4614      	mov	r4, r2
 8006f96:	461d      	mov	r5, r3
 8006f98:	4643      	mov	r3, r8
 8006f9a:	18e3      	adds	r3, r4, r3
 8006f9c:	603b      	str	r3, [r7, #0]
 8006f9e:	464b      	mov	r3, r9
 8006fa0:	eb45 0303 	adc.w	r3, r5, r3
 8006fa4:	607b      	str	r3, [r7, #4]
 8006fa6:	f04f 0200 	mov.w	r2, #0
 8006faa:	f04f 0300 	mov.w	r3, #0
 8006fae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	028b      	lsls	r3, r1, #10
 8006fb6:	4621      	mov	r1, r4
 8006fb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006fbc:	4621      	mov	r1, r4
 8006fbe:	028a      	lsls	r2, r1, #10
 8006fc0:	4610      	mov	r0, r2
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	61bb      	str	r3, [r7, #24]
 8006fca:	61fa      	str	r2, [r7, #28]
 8006fcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fd0:	f7f9 fe6a 	bl	8000ca8 <__aeabi_uldivmod>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	4613      	mov	r3, r2
 8006fda:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006fdc:	4b0b      	ldr	r3, [pc, #44]	; (800700c <HAL_RCC_GetSysClockFreq+0x200>)
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	0c1b      	lsrs	r3, r3, #16
 8006fe2:	f003 0303 	and.w	r3, r3, #3
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	005b      	lsls	r3, r3, #1
 8006fea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006fec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006ff6:	e002      	b.n	8006ffe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ff8:	4b05      	ldr	r3, [pc, #20]	; (8007010 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ffa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006ffc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007000:	4618      	mov	r0, r3
 8007002:	3750      	adds	r7, #80	; 0x50
 8007004:	46bd      	mov	sp, r7
 8007006:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800700a:	bf00      	nop
 800700c:	40023800 	.word	0x40023800
 8007010:	00f42400 	.word	0x00f42400
 8007014:	007a1200 	.word	0x007a1200

08007018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007018:	b480      	push	{r7}
 800701a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800701c:	4b03      	ldr	r3, [pc, #12]	; (800702c <HAL_RCC_GetHCLKFreq+0x14>)
 800701e:	681b      	ldr	r3, [r3, #0]
}
 8007020:	4618      	mov	r0, r3
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	20000010 	.word	0x20000010

08007030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007034:	f7ff fff0 	bl	8007018 <HAL_RCC_GetHCLKFreq>
 8007038:	4602      	mov	r2, r0
 800703a:	4b05      	ldr	r3, [pc, #20]	; (8007050 <HAL_RCC_GetPCLK1Freq+0x20>)
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	0a9b      	lsrs	r3, r3, #10
 8007040:	f003 0307 	and.w	r3, r3, #7
 8007044:	4903      	ldr	r1, [pc, #12]	; (8007054 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007046:	5ccb      	ldrb	r3, [r1, r3]
 8007048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800704c:	4618      	mov	r0, r3
 800704e:	bd80      	pop	{r7, pc}
 8007050:	40023800 	.word	0x40023800
 8007054:	080138c8 	.word	0x080138c8

08007058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800705c:	f7ff ffdc 	bl	8007018 <HAL_RCC_GetHCLKFreq>
 8007060:	4602      	mov	r2, r0
 8007062:	4b05      	ldr	r3, [pc, #20]	; (8007078 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	0b5b      	lsrs	r3, r3, #13
 8007068:	f003 0307 	and.w	r3, r3, #7
 800706c:	4903      	ldr	r1, [pc, #12]	; (800707c <HAL_RCC_GetPCLK2Freq+0x24>)
 800706e:	5ccb      	ldrb	r3, [r1, r3]
 8007070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007074:	4618      	mov	r0, r3
 8007076:	bd80      	pop	{r7, pc}
 8007078:	40023800 	.word	0x40023800
 800707c:	080138c8 	.word	0x080138c8

08007080 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e07b      	b.n	800718a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007096:	2b00      	cmp	r3, #0
 8007098:	d108      	bne.n	80070ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070a2:	d009      	beq.n	80070b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	61da      	str	r2, [r3, #28]
 80070aa:	e005      	b.n	80070b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d106      	bne.n	80070d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7fa fff4 	bl	80020c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2202      	movs	r2, #2
 80070dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007100:	431a      	orrs	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800710a:	431a      	orrs	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	f003 0302 	and.w	r3, r3, #2
 8007114:	431a      	orrs	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	431a      	orrs	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007128:	431a      	orrs	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007132:	431a      	orrs	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a1b      	ldr	r3, [r3, #32]
 8007138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800713c:	ea42 0103 	orr.w	r1, r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007144:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	430a      	orrs	r2, r1
 800714e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	0c1b      	lsrs	r3, r3, #16
 8007156:	f003 0104 	and.w	r1, r3, #4
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715e:	f003 0210 	and.w	r2, r3, #16
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	69da      	ldr	r2, [r3, #28]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007178:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b082      	sub	sp, #8
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e041      	b.n	8007228 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d106      	bne.n	80071be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f7fa ffc9 	bl	8002150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2202      	movs	r2, #2
 80071c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	3304      	adds	r3, #4
 80071ce:	4619      	mov	r1, r3
 80071d0:	4610      	mov	r0, r2
 80071d2:	f000 fad9 	bl	8007788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e041      	b.n	80072c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b00      	cmp	r3, #0
 800724c:	d106      	bne.n	800725c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f839 	bl	80072ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2202      	movs	r2, #2
 8007260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	3304      	adds	r3, #4
 800726c:	4619      	mov	r1, r3
 800726e:	4610      	mov	r0, r2
 8007270:	f000 fa8a 	bl	8007788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b083      	sub	sp, #12
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80072d6:	bf00      	nop
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
	...

080072e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d109      	bne.n	8007308 <HAL_TIM_PWM_Start+0x24>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	bf14      	ite	ne
 8007300:	2301      	movne	r3, #1
 8007302:	2300      	moveq	r3, #0
 8007304:	b2db      	uxtb	r3, r3
 8007306:	e022      	b.n	800734e <HAL_TIM_PWM_Start+0x6a>
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	2b04      	cmp	r3, #4
 800730c:	d109      	bne.n	8007322 <HAL_TIM_PWM_Start+0x3e>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b01      	cmp	r3, #1
 8007318:	bf14      	ite	ne
 800731a:	2301      	movne	r3, #1
 800731c:	2300      	moveq	r3, #0
 800731e:	b2db      	uxtb	r3, r3
 8007320:	e015      	b.n	800734e <HAL_TIM_PWM_Start+0x6a>
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	2b08      	cmp	r3, #8
 8007326:	d109      	bne.n	800733c <HAL_TIM_PWM_Start+0x58>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800732e:	b2db      	uxtb	r3, r3
 8007330:	2b01      	cmp	r3, #1
 8007332:	bf14      	ite	ne
 8007334:	2301      	movne	r3, #1
 8007336:	2300      	moveq	r3, #0
 8007338:	b2db      	uxtb	r3, r3
 800733a:	e008      	b.n	800734e <HAL_TIM_PWM_Start+0x6a>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007342:	b2db      	uxtb	r3, r3
 8007344:	2b01      	cmp	r3, #1
 8007346:	bf14      	ite	ne
 8007348:	2301      	movne	r3, #1
 800734a:	2300      	moveq	r3, #0
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e07c      	b.n	8007450 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d104      	bne.n	8007366 <HAL_TIM_PWM_Start+0x82>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2202      	movs	r2, #2
 8007360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007364:	e013      	b.n	800738e <HAL_TIM_PWM_Start+0xaa>
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	2b04      	cmp	r3, #4
 800736a:	d104      	bne.n	8007376 <HAL_TIM_PWM_Start+0x92>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2202      	movs	r2, #2
 8007370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007374:	e00b      	b.n	800738e <HAL_TIM_PWM_Start+0xaa>
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2b08      	cmp	r3, #8
 800737a:	d104      	bne.n	8007386 <HAL_TIM_PWM_Start+0xa2>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2202      	movs	r2, #2
 8007380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007384:	e003      	b.n	800738e <HAL_TIM_PWM_Start+0xaa>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2202      	movs	r2, #2
 800738a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2201      	movs	r2, #1
 8007394:	6839      	ldr	r1, [r7, #0]
 8007396:	4618      	mov	r0, r3
 8007398:	f000 fcec 	bl	8007d74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a2d      	ldr	r2, [pc, #180]	; (8007458 <HAL_TIM_PWM_Start+0x174>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d004      	beq.n	80073b0 <HAL_TIM_PWM_Start+0xcc>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a2c      	ldr	r2, [pc, #176]	; (800745c <HAL_TIM_PWM_Start+0x178>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d101      	bne.n	80073b4 <HAL_TIM_PWM_Start+0xd0>
 80073b0:	2301      	movs	r3, #1
 80073b2:	e000      	b.n	80073b6 <HAL_TIM_PWM_Start+0xd2>
 80073b4:	2300      	movs	r3, #0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d007      	beq.n	80073ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a22      	ldr	r2, [pc, #136]	; (8007458 <HAL_TIM_PWM_Start+0x174>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d022      	beq.n	800741a <HAL_TIM_PWM_Start+0x136>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073dc:	d01d      	beq.n	800741a <HAL_TIM_PWM_Start+0x136>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a1f      	ldr	r2, [pc, #124]	; (8007460 <HAL_TIM_PWM_Start+0x17c>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d018      	beq.n	800741a <HAL_TIM_PWM_Start+0x136>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a1d      	ldr	r2, [pc, #116]	; (8007464 <HAL_TIM_PWM_Start+0x180>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d013      	beq.n	800741a <HAL_TIM_PWM_Start+0x136>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a1c      	ldr	r2, [pc, #112]	; (8007468 <HAL_TIM_PWM_Start+0x184>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d00e      	beq.n	800741a <HAL_TIM_PWM_Start+0x136>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a16      	ldr	r2, [pc, #88]	; (800745c <HAL_TIM_PWM_Start+0x178>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d009      	beq.n	800741a <HAL_TIM_PWM_Start+0x136>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a18      	ldr	r2, [pc, #96]	; (800746c <HAL_TIM_PWM_Start+0x188>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d004      	beq.n	800741a <HAL_TIM_PWM_Start+0x136>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a16      	ldr	r2, [pc, #88]	; (8007470 <HAL_TIM_PWM_Start+0x18c>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d111      	bne.n	800743e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f003 0307 	and.w	r3, r3, #7
 8007424:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2b06      	cmp	r3, #6
 800742a:	d010      	beq.n	800744e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f042 0201 	orr.w	r2, r2, #1
 800743a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800743c:	e007      	b.n	800744e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f042 0201 	orr.w	r2, r2, #1
 800744c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	40010000 	.word	0x40010000
 800745c:	40010400 	.word	0x40010400
 8007460:	40000400 	.word	0x40000400
 8007464:	40000800 	.word	0x40000800
 8007468:	40000c00 	.word	0x40000c00
 800746c:	40014000 	.word	0x40014000
 8007470:	40001800 	.word	0x40001800

08007474 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007480:	2300      	movs	r3, #0
 8007482:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800748a:	2b01      	cmp	r3, #1
 800748c:	d101      	bne.n	8007492 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800748e:	2302      	movs	r3, #2
 8007490:	e0ae      	b.n	80075f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b0c      	cmp	r3, #12
 800749e:	f200 809f 	bhi.w	80075e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80074a2:	a201      	add	r2, pc, #4	; (adr r2, 80074a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80074a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a8:	080074dd 	.word	0x080074dd
 80074ac:	080075e1 	.word	0x080075e1
 80074b0:	080075e1 	.word	0x080075e1
 80074b4:	080075e1 	.word	0x080075e1
 80074b8:	0800751d 	.word	0x0800751d
 80074bc:	080075e1 	.word	0x080075e1
 80074c0:	080075e1 	.word	0x080075e1
 80074c4:	080075e1 	.word	0x080075e1
 80074c8:	0800755f 	.word	0x0800755f
 80074cc:	080075e1 	.word	0x080075e1
 80074d0:	080075e1 	.word	0x080075e1
 80074d4:	080075e1 	.word	0x080075e1
 80074d8:	0800759f 	.word	0x0800759f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68b9      	ldr	r1, [r7, #8]
 80074e2:	4618      	mov	r0, r3
 80074e4:	f000 f9fc 	bl	80078e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	699a      	ldr	r2, [r3, #24]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f042 0208 	orr.w	r2, r2, #8
 80074f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	699a      	ldr	r2, [r3, #24]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f022 0204 	bic.w	r2, r2, #4
 8007506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6999      	ldr	r1, [r3, #24]
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	691a      	ldr	r2, [r3, #16]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	430a      	orrs	r2, r1
 8007518:	619a      	str	r2, [r3, #24]
      break;
 800751a:	e064      	b.n	80075e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68b9      	ldr	r1, [r7, #8]
 8007522:	4618      	mov	r0, r3
 8007524:	f000 fa4c 	bl	80079c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	699a      	ldr	r2, [r3, #24]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	699a      	ldr	r2, [r3, #24]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6999      	ldr	r1, [r3, #24]
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	021a      	lsls	r2, r3, #8
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	619a      	str	r2, [r3, #24]
      break;
 800755c:	e043      	b.n	80075e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68b9      	ldr	r1, [r7, #8]
 8007564:	4618      	mov	r0, r3
 8007566:	f000 faa1 	bl	8007aac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	69da      	ldr	r2, [r3, #28]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f042 0208 	orr.w	r2, r2, #8
 8007578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	69da      	ldr	r2, [r3, #28]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f022 0204 	bic.w	r2, r2, #4
 8007588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	69d9      	ldr	r1, [r3, #28]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	691a      	ldr	r2, [r3, #16]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	430a      	orrs	r2, r1
 800759a:	61da      	str	r2, [r3, #28]
      break;
 800759c:	e023      	b.n	80075e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68b9      	ldr	r1, [r7, #8]
 80075a4:	4618      	mov	r0, r3
 80075a6:	f000 faf5 	bl	8007b94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	69da      	ldr	r2, [r3, #28]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	69da      	ldr	r2, [r3, #28]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	69d9      	ldr	r1, [r3, #28]
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	021a      	lsls	r2, r3, #8
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	430a      	orrs	r2, r1
 80075dc:	61da      	str	r2, [r3, #28]
      break;
 80075de:	e002      	b.n	80075e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	75fb      	strb	r3, [r7, #23]
      break;
 80075e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007602:	2300      	movs	r3, #0
 8007604:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800760c:	2b01      	cmp	r3, #1
 800760e:	d101      	bne.n	8007614 <HAL_TIM_ConfigClockSource+0x1c>
 8007610:	2302      	movs	r3, #2
 8007612:	e0b4      	b.n	800777e <HAL_TIM_ConfigClockSource+0x186>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800763a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800764c:	d03e      	beq.n	80076cc <HAL_TIM_ConfigClockSource+0xd4>
 800764e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007652:	f200 8087 	bhi.w	8007764 <HAL_TIM_ConfigClockSource+0x16c>
 8007656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800765a:	f000 8086 	beq.w	800776a <HAL_TIM_ConfigClockSource+0x172>
 800765e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007662:	d87f      	bhi.n	8007764 <HAL_TIM_ConfigClockSource+0x16c>
 8007664:	2b70      	cmp	r3, #112	; 0x70
 8007666:	d01a      	beq.n	800769e <HAL_TIM_ConfigClockSource+0xa6>
 8007668:	2b70      	cmp	r3, #112	; 0x70
 800766a:	d87b      	bhi.n	8007764 <HAL_TIM_ConfigClockSource+0x16c>
 800766c:	2b60      	cmp	r3, #96	; 0x60
 800766e:	d050      	beq.n	8007712 <HAL_TIM_ConfigClockSource+0x11a>
 8007670:	2b60      	cmp	r3, #96	; 0x60
 8007672:	d877      	bhi.n	8007764 <HAL_TIM_ConfigClockSource+0x16c>
 8007674:	2b50      	cmp	r3, #80	; 0x50
 8007676:	d03c      	beq.n	80076f2 <HAL_TIM_ConfigClockSource+0xfa>
 8007678:	2b50      	cmp	r3, #80	; 0x50
 800767a:	d873      	bhi.n	8007764 <HAL_TIM_ConfigClockSource+0x16c>
 800767c:	2b40      	cmp	r3, #64	; 0x40
 800767e:	d058      	beq.n	8007732 <HAL_TIM_ConfigClockSource+0x13a>
 8007680:	2b40      	cmp	r3, #64	; 0x40
 8007682:	d86f      	bhi.n	8007764 <HAL_TIM_ConfigClockSource+0x16c>
 8007684:	2b30      	cmp	r3, #48	; 0x30
 8007686:	d064      	beq.n	8007752 <HAL_TIM_ConfigClockSource+0x15a>
 8007688:	2b30      	cmp	r3, #48	; 0x30
 800768a:	d86b      	bhi.n	8007764 <HAL_TIM_ConfigClockSource+0x16c>
 800768c:	2b20      	cmp	r3, #32
 800768e:	d060      	beq.n	8007752 <HAL_TIM_ConfigClockSource+0x15a>
 8007690:	2b20      	cmp	r3, #32
 8007692:	d867      	bhi.n	8007764 <HAL_TIM_ConfigClockSource+0x16c>
 8007694:	2b00      	cmp	r3, #0
 8007696:	d05c      	beq.n	8007752 <HAL_TIM_ConfigClockSource+0x15a>
 8007698:	2b10      	cmp	r3, #16
 800769a:	d05a      	beq.n	8007752 <HAL_TIM_ConfigClockSource+0x15a>
 800769c:	e062      	b.n	8007764 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076ae:	f000 fb41 	bl	8007d34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	609a      	str	r2, [r3, #8]
      break;
 80076ca:	e04f      	b.n	800776c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076dc:	f000 fb2a 	bl	8007d34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689a      	ldr	r2, [r3, #8]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076ee:	609a      	str	r2, [r3, #8]
      break;
 80076f0:	e03c      	b.n	800776c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076fe:	461a      	mov	r2, r3
 8007700:	f000 fa9e 	bl	8007c40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2150      	movs	r1, #80	; 0x50
 800770a:	4618      	mov	r0, r3
 800770c:	f000 faf7 	bl	8007cfe <TIM_ITRx_SetConfig>
      break;
 8007710:	e02c      	b.n	800776c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800771e:	461a      	mov	r2, r3
 8007720:	f000 fabd 	bl	8007c9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2160      	movs	r1, #96	; 0x60
 800772a:	4618      	mov	r0, r3
 800772c:	f000 fae7 	bl	8007cfe <TIM_ITRx_SetConfig>
      break;
 8007730:	e01c      	b.n	800776c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800773e:	461a      	mov	r2, r3
 8007740:	f000 fa7e 	bl	8007c40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2140      	movs	r1, #64	; 0x40
 800774a:	4618      	mov	r0, r3
 800774c:	f000 fad7 	bl	8007cfe <TIM_ITRx_SetConfig>
      break;
 8007750:	e00c      	b.n	800776c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4619      	mov	r1, r3
 800775c:	4610      	mov	r0, r2
 800775e:	f000 face 	bl	8007cfe <TIM_ITRx_SetConfig>
      break;
 8007762:	e003      	b.n	800776c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	73fb      	strb	r3, [r7, #15]
      break;
 8007768:	e000      	b.n	800776c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800776a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800777c:	7bfb      	ldrb	r3, [r7, #15]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
	...

08007788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a46      	ldr	r2, [pc, #280]	; (80078b4 <TIM_Base_SetConfig+0x12c>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d013      	beq.n	80077c8 <TIM_Base_SetConfig+0x40>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077a6:	d00f      	beq.n	80077c8 <TIM_Base_SetConfig+0x40>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a43      	ldr	r2, [pc, #268]	; (80078b8 <TIM_Base_SetConfig+0x130>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d00b      	beq.n	80077c8 <TIM_Base_SetConfig+0x40>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a42      	ldr	r2, [pc, #264]	; (80078bc <TIM_Base_SetConfig+0x134>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d007      	beq.n	80077c8 <TIM_Base_SetConfig+0x40>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a41      	ldr	r2, [pc, #260]	; (80078c0 <TIM_Base_SetConfig+0x138>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d003      	beq.n	80077c8 <TIM_Base_SetConfig+0x40>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a40      	ldr	r2, [pc, #256]	; (80078c4 <TIM_Base_SetConfig+0x13c>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d108      	bne.n	80077da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a35      	ldr	r2, [pc, #212]	; (80078b4 <TIM_Base_SetConfig+0x12c>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d02b      	beq.n	800783a <TIM_Base_SetConfig+0xb2>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077e8:	d027      	beq.n	800783a <TIM_Base_SetConfig+0xb2>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a32      	ldr	r2, [pc, #200]	; (80078b8 <TIM_Base_SetConfig+0x130>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d023      	beq.n	800783a <TIM_Base_SetConfig+0xb2>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a31      	ldr	r2, [pc, #196]	; (80078bc <TIM_Base_SetConfig+0x134>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d01f      	beq.n	800783a <TIM_Base_SetConfig+0xb2>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a30      	ldr	r2, [pc, #192]	; (80078c0 <TIM_Base_SetConfig+0x138>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d01b      	beq.n	800783a <TIM_Base_SetConfig+0xb2>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a2f      	ldr	r2, [pc, #188]	; (80078c4 <TIM_Base_SetConfig+0x13c>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d017      	beq.n	800783a <TIM_Base_SetConfig+0xb2>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a2e      	ldr	r2, [pc, #184]	; (80078c8 <TIM_Base_SetConfig+0x140>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d013      	beq.n	800783a <TIM_Base_SetConfig+0xb2>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a2d      	ldr	r2, [pc, #180]	; (80078cc <TIM_Base_SetConfig+0x144>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d00f      	beq.n	800783a <TIM_Base_SetConfig+0xb2>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a2c      	ldr	r2, [pc, #176]	; (80078d0 <TIM_Base_SetConfig+0x148>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d00b      	beq.n	800783a <TIM_Base_SetConfig+0xb2>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a2b      	ldr	r2, [pc, #172]	; (80078d4 <TIM_Base_SetConfig+0x14c>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d007      	beq.n	800783a <TIM_Base_SetConfig+0xb2>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a2a      	ldr	r2, [pc, #168]	; (80078d8 <TIM_Base_SetConfig+0x150>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d003      	beq.n	800783a <TIM_Base_SetConfig+0xb2>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a29      	ldr	r2, [pc, #164]	; (80078dc <TIM_Base_SetConfig+0x154>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d108      	bne.n	800784c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	4313      	orrs	r3, r2
 800784a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	695b      	ldr	r3, [r3, #20]
 8007856:	4313      	orrs	r3, r2
 8007858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	689a      	ldr	r2, [r3, #8]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a10      	ldr	r2, [pc, #64]	; (80078b4 <TIM_Base_SetConfig+0x12c>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d003      	beq.n	8007880 <TIM_Base_SetConfig+0xf8>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a12      	ldr	r2, [pc, #72]	; (80078c4 <TIM_Base_SetConfig+0x13c>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d103      	bne.n	8007888 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	691a      	ldr	r2, [r3, #16]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	2b01      	cmp	r3, #1
 8007898:	d105      	bne.n	80078a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	f023 0201 	bic.w	r2, r3, #1
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	611a      	str	r2, [r3, #16]
  }
}
 80078a6:	bf00      	nop
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	40010000 	.word	0x40010000
 80078b8:	40000400 	.word	0x40000400
 80078bc:	40000800 	.word	0x40000800
 80078c0:	40000c00 	.word	0x40000c00
 80078c4:	40010400 	.word	0x40010400
 80078c8:	40014000 	.word	0x40014000
 80078cc:	40014400 	.word	0x40014400
 80078d0:	40014800 	.word	0x40014800
 80078d4:	40001800 	.word	0x40001800
 80078d8:	40001c00 	.word	0x40001c00
 80078dc:	40002000 	.word	0x40002000

080078e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a1b      	ldr	r3, [r3, #32]
 80078f4:	f023 0201 	bic.w	r2, r3, #1
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800790e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f023 0303 	bic.w	r3, r3, #3
 8007916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	4313      	orrs	r3, r2
 8007920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	f023 0302 	bic.w	r3, r3, #2
 8007928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	697a      	ldr	r2, [r7, #20]
 8007930:	4313      	orrs	r3, r2
 8007932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a20      	ldr	r2, [pc, #128]	; (80079b8 <TIM_OC1_SetConfig+0xd8>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d003      	beq.n	8007944 <TIM_OC1_SetConfig+0x64>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a1f      	ldr	r2, [pc, #124]	; (80079bc <TIM_OC1_SetConfig+0xdc>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d10c      	bne.n	800795e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	f023 0308 	bic.w	r3, r3, #8
 800794a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	4313      	orrs	r3, r2
 8007954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f023 0304 	bic.w	r3, r3, #4
 800795c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a15      	ldr	r2, [pc, #84]	; (80079b8 <TIM_OC1_SetConfig+0xd8>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d003      	beq.n	800796e <TIM_OC1_SetConfig+0x8e>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a14      	ldr	r2, [pc, #80]	; (80079bc <TIM_OC1_SetConfig+0xdc>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d111      	bne.n	8007992 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800797c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	4313      	orrs	r3, r2
 8007986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	4313      	orrs	r3, r2
 8007990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	685a      	ldr	r2, [r3, #4]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	621a      	str	r2, [r3, #32]
}
 80079ac:	bf00      	nop
 80079ae:	371c      	adds	r7, #28
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	40010000 	.word	0x40010000
 80079bc:	40010400 	.word	0x40010400

080079c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b087      	sub	sp, #28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a1b      	ldr	r3, [r3, #32]
 80079ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a1b      	ldr	r3, [r3, #32]
 80079d4:	f023 0210 	bic.w	r2, r3, #16
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	021b      	lsls	r3, r3, #8
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	f023 0320 	bic.w	r3, r3, #32
 8007a0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	011b      	lsls	r3, r3, #4
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a22      	ldr	r2, [pc, #136]	; (8007aa4 <TIM_OC2_SetConfig+0xe4>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d003      	beq.n	8007a28 <TIM_OC2_SetConfig+0x68>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a21      	ldr	r2, [pc, #132]	; (8007aa8 <TIM_OC2_SetConfig+0xe8>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d10d      	bne.n	8007a44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	011b      	lsls	r3, r3, #4
 8007a36:	697a      	ldr	r2, [r7, #20]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a17      	ldr	r2, [pc, #92]	; (8007aa4 <TIM_OC2_SetConfig+0xe4>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d003      	beq.n	8007a54 <TIM_OC2_SetConfig+0x94>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a16      	ldr	r2, [pc, #88]	; (8007aa8 <TIM_OC2_SetConfig+0xe8>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d113      	bne.n	8007a7c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	695b      	ldr	r3, [r3, #20]
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	697a      	ldr	r2, [r7, #20]
 8007a94:	621a      	str	r2, [r3, #32]
}
 8007a96:	bf00      	nop
 8007a98:	371c      	adds	r7, #28
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	40010000 	.word	0x40010000
 8007aa8:	40010400 	.word	0x40010400

08007aac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b087      	sub	sp, #28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a1b      	ldr	r3, [r3, #32]
 8007aba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a1b      	ldr	r3, [r3, #32]
 8007ac0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 0303 	bic.w	r3, r3, #3
 8007ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	021b      	lsls	r3, r3, #8
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a21      	ldr	r2, [pc, #132]	; (8007b8c <TIM_OC3_SetConfig+0xe0>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d003      	beq.n	8007b12 <TIM_OC3_SetConfig+0x66>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a20      	ldr	r2, [pc, #128]	; (8007b90 <TIM_OC3_SetConfig+0xe4>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d10d      	bne.n	8007b2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	021b      	lsls	r3, r3, #8
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a16      	ldr	r2, [pc, #88]	; (8007b8c <TIM_OC3_SetConfig+0xe0>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d003      	beq.n	8007b3e <TIM_OC3_SetConfig+0x92>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a15      	ldr	r2, [pc, #84]	; (8007b90 <TIM_OC3_SetConfig+0xe4>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d113      	bne.n	8007b66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	695b      	ldr	r3, [r3, #20]
 8007b52:	011b      	lsls	r3, r3, #4
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	011b      	lsls	r3, r3, #4
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	685a      	ldr	r2, [r3, #4]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	621a      	str	r2, [r3, #32]
}
 8007b80:	bf00      	nop
 8007b82:	371c      	adds	r7, #28
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	40010000 	.word	0x40010000
 8007b90:	40010400 	.word	0x40010400

08007b94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b087      	sub	sp, #28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a1b      	ldr	r3, [r3, #32]
 8007ba8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	69db      	ldr	r3, [r3, #28]
 8007bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	021b      	lsls	r3, r3, #8
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	031b      	lsls	r3, r3, #12
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a12      	ldr	r2, [pc, #72]	; (8007c38 <TIM_OC4_SetConfig+0xa4>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d003      	beq.n	8007bfc <TIM_OC4_SetConfig+0x68>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a11      	ldr	r2, [pc, #68]	; (8007c3c <TIM_OC4_SetConfig+0xa8>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d109      	bne.n	8007c10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	695b      	ldr	r3, [r3, #20]
 8007c08:	019b      	lsls	r3, r3, #6
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	685a      	ldr	r2, [r3, #4]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	693a      	ldr	r2, [r7, #16]
 8007c28:	621a      	str	r2, [r3, #32]
}
 8007c2a:	bf00      	nop
 8007c2c:	371c      	adds	r7, #28
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	40010000 	.word	0x40010000
 8007c3c:	40010400 	.word	0x40010400

08007c40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b087      	sub	sp, #28
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6a1b      	ldr	r3, [r3, #32]
 8007c50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6a1b      	ldr	r3, [r3, #32]
 8007c56:	f023 0201 	bic.w	r2, r3, #1
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	699b      	ldr	r3, [r3, #24]
 8007c62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	011b      	lsls	r3, r3, #4
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	f023 030a 	bic.w	r3, r3, #10
 8007c7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c7e:	697a      	ldr	r2, [r7, #20]
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	621a      	str	r2, [r3, #32]
}
 8007c92:	bf00      	nop
 8007c94:	371c      	adds	r7, #28
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b087      	sub	sp, #28
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	60f8      	str	r0, [r7, #12]
 8007ca6:	60b9      	str	r1, [r7, #8]
 8007ca8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6a1b      	ldr	r3, [r3, #32]
 8007cb4:	f023 0210 	bic.w	r2, r3, #16
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	031b      	lsls	r3, r3, #12
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007cda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	011b      	lsls	r3, r3, #4
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	621a      	str	r2, [r3, #32]
}
 8007cf2:	bf00      	nop
 8007cf4:	371c      	adds	r7, #28
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b085      	sub	sp, #20
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	f043 0307 	orr.w	r3, r3, #7
 8007d20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	609a      	str	r2, [r3, #8]
}
 8007d28:	bf00      	nop
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b087      	sub	sp, #28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
 8007d40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	021a      	lsls	r2, r3, #8
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	431a      	orrs	r2, r3
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	697a      	ldr	r2, [r7, #20]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	609a      	str	r2, [r3, #8]
}
 8007d68:	bf00      	nop
 8007d6a:	371c      	adds	r7, #28
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b087      	sub	sp, #28
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f003 031f 	and.w	r3, r3, #31
 8007d86:	2201      	movs	r2, #1
 8007d88:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6a1a      	ldr	r2, [r3, #32]
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	43db      	mvns	r3, r3
 8007d96:	401a      	ands	r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6a1a      	ldr	r2, [r3, #32]
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	f003 031f 	and.w	r3, r3, #31
 8007da6:	6879      	ldr	r1, [r7, #4]
 8007da8:	fa01 f303 	lsl.w	r3, r1, r3
 8007dac:	431a      	orrs	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	621a      	str	r2, [r3, #32]
}
 8007db2:	bf00      	nop
 8007db4:	371c      	adds	r7, #28
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
	...

08007dc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d101      	bne.n	8007dd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	e05a      	b.n	8007e8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2202      	movs	r2, #2
 8007de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a21      	ldr	r2, [pc, #132]	; (8007e9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d022      	beq.n	8007e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e24:	d01d      	beq.n	8007e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a1d      	ldr	r2, [pc, #116]	; (8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d018      	beq.n	8007e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a1b      	ldr	r2, [pc, #108]	; (8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d013      	beq.n	8007e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a1a      	ldr	r2, [pc, #104]	; (8007ea8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d00e      	beq.n	8007e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a18      	ldr	r2, [pc, #96]	; (8007eac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d009      	beq.n	8007e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a17      	ldr	r2, [pc, #92]	; (8007eb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d004      	beq.n	8007e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a15      	ldr	r2, [pc, #84]	; (8007eb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d10c      	bne.n	8007e7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3714      	adds	r7, #20
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	40010000 	.word	0x40010000
 8007ea0:	40000400 	.word	0x40000400
 8007ea4:	40000800 	.word	0x40000800
 8007ea8:	40000c00 	.word	0x40000c00
 8007eac:	40010400 	.word	0x40010400
 8007eb0:	40014000 	.word	0x40014000
 8007eb4:	40001800 	.word	0x40001800

08007eb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d101      	bne.n	8007ed4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ed0:	2302      	movs	r3, #2
 8007ed2:	e03d      	b.n	8007f50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	695b      	ldr	r3, [r3, #20]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	69db      	ldr	r3, [r3, #28]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e042      	b.n	8007ff4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d106      	bne.n	8007f88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7fa f940 	bl	8002208 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2224      	movs	r2, #36	; 0x24
 8007f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68da      	ldr	r2, [r3, #12]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fdbd 	bl	8008b20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	691a      	ldr	r2, [r3, #16]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	695a      	ldr	r2, [r3, #20]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68da      	ldr	r2, [r3, #12]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2220      	movs	r2, #32
 8007fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2220      	movs	r2, #32
 8007fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b08a      	sub	sp, #40	; 0x28
 8008000:	af02      	add	r7, sp, #8
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	603b      	str	r3, [r7, #0]
 8008008:	4613      	mov	r3, r2
 800800a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800800c:	2300      	movs	r3, #0
 800800e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008016:	b2db      	uxtb	r3, r3
 8008018:	2b20      	cmp	r3, #32
 800801a:	d175      	bne.n	8008108 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d002      	beq.n	8008028 <HAL_UART_Transmit+0x2c>
 8008022:	88fb      	ldrh	r3, [r7, #6]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e06e      	b.n	800810a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2221      	movs	r2, #33	; 0x21
 8008036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800803a:	f7fa fbd7 	bl	80027ec <HAL_GetTick>
 800803e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	88fa      	ldrh	r2, [r7, #6]
 8008044:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	88fa      	ldrh	r2, [r7, #6]
 800804a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008054:	d108      	bne.n	8008068 <HAL_UART_Transmit+0x6c>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d104      	bne.n	8008068 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800805e:	2300      	movs	r3, #0
 8008060:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	61bb      	str	r3, [r7, #24]
 8008066:	e003      	b.n	8008070 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800806c:	2300      	movs	r3, #0
 800806e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008070:	e02e      	b.n	80080d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	2200      	movs	r2, #0
 800807a:	2180      	movs	r1, #128	; 0x80
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 fb1f 	bl	80086c0 <UART_WaitOnFlagUntilTimeout>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d005      	beq.n	8008094 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2220      	movs	r2, #32
 800808c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8008090:	2303      	movs	r3, #3
 8008092:	e03a      	b.n	800810a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10b      	bne.n	80080b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	881b      	ldrh	r3, [r3, #0]
 800809e:	461a      	mov	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	3302      	adds	r3, #2
 80080ae:	61bb      	str	r3, [r7, #24]
 80080b0:	e007      	b.n	80080c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	781a      	ldrb	r2, [r3, #0]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	3301      	adds	r3, #1
 80080c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	3b01      	subs	r3, #1
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1cb      	bne.n	8008072 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	9300      	str	r3, [sp, #0]
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	2200      	movs	r2, #0
 80080e2:	2140      	movs	r1, #64	; 0x40
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f000 faeb 	bl	80086c0 <UART_WaitOnFlagUntilTimeout>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d005      	beq.n	80080fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2220      	movs	r2, #32
 80080f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e006      	b.n	800810a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2220      	movs	r2, #32
 8008100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	e000      	b.n	800810a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008108:	2302      	movs	r3, #2
  }
}
 800810a:	4618      	mov	r0, r3
 800810c:	3720      	adds	r7, #32
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b084      	sub	sp, #16
 8008116:	af00      	add	r7, sp, #0
 8008118:	60f8      	str	r0, [r7, #12]
 800811a:	60b9      	str	r1, [r7, #8]
 800811c:	4613      	mov	r3, r2
 800811e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008126:	b2db      	uxtb	r3, r3
 8008128:	2b20      	cmp	r3, #32
 800812a:	d112      	bne.n	8008152 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d002      	beq.n	8008138 <HAL_UART_Receive_IT+0x26>
 8008132:	88fb      	ldrh	r3, [r7, #6]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d101      	bne.n	800813c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	e00b      	b.n	8008154 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008142:	88fb      	ldrh	r3, [r7, #6]
 8008144:	461a      	mov	r2, r3
 8008146:	68b9      	ldr	r1, [r7, #8]
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f000 fb12 	bl	8008772 <UART_Start_Receive_IT>
 800814e:	4603      	mov	r3, r0
 8008150:	e000      	b.n	8008154 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008152:	2302      	movs	r3, #2
  }
}
 8008154:	4618      	mov	r0, r3
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b0ba      	sub	sp, #232	; 0xe8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008182:	2300      	movs	r3, #0
 8008184:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008188:	2300      	movs	r3, #0
 800818a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800818e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008192:	f003 030f 	and.w	r3, r3, #15
 8008196:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800819a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d10f      	bne.n	80081c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081a6:	f003 0320 	and.w	r3, r3, #32
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d009      	beq.n	80081c2 <HAL_UART_IRQHandler+0x66>
 80081ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081b2:	f003 0320 	and.w	r3, r3, #32
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d003      	beq.n	80081c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 fbf2 	bl	80089a4 <UART_Receive_IT>
      return;
 80081c0:	e25b      	b.n	800867a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80081c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f000 80de 	beq.w	8008388 <HAL_UART_IRQHandler+0x22c>
 80081cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d106      	bne.n	80081e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80081d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f000 80d1 	beq.w	8008388 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80081e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ea:	f003 0301 	and.w	r3, r3, #1
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00b      	beq.n	800820a <HAL_UART_IRQHandler+0xae>
 80081f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d005      	beq.n	800820a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008202:	f043 0201 	orr.w	r2, r3, #1
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800820a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800820e:	f003 0304 	and.w	r3, r3, #4
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00b      	beq.n	800822e <HAL_UART_IRQHandler+0xd2>
 8008216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	2b00      	cmp	r3, #0
 8008220:	d005      	beq.n	800822e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008226:	f043 0202 	orr.w	r2, r3, #2
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800822e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008232:	f003 0302 	and.w	r3, r3, #2
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00b      	beq.n	8008252 <HAL_UART_IRQHandler+0xf6>
 800823a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	d005      	beq.n	8008252 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800824a:	f043 0204 	orr.w	r2, r3, #4
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008256:	f003 0308 	and.w	r3, r3, #8
 800825a:	2b00      	cmp	r3, #0
 800825c:	d011      	beq.n	8008282 <HAL_UART_IRQHandler+0x126>
 800825e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008262:	f003 0320 	and.w	r3, r3, #32
 8008266:	2b00      	cmp	r3, #0
 8008268:	d105      	bne.n	8008276 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800826a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	2b00      	cmp	r3, #0
 8008274:	d005      	beq.n	8008282 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800827a:	f043 0208 	orr.w	r2, r3, #8
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008286:	2b00      	cmp	r3, #0
 8008288:	f000 81f2 	beq.w	8008670 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800828c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008290:	f003 0320 	and.w	r3, r3, #32
 8008294:	2b00      	cmp	r3, #0
 8008296:	d008      	beq.n	80082aa <HAL_UART_IRQHandler+0x14e>
 8008298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800829c:	f003 0320 	and.w	r3, r3, #32
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fb7d 	bl	80089a4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	695b      	ldr	r3, [r3, #20]
 80082b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b4:	2b40      	cmp	r3, #64	; 0x40
 80082b6:	bf0c      	ite	eq
 80082b8:	2301      	moveq	r3, #1
 80082ba:	2300      	movne	r3, #0
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082c6:	f003 0308 	and.w	r3, r3, #8
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d103      	bne.n	80082d6 <HAL_UART_IRQHandler+0x17a>
 80082ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d04f      	beq.n	8008376 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 fa85 	bl	80087e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	695b      	ldr	r3, [r3, #20]
 80082e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e6:	2b40      	cmp	r3, #64	; 0x40
 80082e8:	d141      	bne.n	800836e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	3314      	adds	r3, #20
 80082f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082f8:	e853 3f00 	ldrex	r3, [r3]
 80082fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008300:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008308:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	3314      	adds	r3, #20
 8008312:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008316:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800831a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008322:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008326:	e841 2300 	strex	r3, r2, [r1]
 800832a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800832e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1d9      	bne.n	80082ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800833a:	2b00      	cmp	r3, #0
 800833c:	d013      	beq.n	8008366 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008342:	4a7e      	ldr	r2, [pc, #504]	; (800853c <HAL_UART_IRQHandler+0x3e0>)
 8008344:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800834a:	4618      	mov	r0, r3
 800834c:	f7fa fcae 	bl	8002cac <HAL_DMA_Abort_IT>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d016      	beq.n	8008384 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800835a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008360:	4610      	mov	r0, r2
 8008362:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008364:	e00e      	b.n	8008384 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f994 	bl	8008694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800836c:	e00a      	b.n	8008384 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f990 	bl	8008694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008374:	e006      	b.n	8008384 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f98c 	bl	8008694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008382:	e175      	b.n	8008670 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008384:	bf00      	nop
    return;
 8008386:	e173      	b.n	8008670 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800838c:	2b01      	cmp	r3, #1
 800838e:	f040 814f 	bne.w	8008630 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008396:	f003 0310 	and.w	r3, r3, #16
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 8148 	beq.w	8008630 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80083a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083a4:	f003 0310 	and.w	r3, r3, #16
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 8141 	beq.w	8008630 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083ae:	2300      	movs	r3, #0
 80083b0:	60bb      	str	r3, [r7, #8]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	60bb      	str	r3, [r7, #8]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	60bb      	str	r3, [r7, #8]
 80083c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ce:	2b40      	cmp	r3, #64	; 0x40
 80083d0:	f040 80b6 	bne.w	8008540 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f000 8145 	beq.w	8008674 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80083ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083f2:	429a      	cmp	r2, r3
 80083f4:	f080 813e 	bcs.w	8008674 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008404:	69db      	ldr	r3, [r3, #28]
 8008406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800840a:	f000 8088 	beq.w	800851e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	330c      	adds	r3, #12
 8008414:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008418:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800841c:	e853 3f00 	ldrex	r3, [r3]
 8008420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008424:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800842c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	330c      	adds	r3, #12
 8008436:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800843a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800843e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008442:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008446:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800844a:	e841 2300 	strex	r3, r2, [r1]
 800844e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008452:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1d9      	bne.n	800840e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	3314      	adds	r3, #20
 8008460:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008464:	e853 3f00 	ldrex	r3, [r3]
 8008468:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800846a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800846c:	f023 0301 	bic.w	r3, r3, #1
 8008470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	3314      	adds	r3, #20
 800847a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800847e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008482:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008484:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008486:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008490:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e1      	bne.n	800845a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3314      	adds	r3, #20
 800849c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084a0:	e853 3f00 	ldrex	r3, [r3]
 80084a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80084a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	3314      	adds	r3, #20
 80084b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80084ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80084bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80084c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084c2:	e841 2300 	strex	r3, r2, [r1]
 80084c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80084c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1e3      	bne.n	8008496 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2220      	movs	r2, #32
 80084d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	330c      	adds	r3, #12
 80084e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084e6:	e853 3f00 	ldrex	r3, [r3]
 80084ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084ee:	f023 0310 	bic.w	r3, r3, #16
 80084f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	330c      	adds	r3, #12
 80084fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008500:	65ba      	str	r2, [r7, #88]	; 0x58
 8008502:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008504:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008506:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008508:	e841 2300 	strex	r3, r2, [r1]
 800850c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800850e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1e3      	bne.n	80084dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008518:	4618      	mov	r0, r3
 800851a:	f7fa fb57 	bl	8002bcc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2202      	movs	r2, #2
 8008522:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800852c:	b29b      	uxth	r3, r3
 800852e:	1ad3      	subs	r3, r2, r3
 8008530:	b29b      	uxth	r3, r3
 8008532:	4619      	mov	r1, r3
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f8b7 	bl	80086a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800853a:	e09b      	b.n	8008674 <HAL_UART_IRQHandler+0x518>
 800853c:	080088ad 	.word	0x080088ad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008548:	b29b      	uxth	r3, r3
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008554:	b29b      	uxth	r3, r3
 8008556:	2b00      	cmp	r3, #0
 8008558:	f000 808e 	beq.w	8008678 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800855c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008560:	2b00      	cmp	r3, #0
 8008562:	f000 8089 	beq.w	8008678 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	330c      	adds	r3, #12
 800856c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008570:	e853 3f00 	ldrex	r3, [r3]
 8008574:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008578:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800857c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	330c      	adds	r3, #12
 8008586:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800858a:	647a      	str	r2, [r7, #68]	; 0x44
 800858c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008590:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008592:	e841 2300 	strex	r3, r2, [r1]
 8008596:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1e3      	bne.n	8008566 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	3314      	adds	r3, #20
 80085a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a8:	e853 3f00 	ldrex	r3, [r3]
 80085ac:	623b      	str	r3, [r7, #32]
   return(result);
 80085ae:	6a3b      	ldr	r3, [r7, #32]
 80085b0:	f023 0301 	bic.w	r3, r3, #1
 80085b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	3314      	adds	r3, #20
 80085be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80085c2:	633a      	str	r2, [r7, #48]	; 0x30
 80085c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ca:	e841 2300 	strex	r3, r2, [r1]
 80085ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1e3      	bne.n	800859e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2220      	movs	r2, #32
 80085da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	330c      	adds	r3, #12
 80085ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	e853 3f00 	ldrex	r3, [r3]
 80085f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f023 0310 	bic.w	r3, r3, #16
 80085fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	330c      	adds	r3, #12
 8008604:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008608:	61fa      	str	r2, [r7, #28]
 800860a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860c:	69b9      	ldr	r1, [r7, #24]
 800860e:	69fa      	ldr	r2, [r7, #28]
 8008610:	e841 2300 	strex	r3, r2, [r1]
 8008614:	617b      	str	r3, [r7, #20]
   return(result);
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e3      	bne.n	80085e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2202      	movs	r2, #2
 8008620:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008622:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008626:	4619      	mov	r1, r3
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f83d 	bl	80086a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800862e:	e023      	b.n	8008678 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008638:	2b00      	cmp	r3, #0
 800863a:	d009      	beq.n	8008650 <HAL_UART_IRQHandler+0x4f4>
 800863c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008644:	2b00      	cmp	r3, #0
 8008646:	d003      	beq.n	8008650 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f943 	bl	80088d4 <UART_Transmit_IT>
    return;
 800864e:	e014      	b.n	800867a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00e      	beq.n	800867a <HAL_UART_IRQHandler+0x51e>
 800865c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008664:	2b00      	cmp	r3, #0
 8008666:	d008      	beq.n	800867a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 f983 	bl	8008974 <UART_EndTransmit_IT>
    return;
 800866e:	e004      	b.n	800867a <HAL_UART_IRQHandler+0x51e>
    return;
 8008670:	bf00      	nop
 8008672:	e002      	b.n	800867a <HAL_UART_IRQHandler+0x51e>
      return;
 8008674:	bf00      	nop
 8008676:	e000      	b.n	800867a <HAL_UART_IRQHandler+0x51e>
      return;
 8008678:	bf00      	nop
  }
}
 800867a:	37e8      	adds	r7, #232	; 0xe8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	460b      	mov	r3, r1
 80086b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086b4:	bf00      	nop
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	603b      	str	r3, [r7, #0]
 80086cc:	4613      	mov	r3, r2
 80086ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086d0:	e03b      	b.n	800874a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086d2:	6a3b      	ldr	r3, [r7, #32]
 80086d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d8:	d037      	beq.n	800874a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086da:	f7fa f887 	bl	80027ec <HAL_GetTick>
 80086de:	4602      	mov	r2, r0
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	1ad3      	subs	r3, r2, r3
 80086e4:	6a3a      	ldr	r2, [r7, #32]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d302      	bcc.n	80086f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80086ea:	6a3b      	ldr	r3, [r7, #32]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d101      	bne.n	80086f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80086f0:	2303      	movs	r3, #3
 80086f2:	e03a      	b.n	800876a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	f003 0304 	and.w	r3, r3, #4
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d023      	beq.n	800874a <UART_WaitOnFlagUntilTimeout+0x8a>
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	2b80      	cmp	r3, #128	; 0x80
 8008706:	d020      	beq.n	800874a <UART_WaitOnFlagUntilTimeout+0x8a>
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2b40      	cmp	r3, #64	; 0x40
 800870c:	d01d      	beq.n	800874a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 0308 	and.w	r3, r3, #8
 8008718:	2b08      	cmp	r3, #8
 800871a:	d116      	bne.n	800874a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800871c:	2300      	movs	r3, #0
 800871e:	617b      	str	r3, [r7, #20]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	617b      	str	r3, [r7, #20]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	617b      	str	r3, [r7, #20]
 8008730:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f000 f857 	bl	80087e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2208      	movs	r2, #8
 800873c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e00f      	b.n	800876a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	4013      	ands	r3, r2
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	429a      	cmp	r2, r3
 8008758:	bf0c      	ite	eq
 800875a:	2301      	moveq	r3, #1
 800875c:	2300      	movne	r3, #0
 800875e:	b2db      	uxtb	r3, r3
 8008760:	461a      	mov	r2, r3
 8008762:	79fb      	ldrb	r3, [r7, #7]
 8008764:	429a      	cmp	r2, r3
 8008766:	d0b4      	beq.n	80086d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3718      	adds	r7, #24
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008772:	b480      	push	{r7}
 8008774:	b085      	sub	sp, #20
 8008776:	af00      	add	r7, sp, #0
 8008778:	60f8      	str	r0, [r7, #12]
 800877a:	60b9      	str	r1, [r7, #8]
 800877c:	4613      	mov	r3, r2
 800877e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	68ba      	ldr	r2, [r7, #8]
 8008784:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	88fa      	ldrh	r2, [r7, #6]
 800878a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	88fa      	ldrh	r2, [r7, #6]
 8008790:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2222      	movs	r2, #34	; 0x22
 800879c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d007      	beq.n	80087b8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68da      	ldr	r2, [r3, #12]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087b6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	695a      	ldr	r2, [r3, #20]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f042 0201 	orr.w	r2, r2, #1
 80087c6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68da      	ldr	r2, [r3, #12]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f042 0220 	orr.w	r2, r2, #32
 80087d6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3714      	adds	r7, #20
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr

080087e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087e6:	b480      	push	{r7}
 80087e8:	b095      	sub	sp, #84	; 0x54
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	330c      	adds	r3, #12
 80087f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f8:	e853 3f00 	ldrex	r3, [r3]
 80087fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008800:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008804:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	330c      	adds	r3, #12
 800880c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800880e:	643a      	str	r2, [r7, #64]	; 0x40
 8008810:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008812:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008814:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008816:	e841 2300 	strex	r3, r2, [r1]
 800881a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800881c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1e5      	bne.n	80087ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	3314      	adds	r3, #20
 8008828:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882a:	6a3b      	ldr	r3, [r7, #32]
 800882c:	e853 3f00 	ldrex	r3, [r3]
 8008830:	61fb      	str	r3, [r7, #28]
   return(result);
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	f023 0301 	bic.w	r3, r3, #1
 8008838:	64bb      	str	r3, [r7, #72]	; 0x48
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3314      	adds	r3, #20
 8008840:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008842:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008844:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008846:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800884a:	e841 2300 	strex	r3, r2, [r1]
 800884e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1e5      	bne.n	8008822 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885a:	2b01      	cmp	r3, #1
 800885c:	d119      	bne.n	8008892 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	330c      	adds	r3, #12
 8008864:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	e853 3f00 	ldrex	r3, [r3]
 800886c:	60bb      	str	r3, [r7, #8]
   return(result);
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	f023 0310 	bic.w	r3, r3, #16
 8008874:	647b      	str	r3, [r7, #68]	; 0x44
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	330c      	adds	r3, #12
 800887c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800887e:	61ba      	str	r2, [r7, #24]
 8008880:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008882:	6979      	ldr	r1, [r7, #20]
 8008884:	69ba      	ldr	r2, [r7, #24]
 8008886:	e841 2300 	strex	r3, r2, [r1]
 800888a:	613b      	str	r3, [r7, #16]
   return(result);
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1e5      	bne.n	800885e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2220      	movs	r2, #32
 8008896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	631a      	str	r2, [r3, #48]	; 0x30
}
 80088a0:	bf00      	nop
 80088a2:	3754      	adds	r7, #84	; 0x54
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f7ff fee4 	bl	8008694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088cc:	bf00      	nop
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	2b21      	cmp	r3, #33	; 0x21
 80088e6:	d13e      	bne.n	8008966 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088f0:	d114      	bne.n	800891c <UART_Transmit_IT+0x48>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d110      	bne.n	800891c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a1b      	ldr	r3, [r3, #32]
 80088fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	881b      	ldrh	r3, [r3, #0]
 8008904:	461a      	mov	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800890e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a1b      	ldr	r3, [r3, #32]
 8008914:	1c9a      	adds	r2, r3, #2
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	621a      	str	r2, [r3, #32]
 800891a:	e008      	b.n	800892e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a1b      	ldr	r3, [r3, #32]
 8008920:	1c59      	adds	r1, r3, #1
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	6211      	str	r1, [r2, #32]
 8008926:	781a      	ldrb	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008932:	b29b      	uxth	r3, r3
 8008934:	3b01      	subs	r3, #1
 8008936:	b29b      	uxth	r3, r3
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	4619      	mov	r1, r3
 800893c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10f      	bne.n	8008962 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68da      	ldr	r2, [r3, #12]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008950:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68da      	ldr	r2, [r3, #12]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008960:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008962:	2300      	movs	r3, #0
 8008964:	e000      	b.n	8008968 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008966:	2302      	movs	r3, #2
  }
}
 8008968:	4618      	mov	r0, r3
 800896a:	3714      	adds	r7, #20
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68da      	ldr	r2, [r3, #12]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800898a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2220      	movs	r2, #32
 8008990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f7ff fe73 	bl	8008680 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b08c      	sub	sp, #48	; 0x30
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	2b22      	cmp	r3, #34	; 0x22
 80089b6:	f040 80ae 	bne.w	8008b16 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089c2:	d117      	bne.n	80089f4 <UART_Receive_IT+0x50>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d113      	bne.n	80089f4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80089cc:	2300      	movs	r3, #0
 80089ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	b29b      	uxth	r3, r3
 80089de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ec:	1c9a      	adds	r2, r3, #2
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	629a      	str	r2, [r3, #40]	; 0x28
 80089f2:	e026      	b.n	8008a42 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80089fa:	2300      	movs	r3, #0
 80089fc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a06:	d007      	beq.n	8008a18 <UART_Receive_IT+0x74>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10a      	bne.n	8008a26 <UART_Receive_IT+0x82>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d106      	bne.n	8008a26 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a22:	701a      	strb	r2, [r3, #0]
 8008a24:	e008      	b.n	8008a38 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a32:	b2da      	uxtb	r2, r3
 8008a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a36:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a3c:	1c5a      	adds	r2, r3, #1
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	4619      	mov	r1, r3
 8008a50:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d15d      	bne.n	8008b12 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68da      	ldr	r2, [r3, #12]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f022 0220 	bic.w	r2, r2, #32
 8008a64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68da      	ldr	r2, [r3, #12]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	695a      	ldr	r2, [r3, #20]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f022 0201 	bic.w	r2, r2, #1
 8008a84:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2220      	movs	r2, #32
 8008a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d135      	bne.n	8008b08 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	330c      	adds	r3, #12
 8008aa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	e853 3f00 	ldrex	r3, [r3]
 8008ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	f023 0310 	bic.w	r3, r3, #16
 8008ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	330c      	adds	r3, #12
 8008ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ac2:	623a      	str	r2, [r7, #32]
 8008ac4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac6:	69f9      	ldr	r1, [r7, #28]
 8008ac8:	6a3a      	ldr	r2, [r7, #32]
 8008aca:	e841 2300 	strex	r3, r2, [r1]
 8008ace:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d1e5      	bne.n	8008aa2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 0310 	and.w	r3, r3, #16
 8008ae0:	2b10      	cmp	r3, #16
 8008ae2:	d10a      	bne.n	8008afa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	60fb      	str	r3, [r7, #12]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	60fb      	str	r3, [r7, #12]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	60fb      	str	r3, [r7, #12]
 8008af8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7ff fdd1 	bl	80086a8 <HAL_UARTEx_RxEventCallback>
 8008b06:	e002      	b.n	8008b0e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f7f8 fc25 	bl	8001358 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	e002      	b.n	8008b18 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008b12:	2300      	movs	r3, #0
 8008b14:	e000      	b.n	8008b18 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008b16:	2302      	movs	r3, #2
  }
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3730      	adds	r7, #48	; 0x30
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b24:	b0c0      	sub	sp, #256	; 0x100
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	691b      	ldr	r3, [r3, #16]
 8008b34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b3c:	68d9      	ldr	r1, [r3, #12]
 8008b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	ea40 0301 	orr.w	r3, r0, r1
 8008b48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b4e:	689a      	ldr	r2, [r3, #8]
 8008b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	431a      	orrs	r2, r3
 8008b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b5c:	695b      	ldr	r3, [r3, #20]
 8008b5e:	431a      	orrs	r2, r3
 8008b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b64:	69db      	ldr	r3, [r3, #28]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008b78:	f021 010c 	bic.w	r1, r1, #12
 8008b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b86:	430b      	orrs	r3, r1
 8008b88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	695b      	ldr	r3, [r3, #20]
 8008b92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b9a:	6999      	ldr	r1, [r3, #24]
 8008b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	ea40 0301 	orr.w	r3, r0, r1
 8008ba6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	4b8f      	ldr	r3, [pc, #572]	; (8008dec <UART_SetConfig+0x2cc>)
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d005      	beq.n	8008bc0 <UART_SetConfig+0xa0>
 8008bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	4b8d      	ldr	r3, [pc, #564]	; (8008df0 <UART_SetConfig+0x2d0>)
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d104      	bne.n	8008bca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008bc0:	f7fe fa4a 	bl	8007058 <HAL_RCC_GetPCLK2Freq>
 8008bc4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008bc8:	e003      	b.n	8008bd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008bca:	f7fe fa31 	bl	8007030 <HAL_RCC_GetPCLK1Freq>
 8008bce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bd6:	69db      	ldr	r3, [r3, #28]
 8008bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bdc:	f040 810c 	bne.w	8008df8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008be4:	2200      	movs	r2, #0
 8008be6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008bea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008bee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008bf2:	4622      	mov	r2, r4
 8008bf4:	462b      	mov	r3, r5
 8008bf6:	1891      	adds	r1, r2, r2
 8008bf8:	65b9      	str	r1, [r7, #88]	; 0x58
 8008bfa:	415b      	adcs	r3, r3
 8008bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008c02:	4621      	mov	r1, r4
 8008c04:	eb12 0801 	adds.w	r8, r2, r1
 8008c08:	4629      	mov	r1, r5
 8008c0a:	eb43 0901 	adc.w	r9, r3, r1
 8008c0e:	f04f 0200 	mov.w	r2, #0
 8008c12:	f04f 0300 	mov.w	r3, #0
 8008c16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c22:	4690      	mov	r8, r2
 8008c24:	4699      	mov	r9, r3
 8008c26:	4623      	mov	r3, r4
 8008c28:	eb18 0303 	adds.w	r3, r8, r3
 8008c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c30:	462b      	mov	r3, r5
 8008c32:	eb49 0303 	adc.w	r3, r9, r3
 8008c36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008c4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008c4e:	460b      	mov	r3, r1
 8008c50:	18db      	adds	r3, r3, r3
 8008c52:	653b      	str	r3, [r7, #80]	; 0x50
 8008c54:	4613      	mov	r3, r2
 8008c56:	eb42 0303 	adc.w	r3, r2, r3
 8008c5a:	657b      	str	r3, [r7, #84]	; 0x54
 8008c5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008c60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008c64:	f7f8 f820 	bl	8000ca8 <__aeabi_uldivmod>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	4b61      	ldr	r3, [pc, #388]	; (8008df4 <UART_SetConfig+0x2d4>)
 8008c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8008c72:	095b      	lsrs	r3, r3, #5
 8008c74:	011c      	lsls	r4, r3, #4
 8008c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008c84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008c88:	4642      	mov	r2, r8
 8008c8a:	464b      	mov	r3, r9
 8008c8c:	1891      	adds	r1, r2, r2
 8008c8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008c90:	415b      	adcs	r3, r3
 8008c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008c98:	4641      	mov	r1, r8
 8008c9a:	eb12 0a01 	adds.w	sl, r2, r1
 8008c9e:	4649      	mov	r1, r9
 8008ca0:	eb43 0b01 	adc.w	fp, r3, r1
 8008ca4:	f04f 0200 	mov.w	r2, #0
 8008ca8:	f04f 0300 	mov.w	r3, #0
 8008cac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008cb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008cb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008cb8:	4692      	mov	sl, r2
 8008cba:	469b      	mov	fp, r3
 8008cbc:	4643      	mov	r3, r8
 8008cbe:	eb1a 0303 	adds.w	r3, sl, r3
 8008cc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008cc6:	464b      	mov	r3, r9
 8008cc8:	eb4b 0303 	adc.w	r3, fp, r3
 8008ccc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008cdc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008ce0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	18db      	adds	r3, r3, r3
 8008ce8:	643b      	str	r3, [r7, #64]	; 0x40
 8008cea:	4613      	mov	r3, r2
 8008cec:	eb42 0303 	adc.w	r3, r2, r3
 8008cf0:	647b      	str	r3, [r7, #68]	; 0x44
 8008cf2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008cf6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008cfa:	f7f7 ffd5 	bl	8000ca8 <__aeabi_uldivmod>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	460b      	mov	r3, r1
 8008d02:	4611      	mov	r1, r2
 8008d04:	4b3b      	ldr	r3, [pc, #236]	; (8008df4 <UART_SetConfig+0x2d4>)
 8008d06:	fba3 2301 	umull	r2, r3, r3, r1
 8008d0a:	095b      	lsrs	r3, r3, #5
 8008d0c:	2264      	movs	r2, #100	; 0x64
 8008d0e:	fb02 f303 	mul.w	r3, r2, r3
 8008d12:	1acb      	subs	r3, r1, r3
 8008d14:	00db      	lsls	r3, r3, #3
 8008d16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008d1a:	4b36      	ldr	r3, [pc, #216]	; (8008df4 <UART_SetConfig+0x2d4>)
 8008d1c:	fba3 2302 	umull	r2, r3, r3, r2
 8008d20:	095b      	lsrs	r3, r3, #5
 8008d22:	005b      	lsls	r3, r3, #1
 8008d24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d28:	441c      	add	r4, r3
 8008d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008d38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008d3c:	4642      	mov	r2, r8
 8008d3e:	464b      	mov	r3, r9
 8008d40:	1891      	adds	r1, r2, r2
 8008d42:	63b9      	str	r1, [r7, #56]	; 0x38
 8008d44:	415b      	adcs	r3, r3
 8008d46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008d4c:	4641      	mov	r1, r8
 8008d4e:	1851      	adds	r1, r2, r1
 8008d50:	6339      	str	r1, [r7, #48]	; 0x30
 8008d52:	4649      	mov	r1, r9
 8008d54:	414b      	adcs	r3, r1
 8008d56:	637b      	str	r3, [r7, #52]	; 0x34
 8008d58:	f04f 0200 	mov.w	r2, #0
 8008d5c:	f04f 0300 	mov.w	r3, #0
 8008d60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008d64:	4659      	mov	r1, fp
 8008d66:	00cb      	lsls	r3, r1, #3
 8008d68:	4651      	mov	r1, sl
 8008d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d6e:	4651      	mov	r1, sl
 8008d70:	00ca      	lsls	r2, r1, #3
 8008d72:	4610      	mov	r0, r2
 8008d74:	4619      	mov	r1, r3
 8008d76:	4603      	mov	r3, r0
 8008d78:	4642      	mov	r2, r8
 8008d7a:	189b      	adds	r3, r3, r2
 8008d7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d80:	464b      	mov	r3, r9
 8008d82:	460a      	mov	r2, r1
 8008d84:	eb42 0303 	adc.w	r3, r2, r3
 8008d88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008d9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008da0:	460b      	mov	r3, r1
 8008da2:	18db      	adds	r3, r3, r3
 8008da4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008da6:	4613      	mov	r3, r2
 8008da8:	eb42 0303 	adc.w	r3, r2, r3
 8008dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008db2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008db6:	f7f7 ff77 	bl	8000ca8 <__aeabi_uldivmod>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	4b0d      	ldr	r3, [pc, #52]	; (8008df4 <UART_SetConfig+0x2d4>)
 8008dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8008dc4:	095b      	lsrs	r3, r3, #5
 8008dc6:	2164      	movs	r1, #100	; 0x64
 8008dc8:	fb01 f303 	mul.w	r3, r1, r3
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	00db      	lsls	r3, r3, #3
 8008dd0:	3332      	adds	r3, #50	; 0x32
 8008dd2:	4a08      	ldr	r2, [pc, #32]	; (8008df4 <UART_SetConfig+0x2d4>)
 8008dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd8:	095b      	lsrs	r3, r3, #5
 8008dda:	f003 0207 	and.w	r2, r3, #7
 8008dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4422      	add	r2, r4
 8008de6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008de8:	e106      	b.n	8008ff8 <UART_SetConfig+0x4d8>
 8008dea:	bf00      	nop
 8008dec:	40011000 	.word	0x40011000
 8008df0:	40011400 	.word	0x40011400
 8008df4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008e02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008e06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008e0a:	4642      	mov	r2, r8
 8008e0c:	464b      	mov	r3, r9
 8008e0e:	1891      	adds	r1, r2, r2
 8008e10:	6239      	str	r1, [r7, #32]
 8008e12:	415b      	adcs	r3, r3
 8008e14:	627b      	str	r3, [r7, #36]	; 0x24
 8008e16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e1a:	4641      	mov	r1, r8
 8008e1c:	1854      	adds	r4, r2, r1
 8008e1e:	4649      	mov	r1, r9
 8008e20:	eb43 0501 	adc.w	r5, r3, r1
 8008e24:	f04f 0200 	mov.w	r2, #0
 8008e28:	f04f 0300 	mov.w	r3, #0
 8008e2c:	00eb      	lsls	r3, r5, #3
 8008e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e32:	00e2      	lsls	r2, r4, #3
 8008e34:	4614      	mov	r4, r2
 8008e36:	461d      	mov	r5, r3
 8008e38:	4643      	mov	r3, r8
 8008e3a:	18e3      	adds	r3, r4, r3
 8008e3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008e40:	464b      	mov	r3, r9
 8008e42:	eb45 0303 	adc.w	r3, r5, r3
 8008e46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008e5a:	f04f 0200 	mov.w	r2, #0
 8008e5e:	f04f 0300 	mov.w	r3, #0
 8008e62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008e66:	4629      	mov	r1, r5
 8008e68:	008b      	lsls	r3, r1, #2
 8008e6a:	4621      	mov	r1, r4
 8008e6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e70:	4621      	mov	r1, r4
 8008e72:	008a      	lsls	r2, r1, #2
 8008e74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008e78:	f7f7 ff16 	bl	8000ca8 <__aeabi_uldivmod>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	460b      	mov	r3, r1
 8008e80:	4b60      	ldr	r3, [pc, #384]	; (8009004 <UART_SetConfig+0x4e4>)
 8008e82:	fba3 2302 	umull	r2, r3, r3, r2
 8008e86:	095b      	lsrs	r3, r3, #5
 8008e88:	011c      	lsls	r4, r3, #4
 8008e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008e98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008e9c:	4642      	mov	r2, r8
 8008e9e:	464b      	mov	r3, r9
 8008ea0:	1891      	adds	r1, r2, r2
 8008ea2:	61b9      	str	r1, [r7, #24]
 8008ea4:	415b      	adcs	r3, r3
 8008ea6:	61fb      	str	r3, [r7, #28]
 8008ea8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008eac:	4641      	mov	r1, r8
 8008eae:	1851      	adds	r1, r2, r1
 8008eb0:	6139      	str	r1, [r7, #16]
 8008eb2:	4649      	mov	r1, r9
 8008eb4:	414b      	adcs	r3, r1
 8008eb6:	617b      	str	r3, [r7, #20]
 8008eb8:	f04f 0200 	mov.w	r2, #0
 8008ebc:	f04f 0300 	mov.w	r3, #0
 8008ec0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008ec4:	4659      	mov	r1, fp
 8008ec6:	00cb      	lsls	r3, r1, #3
 8008ec8:	4651      	mov	r1, sl
 8008eca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ece:	4651      	mov	r1, sl
 8008ed0:	00ca      	lsls	r2, r1, #3
 8008ed2:	4610      	mov	r0, r2
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	4642      	mov	r2, r8
 8008eda:	189b      	adds	r3, r3, r2
 8008edc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ee0:	464b      	mov	r3, r9
 8008ee2:	460a      	mov	r2, r1
 8008ee4:	eb42 0303 	adc.w	r3, r2, r3
 8008ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ef6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008ef8:	f04f 0200 	mov.w	r2, #0
 8008efc:	f04f 0300 	mov.w	r3, #0
 8008f00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008f04:	4649      	mov	r1, r9
 8008f06:	008b      	lsls	r3, r1, #2
 8008f08:	4641      	mov	r1, r8
 8008f0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f0e:	4641      	mov	r1, r8
 8008f10:	008a      	lsls	r2, r1, #2
 8008f12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008f16:	f7f7 fec7 	bl	8000ca8 <__aeabi_uldivmod>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	4611      	mov	r1, r2
 8008f20:	4b38      	ldr	r3, [pc, #224]	; (8009004 <UART_SetConfig+0x4e4>)
 8008f22:	fba3 2301 	umull	r2, r3, r3, r1
 8008f26:	095b      	lsrs	r3, r3, #5
 8008f28:	2264      	movs	r2, #100	; 0x64
 8008f2a:	fb02 f303 	mul.w	r3, r2, r3
 8008f2e:	1acb      	subs	r3, r1, r3
 8008f30:	011b      	lsls	r3, r3, #4
 8008f32:	3332      	adds	r3, #50	; 0x32
 8008f34:	4a33      	ldr	r2, [pc, #204]	; (8009004 <UART_SetConfig+0x4e4>)
 8008f36:	fba2 2303 	umull	r2, r3, r2, r3
 8008f3a:	095b      	lsrs	r3, r3, #5
 8008f3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f40:	441c      	add	r4, r3
 8008f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f46:	2200      	movs	r2, #0
 8008f48:	673b      	str	r3, [r7, #112]	; 0x70
 8008f4a:	677a      	str	r2, [r7, #116]	; 0x74
 8008f4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008f50:	4642      	mov	r2, r8
 8008f52:	464b      	mov	r3, r9
 8008f54:	1891      	adds	r1, r2, r2
 8008f56:	60b9      	str	r1, [r7, #8]
 8008f58:	415b      	adcs	r3, r3
 8008f5a:	60fb      	str	r3, [r7, #12]
 8008f5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f60:	4641      	mov	r1, r8
 8008f62:	1851      	adds	r1, r2, r1
 8008f64:	6039      	str	r1, [r7, #0]
 8008f66:	4649      	mov	r1, r9
 8008f68:	414b      	adcs	r3, r1
 8008f6a:	607b      	str	r3, [r7, #4]
 8008f6c:	f04f 0200 	mov.w	r2, #0
 8008f70:	f04f 0300 	mov.w	r3, #0
 8008f74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008f78:	4659      	mov	r1, fp
 8008f7a:	00cb      	lsls	r3, r1, #3
 8008f7c:	4651      	mov	r1, sl
 8008f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f82:	4651      	mov	r1, sl
 8008f84:	00ca      	lsls	r2, r1, #3
 8008f86:	4610      	mov	r0, r2
 8008f88:	4619      	mov	r1, r3
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	4642      	mov	r2, r8
 8008f8e:	189b      	adds	r3, r3, r2
 8008f90:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f92:	464b      	mov	r3, r9
 8008f94:	460a      	mov	r2, r1
 8008f96:	eb42 0303 	adc.w	r3, r2, r3
 8008f9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	663b      	str	r3, [r7, #96]	; 0x60
 8008fa6:	667a      	str	r2, [r7, #100]	; 0x64
 8008fa8:	f04f 0200 	mov.w	r2, #0
 8008fac:	f04f 0300 	mov.w	r3, #0
 8008fb0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008fb4:	4649      	mov	r1, r9
 8008fb6:	008b      	lsls	r3, r1, #2
 8008fb8:	4641      	mov	r1, r8
 8008fba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fbe:	4641      	mov	r1, r8
 8008fc0:	008a      	lsls	r2, r1, #2
 8008fc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008fc6:	f7f7 fe6f 	bl	8000ca8 <__aeabi_uldivmod>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	460b      	mov	r3, r1
 8008fce:	4b0d      	ldr	r3, [pc, #52]	; (8009004 <UART_SetConfig+0x4e4>)
 8008fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8008fd4:	095b      	lsrs	r3, r3, #5
 8008fd6:	2164      	movs	r1, #100	; 0x64
 8008fd8:	fb01 f303 	mul.w	r3, r1, r3
 8008fdc:	1ad3      	subs	r3, r2, r3
 8008fde:	011b      	lsls	r3, r3, #4
 8008fe0:	3332      	adds	r3, #50	; 0x32
 8008fe2:	4a08      	ldr	r2, [pc, #32]	; (8009004 <UART_SetConfig+0x4e4>)
 8008fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe8:	095b      	lsrs	r3, r3, #5
 8008fea:	f003 020f 	and.w	r2, r3, #15
 8008fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4422      	add	r2, r4
 8008ff6:	609a      	str	r2, [r3, #8]
}
 8008ff8:	bf00      	nop
 8008ffa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008ffe:	46bd      	mov	sp, r7
 8009000:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009004:	51eb851f 	.word	0x51eb851f

08009008 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009008:	b084      	sub	sp, #16
 800900a:	b580      	push	{r7, lr}
 800900c:	b084      	sub	sp, #16
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
 8009012:	f107 001c 	add.w	r0, r7, #28
 8009016:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800901a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800901e:	2b01      	cmp	r3, #1
 8009020:	d123      	bne.n	800906a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009026:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800904a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800904e:	2b01      	cmp	r3, #1
 8009050:	d105      	bne.n	800905e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f9dc 	bl	800941c <USB_CoreReset>
 8009064:	4603      	mov	r3, r0
 8009066:	73fb      	strb	r3, [r7, #15]
 8009068:	e01b      	b.n	80090a2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f9d0 	bl	800941c <USB_CoreReset>
 800907c:	4603      	mov	r3, r0
 800907e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009080:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009084:	2b00      	cmp	r3, #0
 8009086:	d106      	bne.n	8009096 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	639a      	str	r2, [r3, #56]	; 0x38
 8009094:	e005      	b.n	80090a2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80090a2:	7fbb      	ldrb	r3, [r7, #30]
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d10b      	bne.n	80090c0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	f043 0206 	orr.w	r2, r3, #6
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	f043 0220 	orr.w	r2, r3, #32
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80090c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090cc:	b004      	add	sp, #16
 80090ce:	4770      	bx	lr

080090d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	f043 0201 	orr.w	r2, r3, #1
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr

080090f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80090f2:	b480      	push	{r7}
 80090f4:	b083      	sub	sp, #12
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	f023 0201 	bic.w	r2, r3, #1
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	460b      	mov	r3, r1
 800911e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009120:	2300      	movs	r3, #0
 8009122:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009130:	78fb      	ldrb	r3, [r7, #3]
 8009132:	2b01      	cmp	r3, #1
 8009134:	d115      	bne.n	8009162 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009142:	200a      	movs	r0, #10
 8009144:	f7f9 fb5e 	bl	8002804 <HAL_Delay>
      ms += 10U;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	330a      	adds	r3, #10
 800914c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f956 	bl	8009400 <USB_GetMode>
 8009154:	4603      	mov	r3, r0
 8009156:	2b01      	cmp	r3, #1
 8009158:	d01e      	beq.n	8009198 <USB_SetCurrentMode+0x84>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2bc7      	cmp	r3, #199	; 0xc7
 800915e:	d9f0      	bls.n	8009142 <USB_SetCurrentMode+0x2e>
 8009160:	e01a      	b.n	8009198 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009162:	78fb      	ldrb	r3, [r7, #3]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d115      	bne.n	8009194 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009174:	200a      	movs	r0, #10
 8009176:	f7f9 fb45 	bl	8002804 <HAL_Delay>
      ms += 10U;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	330a      	adds	r3, #10
 800917e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 f93d 	bl	8009400 <USB_GetMode>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d005      	beq.n	8009198 <USB_SetCurrentMode+0x84>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2bc7      	cmp	r3, #199	; 0xc7
 8009190:	d9f0      	bls.n	8009174 <USB_SetCurrentMode+0x60>
 8009192:	e001      	b.n	8009198 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	e005      	b.n	80091a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2bc8      	cmp	r3, #200	; 0xc8
 800919c:	d101      	bne.n	80091a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	e000      	b.n	80091a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80091b6:	2300      	movs	r3, #0
 80091b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	3301      	adds	r3, #1
 80091be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80091c6:	d901      	bls.n	80091cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80091c8:	2303      	movs	r3, #3
 80091ca:	e01b      	b.n	8009204 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	daf2      	bge.n	80091ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80091d4:	2300      	movs	r3, #0
 80091d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	019b      	lsls	r3, r3, #6
 80091dc:	f043 0220 	orr.w	r2, r3, #32
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	3301      	adds	r3, #1
 80091e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80091f0:	d901      	bls.n	80091f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80091f2:	2303      	movs	r3, #3
 80091f4:	e006      	b.n	8009204 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	f003 0320 	and.w	r3, r3, #32
 80091fe:	2b20      	cmp	r3, #32
 8009200:	d0f0      	beq.n	80091e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009202:	2300      	movs	r3, #0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3714      	adds	r7, #20
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009210:	b480      	push	{r7}
 8009212:	b085      	sub	sp, #20
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009218:	2300      	movs	r3, #0
 800921a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	3301      	adds	r3, #1
 8009220:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009228:	d901      	bls.n	800922e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800922a:	2303      	movs	r3, #3
 800922c:	e018      	b.n	8009260 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	2b00      	cmp	r3, #0
 8009234:	daf2      	bge.n	800921c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009236:	2300      	movs	r3, #0
 8009238:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2210      	movs	r2, #16
 800923e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	3301      	adds	r3, #1
 8009244:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800924c:	d901      	bls.n	8009252 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800924e:	2303      	movs	r3, #3
 8009250:	e006      	b.n	8009260 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	691b      	ldr	r3, [r3, #16]
 8009256:	f003 0310 	and.w	r3, r3, #16
 800925a:	2b10      	cmp	r3, #16
 800925c:	d0f0      	beq.n	8009240 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3714      	adds	r7, #20
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800926c:	b480      	push	{r7}
 800926e:	b089      	sub	sp, #36	; 0x24
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	4611      	mov	r1, r2
 8009278:	461a      	mov	r2, r3
 800927a:	460b      	mov	r3, r1
 800927c:	71fb      	strb	r3, [r7, #7]
 800927e:	4613      	mov	r3, r2
 8009280:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800928a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800928e:	2b00      	cmp	r3, #0
 8009290:	d123      	bne.n	80092da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009292:	88bb      	ldrh	r3, [r7, #4]
 8009294:	3303      	adds	r3, #3
 8009296:	089b      	lsrs	r3, r3, #2
 8009298:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800929a:	2300      	movs	r3, #0
 800929c:	61bb      	str	r3, [r7, #24]
 800929e:	e018      	b.n	80092d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80092a0:	79fb      	ldrb	r3, [r7, #7]
 80092a2:	031a      	lsls	r2, r3, #12
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	4413      	add	r3, r2
 80092a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092ac:	461a      	mov	r2, r3
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	3301      	adds	r3, #1
 80092b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	3301      	adds	r3, #1
 80092be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80092c0:	69fb      	ldr	r3, [r7, #28]
 80092c2:	3301      	adds	r3, #1
 80092c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	3301      	adds	r3, #1
 80092ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	3301      	adds	r3, #1
 80092d0:	61bb      	str	r3, [r7, #24]
 80092d2:	69ba      	ldr	r2, [r7, #24]
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d3e2      	bcc.n	80092a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3724      	adds	r7, #36	; 0x24
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b08b      	sub	sp, #44	; 0x2c
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	4613      	mov	r3, r2
 80092f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80092fe:	88fb      	ldrh	r3, [r7, #6]
 8009300:	089b      	lsrs	r3, r3, #2
 8009302:	b29b      	uxth	r3, r3
 8009304:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009306:	88fb      	ldrh	r3, [r7, #6]
 8009308:	f003 0303 	and.w	r3, r3, #3
 800930c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800930e:	2300      	movs	r3, #0
 8009310:	623b      	str	r3, [r7, #32]
 8009312:	e014      	b.n	800933e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009314:	69bb      	ldr	r3, [r7, #24]
 8009316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009322:	3301      	adds	r3, #1
 8009324:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009328:	3301      	adds	r3, #1
 800932a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800932c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932e:	3301      	adds	r3, #1
 8009330:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009334:	3301      	adds	r3, #1
 8009336:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009338:	6a3b      	ldr	r3, [r7, #32]
 800933a:	3301      	adds	r3, #1
 800933c:	623b      	str	r3, [r7, #32]
 800933e:	6a3a      	ldr	r2, [r7, #32]
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	429a      	cmp	r2, r3
 8009344:	d3e6      	bcc.n	8009314 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009346:	8bfb      	ldrh	r3, [r7, #30]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d01e      	beq.n	800938a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800934c:	2300      	movs	r3, #0
 800934e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009356:	461a      	mov	r2, r3
 8009358:	f107 0310 	add.w	r3, r7, #16
 800935c:	6812      	ldr	r2, [r2, #0]
 800935e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009360:	693a      	ldr	r2, [r7, #16]
 8009362:	6a3b      	ldr	r3, [r7, #32]
 8009364:	b2db      	uxtb	r3, r3
 8009366:	00db      	lsls	r3, r3, #3
 8009368:	fa22 f303 	lsr.w	r3, r2, r3
 800936c:	b2da      	uxtb	r2, r3
 800936e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009370:	701a      	strb	r2, [r3, #0]
      i++;
 8009372:	6a3b      	ldr	r3, [r7, #32]
 8009374:	3301      	adds	r3, #1
 8009376:	623b      	str	r3, [r7, #32]
      pDest++;
 8009378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937a:	3301      	adds	r3, #1
 800937c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800937e:	8bfb      	ldrh	r3, [r7, #30]
 8009380:	3b01      	subs	r3, #1
 8009382:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009384:	8bfb      	ldrh	r3, [r7, #30]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1ea      	bne.n	8009360 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800938a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800938c:	4618      	mov	r0, r3
 800938e:	372c      	adds	r7, #44	; 0x2c
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	695b      	ldr	r3, [r3, #20]
 80093a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	699b      	ldr	r3, [r3, #24]
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	4013      	ands	r3, r2
 80093ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80093b0:	68fb      	ldr	r3, [r7, #12]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3714      	adds	r7, #20
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr

080093be <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80093be:	b480      	push	{r7}
 80093c0:	b085      	sub	sp, #20
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	460b      	mov	r3, r1
 80093c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80093ce:	78fb      	ldrb	r3, [r7, #3]
 80093d0:	015a      	lsls	r2, r3, #5
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	4413      	add	r3, r2
 80093d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80093de:	78fb      	ldrb	r3, [r7, #3]
 80093e0:	015a      	lsls	r2, r3, #5
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	4413      	add	r3, r2
 80093e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	68ba      	ldr	r2, [r7, #8]
 80093ee:	4013      	ands	r3, r2
 80093f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80093f2:	68bb      	ldr	r3, [r7, #8]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3714      	adds	r7, #20
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	695b      	ldr	r3, [r3, #20]
 800940c:	f003 0301 	and.w	r3, r3, #1
}
 8009410:	4618      	mov	r0, r3
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800941c:	b480      	push	{r7}
 800941e:	b085      	sub	sp, #20
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009424:	2300      	movs	r3, #0
 8009426:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	3301      	adds	r3, #1
 800942c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009434:	d901      	bls.n	800943a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009436:	2303      	movs	r3, #3
 8009438:	e01b      	b.n	8009472 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	2b00      	cmp	r3, #0
 8009440:	daf2      	bge.n	8009428 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009442:	2300      	movs	r3, #0
 8009444:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	f043 0201 	orr.w	r2, r3, #1
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	3301      	adds	r3, #1
 8009456:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800945e:	d901      	bls.n	8009464 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009460:	2303      	movs	r3, #3
 8009462:	e006      	b.n	8009472 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	f003 0301 	and.w	r3, r3, #1
 800946c:	2b01      	cmp	r3, #1
 800946e:	d0f0      	beq.n	8009452 <USB_CoreReset+0x36>

  return HAL_OK;
 8009470:	2300      	movs	r3, #0
}
 8009472:	4618      	mov	r0, r3
 8009474:	3714      	adds	r7, #20
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr
	...

08009480 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009480:	b084      	sub	sp, #16
 8009482:	b580      	push	{r7, lr}
 8009484:	b086      	sub	sp, #24
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
 800948a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800948e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009492:	2300      	movs	r3, #0
 8009494:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094a0:	461a      	mov	r2, r3
 80094a2:	2300      	movs	r3, #0
 80094a4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d119      	bne.n	800950a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80094d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d10a      	bne.n	80094f4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80094ec:	f043 0304 	orr.w	r3, r3, #4
 80094f0:	6013      	str	r3, [r2, #0]
 80094f2:	e014      	b.n	800951e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009502:	f023 0304 	bic.w	r3, r3, #4
 8009506:	6013      	str	r3, [r2, #0]
 8009508:	e009      	b.n	800951e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009518:	f023 0304 	bic.w	r3, r3, #4
 800951c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800951e:	2110      	movs	r1, #16
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f7ff fe43 	bl	80091ac <USB_FlushTxFifo>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d001      	beq.n	8009530 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f7ff fe6d 	bl	8009210 <USB_FlushRxFifo>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d001      	beq.n	8009540 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009540:	2300      	movs	r3, #0
 8009542:	613b      	str	r3, [r7, #16]
 8009544:	e015      	b.n	8009572 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	015a      	lsls	r2, r3, #5
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	4413      	add	r3, r2
 800954e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009552:	461a      	mov	r2, r3
 8009554:	f04f 33ff 	mov.w	r3, #4294967295
 8009558:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	015a      	lsls	r2, r3, #5
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	4413      	add	r3, r2
 8009562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009566:	461a      	mov	r2, r3
 8009568:	2300      	movs	r3, #0
 800956a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	3301      	adds	r3, #1
 8009570:	613b      	str	r3, [r7, #16]
 8009572:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009576:	461a      	mov	r2, r3
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	4293      	cmp	r3, r2
 800957c:	d3e3      	bcc.n	8009546 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f04f 32ff 	mov.w	r2, #4294967295
 800958a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	4a18      	ldr	r2, [pc, #96]	; (80095f0 <USB_HostInit+0x170>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d10b      	bne.n	80095ac <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800959a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a15      	ldr	r2, [pc, #84]	; (80095f4 <USB_HostInit+0x174>)
 80095a0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a14      	ldr	r2, [pc, #80]	; (80095f8 <USB_HostInit+0x178>)
 80095a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80095aa:	e009      	b.n	80095c0 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2280      	movs	r2, #128	; 0x80
 80095b0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a11      	ldr	r2, [pc, #68]	; (80095fc <USB_HostInit+0x17c>)
 80095b6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a11      	ldr	r2, [pc, #68]	; (8009600 <USB_HostInit+0x180>)
 80095bc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80095c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d105      	bne.n	80095d4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	f043 0210 	orr.w	r2, r3, #16
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	699a      	ldr	r2, [r3, #24]
 80095d8:	4b0a      	ldr	r3, [pc, #40]	; (8009604 <USB_HostInit+0x184>)
 80095da:	4313      	orrs	r3, r2
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80095e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3718      	adds	r7, #24
 80095e6:	46bd      	mov	sp, r7
 80095e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80095ec:	b004      	add	sp, #16
 80095ee:	4770      	bx	lr
 80095f0:	40040000 	.word	0x40040000
 80095f4:	01000200 	.word	0x01000200
 80095f8:	00e00300 	.word	0x00e00300
 80095fc:	00600080 	.word	0x00600080
 8009600:	004000e0 	.word	0x004000e0
 8009604:	a3200008 	.word	0xa3200008

08009608 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	460b      	mov	r3, r1
 8009612:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009626:	f023 0303 	bic.w	r3, r3, #3
 800962a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	78fb      	ldrb	r3, [r7, #3]
 8009636:	f003 0303 	and.w	r3, r3, #3
 800963a:	68f9      	ldr	r1, [r7, #12]
 800963c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009640:	4313      	orrs	r3, r2
 8009642:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009644:	78fb      	ldrb	r3, [r7, #3]
 8009646:	2b01      	cmp	r3, #1
 8009648:	d107      	bne.n	800965a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009650:	461a      	mov	r2, r3
 8009652:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009656:	6053      	str	r3, [r2, #4]
 8009658:	e00c      	b.n	8009674 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800965a:	78fb      	ldrb	r3, [r7, #3]
 800965c:	2b02      	cmp	r3, #2
 800965e:	d107      	bne.n	8009670 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009666:	461a      	mov	r2, r3
 8009668:	f241 7370 	movw	r3, #6000	; 0x1770
 800966c:	6053      	str	r3, [r2, #4]
 800966e:	e001      	b.n	8009674 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	e000      	b.n	8009676 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8009674:	2300      	movs	r3, #0
}
 8009676:	4618      	mov	r0, r3
 8009678:	3714      	adds	r7, #20
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b084      	sub	sp, #16
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800968e:	2300      	movs	r3, #0
 8009690:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80096a2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80096ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096b0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80096b2:	2064      	movs	r0, #100	; 0x64
 80096b4:	f7f9 f8a6 	bl	8002804 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80096c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096c4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80096c6:	200a      	movs	r0, #10
 80096c8:	f7f9 f89c 	bl	8002804 <HAL_Delay>

  return HAL_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80096d6:	b480      	push	{r7}
 80096d8:	b085      	sub	sp, #20
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
 80096de:	460b      	mov	r3, r1
 80096e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80096e6:	2300      	movs	r3, #0
 80096e8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80096fa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009702:	2b00      	cmp	r3, #0
 8009704:	d109      	bne.n	800971a <USB_DriveVbus+0x44>
 8009706:	78fb      	ldrb	r3, [r7, #3]
 8009708:	2b01      	cmp	r3, #1
 800970a:	d106      	bne.n	800971a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009714:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009718:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009724:	d109      	bne.n	800973a <USB_DriveVbus+0x64>
 8009726:	78fb      	ldrb	r3, [r7, #3]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d106      	bne.n	800973a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	68fa      	ldr	r2, [r7, #12]
 8009730:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009734:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009738:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800973a:	2300      	movs	r3, #0
}
 800973c:	4618      	mov	r0, r3
 800973e:	3714      	adds	r7, #20
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009754:	2300      	movs	r3, #0
 8009756:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	0c5b      	lsrs	r3, r3, #17
 8009766:	f003 0303 	and.w	r3, r3, #3
}
 800976a:	4618      	mov	r0, r3
 800976c:	3714      	adds	r7, #20
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr

08009776 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8009776:	b480      	push	{r7}
 8009778:	b085      	sub	sp, #20
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	b29b      	uxth	r3, r3
}
 800978c:	4618      	mov	r0, r3
 800978e:	3714      	adds	r7, #20
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b088      	sub	sp, #32
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	4608      	mov	r0, r1
 80097a2:	4611      	mov	r1, r2
 80097a4:	461a      	mov	r2, r3
 80097a6:	4603      	mov	r3, r0
 80097a8:	70fb      	strb	r3, [r7, #3]
 80097aa:	460b      	mov	r3, r1
 80097ac:	70bb      	strb	r3, [r7, #2]
 80097ae:	4613      	mov	r3, r2
 80097b0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80097b2:	2300      	movs	r3, #0
 80097b4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80097ba:	78fb      	ldrb	r3, [r7, #3]
 80097bc:	015a      	lsls	r2, r3, #5
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	4413      	add	r3, r2
 80097c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097c6:	461a      	mov	r2, r3
 80097c8:	f04f 33ff 	mov.w	r3, #4294967295
 80097cc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80097ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80097d2:	2b03      	cmp	r3, #3
 80097d4:	d87c      	bhi.n	80098d0 <USB_HC_Init+0x138>
 80097d6:	a201      	add	r2, pc, #4	; (adr r2, 80097dc <USB_HC_Init+0x44>)
 80097d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097dc:	080097ed 	.word	0x080097ed
 80097e0:	08009893 	.word	0x08009893
 80097e4:	080097ed 	.word	0x080097ed
 80097e8:	08009855 	.word	0x08009855
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80097ec:	78fb      	ldrb	r3, [r7, #3]
 80097ee:	015a      	lsls	r2, r3, #5
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	4413      	add	r3, r2
 80097f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097f8:	461a      	mov	r2, r3
 80097fa:	f240 439d 	movw	r3, #1181	; 0x49d
 80097fe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009800:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009804:	2b00      	cmp	r3, #0
 8009806:	da10      	bge.n	800982a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009808:	78fb      	ldrb	r3, [r7, #3]
 800980a:	015a      	lsls	r2, r3, #5
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	4413      	add	r3, r2
 8009810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009814:	68db      	ldr	r3, [r3, #12]
 8009816:	78fa      	ldrb	r2, [r7, #3]
 8009818:	0151      	lsls	r1, r2, #5
 800981a:	693a      	ldr	r2, [r7, #16]
 800981c:	440a      	add	r2, r1
 800981e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009826:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8009828:	e055      	b.n	80098d6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4a6f      	ldr	r2, [pc, #444]	; (80099ec <USB_HC_Init+0x254>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d151      	bne.n	80098d6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009832:	78fb      	ldrb	r3, [r7, #3]
 8009834:	015a      	lsls	r2, r3, #5
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	4413      	add	r3, r2
 800983a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	78fa      	ldrb	r2, [r7, #3]
 8009842:	0151      	lsls	r1, r2, #5
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	440a      	add	r2, r1
 8009848:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800984c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009850:	60d3      	str	r3, [r2, #12]
      break;
 8009852:	e040      	b.n	80098d6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009854:	78fb      	ldrb	r3, [r7, #3]
 8009856:	015a      	lsls	r2, r3, #5
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	4413      	add	r3, r2
 800985c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009860:	461a      	mov	r2, r3
 8009862:	f240 639d 	movw	r3, #1693	; 0x69d
 8009866:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009868:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800986c:	2b00      	cmp	r3, #0
 800986e:	da34      	bge.n	80098da <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009870:	78fb      	ldrb	r3, [r7, #3]
 8009872:	015a      	lsls	r2, r3, #5
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	4413      	add	r3, r2
 8009878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	78fa      	ldrb	r2, [r7, #3]
 8009880:	0151      	lsls	r1, r2, #5
 8009882:	693a      	ldr	r2, [r7, #16]
 8009884:	440a      	add	r2, r1
 8009886:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800988a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800988e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009890:	e023      	b.n	80098da <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009892:	78fb      	ldrb	r3, [r7, #3]
 8009894:	015a      	lsls	r2, r3, #5
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	4413      	add	r3, r2
 800989a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800989e:	461a      	mov	r2, r3
 80098a0:	f240 2325 	movw	r3, #549	; 0x225
 80098a4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80098a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	da17      	bge.n	80098de <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80098ae:	78fb      	ldrb	r3, [r7, #3]
 80098b0:	015a      	lsls	r2, r3, #5
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	4413      	add	r3, r2
 80098b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	78fa      	ldrb	r2, [r7, #3]
 80098be:	0151      	lsls	r1, r2, #5
 80098c0:	693a      	ldr	r2, [r7, #16]
 80098c2:	440a      	add	r2, r1
 80098c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098c8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80098cc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80098ce:	e006      	b.n	80098de <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	77fb      	strb	r3, [r7, #31]
      break;
 80098d4:	e004      	b.n	80098e0 <USB_HC_Init+0x148>
      break;
 80098d6:	bf00      	nop
 80098d8:	e002      	b.n	80098e0 <USB_HC_Init+0x148>
      break;
 80098da:	bf00      	nop
 80098dc:	e000      	b.n	80098e0 <USB_HC_Init+0x148>
      break;
 80098de:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80098e0:	78fb      	ldrb	r3, [r7, #3]
 80098e2:	015a      	lsls	r2, r3, #5
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	4413      	add	r3, r2
 80098e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098ec:	461a      	mov	r2, r3
 80098ee:	2300      	movs	r3, #0
 80098f0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80098f2:	78fb      	ldrb	r3, [r7, #3]
 80098f4:	015a      	lsls	r2, r3, #5
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	4413      	add	r3, r2
 80098fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	78fa      	ldrb	r2, [r7, #3]
 8009902:	0151      	lsls	r1, r2, #5
 8009904:	693a      	ldr	r2, [r7, #16]
 8009906:	440a      	add	r2, r1
 8009908:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800990c:	f043 0302 	orr.w	r3, r3, #2
 8009910:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009918:	699a      	ldr	r2, [r3, #24]
 800991a:	78fb      	ldrb	r3, [r7, #3]
 800991c:	f003 030f 	and.w	r3, r3, #15
 8009920:	2101      	movs	r1, #1
 8009922:	fa01 f303 	lsl.w	r3, r1, r3
 8009926:	6939      	ldr	r1, [r7, #16]
 8009928:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800992c:	4313      	orrs	r3, r2
 800992e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800993c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009940:	2b00      	cmp	r3, #0
 8009942:	da03      	bge.n	800994c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009944:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009948:	61bb      	str	r3, [r7, #24]
 800994a:	e001      	b.n	8009950 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800994c:	2300      	movs	r3, #0
 800994e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f7ff fef9 	bl	8009748 <USB_GetHostSpeed>
 8009956:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009958:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800995c:	2b02      	cmp	r3, #2
 800995e:	d106      	bne.n	800996e <USB_HC_Init+0x1d6>
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2b02      	cmp	r3, #2
 8009964:	d003      	beq.n	800996e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009966:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800996a:	617b      	str	r3, [r7, #20]
 800996c:	e001      	b.n	8009972 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800996e:	2300      	movs	r3, #0
 8009970:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009972:	787b      	ldrb	r3, [r7, #1]
 8009974:	059b      	lsls	r3, r3, #22
 8009976:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800997a:	78bb      	ldrb	r3, [r7, #2]
 800997c:	02db      	lsls	r3, r3, #11
 800997e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009982:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009984:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009988:	049b      	lsls	r3, r3, #18
 800998a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800998e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8009990:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009992:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009996:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	431a      	orrs	r2, r3
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80099a0:	78fa      	ldrb	r2, [r7, #3]
 80099a2:	0151      	lsls	r1, r2, #5
 80099a4:	693a      	ldr	r2, [r7, #16]
 80099a6:	440a      	add	r2, r1
 80099a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80099ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80099b0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80099b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80099b6:	2b03      	cmp	r3, #3
 80099b8:	d003      	beq.n	80099c2 <USB_HC_Init+0x22a>
 80099ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d10f      	bne.n	80099e2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80099c2:	78fb      	ldrb	r3, [r7, #3]
 80099c4:	015a      	lsls	r2, r3, #5
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	4413      	add	r3, r2
 80099ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	78fa      	ldrb	r2, [r7, #3]
 80099d2:	0151      	lsls	r1, r2, #5
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	440a      	add	r2, r1
 80099d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80099e0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80099e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3720      	adds	r7, #32
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	40040000 	.word	0x40040000

080099f0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b08c      	sub	sp, #48	; 0x30
 80099f4:	af02      	add	r7, sp, #8
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	4613      	mov	r3, r2
 80099fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	785b      	ldrb	r3, [r3, #1]
 8009a06:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8009a08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a0c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	4a5d      	ldr	r2, [pc, #372]	; (8009b88 <USB_HC_StartXfer+0x198>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d12f      	bne.n	8009a76 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8009a16:	79fb      	ldrb	r3, [r7, #7]
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d11c      	bne.n	8009a56 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	7c9b      	ldrb	r3, [r3, #18]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d003      	beq.n	8009a2c <USB_HC_StartXfer+0x3c>
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	7c9b      	ldrb	r3, [r3, #18]
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	d124      	bne.n	8009a76 <USB_HC_StartXfer+0x86>
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	799b      	ldrb	r3, [r3, #6]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d120      	bne.n	8009a76 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	015a      	lsls	r2, r3, #5
 8009a38:	6a3b      	ldr	r3, [r7, #32]
 8009a3a:	4413      	add	r3, r2
 8009a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	69fa      	ldr	r2, [r7, #28]
 8009a44:	0151      	lsls	r1, r2, #5
 8009a46:	6a3a      	ldr	r2, [r7, #32]
 8009a48:	440a      	add	r2, r1
 8009a4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a52:	60d3      	str	r3, [r2, #12]
 8009a54:	e00f      	b.n	8009a76 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	791b      	ldrb	r3, [r3, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10b      	bne.n	8009a76 <USB_HC_StartXfer+0x86>
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	795b      	ldrb	r3, [r3, #5]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d107      	bne.n	8009a76 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	785b      	ldrb	r3, [r3, #1]
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	68f8      	ldr	r0, [r7, #12]
 8009a6e:	f000 fb6b 	bl	800a148 <USB_DoPing>
        return HAL_OK;
 8009a72:	2300      	movs	r3, #0
 8009a74:	e232      	b.n	8009edc <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	799b      	ldrb	r3, [r3, #6]
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d158      	bne.n	8009b30 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	78db      	ldrb	r3, [r3, #3]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d007      	beq.n	8009a9a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009a8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009a8c:	68ba      	ldr	r2, [r7, #8]
 8009a8e:	8a92      	ldrh	r2, [r2, #20]
 8009a90:	fb03 f202 	mul.w	r2, r3, r2
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	61da      	str	r2, [r3, #28]
 8009a98:	e07c      	b.n	8009b94 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	7c9b      	ldrb	r3, [r3, #18]
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d130      	bne.n	8009b04 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	6a1b      	ldr	r3, [r3, #32]
 8009aa6:	2bbc      	cmp	r3, #188	; 0xbc
 8009aa8:	d918      	bls.n	8009adc <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	8a9b      	ldrh	r3, [r3, #20]
 8009aae:	461a      	mov	r2, r3
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	69da      	ldr	r2, [r3, #28]
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d003      	beq.n	8009acc <USB_HC_StartXfer+0xdc>
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	d103      	bne.n	8009ad4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	2202      	movs	r2, #2
 8009ad0:	60da      	str	r2, [r3, #12]
 8009ad2:	e05f      	b.n	8009b94 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	60da      	str	r2, [r3, #12]
 8009ada:	e05b      	b.n	8009b94 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	6a1a      	ldr	r2, [r3, #32]
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d007      	beq.n	8009afc <USB_HC_StartXfer+0x10c>
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d003      	beq.n	8009afc <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	2204      	movs	r2, #4
 8009af8:	60da      	str	r2, [r3, #12]
 8009afa:	e04b      	b.n	8009b94 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	2203      	movs	r2, #3
 8009b00:	60da      	str	r2, [r3, #12]
 8009b02:	e047      	b.n	8009b94 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8009b04:	79fb      	ldrb	r3, [r7, #7]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d10d      	bne.n	8009b26 <USB_HC_StartXfer+0x136>
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	6a1b      	ldr	r3, [r3, #32]
 8009b0e:	68ba      	ldr	r2, [r7, #8]
 8009b10:	8a92      	ldrh	r2, [r2, #20]
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d907      	bls.n	8009b26 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009b16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	8a92      	ldrh	r2, [r2, #20]
 8009b1c:	fb03 f202 	mul.w	r2, r3, r2
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	61da      	str	r2, [r3, #28]
 8009b24:	e036      	b.n	8009b94 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	6a1a      	ldr	r2, [r3, #32]
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	61da      	str	r2, [r3, #28]
 8009b2e:	e031      	b.n	8009b94 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	6a1b      	ldr	r3, [r3, #32]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d018      	beq.n	8009b6a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	6a1b      	ldr	r3, [r3, #32]
 8009b3c:	68ba      	ldr	r2, [r7, #8]
 8009b3e:	8a92      	ldrh	r2, [r2, #20]
 8009b40:	4413      	add	r3, r2
 8009b42:	3b01      	subs	r3, #1
 8009b44:	68ba      	ldr	r2, [r7, #8]
 8009b46:	8a92      	ldrh	r2, [r2, #20]
 8009b48:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b4c:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8009b4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009b50:	8b7b      	ldrh	r3, [r7, #26]
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d90b      	bls.n	8009b6e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8009b56:	8b7b      	ldrh	r3, [r7, #26]
 8009b58:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009b5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009b5c:	68ba      	ldr	r2, [r7, #8]
 8009b5e:	8a92      	ldrh	r2, [r2, #20]
 8009b60:	fb03 f202 	mul.w	r2, r3, r2
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	61da      	str	r2, [r3, #28]
 8009b68:	e001      	b.n	8009b6e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	78db      	ldrb	r3, [r3, #3]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00a      	beq.n	8009b8c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009b76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009b78:	68ba      	ldr	r2, [r7, #8]
 8009b7a:	8a92      	ldrh	r2, [r2, #20]
 8009b7c:	fb03 f202 	mul.w	r2, r3, r2
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	61da      	str	r2, [r3, #28]
 8009b84:	e006      	b.n	8009b94 <USB_HC_StartXfer+0x1a4>
 8009b86:	bf00      	nop
 8009b88:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	6a1a      	ldr	r2, [r3, #32]
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	69db      	ldr	r3, [r3, #28]
 8009b98:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009b9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009b9e:	04d9      	lsls	r1, r3, #19
 8009ba0:	4ba3      	ldr	r3, [pc, #652]	; (8009e30 <USB_HC_StartXfer+0x440>)
 8009ba2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009ba4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	7d9b      	ldrb	r3, [r3, #22]
 8009baa:	075b      	lsls	r3, r3, #29
 8009bac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009bb0:	69f9      	ldr	r1, [r7, #28]
 8009bb2:	0148      	lsls	r0, r1, #5
 8009bb4:	6a39      	ldr	r1, [r7, #32]
 8009bb6:	4401      	add	r1, r0
 8009bb8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009bbc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009bbe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009bc0:	79fb      	ldrb	r3, [r7, #7]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d009      	beq.n	8009bda <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	6999      	ldr	r1, [r3, #24]
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	015a      	lsls	r2, r3, #5
 8009bce:	6a3b      	ldr	r3, [r7, #32]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bd6:	460a      	mov	r2, r1
 8009bd8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009bda:	6a3b      	ldr	r3, [r7, #32]
 8009bdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	f003 0301 	and.w	r3, r3, #1
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	bf0c      	ite	eq
 8009bea:	2301      	moveq	r3, #1
 8009bec:	2300      	movne	r3, #0
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	015a      	lsls	r2, r3, #5
 8009bf6:	6a3b      	ldr	r3, [r7, #32]
 8009bf8:	4413      	add	r3, r2
 8009bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	69fa      	ldr	r2, [r7, #28]
 8009c02:	0151      	lsls	r1, r2, #5
 8009c04:	6a3a      	ldr	r2, [r7, #32]
 8009c06:	440a      	add	r2, r1
 8009c08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c0c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009c10:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009c12:	69fb      	ldr	r3, [r7, #28]
 8009c14:	015a      	lsls	r2, r3, #5
 8009c16:	6a3b      	ldr	r3, [r7, #32]
 8009c18:	4413      	add	r3, r2
 8009c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	7e7b      	ldrb	r3, [r7, #25]
 8009c22:	075b      	lsls	r3, r3, #29
 8009c24:	69f9      	ldr	r1, [r7, #28]
 8009c26:	0148      	lsls	r0, r1, #5
 8009c28:	6a39      	ldr	r1, [r7, #32]
 8009c2a:	4401      	add	r1, r0
 8009c2c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009c30:	4313      	orrs	r3, r2
 8009c32:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	799b      	ldrb	r3, [r3, #6]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	f040 80c3 	bne.w	8009dc4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	7c5b      	ldrb	r3, [r3, #17]
 8009c42:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009c44:	68ba      	ldr	r2, [r7, #8]
 8009c46:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	69fa      	ldr	r2, [r7, #28]
 8009c4c:	0151      	lsls	r1, r2, #5
 8009c4e:	6a3a      	ldr	r2, [r7, #32]
 8009c50:	440a      	add	r2, r1
 8009c52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009c56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009c5a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	015a      	lsls	r2, r3, #5
 8009c60:	6a3b      	ldr	r3, [r7, #32]
 8009c62:	4413      	add	r3, r2
 8009c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	69fa      	ldr	r2, [r7, #28]
 8009c6c:	0151      	lsls	r1, r2, #5
 8009c6e:	6a3a      	ldr	r2, [r7, #32]
 8009c70:	440a      	add	r2, r1
 8009c72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c76:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009c7a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	79db      	ldrb	r3, [r3, #7]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d123      	bne.n	8009ccc <USB_HC_StartXfer+0x2dc>
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	78db      	ldrb	r3, [r3, #3]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d11f      	bne.n	8009ccc <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	015a      	lsls	r2, r3, #5
 8009c90:	6a3b      	ldr	r3, [r7, #32]
 8009c92:	4413      	add	r3, r2
 8009c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	69fa      	ldr	r2, [r7, #28]
 8009c9c:	0151      	lsls	r1, r2, #5
 8009c9e:	6a3a      	ldr	r2, [r7, #32]
 8009ca0:	440a      	add	r2, r1
 8009ca2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009caa:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	015a      	lsls	r2, r3, #5
 8009cb0:	6a3b      	ldr	r3, [r7, #32]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	69fa      	ldr	r2, [r7, #28]
 8009cbc:	0151      	lsls	r1, r2, #5
 8009cbe:	6a3a      	ldr	r2, [r7, #32]
 8009cc0:	440a      	add	r2, r1
 8009cc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cca:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	7c9b      	ldrb	r3, [r3, #18]
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d003      	beq.n	8009cdc <USB_HC_StartXfer+0x2ec>
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	7c9b      	ldrb	r3, [r3, #18]
 8009cd8:	2b03      	cmp	r3, #3
 8009cda:	d117      	bne.n	8009d0c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d113      	bne.n	8009d0c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	78db      	ldrb	r3, [r3, #3]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d10f      	bne.n	8009d0c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	015a      	lsls	r2, r3, #5
 8009cf0:	6a3b      	ldr	r3, [r7, #32]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	69fa      	ldr	r2, [r7, #28]
 8009cfc:	0151      	lsls	r1, r2, #5
 8009cfe:	6a3a      	ldr	r2, [r7, #32]
 8009d00:	440a      	add	r2, r1
 8009d02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d0a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	7c9b      	ldrb	r3, [r3, #18]
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d162      	bne.n	8009dda <USB_HC_StartXfer+0x3ea>
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	78db      	ldrb	r3, [r3, #3]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d15e      	bne.n	8009dda <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	68db      	ldr	r3, [r3, #12]
 8009d20:	3b01      	subs	r3, #1
 8009d22:	2b03      	cmp	r3, #3
 8009d24:	d858      	bhi.n	8009dd8 <USB_HC_StartXfer+0x3e8>
 8009d26:	a201      	add	r2, pc, #4	; (adr r2, 8009d2c <USB_HC_StartXfer+0x33c>)
 8009d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d2c:	08009d3d 	.word	0x08009d3d
 8009d30:	08009d5f 	.word	0x08009d5f
 8009d34:	08009d81 	.word	0x08009d81
 8009d38:	08009da3 	.word	0x08009da3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8009d3c:	69fb      	ldr	r3, [r7, #28]
 8009d3e:	015a      	lsls	r2, r3, #5
 8009d40:	6a3b      	ldr	r3, [r7, #32]
 8009d42:	4413      	add	r3, r2
 8009d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	69fa      	ldr	r2, [r7, #28]
 8009d4c:	0151      	lsls	r1, r2, #5
 8009d4e:	6a3a      	ldr	r2, [r7, #32]
 8009d50:	440a      	add	r2, r1
 8009d52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d5a:	6053      	str	r3, [r2, #4]
          break;
 8009d5c:	e03d      	b.n	8009dda <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	015a      	lsls	r2, r3, #5
 8009d62:	6a3b      	ldr	r3, [r7, #32]
 8009d64:	4413      	add	r3, r2
 8009d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	69fa      	ldr	r2, [r7, #28]
 8009d6e:	0151      	lsls	r1, r2, #5
 8009d70:	6a3a      	ldr	r2, [r7, #32]
 8009d72:	440a      	add	r2, r1
 8009d74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d78:	f043 030e 	orr.w	r3, r3, #14
 8009d7c:	6053      	str	r3, [r2, #4]
          break;
 8009d7e:	e02c      	b.n	8009dda <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	015a      	lsls	r2, r3, #5
 8009d84:	6a3b      	ldr	r3, [r7, #32]
 8009d86:	4413      	add	r3, r2
 8009d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	69fa      	ldr	r2, [r7, #28]
 8009d90:	0151      	lsls	r1, r2, #5
 8009d92:	6a3a      	ldr	r2, [r7, #32]
 8009d94:	440a      	add	r2, r1
 8009d96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d9e:	6053      	str	r3, [r2, #4]
          break;
 8009da0:	e01b      	b.n	8009dda <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	015a      	lsls	r2, r3, #5
 8009da6:	6a3b      	ldr	r3, [r7, #32]
 8009da8:	4413      	add	r3, r2
 8009daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	69fa      	ldr	r2, [r7, #28]
 8009db2:	0151      	lsls	r1, r2, #5
 8009db4:	6a3a      	ldr	r2, [r7, #32]
 8009db6:	440a      	add	r2, r1
 8009db8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009dbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009dc0:	6053      	str	r3, [r2, #4]
          break;
 8009dc2:	e00a      	b.n	8009dda <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	015a      	lsls	r2, r3, #5
 8009dc8:	6a3b      	ldr	r3, [r7, #32]
 8009dca:	4413      	add	r3, r2
 8009dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	6053      	str	r3, [r2, #4]
 8009dd6:	e000      	b.n	8009dda <USB_HC_StartXfer+0x3ea>
          break;
 8009dd8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009dda:	69fb      	ldr	r3, [r7, #28]
 8009ddc:	015a      	lsls	r2, r3, #5
 8009dde:	6a3b      	ldr	r3, [r7, #32]
 8009de0:	4413      	add	r3, r2
 8009de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009df0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	78db      	ldrb	r3, [r3, #3]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d004      	beq.n	8009e04 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e00:	613b      	str	r3, [r7, #16]
 8009e02:	e003      	b.n	8009e0c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009e0a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e12:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	015a      	lsls	r2, r3, #5
 8009e18:	6a3b      	ldr	r3, [r7, #32]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e20:	461a      	mov	r2, r3
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009e26:	79fb      	ldrb	r3, [r7, #7]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d003      	beq.n	8009e34 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	e055      	b.n	8009edc <USB_HC_StartXfer+0x4ec>
 8009e30:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	78db      	ldrb	r3, [r3, #3]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d14e      	bne.n	8009eda <USB_HC_StartXfer+0x4ea>
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	6a1b      	ldr	r3, [r3, #32]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d04a      	beq.n	8009eda <USB_HC_StartXfer+0x4ea>
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	79db      	ldrb	r3, [r3, #7]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d146      	bne.n	8009eda <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	7c9b      	ldrb	r3, [r3, #18]
 8009e50:	2b03      	cmp	r3, #3
 8009e52:	d831      	bhi.n	8009eb8 <USB_HC_StartXfer+0x4c8>
 8009e54:	a201      	add	r2, pc, #4	; (adr r2, 8009e5c <USB_HC_StartXfer+0x46c>)
 8009e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5a:	bf00      	nop
 8009e5c:	08009e6d 	.word	0x08009e6d
 8009e60:	08009e91 	.word	0x08009e91
 8009e64:	08009e6d 	.word	0x08009e6d
 8009e68:	08009e91 	.word	0x08009e91
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	6a1b      	ldr	r3, [r3, #32]
 8009e70:	3303      	adds	r3, #3
 8009e72:	089b      	lsrs	r3, r3, #2
 8009e74:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009e76:	8afa      	ldrh	r2, [r7, #22]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d91c      	bls.n	8009ebc <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	699b      	ldr	r3, [r3, #24]
 8009e86:	f043 0220 	orr.w	r2, r3, #32
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	619a      	str	r2, [r3, #24]
        }
        break;
 8009e8e:	e015      	b.n	8009ebc <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	6a1b      	ldr	r3, [r3, #32]
 8009e94:	3303      	adds	r3, #3
 8009e96:	089b      	lsrs	r3, r3, #2
 8009e98:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009e9a:	8afa      	ldrh	r2, [r7, #22]
 8009e9c:	6a3b      	ldr	r3, [r7, #32]
 8009e9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ea2:	691b      	ldr	r3, [r3, #16]
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d90a      	bls.n	8009ec0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	699b      	ldr	r3, [r3, #24]
 8009eae:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	619a      	str	r2, [r3, #24]
        }
        break;
 8009eb6:	e003      	b.n	8009ec0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8009eb8:	bf00      	nop
 8009eba:	e002      	b.n	8009ec2 <USB_HC_StartXfer+0x4d2>
        break;
 8009ebc:	bf00      	nop
 8009ebe:	e000      	b.n	8009ec2 <USB_HC_StartXfer+0x4d2>
        break;
 8009ec0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	6999      	ldr	r1, [r3, #24]
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	785a      	ldrb	r2, [r3, #1]
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	6a1b      	ldr	r3, [r3, #32]
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	9000      	str	r0, [sp, #0]
 8009ed4:	68f8      	ldr	r0, [r7, #12]
 8009ed6:	f7ff f9c9 	bl	800926c <USB_WritePacket>
  }

  return HAL_OK;
 8009eda:	2300      	movs	r3, #0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3728      	adds	r7, #40	; 0x28
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ef6:	695b      	ldr	r3, [r3, #20]
 8009ef8:	b29b      	uxth	r3, r3
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3714      	adds	r7, #20
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr

08009f06 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009f06:	b480      	push	{r7}
 8009f08:	b089      	sub	sp, #36	; 0x24
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	460b      	mov	r3, r1
 8009f10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009f16:	78fb      	ldrb	r3, [r7, #3]
 8009f18:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	015a      	lsls	r2, r3, #5
 8009f22:	69fb      	ldr	r3, [r7, #28]
 8009f24:	4413      	add	r3, r2
 8009f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	0c9b      	lsrs	r3, r3, #18
 8009f2e:	f003 0303 	and.w	r3, r3, #3
 8009f32:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	015a      	lsls	r2, r3, #5
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	0fdb      	lsrs	r3, r3, #31
 8009f44:	f003 0301 	and.w	r3, r3, #1
 8009f48:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	015a      	lsls	r2, r3, #5
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	4413      	add	r3, r2
 8009f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	0fdb      	lsrs	r3, r3, #31
 8009f5a:	f003 0301 	and.w	r3, r3, #1
 8009f5e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	f003 0320 	and.w	r3, r3, #32
 8009f68:	2b20      	cmp	r3, #32
 8009f6a:	d10d      	bne.n	8009f88 <USB_HC_Halt+0x82>
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10a      	bne.n	8009f88 <USB_HC_Halt+0x82>
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d005      	beq.n	8009f84 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d002      	beq.n	8009f84 <USB_HC_Halt+0x7e>
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	2b03      	cmp	r3, #3
 8009f82:	d101      	bne.n	8009f88 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8009f84:	2300      	movs	r3, #0
 8009f86:	e0d8      	b.n	800a13a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d002      	beq.n	8009f94 <USB_HC_Halt+0x8e>
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	d173      	bne.n	800a07c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	015a      	lsls	r2, r3, #5
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	4413      	add	r3, r2
 8009f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	69ba      	ldr	r2, [r7, #24]
 8009fa4:	0151      	lsls	r1, r2, #5
 8009fa6:	69fa      	ldr	r2, [r7, #28]
 8009fa8:	440a      	add	r2, r1
 8009faa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fb2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	f003 0320 	and.w	r3, r3, #32
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d14a      	bne.n	800a056 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d133      	bne.n	800a034 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	015a      	lsls	r2, r3, #5
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	69ba      	ldr	r2, [r7, #24]
 8009fdc:	0151      	lsls	r1, r2, #5
 8009fde:	69fa      	ldr	r2, [r7, #28]
 8009fe0:	440a      	add	r2, r1
 8009fe2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fe6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fea:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	015a      	lsls	r2, r3, #5
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	69ba      	ldr	r2, [r7, #24]
 8009ffc:	0151      	lsls	r1, r2, #5
 8009ffe:	69fa      	ldr	r2, [r7, #28]
 800a000:	440a      	add	r2, r1
 800a002:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a006:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a00a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	3301      	adds	r3, #1
 800a010:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a018:	d82e      	bhi.n	800a078 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	015a      	lsls	r2, r3, #5
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	4413      	add	r3, r2
 800a022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a02c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a030:	d0ec      	beq.n	800a00c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a032:	e081      	b.n	800a138 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a034:	69bb      	ldr	r3, [r7, #24]
 800a036:	015a      	lsls	r2, r3, #5
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	4413      	add	r3, r2
 800a03c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	69ba      	ldr	r2, [r7, #24]
 800a044:	0151      	lsls	r1, r2, #5
 800a046:	69fa      	ldr	r2, [r7, #28]
 800a048:	440a      	add	r2, r1
 800a04a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a04e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a052:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a054:	e070      	b.n	800a138 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	015a      	lsls	r2, r3, #5
 800a05a:	69fb      	ldr	r3, [r7, #28]
 800a05c:	4413      	add	r3, r2
 800a05e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	69ba      	ldr	r2, [r7, #24]
 800a066:	0151      	lsls	r1, r2, #5
 800a068:	69fa      	ldr	r2, [r7, #28]
 800a06a:	440a      	add	r2, r1
 800a06c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a070:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a074:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a076:	e05f      	b.n	800a138 <USB_HC_Halt+0x232>
            break;
 800a078:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a07a:	e05d      	b.n	800a138 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	015a      	lsls	r2, r3, #5
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	4413      	add	r3, r2
 800a084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	69ba      	ldr	r2, [r7, #24]
 800a08c:	0151      	lsls	r1, r2, #5
 800a08e:	69fa      	ldr	r2, [r7, #28]
 800a090:	440a      	add	r2, r1
 800a092:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a096:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a09a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0a2:	691b      	ldr	r3, [r3, #16]
 800a0a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d133      	bne.n	800a114 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	015a      	lsls	r2, r3, #5
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	69ba      	ldr	r2, [r7, #24]
 800a0bc:	0151      	lsls	r1, r2, #5
 800a0be:	69fa      	ldr	r2, [r7, #28]
 800a0c0:	440a      	add	r2, r1
 800a0c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	015a      	lsls	r2, r3, #5
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	69ba      	ldr	r2, [r7, #24]
 800a0dc:	0151      	lsls	r1, r2, #5
 800a0de:	69fa      	ldr	r2, [r7, #28]
 800a0e0:	440a      	add	r2, r1
 800a0e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a0ea:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a0f8:	d81d      	bhi.n	800a136 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	015a      	lsls	r2, r3, #5
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	4413      	add	r3, r2
 800a102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a10c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a110:	d0ec      	beq.n	800a0ec <USB_HC_Halt+0x1e6>
 800a112:	e011      	b.n	800a138 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	015a      	lsls	r2, r3, #5
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	4413      	add	r3, r2
 800a11c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	69ba      	ldr	r2, [r7, #24]
 800a124:	0151      	lsls	r1, r2, #5
 800a126:	69fa      	ldr	r2, [r7, #28]
 800a128:	440a      	add	r2, r1
 800a12a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a12e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a132:	6013      	str	r3, [r2, #0]
 800a134:	e000      	b.n	800a138 <USB_HC_Halt+0x232>
          break;
 800a136:	bf00      	nop
    }
  }

  return HAL_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3724      	adds	r7, #36	; 0x24
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr
	...

0800a148 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a148:	b480      	push	{r7}
 800a14a:	b087      	sub	sp, #28
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	460b      	mov	r3, r1
 800a152:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a158:	78fb      	ldrb	r3, [r7, #3]
 800a15a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a15c:	2301      	movs	r3, #1
 800a15e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	04da      	lsls	r2, r3, #19
 800a164:	4b15      	ldr	r3, [pc, #84]	; (800a1bc <USB_DoPing+0x74>)
 800a166:	4013      	ands	r3, r2
 800a168:	693a      	ldr	r2, [r7, #16]
 800a16a:	0151      	lsls	r1, r2, #5
 800a16c:	697a      	ldr	r2, [r7, #20]
 800a16e:	440a      	add	r2, r1
 800a170:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a178:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	015a      	lsls	r2, r3, #5
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	4413      	add	r3, r2
 800a182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a190:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a198:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	015a      	lsls	r2, r3, #5
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	4413      	add	r3, r2
 800a1a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	371c      	adds	r7, #28
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	1ff80000 	.word	0x1ff80000

0800a1c0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b088      	sub	sp, #32
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f7fe ff8c 	bl	80090f2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a1da:	2110      	movs	r1, #16
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f7fe ffe5 	bl	80091ac <USB_FlushTxFifo>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d001      	beq.n	800a1ec <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f7ff f80f 	bl	8009210 <USB_FlushRxFifo>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d001      	beq.n	800a1fc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	61bb      	str	r3, [r7, #24]
 800a200:	e01f      	b.n	800a242 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	015a      	lsls	r2, r3, #5
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	4413      	add	r3, r2
 800a20a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a218:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a220:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a228:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	015a      	lsls	r2, r3, #5
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	4413      	add	r3, r2
 800a232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a236:	461a      	mov	r2, r3
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	3301      	adds	r3, #1
 800a240:	61bb      	str	r3, [r7, #24]
 800a242:	69bb      	ldr	r3, [r7, #24]
 800a244:	2b0f      	cmp	r3, #15
 800a246:	d9dc      	bls.n	800a202 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a248:	2300      	movs	r3, #0
 800a24a:	61bb      	str	r3, [r7, #24]
 800a24c:	e034      	b.n	800a2b8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	015a      	lsls	r2, r3, #5
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	4413      	add	r3, r2
 800a256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a264:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a26c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a274:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	015a      	lsls	r2, r3, #5
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	4413      	add	r3, r2
 800a27e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a282:	461a      	mov	r2, r3
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	3301      	adds	r3, #1
 800a28c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a294:	d80c      	bhi.n	800a2b0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a296:	69bb      	ldr	r3, [r7, #24]
 800a298:	015a      	lsls	r2, r3, #5
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	4413      	add	r3, r2
 800a29e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a2ac:	d0ec      	beq.n	800a288 <USB_StopHost+0xc8>
 800a2ae:	e000      	b.n	800a2b2 <USB_StopHost+0xf2>
        break;
 800a2b0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a2b2:	69bb      	ldr	r3, [r7, #24]
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	61bb      	str	r3, [r7, #24]
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	2b0f      	cmp	r3, #15
 800a2bc:	d9c7      	bls.n	800a24e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ca:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a2d2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f7fe fefb 	bl	80090d0 <USB_EnableGlobalInt>

  return ret;
 800a2da:	7ffb      	ldrb	r3, [r7, #31]
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3720      	adds	r7, #32
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a2e4:	b590      	push	{r4, r7, lr}
 800a2e6:	b089      	sub	sp, #36	; 0x24
 800a2e8:	af04      	add	r7, sp, #16
 800a2ea:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	2202      	movs	r2, #2
 800a2f0:	2102      	movs	r1, #2
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 fc85 	bl	800ac02 <USBH_FindInterface>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a2fc:	7bfb      	ldrb	r3, [r7, #15]
 800a2fe:	2bff      	cmp	r3, #255	; 0xff
 800a300:	d002      	beq.n	800a308 <USBH_CDC_InterfaceInit+0x24>
 800a302:	7bfb      	ldrb	r3, [r7, #15]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d901      	bls.n	800a30c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a308:	2302      	movs	r3, #2
 800a30a:	e13d      	b.n	800a588 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a30c:	7bfb      	ldrb	r3, [r7, #15]
 800a30e:	4619      	mov	r1, r3
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 fc5a 	bl	800abca <USBH_SelectInterface>
 800a316:	4603      	mov	r3, r0
 800a318:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a31a:	7bbb      	ldrb	r3, [r7, #14]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d001      	beq.n	800a324 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a320:	2302      	movs	r3, #2
 800a322:	e131      	b.n	800a588 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a32a:	2050      	movs	r0, #80	; 0x50
 800a32c:	f002 fb78 	bl	800ca20 <malloc>
 800a330:	4603      	mov	r3, r0
 800a332:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a33a:	69db      	ldr	r3, [r3, #28]
 800a33c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d101      	bne.n	800a348 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a344:	2302      	movs	r3, #2
 800a346:	e11f      	b.n	800a588 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a348:	2250      	movs	r2, #80	; 0x50
 800a34a:	2100      	movs	r1, #0
 800a34c:	68b8      	ldr	r0, [r7, #8]
 800a34e:	f004 f9dc 	bl	800e70a <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a352:	7bfb      	ldrb	r3, [r7, #15]
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	211a      	movs	r1, #26
 800a358:	fb01 f303 	mul.w	r3, r1, r3
 800a35c:	4413      	add	r3, r2
 800a35e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	b25b      	sxtb	r3, r3
 800a366:	2b00      	cmp	r3, #0
 800a368:	da15      	bge.n	800a396 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a36a:	7bfb      	ldrb	r3, [r7, #15]
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	211a      	movs	r1, #26
 800a370:	fb01 f303 	mul.w	r3, r1, r3
 800a374:	4413      	add	r3, r2
 800a376:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a37a:	781a      	ldrb	r2, [r3, #0]
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a380:	7bfb      	ldrb	r3, [r7, #15]
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	211a      	movs	r1, #26
 800a386:	fb01 f303 	mul.w	r3, r1, r3
 800a38a:	4413      	add	r3, r2
 800a38c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a390:	881a      	ldrh	r2, [r3, #0]
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	785b      	ldrb	r3, [r3, #1]
 800a39a:	4619      	mov	r1, r3
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f001 ffce 	bl	800c33e <USBH_AllocPipe>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	7819      	ldrb	r1, [r3, #0]
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	7858      	ldrb	r0, [r3, #1]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a3be:	68ba      	ldr	r2, [r7, #8]
 800a3c0:	8952      	ldrh	r2, [r2, #10]
 800a3c2:	9202      	str	r2, [sp, #8]
 800a3c4:	2203      	movs	r2, #3
 800a3c6:	9201      	str	r2, [sp, #4]
 800a3c8:	9300      	str	r3, [sp, #0]
 800a3ca:	4623      	mov	r3, r4
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f001 ff86 	bl	800c2e0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	4619      	mov	r1, r3
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f002 fa95 	bl	800c90c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	210a      	movs	r1, #10
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 fc0a 	bl	800ac02 <USBH_FindInterface>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a3f2:	7bfb      	ldrb	r3, [r7, #15]
 800a3f4:	2bff      	cmp	r3, #255	; 0xff
 800a3f6:	d002      	beq.n	800a3fe <USBH_CDC_InterfaceInit+0x11a>
 800a3f8:	7bfb      	ldrb	r3, [r7, #15]
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d901      	bls.n	800a402 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a3fe:	2302      	movs	r3, #2
 800a400:	e0c2      	b.n	800a588 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a402:	7bfb      	ldrb	r3, [r7, #15]
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	211a      	movs	r1, #26
 800a408:	fb01 f303 	mul.w	r3, r1, r3
 800a40c:	4413      	add	r3, r2
 800a40e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	b25b      	sxtb	r3, r3
 800a416:	2b00      	cmp	r3, #0
 800a418:	da16      	bge.n	800a448 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a41a:	7bfb      	ldrb	r3, [r7, #15]
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	211a      	movs	r1, #26
 800a420:	fb01 f303 	mul.w	r3, r1, r3
 800a424:	4413      	add	r3, r2
 800a426:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a42a:	781a      	ldrb	r2, [r3, #0]
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a430:	7bfb      	ldrb	r3, [r7, #15]
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	211a      	movs	r1, #26
 800a436:	fb01 f303 	mul.w	r3, r1, r3
 800a43a:	4413      	add	r3, r2
 800a43c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a440:	881a      	ldrh	r2, [r3, #0]
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	835a      	strh	r2, [r3, #26]
 800a446:	e015      	b.n	800a474 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a448:	7bfb      	ldrb	r3, [r7, #15]
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	211a      	movs	r1, #26
 800a44e:	fb01 f303 	mul.w	r3, r1, r3
 800a452:	4413      	add	r3, r2
 800a454:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a458:	781a      	ldrb	r2, [r3, #0]
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a45e:	7bfb      	ldrb	r3, [r7, #15]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	211a      	movs	r1, #26
 800a464:	fb01 f303 	mul.w	r3, r1, r3
 800a468:	4413      	add	r3, r2
 800a46a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a46e:	881a      	ldrh	r2, [r3, #0]
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a474:	7bfb      	ldrb	r3, [r7, #15]
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	211a      	movs	r1, #26
 800a47a:	fb01 f303 	mul.w	r3, r1, r3
 800a47e:	4413      	add	r3, r2
 800a480:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	b25b      	sxtb	r3, r3
 800a488:	2b00      	cmp	r3, #0
 800a48a:	da16      	bge.n	800a4ba <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a48c:	7bfb      	ldrb	r3, [r7, #15]
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	211a      	movs	r1, #26
 800a492:	fb01 f303 	mul.w	r3, r1, r3
 800a496:	4413      	add	r3, r2
 800a498:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a49c:	781a      	ldrb	r2, [r3, #0]
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a4a2:	7bfb      	ldrb	r3, [r7, #15]
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	211a      	movs	r1, #26
 800a4a8:	fb01 f303 	mul.w	r3, r1, r3
 800a4ac:	4413      	add	r3, r2
 800a4ae:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a4b2:	881a      	ldrh	r2, [r3, #0]
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	835a      	strh	r2, [r3, #26]
 800a4b8:	e015      	b.n	800a4e6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a4ba:	7bfb      	ldrb	r3, [r7, #15]
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	211a      	movs	r1, #26
 800a4c0:	fb01 f303 	mul.w	r3, r1, r3
 800a4c4:	4413      	add	r3, r2
 800a4c6:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a4ca:	781a      	ldrb	r2, [r3, #0]
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a4d0:	7bfb      	ldrb	r3, [r7, #15]
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	211a      	movs	r1, #26
 800a4d6:	fb01 f303 	mul.w	r3, r1, r3
 800a4da:	4413      	add	r3, r2
 800a4dc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a4e0:	881a      	ldrh	r2, [r3, #0]
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	7b9b      	ldrb	r3, [r3, #14]
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f001 ff26 	bl	800c33e <USBH_AllocPipe>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	7bdb      	ldrb	r3, [r3, #15]
 800a4fe:	4619      	mov	r1, r3
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f001 ff1c 	bl	800c33e <USBH_AllocPipe>
 800a506:	4603      	mov	r3, r0
 800a508:	461a      	mov	r2, r3
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	7b59      	ldrb	r1, [r3, #13]
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	7b98      	ldrb	r0, [r3, #14]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a522:	68ba      	ldr	r2, [r7, #8]
 800a524:	8b12      	ldrh	r2, [r2, #24]
 800a526:	9202      	str	r2, [sp, #8]
 800a528:	2202      	movs	r2, #2
 800a52a:	9201      	str	r2, [sp, #4]
 800a52c:	9300      	str	r3, [sp, #0]
 800a52e:	4623      	mov	r3, r4
 800a530:	4602      	mov	r2, r0
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f001 fed4 	bl	800c2e0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	7b19      	ldrb	r1, [r3, #12]
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	7bd8      	ldrb	r0, [r3, #15]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a54c:	68ba      	ldr	r2, [r7, #8]
 800a54e:	8b52      	ldrh	r2, [r2, #26]
 800a550:	9202      	str	r2, [sp, #8]
 800a552:	2202      	movs	r2, #2
 800a554:	9201      	str	r2, [sp, #4]
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	4623      	mov	r3, r4
 800a55a:	4602      	mov	r2, r0
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f001 febf 	bl	800c2e0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	2200      	movs	r2, #0
 800a566:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	7b5b      	ldrb	r3, [r3, #13]
 800a56e:	2200      	movs	r2, #0
 800a570:	4619      	mov	r1, r3
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f002 f9ca 	bl	800c90c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	7b1b      	ldrb	r3, [r3, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	4619      	mov	r1, r3
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f002 f9c3 	bl	800c90c <USBH_LL_SetToggle>

  return USBH_OK;
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3714      	adds	r7, #20
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd90      	pop	{r4, r7, pc}

0800a590 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a59e:	69db      	ldr	r3, [r3, #28]
 800a5a0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00e      	beq.n	800a5c8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f001 feb4 	bl	800c31e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f001 fedf 	bl	800c380 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	7b1b      	ldrb	r3, [r3, #12]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d00e      	beq.n	800a5ee <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	7b1b      	ldrb	r3, [r3, #12]
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f001 fea1 	bl	800c31e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	7b1b      	ldrb	r3, [r3, #12]
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f001 fecc 	bl	800c380 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	7b5b      	ldrb	r3, [r3, #13]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d00e      	beq.n	800a614 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	7b5b      	ldrb	r3, [r3, #13]
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f001 fe8e 	bl	800c31e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	7b5b      	ldrb	r3, [r3, #13]
 800a606:	4619      	mov	r1, r3
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f001 feb9 	bl	800c380 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2200      	movs	r2, #0
 800a612:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a61a:	69db      	ldr	r3, [r3, #28]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d00b      	beq.n	800a638 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a626:	69db      	ldr	r3, [r3, #28]
 800a628:	4618      	mov	r0, r3
 800a62a:	f002 fa01 	bl	800ca30 <free>
    phost->pActiveClass->pData = 0U;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a634:	2200      	movs	r2, #0
 800a636:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b084      	sub	sp, #16
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a650:	69db      	ldr	r3, [r3, #28]
 800a652:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	3340      	adds	r3, #64	; 0x40
 800a658:	4619      	mov	r1, r3
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 f8b1 	bl	800a7c2 <GetLineCoding>
 800a660:	4603      	mov	r3, r0
 800a662:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a664:	7afb      	ldrb	r3, [r7, #11]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d105      	bne.n	800a676 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a670:	2102      	movs	r1, #2
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a676:	7afb      	ldrb	r3, [r7, #11]
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a688:	2301      	movs	r3, #1
 800a68a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a68c:	2300      	movs	r3, #0
 800a68e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a696:	69db      	ldr	r3, [r3, #28]
 800a698:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a6a0:	2b04      	cmp	r3, #4
 800a6a2:	d877      	bhi.n	800a794 <USBH_CDC_Process+0x114>
 800a6a4:	a201      	add	r2, pc, #4	; (adr r2, 800a6ac <USBH_CDC_Process+0x2c>)
 800a6a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6aa:	bf00      	nop
 800a6ac:	0800a6c1 	.word	0x0800a6c1
 800a6b0:	0800a6c7 	.word	0x0800a6c7
 800a6b4:	0800a6f7 	.word	0x0800a6f7
 800a6b8:	0800a76b 	.word	0x0800a76b
 800a6bc:	0800a779 	.word	0x0800a779
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	73fb      	strb	r3, [r7, #15]
      break;
 800a6c4:	e06d      	b.n	800a7a2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 f897 	bl	800a800 <SetLineCoding>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a6d6:	7bbb      	ldrb	r3, [r7, #14]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d104      	bne.n	800a6e6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	2202      	movs	r2, #2
 800a6e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a6e4:	e058      	b.n	800a798 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a6e6:	7bbb      	ldrb	r3, [r7, #14]
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d055      	beq.n	800a798 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	2204      	movs	r2, #4
 800a6f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a6f4:	e050      	b.n	800a798 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	3340      	adds	r3, #64	; 0x40
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 f860 	bl	800a7c2 <GetLineCoding>
 800a702:	4603      	mov	r3, r0
 800a704:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a706:	7bbb      	ldrb	r3, [r7, #14]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d126      	bne.n	800a75a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	2200      	movs	r2, #0
 800a710:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a71e:	791b      	ldrb	r3, [r3, #4]
 800a720:	429a      	cmp	r2, r3
 800a722:	d13b      	bne.n	800a79c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a72e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a730:	429a      	cmp	r2, r3
 800a732:	d133      	bne.n	800a79c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a73e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a740:	429a      	cmp	r2, r3
 800a742:	d12b      	bne.n	800a79c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a74c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a74e:	429a      	cmp	r2, r3
 800a750:	d124      	bne.n	800a79c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 f958 	bl	800aa08 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a758:	e020      	b.n	800a79c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a75a:	7bbb      	ldrb	r3, [r7, #14]
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d01d      	beq.n	800a79c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	2204      	movs	r2, #4
 800a764:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a768:	e018      	b.n	800a79c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 f867 	bl	800a83e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 f8da 	bl	800a92a <CDC_ProcessReception>
      break;
 800a776:	e014      	b.n	800a7a2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a778:	2100      	movs	r1, #0
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f001 f822 	bl	800b7c4 <USBH_ClrFeature>
 800a780:	4603      	mov	r3, r0
 800a782:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a784:	7bbb      	ldrb	r3, [r7, #14]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10a      	bne.n	800a7a0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a792:	e005      	b.n	800a7a0 <USBH_CDC_Process+0x120>

    default:
      break;
 800a794:	bf00      	nop
 800a796:	e004      	b.n	800a7a2 <USBH_CDC_Process+0x122>
      break;
 800a798:	bf00      	nop
 800a79a:	e002      	b.n	800a7a2 <USBH_CDC_Process+0x122>
      break;
 800a79c:	bf00      	nop
 800a79e:	e000      	b.n	800a7a2 <USBH_CDC_Process+0x122>
      break;
 800a7a0:	bf00      	nop

  }

  return status;
 800a7a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3710      	adds	r7, #16
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	370c      	adds	r7, #12
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr

0800a7c2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b082      	sub	sp, #8
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
 800a7ca:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	22a1      	movs	r2, #161	; 0xa1
 800a7d0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2221      	movs	r2, #33	; 0x21
 800a7d6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2207      	movs	r2, #7
 800a7e8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	2207      	movs	r2, #7
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f001 fb23 	bl	800be3c <USBH_CtlReq>
 800a7f6:	4603      	mov	r3, r0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2221      	movs	r2, #33	; 0x21
 800a80e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2220      	movs	r2, #32
 800a814:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2207      	movs	r2, #7
 800a826:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	2207      	movs	r2, #7
 800a82c:	4619      	mov	r1, r3
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f001 fb04 	bl	800be3c <USBH_CtlReq>
 800a834:	4603      	mov	r3, r0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a83e:	b580      	push	{r7, lr}
 800a840:	b086      	sub	sp, #24
 800a842:	af02      	add	r7, sp, #8
 800a844:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a84c:	69db      	ldr	r3, [r3, #28]
 800a84e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a850:	2300      	movs	r3, #0
 800a852:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d002      	beq.n	800a864 <CDC_ProcessTransmission+0x26>
 800a85e:	2b02      	cmp	r3, #2
 800a860:	d023      	beq.n	800a8aa <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a862:	e05e      	b.n	800a922 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	8b12      	ldrh	r2, [r2, #24]
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d90b      	bls.n	800a888 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	69d9      	ldr	r1, [r3, #28]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	8b1a      	ldrh	r2, [r3, #24]
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	7b5b      	ldrb	r3, [r3, #13]
 800a87c:	2001      	movs	r0, #1
 800a87e:	9000      	str	r0, [sp, #0]
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f001 fcea 	bl	800c25a <USBH_BulkSendData>
 800a886:	e00b      	b.n	800a8a0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800a890:	b29a      	uxth	r2, r3
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	7b5b      	ldrb	r3, [r3, #13]
 800a896:	2001      	movs	r0, #1
 800a898:	9000      	str	r0, [sp, #0]
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f001 fcdd 	bl	800c25a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2202      	movs	r2, #2
 800a8a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a8a8:	e03b      	b.n	800a922 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	7b5b      	ldrb	r3, [r3, #13]
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f002 f801 	bl	800c8b8 <USBH_LL_GetURBState>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a8ba:	7afb      	ldrb	r3, [r7, #11]
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d128      	bne.n	800a912 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	8b12      	ldrh	r2, [r2, #24]
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d90e      	bls.n	800a8ea <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d0:	68fa      	ldr	r2, [r7, #12]
 800a8d2:	8b12      	ldrh	r2, [r2, #24]
 800a8d4:	1a9a      	subs	r2, r3, r2
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	69db      	ldr	r3, [r3, #28]
 800a8de:	68fa      	ldr	r2, [r7, #12]
 800a8e0:	8b12      	ldrh	r2, [r2, #24]
 800a8e2:	441a      	add	r2, r3
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	61da      	str	r2, [r3, #28]
 800a8e8:	e002      	b.n	800a8f0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d004      	beq.n	800a902 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a900:	e00e      	b.n	800a920 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2200      	movs	r2, #0
 800a906:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 f868 	bl	800a9e0 <USBH_CDC_TransmitCallback>
      break;
 800a910:	e006      	b.n	800a920 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a912:	7afb      	ldrb	r3, [r7, #11]
 800a914:	2b02      	cmp	r3, #2
 800a916:	d103      	bne.n	800a920 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2201      	movs	r2, #1
 800a91c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a920:	bf00      	nop
  }
}
 800a922:	bf00      	nop
 800a924:	3710      	adds	r7, #16
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}

0800a92a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b086      	sub	sp, #24
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a938:	69db      	ldr	r3, [r3, #28]
 800a93a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a93c:	2300      	movs	r3, #0
 800a93e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a946:	2b03      	cmp	r3, #3
 800a948:	d002      	beq.n	800a950 <CDC_ProcessReception+0x26>
 800a94a:	2b04      	cmp	r3, #4
 800a94c:	d00e      	beq.n	800a96c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a94e:	e043      	b.n	800a9d8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	6a19      	ldr	r1, [r3, #32]
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	8b5a      	ldrh	r2, [r3, #26]
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	7b1b      	ldrb	r3, [r3, #12]
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f001 fca1 	bl	800c2a4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	2204      	movs	r2, #4
 800a966:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a96a:	e035      	b.n	800a9d8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	7b1b      	ldrb	r3, [r3, #12]
 800a970:	4619      	mov	r1, r3
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f001 ffa0 	bl	800c8b8 <USBH_LL_GetURBState>
 800a978:	4603      	mov	r3, r0
 800a97a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a97c:	7cfb      	ldrb	r3, [r7, #19]
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d129      	bne.n	800a9d6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	7b1b      	ldrb	r3, [r3, #12]
 800a986:	4619      	mov	r1, r3
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f001 ff03 	bl	800c794 <USBH_LL_GetLastXferSize>
 800a98e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	429a      	cmp	r2, r3
 800a998:	d016      	beq.n	800a9c8 <CDC_ProcessReception+0x9e>
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	8b5b      	ldrh	r3, [r3, #26]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d910      	bls.n	800a9c8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	1ad2      	subs	r2, r2, r3
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	6a1a      	ldr	r2, [r3, #32]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	441a      	add	r2, r3
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	2203      	movs	r2, #3
 800a9c2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a9c6:	e006      	b.n	800a9d6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 f80f 	bl	800a9f4 <USBH_CDC_ReceiveCallback>
      break;
 800a9d6:	bf00      	nop
  }
}
 800a9d8:	bf00      	nop
 800a9da:	3718      	adds	r7, #24
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a9e8:	bf00      	nop
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a9fc:	bf00      	nop
 800a9fe:	370c      	adds	r7, #12
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800aa10:	bf00      	nop
 800aa12:	370c      	adds	r7, #12
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	4613      	mov	r3, r2
 800aa28:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d101      	bne.n	800aa34 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800aa30:	2302      	movs	r3, #2
 800aa32:	e029      	b.n	800aa88 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	79fa      	ldrb	r2, [r7, #7]
 800aa38:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	f000 f81f 	bl	800aa90 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2200      	movs	r2, #0
 800aa56:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2200      	movs	r2, #0
 800aa66:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d003      	beq.n	800aa80 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	68ba      	ldr	r2, [r7, #8]
 800aa7c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800aa80:	68f8      	ldr	r0, [r7, #12]
 800aa82:	f001 fdd3 	bl	800c62c <USBH_LL_Init>

  return USBH_OK;
 800aa86:	2300      	movs	r3, #0
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	60fb      	str	r3, [r7, #12]
 800aaa0:	e009      	b.n	800aab6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	33e0      	adds	r3, #224	; 0xe0
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	4413      	add	r3, r2
 800aaac:	2200      	movs	r2, #0
 800aaae:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	3301      	adds	r3, #1
 800aab4:	60fb      	str	r3, [r7, #12]
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2b0f      	cmp	r3, #15
 800aaba:	d9f2      	bls.n	800aaa2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aabc:	2300      	movs	r3, #0
 800aabe:	60fb      	str	r3, [r7, #12]
 800aac0:	e009      	b.n	800aad6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	4413      	add	r3, r2
 800aac8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800aacc:	2200      	movs	r2, #0
 800aace:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	3301      	adds	r3, #1
 800aad4:	60fb      	str	r3, [r7, #12]
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aadc:	d3f1      	bcc.n	800aac2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2201      	movs	r2, #1
 800aaee:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2201      	movs	r2, #1
 800aafc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2240      	movs	r2, #64	; 0x40
 800ab02:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2201      	movs	r2, #1
 800ab16:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	331c      	adds	r3, #28
 800ab2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab32:	2100      	movs	r1, #0
 800ab34:	4618      	mov	r0, r3
 800ab36:	f003 fde8 	bl	800e70a <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ab40:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab44:	2100      	movs	r1, #0
 800ab46:	4618      	mov	r0, r3
 800ab48:	f003 fddf 	bl	800e70a <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f203 3326 	addw	r3, r3, #806	; 0x326
 800ab52:	2212      	movs	r2, #18
 800ab54:	2100      	movs	r1, #0
 800ab56:	4618      	mov	r0, r3
 800ab58:	f003 fdd7 	bl	800e70a <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ab62:	223e      	movs	r2, #62	; 0x3e
 800ab64:	2100      	movs	r1, #0
 800ab66:	4618      	mov	r0, r3
 800ab68:	f003 fdcf 	bl	800e70a <memset>

  return USBH_OK;
 800ab6c:	2300      	movs	r3, #0
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3710      	adds	r7, #16
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}

0800ab76 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ab76:	b480      	push	{r7}
 800ab78:	b085      	sub	sp, #20
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
 800ab7e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ab80:	2300      	movs	r3, #0
 800ab82:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d016      	beq.n	800abb8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d10e      	bne.n	800abb2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ab9a:	1c59      	adds	r1, r3, #1
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	33de      	adds	r3, #222	; 0xde
 800aba6:	6839      	ldr	r1, [r7, #0]
 800aba8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800abac:	2300      	movs	r3, #0
 800abae:	73fb      	strb	r3, [r7, #15]
 800abb0:	e004      	b.n	800abbc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800abb2:	2302      	movs	r3, #2
 800abb4:	73fb      	strb	r3, [r7, #15]
 800abb6:	e001      	b.n	800abbc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800abb8:	2302      	movs	r3, #2
 800abba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800abbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3714      	adds	r7, #20
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr

0800abca <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800abca:	b480      	push	{r7}
 800abcc:	b085      	sub	sp, #20
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
 800abd2:	460b      	mov	r3, r1
 800abd4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800abd6:	2300      	movs	r3, #0
 800abd8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800abe0:	78fa      	ldrb	r2, [r7, #3]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d204      	bcs.n	800abf0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	78fa      	ldrb	r2, [r7, #3]
 800abea:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800abee:	e001      	b.n	800abf4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800abf0:	2302      	movs	r3, #2
 800abf2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800abf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3714      	adds	r7, #20
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr

0800ac02 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ac02:	b480      	push	{r7}
 800ac04:	b087      	sub	sp, #28
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
 800ac0a:	4608      	mov	r0, r1
 800ac0c:	4611      	mov	r1, r2
 800ac0e:	461a      	mov	r2, r3
 800ac10:	4603      	mov	r3, r0
 800ac12:	70fb      	strb	r3, [r7, #3]
 800ac14:	460b      	mov	r3, r1
 800ac16:	70bb      	strb	r3, [r7, #2]
 800ac18:	4613      	mov	r3, r2
 800ac1a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ac20:	2300      	movs	r3, #0
 800ac22:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ac2a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ac2c:	e025      	b.n	800ac7a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ac2e:	7dfb      	ldrb	r3, [r7, #23]
 800ac30:	221a      	movs	r2, #26
 800ac32:	fb02 f303 	mul.w	r3, r2, r3
 800ac36:	3308      	adds	r3, #8
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	4413      	add	r3, r2
 800ac3c:	3302      	adds	r3, #2
 800ac3e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	795b      	ldrb	r3, [r3, #5]
 800ac44:	78fa      	ldrb	r2, [r7, #3]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d002      	beq.n	800ac50 <USBH_FindInterface+0x4e>
 800ac4a:	78fb      	ldrb	r3, [r7, #3]
 800ac4c:	2bff      	cmp	r3, #255	; 0xff
 800ac4e:	d111      	bne.n	800ac74 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ac54:	78ba      	ldrb	r2, [r7, #2]
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d002      	beq.n	800ac60 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ac5a:	78bb      	ldrb	r3, [r7, #2]
 800ac5c:	2bff      	cmp	r3, #255	; 0xff
 800ac5e:	d109      	bne.n	800ac74 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ac64:	787a      	ldrb	r2, [r7, #1]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d002      	beq.n	800ac70 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ac6a:	787b      	ldrb	r3, [r7, #1]
 800ac6c:	2bff      	cmp	r3, #255	; 0xff
 800ac6e:	d101      	bne.n	800ac74 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ac70:	7dfb      	ldrb	r3, [r7, #23]
 800ac72:	e006      	b.n	800ac82 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ac74:	7dfb      	ldrb	r3, [r7, #23]
 800ac76:	3301      	adds	r3, #1
 800ac78:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ac7a:	7dfb      	ldrb	r3, [r7, #23]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d9d6      	bls.n	800ac2e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ac80:	23ff      	movs	r3, #255	; 0xff
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	371c      	adds	r7, #28
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr

0800ac8e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b082      	sub	sp, #8
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f001 fd04 	bl	800c6a4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800ac9c:	2101      	movs	r1, #1
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f001 fe1d 	bl	800c8de <USBH_LL_DriverVBUS>

  return USBH_OK;
 800aca4:	2300      	movs	r3, #0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3708      	adds	r7, #8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
	...

0800acb0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b088      	sub	sp, #32
 800acb4:	af04      	add	r7, sp, #16
 800acb6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800acb8:	2302      	movs	r3, #2
 800acba:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800acbc:	2300      	movs	r3, #0
 800acbe:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d102      	bne.n	800acd2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2203      	movs	r2, #3
 800acd0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	2b0b      	cmp	r3, #11
 800acda:	f200 81be 	bhi.w	800b05a <USBH_Process+0x3aa>
 800acde:	a201      	add	r2, pc, #4	; (adr r2, 800ace4 <USBH_Process+0x34>)
 800ace0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace4:	0800ad15 	.word	0x0800ad15
 800ace8:	0800ad47 	.word	0x0800ad47
 800acec:	0800adaf 	.word	0x0800adaf
 800acf0:	0800aff5 	.word	0x0800aff5
 800acf4:	0800b05b 	.word	0x0800b05b
 800acf8:	0800ae53 	.word	0x0800ae53
 800acfc:	0800af9b 	.word	0x0800af9b
 800ad00:	0800ae89 	.word	0x0800ae89
 800ad04:	0800aea9 	.word	0x0800aea9
 800ad08:	0800aec9 	.word	0x0800aec9
 800ad0c:	0800af0d 	.word	0x0800af0d
 800ad10:	0800afdd 	.word	0x0800afdd
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f000 819e 	beq.w	800b05e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2201      	movs	r2, #1
 800ad26:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ad28:	20c8      	movs	r0, #200	; 0xc8
 800ad2a:	f001 fe22 	bl	800c972 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f001 fd15 	bl	800c75e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ad44:	e18b      	b.n	800b05e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d107      	bne.n	800ad60 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2202      	movs	r2, #2
 800ad5c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ad5e:	e18d      	b.n	800b07c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ad66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad6a:	d914      	bls.n	800ad96 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ad72:	3301      	adds	r3, #1
 800ad74:	b2da      	uxtb	r2, r3
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ad82:	2b03      	cmp	r3, #3
 800ad84:	d903      	bls.n	800ad8e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	220d      	movs	r2, #13
 800ad8a:	701a      	strb	r2, [r3, #0]
      break;
 800ad8c:	e176      	b.n	800b07c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2200      	movs	r2, #0
 800ad92:	701a      	strb	r2, [r3, #0]
      break;
 800ad94:	e172      	b.n	800b07c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ad9c:	f103 020a 	add.w	r2, r3, #10
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ada6:	200a      	movs	r0, #10
 800ada8:	f001 fde3 	bl	800c972 <USBH_Delay>
      break;
 800adac:	e166      	b.n	800b07c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d005      	beq.n	800adc4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800adbe:	2104      	movs	r1, #4
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800adc4:	2064      	movs	r0, #100	; 0x64
 800adc6:	f001 fdd4 	bl	800c972 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f001 fca0 	bl	800c710 <USBH_LL_GetSpeed>
 800add0:	4603      	mov	r3, r0
 800add2:	461a      	mov	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2205      	movs	r2, #5
 800adde:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ade0:	2100      	movs	r1, #0
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f001 faab 	bl	800c33e <USBH_AllocPipe>
 800ade8:	4603      	mov	r3, r0
 800adea:	461a      	mov	r2, r3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800adf0:	2180      	movs	r1, #128	; 0x80
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f001 faa3 	bl	800c33e <USBH_AllocPipe>
 800adf8:	4603      	mov	r3, r0
 800adfa:	461a      	mov	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	7919      	ldrb	r1, [r3, #4]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ae14:	b292      	uxth	r2, r2
 800ae16:	9202      	str	r2, [sp, #8]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	9201      	str	r2, [sp, #4]
 800ae1c:	9300      	str	r3, [sp, #0]
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2280      	movs	r2, #128	; 0x80
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f001 fa5c 	bl	800c2e0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	7959      	ldrb	r1, [r3, #5]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ae3c:	b292      	uxth	r2, r2
 800ae3e:	9202      	str	r2, [sp, #8]
 800ae40:	2200      	movs	r2, #0
 800ae42:	9201      	str	r2, [sp, #4]
 800ae44:	9300      	str	r3, [sp, #0]
 800ae46:	4603      	mov	r3, r0
 800ae48:	2200      	movs	r2, #0
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f001 fa48 	bl	800c2e0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ae50:	e114      	b.n	800b07c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 f918 	bl	800b088 <USBH_HandleEnum>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ae5c:	7bbb      	ldrb	r3, [r7, #14]
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f040 80fe 	bne.w	800b062 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d103      	bne.n	800ae80 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2208      	movs	r2, #8
 800ae7c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ae7e:	e0f0      	b.n	800b062 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2207      	movs	r2, #7
 800ae84:	701a      	strb	r2, [r3, #0]
      break;
 800ae86:	e0ec      	b.n	800b062 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	f000 80e9 	beq.w	800b066 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae9a:	2101      	movs	r1, #1
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2208      	movs	r2, #8
 800aea4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800aea6:	e0de      	b.n	800b066 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 fc3f 	bl	800b736 <USBH_SetCfg>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	f040 80d5 	bne.w	800b06a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2209      	movs	r2, #9
 800aec4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aec6:	e0d0      	b.n	800b06a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800aece:	f003 0320 	and.w	r3, r3, #32
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d016      	beq.n	800af04 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800aed6:	2101      	movs	r1, #1
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 fc4f 	bl	800b77c <USBH_SetFeature>
 800aede:	4603      	mov	r3, r0
 800aee0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800aee2:	7bbb      	ldrb	r3, [r7, #14]
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d103      	bne.n	800aef2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	220a      	movs	r2, #10
 800aeee:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aef0:	e0bd      	b.n	800b06e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800aef2:	7bbb      	ldrb	r3, [r7, #14]
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	2b03      	cmp	r3, #3
 800aef8:	f040 80b9 	bne.w	800b06e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	220a      	movs	r2, #10
 800af00:	701a      	strb	r2, [r3, #0]
      break;
 800af02:	e0b4      	b.n	800b06e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	220a      	movs	r2, #10
 800af08:	701a      	strb	r2, [r3, #0]
      break;
 800af0a:	e0b0      	b.n	800b06e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800af12:	2b00      	cmp	r3, #0
 800af14:	f000 80ad 	beq.w	800b072 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800af20:	2300      	movs	r3, #0
 800af22:	73fb      	strb	r3, [r7, #15]
 800af24:	e016      	b.n	800af54 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800af26:	7bfa      	ldrb	r2, [r7, #15]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	32de      	adds	r2, #222	; 0xde
 800af2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af30:	791a      	ldrb	r2, [r3, #4]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800af38:	429a      	cmp	r2, r3
 800af3a:	d108      	bne.n	800af4e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800af3c:	7bfa      	ldrb	r2, [r7, #15]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	32de      	adds	r2, #222	; 0xde
 800af42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800af4c:	e005      	b.n	800af5a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800af4e:	7bfb      	ldrb	r3, [r7, #15]
 800af50:	3301      	adds	r3, #1
 800af52:	73fb      	strb	r3, [r7, #15]
 800af54:	7bfb      	ldrb	r3, [r7, #15]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d0e5      	beq.n	800af26 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af60:	2b00      	cmp	r3, #0
 800af62:	d016      	beq.n	800af92 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	4798      	blx	r3
 800af70:	4603      	mov	r3, r0
 800af72:	2b00      	cmp	r3, #0
 800af74:	d109      	bne.n	800af8a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2206      	movs	r2, #6
 800af7a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af82:	2103      	movs	r1, #3
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800af88:	e073      	b.n	800b072 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	220d      	movs	r2, #13
 800af8e:	701a      	strb	r2, [r3, #0]
      break;
 800af90:	e06f      	b.n	800b072 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	220d      	movs	r2, #13
 800af96:	701a      	strb	r2, [r3, #0]
      break;
 800af98:	e06b      	b.n	800b072 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d017      	beq.n	800afd4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afaa:	691b      	ldr	r3, [r3, #16]
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	4798      	blx	r3
 800afb0:	4603      	mov	r3, r0
 800afb2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800afb4:	7bbb      	ldrb	r3, [r7, #14]
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d103      	bne.n	800afc4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	220b      	movs	r2, #11
 800afc0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800afc2:	e058      	b.n	800b076 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800afc4:	7bbb      	ldrb	r3, [r7, #14]
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	2b02      	cmp	r3, #2
 800afca:	d154      	bne.n	800b076 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	220d      	movs	r2, #13
 800afd0:	701a      	strb	r2, [r3, #0]
      break;
 800afd2:	e050      	b.n	800b076 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	220d      	movs	r2, #13
 800afd8:	701a      	strb	r2, [r3, #0]
      break;
 800afda:	e04c      	b.n	800b076 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d049      	beq.n	800b07a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afec:	695b      	ldr	r3, [r3, #20]
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	4798      	blx	r3
      }
      break;
 800aff2:	e042      	b.n	800b07a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f7ff fd47 	bl	800aa90 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d009      	beq.n	800b020 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b026:	2b00      	cmp	r3, #0
 800b028:	d005      	beq.n	800b036 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b030:	2105      	movs	r1, #5
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d107      	bne.n	800b052 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f7ff fe1f 	bl	800ac8e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b050:	e014      	b.n	800b07c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f001 fb26 	bl	800c6a4 <USBH_LL_Start>
      break;
 800b058:	e010      	b.n	800b07c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800b05a:	bf00      	nop
 800b05c:	e00e      	b.n	800b07c <USBH_Process+0x3cc>
      break;
 800b05e:	bf00      	nop
 800b060:	e00c      	b.n	800b07c <USBH_Process+0x3cc>
      break;
 800b062:	bf00      	nop
 800b064:	e00a      	b.n	800b07c <USBH_Process+0x3cc>
    break;
 800b066:	bf00      	nop
 800b068:	e008      	b.n	800b07c <USBH_Process+0x3cc>
      break;
 800b06a:	bf00      	nop
 800b06c:	e006      	b.n	800b07c <USBH_Process+0x3cc>
      break;
 800b06e:	bf00      	nop
 800b070:	e004      	b.n	800b07c <USBH_Process+0x3cc>
      break;
 800b072:	bf00      	nop
 800b074:	e002      	b.n	800b07c <USBH_Process+0x3cc>
      break;
 800b076:	bf00      	nop
 800b078:	e000      	b.n	800b07c <USBH_Process+0x3cc>
      break;
 800b07a:	bf00      	nop
  }
  return USBH_OK;
 800b07c:	2300      	movs	r3, #0
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3710      	adds	r7, #16
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop

0800b088 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b088      	sub	sp, #32
 800b08c:	af04      	add	r7, sp, #16
 800b08e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b090:	2301      	movs	r3, #1
 800b092:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b094:	2301      	movs	r3, #1
 800b096:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	785b      	ldrb	r3, [r3, #1]
 800b09c:	2b07      	cmp	r3, #7
 800b09e:	f200 81c1 	bhi.w	800b424 <USBH_HandleEnum+0x39c>
 800b0a2:	a201      	add	r2, pc, #4	; (adr r2, 800b0a8 <USBH_HandleEnum+0x20>)
 800b0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a8:	0800b0c9 	.word	0x0800b0c9
 800b0ac:	0800b187 	.word	0x0800b187
 800b0b0:	0800b1f1 	.word	0x0800b1f1
 800b0b4:	0800b27f 	.word	0x0800b27f
 800b0b8:	0800b2e9 	.word	0x0800b2e9
 800b0bc:	0800b359 	.word	0x0800b359
 800b0c0:	0800b39f 	.word	0x0800b39f
 800b0c4:	0800b3e5 	.word	0x0800b3e5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b0c8:	2108      	movs	r1, #8
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 fa50 	bl	800b570 <USBH_Get_DevDesc>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b0d4:	7bbb      	ldrb	r3, [r7, #14]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d130      	bne.n	800b13c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	7919      	ldrb	r1, [r3, #4]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b0fe:	b292      	uxth	r2, r2
 800b100:	9202      	str	r2, [sp, #8]
 800b102:	2200      	movs	r2, #0
 800b104:	9201      	str	r2, [sp, #4]
 800b106:	9300      	str	r3, [sp, #0]
 800b108:	4603      	mov	r3, r0
 800b10a:	2280      	movs	r2, #128	; 0x80
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f001 f8e7 	bl	800c2e0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	7959      	ldrb	r1, [r3, #5]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b126:	b292      	uxth	r2, r2
 800b128:	9202      	str	r2, [sp, #8]
 800b12a:	2200      	movs	r2, #0
 800b12c:	9201      	str	r2, [sp, #4]
 800b12e:	9300      	str	r3, [sp, #0]
 800b130:	4603      	mov	r3, r0
 800b132:	2200      	movs	r2, #0
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f001 f8d3 	bl	800c2e0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b13a:	e175      	b.n	800b428 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b13c:	7bbb      	ldrb	r3, [r7, #14]
 800b13e:	2b03      	cmp	r3, #3
 800b140:	f040 8172 	bne.w	800b428 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b14a:	3301      	adds	r3, #1
 800b14c:	b2da      	uxtb	r2, r3
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b15a:	2b03      	cmp	r3, #3
 800b15c:	d903      	bls.n	800b166 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	220d      	movs	r2, #13
 800b162:	701a      	strb	r2, [r3, #0]
      break;
 800b164:	e160      	b.n	800b428 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	795b      	ldrb	r3, [r3, #5]
 800b16a:	4619      	mov	r1, r3
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f001 f907 	bl	800c380 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	791b      	ldrb	r3, [r3, #4]
 800b176:	4619      	mov	r1, r3
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f001 f901 	bl	800c380 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2200      	movs	r2, #0
 800b182:	701a      	strb	r2, [r3, #0]
      break;
 800b184:	e150      	b.n	800b428 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b186:	2112      	movs	r1, #18
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 f9f1 	bl	800b570 <USBH_Get_DevDesc>
 800b18e:	4603      	mov	r3, r0
 800b190:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b192:	7bbb      	ldrb	r3, [r7, #14]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d103      	bne.n	800b1a0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2202      	movs	r2, #2
 800b19c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b19e:	e145      	b.n	800b42c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b1a0:	7bbb      	ldrb	r3, [r7, #14]
 800b1a2:	2b03      	cmp	r3, #3
 800b1a4:	f040 8142 	bne.w	800b42c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	b2da      	uxtb	r2, r3
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b1be:	2b03      	cmp	r3, #3
 800b1c0:	d903      	bls.n	800b1ca <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	220d      	movs	r2, #13
 800b1c6:	701a      	strb	r2, [r3, #0]
      break;
 800b1c8:	e130      	b.n	800b42c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	795b      	ldrb	r3, [r3, #5]
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f001 f8d5 	bl	800c380 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	791b      	ldrb	r3, [r3, #4]
 800b1da:	4619      	mov	r1, r3
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f001 f8cf 	bl	800c380 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	701a      	strb	r2, [r3, #0]
      break;
 800b1ee:	e11d      	b.n	800b42c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b1f0:	2101      	movs	r1, #1
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 fa7b 	bl	800b6ee <USBH_SetAddress>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b1fc:	7bbb      	ldrb	r3, [r7, #14]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d132      	bne.n	800b268 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b202:	2002      	movs	r0, #2
 800b204:	f001 fbb5 	bl	800c972 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2201      	movs	r2, #1
 800b20c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2203      	movs	r2, #3
 800b214:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	7919      	ldrb	r1, [r3, #4]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b226:	687a      	ldr	r2, [r7, #4]
 800b228:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b22a:	b292      	uxth	r2, r2
 800b22c:	9202      	str	r2, [sp, #8]
 800b22e:	2200      	movs	r2, #0
 800b230:	9201      	str	r2, [sp, #4]
 800b232:	9300      	str	r3, [sp, #0]
 800b234:	4603      	mov	r3, r0
 800b236:	2280      	movs	r2, #128	; 0x80
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f001 f851 	bl	800c2e0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	7959      	ldrb	r1, [r3, #5]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b252:	b292      	uxth	r2, r2
 800b254:	9202      	str	r2, [sp, #8]
 800b256:	2200      	movs	r2, #0
 800b258:	9201      	str	r2, [sp, #4]
 800b25a:	9300      	str	r3, [sp, #0]
 800b25c:	4603      	mov	r3, r0
 800b25e:	2200      	movs	r2, #0
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f001 f83d 	bl	800c2e0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b266:	e0e3      	b.n	800b430 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b268:	7bbb      	ldrb	r3, [r7, #14]
 800b26a:	2b03      	cmp	r3, #3
 800b26c:	f040 80e0 	bne.w	800b430 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	220d      	movs	r2, #13
 800b274:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	705a      	strb	r2, [r3, #1]
      break;
 800b27c:	e0d8      	b.n	800b430 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b27e:	2109      	movs	r1, #9
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 f9a1 	bl	800b5c8 <USBH_Get_CfgDesc>
 800b286:	4603      	mov	r3, r0
 800b288:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b28a:	7bbb      	ldrb	r3, [r7, #14]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d103      	bne.n	800b298 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2204      	movs	r2, #4
 800b294:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b296:	e0cd      	b.n	800b434 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b298:	7bbb      	ldrb	r3, [r7, #14]
 800b29a:	2b03      	cmp	r3, #3
 800b29c:	f040 80ca 	bne.w	800b434 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	b2da      	uxtb	r2, r3
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b2b6:	2b03      	cmp	r3, #3
 800b2b8:	d903      	bls.n	800b2c2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	220d      	movs	r2, #13
 800b2be:	701a      	strb	r2, [r3, #0]
      break;
 800b2c0:	e0b8      	b.n	800b434 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	795b      	ldrb	r3, [r3, #5]
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f001 f859 	bl	800c380 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	791b      	ldrb	r3, [r3, #4]
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f001 f853 	bl	800c380 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	701a      	strb	r2, [r3, #0]
      break;
 800b2e6:	e0a5      	b.n	800b434 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f000 f969 	bl	800b5c8 <USBH_Get_CfgDesc>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b2fa:	7bbb      	ldrb	r3, [r7, #14]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d103      	bne.n	800b308 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2205      	movs	r2, #5
 800b304:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b306:	e097      	b.n	800b438 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b308:	7bbb      	ldrb	r3, [r7, #14]
 800b30a:	2b03      	cmp	r3, #3
 800b30c:	f040 8094 	bne.w	800b438 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b316:	3301      	adds	r3, #1
 800b318:	b2da      	uxtb	r2, r3
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b326:	2b03      	cmp	r3, #3
 800b328:	d903      	bls.n	800b332 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	220d      	movs	r2, #13
 800b32e:	701a      	strb	r2, [r3, #0]
      break;
 800b330:	e082      	b.n	800b438 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	795b      	ldrb	r3, [r3, #5]
 800b336:	4619      	mov	r1, r3
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f001 f821 	bl	800c380 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	791b      	ldrb	r3, [r3, #4]
 800b342:	4619      	mov	r1, r3
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f001 f81b 	bl	800c380 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2200      	movs	r2, #0
 800b34e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	701a      	strb	r2, [r3, #0]
      break;
 800b356:	e06f      	b.n	800b438 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d019      	beq.n	800b396 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b36e:	23ff      	movs	r3, #255	; 0xff
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f000 f953 	bl	800b61c <USBH_Get_StringDesc>
 800b376:	4603      	mov	r3, r0
 800b378:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b37a:	7bbb      	ldrb	r3, [r7, #14]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d103      	bne.n	800b388 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2206      	movs	r2, #6
 800b384:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b386:	e059      	b.n	800b43c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b388:	7bbb      	ldrb	r3, [r7, #14]
 800b38a:	2b03      	cmp	r3, #3
 800b38c:	d156      	bne.n	800b43c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2206      	movs	r2, #6
 800b392:	705a      	strb	r2, [r3, #1]
      break;
 800b394:	e052      	b.n	800b43c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2206      	movs	r2, #6
 800b39a:	705a      	strb	r2, [r3, #1]
      break;
 800b39c:	e04e      	b.n	800b43c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d019      	beq.n	800b3dc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b3b4:	23ff      	movs	r3, #255	; 0xff
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 f930 	bl	800b61c <USBH_Get_StringDesc>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b3c0:	7bbb      	ldrb	r3, [r7, #14]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d103      	bne.n	800b3ce <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2207      	movs	r2, #7
 800b3ca:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b3cc:	e038      	b.n	800b440 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b3ce:	7bbb      	ldrb	r3, [r7, #14]
 800b3d0:	2b03      	cmp	r3, #3
 800b3d2:	d135      	bne.n	800b440 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2207      	movs	r2, #7
 800b3d8:	705a      	strb	r2, [r3, #1]
      break;
 800b3da:	e031      	b.n	800b440 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2207      	movs	r2, #7
 800b3e0:	705a      	strb	r2, [r3, #1]
      break;
 800b3e2:	e02d      	b.n	800b440 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d017      	beq.n	800b41e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b3fa:	23ff      	movs	r3, #255	; 0xff
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 f90d 	bl	800b61c <USBH_Get_StringDesc>
 800b402:	4603      	mov	r3, r0
 800b404:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b406:	7bbb      	ldrb	r3, [r7, #14]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d102      	bne.n	800b412 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b40c:	2300      	movs	r3, #0
 800b40e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b410:	e018      	b.n	800b444 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b412:	7bbb      	ldrb	r3, [r7, #14]
 800b414:	2b03      	cmp	r3, #3
 800b416:	d115      	bne.n	800b444 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b418:	2300      	movs	r3, #0
 800b41a:	73fb      	strb	r3, [r7, #15]
      break;
 800b41c:	e012      	b.n	800b444 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b41e:	2300      	movs	r3, #0
 800b420:	73fb      	strb	r3, [r7, #15]
      break;
 800b422:	e00f      	b.n	800b444 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b424:	bf00      	nop
 800b426:	e00e      	b.n	800b446 <USBH_HandleEnum+0x3be>
      break;
 800b428:	bf00      	nop
 800b42a:	e00c      	b.n	800b446 <USBH_HandleEnum+0x3be>
      break;
 800b42c:	bf00      	nop
 800b42e:	e00a      	b.n	800b446 <USBH_HandleEnum+0x3be>
      break;
 800b430:	bf00      	nop
 800b432:	e008      	b.n	800b446 <USBH_HandleEnum+0x3be>
      break;
 800b434:	bf00      	nop
 800b436:	e006      	b.n	800b446 <USBH_HandleEnum+0x3be>
      break;
 800b438:	bf00      	nop
 800b43a:	e004      	b.n	800b446 <USBH_HandleEnum+0x3be>
      break;
 800b43c:	bf00      	nop
 800b43e:	e002      	b.n	800b446 <USBH_HandleEnum+0x3be>
      break;
 800b440:	bf00      	nop
 800b442:	e000      	b.n	800b446 <USBH_HandleEnum+0x3be>
      break;
 800b444:	bf00      	nop
  }
  return Status;
 800b446:	7bfb      	ldrb	r3, [r7, #15]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3710      	adds	r7, #16
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	683a      	ldr	r2, [r7, #0]
 800b45e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b462:	bf00      	nop
 800b464:	370c      	adds	r7, #12
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr

0800b46e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b46e:	b580      	push	{r7, lr}
 800b470:	b082      	sub	sp, #8
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b47c:	1c5a      	adds	r2, r3, #1
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f000 f804 	bl	800b492 <USBH_HandleSof>
}
 800b48a:	bf00      	nop
 800b48c:	3708      	adds	r7, #8
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}

0800b492 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b492:	b580      	push	{r7, lr}
 800b494:	b082      	sub	sp, #8
 800b496:	af00      	add	r7, sp, #0
 800b498:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	b2db      	uxtb	r3, r3
 800b4a0:	2b0b      	cmp	r3, #11
 800b4a2:	d10a      	bne.n	800b4ba <USBH_HandleSof+0x28>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d005      	beq.n	800b4ba <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4b4:	699b      	ldr	r3, [r3, #24]
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	4798      	blx	r3
  }
}
 800b4ba:	bf00      	nop
 800b4bc:	3708      	adds	r7, #8
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}

0800b4c2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b4c2:	b480      	push	{r7}
 800b4c4:	b083      	sub	sp, #12
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b4d2:	bf00      	nop
}
 800b4d4:	370c      	adds	r7, #12
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr

0800b4de <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b4de:	b480      	push	{r7}
 800b4e0:	b083      	sub	sp, #12
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b4ee:	bf00      	nop
}
 800b4f0:	370c      	adds	r7, #12
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr

0800b4fa <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b4fa:	b480      	push	{r7}
 800b4fc:	b083      	sub	sp, #12
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2201      	movs	r2, #1
 800b506:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2200      	movs	r2, #0
 800b50e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b51a:	2300      	movs	r3, #0
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	370c      	adds	r7, #12
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr

0800b528 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2201      	movs	r2, #1
 800b534:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f001 f8c6 	bl	800c6da <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	791b      	ldrb	r3, [r3, #4]
 800b552:	4619      	mov	r1, r3
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 ff13 	bl	800c380 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	795b      	ldrb	r3, [r3, #5]
 800b55e:	4619      	mov	r1, r3
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 ff0d 	bl	800c380 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b566:	2300      	movs	r3, #0
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3708      	adds	r7, #8
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b086      	sub	sp, #24
 800b574:	af02      	add	r7, sp, #8
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	460b      	mov	r3, r1
 800b57a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800b57c:	887b      	ldrh	r3, [r7, #2]
 800b57e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b582:	d901      	bls.n	800b588 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b584:	2303      	movs	r3, #3
 800b586:	e01b      	b.n	800b5c0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b58e:	887b      	ldrh	r3, [r7, #2]
 800b590:	9300      	str	r3, [sp, #0]
 800b592:	4613      	mov	r3, r2
 800b594:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b598:	2100      	movs	r1, #0
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 f872 	bl	800b684 <USBH_GetDescriptor>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800b5a4:	7bfb      	ldrb	r3, [r7, #15]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d109      	bne.n	800b5be <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b5b0:	887a      	ldrh	r2, [r7, #2]
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 f929 	bl	800b80c <USBH_ParseDevDesc>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b5be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b086      	sub	sp, #24
 800b5cc:	af02      	add	r7, sp, #8
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	331c      	adds	r3, #28
 800b5d8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800b5da:	887b      	ldrh	r3, [r7, #2]
 800b5dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5e0:	d901      	bls.n	800b5e6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b5e2:	2303      	movs	r3, #3
 800b5e4:	e016      	b.n	800b614 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b5e6:	887b      	ldrh	r3, [r7, #2]
 800b5e8:	9300      	str	r3, [sp, #0]
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 f846 	bl	800b684 <USBH_GetDescriptor>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b5fc:	7bfb      	ldrb	r3, [r7, #15]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d107      	bne.n	800b612 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b602:	887b      	ldrh	r3, [r7, #2]
 800b604:	461a      	mov	r2, r3
 800b606:	68b9      	ldr	r1, [r7, #8]
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f000 f9b3 	bl	800b974 <USBH_ParseCfgDesc>
 800b60e:	4603      	mov	r3, r0
 800b610:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b612:	7bfb      	ldrb	r3, [r7, #15]
}
 800b614:	4618      	mov	r0, r3
 800b616:	3710      	adds	r7, #16
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b088      	sub	sp, #32
 800b620:	af02      	add	r7, sp, #8
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	607a      	str	r2, [r7, #4]
 800b626:	461a      	mov	r2, r3
 800b628:	460b      	mov	r3, r1
 800b62a:	72fb      	strb	r3, [r7, #11]
 800b62c:	4613      	mov	r3, r2
 800b62e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800b630:	893b      	ldrh	r3, [r7, #8]
 800b632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b636:	d802      	bhi.n	800b63e <USBH_Get_StringDesc+0x22>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d101      	bne.n	800b642 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b63e:	2303      	movs	r3, #3
 800b640:	e01c      	b.n	800b67c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800b642:	7afb      	ldrb	r3, [r7, #11]
 800b644:	b29b      	uxth	r3, r3
 800b646:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b64a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b652:	893b      	ldrh	r3, [r7, #8]
 800b654:	9300      	str	r3, [sp, #0]
 800b656:	460b      	mov	r3, r1
 800b658:	2100      	movs	r1, #0
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f000 f812 	bl	800b684 <USBH_GetDescriptor>
 800b660:	4603      	mov	r3, r0
 800b662:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b664:	7dfb      	ldrb	r3, [r7, #23]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d107      	bne.n	800b67a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b670:	893a      	ldrh	r2, [r7, #8]
 800b672:	6879      	ldr	r1, [r7, #4]
 800b674:	4618      	mov	r0, r3
 800b676:	f000 fb93 	bl	800bda0 <USBH_ParseStringDesc>
  }

  return status;
 800b67a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3718      	adds	r7, #24
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	607b      	str	r3, [r7, #4]
 800b68e:	460b      	mov	r3, r1
 800b690:	72fb      	strb	r3, [r7, #11]
 800b692:	4613      	mov	r3, r2
 800b694:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	789b      	ldrb	r3, [r3, #2]
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d11c      	bne.n	800b6d8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b69e:	7afb      	ldrb	r3, [r7, #11]
 800b6a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b6a4:	b2da      	uxtb	r2, r3
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2206      	movs	r2, #6
 800b6ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	893a      	ldrh	r2, [r7, #8]
 800b6b4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b6b6:	893b      	ldrh	r3, [r7, #8]
 800b6b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b6bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6c0:	d104      	bne.n	800b6cc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f240 4209 	movw	r2, #1033	; 0x409
 800b6c8:	829a      	strh	r2, [r3, #20]
 800b6ca:	e002      	b.n	800b6d2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	8b3a      	ldrh	r2, [r7, #24]
 800b6d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b6d8:	8b3b      	ldrh	r3, [r7, #24]
 800b6da:	461a      	mov	r2, r3
 800b6dc:	6879      	ldr	r1, [r7, #4]
 800b6de:	68f8      	ldr	r0, [r7, #12]
 800b6e0:	f000 fbac 	bl	800be3c <USBH_CtlReq>
 800b6e4:	4603      	mov	r3, r0
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3710      	adds	r7, #16
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}

0800b6ee <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b082      	sub	sp, #8
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	789b      	ldrb	r3, [r3, #2]
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d10f      	bne.n	800b722 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2200      	movs	r2, #0
 800b706:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2205      	movs	r2, #5
 800b70c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b70e:	78fb      	ldrb	r3, [r7, #3]
 800b710:	b29a      	uxth	r2, r3
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2200      	movs	r2, #0
 800b720:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b722:	2200      	movs	r2, #0
 800b724:	2100      	movs	r1, #0
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f000 fb88 	bl	800be3c <USBH_CtlReq>
 800b72c:	4603      	mov	r3, r0
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3708      	adds	r7, #8
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b082      	sub	sp, #8
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
 800b73e:	460b      	mov	r3, r1
 800b740:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	789b      	ldrb	r3, [r3, #2]
 800b746:	2b01      	cmp	r3, #1
 800b748:	d10e      	bne.n	800b768 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2200      	movs	r2, #0
 800b74e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2209      	movs	r2, #9
 800b754:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	887a      	ldrh	r2, [r7, #2]
 800b75a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2200      	movs	r2, #0
 800b766:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b768:	2200      	movs	r2, #0
 800b76a:	2100      	movs	r1, #0
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 fb65 	bl	800be3c <USBH_CtlReq>
 800b772:	4603      	mov	r3, r0
}
 800b774:	4618      	mov	r0, r3
 800b776:	3708      	adds	r7, #8
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b082      	sub	sp, #8
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	460b      	mov	r3, r1
 800b786:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	789b      	ldrb	r3, [r3, #2]
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d10f      	bne.n	800b7b0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2200      	movs	r2, #0
 800b794:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2203      	movs	r2, #3
 800b79a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b79c:	78fb      	ldrb	r3, [r7, #3]
 800b79e:	b29a      	uxth	r2, r3
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	2100      	movs	r1, #0
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 fb41 	bl	800be3c <USBH_CtlReq>
 800b7ba:	4603      	mov	r3, r0
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3708      	adds	r7, #8
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	789b      	ldrb	r3, [r3, #2]
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	d10f      	bne.n	800b7f8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2202      	movs	r2, #2
 800b7dc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b7ea:	78fb      	ldrb	r3, [r7, #3]
 800b7ec:	b29a      	uxth	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	2100      	movs	r1, #0
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 fb1d 	bl	800be3c <USBH_CtlReq>
 800b802:	4603      	mov	r3, r0
}
 800b804:	4618      	mov	r0, r3
 800b806:	3708      	adds	r7, #8
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b087      	sub	sp, #28
 800b810:	af00      	add	r7, sp, #0
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	60b9      	str	r1, [r7, #8]
 800b816:	4613      	mov	r3, r2
 800b818:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f203 3326 	addw	r3, r3, #806	; 0x326
 800b820:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800b822:	2300      	movs	r3, #0
 800b824:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d101      	bne.n	800b830 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800b82c:	2302      	movs	r3, #2
 800b82e:	e098      	b.n	800b962 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	781a      	ldrb	r2, [r3, #0]
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	785a      	ldrb	r2, [r3, #1]
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	3302      	adds	r3, #2
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	b29a      	uxth	r2, r3
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	3303      	adds	r3, #3
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	b29b      	uxth	r3, r3
 800b850:	021b      	lsls	r3, r3, #8
 800b852:	b29b      	uxth	r3, r3
 800b854:	4313      	orrs	r3, r2
 800b856:	b29a      	uxth	r2, r3
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	791a      	ldrb	r2, [r3, #4]
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	795a      	ldrb	r2, [r3, #5]
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	799a      	ldrb	r2, [r3, #6]
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	79da      	ldrb	r2, [r3, #7]
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b882:	2b00      	cmp	r3, #0
 800b884:	d004      	beq.n	800b890 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d11b      	bne.n	800b8c8 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	79db      	ldrb	r3, [r3, #7]
 800b894:	2b20      	cmp	r3, #32
 800b896:	dc0f      	bgt.n	800b8b8 <USBH_ParseDevDesc+0xac>
 800b898:	2b08      	cmp	r3, #8
 800b89a:	db0f      	blt.n	800b8bc <USBH_ParseDevDesc+0xb0>
 800b89c:	3b08      	subs	r3, #8
 800b89e:	4a34      	ldr	r2, [pc, #208]	; (800b970 <USBH_ParseDevDesc+0x164>)
 800b8a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b8a4:	f003 0301 	and.w	r3, r3, #1
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	bf14      	ite	ne
 800b8ac:	2301      	movne	r3, #1
 800b8ae:	2300      	moveq	r3, #0
 800b8b0:	b2db      	uxtb	r3, r3
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d106      	bne.n	800b8c4 <USBH_ParseDevDesc+0xb8>
 800b8b6:	e001      	b.n	800b8bc <USBH_ParseDevDesc+0xb0>
 800b8b8:	2b40      	cmp	r3, #64	; 0x40
 800b8ba:	d003      	beq.n	800b8c4 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	2208      	movs	r2, #8
 800b8c0:	71da      	strb	r2, [r3, #7]
        break;
 800b8c2:	e000      	b.n	800b8c6 <USBH_ParseDevDesc+0xba>
        break;
 800b8c4:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800b8c6:	e00e      	b.n	800b8e6 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b8ce:	2b02      	cmp	r3, #2
 800b8d0:	d107      	bne.n	800b8e2 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	79db      	ldrb	r3, [r3, #7]
 800b8d6:	2b08      	cmp	r3, #8
 800b8d8:	d005      	beq.n	800b8e6 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	2208      	movs	r2, #8
 800b8de:	71da      	strb	r2, [r3, #7]
 800b8e0:	e001      	b.n	800b8e6 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b8e2:	2303      	movs	r3, #3
 800b8e4:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800b8e6:	88fb      	ldrh	r3, [r7, #6]
 800b8e8:	2b08      	cmp	r3, #8
 800b8ea:	d939      	bls.n	800b960 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	3308      	adds	r3, #8
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	b29a      	uxth	r2, r3
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	3309      	adds	r3, #9
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	b29b      	uxth	r3, r3
 800b8fc:	021b      	lsls	r3, r3, #8
 800b8fe:	b29b      	uxth	r3, r3
 800b900:	4313      	orrs	r3, r2
 800b902:	b29a      	uxth	r2, r3
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	330a      	adds	r3, #10
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	b29a      	uxth	r2, r3
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	330b      	adds	r3, #11
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	b29b      	uxth	r3, r3
 800b918:	021b      	lsls	r3, r3, #8
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	4313      	orrs	r3, r2
 800b91e:	b29a      	uxth	r2, r3
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	330c      	adds	r3, #12
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	b29a      	uxth	r2, r3
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	330d      	adds	r3, #13
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	b29b      	uxth	r3, r3
 800b934:	021b      	lsls	r3, r3, #8
 800b936:	b29b      	uxth	r3, r3
 800b938:	4313      	orrs	r3, r2
 800b93a:	b29a      	uxth	r2, r3
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	7b9a      	ldrb	r2, [r3, #14]
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	7bda      	ldrb	r2, [r3, #15]
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	7c1a      	ldrb	r2, [r3, #16]
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	7c5a      	ldrb	r2, [r3, #17]
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800b960:	7dfb      	ldrb	r3, [r7, #23]
}
 800b962:	4618      	mov	r0, r3
 800b964:	371c      	adds	r7, #28
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop
 800b970:	01000101 	.word	0x01000101

0800b974 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b08c      	sub	sp, #48	; 0x30
 800b978:	af00      	add	r7, sp, #0
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	60b9      	str	r1, [r7, #8]
 800b97e:	4613      	mov	r3, r2
 800b980:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b988:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b98a:	2300      	movs	r3, #0
 800b98c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b990:	2300      	movs	r3, #0
 800b992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800b996:	2300      	movs	r3, #0
 800b998:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d101      	bne.n	800b9a6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800b9a2:	2302      	movs	r3, #2
 800b9a4:	e0db      	b.n	800bb5e <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	781a      	ldrb	r2, [r3, #0]
 800b9ae:	6a3b      	ldr	r3, [r7, #32]
 800b9b0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	785a      	ldrb	r2, [r3, #1]
 800b9b6:	6a3b      	ldr	r3, [r7, #32]
 800b9b8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	3302      	adds	r3, #2
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	b29a      	uxth	r2, r3
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	3303      	adds	r3, #3
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	021b      	lsls	r3, r3, #8
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9d6:	bf28      	it	cs
 800b9d8:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800b9dc:	b29a      	uxth	r2, r3
 800b9de:	6a3b      	ldr	r3, [r7, #32]
 800b9e0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	791a      	ldrb	r2, [r3, #4]
 800b9e6:	6a3b      	ldr	r3, [r7, #32]
 800b9e8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	795a      	ldrb	r2, [r3, #5]
 800b9ee:	6a3b      	ldr	r3, [r7, #32]
 800b9f0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	799a      	ldrb	r2, [r3, #6]
 800b9f6:	6a3b      	ldr	r3, [r7, #32]
 800b9f8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	79da      	ldrb	r2, [r3, #7]
 800b9fe:	6a3b      	ldr	r3, [r7, #32]
 800ba00:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	7a1a      	ldrb	r2, [r3, #8]
 800ba06:	6a3b      	ldr	r3, [r7, #32]
 800ba08:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800ba0a:	6a3b      	ldr	r3, [r7, #32]
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	2b09      	cmp	r3, #9
 800ba10:	d002      	beq.n	800ba18 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800ba12:	6a3b      	ldr	r3, [r7, #32]
 800ba14:	2209      	movs	r2, #9
 800ba16:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ba18:	88fb      	ldrh	r3, [r7, #6]
 800ba1a:	2b09      	cmp	r3, #9
 800ba1c:	f240 809d 	bls.w	800bb5a <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800ba20:	2309      	movs	r3, #9
 800ba22:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ba24:	2300      	movs	r3, #0
 800ba26:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ba28:	e081      	b.n	800bb2e <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ba2a:	f107 0316 	add.w	r3, r7, #22
 800ba2e:	4619      	mov	r1, r3
 800ba30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba32:	f000 f9e8 	bl	800be06 <USBH_GetNextDesc>
 800ba36:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800ba38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba3a:	785b      	ldrb	r3, [r3, #1]
 800ba3c:	2b04      	cmp	r3, #4
 800ba3e:	d176      	bne.n	800bb2e <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800ba40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	2b09      	cmp	r3, #9
 800ba46:	d002      	beq.n	800ba4e <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800ba48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4a:	2209      	movs	r2, #9
 800ba4c:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800ba4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba52:	221a      	movs	r2, #26
 800ba54:	fb02 f303 	mul.w	r3, r2, r3
 800ba58:	3308      	adds	r3, #8
 800ba5a:	6a3a      	ldr	r2, [r7, #32]
 800ba5c:	4413      	add	r3, r2
 800ba5e:	3302      	adds	r3, #2
 800ba60:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ba62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba64:	69f8      	ldr	r0, [r7, #28]
 800ba66:	f000 f87e 	bl	800bb66 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800ba70:	2300      	movs	r3, #0
 800ba72:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ba74:	e043      	b.n	800bafe <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ba76:	f107 0316 	add.w	r3, r7, #22
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba7e:	f000 f9c2 	bl	800be06 <USBH_GetNextDesc>
 800ba82:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ba84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba86:	785b      	ldrb	r3, [r3, #1]
 800ba88:	2b05      	cmp	r3, #5
 800ba8a:	d138      	bne.n	800bafe <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800ba8c:	69fb      	ldr	r3, [r7, #28]
 800ba8e:	795b      	ldrb	r3, [r3, #5]
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d113      	bne.n	800babc <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ba94:	69fb      	ldr	r3, [r7, #28]
 800ba96:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800ba98:	2b02      	cmp	r3, #2
 800ba9a:	d003      	beq.n	800baa4 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ba9c:	69fb      	ldr	r3, [r7, #28]
 800ba9e:	799b      	ldrb	r3, [r3, #6]
 800baa0:	2b03      	cmp	r3, #3
 800baa2:	d10b      	bne.n	800babc <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800baa4:	69fb      	ldr	r3, [r7, #28]
 800baa6:	79db      	ldrb	r3, [r3, #7]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d10b      	bne.n	800bac4 <USBH_ParseCfgDesc+0x150>
 800baac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	2b09      	cmp	r3, #9
 800bab2:	d007      	beq.n	800bac4 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800bab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab6:	2209      	movs	r2, #9
 800bab8:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800baba:	e003      	b.n	800bac4 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800babc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800babe:	2207      	movs	r2, #7
 800bac0:	701a      	strb	r2, [r3, #0]
 800bac2:	e000      	b.n	800bac6 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bac4:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800bac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800baca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bace:	3201      	adds	r2, #1
 800bad0:	00d2      	lsls	r2, r2, #3
 800bad2:	211a      	movs	r1, #26
 800bad4:	fb01 f303 	mul.w	r3, r1, r3
 800bad8:	4413      	add	r3, r2
 800bada:	3308      	adds	r3, #8
 800badc:	6a3a      	ldr	r2, [r7, #32]
 800bade:	4413      	add	r3, r2
 800bae0:	3304      	adds	r3, #4
 800bae2:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800bae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bae6:	69b9      	ldr	r1, [r7, #24]
 800bae8:	68f8      	ldr	r0, [r7, #12]
 800baea:	f000 f870 	bl	800bbce <USBH_ParseEPDesc>
 800baee:	4603      	mov	r3, r0
 800baf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800baf4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800baf8:	3301      	adds	r3, #1
 800bafa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bafe:	69fb      	ldr	r3, [r7, #28]
 800bb00:	791b      	ldrb	r3, [r3, #4]
 800bb02:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d204      	bcs.n	800bb14 <USBH_ParseCfgDesc+0x1a0>
 800bb0a:	6a3b      	ldr	r3, [r7, #32]
 800bb0c:	885a      	ldrh	r2, [r3, #2]
 800bb0e:	8afb      	ldrh	r3, [r7, #22]
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d8b0      	bhi.n	800ba76 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	791b      	ldrb	r3, [r3, #4]
 800bb18:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d201      	bcs.n	800bb24 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800bb20:	2303      	movs	r3, #3
 800bb22:	e01c      	b.n	800bb5e <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800bb24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb28:	3301      	adds	r3, #1
 800bb2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bb2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d805      	bhi.n	800bb42 <USBH_ParseCfgDesc+0x1ce>
 800bb36:	6a3b      	ldr	r3, [r7, #32]
 800bb38:	885a      	ldrh	r2, [r3, #2]
 800bb3a:	8afb      	ldrh	r3, [r7, #22]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	f63f af74 	bhi.w	800ba2a <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800bb42:	6a3b      	ldr	r3, [r7, #32]
 800bb44:	791b      	ldrb	r3, [r3, #4]
 800bb46:	2b02      	cmp	r3, #2
 800bb48:	bf28      	it	cs
 800bb4a:	2302      	movcs	r3, #2
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d201      	bcs.n	800bb5a <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800bb56:	2303      	movs	r3, #3
 800bb58:	e001      	b.n	800bb5e <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800bb5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3730      	adds	r7, #48	; 0x30
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800bb66:	b480      	push	{r7}
 800bb68:	b083      	sub	sp, #12
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
 800bb6e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	781a      	ldrb	r2, [r3, #0]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	785a      	ldrb	r2, [r3, #1]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	789a      	ldrb	r2, [r3, #2]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	78da      	ldrb	r2, [r3, #3]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	3304      	adds	r3, #4
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	2b02      	cmp	r3, #2
 800bb98:	bf28      	it	cs
 800bb9a:	2302      	movcs	r3, #2
 800bb9c:	b2da      	uxtb	r2, r3
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	795a      	ldrb	r2, [r3, #5]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	799a      	ldrb	r2, [r3, #6]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	79da      	ldrb	r2, [r3, #7]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	7a1a      	ldrb	r2, [r3, #8]
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	721a      	strb	r2, [r3, #8]
}
 800bbc2:	bf00      	nop
 800bbc4:	370c      	adds	r7, #12
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr

0800bbce <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800bbce:	b480      	push	{r7}
 800bbd0:	b087      	sub	sp, #28
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	60f8      	str	r0, [r7, #12]
 800bbd6:	60b9      	str	r1, [r7, #8]
 800bbd8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	781a      	ldrb	r2, [r3, #0]
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	785a      	ldrb	r2, [r3, #1]
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	789a      	ldrb	r2, [r3, #2]
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	78da      	ldrb	r2, [r3, #3]
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	3304      	adds	r3, #4
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	b29a      	uxth	r2, r3
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	3305      	adds	r3, #5
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	b29b      	uxth	r3, r3
 800bc0e:	021b      	lsls	r3, r3, #8
 800bc10:	b29b      	uxth	r3, r3
 800bc12:	4313      	orrs	r3, r2
 800bc14:	b29a      	uxth	r2, r3
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	799a      	ldrb	r2, [r3, #6]
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	889b      	ldrh	r3, [r3, #4]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d009      	beq.n	800bc3e <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800bc2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc32:	d804      	bhi.n	800bc3e <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800bc38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc3c:	d901      	bls.n	800bc42 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800bc3e:	2303      	movs	r3, #3
 800bc40:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d136      	bne.n	800bcba <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	78db      	ldrb	r3, [r3, #3]
 800bc50:	f003 0303 	and.w	r3, r3, #3
 800bc54:	2b02      	cmp	r3, #2
 800bc56:	d108      	bne.n	800bc6a <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	889b      	ldrh	r3, [r3, #4]
 800bc5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc60:	f240 8097 	bls.w	800bd92 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bc64:	2303      	movs	r3, #3
 800bc66:	75fb      	strb	r3, [r7, #23]
 800bc68:	e093      	b.n	800bd92 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	78db      	ldrb	r3, [r3, #3]
 800bc6e:	f003 0303 	and.w	r3, r3, #3
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d107      	bne.n	800bc86 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	889b      	ldrh	r3, [r3, #4]
 800bc7a:	2b40      	cmp	r3, #64	; 0x40
 800bc7c:	f240 8089 	bls.w	800bd92 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bc80:	2303      	movs	r3, #3
 800bc82:	75fb      	strb	r3, [r7, #23]
 800bc84:	e085      	b.n	800bd92 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	78db      	ldrb	r3, [r3, #3]
 800bc8a:	f003 0303 	and.w	r3, r3, #3
 800bc8e:	2b01      	cmp	r3, #1
 800bc90:	d005      	beq.n	800bc9e <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	78db      	ldrb	r3, [r3, #3]
 800bc96:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bc9a:	2b03      	cmp	r3, #3
 800bc9c:	d10a      	bne.n	800bcb4 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	799b      	ldrb	r3, [r3, #6]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d003      	beq.n	800bcae <USBH_ParseEPDesc+0xe0>
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	799b      	ldrb	r3, [r3, #6]
 800bcaa:	2b10      	cmp	r3, #16
 800bcac:	d970      	bls.n	800bd90 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bcae:	2303      	movs	r3, #3
 800bcb0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bcb2:	e06d      	b.n	800bd90 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800bcb4:	2303      	movs	r3, #3
 800bcb6:	75fb      	strb	r3, [r7, #23]
 800bcb8:	e06b      	b.n	800bd92 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	d13c      	bne.n	800bd3e <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	78db      	ldrb	r3, [r3, #3]
 800bcc8:	f003 0303 	and.w	r3, r3, #3
 800bccc:	2b02      	cmp	r3, #2
 800bcce:	d005      	beq.n	800bcdc <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	78db      	ldrb	r3, [r3, #3]
 800bcd4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d106      	bne.n	800bcea <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	889b      	ldrh	r3, [r3, #4]
 800bce0:	2b40      	cmp	r3, #64	; 0x40
 800bce2:	d956      	bls.n	800bd92 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bce4:	2303      	movs	r3, #3
 800bce6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800bce8:	e053      	b.n	800bd92 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	78db      	ldrb	r3, [r3, #3]
 800bcee:	f003 0303 	and.w	r3, r3, #3
 800bcf2:	2b01      	cmp	r3, #1
 800bcf4:	d10e      	bne.n	800bd14 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	799b      	ldrb	r3, [r3, #6]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d007      	beq.n	800bd0e <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800bd02:	2b10      	cmp	r3, #16
 800bd04:	d803      	bhi.n	800bd0e <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800bd0a:	2b40      	cmp	r3, #64	; 0x40
 800bd0c:	d941      	bls.n	800bd92 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bd0e:	2303      	movs	r3, #3
 800bd10:	75fb      	strb	r3, [r7, #23]
 800bd12:	e03e      	b.n	800bd92 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	78db      	ldrb	r3, [r3, #3]
 800bd18:	f003 0303 	and.w	r3, r3, #3
 800bd1c:	2b03      	cmp	r3, #3
 800bd1e:	d10b      	bne.n	800bd38 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	799b      	ldrb	r3, [r3, #6]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d004      	beq.n	800bd32 <USBH_ParseEPDesc+0x164>
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	889b      	ldrh	r3, [r3, #4]
 800bd2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd30:	d32f      	bcc.n	800bd92 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bd32:	2303      	movs	r3, #3
 800bd34:	75fb      	strb	r3, [r7, #23]
 800bd36:	e02c      	b.n	800bd92 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800bd38:	2303      	movs	r3, #3
 800bd3a:	75fb      	strb	r3, [r7, #23]
 800bd3c:	e029      	b.n	800bd92 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bd44:	2b02      	cmp	r3, #2
 800bd46:	d120      	bne.n	800bd8a <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	78db      	ldrb	r3, [r3, #3]
 800bd4c:	f003 0303 	and.w	r3, r3, #3
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d106      	bne.n	800bd62 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	889b      	ldrh	r3, [r3, #4]
 800bd58:	2b08      	cmp	r3, #8
 800bd5a:	d01a      	beq.n	800bd92 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bd5c:	2303      	movs	r3, #3
 800bd5e:	75fb      	strb	r3, [r7, #23]
 800bd60:	e017      	b.n	800bd92 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	78db      	ldrb	r3, [r3, #3]
 800bd66:	f003 0303 	and.w	r3, r3, #3
 800bd6a:	2b03      	cmp	r3, #3
 800bd6c:	d10a      	bne.n	800bd84 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	799b      	ldrb	r3, [r3, #6]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d003      	beq.n	800bd7e <USBH_ParseEPDesc+0x1b0>
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	889b      	ldrh	r3, [r3, #4]
 800bd7a:	2b08      	cmp	r3, #8
 800bd7c:	d909      	bls.n	800bd92 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bd7e:	2303      	movs	r3, #3
 800bd80:	75fb      	strb	r3, [r7, #23]
 800bd82:	e006      	b.n	800bd92 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800bd84:	2303      	movs	r3, #3
 800bd86:	75fb      	strb	r3, [r7, #23]
 800bd88:	e003      	b.n	800bd92 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800bd8a:	2303      	movs	r3, #3
 800bd8c:	75fb      	strb	r3, [r7, #23]
 800bd8e:	e000      	b.n	800bd92 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bd90:	bf00      	nop
  }

  return status;
 800bd92:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	371c      	adds	r7, #28
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b087      	sub	sp, #28
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	60f8      	str	r0, [r7, #12]
 800bda8:	60b9      	str	r1, [r7, #8]
 800bdaa:	4613      	mov	r3, r2
 800bdac:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	2b03      	cmp	r3, #3
 800bdb6:	d120      	bne.n	800bdfa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	1e9a      	subs	r2, r3, #2
 800bdbe:	88fb      	ldrh	r3, [r7, #6]
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	bf28      	it	cs
 800bdc4:	4613      	movcs	r3, r2
 800bdc6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	3302      	adds	r3, #2
 800bdcc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800bdce:	2300      	movs	r3, #0
 800bdd0:	82fb      	strh	r3, [r7, #22]
 800bdd2:	e00b      	b.n	800bdec <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bdd4:	8afb      	ldrh	r3, [r7, #22]
 800bdd6:	68fa      	ldr	r2, [r7, #12]
 800bdd8:	4413      	add	r3, r2
 800bdda:	781a      	ldrb	r2, [r3, #0]
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	701a      	strb	r2, [r3, #0]
      pdest++;
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	3301      	adds	r3, #1
 800bde4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bde6:	8afb      	ldrh	r3, [r7, #22]
 800bde8:	3302      	adds	r3, #2
 800bdea:	82fb      	strh	r3, [r7, #22]
 800bdec:	8afa      	ldrh	r2, [r7, #22]
 800bdee:	8abb      	ldrh	r3, [r7, #20]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d3ef      	bcc.n	800bdd4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	701a      	strb	r2, [r3, #0]
  }
}
 800bdfa:	bf00      	nop
 800bdfc:	371c      	adds	r7, #28
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr

0800be06 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800be06:	b480      	push	{r7}
 800be08:	b085      	sub	sp, #20
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	6078      	str	r0, [r7, #4]
 800be0e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	881a      	ldrh	r2, [r3, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	b29b      	uxth	r3, r3
 800be1a:	4413      	add	r3, r2
 800be1c:	b29a      	uxth	r2, r3
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	4413      	add	r3, r2
 800be2c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800be2e:	68fb      	ldr	r3, [r7, #12]
}
 800be30:	4618      	mov	r0, r3
 800be32:	3714      	adds	r7, #20
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr

0800be3c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b086      	sub	sp, #24
 800be40:	af00      	add	r7, sp, #0
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	4613      	mov	r3, r2
 800be48:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800be4a:	2301      	movs	r3, #1
 800be4c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	789b      	ldrb	r3, [r3, #2]
 800be52:	2b01      	cmp	r3, #1
 800be54:	d002      	beq.n	800be5c <USBH_CtlReq+0x20>
 800be56:	2b02      	cmp	r3, #2
 800be58:	d00f      	beq.n	800be7a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800be5a:	e027      	b.n	800beac <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	68ba      	ldr	r2, [r7, #8]
 800be60:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	88fa      	ldrh	r2, [r7, #6]
 800be66:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2201      	movs	r2, #1
 800be6c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2202      	movs	r2, #2
 800be72:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800be74:	2301      	movs	r3, #1
 800be76:	75fb      	strb	r3, [r7, #23]
      break;
 800be78:	e018      	b.n	800beac <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800be7a:	68f8      	ldr	r0, [r7, #12]
 800be7c:	f000 f81c 	bl	800beb8 <USBH_HandleControl>
 800be80:	4603      	mov	r3, r0
 800be82:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800be84:	7dfb      	ldrb	r3, [r7, #23]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d002      	beq.n	800be90 <USBH_CtlReq+0x54>
 800be8a:	7dfb      	ldrb	r3, [r7, #23]
 800be8c:	2b03      	cmp	r3, #3
 800be8e:	d106      	bne.n	800be9e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2201      	movs	r2, #1
 800be94:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2200      	movs	r2, #0
 800be9a:	761a      	strb	r2, [r3, #24]
      break;
 800be9c:	e005      	b.n	800beaa <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800be9e:	7dfb      	ldrb	r3, [r7, #23]
 800bea0:	2b02      	cmp	r3, #2
 800bea2:	d102      	bne.n	800beaa <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2201      	movs	r2, #1
 800bea8:	709a      	strb	r2, [r3, #2]
      break;
 800beaa:	bf00      	nop
  }
  return status;
 800beac:	7dfb      	ldrb	r3, [r7, #23]
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3718      	adds	r7, #24
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
	...

0800beb8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b086      	sub	sp, #24
 800bebc:	af02      	add	r7, sp, #8
 800bebe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bec0:	2301      	movs	r3, #1
 800bec2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bec4:	2300      	movs	r3, #0
 800bec6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	7e1b      	ldrb	r3, [r3, #24]
 800becc:	3b01      	subs	r3, #1
 800bece:	2b0a      	cmp	r3, #10
 800bed0:	f200 8156 	bhi.w	800c180 <USBH_HandleControl+0x2c8>
 800bed4:	a201      	add	r2, pc, #4	; (adr r2, 800bedc <USBH_HandleControl+0x24>)
 800bed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beda:	bf00      	nop
 800bedc:	0800bf09 	.word	0x0800bf09
 800bee0:	0800bf23 	.word	0x0800bf23
 800bee4:	0800bf8d 	.word	0x0800bf8d
 800bee8:	0800bfb3 	.word	0x0800bfb3
 800beec:	0800bfeb 	.word	0x0800bfeb
 800bef0:	0800c015 	.word	0x0800c015
 800bef4:	0800c067 	.word	0x0800c067
 800bef8:	0800c089 	.word	0x0800c089
 800befc:	0800c0c5 	.word	0x0800c0c5
 800bf00:	0800c0eb 	.word	0x0800c0eb
 800bf04:	0800c129 	.word	0x0800c129
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f103 0110 	add.w	r1, r3, #16
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	795b      	ldrb	r3, [r3, #5]
 800bf12:	461a      	mov	r2, r3
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 f943 	bl	800c1a0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2202      	movs	r2, #2
 800bf1e:	761a      	strb	r2, [r3, #24]
      break;
 800bf20:	e139      	b.n	800c196 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	795b      	ldrb	r3, [r3, #5]
 800bf26:	4619      	mov	r1, r3
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f000 fcc5 	bl	800c8b8 <USBH_LL_GetURBState>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800bf32:	7bbb      	ldrb	r3, [r7, #14]
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d11e      	bne.n	800bf76 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	7c1b      	ldrb	r3, [r3, #16]
 800bf3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bf40:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	8adb      	ldrh	r3, [r3, #22]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d00a      	beq.n	800bf60 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800bf4a:	7b7b      	ldrb	r3, [r7, #13]
 800bf4c:	2b80      	cmp	r3, #128	; 0x80
 800bf4e:	d103      	bne.n	800bf58 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2203      	movs	r2, #3
 800bf54:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bf56:	e115      	b.n	800c184 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2205      	movs	r2, #5
 800bf5c:	761a      	strb	r2, [r3, #24]
      break;
 800bf5e:	e111      	b.n	800c184 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800bf60:	7b7b      	ldrb	r3, [r7, #13]
 800bf62:	2b80      	cmp	r3, #128	; 0x80
 800bf64:	d103      	bne.n	800bf6e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2209      	movs	r2, #9
 800bf6a:	761a      	strb	r2, [r3, #24]
      break;
 800bf6c:	e10a      	b.n	800c184 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2207      	movs	r2, #7
 800bf72:	761a      	strb	r2, [r3, #24]
      break;
 800bf74:	e106      	b.n	800c184 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bf76:	7bbb      	ldrb	r3, [r7, #14]
 800bf78:	2b04      	cmp	r3, #4
 800bf7a:	d003      	beq.n	800bf84 <USBH_HandleControl+0xcc>
 800bf7c:	7bbb      	ldrb	r3, [r7, #14]
 800bf7e:	2b02      	cmp	r3, #2
 800bf80:	f040 8100 	bne.w	800c184 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	220b      	movs	r2, #11
 800bf88:	761a      	strb	r2, [r3, #24]
      break;
 800bf8a:	e0fb      	b.n	800c184 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bf92:	b29a      	uxth	r2, r3
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6899      	ldr	r1, [r3, #8]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	899a      	ldrh	r2, [r3, #12]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	791b      	ldrb	r3, [r3, #4]
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 f93a 	bl	800c21e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2204      	movs	r2, #4
 800bfae:	761a      	strb	r2, [r3, #24]
      break;
 800bfb0:	e0f1      	b.n	800c196 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	791b      	ldrb	r3, [r3, #4]
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fc7d 	bl	800c8b8 <USBH_LL_GetURBState>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bfc2:	7bbb      	ldrb	r3, [r7, #14]
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d102      	bne.n	800bfce <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2209      	movs	r2, #9
 800bfcc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bfce:	7bbb      	ldrb	r3, [r7, #14]
 800bfd0:	2b05      	cmp	r3, #5
 800bfd2:	d102      	bne.n	800bfda <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bfd4:	2303      	movs	r3, #3
 800bfd6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bfd8:	e0d6      	b.n	800c188 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800bfda:	7bbb      	ldrb	r3, [r7, #14]
 800bfdc:	2b04      	cmp	r3, #4
 800bfde:	f040 80d3 	bne.w	800c188 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	220b      	movs	r2, #11
 800bfe6:	761a      	strb	r2, [r3, #24]
      break;
 800bfe8:	e0ce      	b.n	800c188 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6899      	ldr	r1, [r3, #8]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	899a      	ldrh	r2, [r3, #12]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	795b      	ldrb	r3, [r3, #5]
 800bff6:	2001      	movs	r0, #1
 800bff8:	9000      	str	r0, [sp, #0]
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f000 f8ea 	bl	800c1d4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c006:	b29a      	uxth	r2, r3
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2206      	movs	r2, #6
 800c010:	761a      	strb	r2, [r3, #24]
      break;
 800c012:	e0c0      	b.n	800c196 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	795b      	ldrb	r3, [r3, #5]
 800c018:	4619      	mov	r1, r3
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 fc4c 	bl	800c8b8 <USBH_LL_GetURBState>
 800c020:	4603      	mov	r3, r0
 800c022:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c024:	7bbb      	ldrb	r3, [r7, #14]
 800c026:	2b01      	cmp	r3, #1
 800c028:	d103      	bne.n	800c032 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2207      	movs	r2, #7
 800c02e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c030:	e0ac      	b.n	800c18c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c032:	7bbb      	ldrb	r3, [r7, #14]
 800c034:	2b05      	cmp	r3, #5
 800c036:	d105      	bne.n	800c044 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	220c      	movs	r2, #12
 800c03c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c03e:	2303      	movs	r3, #3
 800c040:	73fb      	strb	r3, [r7, #15]
      break;
 800c042:	e0a3      	b.n	800c18c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c044:	7bbb      	ldrb	r3, [r7, #14]
 800c046:	2b02      	cmp	r3, #2
 800c048:	d103      	bne.n	800c052 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2205      	movs	r2, #5
 800c04e:	761a      	strb	r2, [r3, #24]
      break;
 800c050:	e09c      	b.n	800c18c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c052:	7bbb      	ldrb	r3, [r7, #14]
 800c054:	2b04      	cmp	r3, #4
 800c056:	f040 8099 	bne.w	800c18c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	220b      	movs	r2, #11
 800c05e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c060:	2302      	movs	r3, #2
 800c062:	73fb      	strb	r3, [r7, #15]
      break;
 800c064:	e092      	b.n	800c18c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	791b      	ldrb	r3, [r3, #4]
 800c06a:	2200      	movs	r2, #0
 800c06c:	2100      	movs	r1, #0
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 f8d5 	bl	800c21e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c07a:	b29a      	uxth	r2, r3
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2208      	movs	r2, #8
 800c084:	761a      	strb	r2, [r3, #24]

      break;
 800c086:	e086      	b.n	800c196 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	791b      	ldrb	r3, [r3, #4]
 800c08c:	4619      	mov	r1, r3
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 fc12 	bl	800c8b8 <USBH_LL_GetURBState>
 800c094:	4603      	mov	r3, r0
 800c096:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c098:	7bbb      	ldrb	r3, [r7, #14]
 800c09a:	2b01      	cmp	r3, #1
 800c09c:	d105      	bne.n	800c0aa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	220d      	movs	r2, #13
 800c0a2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c0a8:	e072      	b.n	800c190 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c0aa:	7bbb      	ldrb	r3, [r7, #14]
 800c0ac:	2b04      	cmp	r3, #4
 800c0ae:	d103      	bne.n	800c0b8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	220b      	movs	r2, #11
 800c0b4:	761a      	strb	r2, [r3, #24]
      break;
 800c0b6:	e06b      	b.n	800c190 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c0b8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ba:	2b05      	cmp	r3, #5
 800c0bc:	d168      	bne.n	800c190 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c0be:	2303      	movs	r3, #3
 800c0c0:	73fb      	strb	r3, [r7, #15]
      break;
 800c0c2:	e065      	b.n	800c190 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	795b      	ldrb	r3, [r3, #5]
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	9200      	str	r2, [sp, #0]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	2100      	movs	r1, #0
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f000 f87f 	bl	800c1d4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c0dc:	b29a      	uxth	r2, r3
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	220a      	movs	r2, #10
 800c0e6:	761a      	strb	r2, [r3, #24]
      break;
 800c0e8:	e055      	b.n	800c196 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	795b      	ldrb	r3, [r3, #5]
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 fbe1 	bl	800c8b8 <USBH_LL_GetURBState>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c0fa:	7bbb      	ldrb	r3, [r7, #14]
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d105      	bne.n	800c10c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c100:	2300      	movs	r3, #0
 800c102:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	220d      	movs	r2, #13
 800c108:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c10a:	e043      	b.n	800c194 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c10c:	7bbb      	ldrb	r3, [r7, #14]
 800c10e:	2b02      	cmp	r3, #2
 800c110:	d103      	bne.n	800c11a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2209      	movs	r2, #9
 800c116:	761a      	strb	r2, [r3, #24]
      break;
 800c118:	e03c      	b.n	800c194 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c11a:	7bbb      	ldrb	r3, [r7, #14]
 800c11c:	2b04      	cmp	r3, #4
 800c11e:	d139      	bne.n	800c194 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	220b      	movs	r2, #11
 800c124:	761a      	strb	r2, [r3, #24]
      break;
 800c126:	e035      	b.n	800c194 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	7e5b      	ldrb	r3, [r3, #25]
 800c12c:	3301      	adds	r3, #1
 800c12e:	b2da      	uxtb	r2, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	765a      	strb	r2, [r3, #25]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	7e5b      	ldrb	r3, [r3, #25]
 800c138:	2b02      	cmp	r3, #2
 800c13a:	d806      	bhi.n	800c14a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2201      	movs	r2, #1
 800c140:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2201      	movs	r2, #1
 800c146:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c148:	e025      	b.n	800c196 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c150:	2106      	movs	r1, #6
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2200      	movs	r2, #0
 800c15a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	795b      	ldrb	r3, [r3, #5]
 800c160:	4619      	mov	r1, r3
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 f90c 	bl	800c380 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	791b      	ldrb	r3, [r3, #4]
 800c16c:	4619      	mov	r1, r3
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 f906 	bl	800c380 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c17a:	2302      	movs	r3, #2
 800c17c:	73fb      	strb	r3, [r7, #15]
      break;
 800c17e:	e00a      	b.n	800c196 <USBH_HandleControl+0x2de>

    default:
      break;
 800c180:	bf00      	nop
 800c182:	e008      	b.n	800c196 <USBH_HandleControl+0x2de>
      break;
 800c184:	bf00      	nop
 800c186:	e006      	b.n	800c196 <USBH_HandleControl+0x2de>
      break;
 800c188:	bf00      	nop
 800c18a:	e004      	b.n	800c196 <USBH_HandleControl+0x2de>
      break;
 800c18c:	bf00      	nop
 800c18e:	e002      	b.n	800c196 <USBH_HandleControl+0x2de>
      break;
 800c190:	bf00      	nop
 800c192:	e000      	b.n	800c196 <USBH_HandleControl+0x2de>
      break;
 800c194:	bf00      	nop
  }

  return status;
 800c196:	7bfb      	ldrb	r3, [r7, #15]
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3710      	adds	r7, #16
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b088      	sub	sp, #32
 800c1a4:	af04      	add	r7, sp, #16
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	4613      	mov	r3, r2
 800c1ac:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c1ae:	79f9      	ldrb	r1, [r7, #7]
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	9303      	str	r3, [sp, #12]
 800c1b4:	2308      	movs	r3, #8
 800c1b6:	9302      	str	r3, [sp, #8]
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	9301      	str	r3, [sp, #4]
 800c1bc:	2300      	movs	r3, #0
 800c1be:	9300      	str	r3, [sp, #0]
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	68f8      	ldr	r0, [r7, #12]
 800c1c6:	f000 fb46 	bl	800c856 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c1ca:	2300      	movs	r3, #0
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3710      	adds	r7, #16
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b088      	sub	sp, #32
 800c1d8:	af04      	add	r7, sp, #16
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	60b9      	str	r1, [r7, #8]
 800c1de:	4611      	mov	r1, r2
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	460b      	mov	r3, r1
 800c1e4:	80fb      	strh	r3, [r7, #6]
 800c1e6:	4613      	mov	r3, r2
 800c1e8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d001      	beq.n	800c1f8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c1f8:	7979      	ldrb	r1, [r7, #5]
 800c1fa:	7e3b      	ldrb	r3, [r7, #24]
 800c1fc:	9303      	str	r3, [sp, #12]
 800c1fe:	88fb      	ldrh	r3, [r7, #6]
 800c200:	9302      	str	r3, [sp, #8]
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	9301      	str	r3, [sp, #4]
 800c206:	2301      	movs	r3, #1
 800c208:	9300      	str	r3, [sp, #0]
 800c20a:	2300      	movs	r3, #0
 800c20c:	2200      	movs	r2, #0
 800c20e:	68f8      	ldr	r0, [r7, #12]
 800c210:	f000 fb21 	bl	800c856 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c214:	2300      	movs	r3, #0
}
 800c216:	4618      	mov	r0, r3
 800c218:	3710      	adds	r7, #16
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}

0800c21e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c21e:	b580      	push	{r7, lr}
 800c220:	b088      	sub	sp, #32
 800c222:	af04      	add	r7, sp, #16
 800c224:	60f8      	str	r0, [r7, #12]
 800c226:	60b9      	str	r1, [r7, #8]
 800c228:	4611      	mov	r1, r2
 800c22a:	461a      	mov	r2, r3
 800c22c:	460b      	mov	r3, r1
 800c22e:	80fb      	strh	r3, [r7, #6]
 800c230:	4613      	mov	r3, r2
 800c232:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c234:	7979      	ldrb	r1, [r7, #5]
 800c236:	2300      	movs	r3, #0
 800c238:	9303      	str	r3, [sp, #12]
 800c23a:	88fb      	ldrh	r3, [r7, #6]
 800c23c:	9302      	str	r3, [sp, #8]
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	9301      	str	r3, [sp, #4]
 800c242:	2301      	movs	r3, #1
 800c244:	9300      	str	r3, [sp, #0]
 800c246:	2300      	movs	r3, #0
 800c248:	2201      	movs	r2, #1
 800c24a:	68f8      	ldr	r0, [r7, #12]
 800c24c:	f000 fb03 	bl	800c856 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c250:	2300      	movs	r3, #0

}
 800c252:	4618      	mov	r0, r3
 800c254:	3710      	adds	r7, #16
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}

0800c25a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c25a:	b580      	push	{r7, lr}
 800c25c:	b088      	sub	sp, #32
 800c25e:	af04      	add	r7, sp, #16
 800c260:	60f8      	str	r0, [r7, #12]
 800c262:	60b9      	str	r1, [r7, #8]
 800c264:	4611      	mov	r1, r2
 800c266:	461a      	mov	r2, r3
 800c268:	460b      	mov	r3, r1
 800c26a:	80fb      	strh	r3, [r7, #6]
 800c26c:	4613      	mov	r3, r2
 800c26e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c276:	2b00      	cmp	r3, #0
 800c278:	d001      	beq.n	800c27e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c27a:	2300      	movs	r3, #0
 800c27c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c27e:	7979      	ldrb	r1, [r7, #5]
 800c280:	7e3b      	ldrb	r3, [r7, #24]
 800c282:	9303      	str	r3, [sp, #12]
 800c284:	88fb      	ldrh	r3, [r7, #6]
 800c286:	9302      	str	r3, [sp, #8]
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	9301      	str	r3, [sp, #4]
 800c28c:	2301      	movs	r3, #1
 800c28e:	9300      	str	r3, [sp, #0]
 800c290:	2302      	movs	r3, #2
 800c292:	2200      	movs	r2, #0
 800c294:	68f8      	ldr	r0, [r7, #12]
 800c296:	f000 fade 	bl	800c856 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c29a:	2300      	movs	r3, #0
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3710      	adds	r7, #16
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b088      	sub	sp, #32
 800c2a8:	af04      	add	r7, sp, #16
 800c2aa:	60f8      	str	r0, [r7, #12]
 800c2ac:	60b9      	str	r1, [r7, #8]
 800c2ae:	4611      	mov	r1, r2
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	80fb      	strh	r3, [r7, #6]
 800c2b6:	4613      	mov	r3, r2
 800c2b8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c2ba:	7979      	ldrb	r1, [r7, #5]
 800c2bc:	2300      	movs	r3, #0
 800c2be:	9303      	str	r3, [sp, #12]
 800c2c0:	88fb      	ldrh	r3, [r7, #6]
 800c2c2:	9302      	str	r3, [sp, #8]
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	9301      	str	r3, [sp, #4]
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	9300      	str	r3, [sp, #0]
 800c2cc:	2302      	movs	r3, #2
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	68f8      	ldr	r0, [r7, #12]
 800c2d2:	f000 fac0 	bl	800c856 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c2d6:	2300      	movs	r3, #0
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3710      	adds	r7, #16
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b086      	sub	sp, #24
 800c2e4:	af04      	add	r7, sp, #16
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	4608      	mov	r0, r1
 800c2ea:	4611      	mov	r1, r2
 800c2ec:	461a      	mov	r2, r3
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	70fb      	strb	r3, [r7, #3]
 800c2f2:	460b      	mov	r3, r1
 800c2f4:	70bb      	strb	r3, [r7, #2]
 800c2f6:	4613      	mov	r3, r2
 800c2f8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c2fa:	7878      	ldrb	r0, [r7, #1]
 800c2fc:	78ba      	ldrb	r2, [r7, #2]
 800c2fe:	78f9      	ldrb	r1, [r7, #3]
 800c300:	8b3b      	ldrh	r3, [r7, #24]
 800c302:	9302      	str	r3, [sp, #8]
 800c304:	7d3b      	ldrb	r3, [r7, #20]
 800c306:	9301      	str	r3, [sp, #4]
 800c308:	7c3b      	ldrb	r3, [r7, #16]
 800c30a:	9300      	str	r3, [sp, #0]
 800c30c:	4603      	mov	r3, r0
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 fa53 	bl	800c7ba <USBH_LL_OpenPipe>

  return USBH_OK;
 800c314:	2300      	movs	r3, #0
}
 800c316:	4618      	mov	r0, r3
 800c318:	3708      	adds	r7, #8
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}

0800c31e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c31e:	b580      	push	{r7, lr}
 800c320:	b082      	sub	sp, #8
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
 800c326:	460b      	mov	r3, r1
 800c328:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c32a:	78fb      	ldrb	r3, [r7, #3]
 800c32c:	4619      	mov	r1, r3
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 fa72 	bl	800c818 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c334:	2300      	movs	r3, #0
}
 800c336:	4618      	mov	r0, r3
 800c338:	3708      	adds	r7, #8
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}

0800c33e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c33e:	b580      	push	{r7, lr}
 800c340:	b084      	sub	sp, #16
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]
 800c346:	460b      	mov	r3, r1
 800c348:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 f836 	bl	800c3bc <USBH_GetFreePipe>
 800c350:	4603      	mov	r3, r0
 800c352:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c354:	89fb      	ldrh	r3, [r7, #14]
 800c356:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d00a      	beq.n	800c374 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c35e:	78fa      	ldrb	r2, [r7, #3]
 800c360:	89fb      	ldrh	r3, [r7, #14]
 800c362:	f003 030f 	and.w	r3, r3, #15
 800c366:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c36a:	6879      	ldr	r1, [r7, #4]
 800c36c:	33e0      	adds	r3, #224	; 0xe0
 800c36e:	009b      	lsls	r3, r3, #2
 800c370:	440b      	add	r3, r1
 800c372:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c374:	89fb      	ldrh	r3, [r7, #14]
 800c376:	b2db      	uxtb	r3, r3
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3710      	adds	r7, #16
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c380:	b480      	push	{r7}
 800c382:	b083      	sub	sp, #12
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	460b      	mov	r3, r1
 800c38a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c38c:	78fb      	ldrb	r3, [r7, #3]
 800c38e:	2b0f      	cmp	r3, #15
 800c390:	d80d      	bhi.n	800c3ae <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c392:	78fb      	ldrb	r3, [r7, #3]
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	33e0      	adds	r3, #224	; 0xe0
 800c398:	009b      	lsls	r3, r3, #2
 800c39a:	4413      	add	r3, r2
 800c39c:	685a      	ldr	r2, [r3, #4]
 800c39e:	78fb      	ldrb	r3, [r7, #3]
 800c3a0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c3a4:	6879      	ldr	r1, [r7, #4]
 800c3a6:	33e0      	adds	r3, #224	; 0xe0
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	440b      	add	r3, r1
 800c3ac:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c3ae:	2300      	movs	r3, #0
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	370c      	adds	r7, #12
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b085      	sub	sp, #20
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	73fb      	strb	r3, [r7, #15]
 800c3cc:	e00f      	b.n	800c3ee <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c3ce:	7bfb      	ldrb	r3, [r7, #15]
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	33e0      	adds	r3, #224	; 0xe0
 800c3d4:	009b      	lsls	r3, r3, #2
 800c3d6:	4413      	add	r3, r2
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d102      	bne.n	800c3e8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c3e2:	7bfb      	ldrb	r3, [r7, #15]
 800c3e4:	b29b      	uxth	r3, r3
 800c3e6:	e007      	b.n	800c3f8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c3e8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	73fb      	strb	r3, [r7, #15]
 800c3ee:	7bfb      	ldrb	r3, [r7, #15]
 800c3f0:	2b0f      	cmp	r3, #15
 800c3f2:	d9ec      	bls.n	800c3ce <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c3f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3714      	adds	r7, #20
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c408:	2201      	movs	r2, #1
 800c40a:	490e      	ldr	r1, [pc, #56]	; (800c444 <MX_USB_HOST_Init+0x40>)
 800c40c:	480e      	ldr	r0, [pc, #56]	; (800c448 <MX_USB_HOST_Init+0x44>)
 800c40e:	f7fe fb05 	bl	800aa1c <USBH_Init>
 800c412:	4603      	mov	r3, r0
 800c414:	2b00      	cmp	r3, #0
 800c416:	d001      	beq.n	800c41c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c418:	f7f5 fddc 	bl	8001fd4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c41c:	490b      	ldr	r1, [pc, #44]	; (800c44c <MX_USB_HOST_Init+0x48>)
 800c41e:	480a      	ldr	r0, [pc, #40]	; (800c448 <MX_USB_HOST_Init+0x44>)
 800c420:	f7fe fba9 	bl	800ab76 <USBH_RegisterClass>
 800c424:	4603      	mov	r3, r0
 800c426:	2b00      	cmp	r3, #0
 800c428:	d001      	beq.n	800c42e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c42a:	f7f5 fdd3 	bl	8001fd4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c42e:	4806      	ldr	r0, [pc, #24]	; (800c448 <MX_USB_HOST_Init+0x44>)
 800c430:	f7fe fc2d 	bl	800ac8e <USBH_Start>
 800c434:	4603      	mov	r3, r0
 800c436:	2b00      	cmp	r3, #0
 800c438:	d001      	beq.n	800c43e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c43a:	f7f5 fdcb 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c43e:	bf00      	nop
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	0800c465 	.word	0x0800c465
 800c448:	200005cc 	.word	0x200005cc
 800c44c:	2000001c 	.word	0x2000001c

0800c450 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c454:	4802      	ldr	r0, [pc, #8]	; (800c460 <MX_USB_HOST_Process+0x10>)
 800c456:	f7fe fc2b 	bl	800acb0 <USBH_Process>
}
 800c45a:	bf00      	nop
 800c45c:	bd80      	pop	{r7, pc}
 800c45e:	bf00      	nop
 800c460:	200005cc 	.word	0x200005cc

0800c464 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c464:	b480      	push	{r7}
 800c466:	b083      	sub	sp, #12
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	460b      	mov	r3, r1
 800c46e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c470:	78fb      	ldrb	r3, [r7, #3]
 800c472:	3b01      	subs	r3, #1
 800c474:	2b04      	cmp	r3, #4
 800c476:	d819      	bhi.n	800c4ac <USBH_UserProcess+0x48>
 800c478:	a201      	add	r2, pc, #4	; (adr r2, 800c480 <USBH_UserProcess+0x1c>)
 800c47a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c47e:	bf00      	nop
 800c480:	0800c4ad 	.word	0x0800c4ad
 800c484:	0800c49d 	.word	0x0800c49d
 800c488:	0800c4ad 	.word	0x0800c4ad
 800c48c:	0800c4a5 	.word	0x0800c4a5
 800c490:	0800c495 	.word	0x0800c495
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c494:	4b09      	ldr	r3, [pc, #36]	; (800c4bc <USBH_UserProcess+0x58>)
 800c496:	2203      	movs	r2, #3
 800c498:	701a      	strb	r2, [r3, #0]
  break;
 800c49a:	e008      	b.n	800c4ae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c49c:	4b07      	ldr	r3, [pc, #28]	; (800c4bc <USBH_UserProcess+0x58>)
 800c49e:	2202      	movs	r2, #2
 800c4a0:	701a      	strb	r2, [r3, #0]
  break;
 800c4a2:	e004      	b.n	800c4ae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c4a4:	4b05      	ldr	r3, [pc, #20]	; (800c4bc <USBH_UserProcess+0x58>)
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	701a      	strb	r2, [r3, #0]
  break;
 800c4aa:	e000      	b.n	800c4ae <USBH_UserProcess+0x4a>

  default:
  break;
 800c4ac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c4ae:	bf00      	nop
 800c4b0:	370c      	adds	r7, #12
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b8:	4770      	bx	lr
 800c4ba:	bf00      	nop
 800c4bc:	200009a4 	.word	0x200009a4

0800c4c0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b08a      	sub	sp, #40	; 0x28
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c4c8:	f107 0314 	add.w	r3, r7, #20
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	601a      	str	r2, [r3, #0]
 800c4d0:	605a      	str	r2, [r3, #4]
 800c4d2:	609a      	str	r2, [r3, #8]
 800c4d4:	60da      	str	r2, [r3, #12]
 800c4d6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c4e0:	d147      	bne.n	800c572 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	613b      	str	r3, [r7, #16]
 800c4e6:	4b25      	ldr	r3, [pc, #148]	; (800c57c <HAL_HCD_MspInit+0xbc>)
 800c4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4ea:	4a24      	ldr	r2, [pc, #144]	; (800c57c <HAL_HCD_MspInit+0xbc>)
 800c4ec:	f043 0301 	orr.w	r3, r3, #1
 800c4f0:	6313      	str	r3, [r2, #48]	; 0x30
 800c4f2:	4b22      	ldr	r3, [pc, #136]	; (800c57c <HAL_HCD_MspInit+0xbc>)
 800c4f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4f6:	f003 0301 	and.w	r3, r3, #1
 800c4fa:	613b      	str	r3, [r7, #16]
 800c4fc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c4fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c504:	2300      	movs	r3, #0
 800c506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c508:	2300      	movs	r3, #0
 800c50a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c50c:	f107 0314 	add.w	r3, r7, #20
 800c510:	4619      	mov	r1, r3
 800c512:	481b      	ldr	r0, [pc, #108]	; (800c580 <HAL_HCD_MspInit+0xc0>)
 800c514:	f7f6 fe28 	bl	8003168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c518:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c51c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c51e:	2302      	movs	r3, #2
 800c520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c522:	2300      	movs	r3, #0
 800c524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c526:	2300      	movs	r3, #0
 800c528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c52a:	230a      	movs	r3, #10
 800c52c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c52e:	f107 0314 	add.w	r3, r7, #20
 800c532:	4619      	mov	r1, r3
 800c534:	4812      	ldr	r0, [pc, #72]	; (800c580 <HAL_HCD_MspInit+0xc0>)
 800c536:	f7f6 fe17 	bl	8003168 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c53a:	4b10      	ldr	r3, [pc, #64]	; (800c57c <HAL_HCD_MspInit+0xbc>)
 800c53c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c53e:	4a0f      	ldr	r2, [pc, #60]	; (800c57c <HAL_HCD_MspInit+0xbc>)
 800c540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c544:	6353      	str	r3, [r2, #52]	; 0x34
 800c546:	2300      	movs	r3, #0
 800c548:	60fb      	str	r3, [r7, #12]
 800c54a:	4b0c      	ldr	r3, [pc, #48]	; (800c57c <HAL_HCD_MspInit+0xbc>)
 800c54c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c54e:	4a0b      	ldr	r2, [pc, #44]	; (800c57c <HAL_HCD_MspInit+0xbc>)
 800c550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c554:	6453      	str	r3, [r2, #68]	; 0x44
 800c556:	4b09      	ldr	r3, [pc, #36]	; (800c57c <HAL_HCD_MspInit+0xbc>)
 800c558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c55a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c55e:	60fb      	str	r3, [r7, #12]
 800c560:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c562:	2200      	movs	r2, #0
 800c564:	2100      	movs	r1, #0
 800c566:	2043      	movs	r0, #67	; 0x43
 800c568:	f7f6 fa4b 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c56c:	2043      	movs	r0, #67	; 0x43
 800c56e:	f7f6 fa64 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c572:	bf00      	nop
 800c574:	3728      	adds	r7, #40	; 0x28
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	40023800 	.word	0x40023800
 800c580:	40020000 	.word	0x40020000

0800c584 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c592:	4618      	mov	r0, r3
 800c594:	f7fe ff6b 	bl	800b46e <USBH_LL_IncTimer>
}
 800c598:	bf00      	nop
 800c59a:	3708      	adds	r7, #8
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b082      	sub	sp, #8
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7fe ffa3 	bl	800b4fa <USBH_LL_Connect>
}
 800c5b4:	bf00      	nop
 800c5b6:	3708      	adds	r7, #8
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7fe ffac 	bl	800b528 <USBH_LL_Disconnect>
}
 800c5d0:	bf00      	nop
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b083      	sub	sp, #12
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	70fb      	strb	r3, [r7, #3]
 800c5e4:	4613      	mov	r3, r2
 800c5e6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c5e8:	bf00      	nop
 800c5ea:	370c      	adds	r7, #12
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr

0800c5f4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c602:	4618      	mov	r0, r3
 800c604:	f7fe ff5d 	bl	800b4c2 <USBH_LL_PortEnabled>
}
 800c608:	bf00      	nop
 800c60a:	3708      	adds	r7, #8
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c61e:	4618      	mov	r0, r3
 800c620:	f7fe ff5d 	bl	800b4de <USBH_LL_PortDisabled>
}
 800c624:	bf00      	nop
 800c626:	3708      	adds	r7, #8
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}

0800c62c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b082      	sub	sp, #8
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c63a:	2b01      	cmp	r3, #1
 800c63c:	d12a      	bne.n	800c694 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c63e:	4a18      	ldr	r2, [pc, #96]	; (800c6a0 <USBH_LL_Init+0x74>)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	4a15      	ldr	r2, [pc, #84]	; (800c6a0 <USBH_LL_Init+0x74>)
 800c64a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c64e:	4b14      	ldr	r3, [pc, #80]	; (800c6a0 <USBH_LL_Init+0x74>)
 800c650:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c654:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c656:	4b12      	ldr	r3, [pc, #72]	; (800c6a0 <USBH_LL_Init+0x74>)
 800c658:	2208      	movs	r2, #8
 800c65a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c65c:	4b10      	ldr	r3, [pc, #64]	; (800c6a0 <USBH_LL_Init+0x74>)
 800c65e:	2201      	movs	r2, #1
 800c660:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c662:	4b0f      	ldr	r3, [pc, #60]	; (800c6a0 <USBH_LL_Init+0x74>)
 800c664:	2200      	movs	r2, #0
 800c666:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c668:	4b0d      	ldr	r3, [pc, #52]	; (800c6a0 <USBH_LL_Init+0x74>)
 800c66a:	2202      	movs	r2, #2
 800c66c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c66e:	4b0c      	ldr	r3, [pc, #48]	; (800c6a0 <USBH_LL_Init+0x74>)
 800c670:	2200      	movs	r2, #0
 800c672:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c674:	480a      	ldr	r0, [pc, #40]	; (800c6a0 <USBH_LL_Init+0x74>)
 800c676:	f7f6 ff2c 	bl	80034d2 <HAL_HCD_Init>
 800c67a:	4603      	mov	r3, r0
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d001      	beq.n	800c684 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c680:	f7f5 fca8 	bl	8001fd4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c684:	4806      	ldr	r0, [pc, #24]	; (800c6a0 <USBH_LL_Init+0x74>)
 800c686:	f7f7 fb8d 	bl	8003da4 <HAL_HCD_GetCurrentFrame>
 800c68a:	4603      	mov	r3, r0
 800c68c:	4619      	mov	r1, r3
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f7fe fede 	bl	800b450 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c694:	2300      	movs	r3, #0
}
 800c696:	4618      	mov	r0, r3
 800c698:	3708      	adds	r7, #8
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	200009a8 	.word	0x200009a8

0800c6a4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b084      	sub	sp, #16
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7f7 fafa 	bl	8003cb4 <HAL_HCD_Start>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c6c4:	7bfb      	ldrb	r3, [r7, #15]
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f000 f95e 	bl	800c988 <USBH_Get_USB_Status>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3710      	adds	r7, #16
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}

0800c6da <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b084      	sub	sp, #16
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f7f7 fb02 	bl	8003cfa <HAL_HCD_Stop>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c6fa:	7bfb      	ldrb	r3, [r7, #15]
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f000 f943 	bl	800c988 <USBH_Get_USB_Status>
 800c702:	4603      	mov	r3, r0
 800c704:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c706:	7bbb      	ldrb	r3, [r7, #14]
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3710      	adds	r7, #16
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c718:	2301      	movs	r3, #1
 800c71a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c722:	4618      	mov	r0, r3
 800c724:	f7f7 fb4c 	bl	8003dc0 <HAL_HCD_GetCurrentSpeed>
 800c728:	4603      	mov	r3, r0
 800c72a:	2b02      	cmp	r3, #2
 800c72c:	d00c      	beq.n	800c748 <USBH_LL_GetSpeed+0x38>
 800c72e:	2b02      	cmp	r3, #2
 800c730:	d80d      	bhi.n	800c74e <USBH_LL_GetSpeed+0x3e>
 800c732:	2b00      	cmp	r3, #0
 800c734:	d002      	beq.n	800c73c <USBH_LL_GetSpeed+0x2c>
 800c736:	2b01      	cmp	r3, #1
 800c738:	d003      	beq.n	800c742 <USBH_LL_GetSpeed+0x32>
 800c73a:	e008      	b.n	800c74e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c73c:	2300      	movs	r3, #0
 800c73e:	73fb      	strb	r3, [r7, #15]
    break;
 800c740:	e008      	b.n	800c754 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c742:	2301      	movs	r3, #1
 800c744:	73fb      	strb	r3, [r7, #15]
    break;
 800c746:	e005      	b.n	800c754 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c748:	2302      	movs	r3, #2
 800c74a:	73fb      	strb	r3, [r7, #15]
    break;
 800c74c:	e002      	b.n	800c754 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c74e:	2301      	movs	r3, #1
 800c750:	73fb      	strb	r3, [r7, #15]
    break;
 800c752:	bf00      	nop
  }
  return  speed;
 800c754:	7bfb      	ldrb	r3, [r7, #15]
}
 800c756:	4618      	mov	r0, r3
 800c758:	3710      	adds	r7, #16
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}

0800c75e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c75e:	b580      	push	{r7, lr}
 800c760:	b084      	sub	sp, #16
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c766:	2300      	movs	r3, #0
 800c768:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c76a:	2300      	movs	r3, #0
 800c76c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c774:	4618      	mov	r0, r3
 800c776:	f7f7 fadd 	bl	8003d34 <HAL_HCD_ResetPort>
 800c77a:	4603      	mov	r3, r0
 800c77c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c77e:	7bfb      	ldrb	r3, [r7, #15]
 800c780:	4618      	mov	r0, r3
 800c782:	f000 f901 	bl	800c988 <USBH_Get_USB_Status>
 800c786:	4603      	mov	r3, r0
 800c788:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c78a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3710      	adds	r7, #16
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	460b      	mov	r3, r1
 800c79e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c7a6:	78fa      	ldrb	r2, [r7, #3]
 800c7a8:	4611      	mov	r1, r2
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7f7 fae5 	bl	8003d7a <HAL_HCD_HC_GetXferCount>
 800c7b0:	4603      	mov	r3, r0
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3708      	adds	r7, #8
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}

0800c7ba <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c7ba:	b590      	push	{r4, r7, lr}
 800c7bc:	b089      	sub	sp, #36	; 0x24
 800c7be:	af04      	add	r7, sp, #16
 800c7c0:	6078      	str	r0, [r7, #4]
 800c7c2:	4608      	mov	r0, r1
 800c7c4:	4611      	mov	r1, r2
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	70fb      	strb	r3, [r7, #3]
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	70bb      	strb	r3, [r7, #2]
 800c7d0:	4613      	mov	r3, r2
 800c7d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c7e2:	787c      	ldrb	r4, [r7, #1]
 800c7e4:	78ba      	ldrb	r2, [r7, #2]
 800c7e6:	78f9      	ldrb	r1, [r7, #3]
 800c7e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c7ea:	9302      	str	r3, [sp, #8]
 800c7ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c7f0:	9301      	str	r3, [sp, #4]
 800c7f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c7f6:	9300      	str	r3, [sp, #0]
 800c7f8:	4623      	mov	r3, r4
 800c7fa:	f7f6 fed1 	bl	80035a0 <HAL_HCD_HC_Init>
 800c7fe:	4603      	mov	r3, r0
 800c800:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c802:	7bfb      	ldrb	r3, [r7, #15]
 800c804:	4618      	mov	r0, r3
 800c806:	f000 f8bf 	bl	800c988 <USBH_Get_USB_Status>
 800c80a:	4603      	mov	r3, r0
 800c80c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c80e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c810:	4618      	mov	r0, r3
 800c812:	3714      	adds	r7, #20
 800c814:	46bd      	mov	sp, r7
 800c816:	bd90      	pop	{r4, r7, pc}

0800c818 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	460b      	mov	r3, r1
 800c822:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c824:	2300      	movs	r3, #0
 800c826:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c828:	2300      	movs	r3, #0
 800c82a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c832:	78fa      	ldrb	r2, [r7, #3]
 800c834:	4611      	mov	r1, r2
 800c836:	4618      	mov	r0, r3
 800c838:	f7f6 ff6a 	bl	8003710 <HAL_HCD_HC_Halt>
 800c83c:	4603      	mov	r3, r0
 800c83e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c840:	7bfb      	ldrb	r3, [r7, #15]
 800c842:	4618      	mov	r0, r3
 800c844:	f000 f8a0 	bl	800c988 <USBH_Get_USB_Status>
 800c848:	4603      	mov	r3, r0
 800c84a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c84c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3710      	adds	r7, #16
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}

0800c856 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c856:	b590      	push	{r4, r7, lr}
 800c858:	b089      	sub	sp, #36	; 0x24
 800c85a:	af04      	add	r7, sp, #16
 800c85c:	6078      	str	r0, [r7, #4]
 800c85e:	4608      	mov	r0, r1
 800c860:	4611      	mov	r1, r2
 800c862:	461a      	mov	r2, r3
 800c864:	4603      	mov	r3, r0
 800c866:	70fb      	strb	r3, [r7, #3]
 800c868:	460b      	mov	r3, r1
 800c86a:	70bb      	strb	r3, [r7, #2]
 800c86c:	4613      	mov	r3, r2
 800c86e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c870:	2300      	movs	r3, #0
 800c872:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c874:	2300      	movs	r3, #0
 800c876:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c87e:	787c      	ldrb	r4, [r7, #1]
 800c880:	78ba      	ldrb	r2, [r7, #2]
 800c882:	78f9      	ldrb	r1, [r7, #3]
 800c884:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c888:	9303      	str	r3, [sp, #12]
 800c88a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c88c:	9302      	str	r3, [sp, #8]
 800c88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c890:	9301      	str	r3, [sp, #4]
 800c892:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c896:	9300      	str	r3, [sp, #0]
 800c898:	4623      	mov	r3, r4
 800c89a:	f7f6 ff5d 	bl	8003758 <HAL_HCD_HC_SubmitRequest>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c8a2:	7bfb      	ldrb	r3, [r7, #15]
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f000 f86f 	bl	800c988 <USBH_Get_USB_Status>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3714      	adds	r7, #20
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd90      	pop	{r4, r7, pc}

0800c8b8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	460b      	mov	r3, r1
 800c8c2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c8ca:	78fa      	ldrb	r2, [r7, #3]
 800c8cc:	4611      	mov	r1, r2
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7f7 fa3e 	bl	8003d50 <HAL_HCD_HC_GetURBState>
 800c8d4:	4603      	mov	r3, r0
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3708      	adds	r7, #8
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c8de:	b580      	push	{r7, lr}
 800c8e0:	b082      	sub	sp, #8
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	d103      	bne.n	800c8fc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c8f4:	78fb      	ldrb	r3, [r7, #3]
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f000 f872 	bl	800c9e0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c8fc:	20c8      	movs	r0, #200	; 0xc8
 800c8fe:	f7f5 ff81 	bl	8002804 <HAL_Delay>
  return USBH_OK;
 800c902:	2300      	movs	r3, #0
}
 800c904:	4618      	mov	r0, r3
 800c906:	3708      	adds	r7, #8
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c90c:	b480      	push	{r7}
 800c90e:	b085      	sub	sp, #20
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	460b      	mov	r3, r1
 800c916:	70fb      	strb	r3, [r7, #3]
 800c918:	4613      	mov	r3, r2
 800c91a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c922:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c924:	78fa      	ldrb	r2, [r7, #3]
 800c926:	68f9      	ldr	r1, [r7, #12]
 800c928:	4613      	mov	r3, r2
 800c92a:	011b      	lsls	r3, r3, #4
 800c92c:	1a9b      	subs	r3, r3, r2
 800c92e:	009b      	lsls	r3, r3, #2
 800c930:	440b      	add	r3, r1
 800c932:	3317      	adds	r3, #23
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d00a      	beq.n	800c950 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c93a:	78fa      	ldrb	r2, [r7, #3]
 800c93c:	68f9      	ldr	r1, [r7, #12]
 800c93e:	4613      	mov	r3, r2
 800c940:	011b      	lsls	r3, r3, #4
 800c942:	1a9b      	subs	r3, r3, r2
 800c944:	009b      	lsls	r3, r3, #2
 800c946:	440b      	add	r3, r1
 800c948:	333c      	adds	r3, #60	; 0x3c
 800c94a:	78ba      	ldrb	r2, [r7, #2]
 800c94c:	701a      	strb	r2, [r3, #0]
 800c94e:	e009      	b.n	800c964 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c950:	78fa      	ldrb	r2, [r7, #3]
 800c952:	68f9      	ldr	r1, [r7, #12]
 800c954:	4613      	mov	r3, r2
 800c956:	011b      	lsls	r3, r3, #4
 800c958:	1a9b      	subs	r3, r3, r2
 800c95a:	009b      	lsls	r3, r3, #2
 800c95c:	440b      	add	r3, r1
 800c95e:	333d      	adds	r3, #61	; 0x3d
 800c960:	78ba      	ldrb	r2, [r7, #2]
 800c962:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c964:	2300      	movs	r3, #0
}
 800c966:	4618      	mov	r0, r3
 800c968:	3714      	adds	r7, #20
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr

0800c972 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c972:	b580      	push	{r7, lr}
 800c974:	b082      	sub	sp, #8
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f7f5 ff42 	bl	8002804 <HAL_Delay>
}
 800c980:	bf00      	nop
 800c982:	3708      	adds	r7, #8
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c988:	b480      	push	{r7}
 800c98a:	b085      	sub	sp, #20
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	4603      	mov	r3, r0
 800c990:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c992:	2300      	movs	r3, #0
 800c994:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c996:	79fb      	ldrb	r3, [r7, #7]
 800c998:	2b03      	cmp	r3, #3
 800c99a:	d817      	bhi.n	800c9cc <USBH_Get_USB_Status+0x44>
 800c99c:	a201      	add	r2, pc, #4	; (adr r2, 800c9a4 <USBH_Get_USB_Status+0x1c>)
 800c99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9a2:	bf00      	nop
 800c9a4:	0800c9b5 	.word	0x0800c9b5
 800c9a8:	0800c9bb 	.word	0x0800c9bb
 800c9ac:	0800c9c1 	.word	0x0800c9c1
 800c9b0:	0800c9c7 	.word	0x0800c9c7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	73fb      	strb	r3, [r7, #15]
    break;
 800c9b8:	e00b      	b.n	800c9d2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c9ba:	2302      	movs	r3, #2
 800c9bc:	73fb      	strb	r3, [r7, #15]
    break;
 800c9be:	e008      	b.n	800c9d2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	73fb      	strb	r3, [r7, #15]
    break;
 800c9c4:	e005      	b.n	800c9d2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c9c6:	2302      	movs	r3, #2
 800c9c8:	73fb      	strb	r3, [r7, #15]
    break;
 800c9ca:	e002      	b.n	800c9d2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c9cc:	2302      	movs	r3, #2
 800c9ce:	73fb      	strb	r3, [r7, #15]
    break;
 800c9d0:	bf00      	nop
  }
  return usb_status;
 800c9d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3714      	adds	r7, #20
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr

0800c9e0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c9ea:	79fb      	ldrb	r3, [r7, #7]
 800c9ec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c9ee:	79fb      	ldrb	r3, [r7, #7]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d102      	bne.n	800c9fa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	73fb      	strb	r3, [r7, #15]
 800c9f8:	e001      	b.n	800c9fe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ca00:	461a      	mov	r2, r3
 800ca02:	2101      	movs	r1, #1
 800ca04:	4803      	ldr	r0, [pc, #12]	; (800ca14 <MX_DriverVbusFS+0x34>)
 800ca06:	f7f6 fd4b 	bl	80034a0 <HAL_GPIO_WritePin>
}
 800ca0a:	bf00      	nop
 800ca0c:	3710      	adds	r7, #16
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}
 800ca12:	bf00      	nop
 800ca14:	40020800 	.word	0x40020800

0800ca18 <atof>:
 800ca18:	2100      	movs	r1, #0
 800ca1a:	f000 becf 	b.w	800d7bc <strtod>
	...

0800ca20 <malloc>:
 800ca20:	4b02      	ldr	r3, [pc, #8]	; (800ca2c <malloc+0xc>)
 800ca22:	4601      	mov	r1, r0
 800ca24:	6818      	ldr	r0, [r3, #0]
 800ca26:	f000 b82b 	b.w	800ca80 <_malloc_r>
 800ca2a:	bf00      	nop
 800ca2c:	20000200 	.word	0x20000200

0800ca30 <free>:
 800ca30:	4b02      	ldr	r3, [pc, #8]	; (800ca3c <free+0xc>)
 800ca32:	4601      	mov	r1, r0
 800ca34:	6818      	ldr	r0, [r3, #0]
 800ca36:	f002 bda5 	b.w	800f584 <_free_r>
 800ca3a:	bf00      	nop
 800ca3c:	20000200 	.word	0x20000200

0800ca40 <sbrk_aligned>:
 800ca40:	b570      	push	{r4, r5, r6, lr}
 800ca42:	4e0e      	ldr	r6, [pc, #56]	; (800ca7c <sbrk_aligned+0x3c>)
 800ca44:	460c      	mov	r4, r1
 800ca46:	6831      	ldr	r1, [r6, #0]
 800ca48:	4605      	mov	r5, r0
 800ca4a:	b911      	cbnz	r1, 800ca52 <sbrk_aligned+0x12>
 800ca4c:	f001 feb0 	bl	800e7b0 <_sbrk_r>
 800ca50:	6030      	str	r0, [r6, #0]
 800ca52:	4621      	mov	r1, r4
 800ca54:	4628      	mov	r0, r5
 800ca56:	f001 feab 	bl	800e7b0 <_sbrk_r>
 800ca5a:	1c43      	adds	r3, r0, #1
 800ca5c:	d00a      	beq.n	800ca74 <sbrk_aligned+0x34>
 800ca5e:	1cc4      	adds	r4, r0, #3
 800ca60:	f024 0403 	bic.w	r4, r4, #3
 800ca64:	42a0      	cmp	r0, r4
 800ca66:	d007      	beq.n	800ca78 <sbrk_aligned+0x38>
 800ca68:	1a21      	subs	r1, r4, r0
 800ca6a:	4628      	mov	r0, r5
 800ca6c:	f001 fea0 	bl	800e7b0 <_sbrk_r>
 800ca70:	3001      	adds	r0, #1
 800ca72:	d101      	bne.n	800ca78 <sbrk_aligned+0x38>
 800ca74:	f04f 34ff 	mov.w	r4, #4294967295
 800ca78:	4620      	mov	r0, r4
 800ca7a:	bd70      	pop	{r4, r5, r6, pc}
 800ca7c:	20000d8c 	.word	0x20000d8c

0800ca80 <_malloc_r>:
 800ca80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca84:	1ccd      	adds	r5, r1, #3
 800ca86:	f025 0503 	bic.w	r5, r5, #3
 800ca8a:	3508      	adds	r5, #8
 800ca8c:	2d0c      	cmp	r5, #12
 800ca8e:	bf38      	it	cc
 800ca90:	250c      	movcc	r5, #12
 800ca92:	2d00      	cmp	r5, #0
 800ca94:	4607      	mov	r7, r0
 800ca96:	db01      	blt.n	800ca9c <_malloc_r+0x1c>
 800ca98:	42a9      	cmp	r1, r5
 800ca9a:	d905      	bls.n	800caa8 <_malloc_r+0x28>
 800ca9c:	230c      	movs	r3, #12
 800ca9e:	603b      	str	r3, [r7, #0]
 800caa0:	2600      	movs	r6, #0
 800caa2:	4630      	mov	r0, r6
 800caa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800caa8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cb7c <_malloc_r+0xfc>
 800caac:	f000 f868 	bl	800cb80 <__malloc_lock>
 800cab0:	f8d8 3000 	ldr.w	r3, [r8]
 800cab4:	461c      	mov	r4, r3
 800cab6:	bb5c      	cbnz	r4, 800cb10 <_malloc_r+0x90>
 800cab8:	4629      	mov	r1, r5
 800caba:	4638      	mov	r0, r7
 800cabc:	f7ff ffc0 	bl	800ca40 <sbrk_aligned>
 800cac0:	1c43      	adds	r3, r0, #1
 800cac2:	4604      	mov	r4, r0
 800cac4:	d155      	bne.n	800cb72 <_malloc_r+0xf2>
 800cac6:	f8d8 4000 	ldr.w	r4, [r8]
 800caca:	4626      	mov	r6, r4
 800cacc:	2e00      	cmp	r6, #0
 800cace:	d145      	bne.n	800cb5c <_malloc_r+0xdc>
 800cad0:	2c00      	cmp	r4, #0
 800cad2:	d048      	beq.n	800cb66 <_malloc_r+0xe6>
 800cad4:	6823      	ldr	r3, [r4, #0]
 800cad6:	4631      	mov	r1, r6
 800cad8:	4638      	mov	r0, r7
 800cada:	eb04 0903 	add.w	r9, r4, r3
 800cade:	f001 fe67 	bl	800e7b0 <_sbrk_r>
 800cae2:	4581      	cmp	r9, r0
 800cae4:	d13f      	bne.n	800cb66 <_malloc_r+0xe6>
 800cae6:	6821      	ldr	r1, [r4, #0]
 800cae8:	1a6d      	subs	r5, r5, r1
 800caea:	4629      	mov	r1, r5
 800caec:	4638      	mov	r0, r7
 800caee:	f7ff ffa7 	bl	800ca40 <sbrk_aligned>
 800caf2:	3001      	adds	r0, #1
 800caf4:	d037      	beq.n	800cb66 <_malloc_r+0xe6>
 800caf6:	6823      	ldr	r3, [r4, #0]
 800caf8:	442b      	add	r3, r5
 800cafa:	6023      	str	r3, [r4, #0]
 800cafc:	f8d8 3000 	ldr.w	r3, [r8]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d038      	beq.n	800cb76 <_malloc_r+0xf6>
 800cb04:	685a      	ldr	r2, [r3, #4]
 800cb06:	42a2      	cmp	r2, r4
 800cb08:	d12b      	bne.n	800cb62 <_malloc_r+0xe2>
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	605a      	str	r2, [r3, #4]
 800cb0e:	e00f      	b.n	800cb30 <_malloc_r+0xb0>
 800cb10:	6822      	ldr	r2, [r4, #0]
 800cb12:	1b52      	subs	r2, r2, r5
 800cb14:	d41f      	bmi.n	800cb56 <_malloc_r+0xd6>
 800cb16:	2a0b      	cmp	r2, #11
 800cb18:	d917      	bls.n	800cb4a <_malloc_r+0xca>
 800cb1a:	1961      	adds	r1, r4, r5
 800cb1c:	42a3      	cmp	r3, r4
 800cb1e:	6025      	str	r5, [r4, #0]
 800cb20:	bf18      	it	ne
 800cb22:	6059      	strne	r1, [r3, #4]
 800cb24:	6863      	ldr	r3, [r4, #4]
 800cb26:	bf08      	it	eq
 800cb28:	f8c8 1000 	streq.w	r1, [r8]
 800cb2c:	5162      	str	r2, [r4, r5]
 800cb2e:	604b      	str	r3, [r1, #4]
 800cb30:	4638      	mov	r0, r7
 800cb32:	f104 060b 	add.w	r6, r4, #11
 800cb36:	f000 f829 	bl	800cb8c <__malloc_unlock>
 800cb3a:	f026 0607 	bic.w	r6, r6, #7
 800cb3e:	1d23      	adds	r3, r4, #4
 800cb40:	1af2      	subs	r2, r6, r3
 800cb42:	d0ae      	beq.n	800caa2 <_malloc_r+0x22>
 800cb44:	1b9b      	subs	r3, r3, r6
 800cb46:	50a3      	str	r3, [r4, r2]
 800cb48:	e7ab      	b.n	800caa2 <_malloc_r+0x22>
 800cb4a:	42a3      	cmp	r3, r4
 800cb4c:	6862      	ldr	r2, [r4, #4]
 800cb4e:	d1dd      	bne.n	800cb0c <_malloc_r+0x8c>
 800cb50:	f8c8 2000 	str.w	r2, [r8]
 800cb54:	e7ec      	b.n	800cb30 <_malloc_r+0xb0>
 800cb56:	4623      	mov	r3, r4
 800cb58:	6864      	ldr	r4, [r4, #4]
 800cb5a:	e7ac      	b.n	800cab6 <_malloc_r+0x36>
 800cb5c:	4634      	mov	r4, r6
 800cb5e:	6876      	ldr	r6, [r6, #4]
 800cb60:	e7b4      	b.n	800cacc <_malloc_r+0x4c>
 800cb62:	4613      	mov	r3, r2
 800cb64:	e7cc      	b.n	800cb00 <_malloc_r+0x80>
 800cb66:	230c      	movs	r3, #12
 800cb68:	603b      	str	r3, [r7, #0]
 800cb6a:	4638      	mov	r0, r7
 800cb6c:	f000 f80e 	bl	800cb8c <__malloc_unlock>
 800cb70:	e797      	b.n	800caa2 <_malloc_r+0x22>
 800cb72:	6025      	str	r5, [r4, #0]
 800cb74:	e7dc      	b.n	800cb30 <_malloc_r+0xb0>
 800cb76:	605b      	str	r3, [r3, #4]
 800cb78:	deff      	udf	#255	; 0xff
 800cb7a:	bf00      	nop
 800cb7c:	20000d88 	.word	0x20000d88

0800cb80 <__malloc_lock>:
 800cb80:	4801      	ldr	r0, [pc, #4]	; (800cb88 <__malloc_lock+0x8>)
 800cb82:	f001 be62 	b.w	800e84a <__retarget_lock_acquire_recursive>
 800cb86:	bf00      	nop
 800cb88:	20000ed0 	.word	0x20000ed0

0800cb8c <__malloc_unlock>:
 800cb8c:	4801      	ldr	r0, [pc, #4]	; (800cb94 <__malloc_unlock+0x8>)
 800cb8e:	f001 be5d 	b.w	800e84c <__retarget_lock_release_recursive>
 800cb92:	bf00      	nop
 800cb94:	20000ed0 	.word	0x20000ed0

0800cb98 <sulp>:
 800cb98:	b570      	push	{r4, r5, r6, lr}
 800cb9a:	4604      	mov	r4, r0
 800cb9c:	460d      	mov	r5, r1
 800cb9e:	ec45 4b10 	vmov	d0, r4, r5
 800cba2:	4616      	mov	r6, r2
 800cba4:	f003 fc10 	bl	80103c8 <__ulp>
 800cba8:	ec51 0b10 	vmov	r0, r1, d0
 800cbac:	b17e      	cbz	r6, 800cbce <sulp+0x36>
 800cbae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cbb2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	dd09      	ble.n	800cbce <sulp+0x36>
 800cbba:	051b      	lsls	r3, r3, #20
 800cbbc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cbc0:	2400      	movs	r4, #0
 800cbc2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cbc6:	4622      	mov	r2, r4
 800cbc8:	462b      	mov	r3, r5
 800cbca:	f7f3 fd25 	bl	8000618 <__aeabi_dmul>
 800cbce:	bd70      	pop	{r4, r5, r6, pc}

0800cbd0 <_strtod_l>:
 800cbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbd4:	ed2d 8b02 	vpush	{d8}
 800cbd8:	b09b      	sub	sp, #108	; 0x6c
 800cbda:	4604      	mov	r4, r0
 800cbdc:	9213      	str	r2, [sp, #76]	; 0x4c
 800cbde:	2200      	movs	r2, #0
 800cbe0:	9216      	str	r2, [sp, #88]	; 0x58
 800cbe2:	460d      	mov	r5, r1
 800cbe4:	f04f 0800 	mov.w	r8, #0
 800cbe8:	f04f 0900 	mov.w	r9, #0
 800cbec:	460a      	mov	r2, r1
 800cbee:	9215      	str	r2, [sp, #84]	; 0x54
 800cbf0:	7811      	ldrb	r1, [r2, #0]
 800cbf2:	292b      	cmp	r1, #43	; 0x2b
 800cbf4:	d04c      	beq.n	800cc90 <_strtod_l+0xc0>
 800cbf6:	d83a      	bhi.n	800cc6e <_strtod_l+0x9e>
 800cbf8:	290d      	cmp	r1, #13
 800cbfa:	d834      	bhi.n	800cc66 <_strtod_l+0x96>
 800cbfc:	2908      	cmp	r1, #8
 800cbfe:	d834      	bhi.n	800cc6a <_strtod_l+0x9a>
 800cc00:	2900      	cmp	r1, #0
 800cc02:	d03d      	beq.n	800cc80 <_strtod_l+0xb0>
 800cc04:	2200      	movs	r2, #0
 800cc06:	920a      	str	r2, [sp, #40]	; 0x28
 800cc08:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800cc0a:	7832      	ldrb	r2, [r6, #0]
 800cc0c:	2a30      	cmp	r2, #48	; 0x30
 800cc0e:	f040 80b4 	bne.w	800cd7a <_strtod_l+0x1aa>
 800cc12:	7872      	ldrb	r2, [r6, #1]
 800cc14:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800cc18:	2a58      	cmp	r2, #88	; 0x58
 800cc1a:	d170      	bne.n	800ccfe <_strtod_l+0x12e>
 800cc1c:	9302      	str	r3, [sp, #8]
 800cc1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc20:	9301      	str	r3, [sp, #4]
 800cc22:	ab16      	add	r3, sp, #88	; 0x58
 800cc24:	9300      	str	r3, [sp, #0]
 800cc26:	4a8e      	ldr	r2, [pc, #568]	; (800ce60 <_strtod_l+0x290>)
 800cc28:	ab17      	add	r3, sp, #92	; 0x5c
 800cc2a:	a915      	add	r1, sp, #84	; 0x54
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	f002 fd5d 	bl	800f6ec <__gethex>
 800cc32:	f010 070f 	ands.w	r7, r0, #15
 800cc36:	4605      	mov	r5, r0
 800cc38:	d005      	beq.n	800cc46 <_strtod_l+0x76>
 800cc3a:	2f06      	cmp	r7, #6
 800cc3c:	d12a      	bne.n	800cc94 <_strtod_l+0xc4>
 800cc3e:	3601      	adds	r6, #1
 800cc40:	2300      	movs	r3, #0
 800cc42:	9615      	str	r6, [sp, #84]	; 0x54
 800cc44:	930a      	str	r3, [sp, #40]	; 0x28
 800cc46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	f040 857f 	bne.w	800d74c <_strtod_l+0xb7c>
 800cc4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc50:	b1db      	cbz	r3, 800cc8a <_strtod_l+0xba>
 800cc52:	4642      	mov	r2, r8
 800cc54:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cc58:	ec43 2b10 	vmov	d0, r2, r3
 800cc5c:	b01b      	add	sp, #108	; 0x6c
 800cc5e:	ecbd 8b02 	vpop	{d8}
 800cc62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc66:	2920      	cmp	r1, #32
 800cc68:	d1cc      	bne.n	800cc04 <_strtod_l+0x34>
 800cc6a:	3201      	adds	r2, #1
 800cc6c:	e7bf      	b.n	800cbee <_strtod_l+0x1e>
 800cc6e:	292d      	cmp	r1, #45	; 0x2d
 800cc70:	d1c8      	bne.n	800cc04 <_strtod_l+0x34>
 800cc72:	2101      	movs	r1, #1
 800cc74:	910a      	str	r1, [sp, #40]	; 0x28
 800cc76:	1c51      	adds	r1, r2, #1
 800cc78:	9115      	str	r1, [sp, #84]	; 0x54
 800cc7a:	7852      	ldrb	r2, [r2, #1]
 800cc7c:	2a00      	cmp	r2, #0
 800cc7e:	d1c3      	bne.n	800cc08 <_strtod_l+0x38>
 800cc80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cc82:	9515      	str	r5, [sp, #84]	; 0x54
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	f040 855f 	bne.w	800d748 <_strtod_l+0xb78>
 800cc8a:	4642      	mov	r2, r8
 800cc8c:	464b      	mov	r3, r9
 800cc8e:	e7e3      	b.n	800cc58 <_strtod_l+0x88>
 800cc90:	2100      	movs	r1, #0
 800cc92:	e7ef      	b.n	800cc74 <_strtod_l+0xa4>
 800cc94:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cc96:	b13a      	cbz	r2, 800cca8 <_strtod_l+0xd8>
 800cc98:	2135      	movs	r1, #53	; 0x35
 800cc9a:	a818      	add	r0, sp, #96	; 0x60
 800cc9c:	f003 fc91 	bl	80105c2 <__copybits>
 800cca0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cca2:	4620      	mov	r0, r4
 800cca4:	f003 f864 	bl	800fd70 <_Bfree>
 800cca8:	3f01      	subs	r7, #1
 800ccaa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ccac:	2f04      	cmp	r7, #4
 800ccae:	d806      	bhi.n	800ccbe <_strtod_l+0xee>
 800ccb0:	e8df f007 	tbb	[pc, r7]
 800ccb4:	201d0314 	.word	0x201d0314
 800ccb8:	14          	.byte	0x14
 800ccb9:	00          	.byte	0x00
 800ccba:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800ccbe:	05e9      	lsls	r1, r5, #23
 800ccc0:	bf48      	it	mi
 800ccc2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ccc6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ccca:	0d1b      	lsrs	r3, r3, #20
 800cccc:	051b      	lsls	r3, r3, #20
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d1b9      	bne.n	800cc46 <_strtod_l+0x76>
 800ccd2:	f001 fd8f 	bl	800e7f4 <__errno>
 800ccd6:	2322      	movs	r3, #34	; 0x22
 800ccd8:	6003      	str	r3, [r0, #0]
 800ccda:	e7b4      	b.n	800cc46 <_strtod_l+0x76>
 800ccdc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800cce0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cce4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cce8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ccec:	e7e7      	b.n	800ccbe <_strtod_l+0xee>
 800ccee:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ce68 <_strtod_l+0x298>
 800ccf2:	e7e4      	b.n	800ccbe <_strtod_l+0xee>
 800ccf4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ccf8:	f04f 38ff 	mov.w	r8, #4294967295
 800ccfc:	e7df      	b.n	800ccbe <_strtod_l+0xee>
 800ccfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd00:	1c5a      	adds	r2, r3, #1
 800cd02:	9215      	str	r2, [sp, #84]	; 0x54
 800cd04:	785b      	ldrb	r3, [r3, #1]
 800cd06:	2b30      	cmp	r3, #48	; 0x30
 800cd08:	d0f9      	beq.n	800ccfe <_strtod_l+0x12e>
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d09b      	beq.n	800cc46 <_strtod_l+0x76>
 800cd0e:	2301      	movs	r3, #1
 800cd10:	f04f 0a00 	mov.w	sl, #0
 800cd14:	9304      	str	r3, [sp, #16]
 800cd16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd18:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd1a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800cd1e:	46d3      	mov	fp, sl
 800cd20:	220a      	movs	r2, #10
 800cd22:	9815      	ldr	r0, [sp, #84]	; 0x54
 800cd24:	7806      	ldrb	r6, [r0, #0]
 800cd26:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800cd2a:	b2d9      	uxtb	r1, r3
 800cd2c:	2909      	cmp	r1, #9
 800cd2e:	d926      	bls.n	800cd7e <_strtod_l+0x1ae>
 800cd30:	494c      	ldr	r1, [pc, #304]	; (800ce64 <_strtod_l+0x294>)
 800cd32:	2201      	movs	r2, #1
 800cd34:	f001 fcf1 	bl	800e71a <strncmp>
 800cd38:	2800      	cmp	r0, #0
 800cd3a:	d030      	beq.n	800cd9e <_strtod_l+0x1ce>
 800cd3c:	2000      	movs	r0, #0
 800cd3e:	4632      	mov	r2, r6
 800cd40:	9005      	str	r0, [sp, #20]
 800cd42:	465e      	mov	r6, fp
 800cd44:	4603      	mov	r3, r0
 800cd46:	2a65      	cmp	r2, #101	; 0x65
 800cd48:	d001      	beq.n	800cd4e <_strtod_l+0x17e>
 800cd4a:	2a45      	cmp	r2, #69	; 0x45
 800cd4c:	d113      	bne.n	800cd76 <_strtod_l+0x1a6>
 800cd4e:	b91e      	cbnz	r6, 800cd58 <_strtod_l+0x188>
 800cd50:	9a04      	ldr	r2, [sp, #16]
 800cd52:	4302      	orrs	r2, r0
 800cd54:	d094      	beq.n	800cc80 <_strtod_l+0xb0>
 800cd56:	2600      	movs	r6, #0
 800cd58:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800cd5a:	1c6a      	adds	r2, r5, #1
 800cd5c:	9215      	str	r2, [sp, #84]	; 0x54
 800cd5e:	786a      	ldrb	r2, [r5, #1]
 800cd60:	2a2b      	cmp	r2, #43	; 0x2b
 800cd62:	d074      	beq.n	800ce4e <_strtod_l+0x27e>
 800cd64:	2a2d      	cmp	r2, #45	; 0x2d
 800cd66:	d078      	beq.n	800ce5a <_strtod_l+0x28a>
 800cd68:	f04f 0c00 	mov.w	ip, #0
 800cd6c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800cd70:	2909      	cmp	r1, #9
 800cd72:	d97f      	bls.n	800ce74 <_strtod_l+0x2a4>
 800cd74:	9515      	str	r5, [sp, #84]	; 0x54
 800cd76:	2700      	movs	r7, #0
 800cd78:	e09e      	b.n	800ceb8 <_strtod_l+0x2e8>
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	e7c8      	b.n	800cd10 <_strtod_l+0x140>
 800cd7e:	f1bb 0f08 	cmp.w	fp, #8
 800cd82:	bfd8      	it	le
 800cd84:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800cd86:	f100 0001 	add.w	r0, r0, #1
 800cd8a:	bfda      	itte	le
 800cd8c:	fb02 3301 	mlale	r3, r2, r1, r3
 800cd90:	9309      	strle	r3, [sp, #36]	; 0x24
 800cd92:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800cd96:	f10b 0b01 	add.w	fp, fp, #1
 800cd9a:	9015      	str	r0, [sp, #84]	; 0x54
 800cd9c:	e7c1      	b.n	800cd22 <_strtod_l+0x152>
 800cd9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cda0:	1c5a      	adds	r2, r3, #1
 800cda2:	9215      	str	r2, [sp, #84]	; 0x54
 800cda4:	785a      	ldrb	r2, [r3, #1]
 800cda6:	f1bb 0f00 	cmp.w	fp, #0
 800cdaa:	d037      	beq.n	800ce1c <_strtod_l+0x24c>
 800cdac:	9005      	str	r0, [sp, #20]
 800cdae:	465e      	mov	r6, fp
 800cdb0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800cdb4:	2b09      	cmp	r3, #9
 800cdb6:	d912      	bls.n	800cdde <_strtod_l+0x20e>
 800cdb8:	2301      	movs	r3, #1
 800cdba:	e7c4      	b.n	800cd46 <_strtod_l+0x176>
 800cdbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cdbe:	1c5a      	adds	r2, r3, #1
 800cdc0:	9215      	str	r2, [sp, #84]	; 0x54
 800cdc2:	785a      	ldrb	r2, [r3, #1]
 800cdc4:	3001      	adds	r0, #1
 800cdc6:	2a30      	cmp	r2, #48	; 0x30
 800cdc8:	d0f8      	beq.n	800cdbc <_strtod_l+0x1ec>
 800cdca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800cdce:	2b08      	cmp	r3, #8
 800cdd0:	f200 84c1 	bhi.w	800d756 <_strtod_l+0xb86>
 800cdd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cdd6:	9005      	str	r0, [sp, #20]
 800cdd8:	2000      	movs	r0, #0
 800cdda:	930b      	str	r3, [sp, #44]	; 0x2c
 800cddc:	4606      	mov	r6, r0
 800cdde:	3a30      	subs	r2, #48	; 0x30
 800cde0:	f100 0301 	add.w	r3, r0, #1
 800cde4:	d014      	beq.n	800ce10 <_strtod_l+0x240>
 800cde6:	9905      	ldr	r1, [sp, #20]
 800cde8:	4419      	add	r1, r3
 800cdea:	9105      	str	r1, [sp, #20]
 800cdec:	4633      	mov	r3, r6
 800cdee:	eb00 0c06 	add.w	ip, r0, r6
 800cdf2:	210a      	movs	r1, #10
 800cdf4:	4563      	cmp	r3, ip
 800cdf6:	d113      	bne.n	800ce20 <_strtod_l+0x250>
 800cdf8:	1833      	adds	r3, r6, r0
 800cdfa:	2b08      	cmp	r3, #8
 800cdfc:	f106 0601 	add.w	r6, r6, #1
 800ce00:	4406      	add	r6, r0
 800ce02:	dc1a      	bgt.n	800ce3a <_strtod_l+0x26a>
 800ce04:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce06:	230a      	movs	r3, #10
 800ce08:	fb03 2301 	mla	r3, r3, r1, r2
 800ce0c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce0e:	2300      	movs	r3, #0
 800ce10:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ce12:	1c51      	adds	r1, r2, #1
 800ce14:	9115      	str	r1, [sp, #84]	; 0x54
 800ce16:	7852      	ldrb	r2, [r2, #1]
 800ce18:	4618      	mov	r0, r3
 800ce1a:	e7c9      	b.n	800cdb0 <_strtod_l+0x1e0>
 800ce1c:	4658      	mov	r0, fp
 800ce1e:	e7d2      	b.n	800cdc6 <_strtod_l+0x1f6>
 800ce20:	2b08      	cmp	r3, #8
 800ce22:	f103 0301 	add.w	r3, r3, #1
 800ce26:	dc03      	bgt.n	800ce30 <_strtod_l+0x260>
 800ce28:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ce2a:	434f      	muls	r7, r1
 800ce2c:	9709      	str	r7, [sp, #36]	; 0x24
 800ce2e:	e7e1      	b.n	800cdf4 <_strtod_l+0x224>
 800ce30:	2b10      	cmp	r3, #16
 800ce32:	bfd8      	it	le
 800ce34:	fb01 fa0a 	mulle.w	sl, r1, sl
 800ce38:	e7dc      	b.n	800cdf4 <_strtod_l+0x224>
 800ce3a:	2e10      	cmp	r6, #16
 800ce3c:	bfdc      	itt	le
 800ce3e:	230a      	movle	r3, #10
 800ce40:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800ce44:	e7e3      	b.n	800ce0e <_strtod_l+0x23e>
 800ce46:	2300      	movs	r3, #0
 800ce48:	9305      	str	r3, [sp, #20]
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	e780      	b.n	800cd50 <_strtod_l+0x180>
 800ce4e:	f04f 0c00 	mov.w	ip, #0
 800ce52:	1caa      	adds	r2, r5, #2
 800ce54:	9215      	str	r2, [sp, #84]	; 0x54
 800ce56:	78aa      	ldrb	r2, [r5, #2]
 800ce58:	e788      	b.n	800cd6c <_strtod_l+0x19c>
 800ce5a:	f04f 0c01 	mov.w	ip, #1
 800ce5e:	e7f8      	b.n	800ce52 <_strtod_l+0x282>
 800ce60:	080138dc 	.word	0x080138dc
 800ce64:	080138d8 	.word	0x080138d8
 800ce68:	7ff00000 	.word	0x7ff00000
 800ce6c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ce6e:	1c51      	adds	r1, r2, #1
 800ce70:	9115      	str	r1, [sp, #84]	; 0x54
 800ce72:	7852      	ldrb	r2, [r2, #1]
 800ce74:	2a30      	cmp	r2, #48	; 0x30
 800ce76:	d0f9      	beq.n	800ce6c <_strtod_l+0x29c>
 800ce78:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ce7c:	2908      	cmp	r1, #8
 800ce7e:	f63f af7a 	bhi.w	800cd76 <_strtod_l+0x1a6>
 800ce82:	3a30      	subs	r2, #48	; 0x30
 800ce84:	9208      	str	r2, [sp, #32]
 800ce86:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ce88:	920c      	str	r2, [sp, #48]	; 0x30
 800ce8a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ce8c:	1c57      	adds	r7, r2, #1
 800ce8e:	9715      	str	r7, [sp, #84]	; 0x54
 800ce90:	7852      	ldrb	r2, [r2, #1]
 800ce92:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ce96:	f1be 0f09 	cmp.w	lr, #9
 800ce9a:	d938      	bls.n	800cf0e <_strtod_l+0x33e>
 800ce9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ce9e:	1a7f      	subs	r7, r7, r1
 800cea0:	2f08      	cmp	r7, #8
 800cea2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800cea6:	dc03      	bgt.n	800ceb0 <_strtod_l+0x2e0>
 800cea8:	9908      	ldr	r1, [sp, #32]
 800ceaa:	428f      	cmp	r7, r1
 800ceac:	bfa8      	it	ge
 800ceae:	460f      	movge	r7, r1
 800ceb0:	f1bc 0f00 	cmp.w	ip, #0
 800ceb4:	d000      	beq.n	800ceb8 <_strtod_l+0x2e8>
 800ceb6:	427f      	negs	r7, r7
 800ceb8:	2e00      	cmp	r6, #0
 800ceba:	d14f      	bne.n	800cf5c <_strtod_l+0x38c>
 800cebc:	9904      	ldr	r1, [sp, #16]
 800cebe:	4301      	orrs	r1, r0
 800cec0:	f47f aec1 	bne.w	800cc46 <_strtod_l+0x76>
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	f47f aedb 	bne.w	800cc80 <_strtod_l+0xb0>
 800ceca:	2a69      	cmp	r2, #105	; 0x69
 800cecc:	d029      	beq.n	800cf22 <_strtod_l+0x352>
 800cece:	dc26      	bgt.n	800cf1e <_strtod_l+0x34e>
 800ced0:	2a49      	cmp	r2, #73	; 0x49
 800ced2:	d026      	beq.n	800cf22 <_strtod_l+0x352>
 800ced4:	2a4e      	cmp	r2, #78	; 0x4e
 800ced6:	f47f aed3 	bne.w	800cc80 <_strtod_l+0xb0>
 800ceda:	499b      	ldr	r1, [pc, #620]	; (800d148 <_strtod_l+0x578>)
 800cedc:	a815      	add	r0, sp, #84	; 0x54
 800cede:	f002 fe45 	bl	800fb6c <__match>
 800cee2:	2800      	cmp	r0, #0
 800cee4:	f43f aecc 	beq.w	800cc80 <_strtod_l+0xb0>
 800cee8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ceea:	781b      	ldrb	r3, [r3, #0]
 800ceec:	2b28      	cmp	r3, #40	; 0x28
 800ceee:	d12f      	bne.n	800cf50 <_strtod_l+0x380>
 800cef0:	4996      	ldr	r1, [pc, #600]	; (800d14c <_strtod_l+0x57c>)
 800cef2:	aa18      	add	r2, sp, #96	; 0x60
 800cef4:	a815      	add	r0, sp, #84	; 0x54
 800cef6:	f002 fe4d 	bl	800fb94 <__hexnan>
 800cefa:	2805      	cmp	r0, #5
 800cefc:	d128      	bne.n	800cf50 <_strtod_l+0x380>
 800cefe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cf00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cf04:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800cf08:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800cf0c:	e69b      	b.n	800cc46 <_strtod_l+0x76>
 800cf0e:	9f08      	ldr	r7, [sp, #32]
 800cf10:	210a      	movs	r1, #10
 800cf12:	fb01 2107 	mla	r1, r1, r7, r2
 800cf16:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800cf1a:	9208      	str	r2, [sp, #32]
 800cf1c:	e7b5      	b.n	800ce8a <_strtod_l+0x2ba>
 800cf1e:	2a6e      	cmp	r2, #110	; 0x6e
 800cf20:	e7d9      	b.n	800ced6 <_strtod_l+0x306>
 800cf22:	498b      	ldr	r1, [pc, #556]	; (800d150 <_strtod_l+0x580>)
 800cf24:	a815      	add	r0, sp, #84	; 0x54
 800cf26:	f002 fe21 	bl	800fb6c <__match>
 800cf2a:	2800      	cmp	r0, #0
 800cf2c:	f43f aea8 	beq.w	800cc80 <_strtod_l+0xb0>
 800cf30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf32:	4988      	ldr	r1, [pc, #544]	; (800d154 <_strtod_l+0x584>)
 800cf34:	3b01      	subs	r3, #1
 800cf36:	a815      	add	r0, sp, #84	; 0x54
 800cf38:	9315      	str	r3, [sp, #84]	; 0x54
 800cf3a:	f002 fe17 	bl	800fb6c <__match>
 800cf3e:	b910      	cbnz	r0, 800cf46 <_strtod_l+0x376>
 800cf40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf42:	3301      	adds	r3, #1
 800cf44:	9315      	str	r3, [sp, #84]	; 0x54
 800cf46:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800d164 <_strtod_l+0x594>
 800cf4a:	f04f 0800 	mov.w	r8, #0
 800cf4e:	e67a      	b.n	800cc46 <_strtod_l+0x76>
 800cf50:	4881      	ldr	r0, [pc, #516]	; (800d158 <_strtod_l+0x588>)
 800cf52:	f001 fc8d 	bl	800e870 <nan>
 800cf56:	ec59 8b10 	vmov	r8, r9, d0
 800cf5a:	e674      	b.n	800cc46 <_strtod_l+0x76>
 800cf5c:	9b05      	ldr	r3, [sp, #20]
 800cf5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf60:	1afb      	subs	r3, r7, r3
 800cf62:	f1bb 0f00 	cmp.w	fp, #0
 800cf66:	bf08      	it	eq
 800cf68:	46b3      	moveq	fp, r6
 800cf6a:	2e10      	cmp	r6, #16
 800cf6c:	9308      	str	r3, [sp, #32]
 800cf6e:	4635      	mov	r5, r6
 800cf70:	bfa8      	it	ge
 800cf72:	2510      	movge	r5, #16
 800cf74:	f7f3 fad6 	bl	8000524 <__aeabi_ui2d>
 800cf78:	2e09      	cmp	r6, #9
 800cf7a:	4680      	mov	r8, r0
 800cf7c:	4689      	mov	r9, r1
 800cf7e:	dd13      	ble.n	800cfa8 <_strtod_l+0x3d8>
 800cf80:	4b76      	ldr	r3, [pc, #472]	; (800d15c <_strtod_l+0x58c>)
 800cf82:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cf86:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cf8a:	f7f3 fb45 	bl	8000618 <__aeabi_dmul>
 800cf8e:	4680      	mov	r8, r0
 800cf90:	4650      	mov	r0, sl
 800cf92:	4689      	mov	r9, r1
 800cf94:	f7f3 fac6 	bl	8000524 <__aeabi_ui2d>
 800cf98:	4602      	mov	r2, r0
 800cf9a:	460b      	mov	r3, r1
 800cf9c:	4640      	mov	r0, r8
 800cf9e:	4649      	mov	r1, r9
 800cfa0:	f7f3 f984 	bl	80002ac <__adddf3>
 800cfa4:	4680      	mov	r8, r0
 800cfa6:	4689      	mov	r9, r1
 800cfa8:	2e0f      	cmp	r6, #15
 800cfaa:	dc38      	bgt.n	800d01e <_strtod_l+0x44e>
 800cfac:	9b08      	ldr	r3, [sp, #32]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	f43f ae49 	beq.w	800cc46 <_strtod_l+0x76>
 800cfb4:	dd24      	ble.n	800d000 <_strtod_l+0x430>
 800cfb6:	2b16      	cmp	r3, #22
 800cfb8:	dc0b      	bgt.n	800cfd2 <_strtod_l+0x402>
 800cfba:	4968      	ldr	r1, [pc, #416]	; (800d15c <_strtod_l+0x58c>)
 800cfbc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cfc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfc4:	4642      	mov	r2, r8
 800cfc6:	464b      	mov	r3, r9
 800cfc8:	f7f3 fb26 	bl	8000618 <__aeabi_dmul>
 800cfcc:	4680      	mov	r8, r0
 800cfce:	4689      	mov	r9, r1
 800cfd0:	e639      	b.n	800cc46 <_strtod_l+0x76>
 800cfd2:	9a08      	ldr	r2, [sp, #32]
 800cfd4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	db20      	blt.n	800d01e <_strtod_l+0x44e>
 800cfdc:	4c5f      	ldr	r4, [pc, #380]	; (800d15c <_strtod_l+0x58c>)
 800cfde:	f1c6 060f 	rsb	r6, r6, #15
 800cfe2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800cfe6:	4642      	mov	r2, r8
 800cfe8:	464b      	mov	r3, r9
 800cfea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfee:	f7f3 fb13 	bl	8000618 <__aeabi_dmul>
 800cff2:	9b08      	ldr	r3, [sp, #32]
 800cff4:	1b9e      	subs	r6, r3, r6
 800cff6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800cffa:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cffe:	e7e3      	b.n	800cfc8 <_strtod_l+0x3f8>
 800d000:	9b08      	ldr	r3, [sp, #32]
 800d002:	3316      	adds	r3, #22
 800d004:	db0b      	blt.n	800d01e <_strtod_l+0x44e>
 800d006:	9b05      	ldr	r3, [sp, #20]
 800d008:	1bdf      	subs	r7, r3, r7
 800d00a:	4b54      	ldr	r3, [pc, #336]	; (800d15c <_strtod_l+0x58c>)
 800d00c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d010:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d014:	4640      	mov	r0, r8
 800d016:	4649      	mov	r1, r9
 800d018:	f7f3 fc28 	bl	800086c <__aeabi_ddiv>
 800d01c:	e7d6      	b.n	800cfcc <_strtod_l+0x3fc>
 800d01e:	9b08      	ldr	r3, [sp, #32]
 800d020:	1b75      	subs	r5, r6, r5
 800d022:	441d      	add	r5, r3
 800d024:	2d00      	cmp	r5, #0
 800d026:	dd70      	ble.n	800d10a <_strtod_l+0x53a>
 800d028:	f015 030f 	ands.w	r3, r5, #15
 800d02c:	d00a      	beq.n	800d044 <_strtod_l+0x474>
 800d02e:	494b      	ldr	r1, [pc, #300]	; (800d15c <_strtod_l+0x58c>)
 800d030:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d034:	4642      	mov	r2, r8
 800d036:	464b      	mov	r3, r9
 800d038:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d03c:	f7f3 faec 	bl	8000618 <__aeabi_dmul>
 800d040:	4680      	mov	r8, r0
 800d042:	4689      	mov	r9, r1
 800d044:	f035 050f 	bics.w	r5, r5, #15
 800d048:	d04d      	beq.n	800d0e6 <_strtod_l+0x516>
 800d04a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800d04e:	dd22      	ble.n	800d096 <_strtod_l+0x4c6>
 800d050:	2500      	movs	r5, #0
 800d052:	46ab      	mov	fp, r5
 800d054:	9509      	str	r5, [sp, #36]	; 0x24
 800d056:	9505      	str	r5, [sp, #20]
 800d058:	2322      	movs	r3, #34	; 0x22
 800d05a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800d164 <_strtod_l+0x594>
 800d05e:	6023      	str	r3, [r4, #0]
 800d060:	f04f 0800 	mov.w	r8, #0
 800d064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d066:	2b00      	cmp	r3, #0
 800d068:	f43f aded 	beq.w	800cc46 <_strtod_l+0x76>
 800d06c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d06e:	4620      	mov	r0, r4
 800d070:	f002 fe7e 	bl	800fd70 <_Bfree>
 800d074:	9905      	ldr	r1, [sp, #20]
 800d076:	4620      	mov	r0, r4
 800d078:	f002 fe7a 	bl	800fd70 <_Bfree>
 800d07c:	4659      	mov	r1, fp
 800d07e:	4620      	mov	r0, r4
 800d080:	f002 fe76 	bl	800fd70 <_Bfree>
 800d084:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d086:	4620      	mov	r0, r4
 800d088:	f002 fe72 	bl	800fd70 <_Bfree>
 800d08c:	4629      	mov	r1, r5
 800d08e:	4620      	mov	r0, r4
 800d090:	f002 fe6e 	bl	800fd70 <_Bfree>
 800d094:	e5d7      	b.n	800cc46 <_strtod_l+0x76>
 800d096:	4b32      	ldr	r3, [pc, #200]	; (800d160 <_strtod_l+0x590>)
 800d098:	9304      	str	r3, [sp, #16]
 800d09a:	2300      	movs	r3, #0
 800d09c:	112d      	asrs	r5, r5, #4
 800d09e:	4640      	mov	r0, r8
 800d0a0:	4649      	mov	r1, r9
 800d0a2:	469a      	mov	sl, r3
 800d0a4:	2d01      	cmp	r5, #1
 800d0a6:	dc21      	bgt.n	800d0ec <_strtod_l+0x51c>
 800d0a8:	b10b      	cbz	r3, 800d0ae <_strtod_l+0x4de>
 800d0aa:	4680      	mov	r8, r0
 800d0ac:	4689      	mov	r9, r1
 800d0ae:	492c      	ldr	r1, [pc, #176]	; (800d160 <_strtod_l+0x590>)
 800d0b0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800d0b4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d0b8:	4642      	mov	r2, r8
 800d0ba:	464b      	mov	r3, r9
 800d0bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0c0:	f7f3 faaa 	bl	8000618 <__aeabi_dmul>
 800d0c4:	4b27      	ldr	r3, [pc, #156]	; (800d164 <_strtod_l+0x594>)
 800d0c6:	460a      	mov	r2, r1
 800d0c8:	400b      	ands	r3, r1
 800d0ca:	4927      	ldr	r1, [pc, #156]	; (800d168 <_strtod_l+0x598>)
 800d0cc:	428b      	cmp	r3, r1
 800d0ce:	4680      	mov	r8, r0
 800d0d0:	d8be      	bhi.n	800d050 <_strtod_l+0x480>
 800d0d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d0d6:	428b      	cmp	r3, r1
 800d0d8:	bf86      	itte	hi
 800d0da:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800d16c <_strtod_l+0x59c>
 800d0de:	f04f 38ff 	movhi.w	r8, #4294967295
 800d0e2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	9304      	str	r3, [sp, #16]
 800d0ea:	e07b      	b.n	800d1e4 <_strtod_l+0x614>
 800d0ec:	07ea      	lsls	r2, r5, #31
 800d0ee:	d505      	bpl.n	800d0fc <_strtod_l+0x52c>
 800d0f0:	9b04      	ldr	r3, [sp, #16]
 800d0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f6:	f7f3 fa8f 	bl	8000618 <__aeabi_dmul>
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	9a04      	ldr	r2, [sp, #16]
 800d0fe:	3208      	adds	r2, #8
 800d100:	f10a 0a01 	add.w	sl, sl, #1
 800d104:	106d      	asrs	r5, r5, #1
 800d106:	9204      	str	r2, [sp, #16]
 800d108:	e7cc      	b.n	800d0a4 <_strtod_l+0x4d4>
 800d10a:	d0ec      	beq.n	800d0e6 <_strtod_l+0x516>
 800d10c:	426d      	negs	r5, r5
 800d10e:	f015 020f 	ands.w	r2, r5, #15
 800d112:	d00a      	beq.n	800d12a <_strtod_l+0x55a>
 800d114:	4b11      	ldr	r3, [pc, #68]	; (800d15c <_strtod_l+0x58c>)
 800d116:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d11a:	4640      	mov	r0, r8
 800d11c:	4649      	mov	r1, r9
 800d11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d122:	f7f3 fba3 	bl	800086c <__aeabi_ddiv>
 800d126:	4680      	mov	r8, r0
 800d128:	4689      	mov	r9, r1
 800d12a:	112d      	asrs	r5, r5, #4
 800d12c:	d0db      	beq.n	800d0e6 <_strtod_l+0x516>
 800d12e:	2d1f      	cmp	r5, #31
 800d130:	dd1e      	ble.n	800d170 <_strtod_l+0x5a0>
 800d132:	2500      	movs	r5, #0
 800d134:	46ab      	mov	fp, r5
 800d136:	9509      	str	r5, [sp, #36]	; 0x24
 800d138:	9505      	str	r5, [sp, #20]
 800d13a:	2322      	movs	r3, #34	; 0x22
 800d13c:	f04f 0800 	mov.w	r8, #0
 800d140:	f04f 0900 	mov.w	r9, #0
 800d144:	6023      	str	r3, [r4, #0]
 800d146:	e78d      	b.n	800d064 <_strtod_l+0x494>
 800d148:	0801393d 	.word	0x0801393d
 800d14c:	080138f0 	.word	0x080138f0
 800d150:	08013935 	.word	0x08013935
 800d154:	08013974 	.word	0x08013974
 800d158:	08013d01 	.word	0x08013d01
 800d15c:	08013ae0 	.word	0x08013ae0
 800d160:	08013ab8 	.word	0x08013ab8
 800d164:	7ff00000 	.word	0x7ff00000
 800d168:	7ca00000 	.word	0x7ca00000
 800d16c:	7fefffff 	.word	0x7fefffff
 800d170:	f015 0310 	ands.w	r3, r5, #16
 800d174:	bf18      	it	ne
 800d176:	236a      	movne	r3, #106	; 0x6a
 800d178:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800d51c <_strtod_l+0x94c>
 800d17c:	9304      	str	r3, [sp, #16]
 800d17e:	4640      	mov	r0, r8
 800d180:	4649      	mov	r1, r9
 800d182:	2300      	movs	r3, #0
 800d184:	07ea      	lsls	r2, r5, #31
 800d186:	d504      	bpl.n	800d192 <_strtod_l+0x5c2>
 800d188:	e9da 2300 	ldrd	r2, r3, [sl]
 800d18c:	f7f3 fa44 	bl	8000618 <__aeabi_dmul>
 800d190:	2301      	movs	r3, #1
 800d192:	106d      	asrs	r5, r5, #1
 800d194:	f10a 0a08 	add.w	sl, sl, #8
 800d198:	d1f4      	bne.n	800d184 <_strtod_l+0x5b4>
 800d19a:	b10b      	cbz	r3, 800d1a0 <_strtod_l+0x5d0>
 800d19c:	4680      	mov	r8, r0
 800d19e:	4689      	mov	r9, r1
 800d1a0:	9b04      	ldr	r3, [sp, #16]
 800d1a2:	b1bb      	cbz	r3, 800d1d4 <_strtod_l+0x604>
 800d1a4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800d1a8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	4649      	mov	r1, r9
 800d1b0:	dd10      	ble.n	800d1d4 <_strtod_l+0x604>
 800d1b2:	2b1f      	cmp	r3, #31
 800d1b4:	f340 811e 	ble.w	800d3f4 <_strtod_l+0x824>
 800d1b8:	2b34      	cmp	r3, #52	; 0x34
 800d1ba:	bfde      	ittt	le
 800d1bc:	f04f 33ff 	movle.w	r3, #4294967295
 800d1c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d1c4:	4093      	lslle	r3, r2
 800d1c6:	f04f 0800 	mov.w	r8, #0
 800d1ca:	bfcc      	ite	gt
 800d1cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800d1d0:	ea03 0901 	andle.w	r9, r3, r1
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	4640      	mov	r0, r8
 800d1da:	4649      	mov	r1, r9
 800d1dc:	f7f3 fc84 	bl	8000ae8 <__aeabi_dcmpeq>
 800d1e0:	2800      	cmp	r0, #0
 800d1e2:	d1a6      	bne.n	800d132 <_strtod_l+0x562>
 800d1e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1e6:	9300      	str	r3, [sp, #0]
 800d1e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d1ea:	4633      	mov	r3, r6
 800d1ec:	465a      	mov	r2, fp
 800d1ee:	4620      	mov	r0, r4
 800d1f0:	f002 fe26 	bl	800fe40 <__s2b>
 800d1f4:	9009      	str	r0, [sp, #36]	; 0x24
 800d1f6:	2800      	cmp	r0, #0
 800d1f8:	f43f af2a 	beq.w	800d050 <_strtod_l+0x480>
 800d1fc:	9a08      	ldr	r2, [sp, #32]
 800d1fe:	9b05      	ldr	r3, [sp, #20]
 800d200:	2a00      	cmp	r2, #0
 800d202:	eba3 0307 	sub.w	r3, r3, r7
 800d206:	bfa8      	it	ge
 800d208:	2300      	movge	r3, #0
 800d20a:	930c      	str	r3, [sp, #48]	; 0x30
 800d20c:	2500      	movs	r5, #0
 800d20e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d212:	9312      	str	r3, [sp, #72]	; 0x48
 800d214:	46ab      	mov	fp, r5
 800d216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d218:	4620      	mov	r0, r4
 800d21a:	6859      	ldr	r1, [r3, #4]
 800d21c:	f002 fd68 	bl	800fcf0 <_Balloc>
 800d220:	9005      	str	r0, [sp, #20]
 800d222:	2800      	cmp	r0, #0
 800d224:	f43f af18 	beq.w	800d058 <_strtod_l+0x488>
 800d228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d22a:	691a      	ldr	r2, [r3, #16]
 800d22c:	3202      	adds	r2, #2
 800d22e:	f103 010c 	add.w	r1, r3, #12
 800d232:	0092      	lsls	r2, r2, #2
 800d234:	300c      	adds	r0, #12
 800d236:	f001 fb0a 	bl	800e84e <memcpy>
 800d23a:	ec49 8b10 	vmov	d0, r8, r9
 800d23e:	aa18      	add	r2, sp, #96	; 0x60
 800d240:	a917      	add	r1, sp, #92	; 0x5c
 800d242:	4620      	mov	r0, r4
 800d244:	f003 f930 	bl	80104a8 <__d2b>
 800d248:	ec49 8b18 	vmov	d8, r8, r9
 800d24c:	9016      	str	r0, [sp, #88]	; 0x58
 800d24e:	2800      	cmp	r0, #0
 800d250:	f43f af02 	beq.w	800d058 <_strtod_l+0x488>
 800d254:	2101      	movs	r1, #1
 800d256:	4620      	mov	r0, r4
 800d258:	f002 fe8a 	bl	800ff70 <__i2b>
 800d25c:	4683      	mov	fp, r0
 800d25e:	2800      	cmp	r0, #0
 800d260:	f43f aefa 	beq.w	800d058 <_strtod_l+0x488>
 800d264:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d266:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d268:	2e00      	cmp	r6, #0
 800d26a:	bfab      	itete	ge
 800d26c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800d26e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800d270:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d272:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800d276:	bfac      	ite	ge
 800d278:	eb06 0a03 	addge.w	sl, r6, r3
 800d27c:	1b9f      	sublt	r7, r3, r6
 800d27e:	9b04      	ldr	r3, [sp, #16]
 800d280:	1af6      	subs	r6, r6, r3
 800d282:	4416      	add	r6, r2
 800d284:	4ba0      	ldr	r3, [pc, #640]	; (800d508 <_strtod_l+0x938>)
 800d286:	3e01      	subs	r6, #1
 800d288:	429e      	cmp	r6, r3
 800d28a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d28e:	f280 80c4 	bge.w	800d41a <_strtod_l+0x84a>
 800d292:	1b9b      	subs	r3, r3, r6
 800d294:	2b1f      	cmp	r3, #31
 800d296:	eba2 0203 	sub.w	r2, r2, r3
 800d29a:	f04f 0101 	mov.w	r1, #1
 800d29e:	f300 80b0 	bgt.w	800d402 <_strtod_l+0x832>
 800d2a2:	fa01 f303 	lsl.w	r3, r1, r3
 800d2a6:	930e      	str	r3, [sp, #56]	; 0x38
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	930d      	str	r3, [sp, #52]	; 0x34
 800d2ac:	eb0a 0602 	add.w	r6, sl, r2
 800d2b0:	9b04      	ldr	r3, [sp, #16]
 800d2b2:	45b2      	cmp	sl, r6
 800d2b4:	4417      	add	r7, r2
 800d2b6:	441f      	add	r7, r3
 800d2b8:	4653      	mov	r3, sl
 800d2ba:	bfa8      	it	ge
 800d2bc:	4633      	movge	r3, r6
 800d2be:	42bb      	cmp	r3, r7
 800d2c0:	bfa8      	it	ge
 800d2c2:	463b      	movge	r3, r7
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	bfc2      	ittt	gt
 800d2c8:	1af6      	subgt	r6, r6, r3
 800d2ca:	1aff      	subgt	r7, r7, r3
 800d2cc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800d2d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	dd17      	ble.n	800d306 <_strtod_l+0x736>
 800d2d6:	4659      	mov	r1, fp
 800d2d8:	461a      	mov	r2, r3
 800d2da:	4620      	mov	r0, r4
 800d2dc:	f002 ff08 	bl	80100f0 <__pow5mult>
 800d2e0:	4683      	mov	fp, r0
 800d2e2:	2800      	cmp	r0, #0
 800d2e4:	f43f aeb8 	beq.w	800d058 <_strtod_l+0x488>
 800d2e8:	4601      	mov	r1, r0
 800d2ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d2ec:	4620      	mov	r0, r4
 800d2ee:	f002 fe55 	bl	800ff9c <__multiply>
 800d2f2:	900b      	str	r0, [sp, #44]	; 0x2c
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	f43f aeaf 	beq.w	800d058 <_strtod_l+0x488>
 800d2fa:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	f002 fd37 	bl	800fd70 <_Bfree>
 800d302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d304:	9316      	str	r3, [sp, #88]	; 0x58
 800d306:	2e00      	cmp	r6, #0
 800d308:	f300 808c 	bgt.w	800d424 <_strtod_l+0x854>
 800d30c:	9b08      	ldr	r3, [sp, #32]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	dd08      	ble.n	800d324 <_strtod_l+0x754>
 800d312:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d314:	9905      	ldr	r1, [sp, #20]
 800d316:	4620      	mov	r0, r4
 800d318:	f002 feea 	bl	80100f0 <__pow5mult>
 800d31c:	9005      	str	r0, [sp, #20]
 800d31e:	2800      	cmp	r0, #0
 800d320:	f43f ae9a 	beq.w	800d058 <_strtod_l+0x488>
 800d324:	2f00      	cmp	r7, #0
 800d326:	dd08      	ble.n	800d33a <_strtod_l+0x76a>
 800d328:	9905      	ldr	r1, [sp, #20]
 800d32a:	463a      	mov	r2, r7
 800d32c:	4620      	mov	r0, r4
 800d32e:	f002 ff39 	bl	80101a4 <__lshift>
 800d332:	9005      	str	r0, [sp, #20]
 800d334:	2800      	cmp	r0, #0
 800d336:	f43f ae8f 	beq.w	800d058 <_strtod_l+0x488>
 800d33a:	f1ba 0f00 	cmp.w	sl, #0
 800d33e:	dd08      	ble.n	800d352 <_strtod_l+0x782>
 800d340:	4659      	mov	r1, fp
 800d342:	4652      	mov	r2, sl
 800d344:	4620      	mov	r0, r4
 800d346:	f002 ff2d 	bl	80101a4 <__lshift>
 800d34a:	4683      	mov	fp, r0
 800d34c:	2800      	cmp	r0, #0
 800d34e:	f43f ae83 	beq.w	800d058 <_strtod_l+0x488>
 800d352:	9a05      	ldr	r2, [sp, #20]
 800d354:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d356:	4620      	mov	r0, r4
 800d358:	f002 ffac 	bl	80102b4 <__mdiff>
 800d35c:	4605      	mov	r5, r0
 800d35e:	2800      	cmp	r0, #0
 800d360:	f43f ae7a 	beq.w	800d058 <_strtod_l+0x488>
 800d364:	68c3      	ldr	r3, [r0, #12]
 800d366:	930b      	str	r3, [sp, #44]	; 0x2c
 800d368:	2300      	movs	r3, #0
 800d36a:	60c3      	str	r3, [r0, #12]
 800d36c:	4659      	mov	r1, fp
 800d36e:	f002 ff85 	bl	801027c <__mcmp>
 800d372:	2800      	cmp	r0, #0
 800d374:	da60      	bge.n	800d438 <_strtod_l+0x868>
 800d376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d378:	ea53 0308 	orrs.w	r3, r3, r8
 800d37c:	f040 8084 	bne.w	800d488 <_strtod_l+0x8b8>
 800d380:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d384:	2b00      	cmp	r3, #0
 800d386:	d17f      	bne.n	800d488 <_strtod_l+0x8b8>
 800d388:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d38c:	0d1b      	lsrs	r3, r3, #20
 800d38e:	051b      	lsls	r3, r3, #20
 800d390:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d394:	d978      	bls.n	800d488 <_strtod_l+0x8b8>
 800d396:	696b      	ldr	r3, [r5, #20]
 800d398:	b913      	cbnz	r3, 800d3a0 <_strtod_l+0x7d0>
 800d39a:	692b      	ldr	r3, [r5, #16]
 800d39c:	2b01      	cmp	r3, #1
 800d39e:	dd73      	ble.n	800d488 <_strtod_l+0x8b8>
 800d3a0:	4629      	mov	r1, r5
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	4620      	mov	r0, r4
 800d3a6:	f002 fefd 	bl	80101a4 <__lshift>
 800d3aa:	4659      	mov	r1, fp
 800d3ac:	4605      	mov	r5, r0
 800d3ae:	f002 ff65 	bl	801027c <__mcmp>
 800d3b2:	2800      	cmp	r0, #0
 800d3b4:	dd68      	ble.n	800d488 <_strtod_l+0x8b8>
 800d3b6:	9904      	ldr	r1, [sp, #16]
 800d3b8:	4a54      	ldr	r2, [pc, #336]	; (800d50c <_strtod_l+0x93c>)
 800d3ba:	464b      	mov	r3, r9
 800d3bc:	2900      	cmp	r1, #0
 800d3be:	f000 8084 	beq.w	800d4ca <_strtod_l+0x8fa>
 800d3c2:	ea02 0109 	and.w	r1, r2, r9
 800d3c6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d3ca:	dc7e      	bgt.n	800d4ca <_strtod_l+0x8fa>
 800d3cc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d3d0:	f77f aeb3 	ble.w	800d13a <_strtod_l+0x56a>
 800d3d4:	4b4e      	ldr	r3, [pc, #312]	; (800d510 <_strtod_l+0x940>)
 800d3d6:	4640      	mov	r0, r8
 800d3d8:	4649      	mov	r1, r9
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f7f3 f91c 	bl	8000618 <__aeabi_dmul>
 800d3e0:	4b4a      	ldr	r3, [pc, #296]	; (800d50c <_strtod_l+0x93c>)
 800d3e2:	400b      	ands	r3, r1
 800d3e4:	4680      	mov	r8, r0
 800d3e6:	4689      	mov	r9, r1
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	f47f ae3f 	bne.w	800d06c <_strtod_l+0x49c>
 800d3ee:	2322      	movs	r3, #34	; 0x22
 800d3f0:	6023      	str	r3, [r4, #0]
 800d3f2:	e63b      	b.n	800d06c <_strtod_l+0x49c>
 800d3f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3f8:	fa02 f303 	lsl.w	r3, r2, r3
 800d3fc:	ea03 0808 	and.w	r8, r3, r8
 800d400:	e6e8      	b.n	800d1d4 <_strtod_l+0x604>
 800d402:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d406:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d40a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d40e:	36e2      	adds	r6, #226	; 0xe2
 800d410:	fa01 f306 	lsl.w	r3, r1, r6
 800d414:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800d418:	e748      	b.n	800d2ac <_strtod_l+0x6dc>
 800d41a:	2100      	movs	r1, #0
 800d41c:	2301      	movs	r3, #1
 800d41e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800d422:	e743      	b.n	800d2ac <_strtod_l+0x6dc>
 800d424:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d426:	4632      	mov	r2, r6
 800d428:	4620      	mov	r0, r4
 800d42a:	f002 febb 	bl	80101a4 <__lshift>
 800d42e:	9016      	str	r0, [sp, #88]	; 0x58
 800d430:	2800      	cmp	r0, #0
 800d432:	f47f af6b 	bne.w	800d30c <_strtod_l+0x73c>
 800d436:	e60f      	b.n	800d058 <_strtod_l+0x488>
 800d438:	46ca      	mov	sl, r9
 800d43a:	d171      	bne.n	800d520 <_strtod_l+0x950>
 800d43c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d43e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d442:	b352      	cbz	r2, 800d49a <_strtod_l+0x8ca>
 800d444:	4a33      	ldr	r2, [pc, #204]	; (800d514 <_strtod_l+0x944>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d12a      	bne.n	800d4a0 <_strtod_l+0x8d0>
 800d44a:	9b04      	ldr	r3, [sp, #16]
 800d44c:	4641      	mov	r1, r8
 800d44e:	b1fb      	cbz	r3, 800d490 <_strtod_l+0x8c0>
 800d450:	4b2e      	ldr	r3, [pc, #184]	; (800d50c <_strtod_l+0x93c>)
 800d452:	ea09 0303 	and.w	r3, r9, r3
 800d456:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d45a:	f04f 32ff 	mov.w	r2, #4294967295
 800d45e:	d81a      	bhi.n	800d496 <_strtod_l+0x8c6>
 800d460:	0d1b      	lsrs	r3, r3, #20
 800d462:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d466:	fa02 f303 	lsl.w	r3, r2, r3
 800d46a:	4299      	cmp	r1, r3
 800d46c:	d118      	bne.n	800d4a0 <_strtod_l+0x8d0>
 800d46e:	4b2a      	ldr	r3, [pc, #168]	; (800d518 <_strtod_l+0x948>)
 800d470:	459a      	cmp	sl, r3
 800d472:	d102      	bne.n	800d47a <_strtod_l+0x8aa>
 800d474:	3101      	adds	r1, #1
 800d476:	f43f adef 	beq.w	800d058 <_strtod_l+0x488>
 800d47a:	4b24      	ldr	r3, [pc, #144]	; (800d50c <_strtod_l+0x93c>)
 800d47c:	ea0a 0303 	and.w	r3, sl, r3
 800d480:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800d484:	f04f 0800 	mov.w	r8, #0
 800d488:	9b04      	ldr	r3, [sp, #16]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d1a2      	bne.n	800d3d4 <_strtod_l+0x804>
 800d48e:	e5ed      	b.n	800d06c <_strtod_l+0x49c>
 800d490:	f04f 33ff 	mov.w	r3, #4294967295
 800d494:	e7e9      	b.n	800d46a <_strtod_l+0x89a>
 800d496:	4613      	mov	r3, r2
 800d498:	e7e7      	b.n	800d46a <_strtod_l+0x89a>
 800d49a:	ea53 0308 	orrs.w	r3, r3, r8
 800d49e:	d08a      	beq.n	800d3b6 <_strtod_l+0x7e6>
 800d4a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4a2:	b1e3      	cbz	r3, 800d4de <_strtod_l+0x90e>
 800d4a4:	ea13 0f0a 	tst.w	r3, sl
 800d4a8:	d0ee      	beq.n	800d488 <_strtod_l+0x8b8>
 800d4aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4ac:	9a04      	ldr	r2, [sp, #16]
 800d4ae:	4640      	mov	r0, r8
 800d4b0:	4649      	mov	r1, r9
 800d4b2:	b1c3      	cbz	r3, 800d4e6 <_strtod_l+0x916>
 800d4b4:	f7ff fb70 	bl	800cb98 <sulp>
 800d4b8:	4602      	mov	r2, r0
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	ec51 0b18 	vmov	r0, r1, d8
 800d4c0:	f7f2 fef4 	bl	80002ac <__adddf3>
 800d4c4:	4680      	mov	r8, r0
 800d4c6:	4689      	mov	r9, r1
 800d4c8:	e7de      	b.n	800d488 <_strtod_l+0x8b8>
 800d4ca:	4013      	ands	r3, r2
 800d4cc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d4d0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800d4d4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800d4d8:	f04f 38ff 	mov.w	r8, #4294967295
 800d4dc:	e7d4      	b.n	800d488 <_strtod_l+0x8b8>
 800d4de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4e0:	ea13 0f08 	tst.w	r3, r8
 800d4e4:	e7e0      	b.n	800d4a8 <_strtod_l+0x8d8>
 800d4e6:	f7ff fb57 	bl	800cb98 <sulp>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	ec51 0b18 	vmov	r0, r1, d8
 800d4f2:	f7f2 fed9 	bl	80002a8 <__aeabi_dsub>
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	4680      	mov	r8, r0
 800d4fc:	4689      	mov	r9, r1
 800d4fe:	f7f3 faf3 	bl	8000ae8 <__aeabi_dcmpeq>
 800d502:	2800      	cmp	r0, #0
 800d504:	d0c0      	beq.n	800d488 <_strtod_l+0x8b8>
 800d506:	e618      	b.n	800d13a <_strtod_l+0x56a>
 800d508:	fffffc02 	.word	0xfffffc02
 800d50c:	7ff00000 	.word	0x7ff00000
 800d510:	39500000 	.word	0x39500000
 800d514:	000fffff 	.word	0x000fffff
 800d518:	7fefffff 	.word	0x7fefffff
 800d51c:	08013908 	.word	0x08013908
 800d520:	4659      	mov	r1, fp
 800d522:	4628      	mov	r0, r5
 800d524:	f003 f81a 	bl	801055c <__ratio>
 800d528:	ec57 6b10 	vmov	r6, r7, d0
 800d52c:	ee10 0a10 	vmov	r0, s0
 800d530:	2200      	movs	r2, #0
 800d532:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d536:	4639      	mov	r1, r7
 800d538:	f7f3 faea 	bl	8000b10 <__aeabi_dcmple>
 800d53c:	2800      	cmp	r0, #0
 800d53e:	d071      	beq.n	800d624 <_strtod_l+0xa54>
 800d540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d542:	2b00      	cmp	r3, #0
 800d544:	d17c      	bne.n	800d640 <_strtod_l+0xa70>
 800d546:	f1b8 0f00 	cmp.w	r8, #0
 800d54a:	d15a      	bne.n	800d602 <_strtod_l+0xa32>
 800d54c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d550:	2b00      	cmp	r3, #0
 800d552:	d15d      	bne.n	800d610 <_strtod_l+0xa40>
 800d554:	4b90      	ldr	r3, [pc, #576]	; (800d798 <_strtod_l+0xbc8>)
 800d556:	2200      	movs	r2, #0
 800d558:	4630      	mov	r0, r6
 800d55a:	4639      	mov	r1, r7
 800d55c:	f7f3 face 	bl	8000afc <__aeabi_dcmplt>
 800d560:	2800      	cmp	r0, #0
 800d562:	d15c      	bne.n	800d61e <_strtod_l+0xa4e>
 800d564:	4630      	mov	r0, r6
 800d566:	4639      	mov	r1, r7
 800d568:	4b8c      	ldr	r3, [pc, #560]	; (800d79c <_strtod_l+0xbcc>)
 800d56a:	2200      	movs	r2, #0
 800d56c:	f7f3 f854 	bl	8000618 <__aeabi_dmul>
 800d570:	4606      	mov	r6, r0
 800d572:	460f      	mov	r7, r1
 800d574:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800d578:	9606      	str	r6, [sp, #24]
 800d57a:	9307      	str	r3, [sp, #28]
 800d57c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d580:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d584:	4b86      	ldr	r3, [pc, #536]	; (800d7a0 <_strtod_l+0xbd0>)
 800d586:	ea0a 0303 	and.w	r3, sl, r3
 800d58a:	930d      	str	r3, [sp, #52]	; 0x34
 800d58c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d58e:	4b85      	ldr	r3, [pc, #532]	; (800d7a4 <_strtod_l+0xbd4>)
 800d590:	429a      	cmp	r2, r3
 800d592:	f040 8090 	bne.w	800d6b6 <_strtod_l+0xae6>
 800d596:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800d59a:	ec49 8b10 	vmov	d0, r8, r9
 800d59e:	f002 ff13 	bl	80103c8 <__ulp>
 800d5a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d5a6:	ec51 0b10 	vmov	r0, r1, d0
 800d5aa:	f7f3 f835 	bl	8000618 <__aeabi_dmul>
 800d5ae:	4642      	mov	r2, r8
 800d5b0:	464b      	mov	r3, r9
 800d5b2:	f7f2 fe7b 	bl	80002ac <__adddf3>
 800d5b6:	460b      	mov	r3, r1
 800d5b8:	4979      	ldr	r1, [pc, #484]	; (800d7a0 <_strtod_l+0xbd0>)
 800d5ba:	4a7b      	ldr	r2, [pc, #492]	; (800d7a8 <_strtod_l+0xbd8>)
 800d5bc:	4019      	ands	r1, r3
 800d5be:	4291      	cmp	r1, r2
 800d5c0:	4680      	mov	r8, r0
 800d5c2:	d944      	bls.n	800d64e <_strtod_l+0xa7e>
 800d5c4:	ee18 2a90 	vmov	r2, s17
 800d5c8:	4b78      	ldr	r3, [pc, #480]	; (800d7ac <_strtod_l+0xbdc>)
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d104      	bne.n	800d5d8 <_strtod_l+0xa08>
 800d5ce:	ee18 3a10 	vmov	r3, s16
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	f43f ad40 	beq.w	800d058 <_strtod_l+0x488>
 800d5d8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800d7ac <_strtod_l+0xbdc>
 800d5dc:	f04f 38ff 	mov.w	r8, #4294967295
 800d5e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d5e2:	4620      	mov	r0, r4
 800d5e4:	f002 fbc4 	bl	800fd70 <_Bfree>
 800d5e8:	9905      	ldr	r1, [sp, #20]
 800d5ea:	4620      	mov	r0, r4
 800d5ec:	f002 fbc0 	bl	800fd70 <_Bfree>
 800d5f0:	4659      	mov	r1, fp
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	f002 fbbc 	bl	800fd70 <_Bfree>
 800d5f8:	4629      	mov	r1, r5
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	f002 fbb8 	bl	800fd70 <_Bfree>
 800d600:	e609      	b.n	800d216 <_strtod_l+0x646>
 800d602:	f1b8 0f01 	cmp.w	r8, #1
 800d606:	d103      	bne.n	800d610 <_strtod_l+0xa40>
 800d608:	f1b9 0f00 	cmp.w	r9, #0
 800d60c:	f43f ad95 	beq.w	800d13a <_strtod_l+0x56a>
 800d610:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800d768 <_strtod_l+0xb98>
 800d614:	4f60      	ldr	r7, [pc, #384]	; (800d798 <_strtod_l+0xbc8>)
 800d616:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d61a:	2600      	movs	r6, #0
 800d61c:	e7ae      	b.n	800d57c <_strtod_l+0x9ac>
 800d61e:	4f5f      	ldr	r7, [pc, #380]	; (800d79c <_strtod_l+0xbcc>)
 800d620:	2600      	movs	r6, #0
 800d622:	e7a7      	b.n	800d574 <_strtod_l+0x9a4>
 800d624:	4b5d      	ldr	r3, [pc, #372]	; (800d79c <_strtod_l+0xbcc>)
 800d626:	4630      	mov	r0, r6
 800d628:	4639      	mov	r1, r7
 800d62a:	2200      	movs	r2, #0
 800d62c:	f7f2 fff4 	bl	8000618 <__aeabi_dmul>
 800d630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d632:	4606      	mov	r6, r0
 800d634:	460f      	mov	r7, r1
 800d636:	2b00      	cmp	r3, #0
 800d638:	d09c      	beq.n	800d574 <_strtod_l+0x9a4>
 800d63a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d63e:	e79d      	b.n	800d57c <_strtod_l+0x9ac>
 800d640:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800d770 <_strtod_l+0xba0>
 800d644:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d648:	ec57 6b17 	vmov	r6, r7, d7
 800d64c:	e796      	b.n	800d57c <_strtod_l+0x9ac>
 800d64e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800d652:	9b04      	ldr	r3, [sp, #16]
 800d654:	46ca      	mov	sl, r9
 800d656:	2b00      	cmp	r3, #0
 800d658:	d1c2      	bne.n	800d5e0 <_strtod_l+0xa10>
 800d65a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d65e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d660:	0d1b      	lsrs	r3, r3, #20
 800d662:	051b      	lsls	r3, r3, #20
 800d664:	429a      	cmp	r2, r3
 800d666:	d1bb      	bne.n	800d5e0 <_strtod_l+0xa10>
 800d668:	4630      	mov	r0, r6
 800d66a:	4639      	mov	r1, r7
 800d66c:	f7f3 fb34 	bl	8000cd8 <__aeabi_d2lz>
 800d670:	f7f2 ffa4 	bl	80005bc <__aeabi_l2d>
 800d674:	4602      	mov	r2, r0
 800d676:	460b      	mov	r3, r1
 800d678:	4630      	mov	r0, r6
 800d67a:	4639      	mov	r1, r7
 800d67c:	f7f2 fe14 	bl	80002a8 <__aeabi_dsub>
 800d680:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d682:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d686:	ea43 0308 	orr.w	r3, r3, r8
 800d68a:	4313      	orrs	r3, r2
 800d68c:	4606      	mov	r6, r0
 800d68e:	460f      	mov	r7, r1
 800d690:	d054      	beq.n	800d73c <_strtod_l+0xb6c>
 800d692:	a339      	add	r3, pc, #228	; (adr r3, 800d778 <_strtod_l+0xba8>)
 800d694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d698:	f7f3 fa30 	bl	8000afc <__aeabi_dcmplt>
 800d69c:	2800      	cmp	r0, #0
 800d69e:	f47f ace5 	bne.w	800d06c <_strtod_l+0x49c>
 800d6a2:	a337      	add	r3, pc, #220	; (adr r3, 800d780 <_strtod_l+0xbb0>)
 800d6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a8:	4630      	mov	r0, r6
 800d6aa:	4639      	mov	r1, r7
 800d6ac:	f7f3 fa44 	bl	8000b38 <__aeabi_dcmpgt>
 800d6b0:	2800      	cmp	r0, #0
 800d6b2:	d095      	beq.n	800d5e0 <_strtod_l+0xa10>
 800d6b4:	e4da      	b.n	800d06c <_strtod_l+0x49c>
 800d6b6:	9b04      	ldr	r3, [sp, #16]
 800d6b8:	b333      	cbz	r3, 800d708 <_strtod_l+0xb38>
 800d6ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d6c0:	d822      	bhi.n	800d708 <_strtod_l+0xb38>
 800d6c2:	a331      	add	r3, pc, #196	; (adr r3, 800d788 <_strtod_l+0xbb8>)
 800d6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c8:	4630      	mov	r0, r6
 800d6ca:	4639      	mov	r1, r7
 800d6cc:	f7f3 fa20 	bl	8000b10 <__aeabi_dcmple>
 800d6d0:	b1a0      	cbz	r0, 800d6fc <_strtod_l+0xb2c>
 800d6d2:	4639      	mov	r1, r7
 800d6d4:	4630      	mov	r0, r6
 800d6d6:	f7f3 fa77 	bl	8000bc8 <__aeabi_d2uiz>
 800d6da:	2801      	cmp	r0, #1
 800d6dc:	bf38      	it	cc
 800d6de:	2001      	movcc	r0, #1
 800d6e0:	f7f2 ff20 	bl	8000524 <__aeabi_ui2d>
 800d6e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6e6:	4606      	mov	r6, r0
 800d6e8:	460f      	mov	r7, r1
 800d6ea:	bb23      	cbnz	r3, 800d736 <_strtod_l+0xb66>
 800d6ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d6f0:	9010      	str	r0, [sp, #64]	; 0x40
 800d6f2:	9311      	str	r3, [sp, #68]	; 0x44
 800d6f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d6f8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d6fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d6fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d700:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d704:	1a9b      	subs	r3, r3, r2
 800d706:	930f      	str	r3, [sp, #60]	; 0x3c
 800d708:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d70c:	eeb0 0a48 	vmov.f32	s0, s16
 800d710:	eef0 0a68 	vmov.f32	s1, s17
 800d714:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d718:	f002 fe56 	bl	80103c8 <__ulp>
 800d71c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d720:	ec53 2b10 	vmov	r2, r3, d0
 800d724:	f7f2 ff78 	bl	8000618 <__aeabi_dmul>
 800d728:	ec53 2b18 	vmov	r2, r3, d8
 800d72c:	f7f2 fdbe 	bl	80002ac <__adddf3>
 800d730:	4680      	mov	r8, r0
 800d732:	4689      	mov	r9, r1
 800d734:	e78d      	b.n	800d652 <_strtod_l+0xa82>
 800d736:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800d73a:	e7db      	b.n	800d6f4 <_strtod_l+0xb24>
 800d73c:	a314      	add	r3, pc, #80	; (adr r3, 800d790 <_strtod_l+0xbc0>)
 800d73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d742:	f7f3 f9db 	bl	8000afc <__aeabi_dcmplt>
 800d746:	e7b3      	b.n	800d6b0 <_strtod_l+0xae0>
 800d748:	2300      	movs	r3, #0
 800d74a:	930a      	str	r3, [sp, #40]	; 0x28
 800d74c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d74e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d750:	6013      	str	r3, [r2, #0]
 800d752:	f7ff ba7c 	b.w	800cc4e <_strtod_l+0x7e>
 800d756:	2a65      	cmp	r2, #101	; 0x65
 800d758:	f43f ab75 	beq.w	800ce46 <_strtod_l+0x276>
 800d75c:	2a45      	cmp	r2, #69	; 0x45
 800d75e:	f43f ab72 	beq.w	800ce46 <_strtod_l+0x276>
 800d762:	2301      	movs	r3, #1
 800d764:	f7ff bbaa 	b.w	800cebc <_strtod_l+0x2ec>
 800d768:	00000000 	.word	0x00000000
 800d76c:	bff00000 	.word	0xbff00000
 800d770:	00000000 	.word	0x00000000
 800d774:	3ff00000 	.word	0x3ff00000
 800d778:	94a03595 	.word	0x94a03595
 800d77c:	3fdfffff 	.word	0x3fdfffff
 800d780:	35afe535 	.word	0x35afe535
 800d784:	3fe00000 	.word	0x3fe00000
 800d788:	ffc00000 	.word	0xffc00000
 800d78c:	41dfffff 	.word	0x41dfffff
 800d790:	94a03595 	.word	0x94a03595
 800d794:	3fcfffff 	.word	0x3fcfffff
 800d798:	3ff00000 	.word	0x3ff00000
 800d79c:	3fe00000 	.word	0x3fe00000
 800d7a0:	7ff00000 	.word	0x7ff00000
 800d7a4:	7fe00000 	.word	0x7fe00000
 800d7a8:	7c9fffff 	.word	0x7c9fffff
 800d7ac:	7fefffff 	.word	0x7fefffff

0800d7b0 <_strtod_r>:
 800d7b0:	4b01      	ldr	r3, [pc, #4]	; (800d7b8 <_strtod_r+0x8>)
 800d7b2:	f7ff ba0d 	b.w	800cbd0 <_strtod_l>
 800d7b6:	bf00      	nop
 800d7b8:	20000048 	.word	0x20000048

0800d7bc <strtod>:
 800d7bc:	460a      	mov	r2, r1
 800d7be:	4601      	mov	r1, r0
 800d7c0:	4802      	ldr	r0, [pc, #8]	; (800d7cc <strtod+0x10>)
 800d7c2:	4b03      	ldr	r3, [pc, #12]	; (800d7d0 <strtod+0x14>)
 800d7c4:	6800      	ldr	r0, [r0, #0]
 800d7c6:	f7ff ba03 	b.w	800cbd0 <_strtod_l>
 800d7ca:	bf00      	nop
 800d7cc:	20000200 	.word	0x20000200
 800d7d0:	20000048 	.word	0x20000048

0800d7d4 <__cvt>:
 800d7d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7d8:	ec55 4b10 	vmov	r4, r5, d0
 800d7dc:	2d00      	cmp	r5, #0
 800d7de:	460e      	mov	r6, r1
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	462b      	mov	r3, r5
 800d7e4:	bfbb      	ittet	lt
 800d7e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d7ea:	461d      	movlt	r5, r3
 800d7ec:	2300      	movge	r3, #0
 800d7ee:	232d      	movlt	r3, #45	; 0x2d
 800d7f0:	700b      	strb	r3, [r1, #0]
 800d7f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d7f8:	4691      	mov	r9, r2
 800d7fa:	f023 0820 	bic.w	r8, r3, #32
 800d7fe:	bfbc      	itt	lt
 800d800:	4622      	movlt	r2, r4
 800d802:	4614      	movlt	r4, r2
 800d804:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d808:	d005      	beq.n	800d816 <__cvt+0x42>
 800d80a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d80e:	d100      	bne.n	800d812 <__cvt+0x3e>
 800d810:	3601      	adds	r6, #1
 800d812:	2102      	movs	r1, #2
 800d814:	e000      	b.n	800d818 <__cvt+0x44>
 800d816:	2103      	movs	r1, #3
 800d818:	ab03      	add	r3, sp, #12
 800d81a:	9301      	str	r3, [sp, #4]
 800d81c:	ab02      	add	r3, sp, #8
 800d81e:	9300      	str	r3, [sp, #0]
 800d820:	ec45 4b10 	vmov	d0, r4, r5
 800d824:	4653      	mov	r3, sl
 800d826:	4632      	mov	r2, r6
 800d828:	f001 f8ba 	bl	800e9a0 <_dtoa_r>
 800d82c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d830:	4607      	mov	r7, r0
 800d832:	d102      	bne.n	800d83a <__cvt+0x66>
 800d834:	f019 0f01 	tst.w	r9, #1
 800d838:	d022      	beq.n	800d880 <__cvt+0xac>
 800d83a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d83e:	eb07 0906 	add.w	r9, r7, r6
 800d842:	d110      	bne.n	800d866 <__cvt+0x92>
 800d844:	783b      	ldrb	r3, [r7, #0]
 800d846:	2b30      	cmp	r3, #48	; 0x30
 800d848:	d10a      	bne.n	800d860 <__cvt+0x8c>
 800d84a:	2200      	movs	r2, #0
 800d84c:	2300      	movs	r3, #0
 800d84e:	4620      	mov	r0, r4
 800d850:	4629      	mov	r1, r5
 800d852:	f7f3 f949 	bl	8000ae8 <__aeabi_dcmpeq>
 800d856:	b918      	cbnz	r0, 800d860 <__cvt+0x8c>
 800d858:	f1c6 0601 	rsb	r6, r6, #1
 800d85c:	f8ca 6000 	str.w	r6, [sl]
 800d860:	f8da 3000 	ldr.w	r3, [sl]
 800d864:	4499      	add	r9, r3
 800d866:	2200      	movs	r2, #0
 800d868:	2300      	movs	r3, #0
 800d86a:	4620      	mov	r0, r4
 800d86c:	4629      	mov	r1, r5
 800d86e:	f7f3 f93b 	bl	8000ae8 <__aeabi_dcmpeq>
 800d872:	b108      	cbz	r0, 800d878 <__cvt+0xa4>
 800d874:	f8cd 900c 	str.w	r9, [sp, #12]
 800d878:	2230      	movs	r2, #48	; 0x30
 800d87a:	9b03      	ldr	r3, [sp, #12]
 800d87c:	454b      	cmp	r3, r9
 800d87e:	d307      	bcc.n	800d890 <__cvt+0xbc>
 800d880:	9b03      	ldr	r3, [sp, #12]
 800d882:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d884:	1bdb      	subs	r3, r3, r7
 800d886:	4638      	mov	r0, r7
 800d888:	6013      	str	r3, [r2, #0]
 800d88a:	b004      	add	sp, #16
 800d88c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d890:	1c59      	adds	r1, r3, #1
 800d892:	9103      	str	r1, [sp, #12]
 800d894:	701a      	strb	r2, [r3, #0]
 800d896:	e7f0      	b.n	800d87a <__cvt+0xa6>

0800d898 <__exponent>:
 800d898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d89a:	4603      	mov	r3, r0
 800d89c:	2900      	cmp	r1, #0
 800d89e:	bfb8      	it	lt
 800d8a0:	4249      	neglt	r1, r1
 800d8a2:	f803 2b02 	strb.w	r2, [r3], #2
 800d8a6:	bfb4      	ite	lt
 800d8a8:	222d      	movlt	r2, #45	; 0x2d
 800d8aa:	222b      	movge	r2, #43	; 0x2b
 800d8ac:	2909      	cmp	r1, #9
 800d8ae:	7042      	strb	r2, [r0, #1]
 800d8b0:	dd2a      	ble.n	800d908 <__exponent+0x70>
 800d8b2:	f10d 0207 	add.w	r2, sp, #7
 800d8b6:	4617      	mov	r7, r2
 800d8b8:	260a      	movs	r6, #10
 800d8ba:	4694      	mov	ip, r2
 800d8bc:	fb91 f5f6 	sdiv	r5, r1, r6
 800d8c0:	fb06 1415 	mls	r4, r6, r5, r1
 800d8c4:	3430      	adds	r4, #48	; 0x30
 800d8c6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d8ca:	460c      	mov	r4, r1
 800d8cc:	2c63      	cmp	r4, #99	; 0x63
 800d8ce:	f102 32ff 	add.w	r2, r2, #4294967295
 800d8d2:	4629      	mov	r1, r5
 800d8d4:	dcf1      	bgt.n	800d8ba <__exponent+0x22>
 800d8d6:	3130      	adds	r1, #48	; 0x30
 800d8d8:	f1ac 0402 	sub.w	r4, ip, #2
 800d8dc:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d8e0:	1c41      	adds	r1, r0, #1
 800d8e2:	4622      	mov	r2, r4
 800d8e4:	42ba      	cmp	r2, r7
 800d8e6:	d30a      	bcc.n	800d8fe <__exponent+0x66>
 800d8e8:	f10d 0209 	add.w	r2, sp, #9
 800d8ec:	eba2 020c 	sub.w	r2, r2, ip
 800d8f0:	42bc      	cmp	r4, r7
 800d8f2:	bf88      	it	hi
 800d8f4:	2200      	movhi	r2, #0
 800d8f6:	4413      	add	r3, r2
 800d8f8:	1a18      	subs	r0, r3, r0
 800d8fa:	b003      	add	sp, #12
 800d8fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8fe:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d902:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d906:	e7ed      	b.n	800d8e4 <__exponent+0x4c>
 800d908:	2330      	movs	r3, #48	; 0x30
 800d90a:	3130      	adds	r1, #48	; 0x30
 800d90c:	7083      	strb	r3, [r0, #2]
 800d90e:	70c1      	strb	r1, [r0, #3]
 800d910:	1d03      	adds	r3, r0, #4
 800d912:	e7f1      	b.n	800d8f8 <__exponent+0x60>

0800d914 <_printf_float>:
 800d914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d918:	ed2d 8b02 	vpush	{d8}
 800d91c:	b08d      	sub	sp, #52	; 0x34
 800d91e:	460c      	mov	r4, r1
 800d920:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d924:	4616      	mov	r6, r2
 800d926:	461f      	mov	r7, r3
 800d928:	4605      	mov	r5, r0
 800d92a:	f000 ff09 	bl	800e740 <_localeconv_r>
 800d92e:	f8d0 a000 	ldr.w	sl, [r0]
 800d932:	4650      	mov	r0, sl
 800d934:	f7f2 fcac 	bl	8000290 <strlen>
 800d938:	2300      	movs	r3, #0
 800d93a:	930a      	str	r3, [sp, #40]	; 0x28
 800d93c:	6823      	ldr	r3, [r4, #0]
 800d93e:	9305      	str	r3, [sp, #20]
 800d940:	f8d8 3000 	ldr.w	r3, [r8]
 800d944:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d948:	3307      	adds	r3, #7
 800d94a:	f023 0307 	bic.w	r3, r3, #7
 800d94e:	f103 0208 	add.w	r2, r3, #8
 800d952:	f8c8 2000 	str.w	r2, [r8]
 800d956:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d95a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d95e:	9307      	str	r3, [sp, #28]
 800d960:	f8cd 8018 	str.w	r8, [sp, #24]
 800d964:	ee08 0a10 	vmov	s16, r0
 800d968:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d96c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d970:	4b9e      	ldr	r3, [pc, #632]	; (800dbec <_printf_float+0x2d8>)
 800d972:	f04f 32ff 	mov.w	r2, #4294967295
 800d976:	f7f3 f8e9 	bl	8000b4c <__aeabi_dcmpun>
 800d97a:	bb88      	cbnz	r0, 800d9e0 <_printf_float+0xcc>
 800d97c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d980:	4b9a      	ldr	r3, [pc, #616]	; (800dbec <_printf_float+0x2d8>)
 800d982:	f04f 32ff 	mov.w	r2, #4294967295
 800d986:	f7f3 f8c3 	bl	8000b10 <__aeabi_dcmple>
 800d98a:	bb48      	cbnz	r0, 800d9e0 <_printf_float+0xcc>
 800d98c:	2200      	movs	r2, #0
 800d98e:	2300      	movs	r3, #0
 800d990:	4640      	mov	r0, r8
 800d992:	4649      	mov	r1, r9
 800d994:	f7f3 f8b2 	bl	8000afc <__aeabi_dcmplt>
 800d998:	b110      	cbz	r0, 800d9a0 <_printf_float+0x8c>
 800d99a:	232d      	movs	r3, #45	; 0x2d
 800d99c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9a0:	4a93      	ldr	r2, [pc, #588]	; (800dbf0 <_printf_float+0x2dc>)
 800d9a2:	4b94      	ldr	r3, [pc, #592]	; (800dbf4 <_printf_float+0x2e0>)
 800d9a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d9a8:	bf94      	ite	ls
 800d9aa:	4690      	movls	r8, r2
 800d9ac:	4698      	movhi	r8, r3
 800d9ae:	2303      	movs	r3, #3
 800d9b0:	6123      	str	r3, [r4, #16]
 800d9b2:	9b05      	ldr	r3, [sp, #20]
 800d9b4:	f023 0304 	bic.w	r3, r3, #4
 800d9b8:	6023      	str	r3, [r4, #0]
 800d9ba:	f04f 0900 	mov.w	r9, #0
 800d9be:	9700      	str	r7, [sp, #0]
 800d9c0:	4633      	mov	r3, r6
 800d9c2:	aa0b      	add	r2, sp, #44	; 0x2c
 800d9c4:	4621      	mov	r1, r4
 800d9c6:	4628      	mov	r0, r5
 800d9c8:	f000 f9da 	bl	800dd80 <_printf_common>
 800d9cc:	3001      	adds	r0, #1
 800d9ce:	f040 8090 	bne.w	800daf2 <_printf_float+0x1de>
 800d9d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d9d6:	b00d      	add	sp, #52	; 0x34
 800d9d8:	ecbd 8b02 	vpop	{d8}
 800d9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9e0:	4642      	mov	r2, r8
 800d9e2:	464b      	mov	r3, r9
 800d9e4:	4640      	mov	r0, r8
 800d9e6:	4649      	mov	r1, r9
 800d9e8:	f7f3 f8b0 	bl	8000b4c <__aeabi_dcmpun>
 800d9ec:	b140      	cbz	r0, 800da00 <_printf_float+0xec>
 800d9ee:	464b      	mov	r3, r9
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	bfbc      	itt	lt
 800d9f4:	232d      	movlt	r3, #45	; 0x2d
 800d9f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d9fa:	4a7f      	ldr	r2, [pc, #508]	; (800dbf8 <_printf_float+0x2e4>)
 800d9fc:	4b7f      	ldr	r3, [pc, #508]	; (800dbfc <_printf_float+0x2e8>)
 800d9fe:	e7d1      	b.n	800d9a4 <_printf_float+0x90>
 800da00:	6863      	ldr	r3, [r4, #4]
 800da02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800da06:	9206      	str	r2, [sp, #24]
 800da08:	1c5a      	adds	r2, r3, #1
 800da0a:	d13f      	bne.n	800da8c <_printf_float+0x178>
 800da0c:	2306      	movs	r3, #6
 800da0e:	6063      	str	r3, [r4, #4]
 800da10:	9b05      	ldr	r3, [sp, #20]
 800da12:	6861      	ldr	r1, [r4, #4]
 800da14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800da18:	2300      	movs	r3, #0
 800da1a:	9303      	str	r3, [sp, #12]
 800da1c:	ab0a      	add	r3, sp, #40	; 0x28
 800da1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800da22:	ab09      	add	r3, sp, #36	; 0x24
 800da24:	ec49 8b10 	vmov	d0, r8, r9
 800da28:	9300      	str	r3, [sp, #0]
 800da2a:	6022      	str	r2, [r4, #0]
 800da2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800da30:	4628      	mov	r0, r5
 800da32:	f7ff fecf 	bl	800d7d4 <__cvt>
 800da36:	9b06      	ldr	r3, [sp, #24]
 800da38:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da3a:	2b47      	cmp	r3, #71	; 0x47
 800da3c:	4680      	mov	r8, r0
 800da3e:	d108      	bne.n	800da52 <_printf_float+0x13e>
 800da40:	1cc8      	adds	r0, r1, #3
 800da42:	db02      	blt.n	800da4a <_printf_float+0x136>
 800da44:	6863      	ldr	r3, [r4, #4]
 800da46:	4299      	cmp	r1, r3
 800da48:	dd41      	ble.n	800dace <_printf_float+0x1ba>
 800da4a:	f1ab 0302 	sub.w	r3, fp, #2
 800da4e:	fa5f fb83 	uxtb.w	fp, r3
 800da52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800da56:	d820      	bhi.n	800da9a <_printf_float+0x186>
 800da58:	3901      	subs	r1, #1
 800da5a:	465a      	mov	r2, fp
 800da5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800da60:	9109      	str	r1, [sp, #36]	; 0x24
 800da62:	f7ff ff19 	bl	800d898 <__exponent>
 800da66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da68:	1813      	adds	r3, r2, r0
 800da6a:	2a01      	cmp	r2, #1
 800da6c:	4681      	mov	r9, r0
 800da6e:	6123      	str	r3, [r4, #16]
 800da70:	dc02      	bgt.n	800da78 <_printf_float+0x164>
 800da72:	6822      	ldr	r2, [r4, #0]
 800da74:	07d2      	lsls	r2, r2, #31
 800da76:	d501      	bpl.n	800da7c <_printf_float+0x168>
 800da78:	3301      	adds	r3, #1
 800da7a:	6123      	str	r3, [r4, #16]
 800da7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800da80:	2b00      	cmp	r3, #0
 800da82:	d09c      	beq.n	800d9be <_printf_float+0xaa>
 800da84:	232d      	movs	r3, #45	; 0x2d
 800da86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da8a:	e798      	b.n	800d9be <_printf_float+0xaa>
 800da8c:	9a06      	ldr	r2, [sp, #24]
 800da8e:	2a47      	cmp	r2, #71	; 0x47
 800da90:	d1be      	bne.n	800da10 <_printf_float+0xfc>
 800da92:	2b00      	cmp	r3, #0
 800da94:	d1bc      	bne.n	800da10 <_printf_float+0xfc>
 800da96:	2301      	movs	r3, #1
 800da98:	e7b9      	b.n	800da0e <_printf_float+0xfa>
 800da9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800da9e:	d118      	bne.n	800dad2 <_printf_float+0x1be>
 800daa0:	2900      	cmp	r1, #0
 800daa2:	6863      	ldr	r3, [r4, #4]
 800daa4:	dd0b      	ble.n	800dabe <_printf_float+0x1aa>
 800daa6:	6121      	str	r1, [r4, #16]
 800daa8:	b913      	cbnz	r3, 800dab0 <_printf_float+0x19c>
 800daaa:	6822      	ldr	r2, [r4, #0]
 800daac:	07d0      	lsls	r0, r2, #31
 800daae:	d502      	bpl.n	800dab6 <_printf_float+0x1a2>
 800dab0:	3301      	adds	r3, #1
 800dab2:	440b      	add	r3, r1
 800dab4:	6123      	str	r3, [r4, #16]
 800dab6:	65a1      	str	r1, [r4, #88]	; 0x58
 800dab8:	f04f 0900 	mov.w	r9, #0
 800dabc:	e7de      	b.n	800da7c <_printf_float+0x168>
 800dabe:	b913      	cbnz	r3, 800dac6 <_printf_float+0x1b2>
 800dac0:	6822      	ldr	r2, [r4, #0]
 800dac2:	07d2      	lsls	r2, r2, #31
 800dac4:	d501      	bpl.n	800daca <_printf_float+0x1b6>
 800dac6:	3302      	adds	r3, #2
 800dac8:	e7f4      	b.n	800dab4 <_printf_float+0x1a0>
 800daca:	2301      	movs	r3, #1
 800dacc:	e7f2      	b.n	800dab4 <_printf_float+0x1a0>
 800dace:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800dad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dad4:	4299      	cmp	r1, r3
 800dad6:	db05      	blt.n	800dae4 <_printf_float+0x1d0>
 800dad8:	6823      	ldr	r3, [r4, #0]
 800dada:	6121      	str	r1, [r4, #16]
 800dadc:	07d8      	lsls	r0, r3, #31
 800dade:	d5ea      	bpl.n	800dab6 <_printf_float+0x1a2>
 800dae0:	1c4b      	adds	r3, r1, #1
 800dae2:	e7e7      	b.n	800dab4 <_printf_float+0x1a0>
 800dae4:	2900      	cmp	r1, #0
 800dae6:	bfd4      	ite	le
 800dae8:	f1c1 0202 	rsble	r2, r1, #2
 800daec:	2201      	movgt	r2, #1
 800daee:	4413      	add	r3, r2
 800daf0:	e7e0      	b.n	800dab4 <_printf_float+0x1a0>
 800daf2:	6823      	ldr	r3, [r4, #0]
 800daf4:	055a      	lsls	r2, r3, #21
 800daf6:	d407      	bmi.n	800db08 <_printf_float+0x1f4>
 800daf8:	6923      	ldr	r3, [r4, #16]
 800dafa:	4642      	mov	r2, r8
 800dafc:	4631      	mov	r1, r6
 800dafe:	4628      	mov	r0, r5
 800db00:	47b8      	blx	r7
 800db02:	3001      	adds	r0, #1
 800db04:	d12c      	bne.n	800db60 <_printf_float+0x24c>
 800db06:	e764      	b.n	800d9d2 <_printf_float+0xbe>
 800db08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800db0c:	f240 80e0 	bls.w	800dcd0 <_printf_float+0x3bc>
 800db10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800db14:	2200      	movs	r2, #0
 800db16:	2300      	movs	r3, #0
 800db18:	f7f2 ffe6 	bl	8000ae8 <__aeabi_dcmpeq>
 800db1c:	2800      	cmp	r0, #0
 800db1e:	d034      	beq.n	800db8a <_printf_float+0x276>
 800db20:	4a37      	ldr	r2, [pc, #220]	; (800dc00 <_printf_float+0x2ec>)
 800db22:	2301      	movs	r3, #1
 800db24:	4631      	mov	r1, r6
 800db26:	4628      	mov	r0, r5
 800db28:	47b8      	blx	r7
 800db2a:	3001      	adds	r0, #1
 800db2c:	f43f af51 	beq.w	800d9d2 <_printf_float+0xbe>
 800db30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db34:	429a      	cmp	r2, r3
 800db36:	db02      	blt.n	800db3e <_printf_float+0x22a>
 800db38:	6823      	ldr	r3, [r4, #0]
 800db3a:	07d8      	lsls	r0, r3, #31
 800db3c:	d510      	bpl.n	800db60 <_printf_float+0x24c>
 800db3e:	ee18 3a10 	vmov	r3, s16
 800db42:	4652      	mov	r2, sl
 800db44:	4631      	mov	r1, r6
 800db46:	4628      	mov	r0, r5
 800db48:	47b8      	blx	r7
 800db4a:	3001      	adds	r0, #1
 800db4c:	f43f af41 	beq.w	800d9d2 <_printf_float+0xbe>
 800db50:	f04f 0800 	mov.w	r8, #0
 800db54:	f104 091a 	add.w	r9, r4, #26
 800db58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db5a:	3b01      	subs	r3, #1
 800db5c:	4543      	cmp	r3, r8
 800db5e:	dc09      	bgt.n	800db74 <_printf_float+0x260>
 800db60:	6823      	ldr	r3, [r4, #0]
 800db62:	079b      	lsls	r3, r3, #30
 800db64:	f100 8107 	bmi.w	800dd76 <_printf_float+0x462>
 800db68:	68e0      	ldr	r0, [r4, #12]
 800db6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db6c:	4298      	cmp	r0, r3
 800db6e:	bfb8      	it	lt
 800db70:	4618      	movlt	r0, r3
 800db72:	e730      	b.n	800d9d6 <_printf_float+0xc2>
 800db74:	2301      	movs	r3, #1
 800db76:	464a      	mov	r2, r9
 800db78:	4631      	mov	r1, r6
 800db7a:	4628      	mov	r0, r5
 800db7c:	47b8      	blx	r7
 800db7e:	3001      	adds	r0, #1
 800db80:	f43f af27 	beq.w	800d9d2 <_printf_float+0xbe>
 800db84:	f108 0801 	add.w	r8, r8, #1
 800db88:	e7e6      	b.n	800db58 <_printf_float+0x244>
 800db8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	dc39      	bgt.n	800dc04 <_printf_float+0x2f0>
 800db90:	4a1b      	ldr	r2, [pc, #108]	; (800dc00 <_printf_float+0x2ec>)
 800db92:	2301      	movs	r3, #1
 800db94:	4631      	mov	r1, r6
 800db96:	4628      	mov	r0, r5
 800db98:	47b8      	blx	r7
 800db9a:	3001      	adds	r0, #1
 800db9c:	f43f af19 	beq.w	800d9d2 <_printf_float+0xbe>
 800dba0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800dba4:	4313      	orrs	r3, r2
 800dba6:	d102      	bne.n	800dbae <_printf_float+0x29a>
 800dba8:	6823      	ldr	r3, [r4, #0]
 800dbaa:	07d9      	lsls	r1, r3, #31
 800dbac:	d5d8      	bpl.n	800db60 <_printf_float+0x24c>
 800dbae:	ee18 3a10 	vmov	r3, s16
 800dbb2:	4652      	mov	r2, sl
 800dbb4:	4631      	mov	r1, r6
 800dbb6:	4628      	mov	r0, r5
 800dbb8:	47b8      	blx	r7
 800dbba:	3001      	adds	r0, #1
 800dbbc:	f43f af09 	beq.w	800d9d2 <_printf_float+0xbe>
 800dbc0:	f04f 0900 	mov.w	r9, #0
 800dbc4:	f104 0a1a 	add.w	sl, r4, #26
 800dbc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbca:	425b      	negs	r3, r3
 800dbcc:	454b      	cmp	r3, r9
 800dbce:	dc01      	bgt.n	800dbd4 <_printf_float+0x2c0>
 800dbd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbd2:	e792      	b.n	800dafa <_printf_float+0x1e6>
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	4652      	mov	r2, sl
 800dbd8:	4631      	mov	r1, r6
 800dbda:	4628      	mov	r0, r5
 800dbdc:	47b8      	blx	r7
 800dbde:	3001      	adds	r0, #1
 800dbe0:	f43f aef7 	beq.w	800d9d2 <_printf_float+0xbe>
 800dbe4:	f109 0901 	add.w	r9, r9, #1
 800dbe8:	e7ee      	b.n	800dbc8 <_printf_float+0x2b4>
 800dbea:	bf00      	nop
 800dbec:	7fefffff 	.word	0x7fefffff
 800dbf0:	08013930 	.word	0x08013930
 800dbf4:	08013934 	.word	0x08013934
 800dbf8:	08013938 	.word	0x08013938
 800dbfc:	0801393c 	.word	0x0801393c
 800dc00:	08013940 	.word	0x08013940
 800dc04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	bfa8      	it	ge
 800dc0c:	461a      	movge	r2, r3
 800dc0e:	2a00      	cmp	r2, #0
 800dc10:	4691      	mov	r9, r2
 800dc12:	dc37      	bgt.n	800dc84 <_printf_float+0x370>
 800dc14:	f04f 0b00 	mov.w	fp, #0
 800dc18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc1c:	f104 021a 	add.w	r2, r4, #26
 800dc20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dc22:	9305      	str	r3, [sp, #20]
 800dc24:	eba3 0309 	sub.w	r3, r3, r9
 800dc28:	455b      	cmp	r3, fp
 800dc2a:	dc33      	bgt.n	800dc94 <_printf_float+0x380>
 800dc2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc30:	429a      	cmp	r2, r3
 800dc32:	db3b      	blt.n	800dcac <_printf_float+0x398>
 800dc34:	6823      	ldr	r3, [r4, #0]
 800dc36:	07da      	lsls	r2, r3, #31
 800dc38:	d438      	bmi.n	800dcac <_printf_float+0x398>
 800dc3a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800dc3e:	eba2 0903 	sub.w	r9, r2, r3
 800dc42:	9b05      	ldr	r3, [sp, #20]
 800dc44:	1ad2      	subs	r2, r2, r3
 800dc46:	4591      	cmp	r9, r2
 800dc48:	bfa8      	it	ge
 800dc4a:	4691      	movge	r9, r2
 800dc4c:	f1b9 0f00 	cmp.w	r9, #0
 800dc50:	dc35      	bgt.n	800dcbe <_printf_float+0x3aa>
 800dc52:	f04f 0800 	mov.w	r8, #0
 800dc56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc5a:	f104 0a1a 	add.w	sl, r4, #26
 800dc5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc62:	1a9b      	subs	r3, r3, r2
 800dc64:	eba3 0309 	sub.w	r3, r3, r9
 800dc68:	4543      	cmp	r3, r8
 800dc6a:	f77f af79 	ble.w	800db60 <_printf_float+0x24c>
 800dc6e:	2301      	movs	r3, #1
 800dc70:	4652      	mov	r2, sl
 800dc72:	4631      	mov	r1, r6
 800dc74:	4628      	mov	r0, r5
 800dc76:	47b8      	blx	r7
 800dc78:	3001      	adds	r0, #1
 800dc7a:	f43f aeaa 	beq.w	800d9d2 <_printf_float+0xbe>
 800dc7e:	f108 0801 	add.w	r8, r8, #1
 800dc82:	e7ec      	b.n	800dc5e <_printf_float+0x34a>
 800dc84:	4613      	mov	r3, r2
 800dc86:	4631      	mov	r1, r6
 800dc88:	4642      	mov	r2, r8
 800dc8a:	4628      	mov	r0, r5
 800dc8c:	47b8      	blx	r7
 800dc8e:	3001      	adds	r0, #1
 800dc90:	d1c0      	bne.n	800dc14 <_printf_float+0x300>
 800dc92:	e69e      	b.n	800d9d2 <_printf_float+0xbe>
 800dc94:	2301      	movs	r3, #1
 800dc96:	4631      	mov	r1, r6
 800dc98:	4628      	mov	r0, r5
 800dc9a:	9205      	str	r2, [sp, #20]
 800dc9c:	47b8      	blx	r7
 800dc9e:	3001      	adds	r0, #1
 800dca0:	f43f ae97 	beq.w	800d9d2 <_printf_float+0xbe>
 800dca4:	9a05      	ldr	r2, [sp, #20]
 800dca6:	f10b 0b01 	add.w	fp, fp, #1
 800dcaa:	e7b9      	b.n	800dc20 <_printf_float+0x30c>
 800dcac:	ee18 3a10 	vmov	r3, s16
 800dcb0:	4652      	mov	r2, sl
 800dcb2:	4631      	mov	r1, r6
 800dcb4:	4628      	mov	r0, r5
 800dcb6:	47b8      	blx	r7
 800dcb8:	3001      	adds	r0, #1
 800dcba:	d1be      	bne.n	800dc3a <_printf_float+0x326>
 800dcbc:	e689      	b.n	800d9d2 <_printf_float+0xbe>
 800dcbe:	9a05      	ldr	r2, [sp, #20]
 800dcc0:	464b      	mov	r3, r9
 800dcc2:	4442      	add	r2, r8
 800dcc4:	4631      	mov	r1, r6
 800dcc6:	4628      	mov	r0, r5
 800dcc8:	47b8      	blx	r7
 800dcca:	3001      	adds	r0, #1
 800dccc:	d1c1      	bne.n	800dc52 <_printf_float+0x33e>
 800dcce:	e680      	b.n	800d9d2 <_printf_float+0xbe>
 800dcd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dcd2:	2a01      	cmp	r2, #1
 800dcd4:	dc01      	bgt.n	800dcda <_printf_float+0x3c6>
 800dcd6:	07db      	lsls	r3, r3, #31
 800dcd8:	d53a      	bpl.n	800dd50 <_printf_float+0x43c>
 800dcda:	2301      	movs	r3, #1
 800dcdc:	4642      	mov	r2, r8
 800dcde:	4631      	mov	r1, r6
 800dce0:	4628      	mov	r0, r5
 800dce2:	47b8      	blx	r7
 800dce4:	3001      	adds	r0, #1
 800dce6:	f43f ae74 	beq.w	800d9d2 <_printf_float+0xbe>
 800dcea:	ee18 3a10 	vmov	r3, s16
 800dcee:	4652      	mov	r2, sl
 800dcf0:	4631      	mov	r1, r6
 800dcf2:	4628      	mov	r0, r5
 800dcf4:	47b8      	blx	r7
 800dcf6:	3001      	adds	r0, #1
 800dcf8:	f43f ae6b 	beq.w	800d9d2 <_printf_float+0xbe>
 800dcfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dd00:	2200      	movs	r2, #0
 800dd02:	2300      	movs	r3, #0
 800dd04:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800dd08:	f7f2 feee 	bl	8000ae8 <__aeabi_dcmpeq>
 800dd0c:	b9d8      	cbnz	r0, 800dd46 <_printf_float+0x432>
 800dd0e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800dd12:	f108 0201 	add.w	r2, r8, #1
 800dd16:	4631      	mov	r1, r6
 800dd18:	4628      	mov	r0, r5
 800dd1a:	47b8      	blx	r7
 800dd1c:	3001      	adds	r0, #1
 800dd1e:	d10e      	bne.n	800dd3e <_printf_float+0x42a>
 800dd20:	e657      	b.n	800d9d2 <_printf_float+0xbe>
 800dd22:	2301      	movs	r3, #1
 800dd24:	4652      	mov	r2, sl
 800dd26:	4631      	mov	r1, r6
 800dd28:	4628      	mov	r0, r5
 800dd2a:	47b8      	blx	r7
 800dd2c:	3001      	adds	r0, #1
 800dd2e:	f43f ae50 	beq.w	800d9d2 <_printf_float+0xbe>
 800dd32:	f108 0801 	add.w	r8, r8, #1
 800dd36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd38:	3b01      	subs	r3, #1
 800dd3a:	4543      	cmp	r3, r8
 800dd3c:	dcf1      	bgt.n	800dd22 <_printf_float+0x40e>
 800dd3e:	464b      	mov	r3, r9
 800dd40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dd44:	e6da      	b.n	800dafc <_printf_float+0x1e8>
 800dd46:	f04f 0800 	mov.w	r8, #0
 800dd4a:	f104 0a1a 	add.w	sl, r4, #26
 800dd4e:	e7f2      	b.n	800dd36 <_printf_float+0x422>
 800dd50:	2301      	movs	r3, #1
 800dd52:	4642      	mov	r2, r8
 800dd54:	e7df      	b.n	800dd16 <_printf_float+0x402>
 800dd56:	2301      	movs	r3, #1
 800dd58:	464a      	mov	r2, r9
 800dd5a:	4631      	mov	r1, r6
 800dd5c:	4628      	mov	r0, r5
 800dd5e:	47b8      	blx	r7
 800dd60:	3001      	adds	r0, #1
 800dd62:	f43f ae36 	beq.w	800d9d2 <_printf_float+0xbe>
 800dd66:	f108 0801 	add.w	r8, r8, #1
 800dd6a:	68e3      	ldr	r3, [r4, #12]
 800dd6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd6e:	1a5b      	subs	r3, r3, r1
 800dd70:	4543      	cmp	r3, r8
 800dd72:	dcf0      	bgt.n	800dd56 <_printf_float+0x442>
 800dd74:	e6f8      	b.n	800db68 <_printf_float+0x254>
 800dd76:	f04f 0800 	mov.w	r8, #0
 800dd7a:	f104 0919 	add.w	r9, r4, #25
 800dd7e:	e7f4      	b.n	800dd6a <_printf_float+0x456>

0800dd80 <_printf_common>:
 800dd80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd84:	4616      	mov	r6, r2
 800dd86:	4699      	mov	r9, r3
 800dd88:	688a      	ldr	r2, [r1, #8]
 800dd8a:	690b      	ldr	r3, [r1, #16]
 800dd8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dd90:	4293      	cmp	r3, r2
 800dd92:	bfb8      	it	lt
 800dd94:	4613      	movlt	r3, r2
 800dd96:	6033      	str	r3, [r6, #0]
 800dd98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dd9c:	4607      	mov	r7, r0
 800dd9e:	460c      	mov	r4, r1
 800dda0:	b10a      	cbz	r2, 800dda6 <_printf_common+0x26>
 800dda2:	3301      	adds	r3, #1
 800dda4:	6033      	str	r3, [r6, #0]
 800dda6:	6823      	ldr	r3, [r4, #0]
 800dda8:	0699      	lsls	r1, r3, #26
 800ddaa:	bf42      	ittt	mi
 800ddac:	6833      	ldrmi	r3, [r6, #0]
 800ddae:	3302      	addmi	r3, #2
 800ddb0:	6033      	strmi	r3, [r6, #0]
 800ddb2:	6825      	ldr	r5, [r4, #0]
 800ddb4:	f015 0506 	ands.w	r5, r5, #6
 800ddb8:	d106      	bne.n	800ddc8 <_printf_common+0x48>
 800ddba:	f104 0a19 	add.w	sl, r4, #25
 800ddbe:	68e3      	ldr	r3, [r4, #12]
 800ddc0:	6832      	ldr	r2, [r6, #0]
 800ddc2:	1a9b      	subs	r3, r3, r2
 800ddc4:	42ab      	cmp	r3, r5
 800ddc6:	dc26      	bgt.n	800de16 <_printf_common+0x96>
 800ddc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ddcc:	1e13      	subs	r3, r2, #0
 800ddce:	6822      	ldr	r2, [r4, #0]
 800ddd0:	bf18      	it	ne
 800ddd2:	2301      	movne	r3, #1
 800ddd4:	0692      	lsls	r2, r2, #26
 800ddd6:	d42b      	bmi.n	800de30 <_printf_common+0xb0>
 800ddd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dddc:	4649      	mov	r1, r9
 800ddde:	4638      	mov	r0, r7
 800dde0:	47c0      	blx	r8
 800dde2:	3001      	adds	r0, #1
 800dde4:	d01e      	beq.n	800de24 <_printf_common+0xa4>
 800dde6:	6823      	ldr	r3, [r4, #0]
 800dde8:	6922      	ldr	r2, [r4, #16]
 800ddea:	f003 0306 	and.w	r3, r3, #6
 800ddee:	2b04      	cmp	r3, #4
 800ddf0:	bf02      	ittt	eq
 800ddf2:	68e5      	ldreq	r5, [r4, #12]
 800ddf4:	6833      	ldreq	r3, [r6, #0]
 800ddf6:	1aed      	subeq	r5, r5, r3
 800ddf8:	68a3      	ldr	r3, [r4, #8]
 800ddfa:	bf0c      	ite	eq
 800ddfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800de00:	2500      	movne	r5, #0
 800de02:	4293      	cmp	r3, r2
 800de04:	bfc4      	itt	gt
 800de06:	1a9b      	subgt	r3, r3, r2
 800de08:	18ed      	addgt	r5, r5, r3
 800de0a:	2600      	movs	r6, #0
 800de0c:	341a      	adds	r4, #26
 800de0e:	42b5      	cmp	r5, r6
 800de10:	d11a      	bne.n	800de48 <_printf_common+0xc8>
 800de12:	2000      	movs	r0, #0
 800de14:	e008      	b.n	800de28 <_printf_common+0xa8>
 800de16:	2301      	movs	r3, #1
 800de18:	4652      	mov	r2, sl
 800de1a:	4649      	mov	r1, r9
 800de1c:	4638      	mov	r0, r7
 800de1e:	47c0      	blx	r8
 800de20:	3001      	adds	r0, #1
 800de22:	d103      	bne.n	800de2c <_printf_common+0xac>
 800de24:	f04f 30ff 	mov.w	r0, #4294967295
 800de28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de2c:	3501      	adds	r5, #1
 800de2e:	e7c6      	b.n	800ddbe <_printf_common+0x3e>
 800de30:	18e1      	adds	r1, r4, r3
 800de32:	1c5a      	adds	r2, r3, #1
 800de34:	2030      	movs	r0, #48	; 0x30
 800de36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800de3a:	4422      	add	r2, r4
 800de3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800de40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800de44:	3302      	adds	r3, #2
 800de46:	e7c7      	b.n	800ddd8 <_printf_common+0x58>
 800de48:	2301      	movs	r3, #1
 800de4a:	4622      	mov	r2, r4
 800de4c:	4649      	mov	r1, r9
 800de4e:	4638      	mov	r0, r7
 800de50:	47c0      	blx	r8
 800de52:	3001      	adds	r0, #1
 800de54:	d0e6      	beq.n	800de24 <_printf_common+0xa4>
 800de56:	3601      	adds	r6, #1
 800de58:	e7d9      	b.n	800de0e <_printf_common+0x8e>
	...

0800de5c <_printf_i>:
 800de5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de60:	7e0f      	ldrb	r7, [r1, #24]
 800de62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800de64:	2f78      	cmp	r7, #120	; 0x78
 800de66:	4691      	mov	r9, r2
 800de68:	4680      	mov	r8, r0
 800de6a:	460c      	mov	r4, r1
 800de6c:	469a      	mov	sl, r3
 800de6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800de72:	d807      	bhi.n	800de84 <_printf_i+0x28>
 800de74:	2f62      	cmp	r7, #98	; 0x62
 800de76:	d80a      	bhi.n	800de8e <_printf_i+0x32>
 800de78:	2f00      	cmp	r7, #0
 800de7a:	f000 80d4 	beq.w	800e026 <_printf_i+0x1ca>
 800de7e:	2f58      	cmp	r7, #88	; 0x58
 800de80:	f000 80c0 	beq.w	800e004 <_printf_i+0x1a8>
 800de84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800de8c:	e03a      	b.n	800df04 <_printf_i+0xa8>
 800de8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800de92:	2b15      	cmp	r3, #21
 800de94:	d8f6      	bhi.n	800de84 <_printf_i+0x28>
 800de96:	a101      	add	r1, pc, #4	; (adr r1, 800de9c <_printf_i+0x40>)
 800de98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800de9c:	0800def5 	.word	0x0800def5
 800dea0:	0800df09 	.word	0x0800df09
 800dea4:	0800de85 	.word	0x0800de85
 800dea8:	0800de85 	.word	0x0800de85
 800deac:	0800de85 	.word	0x0800de85
 800deb0:	0800de85 	.word	0x0800de85
 800deb4:	0800df09 	.word	0x0800df09
 800deb8:	0800de85 	.word	0x0800de85
 800debc:	0800de85 	.word	0x0800de85
 800dec0:	0800de85 	.word	0x0800de85
 800dec4:	0800de85 	.word	0x0800de85
 800dec8:	0800e00d 	.word	0x0800e00d
 800decc:	0800df35 	.word	0x0800df35
 800ded0:	0800dfc7 	.word	0x0800dfc7
 800ded4:	0800de85 	.word	0x0800de85
 800ded8:	0800de85 	.word	0x0800de85
 800dedc:	0800e02f 	.word	0x0800e02f
 800dee0:	0800de85 	.word	0x0800de85
 800dee4:	0800df35 	.word	0x0800df35
 800dee8:	0800de85 	.word	0x0800de85
 800deec:	0800de85 	.word	0x0800de85
 800def0:	0800dfcf 	.word	0x0800dfcf
 800def4:	682b      	ldr	r3, [r5, #0]
 800def6:	1d1a      	adds	r2, r3, #4
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	602a      	str	r2, [r5, #0]
 800defc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800df00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800df04:	2301      	movs	r3, #1
 800df06:	e09f      	b.n	800e048 <_printf_i+0x1ec>
 800df08:	6820      	ldr	r0, [r4, #0]
 800df0a:	682b      	ldr	r3, [r5, #0]
 800df0c:	0607      	lsls	r7, r0, #24
 800df0e:	f103 0104 	add.w	r1, r3, #4
 800df12:	6029      	str	r1, [r5, #0]
 800df14:	d501      	bpl.n	800df1a <_printf_i+0xbe>
 800df16:	681e      	ldr	r6, [r3, #0]
 800df18:	e003      	b.n	800df22 <_printf_i+0xc6>
 800df1a:	0646      	lsls	r6, r0, #25
 800df1c:	d5fb      	bpl.n	800df16 <_printf_i+0xba>
 800df1e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800df22:	2e00      	cmp	r6, #0
 800df24:	da03      	bge.n	800df2e <_printf_i+0xd2>
 800df26:	232d      	movs	r3, #45	; 0x2d
 800df28:	4276      	negs	r6, r6
 800df2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df2e:	485a      	ldr	r0, [pc, #360]	; (800e098 <_printf_i+0x23c>)
 800df30:	230a      	movs	r3, #10
 800df32:	e012      	b.n	800df5a <_printf_i+0xfe>
 800df34:	682b      	ldr	r3, [r5, #0]
 800df36:	6820      	ldr	r0, [r4, #0]
 800df38:	1d19      	adds	r1, r3, #4
 800df3a:	6029      	str	r1, [r5, #0]
 800df3c:	0605      	lsls	r5, r0, #24
 800df3e:	d501      	bpl.n	800df44 <_printf_i+0xe8>
 800df40:	681e      	ldr	r6, [r3, #0]
 800df42:	e002      	b.n	800df4a <_printf_i+0xee>
 800df44:	0641      	lsls	r1, r0, #25
 800df46:	d5fb      	bpl.n	800df40 <_printf_i+0xe4>
 800df48:	881e      	ldrh	r6, [r3, #0]
 800df4a:	4853      	ldr	r0, [pc, #332]	; (800e098 <_printf_i+0x23c>)
 800df4c:	2f6f      	cmp	r7, #111	; 0x6f
 800df4e:	bf0c      	ite	eq
 800df50:	2308      	moveq	r3, #8
 800df52:	230a      	movne	r3, #10
 800df54:	2100      	movs	r1, #0
 800df56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800df5a:	6865      	ldr	r5, [r4, #4]
 800df5c:	60a5      	str	r5, [r4, #8]
 800df5e:	2d00      	cmp	r5, #0
 800df60:	bfa2      	ittt	ge
 800df62:	6821      	ldrge	r1, [r4, #0]
 800df64:	f021 0104 	bicge.w	r1, r1, #4
 800df68:	6021      	strge	r1, [r4, #0]
 800df6a:	b90e      	cbnz	r6, 800df70 <_printf_i+0x114>
 800df6c:	2d00      	cmp	r5, #0
 800df6e:	d04b      	beq.n	800e008 <_printf_i+0x1ac>
 800df70:	4615      	mov	r5, r2
 800df72:	fbb6 f1f3 	udiv	r1, r6, r3
 800df76:	fb03 6711 	mls	r7, r3, r1, r6
 800df7a:	5dc7      	ldrb	r7, [r0, r7]
 800df7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800df80:	4637      	mov	r7, r6
 800df82:	42bb      	cmp	r3, r7
 800df84:	460e      	mov	r6, r1
 800df86:	d9f4      	bls.n	800df72 <_printf_i+0x116>
 800df88:	2b08      	cmp	r3, #8
 800df8a:	d10b      	bne.n	800dfa4 <_printf_i+0x148>
 800df8c:	6823      	ldr	r3, [r4, #0]
 800df8e:	07de      	lsls	r6, r3, #31
 800df90:	d508      	bpl.n	800dfa4 <_printf_i+0x148>
 800df92:	6923      	ldr	r3, [r4, #16]
 800df94:	6861      	ldr	r1, [r4, #4]
 800df96:	4299      	cmp	r1, r3
 800df98:	bfde      	ittt	le
 800df9a:	2330      	movle	r3, #48	; 0x30
 800df9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dfa0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dfa4:	1b52      	subs	r2, r2, r5
 800dfa6:	6122      	str	r2, [r4, #16]
 800dfa8:	f8cd a000 	str.w	sl, [sp]
 800dfac:	464b      	mov	r3, r9
 800dfae:	aa03      	add	r2, sp, #12
 800dfb0:	4621      	mov	r1, r4
 800dfb2:	4640      	mov	r0, r8
 800dfb4:	f7ff fee4 	bl	800dd80 <_printf_common>
 800dfb8:	3001      	adds	r0, #1
 800dfba:	d14a      	bne.n	800e052 <_printf_i+0x1f6>
 800dfbc:	f04f 30ff 	mov.w	r0, #4294967295
 800dfc0:	b004      	add	sp, #16
 800dfc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfc6:	6823      	ldr	r3, [r4, #0]
 800dfc8:	f043 0320 	orr.w	r3, r3, #32
 800dfcc:	6023      	str	r3, [r4, #0]
 800dfce:	4833      	ldr	r0, [pc, #204]	; (800e09c <_printf_i+0x240>)
 800dfd0:	2778      	movs	r7, #120	; 0x78
 800dfd2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dfd6:	6823      	ldr	r3, [r4, #0]
 800dfd8:	6829      	ldr	r1, [r5, #0]
 800dfda:	061f      	lsls	r7, r3, #24
 800dfdc:	f851 6b04 	ldr.w	r6, [r1], #4
 800dfe0:	d402      	bmi.n	800dfe8 <_printf_i+0x18c>
 800dfe2:	065f      	lsls	r7, r3, #25
 800dfe4:	bf48      	it	mi
 800dfe6:	b2b6      	uxthmi	r6, r6
 800dfe8:	07df      	lsls	r7, r3, #31
 800dfea:	bf48      	it	mi
 800dfec:	f043 0320 	orrmi.w	r3, r3, #32
 800dff0:	6029      	str	r1, [r5, #0]
 800dff2:	bf48      	it	mi
 800dff4:	6023      	strmi	r3, [r4, #0]
 800dff6:	b91e      	cbnz	r6, 800e000 <_printf_i+0x1a4>
 800dff8:	6823      	ldr	r3, [r4, #0]
 800dffa:	f023 0320 	bic.w	r3, r3, #32
 800dffe:	6023      	str	r3, [r4, #0]
 800e000:	2310      	movs	r3, #16
 800e002:	e7a7      	b.n	800df54 <_printf_i+0xf8>
 800e004:	4824      	ldr	r0, [pc, #144]	; (800e098 <_printf_i+0x23c>)
 800e006:	e7e4      	b.n	800dfd2 <_printf_i+0x176>
 800e008:	4615      	mov	r5, r2
 800e00a:	e7bd      	b.n	800df88 <_printf_i+0x12c>
 800e00c:	682b      	ldr	r3, [r5, #0]
 800e00e:	6826      	ldr	r6, [r4, #0]
 800e010:	6961      	ldr	r1, [r4, #20]
 800e012:	1d18      	adds	r0, r3, #4
 800e014:	6028      	str	r0, [r5, #0]
 800e016:	0635      	lsls	r5, r6, #24
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	d501      	bpl.n	800e020 <_printf_i+0x1c4>
 800e01c:	6019      	str	r1, [r3, #0]
 800e01e:	e002      	b.n	800e026 <_printf_i+0x1ca>
 800e020:	0670      	lsls	r0, r6, #25
 800e022:	d5fb      	bpl.n	800e01c <_printf_i+0x1c0>
 800e024:	8019      	strh	r1, [r3, #0]
 800e026:	2300      	movs	r3, #0
 800e028:	6123      	str	r3, [r4, #16]
 800e02a:	4615      	mov	r5, r2
 800e02c:	e7bc      	b.n	800dfa8 <_printf_i+0x14c>
 800e02e:	682b      	ldr	r3, [r5, #0]
 800e030:	1d1a      	adds	r2, r3, #4
 800e032:	602a      	str	r2, [r5, #0]
 800e034:	681d      	ldr	r5, [r3, #0]
 800e036:	6862      	ldr	r2, [r4, #4]
 800e038:	2100      	movs	r1, #0
 800e03a:	4628      	mov	r0, r5
 800e03c:	f7f2 f8d8 	bl	80001f0 <memchr>
 800e040:	b108      	cbz	r0, 800e046 <_printf_i+0x1ea>
 800e042:	1b40      	subs	r0, r0, r5
 800e044:	6060      	str	r0, [r4, #4]
 800e046:	6863      	ldr	r3, [r4, #4]
 800e048:	6123      	str	r3, [r4, #16]
 800e04a:	2300      	movs	r3, #0
 800e04c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e050:	e7aa      	b.n	800dfa8 <_printf_i+0x14c>
 800e052:	6923      	ldr	r3, [r4, #16]
 800e054:	462a      	mov	r2, r5
 800e056:	4649      	mov	r1, r9
 800e058:	4640      	mov	r0, r8
 800e05a:	47d0      	blx	sl
 800e05c:	3001      	adds	r0, #1
 800e05e:	d0ad      	beq.n	800dfbc <_printf_i+0x160>
 800e060:	6823      	ldr	r3, [r4, #0]
 800e062:	079b      	lsls	r3, r3, #30
 800e064:	d413      	bmi.n	800e08e <_printf_i+0x232>
 800e066:	68e0      	ldr	r0, [r4, #12]
 800e068:	9b03      	ldr	r3, [sp, #12]
 800e06a:	4298      	cmp	r0, r3
 800e06c:	bfb8      	it	lt
 800e06e:	4618      	movlt	r0, r3
 800e070:	e7a6      	b.n	800dfc0 <_printf_i+0x164>
 800e072:	2301      	movs	r3, #1
 800e074:	4632      	mov	r2, r6
 800e076:	4649      	mov	r1, r9
 800e078:	4640      	mov	r0, r8
 800e07a:	47d0      	blx	sl
 800e07c:	3001      	adds	r0, #1
 800e07e:	d09d      	beq.n	800dfbc <_printf_i+0x160>
 800e080:	3501      	adds	r5, #1
 800e082:	68e3      	ldr	r3, [r4, #12]
 800e084:	9903      	ldr	r1, [sp, #12]
 800e086:	1a5b      	subs	r3, r3, r1
 800e088:	42ab      	cmp	r3, r5
 800e08a:	dcf2      	bgt.n	800e072 <_printf_i+0x216>
 800e08c:	e7eb      	b.n	800e066 <_printf_i+0x20a>
 800e08e:	2500      	movs	r5, #0
 800e090:	f104 0619 	add.w	r6, r4, #25
 800e094:	e7f5      	b.n	800e082 <_printf_i+0x226>
 800e096:	bf00      	nop
 800e098:	08013942 	.word	0x08013942
 800e09c:	08013953 	.word	0x08013953

0800e0a0 <_scanf_float>:
 800e0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0a4:	b087      	sub	sp, #28
 800e0a6:	4617      	mov	r7, r2
 800e0a8:	9303      	str	r3, [sp, #12]
 800e0aa:	688b      	ldr	r3, [r1, #8]
 800e0ac:	1e5a      	subs	r2, r3, #1
 800e0ae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e0b2:	bf83      	ittte	hi
 800e0b4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e0b8:	195b      	addhi	r3, r3, r5
 800e0ba:	9302      	strhi	r3, [sp, #8]
 800e0bc:	2300      	movls	r3, #0
 800e0be:	bf86      	itte	hi
 800e0c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e0c4:	608b      	strhi	r3, [r1, #8]
 800e0c6:	9302      	strls	r3, [sp, #8]
 800e0c8:	680b      	ldr	r3, [r1, #0]
 800e0ca:	468b      	mov	fp, r1
 800e0cc:	2500      	movs	r5, #0
 800e0ce:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e0d2:	f84b 3b1c 	str.w	r3, [fp], #28
 800e0d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e0da:	4680      	mov	r8, r0
 800e0dc:	460c      	mov	r4, r1
 800e0de:	465e      	mov	r6, fp
 800e0e0:	46aa      	mov	sl, r5
 800e0e2:	46a9      	mov	r9, r5
 800e0e4:	9501      	str	r5, [sp, #4]
 800e0e6:	68a2      	ldr	r2, [r4, #8]
 800e0e8:	b152      	cbz	r2, 800e100 <_scanf_float+0x60>
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	781b      	ldrb	r3, [r3, #0]
 800e0ee:	2b4e      	cmp	r3, #78	; 0x4e
 800e0f0:	d864      	bhi.n	800e1bc <_scanf_float+0x11c>
 800e0f2:	2b40      	cmp	r3, #64	; 0x40
 800e0f4:	d83c      	bhi.n	800e170 <_scanf_float+0xd0>
 800e0f6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e0fa:	b2c8      	uxtb	r0, r1
 800e0fc:	280e      	cmp	r0, #14
 800e0fe:	d93a      	bls.n	800e176 <_scanf_float+0xd6>
 800e100:	f1b9 0f00 	cmp.w	r9, #0
 800e104:	d003      	beq.n	800e10e <_scanf_float+0x6e>
 800e106:	6823      	ldr	r3, [r4, #0]
 800e108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e10c:	6023      	str	r3, [r4, #0]
 800e10e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e112:	f1ba 0f01 	cmp.w	sl, #1
 800e116:	f200 8113 	bhi.w	800e340 <_scanf_float+0x2a0>
 800e11a:	455e      	cmp	r6, fp
 800e11c:	f200 8105 	bhi.w	800e32a <_scanf_float+0x28a>
 800e120:	2501      	movs	r5, #1
 800e122:	4628      	mov	r0, r5
 800e124:	b007      	add	sp, #28
 800e126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e12a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e12e:	2a0d      	cmp	r2, #13
 800e130:	d8e6      	bhi.n	800e100 <_scanf_float+0x60>
 800e132:	a101      	add	r1, pc, #4	; (adr r1, 800e138 <_scanf_float+0x98>)
 800e134:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e138:	0800e277 	.word	0x0800e277
 800e13c:	0800e101 	.word	0x0800e101
 800e140:	0800e101 	.word	0x0800e101
 800e144:	0800e101 	.word	0x0800e101
 800e148:	0800e2d7 	.word	0x0800e2d7
 800e14c:	0800e2af 	.word	0x0800e2af
 800e150:	0800e101 	.word	0x0800e101
 800e154:	0800e101 	.word	0x0800e101
 800e158:	0800e285 	.word	0x0800e285
 800e15c:	0800e101 	.word	0x0800e101
 800e160:	0800e101 	.word	0x0800e101
 800e164:	0800e101 	.word	0x0800e101
 800e168:	0800e101 	.word	0x0800e101
 800e16c:	0800e23d 	.word	0x0800e23d
 800e170:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e174:	e7db      	b.n	800e12e <_scanf_float+0x8e>
 800e176:	290e      	cmp	r1, #14
 800e178:	d8c2      	bhi.n	800e100 <_scanf_float+0x60>
 800e17a:	a001      	add	r0, pc, #4	; (adr r0, 800e180 <_scanf_float+0xe0>)
 800e17c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e180:	0800e22f 	.word	0x0800e22f
 800e184:	0800e101 	.word	0x0800e101
 800e188:	0800e22f 	.word	0x0800e22f
 800e18c:	0800e2c3 	.word	0x0800e2c3
 800e190:	0800e101 	.word	0x0800e101
 800e194:	0800e1dd 	.word	0x0800e1dd
 800e198:	0800e219 	.word	0x0800e219
 800e19c:	0800e219 	.word	0x0800e219
 800e1a0:	0800e219 	.word	0x0800e219
 800e1a4:	0800e219 	.word	0x0800e219
 800e1a8:	0800e219 	.word	0x0800e219
 800e1ac:	0800e219 	.word	0x0800e219
 800e1b0:	0800e219 	.word	0x0800e219
 800e1b4:	0800e219 	.word	0x0800e219
 800e1b8:	0800e219 	.word	0x0800e219
 800e1bc:	2b6e      	cmp	r3, #110	; 0x6e
 800e1be:	d809      	bhi.n	800e1d4 <_scanf_float+0x134>
 800e1c0:	2b60      	cmp	r3, #96	; 0x60
 800e1c2:	d8b2      	bhi.n	800e12a <_scanf_float+0x8a>
 800e1c4:	2b54      	cmp	r3, #84	; 0x54
 800e1c6:	d077      	beq.n	800e2b8 <_scanf_float+0x218>
 800e1c8:	2b59      	cmp	r3, #89	; 0x59
 800e1ca:	d199      	bne.n	800e100 <_scanf_float+0x60>
 800e1cc:	2d07      	cmp	r5, #7
 800e1ce:	d197      	bne.n	800e100 <_scanf_float+0x60>
 800e1d0:	2508      	movs	r5, #8
 800e1d2:	e029      	b.n	800e228 <_scanf_float+0x188>
 800e1d4:	2b74      	cmp	r3, #116	; 0x74
 800e1d6:	d06f      	beq.n	800e2b8 <_scanf_float+0x218>
 800e1d8:	2b79      	cmp	r3, #121	; 0x79
 800e1da:	e7f6      	b.n	800e1ca <_scanf_float+0x12a>
 800e1dc:	6821      	ldr	r1, [r4, #0]
 800e1de:	05c8      	lsls	r0, r1, #23
 800e1e0:	d51a      	bpl.n	800e218 <_scanf_float+0x178>
 800e1e2:	9b02      	ldr	r3, [sp, #8]
 800e1e4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e1e8:	6021      	str	r1, [r4, #0]
 800e1ea:	f109 0901 	add.w	r9, r9, #1
 800e1ee:	b11b      	cbz	r3, 800e1f8 <_scanf_float+0x158>
 800e1f0:	3b01      	subs	r3, #1
 800e1f2:	3201      	adds	r2, #1
 800e1f4:	9302      	str	r3, [sp, #8]
 800e1f6:	60a2      	str	r2, [r4, #8]
 800e1f8:	68a3      	ldr	r3, [r4, #8]
 800e1fa:	3b01      	subs	r3, #1
 800e1fc:	60a3      	str	r3, [r4, #8]
 800e1fe:	6923      	ldr	r3, [r4, #16]
 800e200:	3301      	adds	r3, #1
 800e202:	6123      	str	r3, [r4, #16]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	3b01      	subs	r3, #1
 800e208:	2b00      	cmp	r3, #0
 800e20a:	607b      	str	r3, [r7, #4]
 800e20c:	f340 8084 	ble.w	800e318 <_scanf_float+0x278>
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	3301      	adds	r3, #1
 800e214:	603b      	str	r3, [r7, #0]
 800e216:	e766      	b.n	800e0e6 <_scanf_float+0x46>
 800e218:	eb1a 0f05 	cmn.w	sl, r5
 800e21c:	f47f af70 	bne.w	800e100 <_scanf_float+0x60>
 800e220:	6822      	ldr	r2, [r4, #0]
 800e222:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e226:	6022      	str	r2, [r4, #0]
 800e228:	f806 3b01 	strb.w	r3, [r6], #1
 800e22c:	e7e4      	b.n	800e1f8 <_scanf_float+0x158>
 800e22e:	6822      	ldr	r2, [r4, #0]
 800e230:	0610      	lsls	r0, r2, #24
 800e232:	f57f af65 	bpl.w	800e100 <_scanf_float+0x60>
 800e236:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e23a:	e7f4      	b.n	800e226 <_scanf_float+0x186>
 800e23c:	f1ba 0f00 	cmp.w	sl, #0
 800e240:	d10e      	bne.n	800e260 <_scanf_float+0x1c0>
 800e242:	f1b9 0f00 	cmp.w	r9, #0
 800e246:	d10e      	bne.n	800e266 <_scanf_float+0x1c6>
 800e248:	6822      	ldr	r2, [r4, #0]
 800e24a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e24e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e252:	d108      	bne.n	800e266 <_scanf_float+0x1c6>
 800e254:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e258:	6022      	str	r2, [r4, #0]
 800e25a:	f04f 0a01 	mov.w	sl, #1
 800e25e:	e7e3      	b.n	800e228 <_scanf_float+0x188>
 800e260:	f1ba 0f02 	cmp.w	sl, #2
 800e264:	d055      	beq.n	800e312 <_scanf_float+0x272>
 800e266:	2d01      	cmp	r5, #1
 800e268:	d002      	beq.n	800e270 <_scanf_float+0x1d0>
 800e26a:	2d04      	cmp	r5, #4
 800e26c:	f47f af48 	bne.w	800e100 <_scanf_float+0x60>
 800e270:	3501      	adds	r5, #1
 800e272:	b2ed      	uxtb	r5, r5
 800e274:	e7d8      	b.n	800e228 <_scanf_float+0x188>
 800e276:	f1ba 0f01 	cmp.w	sl, #1
 800e27a:	f47f af41 	bne.w	800e100 <_scanf_float+0x60>
 800e27e:	f04f 0a02 	mov.w	sl, #2
 800e282:	e7d1      	b.n	800e228 <_scanf_float+0x188>
 800e284:	b97d      	cbnz	r5, 800e2a6 <_scanf_float+0x206>
 800e286:	f1b9 0f00 	cmp.w	r9, #0
 800e28a:	f47f af3c 	bne.w	800e106 <_scanf_float+0x66>
 800e28e:	6822      	ldr	r2, [r4, #0]
 800e290:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e294:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e298:	f47f af39 	bne.w	800e10e <_scanf_float+0x6e>
 800e29c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e2a0:	6022      	str	r2, [r4, #0]
 800e2a2:	2501      	movs	r5, #1
 800e2a4:	e7c0      	b.n	800e228 <_scanf_float+0x188>
 800e2a6:	2d03      	cmp	r5, #3
 800e2a8:	d0e2      	beq.n	800e270 <_scanf_float+0x1d0>
 800e2aa:	2d05      	cmp	r5, #5
 800e2ac:	e7de      	b.n	800e26c <_scanf_float+0x1cc>
 800e2ae:	2d02      	cmp	r5, #2
 800e2b0:	f47f af26 	bne.w	800e100 <_scanf_float+0x60>
 800e2b4:	2503      	movs	r5, #3
 800e2b6:	e7b7      	b.n	800e228 <_scanf_float+0x188>
 800e2b8:	2d06      	cmp	r5, #6
 800e2ba:	f47f af21 	bne.w	800e100 <_scanf_float+0x60>
 800e2be:	2507      	movs	r5, #7
 800e2c0:	e7b2      	b.n	800e228 <_scanf_float+0x188>
 800e2c2:	6822      	ldr	r2, [r4, #0]
 800e2c4:	0591      	lsls	r1, r2, #22
 800e2c6:	f57f af1b 	bpl.w	800e100 <_scanf_float+0x60>
 800e2ca:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e2ce:	6022      	str	r2, [r4, #0]
 800e2d0:	f8cd 9004 	str.w	r9, [sp, #4]
 800e2d4:	e7a8      	b.n	800e228 <_scanf_float+0x188>
 800e2d6:	6822      	ldr	r2, [r4, #0]
 800e2d8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e2dc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e2e0:	d006      	beq.n	800e2f0 <_scanf_float+0x250>
 800e2e2:	0550      	lsls	r0, r2, #21
 800e2e4:	f57f af0c 	bpl.w	800e100 <_scanf_float+0x60>
 800e2e8:	f1b9 0f00 	cmp.w	r9, #0
 800e2ec:	f43f af0f 	beq.w	800e10e <_scanf_float+0x6e>
 800e2f0:	0591      	lsls	r1, r2, #22
 800e2f2:	bf58      	it	pl
 800e2f4:	9901      	ldrpl	r1, [sp, #4]
 800e2f6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e2fa:	bf58      	it	pl
 800e2fc:	eba9 0101 	subpl.w	r1, r9, r1
 800e300:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e304:	bf58      	it	pl
 800e306:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e30a:	6022      	str	r2, [r4, #0]
 800e30c:	f04f 0900 	mov.w	r9, #0
 800e310:	e78a      	b.n	800e228 <_scanf_float+0x188>
 800e312:	f04f 0a03 	mov.w	sl, #3
 800e316:	e787      	b.n	800e228 <_scanf_float+0x188>
 800e318:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e31c:	4639      	mov	r1, r7
 800e31e:	4640      	mov	r0, r8
 800e320:	4798      	blx	r3
 800e322:	2800      	cmp	r0, #0
 800e324:	f43f aedf 	beq.w	800e0e6 <_scanf_float+0x46>
 800e328:	e6ea      	b.n	800e100 <_scanf_float+0x60>
 800e32a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e32e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e332:	463a      	mov	r2, r7
 800e334:	4640      	mov	r0, r8
 800e336:	4798      	blx	r3
 800e338:	6923      	ldr	r3, [r4, #16]
 800e33a:	3b01      	subs	r3, #1
 800e33c:	6123      	str	r3, [r4, #16]
 800e33e:	e6ec      	b.n	800e11a <_scanf_float+0x7a>
 800e340:	1e6b      	subs	r3, r5, #1
 800e342:	2b06      	cmp	r3, #6
 800e344:	d825      	bhi.n	800e392 <_scanf_float+0x2f2>
 800e346:	2d02      	cmp	r5, #2
 800e348:	d836      	bhi.n	800e3b8 <_scanf_float+0x318>
 800e34a:	455e      	cmp	r6, fp
 800e34c:	f67f aee8 	bls.w	800e120 <_scanf_float+0x80>
 800e350:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e354:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e358:	463a      	mov	r2, r7
 800e35a:	4640      	mov	r0, r8
 800e35c:	4798      	blx	r3
 800e35e:	6923      	ldr	r3, [r4, #16]
 800e360:	3b01      	subs	r3, #1
 800e362:	6123      	str	r3, [r4, #16]
 800e364:	e7f1      	b.n	800e34a <_scanf_float+0x2aa>
 800e366:	9802      	ldr	r0, [sp, #8]
 800e368:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e36c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e370:	9002      	str	r0, [sp, #8]
 800e372:	463a      	mov	r2, r7
 800e374:	4640      	mov	r0, r8
 800e376:	4798      	blx	r3
 800e378:	6923      	ldr	r3, [r4, #16]
 800e37a:	3b01      	subs	r3, #1
 800e37c:	6123      	str	r3, [r4, #16]
 800e37e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e382:	fa5f fa8a 	uxtb.w	sl, sl
 800e386:	f1ba 0f02 	cmp.w	sl, #2
 800e38a:	d1ec      	bne.n	800e366 <_scanf_float+0x2c6>
 800e38c:	3d03      	subs	r5, #3
 800e38e:	b2ed      	uxtb	r5, r5
 800e390:	1b76      	subs	r6, r6, r5
 800e392:	6823      	ldr	r3, [r4, #0]
 800e394:	05da      	lsls	r2, r3, #23
 800e396:	d52f      	bpl.n	800e3f8 <_scanf_float+0x358>
 800e398:	055b      	lsls	r3, r3, #21
 800e39a:	d510      	bpl.n	800e3be <_scanf_float+0x31e>
 800e39c:	455e      	cmp	r6, fp
 800e39e:	f67f aebf 	bls.w	800e120 <_scanf_float+0x80>
 800e3a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e3a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e3aa:	463a      	mov	r2, r7
 800e3ac:	4640      	mov	r0, r8
 800e3ae:	4798      	blx	r3
 800e3b0:	6923      	ldr	r3, [r4, #16]
 800e3b2:	3b01      	subs	r3, #1
 800e3b4:	6123      	str	r3, [r4, #16]
 800e3b6:	e7f1      	b.n	800e39c <_scanf_float+0x2fc>
 800e3b8:	46aa      	mov	sl, r5
 800e3ba:	9602      	str	r6, [sp, #8]
 800e3bc:	e7df      	b.n	800e37e <_scanf_float+0x2de>
 800e3be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e3c2:	6923      	ldr	r3, [r4, #16]
 800e3c4:	2965      	cmp	r1, #101	; 0x65
 800e3c6:	f103 33ff 	add.w	r3, r3, #4294967295
 800e3ca:	f106 35ff 	add.w	r5, r6, #4294967295
 800e3ce:	6123      	str	r3, [r4, #16]
 800e3d0:	d00c      	beq.n	800e3ec <_scanf_float+0x34c>
 800e3d2:	2945      	cmp	r1, #69	; 0x45
 800e3d4:	d00a      	beq.n	800e3ec <_scanf_float+0x34c>
 800e3d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e3da:	463a      	mov	r2, r7
 800e3dc:	4640      	mov	r0, r8
 800e3de:	4798      	blx	r3
 800e3e0:	6923      	ldr	r3, [r4, #16]
 800e3e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e3e6:	3b01      	subs	r3, #1
 800e3e8:	1eb5      	subs	r5, r6, #2
 800e3ea:	6123      	str	r3, [r4, #16]
 800e3ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e3f0:	463a      	mov	r2, r7
 800e3f2:	4640      	mov	r0, r8
 800e3f4:	4798      	blx	r3
 800e3f6:	462e      	mov	r6, r5
 800e3f8:	6825      	ldr	r5, [r4, #0]
 800e3fa:	f015 0510 	ands.w	r5, r5, #16
 800e3fe:	d158      	bne.n	800e4b2 <_scanf_float+0x412>
 800e400:	7035      	strb	r5, [r6, #0]
 800e402:	6823      	ldr	r3, [r4, #0]
 800e404:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e40c:	d11c      	bne.n	800e448 <_scanf_float+0x3a8>
 800e40e:	9b01      	ldr	r3, [sp, #4]
 800e410:	454b      	cmp	r3, r9
 800e412:	eba3 0209 	sub.w	r2, r3, r9
 800e416:	d124      	bne.n	800e462 <_scanf_float+0x3c2>
 800e418:	2200      	movs	r2, #0
 800e41a:	4659      	mov	r1, fp
 800e41c:	4640      	mov	r0, r8
 800e41e:	f7ff f9c7 	bl	800d7b0 <_strtod_r>
 800e422:	9b03      	ldr	r3, [sp, #12]
 800e424:	6821      	ldr	r1, [r4, #0]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	f011 0f02 	tst.w	r1, #2
 800e42c:	ec57 6b10 	vmov	r6, r7, d0
 800e430:	f103 0204 	add.w	r2, r3, #4
 800e434:	d020      	beq.n	800e478 <_scanf_float+0x3d8>
 800e436:	9903      	ldr	r1, [sp, #12]
 800e438:	600a      	str	r2, [r1, #0]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	e9c3 6700 	strd	r6, r7, [r3]
 800e440:	68e3      	ldr	r3, [r4, #12]
 800e442:	3301      	adds	r3, #1
 800e444:	60e3      	str	r3, [r4, #12]
 800e446:	e66c      	b.n	800e122 <_scanf_float+0x82>
 800e448:	9b04      	ldr	r3, [sp, #16]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d0e4      	beq.n	800e418 <_scanf_float+0x378>
 800e44e:	9905      	ldr	r1, [sp, #20]
 800e450:	230a      	movs	r3, #10
 800e452:	462a      	mov	r2, r5
 800e454:	3101      	adds	r1, #1
 800e456:	4640      	mov	r0, r8
 800e458:	f002 f97a 	bl	8010750 <_strtol_r>
 800e45c:	9b04      	ldr	r3, [sp, #16]
 800e45e:	9e05      	ldr	r6, [sp, #20]
 800e460:	1ac2      	subs	r2, r0, r3
 800e462:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e466:	429e      	cmp	r6, r3
 800e468:	bf28      	it	cs
 800e46a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e46e:	4912      	ldr	r1, [pc, #72]	; (800e4b8 <_scanf_float+0x418>)
 800e470:	4630      	mov	r0, r6
 800e472:	f000 f8e7 	bl	800e644 <siprintf>
 800e476:	e7cf      	b.n	800e418 <_scanf_float+0x378>
 800e478:	f011 0f04 	tst.w	r1, #4
 800e47c:	9903      	ldr	r1, [sp, #12]
 800e47e:	600a      	str	r2, [r1, #0]
 800e480:	d1db      	bne.n	800e43a <_scanf_float+0x39a>
 800e482:	f8d3 8000 	ldr.w	r8, [r3]
 800e486:	ee10 2a10 	vmov	r2, s0
 800e48a:	ee10 0a10 	vmov	r0, s0
 800e48e:	463b      	mov	r3, r7
 800e490:	4639      	mov	r1, r7
 800e492:	f7f2 fb5b 	bl	8000b4c <__aeabi_dcmpun>
 800e496:	b128      	cbz	r0, 800e4a4 <_scanf_float+0x404>
 800e498:	4808      	ldr	r0, [pc, #32]	; (800e4bc <_scanf_float+0x41c>)
 800e49a:	f000 f9f1 	bl	800e880 <nanf>
 800e49e:	ed88 0a00 	vstr	s0, [r8]
 800e4a2:	e7cd      	b.n	800e440 <_scanf_float+0x3a0>
 800e4a4:	4630      	mov	r0, r6
 800e4a6:	4639      	mov	r1, r7
 800e4a8:	f7f2 fbae 	bl	8000c08 <__aeabi_d2f>
 800e4ac:	f8c8 0000 	str.w	r0, [r8]
 800e4b0:	e7c6      	b.n	800e440 <_scanf_float+0x3a0>
 800e4b2:	2500      	movs	r5, #0
 800e4b4:	e635      	b.n	800e122 <_scanf_float+0x82>
 800e4b6:	bf00      	nop
 800e4b8:	08013964 	.word	0x08013964
 800e4bc:	08013d01 	.word	0x08013d01

0800e4c0 <std>:
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	b510      	push	{r4, lr}
 800e4c4:	4604      	mov	r4, r0
 800e4c6:	e9c0 3300 	strd	r3, r3, [r0]
 800e4ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e4ce:	6083      	str	r3, [r0, #8]
 800e4d0:	8181      	strh	r1, [r0, #12]
 800e4d2:	6643      	str	r3, [r0, #100]	; 0x64
 800e4d4:	81c2      	strh	r2, [r0, #14]
 800e4d6:	6183      	str	r3, [r0, #24]
 800e4d8:	4619      	mov	r1, r3
 800e4da:	2208      	movs	r2, #8
 800e4dc:	305c      	adds	r0, #92	; 0x5c
 800e4de:	f000 f914 	bl	800e70a <memset>
 800e4e2:	4b0d      	ldr	r3, [pc, #52]	; (800e518 <std+0x58>)
 800e4e4:	6263      	str	r3, [r4, #36]	; 0x24
 800e4e6:	4b0d      	ldr	r3, [pc, #52]	; (800e51c <std+0x5c>)
 800e4e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e4ea:	4b0d      	ldr	r3, [pc, #52]	; (800e520 <std+0x60>)
 800e4ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e4ee:	4b0d      	ldr	r3, [pc, #52]	; (800e524 <std+0x64>)
 800e4f0:	6323      	str	r3, [r4, #48]	; 0x30
 800e4f2:	4b0d      	ldr	r3, [pc, #52]	; (800e528 <std+0x68>)
 800e4f4:	6224      	str	r4, [r4, #32]
 800e4f6:	429c      	cmp	r4, r3
 800e4f8:	d006      	beq.n	800e508 <std+0x48>
 800e4fa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e4fe:	4294      	cmp	r4, r2
 800e500:	d002      	beq.n	800e508 <std+0x48>
 800e502:	33d0      	adds	r3, #208	; 0xd0
 800e504:	429c      	cmp	r4, r3
 800e506:	d105      	bne.n	800e514 <std+0x54>
 800e508:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e50c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e510:	f000 b99a 	b.w	800e848 <__retarget_lock_init_recursive>
 800e514:	bd10      	pop	{r4, pc}
 800e516:	bf00      	nop
 800e518:	0800e685 	.word	0x0800e685
 800e51c:	0800e6a7 	.word	0x0800e6a7
 800e520:	0800e6df 	.word	0x0800e6df
 800e524:	0800e703 	.word	0x0800e703
 800e528:	20000d90 	.word	0x20000d90

0800e52c <stdio_exit_handler>:
 800e52c:	4a02      	ldr	r2, [pc, #8]	; (800e538 <stdio_exit_handler+0xc>)
 800e52e:	4903      	ldr	r1, [pc, #12]	; (800e53c <stdio_exit_handler+0x10>)
 800e530:	4803      	ldr	r0, [pc, #12]	; (800e540 <stdio_exit_handler+0x14>)
 800e532:	f000 b869 	b.w	800e608 <_fwalk_sglue>
 800e536:	bf00      	nop
 800e538:	2000003c 	.word	0x2000003c
 800e53c:	08010b2d 	.word	0x08010b2d
 800e540:	200001b4 	.word	0x200001b4

0800e544 <cleanup_stdio>:
 800e544:	6841      	ldr	r1, [r0, #4]
 800e546:	4b0c      	ldr	r3, [pc, #48]	; (800e578 <cleanup_stdio+0x34>)
 800e548:	4299      	cmp	r1, r3
 800e54a:	b510      	push	{r4, lr}
 800e54c:	4604      	mov	r4, r0
 800e54e:	d001      	beq.n	800e554 <cleanup_stdio+0x10>
 800e550:	f002 faec 	bl	8010b2c <_fflush_r>
 800e554:	68a1      	ldr	r1, [r4, #8]
 800e556:	4b09      	ldr	r3, [pc, #36]	; (800e57c <cleanup_stdio+0x38>)
 800e558:	4299      	cmp	r1, r3
 800e55a:	d002      	beq.n	800e562 <cleanup_stdio+0x1e>
 800e55c:	4620      	mov	r0, r4
 800e55e:	f002 fae5 	bl	8010b2c <_fflush_r>
 800e562:	68e1      	ldr	r1, [r4, #12]
 800e564:	4b06      	ldr	r3, [pc, #24]	; (800e580 <cleanup_stdio+0x3c>)
 800e566:	4299      	cmp	r1, r3
 800e568:	d004      	beq.n	800e574 <cleanup_stdio+0x30>
 800e56a:	4620      	mov	r0, r4
 800e56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e570:	f002 badc 	b.w	8010b2c <_fflush_r>
 800e574:	bd10      	pop	{r4, pc}
 800e576:	bf00      	nop
 800e578:	20000d90 	.word	0x20000d90
 800e57c:	20000df8 	.word	0x20000df8
 800e580:	20000e60 	.word	0x20000e60

0800e584 <global_stdio_init.part.0>:
 800e584:	b510      	push	{r4, lr}
 800e586:	4b0b      	ldr	r3, [pc, #44]	; (800e5b4 <global_stdio_init.part.0+0x30>)
 800e588:	4c0b      	ldr	r4, [pc, #44]	; (800e5b8 <global_stdio_init.part.0+0x34>)
 800e58a:	4a0c      	ldr	r2, [pc, #48]	; (800e5bc <global_stdio_init.part.0+0x38>)
 800e58c:	601a      	str	r2, [r3, #0]
 800e58e:	4620      	mov	r0, r4
 800e590:	2200      	movs	r2, #0
 800e592:	2104      	movs	r1, #4
 800e594:	f7ff ff94 	bl	800e4c0 <std>
 800e598:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e59c:	2201      	movs	r2, #1
 800e59e:	2109      	movs	r1, #9
 800e5a0:	f7ff ff8e 	bl	800e4c0 <std>
 800e5a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e5a8:	2202      	movs	r2, #2
 800e5aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5ae:	2112      	movs	r1, #18
 800e5b0:	f7ff bf86 	b.w	800e4c0 <std>
 800e5b4:	20000ec8 	.word	0x20000ec8
 800e5b8:	20000d90 	.word	0x20000d90
 800e5bc:	0800e52d 	.word	0x0800e52d

0800e5c0 <__sfp_lock_acquire>:
 800e5c0:	4801      	ldr	r0, [pc, #4]	; (800e5c8 <__sfp_lock_acquire+0x8>)
 800e5c2:	f000 b942 	b.w	800e84a <__retarget_lock_acquire_recursive>
 800e5c6:	bf00      	nop
 800e5c8:	20000ed1 	.word	0x20000ed1

0800e5cc <__sfp_lock_release>:
 800e5cc:	4801      	ldr	r0, [pc, #4]	; (800e5d4 <__sfp_lock_release+0x8>)
 800e5ce:	f000 b93d 	b.w	800e84c <__retarget_lock_release_recursive>
 800e5d2:	bf00      	nop
 800e5d4:	20000ed1 	.word	0x20000ed1

0800e5d8 <__sinit>:
 800e5d8:	b510      	push	{r4, lr}
 800e5da:	4604      	mov	r4, r0
 800e5dc:	f7ff fff0 	bl	800e5c0 <__sfp_lock_acquire>
 800e5e0:	6a23      	ldr	r3, [r4, #32]
 800e5e2:	b11b      	cbz	r3, 800e5ec <__sinit+0x14>
 800e5e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5e8:	f7ff bff0 	b.w	800e5cc <__sfp_lock_release>
 800e5ec:	4b04      	ldr	r3, [pc, #16]	; (800e600 <__sinit+0x28>)
 800e5ee:	6223      	str	r3, [r4, #32]
 800e5f0:	4b04      	ldr	r3, [pc, #16]	; (800e604 <__sinit+0x2c>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d1f5      	bne.n	800e5e4 <__sinit+0xc>
 800e5f8:	f7ff ffc4 	bl	800e584 <global_stdio_init.part.0>
 800e5fc:	e7f2      	b.n	800e5e4 <__sinit+0xc>
 800e5fe:	bf00      	nop
 800e600:	0800e545 	.word	0x0800e545
 800e604:	20000ec8 	.word	0x20000ec8

0800e608 <_fwalk_sglue>:
 800e608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e60c:	4607      	mov	r7, r0
 800e60e:	4688      	mov	r8, r1
 800e610:	4614      	mov	r4, r2
 800e612:	2600      	movs	r6, #0
 800e614:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e618:	f1b9 0901 	subs.w	r9, r9, #1
 800e61c:	d505      	bpl.n	800e62a <_fwalk_sglue+0x22>
 800e61e:	6824      	ldr	r4, [r4, #0]
 800e620:	2c00      	cmp	r4, #0
 800e622:	d1f7      	bne.n	800e614 <_fwalk_sglue+0xc>
 800e624:	4630      	mov	r0, r6
 800e626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e62a:	89ab      	ldrh	r3, [r5, #12]
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	d907      	bls.n	800e640 <_fwalk_sglue+0x38>
 800e630:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e634:	3301      	adds	r3, #1
 800e636:	d003      	beq.n	800e640 <_fwalk_sglue+0x38>
 800e638:	4629      	mov	r1, r5
 800e63a:	4638      	mov	r0, r7
 800e63c:	47c0      	blx	r8
 800e63e:	4306      	orrs	r6, r0
 800e640:	3568      	adds	r5, #104	; 0x68
 800e642:	e7e9      	b.n	800e618 <_fwalk_sglue+0x10>

0800e644 <siprintf>:
 800e644:	b40e      	push	{r1, r2, r3}
 800e646:	b500      	push	{lr}
 800e648:	b09c      	sub	sp, #112	; 0x70
 800e64a:	ab1d      	add	r3, sp, #116	; 0x74
 800e64c:	9002      	str	r0, [sp, #8]
 800e64e:	9006      	str	r0, [sp, #24]
 800e650:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e654:	4809      	ldr	r0, [pc, #36]	; (800e67c <siprintf+0x38>)
 800e656:	9107      	str	r1, [sp, #28]
 800e658:	9104      	str	r1, [sp, #16]
 800e65a:	4909      	ldr	r1, [pc, #36]	; (800e680 <siprintf+0x3c>)
 800e65c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e660:	9105      	str	r1, [sp, #20]
 800e662:	6800      	ldr	r0, [r0, #0]
 800e664:	9301      	str	r3, [sp, #4]
 800e666:	a902      	add	r1, sp, #8
 800e668:	f002 f8dc 	bl	8010824 <_svfiprintf_r>
 800e66c:	9b02      	ldr	r3, [sp, #8]
 800e66e:	2200      	movs	r2, #0
 800e670:	701a      	strb	r2, [r3, #0]
 800e672:	b01c      	add	sp, #112	; 0x70
 800e674:	f85d eb04 	ldr.w	lr, [sp], #4
 800e678:	b003      	add	sp, #12
 800e67a:	4770      	bx	lr
 800e67c:	20000200 	.word	0x20000200
 800e680:	ffff0208 	.word	0xffff0208

0800e684 <__sread>:
 800e684:	b510      	push	{r4, lr}
 800e686:	460c      	mov	r4, r1
 800e688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e68c:	f000 f87e 	bl	800e78c <_read_r>
 800e690:	2800      	cmp	r0, #0
 800e692:	bfab      	itete	ge
 800e694:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e696:	89a3      	ldrhlt	r3, [r4, #12]
 800e698:	181b      	addge	r3, r3, r0
 800e69a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e69e:	bfac      	ite	ge
 800e6a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e6a2:	81a3      	strhlt	r3, [r4, #12]
 800e6a4:	bd10      	pop	{r4, pc}

0800e6a6 <__swrite>:
 800e6a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6aa:	461f      	mov	r7, r3
 800e6ac:	898b      	ldrh	r3, [r1, #12]
 800e6ae:	05db      	lsls	r3, r3, #23
 800e6b0:	4605      	mov	r5, r0
 800e6b2:	460c      	mov	r4, r1
 800e6b4:	4616      	mov	r6, r2
 800e6b6:	d505      	bpl.n	800e6c4 <__swrite+0x1e>
 800e6b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6bc:	2302      	movs	r3, #2
 800e6be:	2200      	movs	r2, #0
 800e6c0:	f000 f852 	bl	800e768 <_lseek_r>
 800e6c4:	89a3      	ldrh	r3, [r4, #12]
 800e6c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e6ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e6ce:	81a3      	strh	r3, [r4, #12]
 800e6d0:	4632      	mov	r2, r6
 800e6d2:	463b      	mov	r3, r7
 800e6d4:	4628      	mov	r0, r5
 800e6d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6da:	f000 b879 	b.w	800e7d0 <_write_r>

0800e6de <__sseek>:
 800e6de:	b510      	push	{r4, lr}
 800e6e0:	460c      	mov	r4, r1
 800e6e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6e6:	f000 f83f 	bl	800e768 <_lseek_r>
 800e6ea:	1c43      	adds	r3, r0, #1
 800e6ec:	89a3      	ldrh	r3, [r4, #12]
 800e6ee:	bf15      	itete	ne
 800e6f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800e6f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e6f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e6fa:	81a3      	strheq	r3, [r4, #12]
 800e6fc:	bf18      	it	ne
 800e6fe:	81a3      	strhne	r3, [r4, #12]
 800e700:	bd10      	pop	{r4, pc}

0800e702 <__sclose>:
 800e702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e706:	f000 b81f 	b.w	800e748 <_close_r>

0800e70a <memset>:
 800e70a:	4402      	add	r2, r0
 800e70c:	4603      	mov	r3, r0
 800e70e:	4293      	cmp	r3, r2
 800e710:	d100      	bne.n	800e714 <memset+0xa>
 800e712:	4770      	bx	lr
 800e714:	f803 1b01 	strb.w	r1, [r3], #1
 800e718:	e7f9      	b.n	800e70e <memset+0x4>

0800e71a <strncmp>:
 800e71a:	b510      	push	{r4, lr}
 800e71c:	b16a      	cbz	r2, 800e73a <strncmp+0x20>
 800e71e:	3901      	subs	r1, #1
 800e720:	1884      	adds	r4, r0, r2
 800e722:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e726:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d103      	bne.n	800e736 <strncmp+0x1c>
 800e72e:	42a0      	cmp	r0, r4
 800e730:	d001      	beq.n	800e736 <strncmp+0x1c>
 800e732:	2a00      	cmp	r2, #0
 800e734:	d1f5      	bne.n	800e722 <strncmp+0x8>
 800e736:	1ad0      	subs	r0, r2, r3
 800e738:	bd10      	pop	{r4, pc}
 800e73a:	4610      	mov	r0, r2
 800e73c:	e7fc      	b.n	800e738 <strncmp+0x1e>
	...

0800e740 <_localeconv_r>:
 800e740:	4800      	ldr	r0, [pc, #0]	; (800e744 <_localeconv_r+0x4>)
 800e742:	4770      	bx	lr
 800e744:	20000138 	.word	0x20000138

0800e748 <_close_r>:
 800e748:	b538      	push	{r3, r4, r5, lr}
 800e74a:	4d06      	ldr	r5, [pc, #24]	; (800e764 <_close_r+0x1c>)
 800e74c:	2300      	movs	r3, #0
 800e74e:	4604      	mov	r4, r0
 800e750:	4608      	mov	r0, r1
 800e752:	602b      	str	r3, [r5, #0]
 800e754:	f7f3 ff3d 	bl	80025d2 <_close>
 800e758:	1c43      	adds	r3, r0, #1
 800e75a:	d102      	bne.n	800e762 <_close_r+0x1a>
 800e75c:	682b      	ldr	r3, [r5, #0]
 800e75e:	b103      	cbz	r3, 800e762 <_close_r+0x1a>
 800e760:	6023      	str	r3, [r4, #0]
 800e762:	bd38      	pop	{r3, r4, r5, pc}
 800e764:	20000ecc 	.word	0x20000ecc

0800e768 <_lseek_r>:
 800e768:	b538      	push	{r3, r4, r5, lr}
 800e76a:	4d07      	ldr	r5, [pc, #28]	; (800e788 <_lseek_r+0x20>)
 800e76c:	4604      	mov	r4, r0
 800e76e:	4608      	mov	r0, r1
 800e770:	4611      	mov	r1, r2
 800e772:	2200      	movs	r2, #0
 800e774:	602a      	str	r2, [r5, #0]
 800e776:	461a      	mov	r2, r3
 800e778:	f7f3 ff52 	bl	8002620 <_lseek>
 800e77c:	1c43      	adds	r3, r0, #1
 800e77e:	d102      	bne.n	800e786 <_lseek_r+0x1e>
 800e780:	682b      	ldr	r3, [r5, #0]
 800e782:	b103      	cbz	r3, 800e786 <_lseek_r+0x1e>
 800e784:	6023      	str	r3, [r4, #0]
 800e786:	bd38      	pop	{r3, r4, r5, pc}
 800e788:	20000ecc 	.word	0x20000ecc

0800e78c <_read_r>:
 800e78c:	b538      	push	{r3, r4, r5, lr}
 800e78e:	4d07      	ldr	r5, [pc, #28]	; (800e7ac <_read_r+0x20>)
 800e790:	4604      	mov	r4, r0
 800e792:	4608      	mov	r0, r1
 800e794:	4611      	mov	r1, r2
 800e796:	2200      	movs	r2, #0
 800e798:	602a      	str	r2, [r5, #0]
 800e79a:	461a      	mov	r2, r3
 800e79c:	f7f3 fee0 	bl	8002560 <_read>
 800e7a0:	1c43      	adds	r3, r0, #1
 800e7a2:	d102      	bne.n	800e7aa <_read_r+0x1e>
 800e7a4:	682b      	ldr	r3, [r5, #0]
 800e7a6:	b103      	cbz	r3, 800e7aa <_read_r+0x1e>
 800e7a8:	6023      	str	r3, [r4, #0]
 800e7aa:	bd38      	pop	{r3, r4, r5, pc}
 800e7ac:	20000ecc 	.word	0x20000ecc

0800e7b0 <_sbrk_r>:
 800e7b0:	b538      	push	{r3, r4, r5, lr}
 800e7b2:	4d06      	ldr	r5, [pc, #24]	; (800e7cc <_sbrk_r+0x1c>)
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	4604      	mov	r4, r0
 800e7b8:	4608      	mov	r0, r1
 800e7ba:	602b      	str	r3, [r5, #0]
 800e7bc:	f7f3 ff3e 	bl	800263c <_sbrk>
 800e7c0:	1c43      	adds	r3, r0, #1
 800e7c2:	d102      	bne.n	800e7ca <_sbrk_r+0x1a>
 800e7c4:	682b      	ldr	r3, [r5, #0]
 800e7c6:	b103      	cbz	r3, 800e7ca <_sbrk_r+0x1a>
 800e7c8:	6023      	str	r3, [r4, #0]
 800e7ca:	bd38      	pop	{r3, r4, r5, pc}
 800e7cc:	20000ecc 	.word	0x20000ecc

0800e7d0 <_write_r>:
 800e7d0:	b538      	push	{r3, r4, r5, lr}
 800e7d2:	4d07      	ldr	r5, [pc, #28]	; (800e7f0 <_write_r+0x20>)
 800e7d4:	4604      	mov	r4, r0
 800e7d6:	4608      	mov	r0, r1
 800e7d8:	4611      	mov	r1, r2
 800e7da:	2200      	movs	r2, #0
 800e7dc:	602a      	str	r2, [r5, #0]
 800e7de:	461a      	mov	r2, r3
 800e7e0:	f7f3 fedb 	bl	800259a <_write>
 800e7e4:	1c43      	adds	r3, r0, #1
 800e7e6:	d102      	bne.n	800e7ee <_write_r+0x1e>
 800e7e8:	682b      	ldr	r3, [r5, #0]
 800e7ea:	b103      	cbz	r3, 800e7ee <_write_r+0x1e>
 800e7ec:	6023      	str	r3, [r4, #0]
 800e7ee:	bd38      	pop	{r3, r4, r5, pc}
 800e7f0:	20000ecc 	.word	0x20000ecc

0800e7f4 <__errno>:
 800e7f4:	4b01      	ldr	r3, [pc, #4]	; (800e7fc <__errno+0x8>)
 800e7f6:	6818      	ldr	r0, [r3, #0]
 800e7f8:	4770      	bx	lr
 800e7fa:	bf00      	nop
 800e7fc:	20000200 	.word	0x20000200

0800e800 <__libc_init_array>:
 800e800:	b570      	push	{r4, r5, r6, lr}
 800e802:	4d0d      	ldr	r5, [pc, #52]	; (800e838 <__libc_init_array+0x38>)
 800e804:	4c0d      	ldr	r4, [pc, #52]	; (800e83c <__libc_init_array+0x3c>)
 800e806:	1b64      	subs	r4, r4, r5
 800e808:	10a4      	asrs	r4, r4, #2
 800e80a:	2600      	movs	r6, #0
 800e80c:	42a6      	cmp	r6, r4
 800e80e:	d109      	bne.n	800e824 <__libc_init_array+0x24>
 800e810:	4d0b      	ldr	r5, [pc, #44]	; (800e840 <__libc_init_array+0x40>)
 800e812:	4c0c      	ldr	r4, [pc, #48]	; (800e844 <__libc_init_array+0x44>)
 800e814:	f005 f810 	bl	8013838 <_init>
 800e818:	1b64      	subs	r4, r4, r5
 800e81a:	10a4      	asrs	r4, r4, #2
 800e81c:	2600      	movs	r6, #0
 800e81e:	42a6      	cmp	r6, r4
 800e820:	d105      	bne.n	800e82e <__libc_init_array+0x2e>
 800e822:	bd70      	pop	{r4, r5, r6, pc}
 800e824:	f855 3b04 	ldr.w	r3, [r5], #4
 800e828:	4798      	blx	r3
 800e82a:	3601      	adds	r6, #1
 800e82c:	e7ee      	b.n	800e80c <__libc_init_array+0xc>
 800e82e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e832:	4798      	blx	r3
 800e834:	3601      	adds	r6, #1
 800e836:	e7f2      	b.n	800e81e <__libc_init_array+0x1e>
 800e838:	08013f98 	.word	0x08013f98
 800e83c:	08013f98 	.word	0x08013f98
 800e840:	08013f98 	.word	0x08013f98
 800e844:	08013f9c 	.word	0x08013f9c

0800e848 <__retarget_lock_init_recursive>:
 800e848:	4770      	bx	lr

0800e84a <__retarget_lock_acquire_recursive>:
 800e84a:	4770      	bx	lr

0800e84c <__retarget_lock_release_recursive>:
 800e84c:	4770      	bx	lr

0800e84e <memcpy>:
 800e84e:	440a      	add	r2, r1
 800e850:	4291      	cmp	r1, r2
 800e852:	f100 33ff 	add.w	r3, r0, #4294967295
 800e856:	d100      	bne.n	800e85a <memcpy+0xc>
 800e858:	4770      	bx	lr
 800e85a:	b510      	push	{r4, lr}
 800e85c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e860:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e864:	4291      	cmp	r1, r2
 800e866:	d1f9      	bne.n	800e85c <memcpy+0xe>
 800e868:	bd10      	pop	{r4, pc}
 800e86a:	0000      	movs	r0, r0
 800e86c:	0000      	movs	r0, r0
	...

0800e870 <nan>:
 800e870:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e878 <nan+0x8>
 800e874:	4770      	bx	lr
 800e876:	bf00      	nop
 800e878:	00000000 	.word	0x00000000
 800e87c:	7ff80000 	.word	0x7ff80000

0800e880 <nanf>:
 800e880:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e888 <nanf+0x8>
 800e884:	4770      	bx	lr
 800e886:	bf00      	nop
 800e888:	7fc00000 	.word	0x7fc00000

0800e88c <quorem>:
 800e88c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e890:	6903      	ldr	r3, [r0, #16]
 800e892:	690c      	ldr	r4, [r1, #16]
 800e894:	42a3      	cmp	r3, r4
 800e896:	4607      	mov	r7, r0
 800e898:	db7e      	blt.n	800e998 <quorem+0x10c>
 800e89a:	3c01      	subs	r4, #1
 800e89c:	f101 0814 	add.w	r8, r1, #20
 800e8a0:	f100 0514 	add.w	r5, r0, #20
 800e8a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e8a8:	9301      	str	r3, [sp, #4]
 800e8aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e8ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e8b2:	3301      	adds	r3, #1
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e8ba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e8be:	fbb2 f6f3 	udiv	r6, r2, r3
 800e8c2:	d331      	bcc.n	800e928 <quorem+0x9c>
 800e8c4:	f04f 0e00 	mov.w	lr, #0
 800e8c8:	4640      	mov	r0, r8
 800e8ca:	46ac      	mov	ip, r5
 800e8cc:	46f2      	mov	sl, lr
 800e8ce:	f850 2b04 	ldr.w	r2, [r0], #4
 800e8d2:	b293      	uxth	r3, r2
 800e8d4:	fb06 e303 	mla	r3, r6, r3, lr
 800e8d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e8dc:	0c1a      	lsrs	r2, r3, #16
 800e8de:	b29b      	uxth	r3, r3
 800e8e0:	ebaa 0303 	sub.w	r3, sl, r3
 800e8e4:	f8dc a000 	ldr.w	sl, [ip]
 800e8e8:	fa13 f38a 	uxtah	r3, r3, sl
 800e8ec:	fb06 220e 	mla	r2, r6, lr, r2
 800e8f0:	9300      	str	r3, [sp, #0]
 800e8f2:	9b00      	ldr	r3, [sp, #0]
 800e8f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e8f8:	b292      	uxth	r2, r2
 800e8fa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e8fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e902:	f8bd 3000 	ldrh.w	r3, [sp]
 800e906:	4581      	cmp	r9, r0
 800e908:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e90c:	f84c 3b04 	str.w	r3, [ip], #4
 800e910:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e914:	d2db      	bcs.n	800e8ce <quorem+0x42>
 800e916:	f855 300b 	ldr.w	r3, [r5, fp]
 800e91a:	b92b      	cbnz	r3, 800e928 <quorem+0x9c>
 800e91c:	9b01      	ldr	r3, [sp, #4]
 800e91e:	3b04      	subs	r3, #4
 800e920:	429d      	cmp	r5, r3
 800e922:	461a      	mov	r2, r3
 800e924:	d32c      	bcc.n	800e980 <quorem+0xf4>
 800e926:	613c      	str	r4, [r7, #16]
 800e928:	4638      	mov	r0, r7
 800e92a:	f001 fca7 	bl	801027c <__mcmp>
 800e92e:	2800      	cmp	r0, #0
 800e930:	db22      	blt.n	800e978 <quorem+0xec>
 800e932:	3601      	adds	r6, #1
 800e934:	4629      	mov	r1, r5
 800e936:	2000      	movs	r0, #0
 800e938:	f858 2b04 	ldr.w	r2, [r8], #4
 800e93c:	f8d1 c000 	ldr.w	ip, [r1]
 800e940:	b293      	uxth	r3, r2
 800e942:	1ac3      	subs	r3, r0, r3
 800e944:	0c12      	lsrs	r2, r2, #16
 800e946:	fa13 f38c 	uxtah	r3, r3, ip
 800e94a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e94e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e952:	b29b      	uxth	r3, r3
 800e954:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e958:	45c1      	cmp	r9, r8
 800e95a:	f841 3b04 	str.w	r3, [r1], #4
 800e95e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e962:	d2e9      	bcs.n	800e938 <quorem+0xac>
 800e964:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e968:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e96c:	b922      	cbnz	r2, 800e978 <quorem+0xec>
 800e96e:	3b04      	subs	r3, #4
 800e970:	429d      	cmp	r5, r3
 800e972:	461a      	mov	r2, r3
 800e974:	d30a      	bcc.n	800e98c <quorem+0x100>
 800e976:	613c      	str	r4, [r7, #16]
 800e978:	4630      	mov	r0, r6
 800e97a:	b003      	add	sp, #12
 800e97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e980:	6812      	ldr	r2, [r2, #0]
 800e982:	3b04      	subs	r3, #4
 800e984:	2a00      	cmp	r2, #0
 800e986:	d1ce      	bne.n	800e926 <quorem+0x9a>
 800e988:	3c01      	subs	r4, #1
 800e98a:	e7c9      	b.n	800e920 <quorem+0x94>
 800e98c:	6812      	ldr	r2, [r2, #0]
 800e98e:	3b04      	subs	r3, #4
 800e990:	2a00      	cmp	r2, #0
 800e992:	d1f0      	bne.n	800e976 <quorem+0xea>
 800e994:	3c01      	subs	r4, #1
 800e996:	e7eb      	b.n	800e970 <quorem+0xe4>
 800e998:	2000      	movs	r0, #0
 800e99a:	e7ee      	b.n	800e97a <quorem+0xee>
 800e99c:	0000      	movs	r0, r0
	...

0800e9a0 <_dtoa_r>:
 800e9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9a4:	ed2d 8b04 	vpush	{d8-d9}
 800e9a8:	69c5      	ldr	r5, [r0, #28]
 800e9aa:	b093      	sub	sp, #76	; 0x4c
 800e9ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e9b0:	ec57 6b10 	vmov	r6, r7, d0
 800e9b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e9b8:	9107      	str	r1, [sp, #28]
 800e9ba:	4604      	mov	r4, r0
 800e9bc:	920a      	str	r2, [sp, #40]	; 0x28
 800e9be:	930d      	str	r3, [sp, #52]	; 0x34
 800e9c0:	b975      	cbnz	r5, 800e9e0 <_dtoa_r+0x40>
 800e9c2:	2010      	movs	r0, #16
 800e9c4:	f7fe f82c 	bl	800ca20 <malloc>
 800e9c8:	4602      	mov	r2, r0
 800e9ca:	61e0      	str	r0, [r4, #28]
 800e9cc:	b920      	cbnz	r0, 800e9d8 <_dtoa_r+0x38>
 800e9ce:	4bae      	ldr	r3, [pc, #696]	; (800ec88 <_dtoa_r+0x2e8>)
 800e9d0:	21ef      	movs	r1, #239	; 0xef
 800e9d2:	48ae      	ldr	r0, [pc, #696]	; (800ec8c <_dtoa_r+0x2ec>)
 800e9d4:	f002 f8ec 	bl	8010bb0 <__assert_func>
 800e9d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e9dc:	6005      	str	r5, [r0, #0]
 800e9de:	60c5      	str	r5, [r0, #12]
 800e9e0:	69e3      	ldr	r3, [r4, #28]
 800e9e2:	6819      	ldr	r1, [r3, #0]
 800e9e4:	b151      	cbz	r1, 800e9fc <_dtoa_r+0x5c>
 800e9e6:	685a      	ldr	r2, [r3, #4]
 800e9e8:	604a      	str	r2, [r1, #4]
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	4093      	lsls	r3, r2
 800e9ee:	608b      	str	r3, [r1, #8]
 800e9f0:	4620      	mov	r0, r4
 800e9f2:	f001 f9bd 	bl	800fd70 <_Bfree>
 800e9f6:	69e3      	ldr	r3, [r4, #28]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	601a      	str	r2, [r3, #0]
 800e9fc:	1e3b      	subs	r3, r7, #0
 800e9fe:	bfbb      	ittet	lt
 800ea00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ea04:	9303      	strlt	r3, [sp, #12]
 800ea06:	2300      	movge	r3, #0
 800ea08:	2201      	movlt	r2, #1
 800ea0a:	bfac      	ite	ge
 800ea0c:	f8c8 3000 	strge.w	r3, [r8]
 800ea10:	f8c8 2000 	strlt.w	r2, [r8]
 800ea14:	4b9e      	ldr	r3, [pc, #632]	; (800ec90 <_dtoa_r+0x2f0>)
 800ea16:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ea1a:	ea33 0308 	bics.w	r3, r3, r8
 800ea1e:	d11b      	bne.n	800ea58 <_dtoa_r+0xb8>
 800ea20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ea22:	f242 730f 	movw	r3, #9999	; 0x270f
 800ea26:	6013      	str	r3, [r2, #0]
 800ea28:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ea2c:	4333      	orrs	r3, r6
 800ea2e:	f000 8593 	beq.w	800f558 <_dtoa_r+0xbb8>
 800ea32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea34:	b963      	cbnz	r3, 800ea50 <_dtoa_r+0xb0>
 800ea36:	4b97      	ldr	r3, [pc, #604]	; (800ec94 <_dtoa_r+0x2f4>)
 800ea38:	e027      	b.n	800ea8a <_dtoa_r+0xea>
 800ea3a:	4b97      	ldr	r3, [pc, #604]	; (800ec98 <_dtoa_r+0x2f8>)
 800ea3c:	9300      	str	r3, [sp, #0]
 800ea3e:	3308      	adds	r3, #8
 800ea40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ea42:	6013      	str	r3, [r2, #0]
 800ea44:	9800      	ldr	r0, [sp, #0]
 800ea46:	b013      	add	sp, #76	; 0x4c
 800ea48:	ecbd 8b04 	vpop	{d8-d9}
 800ea4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea50:	4b90      	ldr	r3, [pc, #576]	; (800ec94 <_dtoa_r+0x2f4>)
 800ea52:	9300      	str	r3, [sp, #0]
 800ea54:	3303      	adds	r3, #3
 800ea56:	e7f3      	b.n	800ea40 <_dtoa_r+0xa0>
 800ea58:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	ec51 0b17 	vmov	r0, r1, d7
 800ea62:	eeb0 8a47 	vmov.f32	s16, s14
 800ea66:	eef0 8a67 	vmov.f32	s17, s15
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	f7f2 f83c 	bl	8000ae8 <__aeabi_dcmpeq>
 800ea70:	4681      	mov	r9, r0
 800ea72:	b160      	cbz	r0, 800ea8e <_dtoa_r+0xee>
 800ea74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ea76:	2301      	movs	r3, #1
 800ea78:	6013      	str	r3, [r2, #0]
 800ea7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	f000 8568 	beq.w	800f552 <_dtoa_r+0xbb2>
 800ea82:	4b86      	ldr	r3, [pc, #536]	; (800ec9c <_dtoa_r+0x2fc>)
 800ea84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ea86:	6013      	str	r3, [r2, #0]
 800ea88:	3b01      	subs	r3, #1
 800ea8a:	9300      	str	r3, [sp, #0]
 800ea8c:	e7da      	b.n	800ea44 <_dtoa_r+0xa4>
 800ea8e:	aa10      	add	r2, sp, #64	; 0x40
 800ea90:	a911      	add	r1, sp, #68	; 0x44
 800ea92:	4620      	mov	r0, r4
 800ea94:	eeb0 0a48 	vmov.f32	s0, s16
 800ea98:	eef0 0a68 	vmov.f32	s1, s17
 800ea9c:	f001 fd04 	bl	80104a8 <__d2b>
 800eaa0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800eaa4:	4682      	mov	sl, r0
 800eaa6:	2d00      	cmp	r5, #0
 800eaa8:	d07f      	beq.n	800ebaa <_dtoa_r+0x20a>
 800eaaa:	ee18 3a90 	vmov	r3, s17
 800eaae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eab2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800eab6:	ec51 0b18 	vmov	r0, r1, d8
 800eaba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800eabe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800eac2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800eac6:	4619      	mov	r1, r3
 800eac8:	2200      	movs	r2, #0
 800eaca:	4b75      	ldr	r3, [pc, #468]	; (800eca0 <_dtoa_r+0x300>)
 800eacc:	f7f1 fbec 	bl	80002a8 <__aeabi_dsub>
 800ead0:	a367      	add	r3, pc, #412	; (adr r3, 800ec70 <_dtoa_r+0x2d0>)
 800ead2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead6:	f7f1 fd9f 	bl	8000618 <__aeabi_dmul>
 800eada:	a367      	add	r3, pc, #412	; (adr r3, 800ec78 <_dtoa_r+0x2d8>)
 800eadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae0:	f7f1 fbe4 	bl	80002ac <__adddf3>
 800eae4:	4606      	mov	r6, r0
 800eae6:	4628      	mov	r0, r5
 800eae8:	460f      	mov	r7, r1
 800eaea:	f7f1 fd2b 	bl	8000544 <__aeabi_i2d>
 800eaee:	a364      	add	r3, pc, #400	; (adr r3, 800ec80 <_dtoa_r+0x2e0>)
 800eaf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf4:	f7f1 fd90 	bl	8000618 <__aeabi_dmul>
 800eaf8:	4602      	mov	r2, r0
 800eafa:	460b      	mov	r3, r1
 800eafc:	4630      	mov	r0, r6
 800eafe:	4639      	mov	r1, r7
 800eb00:	f7f1 fbd4 	bl	80002ac <__adddf3>
 800eb04:	4606      	mov	r6, r0
 800eb06:	460f      	mov	r7, r1
 800eb08:	f7f2 f836 	bl	8000b78 <__aeabi_d2iz>
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	4683      	mov	fp, r0
 800eb10:	2300      	movs	r3, #0
 800eb12:	4630      	mov	r0, r6
 800eb14:	4639      	mov	r1, r7
 800eb16:	f7f1 fff1 	bl	8000afc <__aeabi_dcmplt>
 800eb1a:	b148      	cbz	r0, 800eb30 <_dtoa_r+0x190>
 800eb1c:	4658      	mov	r0, fp
 800eb1e:	f7f1 fd11 	bl	8000544 <__aeabi_i2d>
 800eb22:	4632      	mov	r2, r6
 800eb24:	463b      	mov	r3, r7
 800eb26:	f7f1 ffdf 	bl	8000ae8 <__aeabi_dcmpeq>
 800eb2a:	b908      	cbnz	r0, 800eb30 <_dtoa_r+0x190>
 800eb2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eb30:	f1bb 0f16 	cmp.w	fp, #22
 800eb34:	d857      	bhi.n	800ebe6 <_dtoa_r+0x246>
 800eb36:	4b5b      	ldr	r3, [pc, #364]	; (800eca4 <_dtoa_r+0x304>)
 800eb38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800eb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb40:	ec51 0b18 	vmov	r0, r1, d8
 800eb44:	f7f1 ffda 	bl	8000afc <__aeabi_dcmplt>
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	d04e      	beq.n	800ebea <_dtoa_r+0x24a>
 800eb4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eb50:	2300      	movs	r3, #0
 800eb52:	930c      	str	r3, [sp, #48]	; 0x30
 800eb54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb56:	1b5b      	subs	r3, r3, r5
 800eb58:	1e5a      	subs	r2, r3, #1
 800eb5a:	bf45      	ittet	mi
 800eb5c:	f1c3 0301 	rsbmi	r3, r3, #1
 800eb60:	9305      	strmi	r3, [sp, #20]
 800eb62:	2300      	movpl	r3, #0
 800eb64:	2300      	movmi	r3, #0
 800eb66:	9206      	str	r2, [sp, #24]
 800eb68:	bf54      	ite	pl
 800eb6a:	9305      	strpl	r3, [sp, #20]
 800eb6c:	9306      	strmi	r3, [sp, #24]
 800eb6e:	f1bb 0f00 	cmp.w	fp, #0
 800eb72:	db3c      	blt.n	800ebee <_dtoa_r+0x24e>
 800eb74:	9b06      	ldr	r3, [sp, #24]
 800eb76:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800eb7a:	445b      	add	r3, fp
 800eb7c:	9306      	str	r3, [sp, #24]
 800eb7e:	2300      	movs	r3, #0
 800eb80:	9308      	str	r3, [sp, #32]
 800eb82:	9b07      	ldr	r3, [sp, #28]
 800eb84:	2b09      	cmp	r3, #9
 800eb86:	d868      	bhi.n	800ec5a <_dtoa_r+0x2ba>
 800eb88:	2b05      	cmp	r3, #5
 800eb8a:	bfc4      	itt	gt
 800eb8c:	3b04      	subgt	r3, #4
 800eb8e:	9307      	strgt	r3, [sp, #28]
 800eb90:	9b07      	ldr	r3, [sp, #28]
 800eb92:	f1a3 0302 	sub.w	r3, r3, #2
 800eb96:	bfcc      	ite	gt
 800eb98:	2500      	movgt	r5, #0
 800eb9a:	2501      	movle	r5, #1
 800eb9c:	2b03      	cmp	r3, #3
 800eb9e:	f200 8085 	bhi.w	800ecac <_dtoa_r+0x30c>
 800eba2:	e8df f003 	tbb	[pc, r3]
 800eba6:	3b2e      	.short	0x3b2e
 800eba8:	5839      	.short	0x5839
 800ebaa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ebae:	441d      	add	r5, r3
 800ebb0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ebb4:	2b20      	cmp	r3, #32
 800ebb6:	bfc1      	itttt	gt
 800ebb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ebbc:	fa08 f803 	lslgt.w	r8, r8, r3
 800ebc0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ebc4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ebc8:	bfd6      	itet	le
 800ebca:	f1c3 0320 	rsble	r3, r3, #32
 800ebce:	ea48 0003 	orrgt.w	r0, r8, r3
 800ebd2:	fa06 f003 	lslle.w	r0, r6, r3
 800ebd6:	f7f1 fca5 	bl	8000524 <__aeabi_ui2d>
 800ebda:	2201      	movs	r2, #1
 800ebdc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ebe0:	3d01      	subs	r5, #1
 800ebe2:	920e      	str	r2, [sp, #56]	; 0x38
 800ebe4:	e76f      	b.n	800eac6 <_dtoa_r+0x126>
 800ebe6:	2301      	movs	r3, #1
 800ebe8:	e7b3      	b.n	800eb52 <_dtoa_r+0x1b2>
 800ebea:	900c      	str	r0, [sp, #48]	; 0x30
 800ebec:	e7b2      	b.n	800eb54 <_dtoa_r+0x1b4>
 800ebee:	9b05      	ldr	r3, [sp, #20]
 800ebf0:	eba3 030b 	sub.w	r3, r3, fp
 800ebf4:	9305      	str	r3, [sp, #20]
 800ebf6:	f1cb 0300 	rsb	r3, fp, #0
 800ebfa:	9308      	str	r3, [sp, #32]
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	930b      	str	r3, [sp, #44]	; 0x2c
 800ec00:	e7bf      	b.n	800eb82 <_dtoa_r+0x1e2>
 800ec02:	2300      	movs	r3, #0
 800ec04:	9309      	str	r3, [sp, #36]	; 0x24
 800ec06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	dc52      	bgt.n	800ecb2 <_dtoa_r+0x312>
 800ec0c:	2301      	movs	r3, #1
 800ec0e:	9301      	str	r3, [sp, #4]
 800ec10:	9304      	str	r3, [sp, #16]
 800ec12:	461a      	mov	r2, r3
 800ec14:	920a      	str	r2, [sp, #40]	; 0x28
 800ec16:	e00b      	b.n	800ec30 <_dtoa_r+0x290>
 800ec18:	2301      	movs	r3, #1
 800ec1a:	e7f3      	b.n	800ec04 <_dtoa_r+0x264>
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ec20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec22:	445b      	add	r3, fp
 800ec24:	9301      	str	r3, [sp, #4]
 800ec26:	3301      	adds	r3, #1
 800ec28:	2b01      	cmp	r3, #1
 800ec2a:	9304      	str	r3, [sp, #16]
 800ec2c:	bfb8      	it	lt
 800ec2e:	2301      	movlt	r3, #1
 800ec30:	69e0      	ldr	r0, [r4, #28]
 800ec32:	2100      	movs	r1, #0
 800ec34:	2204      	movs	r2, #4
 800ec36:	f102 0614 	add.w	r6, r2, #20
 800ec3a:	429e      	cmp	r6, r3
 800ec3c:	d93d      	bls.n	800ecba <_dtoa_r+0x31a>
 800ec3e:	6041      	str	r1, [r0, #4]
 800ec40:	4620      	mov	r0, r4
 800ec42:	f001 f855 	bl	800fcf0 <_Balloc>
 800ec46:	9000      	str	r0, [sp, #0]
 800ec48:	2800      	cmp	r0, #0
 800ec4a:	d139      	bne.n	800ecc0 <_dtoa_r+0x320>
 800ec4c:	4b16      	ldr	r3, [pc, #88]	; (800eca8 <_dtoa_r+0x308>)
 800ec4e:	4602      	mov	r2, r0
 800ec50:	f240 11af 	movw	r1, #431	; 0x1af
 800ec54:	e6bd      	b.n	800e9d2 <_dtoa_r+0x32>
 800ec56:	2301      	movs	r3, #1
 800ec58:	e7e1      	b.n	800ec1e <_dtoa_r+0x27e>
 800ec5a:	2501      	movs	r5, #1
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	9307      	str	r3, [sp, #28]
 800ec60:	9509      	str	r5, [sp, #36]	; 0x24
 800ec62:	f04f 33ff 	mov.w	r3, #4294967295
 800ec66:	9301      	str	r3, [sp, #4]
 800ec68:	9304      	str	r3, [sp, #16]
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	2312      	movs	r3, #18
 800ec6e:	e7d1      	b.n	800ec14 <_dtoa_r+0x274>
 800ec70:	636f4361 	.word	0x636f4361
 800ec74:	3fd287a7 	.word	0x3fd287a7
 800ec78:	8b60c8b3 	.word	0x8b60c8b3
 800ec7c:	3fc68a28 	.word	0x3fc68a28
 800ec80:	509f79fb 	.word	0x509f79fb
 800ec84:	3fd34413 	.word	0x3fd34413
 800ec88:	0801397e 	.word	0x0801397e
 800ec8c:	08013995 	.word	0x08013995
 800ec90:	7ff00000 	.word	0x7ff00000
 800ec94:	0801397a 	.word	0x0801397a
 800ec98:	08013971 	.word	0x08013971
 800ec9c:	08013941 	.word	0x08013941
 800eca0:	3ff80000 	.word	0x3ff80000
 800eca4:	08013ae0 	.word	0x08013ae0
 800eca8:	080139ed 	.word	0x080139ed
 800ecac:	2301      	movs	r3, #1
 800ecae:	9309      	str	r3, [sp, #36]	; 0x24
 800ecb0:	e7d7      	b.n	800ec62 <_dtoa_r+0x2c2>
 800ecb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecb4:	9301      	str	r3, [sp, #4]
 800ecb6:	9304      	str	r3, [sp, #16]
 800ecb8:	e7ba      	b.n	800ec30 <_dtoa_r+0x290>
 800ecba:	3101      	adds	r1, #1
 800ecbc:	0052      	lsls	r2, r2, #1
 800ecbe:	e7ba      	b.n	800ec36 <_dtoa_r+0x296>
 800ecc0:	69e3      	ldr	r3, [r4, #28]
 800ecc2:	9a00      	ldr	r2, [sp, #0]
 800ecc4:	601a      	str	r2, [r3, #0]
 800ecc6:	9b04      	ldr	r3, [sp, #16]
 800ecc8:	2b0e      	cmp	r3, #14
 800ecca:	f200 80a8 	bhi.w	800ee1e <_dtoa_r+0x47e>
 800ecce:	2d00      	cmp	r5, #0
 800ecd0:	f000 80a5 	beq.w	800ee1e <_dtoa_r+0x47e>
 800ecd4:	f1bb 0f00 	cmp.w	fp, #0
 800ecd8:	dd38      	ble.n	800ed4c <_dtoa_r+0x3ac>
 800ecda:	4bc0      	ldr	r3, [pc, #768]	; (800efdc <_dtoa_r+0x63c>)
 800ecdc:	f00b 020f 	and.w	r2, fp, #15
 800ece0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ece4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ece8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ecec:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ecf0:	d019      	beq.n	800ed26 <_dtoa_r+0x386>
 800ecf2:	4bbb      	ldr	r3, [pc, #748]	; (800efe0 <_dtoa_r+0x640>)
 800ecf4:	ec51 0b18 	vmov	r0, r1, d8
 800ecf8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ecfc:	f7f1 fdb6 	bl	800086c <__aeabi_ddiv>
 800ed00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed04:	f008 080f 	and.w	r8, r8, #15
 800ed08:	2503      	movs	r5, #3
 800ed0a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800efe0 <_dtoa_r+0x640>
 800ed0e:	f1b8 0f00 	cmp.w	r8, #0
 800ed12:	d10a      	bne.n	800ed2a <_dtoa_r+0x38a>
 800ed14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed18:	4632      	mov	r2, r6
 800ed1a:	463b      	mov	r3, r7
 800ed1c:	f7f1 fda6 	bl	800086c <__aeabi_ddiv>
 800ed20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed24:	e02b      	b.n	800ed7e <_dtoa_r+0x3de>
 800ed26:	2502      	movs	r5, #2
 800ed28:	e7ef      	b.n	800ed0a <_dtoa_r+0x36a>
 800ed2a:	f018 0f01 	tst.w	r8, #1
 800ed2e:	d008      	beq.n	800ed42 <_dtoa_r+0x3a2>
 800ed30:	4630      	mov	r0, r6
 800ed32:	4639      	mov	r1, r7
 800ed34:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ed38:	f7f1 fc6e 	bl	8000618 <__aeabi_dmul>
 800ed3c:	3501      	adds	r5, #1
 800ed3e:	4606      	mov	r6, r0
 800ed40:	460f      	mov	r7, r1
 800ed42:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ed46:	f109 0908 	add.w	r9, r9, #8
 800ed4a:	e7e0      	b.n	800ed0e <_dtoa_r+0x36e>
 800ed4c:	f000 809f 	beq.w	800ee8e <_dtoa_r+0x4ee>
 800ed50:	f1cb 0600 	rsb	r6, fp, #0
 800ed54:	4ba1      	ldr	r3, [pc, #644]	; (800efdc <_dtoa_r+0x63c>)
 800ed56:	4fa2      	ldr	r7, [pc, #648]	; (800efe0 <_dtoa_r+0x640>)
 800ed58:	f006 020f 	and.w	r2, r6, #15
 800ed5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed64:	ec51 0b18 	vmov	r0, r1, d8
 800ed68:	f7f1 fc56 	bl	8000618 <__aeabi_dmul>
 800ed6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed70:	1136      	asrs	r6, r6, #4
 800ed72:	2300      	movs	r3, #0
 800ed74:	2502      	movs	r5, #2
 800ed76:	2e00      	cmp	r6, #0
 800ed78:	d17e      	bne.n	800ee78 <_dtoa_r+0x4d8>
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d1d0      	bne.n	800ed20 <_dtoa_r+0x380>
 800ed7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed80:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	f000 8084 	beq.w	800ee92 <_dtoa_r+0x4f2>
 800ed8a:	4b96      	ldr	r3, [pc, #600]	; (800efe4 <_dtoa_r+0x644>)
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	4640      	mov	r0, r8
 800ed90:	4649      	mov	r1, r9
 800ed92:	f7f1 feb3 	bl	8000afc <__aeabi_dcmplt>
 800ed96:	2800      	cmp	r0, #0
 800ed98:	d07b      	beq.n	800ee92 <_dtoa_r+0x4f2>
 800ed9a:	9b04      	ldr	r3, [sp, #16]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d078      	beq.n	800ee92 <_dtoa_r+0x4f2>
 800eda0:	9b01      	ldr	r3, [sp, #4]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	dd39      	ble.n	800ee1a <_dtoa_r+0x47a>
 800eda6:	4b90      	ldr	r3, [pc, #576]	; (800efe8 <_dtoa_r+0x648>)
 800eda8:	2200      	movs	r2, #0
 800edaa:	4640      	mov	r0, r8
 800edac:	4649      	mov	r1, r9
 800edae:	f7f1 fc33 	bl	8000618 <__aeabi_dmul>
 800edb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800edb6:	9e01      	ldr	r6, [sp, #4]
 800edb8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800edbc:	3501      	adds	r5, #1
 800edbe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800edc2:	4628      	mov	r0, r5
 800edc4:	f7f1 fbbe 	bl	8000544 <__aeabi_i2d>
 800edc8:	4642      	mov	r2, r8
 800edca:	464b      	mov	r3, r9
 800edcc:	f7f1 fc24 	bl	8000618 <__aeabi_dmul>
 800edd0:	4b86      	ldr	r3, [pc, #536]	; (800efec <_dtoa_r+0x64c>)
 800edd2:	2200      	movs	r2, #0
 800edd4:	f7f1 fa6a 	bl	80002ac <__adddf3>
 800edd8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800eddc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ede0:	9303      	str	r3, [sp, #12]
 800ede2:	2e00      	cmp	r6, #0
 800ede4:	d158      	bne.n	800ee98 <_dtoa_r+0x4f8>
 800ede6:	4b82      	ldr	r3, [pc, #520]	; (800eff0 <_dtoa_r+0x650>)
 800ede8:	2200      	movs	r2, #0
 800edea:	4640      	mov	r0, r8
 800edec:	4649      	mov	r1, r9
 800edee:	f7f1 fa5b 	bl	80002a8 <__aeabi_dsub>
 800edf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800edf6:	4680      	mov	r8, r0
 800edf8:	4689      	mov	r9, r1
 800edfa:	f7f1 fe9d 	bl	8000b38 <__aeabi_dcmpgt>
 800edfe:	2800      	cmp	r0, #0
 800ee00:	f040 8296 	bne.w	800f330 <_dtoa_r+0x990>
 800ee04:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ee08:	4640      	mov	r0, r8
 800ee0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee0e:	4649      	mov	r1, r9
 800ee10:	f7f1 fe74 	bl	8000afc <__aeabi_dcmplt>
 800ee14:	2800      	cmp	r0, #0
 800ee16:	f040 8289 	bne.w	800f32c <_dtoa_r+0x98c>
 800ee1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ee1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	f2c0 814e 	blt.w	800f0c2 <_dtoa_r+0x722>
 800ee26:	f1bb 0f0e 	cmp.w	fp, #14
 800ee2a:	f300 814a 	bgt.w	800f0c2 <_dtoa_r+0x722>
 800ee2e:	4b6b      	ldr	r3, [pc, #428]	; (800efdc <_dtoa_r+0x63c>)
 800ee30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ee34:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ee38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	f280 80dc 	bge.w	800eff8 <_dtoa_r+0x658>
 800ee40:	9b04      	ldr	r3, [sp, #16]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	f300 80d8 	bgt.w	800eff8 <_dtoa_r+0x658>
 800ee48:	f040 826f 	bne.w	800f32a <_dtoa_r+0x98a>
 800ee4c:	4b68      	ldr	r3, [pc, #416]	; (800eff0 <_dtoa_r+0x650>)
 800ee4e:	2200      	movs	r2, #0
 800ee50:	4640      	mov	r0, r8
 800ee52:	4649      	mov	r1, r9
 800ee54:	f7f1 fbe0 	bl	8000618 <__aeabi_dmul>
 800ee58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ee5c:	f7f1 fe62 	bl	8000b24 <__aeabi_dcmpge>
 800ee60:	9e04      	ldr	r6, [sp, #16]
 800ee62:	4637      	mov	r7, r6
 800ee64:	2800      	cmp	r0, #0
 800ee66:	f040 8245 	bne.w	800f2f4 <_dtoa_r+0x954>
 800ee6a:	9d00      	ldr	r5, [sp, #0]
 800ee6c:	2331      	movs	r3, #49	; 0x31
 800ee6e:	f805 3b01 	strb.w	r3, [r5], #1
 800ee72:	f10b 0b01 	add.w	fp, fp, #1
 800ee76:	e241      	b.n	800f2fc <_dtoa_r+0x95c>
 800ee78:	07f2      	lsls	r2, r6, #31
 800ee7a:	d505      	bpl.n	800ee88 <_dtoa_r+0x4e8>
 800ee7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee80:	f7f1 fbca 	bl	8000618 <__aeabi_dmul>
 800ee84:	3501      	adds	r5, #1
 800ee86:	2301      	movs	r3, #1
 800ee88:	1076      	asrs	r6, r6, #1
 800ee8a:	3708      	adds	r7, #8
 800ee8c:	e773      	b.n	800ed76 <_dtoa_r+0x3d6>
 800ee8e:	2502      	movs	r5, #2
 800ee90:	e775      	b.n	800ed7e <_dtoa_r+0x3de>
 800ee92:	9e04      	ldr	r6, [sp, #16]
 800ee94:	465f      	mov	r7, fp
 800ee96:	e792      	b.n	800edbe <_dtoa_r+0x41e>
 800ee98:	9900      	ldr	r1, [sp, #0]
 800ee9a:	4b50      	ldr	r3, [pc, #320]	; (800efdc <_dtoa_r+0x63c>)
 800ee9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eea0:	4431      	add	r1, r6
 800eea2:	9102      	str	r1, [sp, #8]
 800eea4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eea6:	eeb0 9a47 	vmov.f32	s18, s14
 800eeaa:	eef0 9a67 	vmov.f32	s19, s15
 800eeae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800eeb2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eeb6:	2900      	cmp	r1, #0
 800eeb8:	d044      	beq.n	800ef44 <_dtoa_r+0x5a4>
 800eeba:	494e      	ldr	r1, [pc, #312]	; (800eff4 <_dtoa_r+0x654>)
 800eebc:	2000      	movs	r0, #0
 800eebe:	f7f1 fcd5 	bl	800086c <__aeabi_ddiv>
 800eec2:	ec53 2b19 	vmov	r2, r3, d9
 800eec6:	f7f1 f9ef 	bl	80002a8 <__aeabi_dsub>
 800eeca:	9d00      	ldr	r5, [sp, #0]
 800eecc:	ec41 0b19 	vmov	d9, r0, r1
 800eed0:	4649      	mov	r1, r9
 800eed2:	4640      	mov	r0, r8
 800eed4:	f7f1 fe50 	bl	8000b78 <__aeabi_d2iz>
 800eed8:	4606      	mov	r6, r0
 800eeda:	f7f1 fb33 	bl	8000544 <__aeabi_i2d>
 800eede:	4602      	mov	r2, r0
 800eee0:	460b      	mov	r3, r1
 800eee2:	4640      	mov	r0, r8
 800eee4:	4649      	mov	r1, r9
 800eee6:	f7f1 f9df 	bl	80002a8 <__aeabi_dsub>
 800eeea:	3630      	adds	r6, #48	; 0x30
 800eeec:	f805 6b01 	strb.w	r6, [r5], #1
 800eef0:	ec53 2b19 	vmov	r2, r3, d9
 800eef4:	4680      	mov	r8, r0
 800eef6:	4689      	mov	r9, r1
 800eef8:	f7f1 fe00 	bl	8000afc <__aeabi_dcmplt>
 800eefc:	2800      	cmp	r0, #0
 800eefe:	d164      	bne.n	800efca <_dtoa_r+0x62a>
 800ef00:	4642      	mov	r2, r8
 800ef02:	464b      	mov	r3, r9
 800ef04:	4937      	ldr	r1, [pc, #220]	; (800efe4 <_dtoa_r+0x644>)
 800ef06:	2000      	movs	r0, #0
 800ef08:	f7f1 f9ce 	bl	80002a8 <__aeabi_dsub>
 800ef0c:	ec53 2b19 	vmov	r2, r3, d9
 800ef10:	f7f1 fdf4 	bl	8000afc <__aeabi_dcmplt>
 800ef14:	2800      	cmp	r0, #0
 800ef16:	f040 80b6 	bne.w	800f086 <_dtoa_r+0x6e6>
 800ef1a:	9b02      	ldr	r3, [sp, #8]
 800ef1c:	429d      	cmp	r5, r3
 800ef1e:	f43f af7c 	beq.w	800ee1a <_dtoa_r+0x47a>
 800ef22:	4b31      	ldr	r3, [pc, #196]	; (800efe8 <_dtoa_r+0x648>)
 800ef24:	ec51 0b19 	vmov	r0, r1, d9
 800ef28:	2200      	movs	r2, #0
 800ef2a:	f7f1 fb75 	bl	8000618 <__aeabi_dmul>
 800ef2e:	4b2e      	ldr	r3, [pc, #184]	; (800efe8 <_dtoa_r+0x648>)
 800ef30:	ec41 0b19 	vmov	d9, r0, r1
 800ef34:	2200      	movs	r2, #0
 800ef36:	4640      	mov	r0, r8
 800ef38:	4649      	mov	r1, r9
 800ef3a:	f7f1 fb6d 	bl	8000618 <__aeabi_dmul>
 800ef3e:	4680      	mov	r8, r0
 800ef40:	4689      	mov	r9, r1
 800ef42:	e7c5      	b.n	800eed0 <_dtoa_r+0x530>
 800ef44:	ec51 0b17 	vmov	r0, r1, d7
 800ef48:	f7f1 fb66 	bl	8000618 <__aeabi_dmul>
 800ef4c:	9b02      	ldr	r3, [sp, #8]
 800ef4e:	9d00      	ldr	r5, [sp, #0]
 800ef50:	930f      	str	r3, [sp, #60]	; 0x3c
 800ef52:	ec41 0b19 	vmov	d9, r0, r1
 800ef56:	4649      	mov	r1, r9
 800ef58:	4640      	mov	r0, r8
 800ef5a:	f7f1 fe0d 	bl	8000b78 <__aeabi_d2iz>
 800ef5e:	4606      	mov	r6, r0
 800ef60:	f7f1 faf0 	bl	8000544 <__aeabi_i2d>
 800ef64:	3630      	adds	r6, #48	; 0x30
 800ef66:	4602      	mov	r2, r0
 800ef68:	460b      	mov	r3, r1
 800ef6a:	4640      	mov	r0, r8
 800ef6c:	4649      	mov	r1, r9
 800ef6e:	f7f1 f99b 	bl	80002a8 <__aeabi_dsub>
 800ef72:	f805 6b01 	strb.w	r6, [r5], #1
 800ef76:	9b02      	ldr	r3, [sp, #8]
 800ef78:	429d      	cmp	r5, r3
 800ef7a:	4680      	mov	r8, r0
 800ef7c:	4689      	mov	r9, r1
 800ef7e:	f04f 0200 	mov.w	r2, #0
 800ef82:	d124      	bne.n	800efce <_dtoa_r+0x62e>
 800ef84:	4b1b      	ldr	r3, [pc, #108]	; (800eff4 <_dtoa_r+0x654>)
 800ef86:	ec51 0b19 	vmov	r0, r1, d9
 800ef8a:	f7f1 f98f 	bl	80002ac <__adddf3>
 800ef8e:	4602      	mov	r2, r0
 800ef90:	460b      	mov	r3, r1
 800ef92:	4640      	mov	r0, r8
 800ef94:	4649      	mov	r1, r9
 800ef96:	f7f1 fdcf 	bl	8000b38 <__aeabi_dcmpgt>
 800ef9a:	2800      	cmp	r0, #0
 800ef9c:	d173      	bne.n	800f086 <_dtoa_r+0x6e6>
 800ef9e:	ec53 2b19 	vmov	r2, r3, d9
 800efa2:	4914      	ldr	r1, [pc, #80]	; (800eff4 <_dtoa_r+0x654>)
 800efa4:	2000      	movs	r0, #0
 800efa6:	f7f1 f97f 	bl	80002a8 <__aeabi_dsub>
 800efaa:	4602      	mov	r2, r0
 800efac:	460b      	mov	r3, r1
 800efae:	4640      	mov	r0, r8
 800efb0:	4649      	mov	r1, r9
 800efb2:	f7f1 fda3 	bl	8000afc <__aeabi_dcmplt>
 800efb6:	2800      	cmp	r0, #0
 800efb8:	f43f af2f 	beq.w	800ee1a <_dtoa_r+0x47a>
 800efbc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800efbe:	1e6b      	subs	r3, r5, #1
 800efc0:	930f      	str	r3, [sp, #60]	; 0x3c
 800efc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800efc6:	2b30      	cmp	r3, #48	; 0x30
 800efc8:	d0f8      	beq.n	800efbc <_dtoa_r+0x61c>
 800efca:	46bb      	mov	fp, r7
 800efcc:	e04a      	b.n	800f064 <_dtoa_r+0x6c4>
 800efce:	4b06      	ldr	r3, [pc, #24]	; (800efe8 <_dtoa_r+0x648>)
 800efd0:	f7f1 fb22 	bl	8000618 <__aeabi_dmul>
 800efd4:	4680      	mov	r8, r0
 800efd6:	4689      	mov	r9, r1
 800efd8:	e7bd      	b.n	800ef56 <_dtoa_r+0x5b6>
 800efda:	bf00      	nop
 800efdc:	08013ae0 	.word	0x08013ae0
 800efe0:	08013ab8 	.word	0x08013ab8
 800efe4:	3ff00000 	.word	0x3ff00000
 800efe8:	40240000 	.word	0x40240000
 800efec:	401c0000 	.word	0x401c0000
 800eff0:	40140000 	.word	0x40140000
 800eff4:	3fe00000 	.word	0x3fe00000
 800eff8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800effc:	9d00      	ldr	r5, [sp, #0]
 800effe:	4642      	mov	r2, r8
 800f000:	464b      	mov	r3, r9
 800f002:	4630      	mov	r0, r6
 800f004:	4639      	mov	r1, r7
 800f006:	f7f1 fc31 	bl	800086c <__aeabi_ddiv>
 800f00a:	f7f1 fdb5 	bl	8000b78 <__aeabi_d2iz>
 800f00e:	9001      	str	r0, [sp, #4]
 800f010:	f7f1 fa98 	bl	8000544 <__aeabi_i2d>
 800f014:	4642      	mov	r2, r8
 800f016:	464b      	mov	r3, r9
 800f018:	f7f1 fafe 	bl	8000618 <__aeabi_dmul>
 800f01c:	4602      	mov	r2, r0
 800f01e:	460b      	mov	r3, r1
 800f020:	4630      	mov	r0, r6
 800f022:	4639      	mov	r1, r7
 800f024:	f7f1 f940 	bl	80002a8 <__aeabi_dsub>
 800f028:	9e01      	ldr	r6, [sp, #4]
 800f02a:	9f04      	ldr	r7, [sp, #16]
 800f02c:	3630      	adds	r6, #48	; 0x30
 800f02e:	f805 6b01 	strb.w	r6, [r5], #1
 800f032:	9e00      	ldr	r6, [sp, #0]
 800f034:	1bae      	subs	r6, r5, r6
 800f036:	42b7      	cmp	r7, r6
 800f038:	4602      	mov	r2, r0
 800f03a:	460b      	mov	r3, r1
 800f03c:	d134      	bne.n	800f0a8 <_dtoa_r+0x708>
 800f03e:	f7f1 f935 	bl	80002ac <__adddf3>
 800f042:	4642      	mov	r2, r8
 800f044:	464b      	mov	r3, r9
 800f046:	4606      	mov	r6, r0
 800f048:	460f      	mov	r7, r1
 800f04a:	f7f1 fd75 	bl	8000b38 <__aeabi_dcmpgt>
 800f04e:	b9c8      	cbnz	r0, 800f084 <_dtoa_r+0x6e4>
 800f050:	4642      	mov	r2, r8
 800f052:	464b      	mov	r3, r9
 800f054:	4630      	mov	r0, r6
 800f056:	4639      	mov	r1, r7
 800f058:	f7f1 fd46 	bl	8000ae8 <__aeabi_dcmpeq>
 800f05c:	b110      	cbz	r0, 800f064 <_dtoa_r+0x6c4>
 800f05e:	9b01      	ldr	r3, [sp, #4]
 800f060:	07db      	lsls	r3, r3, #31
 800f062:	d40f      	bmi.n	800f084 <_dtoa_r+0x6e4>
 800f064:	4651      	mov	r1, sl
 800f066:	4620      	mov	r0, r4
 800f068:	f000 fe82 	bl	800fd70 <_Bfree>
 800f06c:	2300      	movs	r3, #0
 800f06e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f070:	702b      	strb	r3, [r5, #0]
 800f072:	f10b 0301 	add.w	r3, fp, #1
 800f076:	6013      	str	r3, [r2, #0]
 800f078:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	f43f ace2 	beq.w	800ea44 <_dtoa_r+0xa4>
 800f080:	601d      	str	r5, [r3, #0]
 800f082:	e4df      	b.n	800ea44 <_dtoa_r+0xa4>
 800f084:	465f      	mov	r7, fp
 800f086:	462b      	mov	r3, r5
 800f088:	461d      	mov	r5, r3
 800f08a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f08e:	2a39      	cmp	r2, #57	; 0x39
 800f090:	d106      	bne.n	800f0a0 <_dtoa_r+0x700>
 800f092:	9a00      	ldr	r2, [sp, #0]
 800f094:	429a      	cmp	r2, r3
 800f096:	d1f7      	bne.n	800f088 <_dtoa_r+0x6e8>
 800f098:	9900      	ldr	r1, [sp, #0]
 800f09a:	2230      	movs	r2, #48	; 0x30
 800f09c:	3701      	adds	r7, #1
 800f09e:	700a      	strb	r2, [r1, #0]
 800f0a0:	781a      	ldrb	r2, [r3, #0]
 800f0a2:	3201      	adds	r2, #1
 800f0a4:	701a      	strb	r2, [r3, #0]
 800f0a6:	e790      	b.n	800efca <_dtoa_r+0x62a>
 800f0a8:	4ba3      	ldr	r3, [pc, #652]	; (800f338 <_dtoa_r+0x998>)
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	f7f1 fab4 	bl	8000618 <__aeabi_dmul>
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	4606      	mov	r6, r0
 800f0b6:	460f      	mov	r7, r1
 800f0b8:	f7f1 fd16 	bl	8000ae8 <__aeabi_dcmpeq>
 800f0bc:	2800      	cmp	r0, #0
 800f0be:	d09e      	beq.n	800effe <_dtoa_r+0x65e>
 800f0c0:	e7d0      	b.n	800f064 <_dtoa_r+0x6c4>
 800f0c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0c4:	2a00      	cmp	r2, #0
 800f0c6:	f000 80ca 	beq.w	800f25e <_dtoa_r+0x8be>
 800f0ca:	9a07      	ldr	r2, [sp, #28]
 800f0cc:	2a01      	cmp	r2, #1
 800f0ce:	f300 80ad 	bgt.w	800f22c <_dtoa_r+0x88c>
 800f0d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f0d4:	2a00      	cmp	r2, #0
 800f0d6:	f000 80a5 	beq.w	800f224 <_dtoa_r+0x884>
 800f0da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f0de:	9e08      	ldr	r6, [sp, #32]
 800f0e0:	9d05      	ldr	r5, [sp, #20]
 800f0e2:	9a05      	ldr	r2, [sp, #20]
 800f0e4:	441a      	add	r2, r3
 800f0e6:	9205      	str	r2, [sp, #20]
 800f0e8:	9a06      	ldr	r2, [sp, #24]
 800f0ea:	2101      	movs	r1, #1
 800f0ec:	441a      	add	r2, r3
 800f0ee:	4620      	mov	r0, r4
 800f0f0:	9206      	str	r2, [sp, #24]
 800f0f2:	f000 ff3d 	bl	800ff70 <__i2b>
 800f0f6:	4607      	mov	r7, r0
 800f0f8:	b165      	cbz	r5, 800f114 <_dtoa_r+0x774>
 800f0fa:	9b06      	ldr	r3, [sp, #24]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	dd09      	ble.n	800f114 <_dtoa_r+0x774>
 800f100:	42ab      	cmp	r3, r5
 800f102:	9a05      	ldr	r2, [sp, #20]
 800f104:	bfa8      	it	ge
 800f106:	462b      	movge	r3, r5
 800f108:	1ad2      	subs	r2, r2, r3
 800f10a:	9205      	str	r2, [sp, #20]
 800f10c:	9a06      	ldr	r2, [sp, #24]
 800f10e:	1aed      	subs	r5, r5, r3
 800f110:	1ad3      	subs	r3, r2, r3
 800f112:	9306      	str	r3, [sp, #24]
 800f114:	9b08      	ldr	r3, [sp, #32]
 800f116:	b1f3      	cbz	r3, 800f156 <_dtoa_r+0x7b6>
 800f118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	f000 80a3 	beq.w	800f266 <_dtoa_r+0x8c6>
 800f120:	2e00      	cmp	r6, #0
 800f122:	dd10      	ble.n	800f146 <_dtoa_r+0x7a6>
 800f124:	4639      	mov	r1, r7
 800f126:	4632      	mov	r2, r6
 800f128:	4620      	mov	r0, r4
 800f12a:	f000 ffe1 	bl	80100f0 <__pow5mult>
 800f12e:	4652      	mov	r2, sl
 800f130:	4601      	mov	r1, r0
 800f132:	4607      	mov	r7, r0
 800f134:	4620      	mov	r0, r4
 800f136:	f000 ff31 	bl	800ff9c <__multiply>
 800f13a:	4651      	mov	r1, sl
 800f13c:	4680      	mov	r8, r0
 800f13e:	4620      	mov	r0, r4
 800f140:	f000 fe16 	bl	800fd70 <_Bfree>
 800f144:	46c2      	mov	sl, r8
 800f146:	9b08      	ldr	r3, [sp, #32]
 800f148:	1b9a      	subs	r2, r3, r6
 800f14a:	d004      	beq.n	800f156 <_dtoa_r+0x7b6>
 800f14c:	4651      	mov	r1, sl
 800f14e:	4620      	mov	r0, r4
 800f150:	f000 ffce 	bl	80100f0 <__pow5mult>
 800f154:	4682      	mov	sl, r0
 800f156:	2101      	movs	r1, #1
 800f158:	4620      	mov	r0, r4
 800f15a:	f000 ff09 	bl	800ff70 <__i2b>
 800f15e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f160:	2b00      	cmp	r3, #0
 800f162:	4606      	mov	r6, r0
 800f164:	f340 8081 	ble.w	800f26a <_dtoa_r+0x8ca>
 800f168:	461a      	mov	r2, r3
 800f16a:	4601      	mov	r1, r0
 800f16c:	4620      	mov	r0, r4
 800f16e:	f000 ffbf 	bl	80100f0 <__pow5mult>
 800f172:	9b07      	ldr	r3, [sp, #28]
 800f174:	2b01      	cmp	r3, #1
 800f176:	4606      	mov	r6, r0
 800f178:	dd7a      	ble.n	800f270 <_dtoa_r+0x8d0>
 800f17a:	f04f 0800 	mov.w	r8, #0
 800f17e:	6933      	ldr	r3, [r6, #16]
 800f180:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f184:	6918      	ldr	r0, [r3, #16]
 800f186:	f000 fea5 	bl	800fed4 <__hi0bits>
 800f18a:	f1c0 0020 	rsb	r0, r0, #32
 800f18e:	9b06      	ldr	r3, [sp, #24]
 800f190:	4418      	add	r0, r3
 800f192:	f010 001f 	ands.w	r0, r0, #31
 800f196:	f000 8094 	beq.w	800f2c2 <_dtoa_r+0x922>
 800f19a:	f1c0 0320 	rsb	r3, r0, #32
 800f19e:	2b04      	cmp	r3, #4
 800f1a0:	f340 8085 	ble.w	800f2ae <_dtoa_r+0x90e>
 800f1a4:	9b05      	ldr	r3, [sp, #20]
 800f1a6:	f1c0 001c 	rsb	r0, r0, #28
 800f1aa:	4403      	add	r3, r0
 800f1ac:	9305      	str	r3, [sp, #20]
 800f1ae:	9b06      	ldr	r3, [sp, #24]
 800f1b0:	4403      	add	r3, r0
 800f1b2:	4405      	add	r5, r0
 800f1b4:	9306      	str	r3, [sp, #24]
 800f1b6:	9b05      	ldr	r3, [sp, #20]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	dd05      	ble.n	800f1c8 <_dtoa_r+0x828>
 800f1bc:	4651      	mov	r1, sl
 800f1be:	461a      	mov	r2, r3
 800f1c0:	4620      	mov	r0, r4
 800f1c2:	f000 ffef 	bl	80101a4 <__lshift>
 800f1c6:	4682      	mov	sl, r0
 800f1c8:	9b06      	ldr	r3, [sp, #24]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	dd05      	ble.n	800f1da <_dtoa_r+0x83a>
 800f1ce:	4631      	mov	r1, r6
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	4620      	mov	r0, r4
 800f1d4:	f000 ffe6 	bl	80101a4 <__lshift>
 800f1d8:	4606      	mov	r6, r0
 800f1da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d072      	beq.n	800f2c6 <_dtoa_r+0x926>
 800f1e0:	4631      	mov	r1, r6
 800f1e2:	4650      	mov	r0, sl
 800f1e4:	f001 f84a 	bl	801027c <__mcmp>
 800f1e8:	2800      	cmp	r0, #0
 800f1ea:	da6c      	bge.n	800f2c6 <_dtoa_r+0x926>
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	4651      	mov	r1, sl
 800f1f0:	220a      	movs	r2, #10
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	f000 fdde 	bl	800fdb4 <__multadd>
 800f1f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f1fe:	4682      	mov	sl, r0
 800f200:	2b00      	cmp	r3, #0
 800f202:	f000 81b0 	beq.w	800f566 <_dtoa_r+0xbc6>
 800f206:	2300      	movs	r3, #0
 800f208:	4639      	mov	r1, r7
 800f20a:	220a      	movs	r2, #10
 800f20c:	4620      	mov	r0, r4
 800f20e:	f000 fdd1 	bl	800fdb4 <__multadd>
 800f212:	9b01      	ldr	r3, [sp, #4]
 800f214:	2b00      	cmp	r3, #0
 800f216:	4607      	mov	r7, r0
 800f218:	f300 8096 	bgt.w	800f348 <_dtoa_r+0x9a8>
 800f21c:	9b07      	ldr	r3, [sp, #28]
 800f21e:	2b02      	cmp	r3, #2
 800f220:	dc59      	bgt.n	800f2d6 <_dtoa_r+0x936>
 800f222:	e091      	b.n	800f348 <_dtoa_r+0x9a8>
 800f224:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f226:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f22a:	e758      	b.n	800f0de <_dtoa_r+0x73e>
 800f22c:	9b04      	ldr	r3, [sp, #16]
 800f22e:	1e5e      	subs	r6, r3, #1
 800f230:	9b08      	ldr	r3, [sp, #32]
 800f232:	42b3      	cmp	r3, r6
 800f234:	bfbf      	itttt	lt
 800f236:	9b08      	ldrlt	r3, [sp, #32]
 800f238:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f23a:	9608      	strlt	r6, [sp, #32]
 800f23c:	1af3      	sublt	r3, r6, r3
 800f23e:	bfb4      	ite	lt
 800f240:	18d2      	addlt	r2, r2, r3
 800f242:	1b9e      	subge	r6, r3, r6
 800f244:	9b04      	ldr	r3, [sp, #16]
 800f246:	bfbc      	itt	lt
 800f248:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f24a:	2600      	movlt	r6, #0
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	bfb7      	itett	lt
 800f250:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f254:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f258:	1a9d      	sublt	r5, r3, r2
 800f25a:	2300      	movlt	r3, #0
 800f25c:	e741      	b.n	800f0e2 <_dtoa_r+0x742>
 800f25e:	9e08      	ldr	r6, [sp, #32]
 800f260:	9d05      	ldr	r5, [sp, #20]
 800f262:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f264:	e748      	b.n	800f0f8 <_dtoa_r+0x758>
 800f266:	9a08      	ldr	r2, [sp, #32]
 800f268:	e770      	b.n	800f14c <_dtoa_r+0x7ac>
 800f26a:	9b07      	ldr	r3, [sp, #28]
 800f26c:	2b01      	cmp	r3, #1
 800f26e:	dc19      	bgt.n	800f2a4 <_dtoa_r+0x904>
 800f270:	9b02      	ldr	r3, [sp, #8]
 800f272:	b9bb      	cbnz	r3, 800f2a4 <_dtoa_r+0x904>
 800f274:	9b03      	ldr	r3, [sp, #12]
 800f276:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f27a:	b99b      	cbnz	r3, 800f2a4 <_dtoa_r+0x904>
 800f27c:	9b03      	ldr	r3, [sp, #12]
 800f27e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f282:	0d1b      	lsrs	r3, r3, #20
 800f284:	051b      	lsls	r3, r3, #20
 800f286:	b183      	cbz	r3, 800f2aa <_dtoa_r+0x90a>
 800f288:	9b05      	ldr	r3, [sp, #20]
 800f28a:	3301      	adds	r3, #1
 800f28c:	9305      	str	r3, [sp, #20]
 800f28e:	9b06      	ldr	r3, [sp, #24]
 800f290:	3301      	adds	r3, #1
 800f292:	9306      	str	r3, [sp, #24]
 800f294:	f04f 0801 	mov.w	r8, #1
 800f298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	f47f af6f 	bne.w	800f17e <_dtoa_r+0x7de>
 800f2a0:	2001      	movs	r0, #1
 800f2a2:	e774      	b.n	800f18e <_dtoa_r+0x7ee>
 800f2a4:	f04f 0800 	mov.w	r8, #0
 800f2a8:	e7f6      	b.n	800f298 <_dtoa_r+0x8f8>
 800f2aa:	4698      	mov	r8, r3
 800f2ac:	e7f4      	b.n	800f298 <_dtoa_r+0x8f8>
 800f2ae:	d082      	beq.n	800f1b6 <_dtoa_r+0x816>
 800f2b0:	9a05      	ldr	r2, [sp, #20]
 800f2b2:	331c      	adds	r3, #28
 800f2b4:	441a      	add	r2, r3
 800f2b6:	9205      	str	r2, [sp, #20]
 800f2b8:	9a06      	ldr	r2, [sp, #24]
 800f2ba:	441a      	add	r2, r3
 800f2bc:	441d      	add	r5, r3
 800f2be:	9206      	str	r2, [sp, #24]
 800f2c0:	e779      	b.n	800f1b6 <_dtoa_r+0x816>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	e7f4      	b.n	800f2b0 <_dtoa_r+0x910>
 800f2c6:	9b04      	ldr	r3, [sp, #16]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	dc37      	bgt.n	800f33c <_dtoa_r+0x99c>
 800f2cc:	9b07      	ldr	r3, [sp, #28]
 800f2ce:	2b02      	cmp	r3, #2
 800f2d0:	dd34      	ble.n	800f33c <_dtoa_r+0x99c>
 800f2d2:	9b04      	ldr	r3, [sp, #16]
 800f2d4:	9301      	str	r3, [sp, #4]
 800f2d6:	9b01      	ldr	r3, [sp, #4]
 800f2d8:	b963      	cbnz	r3, 800f2f4 <_dtoa_r+0x954>
 800f2da:	4631      	mov	r1, r6
 800f2dc:	2205      	movs	r2, #5
 800f2de:	4620      	mov	r0, r4
 800f2e0:	f000 fd68 	bl	800fdb4 <__multadd>
 800f2e4:	4601      	mov	r1, r0
 800f2e6:	4606      	mov	r6, r0
 800f2e8:	4650      	mov	r0, sl
 800f2ea:	f000 ffc7 	bl	801027c <__mcmp>
 800f2ee:	2800      	cmp	r0, #0
 800f2f0:	f73f adbb 	bgt.w	800ee6a <_dtoa_r+0x4ca>
 800f2f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2f6:	9d00      	ldr	r5, [sp, #0]
 800f2f8:	ea6f 0b03 	mvn.w	fp, r3
 800f2fc:	f04f 0800 	mov.w	r8, #0
 800f300:	4631      	mov	r1, r6
 800f302:	4620      	mov	r0, r4
 800f304:	f000 fd34 	bl	800fd70 <_Bfree>
 800f308:	2f00      	cmp	r7, #0
 800f30a:	f43f aeab 	beq.w	800f064 <_dtoa_r+0x6c4>
 800f30e:	f1b8 0f00 	cmp.w	r8, #0
 800f312:	d005      	beq.n	800f320 <_dtoa_r+0x980>
 800f314:	45b8      	cmp	r8, r7
 800f316:	d003      	beq.n	800f320 <_dtoa_r+0x980>
 800f318:	4641      	mov	r1, r8
 800f31a:	4620      	mov	r0, r4
 800f31c:	f000 fd28 	bl	800fd70 <_Bfree>
 800f320:	4639      	mov	r1, r7
 800f322:	4620      	mov	r0, r4
 800f324:	f000 fd24 	bl	800fd70 <_Bfree>
 800f328:	e69c      	b.n	800f064 <_dtoa_r+0x6c4>
 800f32a:	2600      	movs	r6, #0
 800f32c:	4637      	mov	r7, r6
 800f32e:	e7e1      	b.n	800f2f4 <_dtoa_r+0x954>
 800f330:	46bb      	mov	fp, r7
 800f332:	4637      	mov	r7, r6
 800f334:	e599      	b.n	800ee6a <_dtoa_r+0x4ca>
 800f336:	bf00      	nop
 800f338:	40240000 	.word	0x40240000
 800f33c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f33e:	2b00      	cmp	r3, #0
 800f340:	f000 80c8 	beq.w	800f4d4 <_dtoa_r+0xb34>
 800f344:	9b04      	ldr	r3, [sp, #16]
 800f346:	9301      	str	r3, [sp, #4]
 800f348:	2d00      	cmp	r5, #0
 800f34a:	dd05      	ble.n	800f358 <_dtoa_r+0x9b8>
 800f34c:	4639      	mov	r1, r7
 800f34e:	462a      	mov	r2, r5
 800f350:	4620      	mov	r0, r4
 800f352:	f000 ff27 	bl	80101a4 <__lshift>
 800f356:	4607      	mov	r7, r0
 800f358:	f1b8 0f00 	cmp.w	r8, #0
 800f35c:	d05b      	beq.n	800f416 <_dtoa_r+0xa76>
 800f35e:	6879      	ldr	r1, [r7, #4]
 800f360:	4620      	mov	r0, r4
 800f362:	f000 fcc5 	bl	800fcf0 <_Balloc>
 800f366:	4605      	mov	r5, r0
 800f368:	b928      	cbnz	r0, 800f376 <_dtoa_r+0x9d6>
 800f36a:	4b83      	ldr	r3, [pc, #524]	; (800f578 <_dtoa_r+0xbd8>)
 800f36c:	4602      	mov	r2, r0
 800f36e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f372:	f7ff bb2e 	b.w	800e9d2 <_dtoa_r+0x32>
 800f376:	693a      	ldr	r2, [r7, #16]
 800f378:	3202      	adds	r2, #2
 800f37a:	0092      	lsls	r2, r2, #2
 800f37c:	f107 010c 	add.w	r1, r7, #12
 800f380:	300c      	adds	r0, #12
 800f382:	f7ff fa64 	bl	800e84e <memcpy>
 800f386:	2201      	movs	r2, #1
 800f388:	4629      	mov	r1, r5
 800f38a:	4620      	mov	r0, r4
 800f38c:	f000 ff0a 	bl	80101a4 <__lshift>
 800f390:	9b00      	ldr	r3, [sp, #0]
 800f392:	3301      	adds	r3, #1
 800f394:	9304      	str	r3, [sp, #16]
 800f396:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f39a:	4413      	add	r3, r2
 800f39c:	9308      	str	r3, [sp, #32]
 800f39e:	9b02      	ldr	r3, [sp, #8]
 800f3a0:	f003 0301 	and.w	r3, r3, #1
 800f3a4:	46b8      	mov	r8, r7
 800f3a6:	9306      	str	r3, [sp, #24]
 800f3a8:	4607      	mov	r7, r0
 800f3aa:	9b04      	ldr	r3, [sp, #16]
 800f3ac:	4631      	mov	r1, r6
 800f3ae:	3b01      	subs	r3, #1
 800f3b0:	4650      	mov	r0, sl
 800f3b2:	9301      	str	r3, [sp, #4]
 800f3b4:	f7ff fa6a 	bl	800e88c <quorem>
 800f3b8:	4641      	mov	r1, r8
 800f3ba:	9002      	str	r0, [sp, #8]
 800f3bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f3c0:	4650      	mov	r0, sl
 800f3c2:	f000 ff5b 	bl	801027c <__mcmp>
 800f3c6:	463a      	mov	r2, r7
 800f3c8:	9005      	str	r0, [sp, #20]
 800f3ca:	4631      	mov	r1, r6
 800f3cc:	4620      	mov	r0, r4
 800f3ce:	f000 ff71 	bl	80102b4 <__mdiff>
 800f3d2:	68c2      	ldr	r2, [r0, #12]
 800f3d4:	4605      	mov	r5, r0
 800f3d6:	bb02      	cbnz	r2, 800f41a <_dtoa_r+0xa7a>
 800f3d8:	4601      	mov	r1, r0
 800f3da:	4650      	mov	r0, sl
 800f3dc:	f000 ff4e 	bl	801027c <__mcmp>
 800f3e0:	4602      	mov	r2, r0
 800f3e2:	4629      	mov	r1, r5
 800f3e4:	4620      	mov	r0, r4
 800f3e6:	9209      	str	r2, [sp, #36]	; 0x24
 800f3e8:	f000 fcc2 	bl	800fd70 <_Bfree>
 800f3ec:	9b07      	ldr	r3, [sp, #28]
 800f3ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f3f0:	9d04      	ldr	r5, [sp, #16]
 800f3f2:	ea43 0102 	orr.w	r1, r3, r2
 800f3f6:	9b06      	ldr	r3, [sp, #24]
 800f3f8:	4319      	orrs	r1, r3
 800f3fa:	d110      	bne.n	800f41e <_dtoa_r+0xa7e>
 800f3fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f400:	d029      	beq.n	800f456 <_dtoa_r+0xab6>
 800f402:	9b05      	ldr	r3, [sp, #20]
 800f404:	2b00      	cmp	r3, #0
 800f406:	dd02      	ble.n	800f40e <_dtoa_r+0xa6e>
 800f408:	9b02      	ldr	r3, [sp, #8]
 800f40a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f40e:	9b01      	ldr	r3, [sp, #4]
 800f410:	f883 9000 	strb.w	r9, [r3]
 800f414:	e774      	b.n	800f300 <_dtoa_r+0x960>
 800f416:	4638      	mov	r0, r7
 800f418:	e7ba      	b.n	800f390 <_dtoa_r+0x9f0>
 800f41a:	2201      	movs	r2, #1
 800f41c:	e7e1      	b.n	800f3e2 <_dtoa_r+0xa42>
 800f41e:	9b05      	ldr	r3, [sp, #20]
 800f420:	2b00      	cmp	r3, #0
 800f422:	db04      	blt.n	800f42e <_dtoa_r+0xa8e>
 800f424:	9907      	ldr	r1, [sp, #28]
 800f426:	430b      	orrs	r3, r1
 800f428:	9906      	ldr	r1, [sp, #24]
 800f42a:	430b      	orrs	r3, r1
 800f42c:	d120      	bne.n	800f470 <_dtoa_r+0xad0>
 800f42e:	2a00      	cmp	r2, #0
 800f430:	dded      	ble.n	800f40e <_dtoa_r+0xa6e>
 800f432:	4651      	mov	r1, sl
 800f434:	2201      	movs	r2, #1
 800f436:	4620      	mov	r0, r4
 800f438:	f000 feb4 	bl	80101a4 <__lshift>
 800f43c:	4631      	mov	r1, r6
 800f43e:	4682      	mov	sl, r0
 800f440:	f000 ff1c 	bl	801027c <__mcmp>
 800f444:	2800      	cmp	r0, #0
 800f446:	dc03      	bgt.n	800f450 <_dtoa_r+0xab0>
 800f448:	d1e1      	bne.n	800f40e <_dtoa_r+0xa6e>
 800f44a:	f019 0f01 	tst.w	r9, #1
 800f44e:	d0de      	beq.n	800f40e <_dtoa_r+0xa6e>
 800f450:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f454:	d1d8      	bne.n	800f408 <_dtoa_r+0xa68>
 800f456:	9a01      	ldr	r2, [sp, #4]
 800f458:	2339      	movs	r3, #57	; 0x39
 800f45a:	7013      	strb	r3, [r2, #0]
 800f45c:	462b      	mov	r3, r5
 800f45e:	461d      	mov	r5, r3
 800f460:	3b01      	subs	r3, #1
 800f462:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f466:	2a39      	cmp	r2, #57	; 0x39
 800f468:	d06c      	beq.n	800f544 <_dtoa_r+0xba4>
 800f46a:	3201      	adds	r2, #1
 800f46c:	701a      	strb	r2, [r3, #0]
 800f46e:	e747      	b.n	800f300 <_dtoa_r+0x960>
 800f470:	2a00      	cmp	r2, #0
 800f472:	dd07      	ble.n	800f484 <_dtoa_r+0xae4>
 800f474:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f478:	d0ed      	beq.n	800f456 <_dtoa_r+0xab6>
 800f47a:	9a01      	ldr	r2, [sp, #4]
 800f47c:	f109 0301 	add.w	r3, r9, #1
 800f480:	7013      	strb	r3, [r2, #0]
 800f482:	e73d      	b.n	800f300 <_dtoa_r+0x960>
 800f484:	9b04      	ldr	r3, [sp, #16]
 800f486:	9a08      	ldr	r2, [sp, #32]
 800f488:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d043      	beq.n	800f518 <_dtoa_r+0xb78>
 800f490:	4651      	mov	r1, sl
 800f492:	2300      	movs	r3, #0
 800f494:	220a      	movs	r2, #10
 800f496:	4620      	mov	r0, r4
 800f498:	f000 fc8c 	bl	800fdb4 <__multadd>
 800f49c:	45b8      	cmp	r8, r7
 800f49e:	4682      	mov	sl, r0
 800f4a0:	f04f 0300 	mov.w	r3, #0
 800f4a4:	f04f 020a 	mov.w	r2, #10
 800f4a8:	4641      	mov	r1, r8
 800f4aa:	4620      	mov	r0, r4
 800f4ac:	d107      	bne.n	800f4be <_dtoa_r+0xb1e>
 800f4ae:	f000 fc81 	bl	800fdb4 <__multadd>
 800f4b2:	4680      	mov	r8, r0
 800f4b4:	4607      	mov	r7, r0
 800f4b6:	9b04      	ldr	r3, [sp, #16]
 800f4b8:	3301      	adds	r3, #1
 800f4ba:	9304      	str	r3, [sp, #16]
 800f4bc:	e775      	b.n	800f3aa <_dtoa_r+0xa0a>
 800f4be:	f000 fc79 	bl	800fdb4 <__multadd>
 800f4c2:	4639      	mov	r1, r7
 800f4c4:	4680      	mov	r8, r0
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	220a      	movs	r2, #10
 800f4ca:	4620      	mov	r0, r4
 800f4cc:	f000 fc72 	bl	800fdb4 <__multadd>
 800f4d0:	4607      	mov	r7, r0
 800f4d2:	e7f0      	b.n	800f4b6 <_dtoa_r+0xb16>
 800f4d4:	9b04      	ldr	r3, [sp, #16]
 800f4d6:	9301      	str	r3, [sp, #4]
 800f4d8:	9d00      	ldr	r5, [sp, #0]
 800f4da:	4631      	mov	r1, r6
 800f4dc:	4650      	mov	r0, sl
 800f4de:	f7ff f9d5 	bl	800e88c <quorem>
 800f4e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f4e6:	9b00      	ldr	r3, [sp, #0]
 800f4e8:	f805 9b01 	strb.w	r9, [r5], #1
 800f4ec:	1aea      	subs	r2, r5, r3
 800f4ee:	9b01      	ldr	r3, [sp, #4]
 800f4f0:	4293      	cmp	r3, r2
 800f4f2:	dd07      	ble.n	800f504 <_dtoa_r+0xb64>
 800f4f4:	4651      	mov	r1, sl
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	220a      	movs	r2, #10
 800f4fa:	4620      	mov	r0, r4
 800f4fc:	f000 fc5a 	bl	800fdb4 <__multadd>
 800f500:	4682      	mov	sl, r0
 800f502:	e7ea      	b.n	800f4da <_dtoa_r+0xb3a>
 800f504:	9b01      	ldr	r3, [sp, #4]
 800f506:	2b00      	cmp	r3, #0
 800f508:	bfc8      	it	gt
 800f50a:	461d      	movgt	r5, r3
 800f50c:	9b00      	ldr	r3, [sp, #0]
 800f50e:	bfd8      	it	le
 800f510:	2501      	movle	r5, #1
 800f512:	441d      	add	r5, r3
 800f514:	f04f 0800 	mov.w	r8, #0
 800f518:	4651      	mov	r1, sl
 800f51a:	2201      	movs	r2, #1
 800f51c:	4620      	mov	r0, r4
 800f51e:	f000 fe41 	bl	80101a4 <__lshift>
 800f522:	4631      	mov	r1, r6
 800f524:	4682      	mov	sl, r0
 800f526:	f000 fea9 	bl	801027c <__mcmp>
 800f52a:	2800      	cmp	r0, #0
 800f52c:	dc96      	bgt.n	800f45c <_dtoa_r+0xabc>
 800f52e:	d102      	bne.n	800f536 <_dtoa_r+0xb96>
 800f530:	f019 0f01 	tst.w	r9, #1
 800f534:	d192      	bne.n	800f45c <_dtoa_r+0xabc>
 800f536:	462b      	mov	r3, r5
 800f538:	461d      	mov	r5, r3
 800f53a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f53e:	2a30      	cmp	r2, #48	; 0x30
 800f540:	d0fa      	beq.n	800f538 <_dtoa_r+0xb98>
 800f542:	e6dd      	b.n	800f300 <_dtoa_r+0x960>
 800f544:	9a00      	ldr	r2, [sp, #0]
 800f546:	429a      	cmp	r2, r3
 800f548:	d189      	bne.n	800f45e <_dtoa_r+0xabe>
 800f54a:	f10b 0b01 	add.w	fp, fp, #1
 800f54e:	2331      	movs	r3, #49	; 0x31
 800f550:	e796      	b.n	800f480 <_dtoa_r+0xae0>
 800f552:	4b0a      	ldr	r3, [pc, #40]	; (800f57c <_dtoa_r+0xbdc>)
 800f554:	f7ff ba99 	b.w	800ea8a <_dtoa_r+0xea>
 800f558:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	f47f aa6d 	bne.w	800ea3a <_dtoa_r+0x9a>
 800f560:	4b07      	ldr	r3, [pc, #28]	; (800f580 <_dtoa_r+0xbe0>)
 800f562:	f7ff ba92 	b.w	800ea8a <_dtoa_r+0xea>
 800f566:	9b01      	ldr	r3, [sp, #4]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	dcb5      	bgt.n	800f4d8 <_dtoa_r+0xb38>
 800f56c:	9b07      	ldr	r3, [sp, #28]
 800f56e:	2b02      	cmp	r3, #2
 800f570:	f73f aeb1 	bgt.w	800f2d6 <_dtoa_r+0x936>
 800f574:	e7b0      	b.n	800f4d8 <_dtoa_r+0xb38>
 800f576:	bf00      	nop
 800f578:	080139ed 	.word	0x080139ed
 800f57c:	08013940 	.word	0x08013940
 800f580:	08013971 	.word	0x08013971

0800f584 <_free_r>:
 800f584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f586:	2900      	cmp	r1, #0
 800f588:	d044      	beq.n	800f614 <_free_r+0x90>
 800f58a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f58e:	9001      	str	r0, [sp, #4]
 800f590:	2b00      	cmp	r3, #0
 800f592:	f1a1 0404 	sub.w	r4, r1, #4
 800f596:	bfb8      	it	lt
 800f598:	18e4      	addlt	r4, r4, r3
 800f59a:	f7fd faf1 	bl	800cb80 <__malloc_lock>
 800f59e:	4a1e      	ldr	r2, [pc, #120]	; (800f618 <_free_r+0x94>)
 800f5a0:	9801      	ldr	r0, [sp, #4]
 800f5a2:	6813      	ldr	r3, [r2, #0]
 800f5a4:	b933      	cbnz	r3, 800f5b4 <_free_r+0x30>
 800f5a6:	6063      	str	r3, [r4, #4]
 800f5a8:	6014      	str	r4, [r2, #0]
 800f5aa:	b003      	add	sp, #12
 800f5ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f5b0:	f7fd baec 	b.w	800cb8c <__malloc_unlock>
 800f5b4:	42a3      	cmp	r3, r4
 800f5b6:	d908      	bls.n	800f5ca <_free_r+0x46>
 800f5b8:	6825      	ldr	r5, [r4, #0]
 800f5ba:	1961      	adds	r1, r4, r5
 800f5bc:	428b      	cmp	r3, r1
 800f5be:	bf01      	itttt	eq
 800f5c0:	6819      	ldreq	r1, [r3, #0]
 800f5c2:	685b      	ldreq	r3, [r3, #4]
 800f5c4:	1949      	addeq	r1, r1, r5
 800f5c6:	6021      	streq	r1, [r4, #0]
 800f5c8:	e7ed      	b.n	800f5a6 <_free_r+0x22>
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	685b      	ldr	r3, [r3, #4]
 800f5ce:	b10b      	cbz	r3, 800f5d4 <_free_r+0x50>
 800f5d0:	42a3      	cmp	r3, r4
 800f5d2:	d9fa      	bls.n	800f5ca <_free_r+0x46>
 800f5d4:	6811      	ldr	r1, [r2, #0]
 800f5d6:	1855      	adds	r5, r2, r1
 800f5d8:	42a5      	cmp	r5, r4
 800f5da:	d10b      	bne.n	800f5f4 <_free_r+0x70>
 800f5dc:	6824      	ldr	r4, [r4, #0]
 800f5de:	4421      	add	r1, r4
 800f5e0:	1854      	adds	r4, r2, r1
 800f5e2:	42a3      	cmp	r3, r4
 800f5e4:	6011      	str	r1, [r2, #0]
 800f5e6:	d1e0      	bne.n	800f5aa <_free_r+0x26>
 800f5e8:	681c      	ldr	r4, [r3, #0]
 800f5ea:	685b      	ldr	r3, [r3, #4]
 800f5ec:	6053      	str	r3, [r2, #4]
 800f5ee:	440c      	add	r4, r1
 800f5f0:	6014      	str	r4, [r2, #0]
 800f5f2:	e7da      	b.n	800f5aa <_free_r+0x26>
 800f5f4:	d902      	bls.n	800f5fc <_free_r+0x78>
 800f5f6:	230c      	movs	r3, #12
 800f5f8:	6003      	str	r3, [r0, #0]
 800f5fa:	e7d6      	b.n	800f5aa <_free_r+0x26>
 800f5fc:	6825      	ldr	r5, [r4, #0]
 800f5fe:	1961      	adds	r1, r4, r5
 800f600:	428b      	cmp	r3, r1
 800f602:	bf04      	itt	eq
 800f604:	6819      	ldreq	r1, [r3, #0]
 800f606:	685b      	ldreq	r3, [r3, #4]
 800f608:	6063      	str	r3, [r4, #4]
 800f60a:	bf04      	itt	eq
 800f60c:	1949      	addeq	r1, r1, r5
 800f60e:	6021      	streq	r1, [r4, #0]
 800f610:	6054      	str	r4, [r2, #4]
 800f612:	e7ca      	b.n	800f5aa <_free_r+0x26>
 800f614:	b003      	add	sp, #12
 800f616:	bd30      	pop	{r4, r5, pc}
 800f618:	20000d88 	.word	0x20000d88

0800f61c <rshift>:
 800f61c:	6903      	ldr	r3, [r0, #16]
 800f61e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f622:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f626:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f62a:	f100 0414 	add.w	r4, r0, #20
 800f62e:	dd45      	ble.n	800f6bc <rshift+0xa0>
 800f630:	f011 011f 	ands.w	r1, r1, #31
 800f634:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f638:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f63c:	d10c      	bne.n	800f658 <rshift+0x3c>
 800f63e:	f100 0710 	add.w	r7, r0, #16
 800f642:	4629      	mov	r1, r5
 800f644:	42b1      	cmp	r1, r6
 800f646:	d334      	bcc.n	800f6b2 <rshift+0x96>
 800f648:	1a9b      	subs	r3, r3, r2
 800f64a:	009b      	lsls	r3, r3, #2
 800f64c:	1eea      	subs	r2, r5, #3
 800f64e:	4296      	cmp	r6, r2
 800f650:	bf38      	it	cc
 800f652:	2300      	movcc	r3, #0
 800f654:	4423      	add	r3, r4
 800f656:	e015      	b.n	800f684 <rshift+0x68>
 800f658:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f65c:	f1c1 0820 	rsb	r8, r1, #32
 800f660:	40cf      	lsrs	r7, r1
 800f662:	f105 0e04 	add.w	lr, r5, #4
 800f666:	46a1      	mov	r9, r4
 800f668:	4576      	cmp	r6, lr
 800f66a:	46f4      	mov	ip, lr
 800f66c:	d815      	bhi.n	800f69a <rshift+0x7e>
 800f66e:	1a9a      	subs	r2, r3, r2
 800f670:	0092      	lsls	r2, r2, #2
 800f672:	3a04      	subs	r2, #4
 800f674:	3501      	adds	r5, #1
 800f676:	42ae      	cmp	r6, r5
 800f678:	bf38      	it	cc
 800f67a:	2200      	movcc	r2, #0
 800f67c:	18a3      	adds	r3, r4, r2
 800f67e:	50a7      	str	r7, [r4, r2]
 800f680:	b107      	cbz	r7, 800f684 <rshift+0x68>
 800f682:	3304      	adds	r3, #4
 800f684:	1b1a      	subs	r2, r3, r4
 800f686:	42a3      	cmp	r3, r4
 800f688:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f68c:	bf08      	it	eq
 800f68e:	2300      	moveq	r3, #0
 800f690:	6102      	str	r2, [r0, #16]
 800f692:	bf08      	it	eq
 800f694:	6143      	streq	r3, [r0, #20]
 800f696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f69a:	f8dc c000 	ldr.w	ip, [ip]
 800f69e:	fa0c fc08 	lsl.w	ip, ip, r8
 800f6a2:	ea4c 0707 	orr.w	r7, ip, r7
 800f6a6:	f849 7b04 	str.w	r7, [r9], #4
 800f6aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f6ae:	40cf      	lsrs	r7, r1
 800f6b0:	e7da      	b.n	800f668 <rshift+0x4c>
 800f6b2:	f851 cb04 	ldr.w	ip, [r1], #4
 800f6b6:	f847 cf04 	str.w	ip, [r7, #4]!
 800f6ba:	e7c3      	b.n	800f644 <rshift+0x28>
 800f6bc:	4623      	mov	r3, r4
 800f6be:	e7e1      	b.n	800f684 <rshift+0x68>

0800f6c0 <__hexdig_fun>:
 800f6c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f6c4:	2b09      	cmp	r3, #9
 800f6c6:	d802      	bhi.n	800f6ce <__hexdig_fun+0xe>
 800f6c8:	3820      	subs	r0, #32
 800f6ca:	b2c0      	uxtb	r0, r0
 800f6cc:	4770      	bx	lr
 800f6ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f6d2:	2b05      	cmp	r3, #5
 800f6d4:	d801      	bhi.n	800f6da <__hexdig_fun+0x1a>
 800f6d6:	3847      	subs	r0, #71	; 0x47
 800f6d8:	e7f7      	b.n	800f6ca <__hexdig_fun+0xa>
 800f6da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f6de:	2b05      	cmp	r3, #5
 800f6e0:	d801      	bhi.n	800f6e6 <__hexdig_fun+0x26>
 800f6e2:	3827      	subs	r0, #39	; 0x27
 800f6e4:	e7f1      	b.n	800f6ca <__hexdig_fun+0xa>
 800f6e6:	2000      	movs	r0, #0
 800f6e8:	4770      	bx	lr
	...

0800f6ec <__gethex>:
 800f6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6f0:	4617      	mov	r7, r2
 800f6f2:	680a      	ldr	r2, [r1, #0]
 800f6f4:	b085      	sub	sp, #20
 800f6f6:	f102 0b02 	add.w	fp, r2, #2
 800f6fa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f6fe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f702:	4681      	mov	r9, r0
 800f704:	468a      	mov	sl, r1
 800f706:	9302      	str	r3, [sp, #8]
 800f708:	32fe      	adds	r2, #254	; 0xfe
 800f70a:	eb02 030b 	add.w	r3, r2, fp
 800f70e:	46d8      	mov	r8, fp
 800f710:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800f714:	9301      	str	r3, [sp, #4]
 800f716:	2830      	cmp	r0, #48	; 0x30
 800f718:	d0f7      	beq.n	800f70a <__gethex+0x1e>
 800f71a:	f7ff ffd1 	bl	800f6c0 <__hexdig_fun>
 800f71e:	4604      	mov	r4, r0
 800f720:	2800      	cmp	r0, #0
 800f722:	d138      	bne.n	800f796 <__gethex+0xaa>
 800f724:	49a7      	ldr	r1, [pc, #668]	; (800f9c4 <__gethex+0x2d8>)
 800f726:	2201      	movs	r2, #1
 800f728:	4640      	mov	r0, r8
 800f72a:	f7fe fff6 	bl	800e71a <strncmp>
 800f72e:	4606      	mov	r6, r0
 800f730:	2800      	cmp	r0, #0
 800f732:	d169      	bne.n	800f808 <__gethex+0x11c>
 800f734:	f898 0001 	ldrb.w	r0, [r8, #1]
 800f738:	465d      	mov	r5, fp
 800f73a:	f7ff ffc1 	bl	800f6c0 <__hexdig_fun>
 800f73e:	2800      	cmp	r0, #0
 800f740:	d064      	beq.n	800f80c <__gethex+0x120>
 800f742:	465a      	mov	r2, fp
 800f744:	7810      	ldrb	r0, [r2, #0]
 800f746:	2830      	cmp	r0, #48	; 0x30
 800f748:	4690      	mov	r8, r2
 800f74a:	f102 0201 	add.w	r2, r2, #1
 800f74e:	d0f9      	beq.n	800f744 <__gethex+0x58>
 800f750:	f7ff ffb6 	bl	800f6c0 <__hexdig_fun>
 800f754:	2301      	movs	r3, #1
 800f756:	fab0 f480 	clz	r4, r0
 800f75a:	0964      	lsrs	r4, r4, #5
 800f75c:	465e      	mov	r6, fp
 800f75e:	9301      	str	r3, [sp, #4]
 800f760:	4642      	mov	r2, r8
 800f762:	4615      	mov	r5, r2
 800f764:	3201      	adds	r2, #1
 800f766:	7828      	ldrb	r0, [r5, #0]
 800f768:	f7ff ffaa 	bl	800f6c0 <__hexdig_fun>
 800f76c:	2800      	cmp	r0, #0
 800f76e:	d1f8      	bne.n	800f762 <__gethex+0x76>
 800f770:	4994      	ldr	r1, [pc, #592]	; (800f9c4 <__gethex+0x2d8>)
 800f772:	2201      	movs	r2, #1
 800f774:	4628      	mov	r0, r5
 800f776:	f7fe ffd0 	bl	800e71a <strncmp>
 800f77a:	b978      	cbnz	r0, 800f79c <__gethex+0xb0>
 800f77c:	b946      	cbnz	r6, 800f790 <__gethex+0xa4>
 800f77e:	1c6e      	adds	r6, r5, #1
 800f780:	4632      	mov	r2, r6
 800f782:	4615      	mov	r5, r2
 800f784:	3201      	adds	r2, #1
 800f786:	7828      	ldrb	r0, [r5, #0]
 800f788:	f7ff ff9a 	bl	800f6c0 <__hexdig_fun>
 800f78c:	2800      	cmp	r0, #0
 800f78e:	d1f8      	bne.n	800f782 <__gethex+0x96>
 800f790:	1b73      	subs	r3, r6, r5
 800f792:	009e      	lsls	r6, r3, #2
 800f794:	e004      	b.n	800f7a0 <__gethex+0xb4>
 800f796:	2400      	movs	r4, #0
 800f798:	4626      	mov	r6, r4
 800f79a:	e7e1      	b.n	800f760 <__gethex+0x74>
 800f79c:	2e00      	cmp	r6, #0
 800f79e:	d1f7      	bne.n	800f790 <__gethex+0xa4>
 800f7a0:	782b      	ldrb	r3, [r5, #0]
 800f7a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f7a6:	2b50      	cmp	r3, #80	; 0x50
 800f7a8:	d13d      	bne.n	800f826 <__gethex+0x13a>
 800f7aa:	786b      	ldrb	r3, [r5, #1]
 800f7ac:	2b2b      	cmp	r3, #43	; 0x2b
 800f7ae:	d02f      	beq.n	800f810 <__gethex+0x124>
 800f7b0:	2b2d      	cmp	r3, #45	; 0x2d
 800f7b2:	d031      	beq.n	800f818 <__gethex+0x12c>
 800f7b4:	1c69      	adds	r1, r5, #1
 800f7b6:	f04f 0b00 	mov.w	fp, #0
 800f7ba:	7808      	ldrb	r0, [r1, #0]
 800f7bc:	f7ff ff80 	bl	800f6c0 <__hexdig_fun>
 800f7c0:	1e42      	subs	r2, r0, #1
 800f7c2:	b2d2      	uxtb	r2, r2
 800f7c4:	2a18      	cmp	r2, #24
 800f7c6:	d82e      	bhi.n	800f826 <__gethex+0x13a>
 800f7c8:	f1a0 0210 	sub.w	r2, r0, #16
 800f7cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f7d0:	f7ff ff76 	bl	800f6c0 <__hexdig_fun>
 800f7d4:	f100 3cff 	add.w	ip, r0, #4294967295
 800f7d8:	fa5f fc8c 	uxtb.w	ip, ip
 800f7dc:	f1bc 0f18 	cmp.w	ip, #24
 800f7e0:	d91d      	bls.n	800f81e <__gethex+0x132>
 800f7e2:	f1bb 0f00 	cmp.w	fp, #0
 800f7e6:	d000      	beq.n	800f7ea <__gethex+0xfe>
 800f7e8:	4252      	negs	r2, r2
 800f7ea:	4416      	add	r6, r2
 800f7ec:	f8ca 1000 	str.w	r1, [sl]
 800f7f0:	b1dc      	cbz	r4, 800f82a <__gethex+0x13e>
 800f7f2:	9b01      	ldr	r3, [sp, #4]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	bf14      	ite	ne
 800f7f8:	f04f 0800 	movne.w	r8, #0
 800f7fc:	f04f 0806 	moveq.w	r8, #6
 800f800:	4640      	mov	r0, r8
 800f802:	b005      	add	sp, #20
 800f804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f808:	4645      	mov	r5, r8
 800f80a:	4626      	mov	r6, r4
 800f80c:	2401      	movs	r4, #1
 800f80e:	e7c7      	b.n	800f7a0 <__gethex+0xb4>
 800f810:	f04f 0b00 	mov.w	fp, #0
 800f814:	1ca9      	adds	r1, r5, #2
 800f816:	e7d0      	b.n	800f7ba <__gethex+0xce>
 800f818:	f04f 0b01 	mov.w	fp, #1
 800f81c:	e7fa      	b.n	800f814 <__gethex+0x128>
 800f81e:	230a      	movs	r3, #10
 800f820:	fb03 0002 	mla	r0, r3, r2, r0
 800f824:	e7d0      	b.n	800f7c8 <__gethex+0xdc>
 800f826:	4629      	mov	r1, r5
 800f828:	e7e0      	b.n	800f7ec <__gethex+0x100>
 800f82a:	eba5 0308 	sub.w	r3, r5, r8
 800f82e:	3b01      	subs	r3, #1
 800f830:	4621      	mov	r1, r4
 800f832:	2b07      	cmp	r3, #7
 800f834:	dc0a      	bgt.n	800f84c <__gethex+0x160>
 800f836:	4648      	mov	r0, r9
 800f838:	f000 fa5a 	bl	800fcf0 <_Balloc>
 800f83c:	4604      	mov	r4, r0
 800f83e:	b940      	cbnz	r0, 800f852 <__gethex+0x166>
 800f840:	4b61      	ldr	r3, [pc, #388]	; (800f9c8 <__gethex+0x2dc>)
 800f842:	4602      	mov	r2, r0
 800f844:	21e4      	movs	r1, #228	; 0xe4
 800f846:	4861      	ldr	r0, [pc, #388]	; (800f9cc <__gethex+0x2e0>)
 800f848:	f001 f9b2 	bl	8010bb0 <__assert_func>
 800f84c:	3101      	adds	r1, #1
 800f84e:	105b      	asrs	r3, r3, #1
 800f850:	e7ef      	b.n	800f832 <__gethex+0x146>
 800f852:	f100 0a14 	add.w	sl, r0, #20
 800f856:	2300      	movs	r3, #0
 800f858:	495a      	ldr	r1, [pc, #360]	; (800f9c4 <__gethex+0x2d8>)
 800f85a:	f8cd a004 	str.w	sl, [sp, #4]
 800f85e:	469b      	mov	fp, r3
 800f860:	45a8      	cmp	r8, r5
 800f862:	d342      	bcc.n	800f8ea <__gethex+0x1fe>
 800f864:	9801      	ldr	r0, [sp, #4]
 800f866:	f840 bb04 	str.w	fp, [r0], #4
 800f86a:	eba0 000a 	sub.w	r0, r0, sl
 800f86e:	1080      	asrs	r0, r0, #2
 800f870:	6120      	str	r0, [r4, #16]
 800f872:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800f876:	4658      	mov	r0, fp
 800f878:	f000 fb2c 	bl	800fed4 <__hi0bits>
 800f87c:	683d      	ldr	r5, [r7, #0]
 800f87e:	eba8 0000 	sub.w	r0, r8, r0
 800f882:	42a8      	cmp	r0, r5
 800f884:	dd59      	ble.n	800f93a <__gethex+0x24e>
 800f886:	eba0 0805 	sub.w	r8, r0, r5
 800f88a:	4641      	mov	r1, r8
 800f88c:	4620      	mov	r0, r4
 800f88e:	f000 febb 	bl	8010608 <__any_on>
 800f892:	4683      	mov	fp, r0
 800f894:	b1b8      	cbz	r0, 800f8c6 <__gethex+0x1da>
 800f896:	f108 33ff 	add.w	r3, r8, #4294967295
 800f89a:	1159      	asrs	r1, r3, #5
 800f89c:	f003 021f 	and.w	r2, r3, #31
 800f8a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f8a4:	f04f 0b01 	mov.w	fp, #1
 800f8a8:	fa0b f202 	lsl.w	r2, fp, r2
 800f8ac:	420a      	tst	r2, r1
 800f8ae:	d00a      	beq.n	800f8c6 <__gethex+0x1da>
 800f8b0:	455b      	cmp	r3, fp
 800f8b2:	dd06      	ble.n	800f8c2 <__gethex+0x1d6>
 800f8b4:	f1a8 0102 	sub.w	r1, r8, #2
 800f8b8:	4620      	mov	r0, r4
 800f8ba:	f000 fea5 	bl	8010608 <__any_on>
 800f8be:	2800      	cmp	r0, #0
 800f8c0:	d138      	bne.n	800f934 <__gethex+0x248>
 800f8c2:	f04f 0b02 	mov.w	fp, #2
 800f8c6:	4641      	mov	r1, r8
 800f8c8:	4620      	mov	r0, r4
 800f8ca:	f7ff fea7 	bl	800f61c <rshift>
 800f8ce:	4446      	add	r6, r8
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	42b3      	cmp	r3, r6
 800f8d4:	da41      	bge.n	800f95a <__gethex+0x26e>
 800f8d6:	4621      	mov	r1, r4
 800f8d8:	4648      	mov	r0, r9
 800f8da:	f000 fa49 	bl	800fd70 <_Bfree>
 800f8de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	6013      	str	r3, [r2, #0]
 800f8e4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800f8e8:	e78a      	b.n	800f800 <__gethex+0x114>
 800f8ea:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800f8ee:	2a2e      	cmp	r2, #46	; 0x2e
 800f8f0:	d014      	beq.n	800f91c <__gethex+0x230>
 800f8f2:	2b20      	cmp	r3, #32
 800f8f4:	d106      	bne.n	800f904 <__gethex+0x218>
 800f8f6:	9b01      	ldr	r3, [sp, #4]
 800f8f8:	f843 bb04 	str.w	fp, [r3], #4
 800f8fc:	f04f 0b00 	mov.w	fp, #0
 800f900:	9301      	str	r3, [sp, #4]
 800f902:	465b      	mov	r3, fp
 800f904:	7828      	ldrb	r0, [r5, #0]
 800f906:	9303      	str	r3, [sp, #12]
 800f908:	f7ff feda 	bl	800f6c0 <__hexdig_fun>
 800f90c:	9b03      	ldr	r3, [sp, #12]
 800f90e:	f000 000f 	and.w	r0, r0, #15
 800f912:	4098      	lsls	r0, r3
 800f914:	ea4b 0b00 	orr.w	fp, fp, r0
 800f918:	3304      	adds	r3, #4
 800f91a:	e7a1      	b.n	800f860 <__gethex+0x174>
 800f91c:	45a8      	cmp	r8, r5
 800f91e:	d8e8      	bhi.n	800f8f2 <__gethex+0x206>
 800f920:	2201      	movs	r2, #1
 800f922:	4628      	mov	r0, r5
 800f924:	9303      	str	r3, [sp, #12]
 800f926:	f7fe fef8 	bl	800e71a <strncmp>
 800f92a:	4926      	ldr	r1, [pc, #152]	; (800f9c4 <__gethex+0x2d8>)
 800f92c:	9b03      	ldr	r3, [sp, #12]
 800f92e:	2800      	cmp	r0, #0
 800f930:	d1df      	bne.n	800f8f2 <__gethex+0x206>
 800f932:	e795      	b.n	800f860 <__gethex+0x174>
 800f934:	f04f 0b03 	mov.w	fp, #3
 800f938:	e7c5      	b.n	800f8c6 <__gethex+0x1da>
 800f93a:	da0b      	bge.n	800f954 <__gethex+0x268>
 800f93c:	eba5 0800 	sub.w	r8, r5, r0
 800f940:	4621      	mov	r1, r4
 800f942:	4642      	mov	r2, r8
 800f944:	4648      	mov	r0, r9
 800f946:	f000 fc2d 	bl	80101a4 <__lshift>
 800f94a:	eba6 0608 	sub.w	r6, r6, r8
 800f94e:	4604      	mov	r4, r0
 800f950:	f100 0a14 	add.w	sl, r0, #20
 800f954:	f04f 0b00 	mov.w	fp, #0
 800f958:	e7ba      	b.n	800f8d0 <__gethex+0x1e4>
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	42b3      	cmp	r3, r6
 800f95e:	dd73      	ble.n	800fa48 <__gethex+0x35c>
 800f960:	1b9e      	subs	r6, r3, r6
 800f962:	42b5      	cmp	r5, r6
 800f964:	dc34      	bgt.n	800f9d0 <__gethex+0x2e4>
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	2b02      	cmp	r3, #2
 800f96a:	d023      	beq.n	800f9b4 <__gethex+0x2c8>
 800f96c:	2b03      	cmp	r3, #3
 800f96e:	d025      	beq.n	800f9bc <__gethex+0x2d0>
 800f970:	2b01      	cmp	r3, #1
 800f972:	d115      	bne.n	800f9a0 <__gethex+0x2b4>
 800f974:	42b5      	cmp	r5, r6
 800f976:	d113      	bne.n	800f9a0 <__gethex+0x2b4>
 800f978:	2d01      	cmp	r5, #1
 800f97a:	d10b      	bne.n	800f994 <__gethex+0x2a8>
 800f97c:	9a02      	ldr	r2, [sp, #8]
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6013      	str	r3, [r2, #0]
 800f982:	2301      	movs	r3, #1
 800f984:	6123      	str	r3, [r4, #16]
 800f986:	f8ca 3000 	str.w	r3, [sl]
 800f98a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f98c:	f04f 0862 	mov.w	r8, #98	; 0x62
 800f990:	601c      	str	r4, [r3, #0]
 800f992:	e735      	b.n	800f800 <__gethex+0x114>
 800f994:	1e69      	subs	r1, r5, #1
 800f996:	4620      	mov	r0, r4
 800f998:	f000 fe36 	bl	8010608 <__any_on>
 800f99c:	2800      	cmp	r0, #0
 800f99e:	d1ed      	bne.n	800f97c <__gethex+0x290>
 800f9a0:	4621      	mov	r1, r4
 800f9a2:	4648      	mov	r0, r9
 800f9a4:	f000 f9e4 	bl	800fd70 <_Bfree>
 800f9a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	6013      	str	r3, [r2, #0]
 800f9ae:	f04f 0850 	mov.w	r8, #80	; 0x50
 800f9b2:	e725      	b.n	800f800 <__gethex+0x114>
 800f9b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d1f2      	bne.n	800f9a0 <__gethex+0x2b4>
 800f9ba:	e7df      	b.n	800f97c <__gethex+0x290>
 800f9bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d1dc      	bne.n	800f97c <__gethex+0x290>
 800f9c2:	e7ed      	b.n	800f9a0 <__gethex+0x2b4>
 800f9c4:	080138d8 	.word	0x080138d8
 800f9c8:	080139ed 	.word	0x080139ed
 800f9cc:	080139fe 	.word	0x080139fe
 800f9d0:	f106 38ff 	add.w	r8, r6, #4294967295
 800f9d4:	f1bb 0f00 	cmp.w	fp, #0
 800f9d8:	d133      	bne.n	800fa42 <__gethex+0x356>
 800f9da:	f1b8 0f00 	cmp.w	r8, #0
 800f9de:	d004      	beq.n	800f9ea <__gethex+0x2fe>
 800f9e0:	4641      	mov	r1, r8
 800f9e2:	4620      	mov	r0, r4
 800f9e4:	f000 fe10 	bl	8010608 <__any_on>
 800f9e8:	4683      	mov	fp, r0
 800f9ea:	ea4f 1268 	mov.w	r2, r8, asr #5
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f9f4:	f008 081f 	and.w	r8, r8, #31
 800f9f8:	fa03 f308 	lsl.w	r3, r3, r8
 800f9fc:	4213      	tst	r3, r2
 800f9fe:	4631      	mov	r1, r6
 800fa00:	4620      	mov	r0, r4
 800fa02:	bf18      	it	ne
 800fa04:	f04b 0b02 	orrne.w	fp, fp, #2
 800fa08:	1bad      	subs	r5, r5, r6
 800fa0a:	f7ff fe07 	bl	800f61c <rshift>
 800fa0e:	687e      	ldr	r6, [r7, #4]
 800fa10:	f04f 0802 	mov.w	r8, #2
 800fa14:	f1bb 0f00 	cmp.w	fp, #0
 800fa18:	d04a      	beq.n	800fab0 <__gethex+0x3c4>
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	2b02      	cmp	r3, #2
 800fa1e:	d016      	beq.n	800fa4e <__gethex+0x362>
 800fa20:	2b03      	cmp	r3, #3
 800fa22:	d018      	beq.n	800fa56 <__gethex+0x36a>
 800fa24:	2b01      	cmp	r3, #1
 800fa26:	d109      	bne.n	800fa3c <__gethex+0x350>
 800fa28:	f01b 0f02 	tst.w	fp, #2
 800fa2c:	d006      	beq.n	800fa3c <__gethex+0x350>
 800fa2e:	f8da 3000 	ldr.w	r3, [sl]
 800fa32:	ea4b 0b03 	orr.w	fp, fp, r3
 800fa36:	f01b 0f01 	tst.w	fp, #1
 800fa3a:	d10f      	bne.n	800fa5c <__gethex+0x370>
 800fa3c:	f048 0810 	orr.w	r8, r8, #16
 800fa40:	e036      	b.n	800fab0 <__gethex+0x3c4>
 800fa42:	f04f 0b01 	mov.w	fp, #1
 800fa46:	e7d0      	b.n	800f9ea <__gethex+0x2fe>
 800fa48:	f04f 0801 	mov.w	r8, #1
 800fa4c:	e7e2      	b.n	800fa14 <__gethex+0x328>
 800fa4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa50:	f1c3 0301 	rsb	r3, r3, #1
 800fa54:	930f      	str	r3, [sp, #60]	; 0x3c
 800fa56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d0ef      	beq.n	800fa3c <__gethex+0x350>
 800fa5c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fa60:	f104 0214 	add.w	r2, r4, #20
 800fa64:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800fa68:	9301      	str	r3, [sp, #4]
 800fa6a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800fa6e:	2300      	movs	r3, #0
 800fa70:	4694      	mov	ip, r2
 800fa72:	f852 1b04 	ldr.w	r1, [r2], #4
 800fa76:	f1b1 3fff 	cmp.w	r1, #4294967295
 800fa7a:	d01e      	beq.n	800faba <__gethex+0x3ce>
 800fa7c:	3101      	adds	r1, #1
 800fa7e:	f8cc 1000 	str.w	r1, [ip]
 800fa82:	f1b8 0f02 	cmp.w	r8, #2
 800fa86:	f104 0214 	add.w	r2, r4, #20
 800fa8a:	d13d      	bne.n	800fb08 <__gethex+0x41c>
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	3b01      	subs	r3, #1
 800fa90:	42ab      	cmp	r3, r5
 800fa92:	d10b      	bne.n	800faac <__gethex+0x3c0>
 800fa94:	1169      	asrs	r1, r5, #5
 800fa96:	2301      	movs	r3, #1
 800fa98:	f005 051f 	and.w	r5, r5, #31
 800fa9c:	fa03 f505 	lsl.w	r5, r3, r5
 800faa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800faa4:	421d      	tst	r5, r3
 800faa6:	bf18      	it	ne
 800faa8:	f04f 0801 	movne.w	r8, #1
 800faac:	f048 0820 	orr.w	r8, r8, #32
 800fab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fab2:	601c      	str	r4, [r3, #0]
 800fab4:	9b02      	ldr	r3, [sp, #8]
 800fab6:	601e      	str	r6, [r3, #0]
 800fab8:	e6a2      	b.n	800f800 <__gethex+0x114>
 800faba:	4290      	cmp	r0, r2
 800fabc:	f842 3c04 	str.w	r3, [r2, #-4]
 800fac0:	d8d6      	bhi.n	800fa70 <__gethex+0x384>
 800fac2:	68a2      	ldr	r2, [r4, #8]
 800fac4:	4593      	cmp	fp, r2
 800fac6:	db17      	blt.n	800faf8 <__gethex+0x40c>
 800fac8:	6861      	ldr	r1, [r4, #4]
 800faca:	4648      	mov	r0, r9
 800facc:	3101      	adds	r1, #1
 800face:	f000 f90f 	bl	800fcf0 <_Balloc>
 800fad2:	4682      	mov	sl, r0
 800fad4:	b918      	cbnz	r0, 800fade <__gethex+0x3f2>
 800fad6:	4b1b      	ldr	r3, [pc, #108]	; (800fb44 <__gethex+0x458>)
 800fad8:	4602      	mov	r2, r0
 800fada:	2184      	movs	r1, #132	; 0x84
 800fadc:	e6b3      	b.n	800f846 <__gethex+0x15a>
 800fade:	6922      	ldr	r2, [r4, #16]
 800fae0:	3202      	adds	r2, #2
 800fae2:	f104 010c 	add.w	r1, r4, #12
 800fae6:	0092      	lsls	r2, r2, #2
 800fae8:	300c      	adds	r0, #12
 800faea:	f7fe feb0 	bl	800e84e <memcpy>
 800faee:	4621      	mov	r1, r4
 800faf0:	4648      	mov	r0, r9
 800faf2:	f000 f93d 	bl	800fd70 <_Bfree>
 800faf6:	4654      	mov	r4, sl
 800faf8:	6922      	ldr	r2, [r4, #16]
 800fafa:	1c51      	adds	r1, r2, #1
 800fafc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800fb00:	6121      	str	r1, [r4, #16]
 800fb02:	2101      	movs	r1, #1
 800fb04:	6151      	str	r1, [r2, #20]
 800fb06:	e7bc      	b.n	800fa82 <__gethex+0x396>
 800fb08:	6921      	ldr	r1, [r4, #16]
 800fb0a:	4559      	cmp	r1, fp
 800fb0c:	dd0b      	ble.n	800fb26 <__gethex+0x43a>
 800fb0e:	2101      	movs	r1, #1
 800fb10:	4620      	mov	r0, r4
 800fb12:	f7ff fd83 	bl	800f61c <rshift>
 800fb16:	68bb      	ldr	r3, [r7, #8]
 800fb18:	3601      	adds	r6, #1
 800fb1a:	42b3      	cmp	r3, r6
 800fb1c:	f6ff aedb 	blt.w	800f8d6 <__gethex+0x1ea>
 800fb20:	f04f 0801 	mov.w	r8, #1
 800fb24:	e7c2      	b.n	800faac <__gethex+0x3c0>
 800fb26:	f015 051f 	ands.w	r5, r5, #31
 800fb2a:	d0f9      	beq.n	800fb20 <__gethex+0x434>
 800fb2c:	9b01      	ldr	r3, [sp, #4]
 800fb2e:	441a      	add	r2, r3
 800fb30:	f1c5 0520 	rsb	r5, r5, #32
 800fb34:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800fb38:	f000 f9cc 	bl	800fed4 <__hi0bits>
 800fb3c:	42a8      	cmp	r0, r5
 800fb3e:	dbe6      	blt.n	800fb0e <__gethex+0x422>
 800fb40:	e7ee      	b.n	800fb20 <__gethex+0x434>
 800fb42:	bf00      	nop
 800fb44:	080139ed 	.word	0x080139ed

0800fb48 <L_shift>:
 800fb48:	f1c2 0208 	rsb	r2, r2, #8
 800fb4c:	0092      	lsls	r2, r2, #2
 800fb4e:	b570      	push	{r4, r5, r6, lr}
 800fb50:	f1c2 0620 	rsb	r6, r2, #32
 800fb54:	6843      	ldr	r3, [r0, #4]
 800fb56:	6804      	ldr	r4, [r0, #0]
 800fb58:	fa03 f506 	lsl.w	r5, r3, r6
 800fb5c:	432c      	orrs	r4, r5
 800fb5e:	40d3      	lsrs	r3, r2
 800fb60:	6004      	str	r4, [r0, #0]
 800fb62:	f840 3f04 	str.w	r3, [r0, #4]!
 800fb66:	4288      	cmp	r0, r1
 800fb68:	d3f4      	bcc.n	800fb54 <L_shift+0xc>
 800fb6a:	bd70      	pop	{r4, r5, r6, pc}

0800fb6c <__match>:
 800fb6c:	b530      	push	{r4, r5, lr}
 800fb6e:	6803      	ldr	r3, [r0, #0]
 800fb70:	3301      	adds	r3, #1
 800fb72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb76:	b914      	cbnz	r4, 800fb7e <__match+0x12>
 800fb78:	6003      	str	r3, [r0, #0]
 800fb7a:	2001      	movs	r0, #1
 800fb7c:	bd30      	pop	{r4, r5, pc}
 800fb7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb82:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fb86:	2d19      	cmp	r5, #25
 800fb88:	bf98      	it	ls
 800fb8a:	3220      	addls	r2, #32
 800fb8c:	42a2      	cmp	r2, r4
 800fb8e:	d0f0      	beq.n	800fb72 <__match+0x6>
 800fb90:	2000      	movs	r0, #0
 800fb92:	e7f3      	b.n	800fb7c <__match+0x10>

0800fb94 <__hexnan>:
 800fb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb98:	680b      	ldr	r3, [r1, #0]
 800fb9a:	6801      	ldr	r1, [r0, #0]
 800fb9c:	115e      	asrs	r6, r3, #5
 800fb9e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fba2:	f013 031f 	ands.w	r3, r3, #31
 800fba6:	b087      	sub	sp, #28
 800fba8:	bf18      	it	ne
 800fbaa:	3604      	addne	r6, #4
 800fbac:	2500      	movs	r5, #0
 800fbae:	1f37      	subs	r7, r6, #4
 800fbb0:	4682      	mov	sl, r0
 800fbb2:	4690      	mov	r8, r2
 800fbb4:	9301      	str	r3, [sp, #4]
 800fbb6:	f846 5c04 	str.w	r5, [r6, #-4]
 800fbba:	46b9      	mov	r9, r7
 800fbbc:	463c      	mov	r4, r7
 800fbbe:	9502      	str	r5, [sp, #8]
 800fbc0:	46ab      	mov	fp, r5
 800fbc2:	784a      	ldrb	r2, [r1, #1]
 800fbc4:	1c4b      	adds	r3, r1, #1
 800fbc6:	9303      	str	r3, [sp, #12]
 800fbc8:	b342      	cbz	r2, 800fc1c <__hexnan+0x88>
 800fbca:	4610      	mov	r0, r2
 800fbcc:	9105      	str	r1, [sp, #20]
 800fbce:	9204      	str	r2, [sp, #16]
 800fbd0:	f7ff fd76 	bl	800f6c0 <__hexdig_fun>
 800fbd4:	2800      	cmp	r0, #0
 800fbd6:	d14f      	bne.n	800fc78 <__hexnan+0xe4>
 800fbd8:	9a04      	ldr	r2, [sp, #16]
 800fbda:	9905      	ldr	r1, [sp, #20]
 800fbdc:	2a20      	cmp	r2, #32
 800fbde:	d818      	bhi.n	800fc12 <__hexnan+0x7e>
 800fbe0:	9b02      	ldr	r3, [sp, #8]
 800fbe2:	459b      	cmp	fp, r3
 800fbe4:	dd13      	ble.n	800fc0e <__hexnan+0x7a>
 800fbe6:	454c      	cmp	r4, r9
 800fbe8:	d206      	bcs.n	800fbf8 <__hexnan+0x64>
 800fbea:	2d07      	cmp	r5, #7
 800fbec:	dc04      	bgt.n	800fbf8 <__hexnan+0x64>
 800fbee:	462a      	mov	r2, r5
 800fbf0:	4649      	mov	r1, r9
 800fbf2:	4620      	mov	r0, r4
 800fbf4:	f7ff ffa8 	bl	800fb48 <L_shift>
 800fbf8:	4544      	cmp	r4, r8
 800fbfa:	d950      	bls.n	800fc9e <__hexnan+0x10a>
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	f1a4 0904 	sub.w	r9, r4, #4
 800fc02:	f844 3c04 	str.w	r3, [r4, #-4]
 800fc06:	f8cd b008 	str.w	fp, [sp, #8]
 800fc0a:	464c      	mov	r4, r9
 800fc0c:	461d      	mov	r5, r3
 800fc0e:	9903      	ldr	r1, [sp, #12]
 800fc10:	e7d7      	b.n	800fbc2 <__hexnan+0x2e>
 800fc12:	2a29      	cmp	r2, #41	; 0x29
 800fc14:	d155      	bne.n	800fcc2 <__hexnan+0x12e>
 800fc16:	3102      	adds	r1, #2
 800fc18:	f8ca 1000 	str.w	r1, [sl]
 800fc1c:	f1bb 0f00 	cmp.w	fp, #0
 800fc20:	d04f      	beq.n	800fcc2 <__hexnan+0x12e>
 800fc22:	454c      	cmp	r4, r9
 800fc24:	d206      	bcs.n	800fc34 <__hexnan+0xa0>
 800fc26:	2d07      	cmp	r5, #7
 800fc28:	dc04      	bgt.n	800fc34 <__hexnan+0xa0>
 800fc2a:	462a      	mov	r2, r5
 800fc2c:	4649      	mov	r1, r9
 800fc2e:	4620      	mov	r0, r4
 800fc30:	f7ff ff8a 	bl	800fb48 <L_shift>
 800fc34:	4544      	cmp	r4, r8
 800fc36:	d934      	bls.n	800fca2 <__hexnan+0x10e>
 800fc38:	f1a8 0204 	sub.w	r2, r8, #4
 800fc3c:	4623      	mov	r3, r4
 800fc3e:	f853 1b04 	ldr.w	r1, [r3], #4
 800fc42:	f842 1f04 	str.w	r1, [r2, #4]!
 800fc46:	429f      	cmp	r7, r3
 800fc48:	d2f9      	bcs.n	800fc3e <__hexnan+0xaa>
 800fc4a:	1b3b      	subs	r3, r7, r4
 800fc4c:	f023 0303 	bic.w	r3, r3, #3
 800fc50:	3304      	adds	r3, #4
 800fc52:	3e03      	subs	r6, #3
 800fc54:	3401      	adds	r4, #1
 800fc56:	42a6      	cmp	r6, r4
 800fc58:	bf38      	it	cc
 800fc5a:	2304      	movcc	r3, #4
 800fc5c:	4443      	add	r3, r8
 800fc5e:	2200      	movs	r2, #0
 800fc60:	f843 2b04 	str.w	r2, [r3], #4
 800fc64:	429f      	cmp	r7, r3
 800fc66:	d2fb      	bcs.n	800fc60 <__hexnan+0xcc>
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	b91b      	cbnz	r3, 800fc74 <__hexnan+0xe0>
 800fc6c:	4547      	cmp	r7, r8
 800fc6e:	d126      	bne.n	800fcbe <__hexnan+0x12a>
 800fc70:	2301      	movs	r3, #1
 800fc72:	603b      	str	r3, [r7, #0]
 800fc74:	2005      	movs	r0, #5
 800fc76:	e025      	b.n	800fcc4 <__hexnan+0x130>
 800fc78:	3501      	adds	r5, #1
 800fc7a:	2d08      	cmp	r5, #8
 800fc7c:	f10b 0b01 	add.w	fp, fp, #1
 800fc80:	dd06      	ble.n	800fc90 <__hexnan+0xfc>
 800fc82:	4544      	cmp	r4, r8
 800fc84:	d9c3      	bls.n	800fc0e <__hexnan+0x7a>
 800fc86:	2300      	movs	r3, #0
 800fc88:	f844 3c04 	str.w	r3, [r4, #-4]
 800fc8c:	2501      	movs	r5, #1
 800fc8e:	3c04      	subs	r4, #4
 800fc90:	6822      	ldr	r2, [r4, #0]
 800fc92:	f000 000f 	and.w	r0, r0, #15
 800fc96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fc9a:	6020      	str	r0, [r4, #0]
 800fc9c:	e7b7      	b.n	800fc0e <__hexnan+0x7a>
 800fc9e:	2508      	movs	r5, #8
 800fca0:	e7b5      	b.n	800fc0e <__hexnan+0x7a>
 800fca2:	9b01      	ldr	r3, [sp, #4]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d0df      	beq.n	800fc68 <__hexnan+0xd4>
 800fca8:	f1c3 0320 	rsb	r3, r3, #32
 800fcac:	f04f 32ff 	mov.w	r2, #4294967295
 800fcb0:	40da      	lsrs	r2, r3
 800fcb2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800fcb6:	4013      	ands	r3, r2
 800fcb8:	f846 3c04 	str.w	r3, [r6, #-4]
 800fcbc:	e7d4      	b.n	800fc68 <__hexnan+0xd4>
 800fcbe:	3f04      	subs	r7, #4
 800fcc0:	e7d2      	b.n	800fc68 <__hexnan+0xd4>
 800fcc2:	2004      	movs	r0, #4
 800fcc4:	b007      	add	sp, #28
 800fcc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fcca <__ascii_mbtowc>:
 800fcca:	b082      	sub	sp, #8
 800fccc:	b901      	cbnz	r1, 800fcd0 <__ascii_mbtowc+0x6>
 800fcce:	a901      	add	r1, sp, #4
 800fcd0:	b142      	cbz	r2, 800fce4 <__ascii_mbtowc+0x1a>
 800fcd2:	b14b      	cbz	r3, 800fce8 <__ascii_mbtowc+0x1e>
 800fcd4:	7813      	ldrb	r3, [r2, #0]
 800fcd6:	600b      	str	r3, [r1, #0]
 800fcd8:	7812      	ldrb	r2, [r2, #0]
 800fcda:	1e10      	subs	r0, r2, #0
 800fcdc:	bf18      	it	ne
 800fcde:	2001      	movne	r0, #1
 800fce0:	b002      	add	sp, #8
 800fce2:	4770      	bx	lr
 800fce4:	4610      	mov	r0, r2
 800fce6:	e7fb      	b.n	800fce0 <__ascii_mbtowc+0x16>
 800fce8:	f06f 0001 	mvn.w	r0, #1
 800fcec:	e7f8      	b.n	800fce0 <__ascii_mbtowc+0x16>
	...

0800fcf0 <_Balloc>:
 800fcf0:	b570      	push	{r4, r5, r6, lr}
 800fcf2:	69c6      	ldr	r6, [r0, #28]
 800fcf4:	4604      	mov	r4, r0
 800fcf6:	460d      	mov	r5, r1
 800fcf8:	b976      	cbnz	r6, 800fd18 <_Balloc+0x28>
 800fcfa:	2010      	movs	r0, #16
 800fcfc:	f7fc fe90 	bl	800ca20 <malloc>
 800fd00:	4602      	mov	r2, r0
 800fd02:	61e0      	str	r0, [r4, #28]
 800fd04:	b920      	cbnz	r0, 800fd10 <_Balloc+0x20>
 800fd06:	4b18      	ldr	r3, [pc, #96]	; (800fd68 <_Balloc+0x78>)
 800fd08:	4818      	ldr	r0, [pc, #96]	; (800fd6c <_Balloc+0x7c>)
 800fd0a:	216b      	movs	r1, #107	; 0x6b
 800fd0c:	f000 ff50 	bl	8010bb0 <__assert_func>
 800fd10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd14:	6006      	str	r6, [r0, #0]
 800fd16:	60c6      	str	r6, [r0, #12]
 800fd18:	69e6      	ldr	r6, [r4, #28]
 800fd1a:	68f3      	ldr	r3, [r6, #12]
 800fd1c:	b183      	cbz	r3, 800fd40 <_Balloc+0x50>
 800fd1e:	69e3      	ldr	r3, [r4, #28]
 800fd20:	68db      	ldr	r3, [r3, #12]
 800fd22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fd26:	b9b8      	cbnz	r0, 800fd58 <_Balloc+0x68>
 800fd28:	2101      	movs	r1, #1
 800fd2a:	fa01 f605 	lsl.w	r6, r1, r5
 800fd2e:	1d72      	adds	r2, r6, #5
 800fd30:	0092      	lsls	r2, r2, #2
 800fd32:	4620      	mov	r0, r4
 800fd34:	f000 ff5a 	bl	8010bec <_calloc_r>
 800fd38:	b160      	cbz	r0, 800fd54 <_Balloc+0x64>
 800fd3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fd3e:	e00e      	b.n	800fd5e <_Balloc+0x6e>
 800fd40:	2221      	movs	r2, #33	; 0x21
 800fd42:	2104      	movs	r1, #4
 800fd44:	4620      	mov	r0, r4
 800fd46:	f000 ff51 	bl	8010bec <_calloc_r>
 800fd4a:	69e3      	ldr	r3, [r4, #28]
 800fd4c:	60f0      	str	r0, [r6, #12]
 800fd4e:	68db      	ldr	r3, [r3, #12]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d1e4      	bne.n	800fd1e <_Balloc+0x2e>
 800fd54:	2000      	movs	r0, #0
 800fd56:	bd70      	pop	{r4, r5, r6, pc}
 800fd58:	6802      	ldr	r2, [r0, #0]
 800fd5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fd5e:	2300      	movs	r3, #0
 800fd60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fd64:	e7f7      	b.n	800fd56 <_Balloc+0x66>
 800fd66:	bf00      	nop
 800fd68:	0801397e 	.word	0x0801397e
 800fd6c:	08013a5e 	.word	0x08013a5e

0800fd70 <_Bfree>:
 800fd70:	b570      	push	{r4, r5, r6, lr}
 800fd72:	69c6      	ldr	r6, [r0, #28]
 800fd74:	4605      	mov	r5, r0
 800fd76:	460c      	mov	r4, r1
 800fd78:	b976      	cbnz	r6, 800fd98 <_Bfree+0x28>
 800fd7a:	2010      	movs	r0, #16
 800fd7c:	f7fc fe50 	bl	800ca20 <malloc>
 800fd80:	4602      	mov	r2, r0
 800fd82:	61e8      	str	r0, [r5, #28]
 800fd84:	b920      	cbnz	r0, 800fd90 <_Bfree+0x20>
 800fd86:	4b09      	ldr	r3, [pc, #36]	; (800fdac <_Bfree+0x3c>)
 800fd88:	4809      	ldr	r0, [pc, #36]	; (800fdb0 <_Bfree+0x40>)
 800fd8a:	218f      	movs	r1, #143	; 0x8f
 800fd8c:	f000 ff10 	bl	8010bb0 <__assert_func>
 800fd90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd94:	6006      	str	r6, [r0, #0]
 800fd96:	60c6      	str	r6, [r0, #12]
 800fd98:	b13c      	cbz	r4, 800fdaa <_Bfree+0x3a>
 800fd9a:	69eb      	ldr	r3, [r5, #28]
 800fd9c:	6862      	ldr	r2, [r4, #4]
 800fd9e:	68db      	ldr	r3, [r3, #12]
 800fda0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fda4:	6021      	str	r1, [r4, #0]
 800fda6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fdaa:	bd70      	pop	{r4, r5, r6, pc}
 800fdac:	0801397e 	.word	0x0801397e
 800fdb0:	08013a5e 	.word	0x08013a5e

0800fdb4 <__multadd>:
 800fdb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdb8:	690d      	ldr	r5, [r1, #16]
 800fdba:	4607      	mov	r7, r0
 800fdbc:	460c      	mov	r4, r1
 800fdbe:	461e      	mov	r6, r3
 800fdc0:	f101 0c14 	add.w	ip, r1, #20
 800fdc4:	2000      	movs	r0, #0
 800fdc6:	f8dc 3000 	ldr.w	r3, [ip]
 800fdca:	b299      	uxth	r1, r3
 800fdcc:	fb02 6101 	mla	r1, r2, r1, r6
 800fdd0:	0c1e      	lsrs	r6, r3, #16
 800fdd2:	0c0b      	lsrs	r3, r1, #16
 800fdd4:	fb02 3306 	mla	r3, r2, r6, r3
 800fdd8:	b289      	uxth	r1, r1
 800fdda:	3001      	adds	r0, #1
 800fddc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fde0:	4285      	cmp	r5, r0
 800fde2:	f84c 1b04 	str.w	r1, [ip], #4
 800fde6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fdea:	dcec      	bgt.n	800fdc6 <__multadd+0x12>
 800fdec:	b30e      	cbz	r6, 800fe32 <__multadd+0x7e>
 800fdee:	68a3      	ldr	r3, [r4, #8]
 800fdf0:	42ab      	cmp	r3, r5
 800fdf2:	dc19      	bgt.n	800fe28 <__multadd+0x74>
 800fdf4:	6861      	ldr	r1, [r4, #4]
 800fdf6:	4638      	mov	r0, r7
 800fdf8:	3101      	adds	r1, #1
 800fdfa:	f7ff ff79 	bl	800fcf0 <_Balloc>
 800fdfe:	4680      	mov	r8, r0
 800fe00:	b928      	cbnz	r0, 800fe0e <__multadd+0x5a>
 800fe02:	4602      	mov	r2, r0
 800fe04:	4b0c      	ldr	r3, [pc, #48]	; (800fe38 <__multadd+0x84>)
 800fe06:	480d      	ldr	r0, [pc, #52]	; (800fe3c <__multadd+0x88>)
 800fe08:	21ba      	movs	r1, #186	; 0xba
 800fe0a:	f000 fed1 	bl	8010bb0 <__assert_func>
 800fe0e:	6922      	ldr	r2, [r4, #16]
 800fe10:	3202      	adds	r2, #2
 800fe12:	f104 010c 	add.w	r1, r4, #12
 800fe16:	0092      	lsls	r2, r2, #2
 800fe18:	300c      	adds	r0, #12
 800fe1a:	f7fe fd18 	bl	800e84e <memcpy>
 800fe1e:	4621      	mov	r1, r4
 800fe20:	4638      	mov	r0, r7
 800fe22:	f7ff ffa5 	bl	800fd70 <_Bfree>
 800fe26:	4644      	mov	r4, r8
 800fe28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fe2c:	3501      	adds	r5, #1
 800fe2e:	615e      	str	r6, [r3, #20]
 800fe30:	6125      	str	r5, [r4, #16]
 800fe32:	4620      	mov	r0, r4
 800fe34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe38:	080139ed 	.word	0x080139ed
 800fe3c:	08013a5e 	.word	0x08013a5e

0800fe40 <__s2b>:
 800fe40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe44:	460c      	mov	r4, r1
 800fe46:	4615      	mov	r5, r2
 800fe48:	461f      	mov	r7, r3
 800fe4a:	2209      	movs	r2, #9
 800fe4c:	3308      	adds	r3, #8
 800fe4e:	4606      	mov	r6, r0
 800fe50:	fb93 f3f2 	sdiv	r3, r3, r2
 800fe54:	2100      	movs	r1, #0
 800fe56:	2201      	movs	r2, #1
 800fe58:	429a      	cmp	r2, r3
 800fe5a:	db09      	blt.n	800fe70 <__s2b+0x30>
 800fe5c:	4630      	mov	r0, r6
 800fe5e:	f7ff ff47 	bl	800fcf0 <_Balloc>
 800fe62:	b940      	cbnz	r0, 800fe76 <__s2b+0x36>
 800fe64:	4602      	mov	r2, r0
 800fe66:	4b19      	ldr	r3, [pc, #100]	; (800fecc <__s2b+0x8c>)
 800fe68:	4819      	ldr	r0, [pc, #100]	; (800fed0 <__s2b+0x90>)
 800fe6a:	21d3      	movs	r1, #211	; 0xd3
 800fe6c:	f000 fea0 	bl	8010bb0 <__assert_func>
 800fe70:	0052      	lsls	r2, r2, #1
 800fe72:	3101      	adds	r1, #1
 800fe74:	e7f0      	b.n	800fe58 <__s2b+0x18>
 800fe76:	9b08      	ldr	r3, [sp, #32]
 800fe78:	6143      	str	r3, [r0, #20]
 800fe7a:	2d09      	cmp	r5, #9
 800fe7c:	f04f 0301 	mov.w	r3, #1
 800fe80:	6103      	str	r3, [r0, #16]
 800fe82:	dd16      	ble.n	800feb2 <__s2b+0x72>
 800fe84:	f104 0909 	add.w	r9, r4, #9
 800fe88:	46c8      	mov	r8, r9
 800fe8a:	442c      	add	r4, r5
 800fe8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fe90:	4601      	mov	r1, r0
 800fe92:	3b30      	subs	r3, #48	; 0x30
 800fe94:	220a      	movs	r2, #10
 800fe96:	4630      	mov	r0, r6
 800fe98:	f7ff ff8c 	bl	800fdb4 <__multadd>
 800fe9c:	45a0      	cmp	r8, r4
 800fe9e:	d1f5      	bne.n	800fe8c <__s2b+0x4c>
 800fea0:	f1a5 0408 	sub.w	r4, r5, #8
 800fea4:	444c      	add	r4, r9
 800fea6:	1b2d      	subs	r5, r5, r4
 800fea8:	1963      	adds	r3, r4, r5
 800feaa:	42bb      	cmp	r3, r7
 800feac:	db04      	blt.n	800feb8 <__s2b+0x78>
 800feae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800feb2:	340a      	adds	r4, #10
 800feb4:	2509      	movs	r5, #9
 800feb6:	e7f6      	b.n	800fea6 <__s2b+0x66>
 800feb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800febc:	4601      	mov	r1, r0
 800febe:	3b30      	subs	r3, #48	; 0x30
 800fec0:	220a      	movs	r2, #10
 800fec2:	4630      	mov	r0, r6
 800fec4:	f7ff ff76 	bl	800fdb4 <__multadd>
 800fec8:	e7ee      	b.n	800fea8 <__s2b+0x68>
 800feca:	bf00      	nop
 800fecc:	080139ed 	.word	0x080139ed
 800fed0:	08013a5e 	.word	0x08013a5e

0800fed4 <__hi0bits>:
 800fed4:	0c03      	lsrs	r3, r0, #16
 800fed6:	041b      	lsls	r3, r3, #16
 800fed8:	b9d3      	cbnz	r3, 800ff10 <__hi0bits+0x3c>
 800feda:	0400      	lsls	r0, r0, #16
 800fedc:	2310      	movs	r3, #16
 800fede:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fee2:	bf04      	itt	eq
 800fee4:	0200      	lsleq	r0, r0, #8
 800fee6:	3308      	addeq	r3, #8
 800fee8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800feec:	bf04      	itt	eq
 800feee:	0100      	lsleq	r0, r0, #4
 800fef0:	3304      	addeq	r3, #4
 800fef2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fef6:	bf04      	itt	eq
 800fef8:	0080      	lsleq	r0, r0, #2
 800fefa:	3302      	addeq	r3, #2
 800fefc:	2800      	cmp	r0, #0
 800fefe:	db05      	blt.n	800ff0c <__hi0bits+0x38>
 800ff00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ff04:	f103 0301 	add.w	r3, r3, #1
 800ff08:	bf08      	it	eq
 800ff0a:	2320      	moveq	r3, #32
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	4770      	bx	lr
 800ff10:	2300      	movs	r3, #0
 800ff12:	e7e4      	b.n	800fede <__hi0bits+0xa>

0800ff14 <__lo0bits>:
 800ff14:	6803      	ldr	r3, [r0, #0]
 800ff16:	f013 0207 	ands.w	r2, r3, #7
 800ff1a:	d00c      	beq.n	800ff36 <__lo0bits+0x22>
 800ff1c:	07d9      	lsls	r1, r3, #31
 800ff1e:	d422      	bmi.n	800ff66 <__lo0bits+0x52>
 800ff20:	079a      	lsls	r2, r3, #30
 800ff22:	bf49      	itett	mi
 800ff24:	085b      	lsrmi	r3, r3, #1
 800ff26:	089b      	lsrpl	r3, r3, #2
 800ff28:	6003      	strmi	r3, [r0, #0]
 800ff2a:	2201      	movmi	r2, #1
 800ff2c:	bf5c      	itt	pl
 800ff2e:	6003      	strpl	r3, [r0, #0]
 800ff30:	2202      	movpl	r2, #2
 800ff32:	4610      	mov	r0, r2
 800ff34:	4770      	bx	lr
 800ff36:	b299      	uxth	r1, r3
 800ff38:	b909      	cbnz	r1, 800ff3e <__lo0bits+0x2a>
 800ff3a:	0c1b      	lsrs	r3, r3, #16
 800ff3c:	2210      	movs	r2, #16
 800ff3e:	b2d9      	uxtb	r1, r3
 800ff40:	b909      	cbnz	r1, 800ff46 <__lo0bits+0x32>
 800ff42:	3208      	adds	r2, #8
 800ff44:	0a1b      	lsrs	r3, r3, #8
 800ff46:	0719      	lsls	r1, r3, #28
 800ff48:	bf04      	itt	eq
 800ff4a:	091b      	lsreq	r3, r3, #4
 800ff4c:	3204      	addeq	r2, #4
 800ff4e:	0799      	lsls	r1, r3, #30
 800ff50:	bf04      	itt	eq
 800ff52:	089b      	lsreq	r3, r3, #2
 800ff54:	3202      	addeq	r2, #2
 800ff56:	07d9      	lsls	r1, r3, #31
 800ff58:	d403      	bmi.n	800ff62 <__lo0bits+0x4e>
 800ff5a:	085b      	lsrs	r3, r3, #1
 800ff5c:	f102 0201 	add.w	r2, r2, #1
 800ff60:	d003      	beq.n	800ff6a <__lo0bits+0x56>
 800ff62:	6003      	str	r3, [r0, #0]
 800ff64:	e7e5      	b.n	800ff32 <__lo0bits+0x1e>
 800ff66:	2200      	movs	r2, #0
 800ff68:	e7e3      	b.n	800ff32 <__lo0bits+0x1e>
 800ff6a:	2220      	movs	r2, #32
 800ff6c:	e7e1      	b.n	800ff32 <__lo0bits+0x1e>
	...

0800ff70 <__i2b>:
 800ff70:	b510      	push	{r4, lr}
 800ff72:	460c      	mov	r4, r1
 800ff74:	2101      	movs	r1, #1
 800ff76:	f7ff febb 	bl	800fcf0 <_Balloc>
 800ff7a:	4602      	mov	r2, r0
 800ff7c:	b928      	cbnz	r0, 800ff8a <__i2b+0x1a>
 800ff7e:	4b05      	ldr	r3, [pc, #20]	; (800ff94 <__i2b+0x24>)
 800ff80:	4805      	ldr	r0, [pc, #20]	; (800ff98 <__i2b+0x28>)
 800ff82:	f240 1145 	movw	r1, #325	; 0x145
 800ff86:	f000 fe13 	bl	8010bb0 <__assert_func>
 800ff8a:	2301      	movs	r3, #1
 800ff8c:	6144      	str	r4, [r0, #20]
 800ff8e:	6103      	str	r3, [r0, #16]
 800ff90:	bd10      	pop	{r4, pc}
 800ff92:	bf00      	nop
 800ff94:	080139ed 	.word	0x080139ed
 800ff98:	08013a5e 	.word	0x08013a5e

0800ff9c <__multiply>:
 800ff9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffa0:	4691      	mov	r9, r2
 800ffa2:	690a      	ldr	r2, [r1, #16]
 800ffa4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	bfb8      	it	lt
 800ffac:	460b      	movlt	r3, r1
 800ffae:	460c      	mov	r4, r1
 800ffb0:	bfbc      	itt	lt
 800ffb2:	464c      	movlt	r4, r9
 800ffb4:	4699      	movlt	r9, r3
 800ffb6:	6927      	ldr	r7, [r4, #16]
 800ffb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ffbc:	68a3      	ldr	r3, [r4, #8]
 800ffbe:	6861      	ldr	r1, [r4, #4]
 800ffc0:	eb07 060a 	add.w	r6, r7, sl
 800ffc4:	42b3      	cmp	r3, r6
 800ffc6:	b085      	sub	sp, #20
 800ffc8:	bfb8      	it	lt
 800ffca:	3101      	addlt	r1, #1
 800ffcc:	f7ff fe90 	bl	800fcf0 <_Balloc>
 800ffd0:	b930      	cbnz	r0, 800ffe0 <__multiply+0x44>
 800ffd2:	4602      	mov	r2, r0
 800ffd4:	4b44      	ldr	r3, [pc, #272]	; (80100e8 <__multiply+0x14c>)
 800ffd6:	4845      	ldr	r0, [pc, #276]	; (80100ec <__multiply+0x150>)
 800ffd8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ffdc:	f000 fde8 	bl	8010bb0 <__assert_func>
 800ffe0:	f100 0514 	add.w	r5, r0, #20
 800ffe4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ffe8:	462b      	mov	r3, r5
 800ffea:	2200      	movs	r2, #0
 800ffec:	4543      	cmp	r3, r8
 800ffee:	d321      	bcc.n	8010034 <__multiply+0x98>
 800fff0:	f104 0314 	add.w	r3, r4, #20
 800fff4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fff8:	f109 0314 	add.w	r3, r9, #20
 800fffc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010000:	9202      	str	r2, [sp, #8]
 8010002:	1b3a      	subs	r2, r7, r4
 8010004:	3a15      	subs	r2, #21
 8010006:	f022 0203 	bic.w	r2, r2, #3
 801000a:	3204      	adds	r2, #4
 801000c:	f104 0115 	add.w	r1, r4, #21
 8010010:	428f      	cmp	r7, r1
 8010012:	bf38      	it	cc
 8010014:	2204      	movcc	r2, #4
 8010016:	9201      	str	r2, [sp, #4]
 8010018:	9a02      	ldr	r2, [sp, #8]
 801001a:	9303      	str	r3, [sp, #12]
 801001c:	429a      	cmp	r2, r3
 801001e:	d80c      	bhi.n	801003a <__multiply+0x9e>
 8010020:	2e00      	cmp	r6, #0
 8010022:	dd03      	ble.n	801002c <__multiply+0x90>
 8010024:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010028:	2b00      	cmp	r3, #0
 801002a:	d05b      	beq.n	80100e4 <__multiply+0x148>
 801002c:	6106      	str	r6, [r0, #16]
 801002e:	b005      	add	sp, #20
 8010030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010034:	f843 2b04 	str.w	r2, [r3], #4
 8010038:	e7d8      	b.n	800ffec <__multiply+0x50>
 801003a:	f8b3 a000 	ldrh.w	sl, [r3]
 801003e:	f1ba 0f00 	cmp.w	sl, #0
 8010042:	d024      	beq.n	801008e <__multiply+0xf2>
 8010044:	f104 0e14 	add.w	lr, r4, #20
 8010048:	46a9      	mov	r9, r5
 801004a:	f04f 0c00 	mov.w	ip, #0
 801004e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010052:	f8d9 1000 	ldr.w	r1, [r9]
 8010056:	fa1f fb82 	uxth.w	fp, r2
 801005a:	b289      	uxth	r1, r1
 801005c:	fb0a 110b 	mla	r1, sl, fp, r1
 8010060:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010064:	f8d9 2000 	ldr.w	r2, [r9]
 8010068:	4461      	add	r1, ip
 801006a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801006e:	fb0a c20b 	mla	r2, sl, fp, ip
 8010072:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010076:	b289      	uxth	r1, r1
 8010078:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801007c:	4577      	cmp	r7, lr
 801007e:	f849 1b04 	str.w	r1, [r9], #4
 8010082:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010086:	d8e2      	bhi.n	801004e <__multiply+0xb2>
 8010088:	9a01      	ldr	r2, [sp, #4]
 801008a:	f845 c002 	str.w	ip, [r5, r2]
 801008e:	9a03      	ldr	r2, [sp, #12]
 8010090:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010094:	3304      	adds	r3, #4
 8010096:	f1b9 0f00 	cmp.w	r9, #0
 801009a:	d021      	beq.n	80100e0 <__multiply+0x144>
 801009c:	6829      	ldr	r1, [r5, #0]
 801009e:	f104 0c14 	add.w	ip, r4, #20
 80100a2:	46ae      	mov	lr, r5
 80100a4:	f04f 0a00 	mov.w	sl, #0
 80100a8:	f8bc b000 	ldrh.w	fp, [ip]
 80100ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80100b0:	fb09 220b 	mla	r2, r9, fp, r2
 80100b4:	4452      	add	r2, sl
 80100b6:	b289      	uxth	r1, r1
 80100b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80100bc:	f84e 1b04 	str.w	r1, [lr], #4
 80100c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80100c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80100c8:	f8be 1000 	ldrh.w	r1, [lr]
 80100cc:	fb09 110a 	mla	r1, r9, sl, r1
 80100d0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80100d4:	4567      	cmp	r7, ip
 80100d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80100da:	d8e5      	bhi.n	80100a8 <__multiply+0x10c>
 80100dc:	9a01      	ldr	r2, [sp, #4]
 80100de:	50a9      	str	r1, [r5, r2]
 80100e0:	3504      	adds	r5, #4
 80100e2:	e799      	b.n	8010018 <__multiply+0x7c>
 80100e4:	3e01      	subs	r6, #1
 80100e6:	e79b      	b.n	8010020 <__multiply+0x84>
 80100e8:	080139ed 	.word	0x080139ed
 80100ec:	08013a5e 	.word	0x08013a5e

080100f0 <__pow5mult>:
 80100f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100f4:	4615      	mov	r5, r2
 80100f6:	f012 0203 	ands.w	r2, r2, #3
 80100fa:	4606      	mov	r6, r0
 80100fc:	460f      	mov	r7, r1
 80100fe:	d007      	beq.n	8010110 <__pow5mult+0x20>
 8010100:	4c25      	ldr	r4, [pc, #148]	; (8010198 <__pow5mult+0xa8>)
 8010102:	3a01      	subs	r2, #1
 8010104:	2300      	movs	r3, #0
 8010106:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801010a:	f7ff fe53 	bl	800fdb4 <__multadd>
 801010e:	4607      	mov	r7, r0
 8010110:	10ad      	asrs	r5, r5, #2
 8010112:	d03d      	beq.n	8010190 <__pow5mult+0xa0>
 8010114:	69f4      	ldr	r4, [r6, #28]
 8010116:	b97c      	cbnz	r4, 8010138 <__pow5mult+0x48>
 8010118:	2010      	movs	r0, #16
 801011a:	f7fc fc81 	bl	800ca20 <malloc>
 801011e:	4602      	mov	r2, r0
 8010120:	61f0      	str	r0, [r6, #28]
 8010122:	b928      	cbnz	r0, 8010130 <__pow5mult+0x40>
 8010124:	4b1d      	ldr	r3, [pc, #116]	; (801019c <__pow5mult+0xac>)
 8010126:	481e      	ldr	r0, [pc, #120]	; (80101a0 <__pow5mult+0xb0>)
 8010128:	f240 11b3 	movw	r1, #435	; 0x1b3
 801012c:	f000 fd40 	bl	8010bb0 <__assert_func>
 8010130:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010134:	6004      	str	r4, [r0, #0]
 8010136:	60c4      	str	r4, [r0, #12]
 8010138:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801013c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010140:	b94c      	cbnz	r4, 8010156 <__pow5mult+0x66>
 8010142:	f240 2171 	movw	r1, #625	; 0x271
 8010146:	4630      	mov	r0, r6
 8010148:	f7ff ff12 	bl	800ff70 <__i2b>
 801014c:	2300      	movs	r3, #0
 801014e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010152:	4604      	mov	r4, r0
 8010154:	6003      	str	r3, [r0, #0]
 8010156:	f04f 0900 	mov.w	r9, #0
 801015a:	07eb      	lsls	r3, r5, #31
 801015c:	d50a      	bpl.n	8010174 <__pow5mult+0x84>
 801015e:	4639      	mov	r1, r7
 8010160:	4622      	mov	r2, r4
 8010162:	4630      	mov	r0, r6
 8010164:	f7ff ff1a 	bl	800ff9c <__multiply>
 8010168:	4639      	mov	r1, r7
 801016a:	4680      	mov	r8, r0
 801016c:	4630      	mov	r0, r6
 801016e:	f7ff fdff 	bl	800fd70 <_Bfree>
 8010172:	4647      	mov	r7, r8
 8010174:	106d      	asrs	r5, r5, #1
 8010176:	d00b      	beq.n	8010190 <__pow5mult+0xa0>
 8010178:	6820      	ldr	r0, [r4, #0]
 801017a:	b938      	cbnz	r0, 801018c <__pow5mult+0x9c>
 801017c:	4622      	mov	r2, r4
 801017e:	4621      	mov	r1, r4
 8010180:	4630      	mov	r0, r6
 8010182:	f7ff ff0b 	bl	800ff9c <__multiply>
 8010186:	6020      	str	r0, [r4, #0]
 8010188:	f8c0 9000 	str.w	r9, [r0]
 801018c:	4604      	mov	r4, r0
 801018e:	e7e4      	b.n	801015a <__pow5mult+0x6a>
 8010190:	4638      	mov	r0, r7
 8010192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010196:	bf00      	nop
 8010198:	08013ba8 	.word	0x08013ba8
 801019c:	0801397e 	.word	0x0801397e
 80101a0:	08013a5e 	.word	0x08013a5e

080101a4 <__lshift>:
 80101a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101a8:	460c      	mov	r4, r1
 80101aa:	6849      	ldr	r1, [r1, #4]
 80101ac:	6923      	ldr	r3, [r4, #16]
 80101ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80101b2:	68a3      	ldr	r3, [r4, #8]
 80101b4:	4607      	mov	r7, r0
 80101b6:	4691      	mov	r9, r2
 80101b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80101bc:	f108 0601 	add.w	r6, r8, #1
 80101c0:	42b3      	cmp	r3, r6
 80101c2:	db0b      	blt.n	80101dc <__lshift+0x38>
 80101c4:	4638      	mov	r0, r7
 80101c6:	f7ff fd93 	bl	800fcf0 <_Balloc>
 80101ca:	4605      	mov	r5, r0
 80101cc:	b948      	cbnz	r0, 80101e2 <__lshift+0x3e>
 80101ce:	4602      	mov	r2, r0
 80101d0:	4b28      	ldr	r3, [pc, #160]	; (8010274 <__lshift+0xd0>)
 80101d2:	4829      	ldr	r0, [pc, #164]	; (8010278 <__lshift+0xd4>)
 80101d4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80101d8:	f000 fcea 	bl	8010bb0 <__assert_func>
 80101dc:	3101      	adds	r1, #1
 80101de:	005b      	lsls	r3, r3, #1
 80101e0:	e7ee      	b.n	80101c0 <__lshift+0x1c>
 80101e2:	2300      	movs	r3, #0
 80101e4:	f100 0114 	add.w	r1, r0, #20
 80101e8:	f100 0210 	add.w	r2, r0, #16
 80101ec:	4618      	mov	r0, r3
 80101ee:	4553      	cmp	r3, sl
 80101f0:	db33      	blt.n	801025a <__lshift+0xb6>
 80101f2:	6920      	ldr	r0, [r4, #16]
 80101f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80101f8:	f104 0314 	add.w	r3, r4, #20
 80101fc:	f019 091f 	ands.w	r9, r9, #31
 8010200:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010204:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010208:	d02b      	beq.n	8010262 <__lshift+0xbe>
 801020a:	f1c9 0e20 	rsb	lr, r9, #32
 801020e:	468a      	mov	sl, r1
 8010210:	2200      	movs	r2, #0
 8010212:	6818      	ldr	r0, [r3, #0]
 8010214:	fa00 f009 	lsl.w	r0, r0, r9
 8010218:	4310      	orrs	r0, r2
 801021a:	f84a 0b04 	str.w	r0, [sl], #4
 801021e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010222:	459c      	cmp	ip, r3
 8010224:	fa22 f20e 	lsr.w	r2, r2, lr
 8010228:	d8f3      	bhi.n	8010212 <__lshift+0x6e>
 801022a:	ebac 0304 	sub.w	r3, ip, r4
 801022e:	3b15      	subs	r3, #21
 8010230:	f023 0303 	bic.w	r3, r3, #3
 8010234:	3304      	adds	r3, #4
 8010236:	f104 0015 	add.w	r0, r4, #21
 801023a:	4584      	cmp	ip, r0
 801023c:	bf38      	it	cc
 801023e:	2304      	movcc	r3, #4
 8010240:	50ca      	str	r2, [r1, r3]
 8010242:	b10a      	cbz	r2, 8010248 <__lshift+0xa4>
 8010244:	f108 0602 	add.w	r6, r8, #2
 8010248:	3e01      	subs	r6, #1
 801024a:	4638      	mov	r0, r7
 801024c:	612e      	str	r6, [r5, #16]
 801024e:	4621      	mov	r1, r4
 8010250:	f7ff fd8e 	bl	800fd70 <_Bfree>
 8010254:	4628      	mov	r0, r5
 8010256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801025a:	f842 0f04 	str.w	r0, [r2, #4]!
 801025e:	3301      	adds	r3, #1
 8010260:	e7c5      	b.n	80101ee <__lshift+0x4a>
 8010262:	3904      	subs	r1, #4
 8010264:	f853 2b04 	ldr.w	r2, [r3], #4
 8010268:	f841 2f04 	str.w	r2, [r1, #4]!
 801026c:	459c      	cmp	ip, r3
 801026e:	d8f9      	bhi.n	8010264 <__lshift+0xc0>
 8010270:	e7ea      	b.n	8010248 <__lshift+0xa4>
 8010272:	bf00      	nop
 8010274:	080139ed 	.word	0x080139ed
 8010278:	08013a5e 	.word	0x08013a5e

0801027c <__mcmp>:
 801027c:	b530      	push	{r4, r5, lr}
 801027e:	6902      	ldr	r2, [r0, #16]
 8010280:	690c      	ldr	r4, [r1, #16]
 8010282:	1b12      	subs	r2, r2, r4
 8010284:	d10e      	bne.n	80102a4 <__mcmp+0x28>
 8010286:	f100 0314 	add.w	r3, r0, #20
 801028a:	3114      	adds	r1, #20
 801028c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010290:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010294:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010298:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801029c:	42a5      	cmp	r5, r4
 801029e:	d003      	beq.n	80102a8 <__mcmp+0x2c>
 80102a0:	d305      	bcc.n	80102ae <__mcmp+0x32>
 80102a2:	2201      	movs	r2, #1
 80102a4:	4610      	mov	r0, r2
 80102a6:	bd30      	pop	{r4, r5, pc}
 80102a8:	4283      	cmp	r3, r0
 80102aa:	d3f3      	bcc.n	8010294 <__mcmp+0x18>
 80102ac:	e7fa      	b.n	80102a4 <__mcmp+0x28>
 80102ae:	f04f 32ff 	mov.w	r2, #4294967295
 80102b2:	e7f7      	b.n	80102a4 <__mcmp+0x28>

080102b4 <__mdiff>:
 80102b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102b8:	460c      	mov	r4, r1
 80102ba:	4606      	mov	r6, r0
 80102bc:	4611      	mov	r1, r2
 80102be:	4620      	mov	r0, r4
 80102c0:	4690      	mov	r8, r2
 80102c2:	f7ff ffdb 	bl	801027c <__mcmp>
 80102c6:	1e05      	subs	r5, r0, #0
 80102c8:	d110      	bne.n	80102ec <__mdiff+0x38>
 80102ca:	4629      	mov	r1, r5
 80102cc:	4630      	mov	r0, r6
 80102ce:	f7ff fd0f 	bl	800fcf0 <_Balloc>
 80102d2:	b930      	cbnz	r0, 80102e2 <__mdiff+0x2e>
 80102d4:	4b3a      	ldr	r3, [pc, #232]	; (80103c0 <__mdiff+0x10c>)
 80102d6:	4602      	mov	r2, r0
 80102d8:	f240 2137 	movw	r1, #567	; 0x237
 80102dc:	4839      	ldr	r0, [pc, #228]	; (80103c4 <__mdiff+0x110>)
 80102de:	f000 fc67 	bl	8010bb0 <__assert_func>
 80102e2:	2301      	movs	r3, #1
 80102e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80102e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102ec:	bfa4      	itt	ge
 80102ee:	4643      	movge	r3, r8
 80102f0:	46a0      	movge	r8, r4
 80102f2:	4630      	mov	r0, r6
 80102f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80102f8:	bfa6      	itte	ge
 80102fa:	461c      	movge	r4, r3
 80102fc:	2500      	movge	r5, #0
 80102fe:	2501      	movlt	r5, #1
 8010300:	f7ff fcf6 	bl	800fcf0 <_Balloc>
 8010304:	b920      	cbnz	r0, 8010310 <__mdiff+0x5c>
 8010306:	4b2e      	ldr	r3, [pc, #184]	; (80103c0 <__mdiff+0x10c>)
 8010308:	4602      	mov	r2, r0
 801030a:	f240 2145 	movw	r1, #581	; 0x245
 801030e:	e7e5      	b.n	80102dc <__mdiff+0x28>
 8010310:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010314:	6926      	ldr	r6, [r4, #16]
 8010316:	60c5      	str	r5, [r0, #12]
 8010318:	f104 0914 	add.w	r9, r4, #20
 801031c:	f108 0514 	add.w	r5, r8, #20
 8010320:	f100 0e14 	add.w	lr, r0, #20
 8010324:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010328:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801032c:	f108 0210 	add.w	r2, r8, #16
 8010330:	46f2      	mov	sl, lr
 8010332:	2100      	movs	r1, #0
 8010334:	f859 3b04 	ldr.w	r3, [r9], #4
 8010338:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801033c:	fa11 f88b 	uxtah	r8, r1, fp
 8010340:	b299      	uxth	r1, r3
 8010342:	0c1b      	lsrs	r3, r3, #16
 8010344:	eba8 0801 	sub.w	r8, r8, r1
 8010348:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801034c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010350:	fa1f f888 	uxth.w	r8, r8
 8010354:	1419      	asrs	r1, r3, #16
 8010356:	454e      	cmp	r6, r9
 8010358:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801035c:	f84a 3b04 	str.w	r3, [sl], #4
 8010360:	d8e8      	bhi.n	8010334 <__mdiff+0x80>
 8010362:	1b33      	subs	r3, r6, r4
 8010364:	3b15      	subs	r3, #21
 8010366:	f023 0303 	bic.w	r3, r3, #3
 801036a:	3304      	adds	r3, #4
 801036c:	3415      	adds	r4, #21
 801036e:	42a6      	cmp	r6, r4
 8010370:	bf38      	it	cc
 8010372:	2304      	movcc	r3, #4
 8010374:	441d      	add	r5, r3
 8010376:	4473      	add	r3, lr
 8010378:	469e      	mov	lr, r3
 801037a:	462e      	mov	r6, r5
 801037c:	4566      	cmp	r6, ip
 801037e:	d30e      	bcc.n	801039e <__mdiff+0xea>
 8010380:	f10c 0203 	add.w	r2, ip, #3
 8010384:	1b52      	subs	r2, r2, r5
 8010386:	f022 0203 	bic.w	r2, r2, #3
 801038a:	3d03      	subs	r5, #3
 801038c:	45ac      	cmp	ip, r5
 801038e:	bf38      	it	cc
 8010390:	2200      	movcc	r2, #0
 8010392:	4413      	add	r3, r2
 8010394:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010398:	b17a      	cbz	r2, 80103ba <__mdiff+0x106>
 801039a:	6107      	str	r7, [r0, #16]
 801039c:	e7a4      	b.n	80102e8 <__mdiff+0x34>
 801039e:	f856 8b04 	ldr.w	r8, [r6], #4
 80103a2:	fa11 f288 	uxtah	r2, r1, r8
 80103a6:	1414      	asrs	r4, r2, #16
 80103a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80103ac:	b292      	uxth	r2, r2
 80103ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80103b2:	f84e 2b04 	str.w	r2, [lr], #4
 80103b6:	1421      	asrs	r1, r4, #16
 80103b8:	e7e0      	b.n	801037c <__mdiff+0xc8>
 80103ba:	3f01      	subs	r7, #1
 80103bc:	e7ea      	b.n	8010394 <__mdiff+0xe0>
 80103be:	bf00      	nop
 80103c0:	080139ed 	.word	0x080139ed
 80103c4:	08013a5e 	.word	0x08013a5e

080103c8 <__ulp>:
 80103c8:	b082      	sub	sp, #8
 80103ca:	ed8d 0b00 	vstr	d0, [sp]
 80103ce:	9a01      	ldr	r2, [sp, #4]
 80103d0:	4b0f      	ldr	r3, [pc, #60]	; (8010410 <__ulp+0x48>)
 80103d2:	4013      	ands	r3, r2
 80103d4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80103d8:	2b00      	cmp	r3, #0
 80103da:	dc08      	bgt.n	80103ee <__ulp+0x26>
 80103dc:	425b      	negs	r3, r3
 80103de:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80103e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80103e6:	da04      	bge.n	80103f2 <__ulp+0x2a>
 80103e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80103ec:	4113      	asrs	r3, r2
 80103ee:	2200      	movs	r2, #0
 80103f0:	e008      	b.n	8010404 <__ulp+0x3c>
 80103f2:	f1a2 0314 	sub.w	r3, r2, #20
 80103f6:	2b1e      	cmp	r3, #30
 80103f8:	bfda      	itte	le
 80103fa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80103fe:	40da      	lsrle	r2, r3
 8010400:	2201      	movgt	r2, #1
 8010402:	2300      	movs	r3, #0
 8010404:	4619      	mov	r1, r3
 8010406:	4610      	mov	r0, r2
 8010408:	ec41 0b10 	vmov	d0, r0, r1
 801040c:	b002      	add	sp, #8
 801040e:	4770      	bx	lr
 8010410:	7ff00000 	.word	0x7ff00000

08010414 <__b2d>:
 8010414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010418:	6906      	ldr	r6, [r0, #16]
 801041a:	f100 0814 	add.w	r8, r0, #20
 801041e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010422:	1f37      	subs	r7, r6, #4
 8010424:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010428:	4610      	mov	r0, r2
 801042a:	f7ff fd53 	bl	800fed4 <__hi0bits>
 801042e:	f1c0 0320 	rsb	r3, r0, #32
 8010432:	280a      	cmp	r0, #10
 8010434:	600b      	str	r3, [r1, #0]
 8010436:	491b      	ldr	r1, [pc, #108]	; (80104a4 <__b2d+0x90>)
 8010438:	dc15      	bgt.n	8010466 <__b2d+0x52>
 801043a:	f1c0 0c0b 	rsb	ip, r0, #11
 801043e:	fa22 f30c 	lsr.w	r3, r2, ip
 8010442:	45b8      	cmp	r8, r7
 8010444:	ea43 0501 	orr.w	r5, r3, r1
 8010448:	bf34      	ite	cc
 801044a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801044e:	2300      	movcs	r3, #0
 8010450:	3015      	adds	r0, #21
 8010452:	fa02 f000 	lsl.w	r0, r2, r0
 8010456:	fa23 f30c 	lsr.w	r3, r3, ip
 801045a:	4303      	orrs	r3, r0
 801045c:	461c      	mov	r4, r3
 801045e:	ec45 4b10 	vmov	d0, r4, r5
 8010462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010466:	45b8      	cmp	r8, r7
 8010468:	bf3a      	itte	cc
 801046a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801046e:	f1a6 0708 	subcc.w	r7, r6, #8
 8010472:	2300      	movcs	r3, #0
 8010474:	380b      	subs	r0, #11
 8010476:	d012      	beq.n	801049e <__b2d+0x8a>
 8010478:	f1c0 0120 	rsb	r1, r0, #32
 801047c:	fa23 f401 	lsr.w	r4, r3, r1
 8010480:	4082      	lsls	r2, r0
 8010482:	4322      	orrs	r2, r4
 8010484:	4547      	cmp	r7, r8
 8010486:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801048a:	bf8c      	ite	hi
 801048c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010490:	2200      	movls	r2, #0
 8010492:	4083      	lsls	r3, r0
 8010494:	40ca      	lsrs	r2, r1
 8010496:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801049a:	4313      	orrs	r3, r2
 801049c:	e7de      	b.n	801045c <__b2d+0x48>
 801049e:	ea42 0501 	orr.w	r5, r2, r1
 80104a2:	e7db      	b.n	801045c <__b2d+0x48>
 80104a4:	3ff00000 	.word	0x3ff00000

080104a8 <__d2b>:
 80104a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80104ac:	460f      	mov	r7, r1
 80104ae:	2101      	movs	r1, #1
 80104b0:	ec59 8b10 	vmov	r8, r9, d0
 80104b4:	4616      	mov	r6, r2
 80104b6:	f7ff fc1b 	bl	800fcf0 <_Balloc>
 80104ba:	4604      	mov	r4, r0
 80104bc:	b930      	cbnz	r0, 80104cc <__d2b+0x24>
 80104be:	4602      	mov	r2, r0
 80104c0:	4b24      	ldr	r3, [pc, #144]	; (8010554 <__d2b+0xac>)
 80104c2:	4825      	ldr	r0, [pc, #148]	; (8010558 <__d2b+0xb0>)
 80104c4:	f240 310f 	movw	r1, #783	; 0x30f
 80104c8:	f000 fb72 	bl	8010bb0 <__assert_func>
 80104cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80104d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80104d4:	bb2d      	cbnz	r5, 8010522 <__d2b+0x7a>
 80104d6:	9301      	str	r3, [sp, #4]
 80104d8:	f1b8 0300 	subs.w	r3, r8, #0
 80104dc:	d026      	beq.n	801052c <__d2b+0x84>
 80104de:	4668      	mov	r0, sp
 80104e0:	9300      	str	r3, [sp, #0]
 80104e2:	f7ff fd17 	bl	800ff14 <__lo0bits>
 80104e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80104ea:	b1e8      	cbz	r0, 8010528 <__d2b+0x80>
 80104ec:	f1c0 0320 	rsb	r3, r0, #32
 80104f0:	fa02 f303 	lsl.w	r3, r2, r3
 80104f4:	430b      	orrs	r3, r1
 80104f6:	40c2      	lsrs	r2, r0
 80104f8:	6163      	str	r3, [r4, #20]
 80104fa:	9201      	str	r2, [sp, #4]
 80104fc:	9b01      	ldr	r3, [sp, #4]
 80104fe:	61a3      	str	r3, [r4, #24]
 8010500:	2b00      	cmp	r3, #0
 8010502:	bf14      	ite	ne
 8010504:	2202      	movne	r2, #2
 8010506:	2201      	moveq	r2, #1
 8010508:	6122      	str	r2, [r4, #16]
 801050a:	b1bd      	cbz	r5, 801053c <__d2b+0x94>
 801050c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010510:	4405      	add	r5, r0
 8010512:	603d      	str	r5, [r7, #0]
 8010514:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010518:	6030      	str	r0, [r6, #0]
 801051a:	4620      	mov	r0, r4
 801051c:	b003      	add	sp, #12
 801051e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010526:	e7d6      	b.n	80104d6 <__d2b+0x2e>
 8010528:	6161      	str	r1, [r4, #20]
 801052a:	e7e7      	b.n	80104fc <__d2b+0x54>
 801052c:	a801      	add	r0, sp, #4
 801052e:	f7ff fcf1 	bl	800ff14 <__lo0bits>
 8010532:	9b01      	ldr	r3, [sp, #4]
 8010534:	6163      	str	r3, [r4, #20]
 8010536:	3020      	adds	r0, #32
 8010538:	2201      	movs	r2, #1
 801053a:	e7e5      	b.n	8010508 <__d2b+0x60>
 801053c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010540:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010544:	6038      	str	r0, [r7, #0]
 8010546:	6918      	ldr	r0, [r3, #16]
 8010548:	f7ff fcc4 	bl	800fed4 <__hi0bits>
 801054c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010550:	e7e2      	b.n	8010518 <__d2b+0x70>
 8010552:	bf00      	nop
 8010554:	080139ed 	.word	0x080139ed
 8010558:	08013a5e 	.word	0x08013a5e

0801055c <__ratio>:
 801055c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010560:	4688      	mov	r8, r1
 8010562:	4669      	mov	r1, sp
 8010564:	4681      	mov	r9, r0
 8010566:	f7ff ff55 	bl	8010414 <__b2d>
 801056a:	a901      	add	r1, sp, #4
 801056c:	4640      	mov	r0, r8
 801056e:	ec55 4b10 	vmov	r4, r5, d0
 8010572:	f7ff ff4f 	bl	8010414 <__b2d>
 8010576:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801057a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801057e:	eba3 0c02 	sub.w	ip, r3, r2
 8010582:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010586:	1a9b      	subs	r3, r3, r2
 8010588:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801058c:	ec51 0b10 	vmov	r0, r1, d0
 8010590:	2b00      	cmp	r3, #0
 8010592:	bfd6      	itet	le
 8010594:	460a      	movle	r2, r1
 8010596:	462a      	movgt	r2, r5
 8010598:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801059c:	468b      	mov	fp, r1
 801059e:	462f      	mov	r7, r5
 80105a0:	bfd4      	ite	le
 80105a2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80105a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80105aa:	4620      	mov	r0, r4
 80105ac:	ee10 2a10 	vmov	r2, s0
 80105b0:	465b      	mov	r3, fp
 80105b2:	4639      	mov	r1, r7
 80105b4:	f7f0 f95a 	bl	800086c <__aeabi_ddiv>
 80105b8:	ec41 0b10 	vmov	d0, r0, r1
 80105bc:	b003      	add	sp, #12
 80105be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080105c2 <__copybits>:
 80105c2:	3901      	subs	r1, #1
 80105c4:	b570      	push	{r4, r5, r6, lr}
 80105c6:	1149      	asrs	r1, r1, #5
 80105c8:	6914      	ldr	r4, [r2, #16]
 80105ca:	3101      	adds	r1, #1
 80105cc:	f102 0314 	add.w	r3, r2, #20
 80105d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80105d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80105d8:	1f05      	subs	r5, r0, #4
 80105da:	42a3      	cmp	r3, r4
 80105dc:	d30c      	bcc.n	80105f8 <__copybits+0x36>
 80105de:	1aa3      	subs	r3, r4, r2
 80105e0:	3b11      	subs	r3, #17
 80105e2:	f023 0303 	bic.w	r3, r3, #3
 80105e6:	3211      	adds	r2, #17
 80105e8:	42a2      	cmp	r2, r4
 80105ea:	bf88      	it	hi
 80105ec:	2300      	movhi	r3, #0
 80105ee:	4418      	add	r0, r3
 80105f0:	2300      	movs	r3, #0
 80105f2:	4288      	cmp	r0, r1
 80105f4:	d305      	bcc.n	8010602 <__copybits+0x40>
 80105f6:	bd70      	pop	{r4, r5, r6, pc}
 80105f8:	f853 6b04 	ldr.w	r6, [r3], #4
 80105fc:	f845 6f04 	str.w	r6, [r5, #4]!
 8010600:	e7eb      	b.n	80105da <__copybits+0x18>
 8010602:	f840 3b04 	str.w	r3, [r0], #4
 8010606:	e7f4      	b.n	80105f2 <__copybits+0x30>

08010608 <__any_on>:
 8010608:	f100 0214 	add.w	r2, r0, #20
 801060c:	6900      	ldr	r0, [r0, #16]
 801060e:	114b      	asrs	r3, r1, #5
 8010610:	4298      	cmp	r0, r3
 8010612:	b510      	push	{r4, lr}
 8010614:	db11      	blt.n	801063a <__any_on+0x32>
 8010616:	dd0a      	ble.n	801062e <__any_on+0x26>
 8010618:	f011 011f 	ands.w	r1, r1, #31
 801061c:	d007      	beq.n	801062e <__any_on+0x26>
 801061e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010622:	fa24 f001 	lsr.w	r0, r4, r1
 8010626:	fa00 f101 	lsl.w	r1, r0, r1
 801062a:	428c      	cmp	r4, r1
 801062c:	d10b      	bne.n	8010646 <__any_on+0x3e>
 801062e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010632:	4293      	cmp	r3, r2
 8010634:	d803      	bhi.n	801063e <__any_on+0x36>
 8010636:	2000      	movs	r0, #0
 8010638:	bd10      	pop	{r4, pc}
 801063a:	4603      	mov	r3, r0
 801063c:	e7f7      	b.n	801062e <__any_on+0x26>
 801063e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010642:	2900      	cmp	r1, #0
 8010644:	d0f5      	beq.n	8010632 <__any_on+0x2a>
 8010646:	2001      	movs	r0, #1
 8010648:	e7f6      	b.n	8010638 <__any_on+0x30>
	...

0801064c <_strtol_l.constprop.0>:
 801064c:	2b01      	cmp	r3, #1
 801064e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010652:	d001      	beq.n	8010658 <_strtol_l.constprop.0+0xc>
 8010654:	2b24      	cmp	r3, #36	; 0x24
 8010656:	d906      	bls.n	8010666 <_strtol_l.constprop.0+0x1a>
 8010658:	f7fe f8cc 	bl	800e7f4 <__errno>
 801065c:	2316      	movs	r3, #22
 801065e:	6003      	str	r3, [r0, #0]
 8010660:	2000      	movs	r0, #0
 8010662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010666:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801074c <_strtol_l.constprop.0+0x100>
 801066a:	460d      	mov	r5, r1
 801066c:	462e      	mov	r6, r5
 801066e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010672:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8010676:	f017 0708 	ands.w	r7, r7, #8
 801067a:	d1f7      	bne.n	801066c <_strtol_l.constprop.0+0x20>
 801067c:	2c2d      	cmp	r4, #45	; 0x2d
 801067e:	d132      	bne.n	80106e6 <_strtol_l.constprop.0+0x9a>
 8010680:	782c      	ldrb	r4, [r5, #0]
 8010682:	2701      	movs	r7, #1
 8010684:	1cb5      	adds	r5, r6, #2
 8010686:	2b00      	cmp	r3, #0
 8010688:	d05b      	beq.n	8010742 <_strtol_l.constprop.0+0xf6>
 801068a:	2b10      	cmp	r3, #16
 801068c:	d109      	bne.n	80106a2 <_strtol_l.constprop.0+0x56>
 801068e:	2c30      	cmp	r4, #48	; 0x30
 8010690:	d107      	bne.n	80106a2 <_strtol_l.constprop.0+0x56>
 8010692:	782c      	ldrb	r4, [r5, #0]
 8010694:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010698:	2c58      	cmp	r4, #88	; 0x58
 801069a:	d14d      	bne.n	8010738 <_strtol_l.constprop.0+0xec>
 801069c:	786c      	ldrb	r4, [r5, #1]
 801069e:	2310      	movs	r3, #16
 80106a0:	3502      	adds	r5, #2
 80106a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80106a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80106aa:	f04f 0e00 	mov.w	lr, #0
 80106ae:	fbb8 f9f3 	udiv	r9, r8, r3
 80106b2:	4676      	mov	r6, lr
 80106b4:	fb03 8a19 	mls	sl, r3, r9, r8
 80106b8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80106bc:	f1bc 0f09 	cmp.w	ip, #9
 80106c0:	d816      	bhi.n	80106f0 <_strtol_l.constprop.0+0xa4>
 80106c2:	4664      	mov	r4, ip
 80106c4:	42a3      	cmp	r3, r4
 80106c6:	dd24      	ble.n	8010712 <_strtol_l.constprop.0+0xc6>
 80106c8:	f1be 3fff 	cmp.w	lr, #4294967295
 80106cc:	d008      	beq.n	80106e0 <_strtol_l.constprop.0+0x94>
 80106ce:	45b1      	cmp	r9, r6
 80106d0:	d31c      	bcc.n	801070c <_strtol_l.constprop.0+0xc0>
 80106d2:	d101      	bne.n	80106d8 <_strtol_l.constprop.0+0x8c>
 80106d4:	45a2      	cmp	sl, r4
 80106d6:	db19      	blt.n	801070c <_strtol_l.constprop.0+0xc0>
 80106d8:	fb06 4603 	mla	r6, r6, r3, r4
 80106dc:	f04f 0e01 	mov.w	lr, #1
 80106e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80106e4:	e7e8      	b.n	80106b8 <_strtol_l.constprop.0+0x6c>
 80106e6:	2c2b      	cmp	r4, #43	; 0x2b
 80106e8:	bf04      	itt	eq
 80106ea:	782c      	ldrbeq	r4, [r5, #0]
 80106ec:	1cb5      	addeq	r5, r6, #2
 80106ee:	e7ca      	b.n	8010686 <_strtol_l.constprop.0+0x3a>
 80106f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80106f4:	f1bc 0f19 	cmp.w	ip, #25
 80106f8:	d801      	bhi.n	80106fe <_strtol_l.constprop.0+0xb2>
 80106fa:	3c37      	subs	r4, #55	; 0x37
 80106fc:	e7e2      	b.n	80106c4 <_strtol_l.constprop.0+0x78>
 80106fe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010702:	f1bc 0f19 	cmp.w	ip, #25
 8010706:	d804      	bhi.n	8010712 <_strtol_l.constprop.0+0xc6>
 8010708:	3c57      	subs	r4, #87	; 0x57
 801070a:	e7db      	b.n	80106c4 <_strtol_l.constprop.0+0x78>
 801070c:	f04f 3eff 	mov.w	lr, #4294967295
 8010710:	e7e6      	b.n	80106e0 <_strtol_l.constprop.0+0x94>
 8010712:	f1be 3fff 	cmp.w	lr, #4294967295
 8010716:	d105      	bne.n	8010724 <_strtol_l.constprop.0+0xd8>
 8010718:	2322      	movs	r3, #34	; 0x22
 801071a:	6003      	str	r3, [r0, #0]
 801071c:	4646      	mov	r6, r8
 801071e:	b942      	cbnz	r2, 8010732 <_strtol_l.constprop.0+0xe6>
 8010720:	4630      	mov	r0, r6
 8010722:	e79e      	b.n	8010662 <_strtol_l.constprop.0+0x16>
 8010724:	b107      	cbz	r7, 8010728 <_strtol_l.constprop.0+0xdc>
 8010726:	4276      	negs	r6, r6
 8010728:	2a00      	cmp	r2, #0
 801072a:	d0f9      	beq.n	8010720 <_strtol_l.constprop.0+0xd4>
 801072c:	f1be 0f00 	cmp.w	lr, #0
 8010730:	d000      	beq.n	8010734 <_strtol_l.constprop.0+0xe8>
 8010732:	1e69      	subs	r1, r5, #1
 8010734:	6011      	str	r1, [r2, #0]
 8010736:	e7f3      	b.n	8010720 <_strtol_l.constprop.0+0xd4>
 8010738:	2430      	movs	r4, #48	; 0x30
 801073a:	2b00      	cmp	r3, #0
 801073c:	d1b1      	bne.n	80106a2 <_strtol_l.constprop.0+0x56>
 801073e:	2308      	movs	r3, #8
 8010740:	e7af      	b.n	80106a2 <_strtol_l.constprop.0+0x56>
 8010742:	2c30      	cmp	r4, #48	; 0x30
 8010744:	d0a5      	beq.n	8010692 <_strtol_l.constprop.0+0x46>
 8010746:	230a      	movs	r3, #10
 8010748:	e7ab      	b.n	80106a2 <_strtol_l.constprop.0+0x56>
 801074a:	bf00      	nop
 801074c:	08013bb5 	.word	0x08013bb5

08010750 <_strtol_r>:
 8010750:	f7ff bf7c 	b.w	801064c <_strtol_l.constprop.0>

08010754 <__ascii_wctomb>:
 8010754:	b149      	cbz	r1, 801076a <__ascii_wctomb+0x16>
 8010756:	2aff      	cmp	r2, #255	; 0xff
 8010758:	bf85      	ittet	hi
 801075a:	238a      	movhi	r3, #138	; 0x8a
 801075c:	6003      	strhi	r3, [r0, #0]
 801075e:	700a      	strbls	r2, [r1, #0]
 8010760:	f04f 30ff 	movhi.w	r0, #4294967295
 8010764:	bf98      	it	ls
 8010766:	2001      	movls	r0, #1
 8010768:	4770      	bx	lr
 801076a:	4608      	mov	r0, r1
 801076c:	4770      	bx	lr

0801076e <__ssputs_r>:
 801076e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010772:	688e      	ldr	r6, [r1, #8]
 8010774:	461f      	mov	r7, r3
 8010776:	42be      	cmp	r6, r7
 8010778:	680b      	ldr	r3, [r1, #0]
 801077a:	4682      	mov	sl, r0
 801077c:	460c      	mov	r4, r1
 801077e:	4690      	mov	r8, r2
 8010780:	d82c      	bhi.n	80107dc <__ssputs_r+0x6e>
 8010782:	898a      	ldrh	r2, [r1, #12]
 8010784:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010788:	d026      	beq.n	80107d8 <__ssputs_r+0x6a>
 801078a:	6965      	ldr	r5, [r4, #20]
 801078c:	6909      	ldr	r1, [r1, #16]
 801078e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010792:	eba3 0901 	sub.w	r9, r3, r1
 8010796:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801079a:	1c7b      	adds	r3, r7, #1
 801079c:	444b      	add	r3, r9
 801079e:	106d      	asrs	r5, r5, #1
 80107a0:	429d      	cmp	r5, r3
 80107a2:	bf38      	it	cc
 80107a4:	461d      	movcc	r5, r3
 80107a6:	0553      	lsls	r3, r2, #21
 80107a8:	d527      	bpl.n	80107fa <__ssputs_r+0x8c>
 80107aa:	4629      	mov	r1, r5
 80107ac:	f7fc f968 	bl	800ca80 <_malloc_r>
 80107b0:	4606      	mov	r6, r0
 80107b2:	b360      	cbz	r0, 801080e <__ssputs_r+0xa0>
 80107b4:	6921      	ldr	r1, [r4, #16]
 80107b6:	464a      	mov	r2, r9
 80107b8:	f7fe f849 	bl	800e84e <memcpy>
 80107bc:	89a3      	ldrh	r3, [r4, #12]
 80107be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80107c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107c6:	81a3      	strh	r3, [r4, #12]
 80107c8:	6126      	str	r6, [r4, #16]
 80107ca:	6165      	str	r5, [r4, #20]
 80107cc:	444e      	add	r6, r9
 80107ce:	eba5 0509 	sub.w	r5, r5, r9
 80107d2:	6026      	str	r6, [r4, #0]
 80107d4:	60a5      	str	r5, [r4, #8]
 80107d6:	463e      	mov	r6, r7
 80107d8:	42be      	cmp	r6, r7
 80107da:	d900      	bls.n	80107de <__ssputs_r+0x70>
 80107dc:	463e      	mov	r6, r7
 80107de:	6820      	ldr	r0, [r4, #0]
 80107e0:	4632      	mov	r2, r6
 80107e2:	4641      	mov	r1, r8
 80107e4:	f000 f9ca 	bl	8010b7c <memmove>
 80107e8:	68a3      	ldr	r3, [r4, #8]
 80107ea:	1b9b      	subs	r3, r3, r6
 80107ec:	60a3      	str	r3, [r4, #8]
 80107ee:	6823      	ldr	r3, [r4, #0]
 80107f0:	4433      	add	r3, r6
 80107f2:	6023      	str	r3, [r4, #0]
 80107f4:	2000      	movs	r0, #0
 80107f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107fa:	462a      	mov	r2, r5
 80107fc:	f000 fa0c 	bl	8010c18 <_realloc_r>
 8010800:	4606      	mov	r6, r0
 8010802:	2800      	cmp	r0, #0
 8010804:	d1e0      	bne.n	80107c8 <__ssputs_r+0x5a>
 8010806:	6921      	ldr	r1, [r4, #16]
 8010808:	4650      	mov	r0, sl
 801080a:	f7fe febb 	bl	800f584 <_free_r>
 801080e:	230c      	movs	r3, #12
 8010810:	f8ca 3000 	str.w	r3, [sl]
 8010814:	89a3      	ldrh	r3, [r4, #12]
 8010816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801081a:	81a3      	strh	r3, [r4, #12]
 801081c:	f04f 30ff 	mov.w	r0, #4294967295
 8010820:	e7e9      	b.n	80107f6 <__ssputs_r+0x88>
	...

08010824 <_svfiprintf_r>:
 8010824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010828:	4698      	mov	r8, r3
 801082a:	898b      	ldrh	r3, [r1, #12]
 801082c:	061b      	lsls	r3, r3, #24
 801082e:	b09d      	sub	sp, #116	; 0x74
 8010830:	4607      	mov	r7, r0
 8010832:	460d      	mov	r5, r1
 8010834:	4614      	mov	r4, r2
 8010836:	d50e      	bpl.n	8010856 <_svfiprintf_r+0x32>
 8010838:	690b      	ldr	r3, [r1, #16]
 801083a:	b963      	cbnz	r3, 8010856 <_svfiprintf_r+0x32>
 801083c:	2140      	movs	r1, #64	; 0x40
 801083e:	f7fc f91f 	bl	800ca80 <_malloc_r>
 8010842:	6028      	str	r0, [r5, #0]
 8010844:	6128      	str	r0, [r5, #16]
 8010846:	b920      	cbnz	r0, 8010852 <_svfiprintf_r+0x2e>
 8010848:	230c      	movs	r3, #12
 801084a:	603b      	str	r3, [r7, #0]
 801084c:	f04f 30ff 	mov.w	r0, #4294967295
 8010850:	e0d0      	b.n	80109f4 <_svfiprintf_r+0x1d0>
 8010852:	2340      	movs	r3, #64	; 0x40
 8010854:	616b      	str	r3, [r5, #20]
 8010856:	2300      	movs	r3, #0
 8010858:	9309      	str	r3, [sp, #36]	; 0x24
 801085a:	2320      	movs	r3, #32
 801085c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010860:	f8cd 800c 	str.w	r8, [sp, #12]
 8010864:	2330      	movs	r3, #48	; 0x30
 8010866:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010a0c <_svfiprintf_r+0x1e8>
 801086a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801086e:	f04f 0901 	mov.w	r9, #1
 8010872:	4623      	mov	r3, r4
 8010874:	469a      	mov	sl, r3
 8010876:	f813 2b01 	ldrb.w	r2, [r3], #1
 801087a:	b10a      	cbz	r2, 8010880 <_svfiprintf_r+0x5c>
 801087c:	2a25      	cmp	r2, #37	; 0x25
 801087e:	d1f9      	bne.n	8010874 <_svfiprintf_r+0x50>
 8010880:	ebba 0b04 	subs.w	fp, sl, r4
 8010884:	d00b      	beq.n	801089e <_svfiprintf_r+0x7a>
 8010886:	465b      	mov	r3, fp
 8010888:	4622      	mov	r2, r4
 801088a:	4629      	mov	r1, r5
 801088c:	4638      	mov	r0, r7
 801088e:	f7ff ff6e 	bl	801076e <__ssputs_r>
 8010892:	3001      	adds	r0, #1
 8010894:	f000 80a9 	beq.w	80109ea <_svfiprintf_r+0x1c6>
 8010898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801089a:	445a      	add	r2, fp
 801089c:	9209      	str	r2, [sp, #36]	; 0x24
 801089e:	f89a 3000 	ldrb.w	r3, [sl]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	f000 80a1 	beq.w	80109ea <_svfiprintf_r+0x1c6>
 80108a8:	2300      	movs	r3, #0
 80108aa:	f04f 32ff 	mov.w	r2, #4294967295
 80108ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80108b2:	f10a 0a01 	add.w	sl, sl, #1
 80108b6:	9304      	str	r3, [sp, #16]
 80108b8:	9307      	str	r3, [sp, #28]
 80108ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80108be:	931a      	str	r3, [sp, #104]	; 0x68
 80108c0:	4654      	mov	r4, sl
 80108c2:	2205      	movs	r2, #5
 80108c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108c8:	4850      	ldr	r0, [pc, #320]	; (8010a0c <_svfiprintf_r+0x1e8>)
 80108ca:	f7ef fc91 	bl	80001f0 <memchr>
 80108ce:	9a04      	ldr	r2, [sp, #16]
 80108d0:	b9d8      	cbnz	r0, 801090a <_svfiprintf_r+0xe6>
 80108d2:	06d0      	lsls	r0, r2, #27
 80108d4:	bf44      	itt	mi
 80108d6:	2320      	movmi	r3, #32
 80108d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80108dc:	0711      	lsls	r1, r2, #28
 80108de:	bf44      	itt	mi
 80108e0:	232b      	movmi	r3, #43	; 0x2b
 80108e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80108e6:	f89a 3000 	ldrb.w	r3, [sl]
 80108ea:	2b2a      	cmp	r3, #42	; 0x2a
 80108ec:	d015      	beq.n	801091a <_svfiprintf_r+0xf6>
 80108ee:	9a07      	ldr	r2, [sp, #28]
 80108f0:	4654      	mov	r4, sl
 80108f2:	2000      	movs	r0, #0
 80108f4:	f04f 0c0a 	mov.w	ip, #10
 80108f8:	4621      	mov	r1, r4
 80108fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80108fe:	3b30      	subs	r3, #48	; 0x30
 8010900:	2b09      	cmp	r3, #9
 8010902:	d94d      	bls.n	80109a0 <_svfiprintf_r+0x17c>
 8010904:	b1b0      	cbz	r0, 8010934 <_svfiprintf_r+0x110>
 8010906:	9207      	str	r2, [sp, #28]
 8010908:	e014      	b.n	8010934 <_svfiprintf_r+0x110>
 801090a:	eba0 0308 	sub.w	r3, r0, r8
 801090e:	fa09 f303 	lsl.w	r3, r9, r3
 8010912:	4313      	orrs	r3, r2
 8010914:	9304      	str	r3, [sp, #16]
 8010916:	46a2      	mov	sl, r4
 8010918:	e7d2      	b.n	80108c0 <_svfiprintf_r+0x9c>
 801091a:	9b03      	ldr	r3, [sp, #12]
 801091c:	1d19      	adds	r1, r3, #4
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	9103      	str	r1, [sp, #12]
 8010922:	2b00      	cmp	r3, #0
 8010924:	bfbb      	ittet	lt
 8010926:	425b      	neglt	r3, r3
 8010928:	f042 0202 	orrlt.w	r2, r2, #2
 801092c:	9307      	strge	r3, [sp, #28]
 801092e:	9307      	strlt	r3, [sp, #28]
 8010930:	bfb8      	it	lt
 8010932:	9204      	strlt	r2, [sp, #16]
 8010934:	7823      	ldrb	r3, [r4, #0]
 8010936:	2b2e      	cmp	r3, #46	; 0x2e
 8010938:	d10c      	bne.n	8010954 <_svfiprintf_r+0x130>
 801093a:	7863      	ldrb	r3, [r4, #1]
 801093c:	2b2a      	cmp	r3, #42	; 0x2a
 801093e:	d134      	bne.n	80109aa <_svfiprintf_r+0x186>
 8010940:	9b03      	ldr	r3, [sp, #12]
 8010942:	1d1a      	adds	r2, r3, #4
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	9203      	str	r2, [sp, #12]
 8010948:	2b00      	cmp	r3, #0
 801094a:	bfb8      	it	lt
 801094c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010950:	3402      	adds	r4, #2
 8010952:	9305      	str	r3, [sp, #20]
 8010954:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010a1c <_svfiprintf_r+0x1f8>
 8010958:	7821      	ldrb	r1, [r4, #0]
 801095a:	2203      	movs	r2, #3
 801095c:	4650      	mov	r0, sl
 801095e:	f7ef fc47 	bl	80001f0 <memchr>
 8010962:	b138      	cbz	r0, 8010974 <_svfiprintf_r+0x150>
 8010964:	9b04      	ldr	r3, [sp, #16]
 8010966:	eba0 000a 	sub.w	r0, r0, sl
 801096a:	2240      	movs	r2, #64	; 0x40
 801096c:	4082      	lsls	r2, r0
 801096e:	4313      	orrs	r3, r2
 8010970:	3401      	adds	r4, #1
 8010972:	9304      	str	r3, [sp, #16]
 8010974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010978:	4825      	ldr	r0, [pc, #148]	; (8010a10 <_svfiprintf_r+0x1ec>)
 801097a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801097e:	2206      	movs	r2, #6
 8010980:	f7ef fc36 	bl	80001f0 <memchr>
 8010984:	2800      	cmp	r0, #0
 8010986:	d038      	beq.n	80109fa <_svfiprintf_r+0x1d6>
 8010988:	4b22      	ldr	r3, [pc, #136]	; (8010a14 <_svfiprintf_r+0x1f0>)
 801098a:	bb1b      	cbnz	r3, 80109d4 <_svfiprintf_r+0x1b0>
 801098c:	9b03      	ldr	r3, [sp, #12]
 801098e:	3307      	adds	r3, #7
 8010990:	f023 0307 	bic.w	r3, r3, #7
 8010994:	3308      	adds	r3, #8
 8010996:	9303      	str	r3, [sp, #12]
 8010998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801099a:	4433      	add	r3, r6
 801099c:	9309      	str	r3, [sp, #36]	; 0x24
 801099e:	e768      	b.n	8010872 <_svfiprintf_r+0x4e>
 80109a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80109a4:	460c      	mov	r4, r1
 80109a6:	2001      	movs	r0, #1
 80109a8:	e7a6      	b.n	80108f8 <_svfiprintf_r+0xd4>
 80109aa:	2300      	movs	r3, #0
 80109ac:	3401      	adds	r4, #1
 80109ae:	9305      	str	r3, [sp, #20]
 80109b0:	4619      	mov	r1, r3
 80109b2:	f04f 0c0a 	mov.w	ip, #10
 80109b6:	4620      	mov	r0, r4
 80109b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80109bc:	3a30      	subs	r2, #48	; 0x30
 80109be:	2a09      	cmp	r2, #9
 80109c0:	d903      	bls.n	80109ca <_svfiprintf_r+0x1a6>
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d0c6      	beq.n	8010954 <_svfiprintf_r+0x130>
 80109c6:	9105      	str	r1, [sp, #20]
 80109c8:	e7c4      	b.n	8010954 <_svfiprintf_r+0x130>
 80109ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80109ce:	4604      	mov	r4, r0
 80109d0:	2301      	movs	r3, #1
 80109d2:	e7f0      	b.n	80109b6 <_svfiprintf_r+0x192>
 80109d4:	ab03      	add	r3, sp, #12
 80109d6:	9300      	str	r3, [sp, #0]
 80109d8:	462a      	mov	r2, r5
 80109da:	4b0f      	ldr	r3, [pc, #60]	; (8010a18 <_svfiprintf_r+0x1f4>)
 80109dc:	a904      	add	r1, sp, #16
 80109de:	4638      	mov	r0, r7
 80109e0:	f7fc ff98 	bl	800d914 <_printf_float>
 80109e4:	1c42      	adds	r2, r0, #1
 80109e6:	4606      	mov	r6, r0
 80109e8:	d1d6      	bne.n	8010998 <_svfiprintf_r+0x174>
 80109ea:	89ab      	ldrh	r3, [r5, #12]
 80109ec:	065b      	lsls	r3, r3, #25
 80109ee:	f53f af2d 	bmi.w	801084c <_svfiprintf_r+0x28>
 80109f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80109f4:	b01d      	add	sp, #116	; 0x74
 80109f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109fa:	ab03      	add	r3, sp, #12
 80109fc:	9300      	str	r3, [sp, #0]
 80109fe:	462a      	mov	r2, r5
 8010a00:	4b05      	ldr	r3, [pc, #20]	; (8010a18 <_svfiprintf_r+0x1f4>)
 8010a02:	a904      	add	r1, sp, #16
 8010a04:	4638      	mov	r0, r7
 8010a06:	f7fd fa29 	bl	800de5c <_printf_i>
 8010a0a:	e7eb      	b.n	80109e4 <_svfiprintf_r+0x1c0>
 8010a0c:	08013cb5 	.word	0x08013cb5
 8010a10:	08013cbf 	.word	0x08013cbf
 8010a14:	0800d915 	.word	0x0800d915
 8010a18:	0801076f 	.word	0x0801076f
 8010a1c:	08013cbb 	.word	0x08013cbb

08010a20 <__sflush_r>:
 8010a20:	898a      	ldrh	r2, [r1, #12]
 8010a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a26:	4605      	mov	r5, r0
 8010a28:	0710      	lsls	r0, r2, #28
 8010a2a:	460c      	mov	r4, r1
 8010a2c:	d458      	bmi.n	8010ae0 <__sflush_r+0xc0>
 8010a2e:	684b      	ldr	r3, [r1, #4]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	dc05      	bgt.n	8010a40 <__sflush_r+0x20>
 8010a34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	dc02      	bgt.n	8010a40 <__sflush_r+0x20>
 8010a3a:	2000      	movs	r0, #0
 8010a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010a42:	2e00      	cmp	r6, #0
 8010a44:	d0f9      	beq.n	8010a3a <__sflush_r+0x1a>
 8010a46:	2300      	movs	r3, #0
 8010a48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010a4c:	682f      	ldr	r7, [r5, #0]
 8010a4e:	6a21      	ldr	r1, [r4, #32]
 8010a50:	602b      	str	r3, [r5, #0]
 8010a52:	d032      	beq.n	8010aba <__sflush_r+0x9a>
 8010a54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010a56:	89a3      	ldrh	r3, [r4, #12]
 8010a58:	075a      	lsls	r2, r3, #29
 8010a5a:	d505      	bpl.n	8010a68 <__sflush_r+0x48>
 8010a5c:	6863      	ldr	r3, [r4, #4]
 8010a5e:	1ac0      	subs	r0, r0, r3
 8010a60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010a62:	b10b      	cbz	r3, 8010a68 <__sflush_r+0x48>
 8010a64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010a66:	1ac0      	subs	r0, r0, r3
 8010a68:	2300      	movs	r3, #0
 8010a6a:	4602      	mov	r2, r0
 8010a6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010a6e:	6a21      	ldr	r1, [r4, #32]
 8010a70:	4628      	mov	r0, r5
 8010a72:	47b0      	blx	r6
 8010a74:	1c43      	adds	r3, r0, #1
 8010a76:	89a3      	ldrh	r3, [r4, #12]
 8010a78:	d106      	bne.n	8010a88 <__sflush_r+0x68>
 8010a7a:	6829      	ldr	r1, [r5, #0]
 8010a7c:	291d      	cmp	r1, #29
 8010a7e:	d82b      	bhi.n	8010ad8 <__sflush_r+0xb8>
 8010a80:	4a29      	ldr	r2, [pc, #164]	; (8010b28 <__sflush_r+0x108>)
 8010a82:	410a      	asrs	r2, r1
 8010a84:	07d6      	lsls	r6, r2, #31
 8010a86:	d427      	bmi.n	8010ad8 <__sflush_r+0xb8>
 8010a88:	2200      	movs	r2, #0
 8010a8a:	6062      	str	r2, [r4, #4]
 8010a8c:	04d9      	lsls	r1, r3, #19
 8010a8e:	6922      	ldr	r2, [r4, #16]
 8010a90:	6022      	str	r2, [r4, #0]
 8010a92:	d504      	bpl.n	8010a9e <__sflush_r+0x7e>
 8010a94:	1c42      	adds	r2, r0, #1
 8010a96:	d101      	bne.n	8010a9c <__sflush_r+0x7c>
 8010a98:	682b      	ldr	r3, [r5, #0]
 8010a9a:	b903      	cbnz	r3, 8010a9e <__sflush_r+0x7e>
 8010a9c:	6560      	str	r0, [r4, #84]	; 0x54
 8010a9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010aa0:	602f      	str	r7, [r5, #0]
 8010aa2:	2900      	cmp	r1, #0
 8010aa4:	d0c9      	beq.n	8010a3a <__sflush_r+0x1a>
 8010aa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010aaa:	4299      	cmp	r1, r3
 8010aac:	d002      	beq.n	8010ab4 <__sflush_r+0x94>
 8010aae:	4628      	mov	r0, r5
 8010ab0:	f7fe fd68 	bl	800f584 <_free_r>
 8010ab4:	2000      	movs	r0, #0
 8010ab6:	6360      	str	r0, [r4, #52]	; 0x34
 8010ab8:	e7c0      	b.n	8010a3c <__sflush_r+0x1c>
 8010aba:	2301      	movs	r3, #1
 8010abc:	4628      	mov	r0, r5
 8010abe:	47b0      	blx	r6
 8010ac0:	1c41      	adds	r1, r0, #1
 8010ac2:	d1c8      	bne.n	8010a56 <__sflush_r+0x36>
 8010ac4:	682b      	ldr	r3, [r5, #0]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d0c5      	beq.n	8010a56 <__sflush_r+0x36>
 8010aca:	2b1d      	cmp	r3, #29
 8010acc:	d001      	beq.n	8010ad2 <__sflush_r+0xb2>
 8010ace:	2b16      	cmp	r3, #22
 8010ad0:	d101      	bne.n	8010ad6 <__sflush_r+0xb6>
 8010ad2:	602f      	str	r7, [r5, #0]
 8010ad4:	e7b1      	b.n	8010a3a <__sflush_r+0x1a>
 8010ad6:	89a3      	ldrh	r3, [r4, #12]
 8010ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010adc:	81a3      	strh	r3, [r4, #12]
 8010ade:	e7ad      	b.n	8010a3c <__sflush_r+0x1c>
 8010ae0:	690f      	ldr	r7, [r1, #16]
 8010ae2:	2f00      	cmp	r7, #0
 8010ae4:	d0a9      	beq.n	8010a3a <__sflush_r+0x1a>
 8010ae6:	0793      	lsls	r3, r2, #30
 8010ae8:	680e      	ldr	r6, [r1, #0]
 8010aea:	bf08      	it	eq
 8010aec:	694b      	ldreq	r3, [r1, #20]
 8010aee:	600f      	str	r7, [r1, #0]
 8010af0:	bf18      	it	ne
 8010af2:	2300      	movne	r3, #0
 8010af4:	eba6 0807 	sub.w	r8, r6, r7
 8010af8:	608b      	str	r3, [r1, #8]
 8010afa:	f1b8 0f00 	cmp.w	r8, #0
 8010afe:	dd9c      	ble.n	8010a3a <__sflush_r+0x1a>
 8010b00:	6a21      	ldr	r1, [r4, #32]
 8010b02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010b04:	4643      	mov	r3, r8
 8010b06:	463a      	mov	r2, r7
 8010b08:	4628      	mov	r0, r5
 8010b0a:	47b0      	blx	r6
 8010b0c:	2800      	cmp	r0, #0
 8010b0e:	dc06      	bgt.n	8010b1e <__sflush_r+0xfe>
 8010b10:	89a3      	ldrh	r3, [r4, #12]
 8010b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b16:	81a3      	strh	r3, [r4, #12]
 8010b18:	f04f 30ff 	mov.w	r0, #4294967295
 8010b1c:	e78e      	b.n	8010a3c <__sflush_r+0x1c>
 8010b1e:	4407      	add	r7, r0
 8010b20:	eba8 0800 	sub.w	r8, r8, r0
 8010b24:	e7e9      	b.n	8010afa <__sflush_r+0xda>
 8010b26:	bf00      	nop
 8010b28:	dfbffffe 	.word	0xdfbffffe

08010b2c <_fflush_r>:
 8010b2c:	b538      	push	{r3, r4, r5, lr}
 8010b2e:	690b      	ldr	r3, [r1, #16]
 8010b30:	4605      	mov	r5, r0
 8010b32:	460c      	mov	r4, r1
 8010b34:	b913      	cbnz	r3, 8010b3c <_fflush_r+0x10>
 8010b36:	2500      	movs	r5, #0
 8010b38:	4628      	mov	r0, r5
 8010b3a:	bd38      	pop	{r3, r4, r5, pc}
 8010b3c:	b118      	cbz	r0, 8010b46 <_fflush_r+0x1a>
 8010b3e:	6a03      	ldr	r3, [r0, #32]
 8010b40:	b90b      	cbnz	r3, 8010b46 <_fflush_r+0x1a>
 8010b42:	f7fd fd49 	bl	800e5d8 <__sinit>
 8010b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d0f3      	beq.n	8010b36 <_fflush_r+0xa>
 8010b4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010b50:	07d0      	lsls	r0, r2, #31
 8010b52:	d404      	bmi.n	8010b5e <_fflush_r+0x32>
 8010b54:	0599      	lsls	r1, r3, #22
 8010b56:	d402      	bmi.n	8010b5e <_fflush_r+0x32>
 8010b58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b5a:	f7fd fe76 	bl	800e84a <__retarget_lock_acquire_recursive>
 8010b5e:	4628      	mov	r0, r5
 8010b60:	4621      	mov	r1, r4
 8010b62:	f7ff ff5d 	bl	8010a20 <__sflush_r>
 8010b66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010b68:	07da      	lsls	r2, r3, #31
 8010b6a:	4605      	mov	r5, r0
 8010b6c:	d4e4      	bmi.n	8010b38 <_fflush_r+0xc>
 8010b6e:	89a3      	ldrh	r3, [r4, #12]
 8010b70:	059b      	lsls	r3, r3, #22
 8010b72:	d4e1      	bmi.n	8010b38 <_fflush_r+0xc>
 8010b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b76:	f7fd fe69 	bl	800e84c <__retarget_lock_release_recursive>
 8010b7a:	e7dd      	b.n	8010b38 <_fflush_r+0xc>

08010b7c <memmove>:
 8010b7c:	4288      	cmp	r0, r1
 8010b7e:	b510      	push	{r4, lr}
 8010b80:	eb01 0402 	add.w	r4, r1, r2
 8010b84:	d902      	bls.n	8010b8c <memmove+0x10>
 8010b86:	4284      	cmp	r4, r0
 8010b88:	4623      	mov	r3, r4
 8010b8a:	d807      	bhi.n	8010b9c <memmove+0x20>
 8010b8c:	1e43      	subs	r3, r0, #1
 8010b8e:	42a1      	cmp	r1, r4
 8010b90:	d008      	beq.n	8010ba4 <memmove+0x28>
 8010b92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010b96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010b9a:	e7f8      	b.n	8010b8e <memmove+0x12>
 8010b9c:	4402      	add	r2, r0
 8010b9e:	4601      	mov	r1, r0
 8010ba0:	428a      	cmp	r2, r1
 8010ba2:	d100      	bne.n	8010ba6 <memmove+0x2a>
 8010ba4:	bd10      	pop	{r4, pc}
 8010ba6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010baa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010bae:	e7f7      	b.n	8010ba0 <memmove+0x24>

08010bb0 <__assert_func>:
 8010bb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010bb2:	4614      	mov	r4, r2
 8010bb4:	461a      	mov	r2, r3
 8010bb6:	4b09      	ldr	r3, [pc, #36]	; (8010bdc <__assert_func+0x2c>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	4605      	mov	r5, r0
 8010bbc:	68d8      	ldr	r0, [r3, #12]
 8010bbe:	b14c      	cbz	r4, 8010bd4 <__assert_func+0x24>
 8010bc0:	4b07      	ldr	r3, [pc, #28]	; (8010be0 <__assert_func+0x30>)
 8010bc2:	9100      	str	r1, [sp, #0]
 8010bc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010bc8:	4906      	ldr	r1, [pc, #24]	; (8010be4 <__assert_func+0x34>)
 8010bca:	462b      	mov	r3, r5
 8010bcc:	f000 f854 	bl	8010c78 <fiprintf>
 8010bd0:	f000 f864 	bl	8010c9c <abort>
 8010bd4:	4b04      	ldr	r3, [pc, #16]	; (8010be8 <__assert_func+0x38>)
 8010bd6:	461c      	mov	r4, r3
 8010bd8:	e7f3      	b.n	8010bc2 <__assert_func+0x12>
 8010bda:	bf00      	nop
 8010bdc:	20000200 	.word	0x20000200
 8010be0:	08013cc6 	.word	0x08013cc6
 8010be4:	08013cd3 	.word	0x08013cd3
 8010be8:	08013d01 	.word	0x08013d01

08010bec <_calloc_r>:
 8010bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010bee:	fba1 2402 	umull	r2, r4, r1, r2
 8010bf2:	b94c      	cbnz	r4, 8010c08 <_calloc_r+0x1c>
 8010bf4:	4611      	mov	r1, r2
 8010bf6:	9201      	str	r2, [sp, #4]
 8010bf8:	f7fb ff42 	bl	800ca80 <_malloc_r>
 8010bfc:	9a01      	ldr	r2, [sp, #4]
 8010bfe:	4605      	mov	r5, r0
 8010c00:	b930      	cbnz	r0, 8010c10 <_calloc_r+0x24>
 8010c02:	4628      	mov	r0, r5
 8010c04:	b003      	add	sp, #12
 8010c06:	bd30      	pop	{r4, r5, pc}
 8010c08:	220c      	movs	r2, #12
 8010c0a:	6002      	str	r2, [r0, #0]
 8010c0c:	2500      	movs	r5, #0
 8010c0e:	e7f8      	b.n	8010c02 <_calloc_r+0x16>
 8010c10:	4621      	mov	r1, r4
 8010c12:	f7fd fd7a 	bl	800e70a <memset>
 8010c16:	e7f4      	b.n	8010c02 <_calloc_r+0x16>

08010c18 <_realloc_r>:
 8010c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c1c:	4680      	mov	r8, r0
 8010c1e:	4614      	mov	r4, r2
 8010c20:	460e      	mov	r6, r1
 8010c22:	b921      	cbnz	r1, 8010c2e <_realloc_r+0x16>
 8010c24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c28:	4611      	mov	r1, r2
 8010c2a:	f7fb bf29 	b.w	800ca80 <_malloc_r>
 8010c2e:	b92a      	cbnz	r2, 8010c3c <_realloc_r+0x24>
 8010c30:	f7fe fca8 	bl	800f584 <_free_r>
 8010c34:	4625      	mov	r5, r4
 8010c36:	4628      	mov	r0, r5
 8010c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c3c:	f000 f835 	bl	8010caa <_malloc_usable_size_r>
 8010c40:	4284      	cmp	r4, r0
 8010c42:	4607      	mov	r7, r0
 8010c44:	d802      	bhi.n	8010c4c <_realloc_r+0x34>
 8010c46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010c4a:	d812      	bhi.n	8010c72 <_realloc_r+0x5a>
 8010c4c:	4621      	mov	r1, r4
 8010c4e:	4640      	mov	r0, r8
 8010c50:	f7fb ff16 	bl	800ca80 <_malloc_r>
 8010c54:	4605      	mov	r5, r0
 8010c56:	2800      	cmp	r0, #0
 8010c58:	d0ed      	beq.n	8010c36 <_realloc_r+0x1e>
 8010c5a:	42bc      	cmp	r4, r7
 8010c5c:	4622      	mov	r2, r4
 8010c5e:	4631      	mov	r1, r6
 8010c60:	bf28      	it	cs
 8010c62:	463a      	movcs	r2, r7
 8010c64:	f7fd fdf3 	bl	800e84e <memcpy>
 8010c68:	4631      	mov	r1, r6
 8010c6a:	4640      	mov	r0, r8
 8010c6c:	f7fe fc8a 	bl	800f584 <_free_r>
 8010c70:	e7e1      	b.n	8010c36 <_realloc_r+0x1e>
 8010c72:	4635      	mov	r5, r6
 8010c74:	e7df      	b.n	8010c36 <_realloc_r+0x1e>
	...

08010c78 <fiprintf>:
 8010c78:	b40e      	push	{r1, r2, r3}
 8010c7a:	b503      	push	{r0, r1, lr}
 8010c7c:	4601      	mov	r1, r0
 8010c7e:	ab03      	add	r3, sp, #12
 8010c80:	4805      	ldr	r0, [pc, #20]	; (8010c98 <fiprintf+0x20>)
 8010c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c86:	6800      	ldr	r0, [r0, #0]
 8010c88:	9301      	str	r3, [sp, #4]
 8010c8a:	f000 f83f 	bl	8010d0c <_vfiprintf_r>
 8010c8e:	b002      	add	sp, #8
 8010c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c94:	b003      	add	sp, #12
 8010c96:	4770      	bx	lr
 8010c98:	20000200 	.word	0x20000200

08010c9c <abort>:
 8010c9c:	b508      	push	{r3, lr}
 8010c9e:	2006      	movs	r0, #6
 8010ca0:	f000 fa0c 	bl	80110bc <raise>
 8010ca4:	2001      	movs	r0, #1
 8010ca6:	f7f1 fc51 	bl	800254c <_exit>

08010caa <_malloc_usable_size_r>:
 8010caa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010cae:	1f18      	subs	r0, r3, #4
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	bfbc      	itt	lt
 8010cb4:	580b      	ldrlt	r3, [r1, r0]
 8010cb6:	18c0      	addlt	r0, r0, r3
 8010cb8:	4770      	bx	lr

08010cba <__sfputc_r>:
 8010cba:	6893      	ldr	r3, [r2, #8]
 8010cbc:	3b01      	subs	r3, #1
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	b410      	push	{r4}
 8010cc2:	6093      	str	r3, [r2, #8]
 8010cc4:	da08      	bge.n	8010cd8 <__sfputc_r+0x1e>
 8010cc6:	6994      	ldr	r4, [r2, #24]
 8010cc8:	42a3      	cmp	r3, r4
 8010cca:	db01      	blt.n	8010cd0 <__sfputc_r+0x16>
 8010ccc:	290a      	cmp	r1, #10
 8010cce:	d103      	bne.n	8010cd8 <__sfputc_r+0x1e>
 8010cd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010cd4:	f000 b934 	b.w	8010f40 <__swbuf_r>
 8010cd8:	6813      	ldr	r3, [r2, #0]
 8010cda:	1c58      	adds	r0, r3, #1
 8010cdc:	6010      	str	r0, [r2, #0]
 8010cde:	7019      	strb	r1, [r3, #0]
 8010ce0:	4608      	mov	r0, r1
 8010ce2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ce6:	4770      	bx	lr

08010ce8 <__sfputs_r>:
 8010ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cea:	4606      	mov	r6, r0
 8010cec:	460f      	mov	r7, r1
 8010cee:	4614      	mov	r4, r2
 8010cf0:	18d5      	adds	r5, r2, r3
 8010cf2:	42ac      	cmp	r4, r5
 8010cf4:	d101      	bne.n	8010cfa <__sfputs_r+0x12>
 8010cf6:	2000      	movs	r0, #0
 8010cf8:	e007      	b.n	8010d0a <__sfputs_r+0x22>
 8010cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cfe:	463a      	mov	r2, r7
 8010d00:	4630      	mov	r0, r6
 8010d02:	f7ff ffda 	bl	8010cba <__sfputc_r>
 8010d06:	1c43      	adds	r3, r0, #1
 8010d08:	d1f3      	bne.n	8010cf2 <__sfputs_r+0xa>
 8010d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010d0c <_vfiprintf_r>:
 8010d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d10:	460d      	mov	r5, r1
 8010d12:	b09d      	sub	sp, #116	; 0x74
 8010d14:	4614      	mov	r4, r2
 8010d16:	4698      	mov	r8, r3
 8010d18:	4606      	mov	r6, r0
 8010d1a:	b118      	cbz	r0, 8010d24 <_vfiprintf_r+0x18>
 8010d1c:	6a03      	ldr	r3, [r0, #32]
 8010d1e:	b90b      	cbnz	r3, 8010d24 <_vfiprintf_r+0x18>
 8010d20:	f7fd fc5a 	bl	800e5d8 <__sinit>
 8010d24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d26:	07d9      	lsls	r1, r3, #31
 8010d28:	d405      	bmi.n	8010d36 <_vfiprintf_r+0x2a>
 8010d2a:	89ab      	ldrh	r3, [r5, #12]
 8010d2c:	059a      	lsls	r2, r3, #22
 8010d2e:	d402      	bmi.n	8010d36 <_vfiprintf_r+0x2a>
 8010d30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d32:	f7fd fd8a 	bl	800e84a <__retarget_lock_acquire_recursive>
 8010d36:	89ab      	ldrh	r3, [r5, #12]
 8010d38:	071b      	lsls	r3, r3, #28
 8010d3a:	d501      	bpl.n	8010d40 <_vfiprintf_r+0x34>
 8010d3c:	692b      	ldr	r3, [r5, #16]
 8010d3e:	b99b      	cbnz	r3, 8010d68 <_vfiprintf_r+0x5c>
 8010d40:	4629      	mov	r1, r5
 8010d42:	4630      	mov	r0, r6
 8010d44:	f000 f93a 	bl	8010fbc <__swsetup_r>
 8010d48:	b170      	cbz	r0, 8010d68 <_vfiprintf_r+0x5c>
 8010d4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d4c:	07dc      	lsls	r4, r3, #31
 8010d4e:	d504      	bpl.n	8010d5a <_vfiprintf_r+0x4e>
 8010d50:	f04f 30ff 	mov.w	r0, #4294967295
 8010d54:	b01d      	add	sp, #116	; 0x74
 8010d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d5a:	89ab      	ldrh	r3, [r5, #12]
 8010d5c:	0598      	lsls	r0, r3, #22
 8010d5e:	d4f7      	bmi.n	8010d50 <_vfiprintf_r+0x44>
 8010d60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d62:	f7fd fd73 	bl	800e84c <__retarget_lock_release_recursive>
 8010d66:	e7f3      	b.n	8010d50 <_vfiprintf_r+0x44>
 8010d68:	2300      	movs	r3, #0
 8010d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8010d6c:	2320      	movs	r3, #32
 8010d6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d72:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d76:	2330      	movs	r3, #48	; 0x30
 8010d78:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010f2c <_vfiprintf_r+0x220>
 8010d7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d80:	f04f 0901 	mov.w	r9, #1
 8010d84:	4623      	mov	r3, r4
 8010d86:	469a      	mov	sl, r3
 8010d88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d8c:	b10a      	cbz	r2, 8010d92 <_vfiprintf_r+0x86>
 8010d8e:	2a25      	cmp	r2, #37	; 0x25
 8010d90:	d1f9      	bne.n	8010d86 <_vfiprintf_r+0x7a>
 8010d92:	ebba 0b04 	subs.w	fp, sl, r4
 8010d96:	d00b      	beq.n	8010db0 <_vfiprintf_r+0xa4>
 8010d98:	465b      	mov	r3, fp
 8010d9a:	4622      	mov	r2, r4
 8010d9c:	4629      	mov	r1, r5
 8010d9e:	4630      	mov	r0, r6
 8010da0:	f7ff ffa2 	bl	8010ce8 <__sfputs_r>
 8010da4:	3001      	adds	r0, #1
 8010da6:	f000 80a9 	beq.w	8010efc <_vfiprintf_r+0x1f0>
 8010daa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010dac:	445a      	add	r2, fp
 8010dae:	9209      	str	r2, [sp, #36]	; 0x24
 8010db0:	f89a 3000 	ldrb.w	r3, [sl]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	f000 80a1 	beq.w	8010efc <_vfiprintf_r+0x1f0>
 8010dba:	2300      	movs	r3, #0
 8010dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8010dc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010dc4:	f10a 0a01 	add.w	sl, sl, #1
 8010dc8:	9304      	str	r3, [sp, #16]
 8010dca:	9307      	str	r3, [sp, #28]
 8010dcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010dd0:	931a      	str	r3, [sp, #104]	; 0x68
 8010dd2:	4654      	mov	r4, sl
 8010dd4:	2205      	movs	r2, #5
 8010dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dda:	4854      	ldr	r0, [pc, #336]	; (8010f2c <_vfiprintf_r+0x220>)
 8010ddc:	f7ef fa08 	bl	80001f0 <memchr>
 8010de0:	9a04      	ldr	r2, [sp, #16]
 8010de2:	b9d8      	cbnz	r0, 8010e1c <_vfiprintf_r+0x110>
 8010de4:	06d1      	lsls	r1, r2, #27
 8010de6:	bf44      	itt	mi
 8010de8:	2320      	movmi	r3, #32
 8010dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010dee:	0713      	lsls	r3, r2, #28
 8010df0:	bf44      	itt	mi
 8010df2:	232b      	movmi	r3, #43	; 0x2b
 8010df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010df8:	f89a 3000 	ldrb.w	r3, [sl]
 8010dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8010dfe:	d015      	beq.n	8010e2c <_vfiprintf_r+0x120>
 8010e00:	9a07      	ldr	r2, [sp, #28]
 8010e02:	4654      	mov	r4, sl
 8010e04:	2000      	movs	r0, #0
 8010e06:	f04f 0c0a 	mov.w	ip, #10
 8010e0a:	4621      	mov	r1, r4
 8010e0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e10:	3b30      	subs	r3, #48	; 0x30
 8010e12:	2b09      	cmp	r3, #9
 8010e14:	d94d      	bls.n	8010eb2 <_vfiprintf_r+0x1a6>
 8010e16:	b1b0      	cbz	r0, 8010e46 <_vfiprintf_r+0x13a>
 8010e18:	9207      	str	r2, [sp, #28]
 8010e1a:	e014      	b.n	8010e46 <_vfiprintf_r+0x13a>
 8010e1c:	eba0 0308 	sub.w	r3, r0, r8
 8010e20:	fa09 f303 	lsl.w	r3, r9, r3
 8010e24:	4313      	orrs	r3, r2
 8010e26:	9304      	str	r3, [sp, #16]
 8010e28:	46a2      	mov	sl, r4
 8010e2a:	e7d2      	b.n	8010dd2 <_vfiprintf_r+0xc6>
 8010e2c:	9b03      	ldr	r3, [sp, #12]
 8010e2e:	1d19      	adds	r1, r3, #4
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	9103      	str	r1, [sp, #12]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	bfbb      	ittet	lt
 8010e38:	425b      	neglt	r3, r3
 8010e3a:	f042 0202 	orrlt.w	r2, r2, #2
 8010e3e:	9307      	strge	r3, [sp, #28]
 8010e40:	9307      	strlt	r3, [sp, #28]
 8010e42:	bfb8      	it	lt
 8010e44:	9204      	strlt	r2, [sp, #16]
 8010e46:	7823      	ldrb	r3, [r4, #0]
 8010e48:	2b2e      	cmp	r3, #46	; 0x2e
 8010e4a:	d10c      	bne.n	8010e66 <_vfiprintf_r+0x15a>
 8010e4c:	7863      	ldrb	r3, [r4, #1]
 8010e4e:	2b2a      	cmp	r3, #42	; 0x2a
 8010e50:	d134      	bne.n	8010ebc <_vfiprintf_r+0x1b0>
 8010e52:	9b03      	ldr	r3, [sp, #12]
 8010e54:	1d1a      	adds	r2, r3, #4
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	9203      	str	r2, [sp, #12]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	bfb8      	it	lt
 8010e5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010e62:	3402      	adds	r4, #2
 8010e64:	9305      	str	r3, [sp, #20]
 8010e66:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010f3c <_vfiprintf_r+0x230>
 8010e6a:	7821      	ldrb	r1, [r4, #0]
 8010e6c:	2203      	movs	r2, #3
 8010e6e:	4650      	mov	r0, sl
 8010e70:	f7ef f9be 	bl	80001f0 <memchr>
 8010e74:	b138      	cbz	r0, 8010e86 <_vfiprintf_r+0x17a>
 8010e76:	9b04      	ldr	r3, [sp, #16]
 8010e78:	eba0 000a 	sub.w	r0, r0, sl
 8010e7c:	2240      	movs	r2, #64	; 0x40
 8010e7e:	4082      	lsls	r2, r0
 8010e80:	4313      	orrs	r3, r2
 8010e82:	3401      	adds	r4, #1
 8010e84:	9304      	str	r3, [sp, #16]
 8010e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e8a:	4829      	ldr	r0, [pc, #164]	; (8010f30 <_vfiprintf_r+0x224>)
 8010e8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e90:	2206      	movs	r2, #6
 8010e92:	f7ef f9ad 	bl	80001f0 <memchr>
 8010e96:	2800      	cmp	r0, #0
 8010e98:	d03f      	beq.n	8010f1a <_vfiprintf_r+0x20e>
 8010e9a:	4b26      	ldr	r3, [pc, #152]	; (8010f34 <_vfiprintf_r+0x228>)
 8010e9c:	bb1b      	cbnz	r3, 8010ee6 <_vfiprintf_r+0x1da>
 8010e9e:	9b03      	ldr	r3, [sp, #12]
 8010ea0:	3307      	adds	r3, #7
 8010ea2:	f023 0307 	bic.w	r3, r3, #7
 8010ea6:	3308      	adds	r3, #8
 8010ea8:	9303      	str	r3, [sp, #12]
 8010eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010eac:	443b      	add	r3, r7
 8010eae:	9309      	str	r3, [sp, #36]	; 0x24
 8010eb0:	e768      	b.n	8010d84 <_vfiprintf_r+0x78>
 8010eb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8010eb6:	460c      	mov	r4, r1
 8010eb8:	2001      	movs	r0, #1
 8010eba:	e7a6      	b.n	8010e0a <_vfiprintf_r+0xfe>
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	3401      	adds	r4, #1
 8010ec0:	9305      	str	r3, [sp, #20]
 8010ec2:	4619      	mov	r1, r3
 8010ec4:	f04f 0c0a 	mov.w	ip, #10
 8010ec8:	4620      	mov	r0, r4
 8010eca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ece:	3a30      	subs	r2, #48	; 0x30
 8010ed0:	2a09      	cmp	r2, #9
 8010ed2:	d903      	bls.n	8010edc <_vfiprintf_r+0x1d0>
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d0c6      	beq.n	8010e66 <_vfiprintf_r+0x15a>
 8010ed8:	9105      	str	r1, [sp, #20]
 8010eda:	e7c4      	b.n	8010e66 <_vfiprintf_r+0x15a>
 8010edc:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ee0:	4604      	mov	r4, r0
 8010ee2:	2301      	movs	r3, #1
 8010ee4:	e7f0      	b.n	8010ec8 <_vfiprintf_r+0x1bc>
 8010ee6:	ab03      	add	r3, sp, #12
 8010ee8:	9300      	str	r3, [sp, #0]
 8010eea:	462a      	mov	r2, r5
 8010eec:	4b12      	ldr	r3, [pc, #72]	; (8010f38 <_vfiprintf_r+0x22c>)
 8010eee:	a904      	add	r1, sp, #16
 8010ef0:	4630      	mov	r0, r6
 8010ef2:	f7fc fd0f 	bl	800d914 <_printf_float>
 8010ef6:	4607      	mov	r7, r0
 8010ef8:	1c78      	adds	r0, r7, #1
 8010efa:	d1d6      	bne.n	8010eaa <_vfiprintf_r+0x19e>
 8010efc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010efe:	07d9      	lsls	r1, r3, #31
 8010f00:	d405      	bmi.n	8010f0e <_vfiprintf_r+0x202>
 8010f02:	89ab      	ldrh	r3, [r5, #12]
 8010f04:	059a      	lsls	r2, r3, #22
 8010f06:	d402      	bmi.n	8010f0e <_vfiprintf_r+0x202>
 8010f08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f0a:	f7fd fc9f 	bl	800e84c <__retarget_lock_release_recursive>
 8010f0e:	89ab      	ldrh	r3, [r5, #12]
 8010f10:	065b      	lsls	r3, r3, #25
 8010f12:	f53f af1d 	bmi.w	8010d50 <_vfiprintf_r+0x44>
 8010f16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f18:	e71c      	b.n	8010d54 <_vfiprintf_r+0x48>
 8010f1a:	ab03      	add	r3, sp, #12
 8010f1c:	9300      	str	r3, [sp, #0]
 8010f1e:	462a      	mov	r2, r5
 8010f20:	4b05      	ldr	r3, [pc, #20]	; (8010f38 <_vfiprintf_r+0x22c>)
 8010f22:	a904      	add	r1, sp, #16
 8010f24:	4630      	mov	r0, r6
 8010f26:	f7fc ff99 	bl	800de5c <_printf_i>
 8010f2a:	e7e4      	b.n	8010ef6 <_vfiprintf_r+0x1ea>
 8010f2c:	08013cb5 	.word	0x08013cb5
 8010f30:	08013cbf 	.word	0x08013cbf
 8010f34:	0800d915 	.word	0x0800d915
 8010f38:	08010ce9 	.word	0x08010ce9
 8010f3c:	08013cbb 	.word	0x08013cbb

08010f40 <__swbuf_r>:
 8010f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f42:	460e      	mov	r6, r1
 8010f44:	4614      	mov	r4, r2
 8010f46:	4605      	mov	r5, r0
 8010f48:	b118      	cbz	r0, 8010f52 <__swbuf_r+0x12>
 8010f4a:	6a03      	ldr	r3, [r0, #32]
 8010f4c:	b90b      	cbnz	r3, 8010f52 <__swbuf_r+0x12>
 8010f4e:	f7fd fb43 	bl	800e5d8 <__sinit>
 8010f52:	69a3      	ldr	r3, [r4, #24]
 8010f54:	60a3      	str	r3, [r4, #8]
 8010f56:	89a3      	ldrh	r3, [r4, #12]
 8010f58:	071a      	lsls	r2, r3, #28
 8010f5a:	d525      	bpl.n	8010fa8 <__swbuf_r+0x68>
 8010f5c:	6923      	ldr	r3, [r4, #16]
 8010f5e:	b31b      	cbz	r3, 8010fa8 <__swbuf_r+0x68>
 8010f60:	6823      	ldr	r3, [r4, #0]
 8010f62:	6922      	ldr	r2, [r4, #16]
 8010f64:	1a98      	subs	r0, r3, r2
 8010f66:	6963      	ldr	r3, [r4, #20]
 8010f68:	b2f6      	uxtb	r6, r6
 8010f6a:	4283      	cmp	r3, r0
 8010f6c:	4637      	mov	r7, r6
 8010f6e:	dc04      	bgt.n	8010f7a <__swbuf_r+0x3a>
 8010f70:	4621      	mov	r1, r4
 8010f72:	4628      	mov	r0, r5
 8010f74:	f7ff fdda 	bl	8010b2c <_fflush_r>
 8010f78:	b9e0      	cbnz	r0, 8010fb4 <__swbuf_r+0x74>
 8010f7a:	68a3      	ldr	r3, [r4, #8]
 8010f7c:	3b01      	subs	r3, #1
 8010f7e:	60a3      	str	r3, [r4, #8]
 8010f80:	6823      	ldr	r3, [r4, #0]
 8010f82:	1c5a      	adds	r2, r3, #1
 8010f84:	6022      	str	r2, [r4, #0]
 8010f86:	701e      	strb	r6, [r3, #0]
 8010f88:	6962      	ldr	r2, [r4, #20]
 8010f8a:	1c43      	adds	r3, r0, #1
 8010f8c:	429a      	cmp	r2, r3
 8010f8e:	d004      	beq.n	8010f9a <__swbuf_r+0x5a>
 8010f90:	89a3      	ldrh	r3, [r4, #12]
 8010f92:	07db      	lsls	r3, r3, #31
 8010f94:	d506      	bpl.n	8010fa4 <__swbuf_r+0x64>
 8010f96:	2e0a      	cmp	r6, #10
 8010f98:	d104      	bne.n	8010fa4 <__swbuf_r+0x64>
 8010f9a:	4621      	mov	r1, r4
 8010f9c:	4628      	mov	r0, r5
 8010f9e:	f7ff fdc5 	bl	8010b2c <_fflush_r>
 8010fa2:	b938      	cbnz	r0, 8010fb4 <__swbuf_r+0x74>
 8010fa4:	4638      	mov	r0, r7
 8010fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fa8:	4621      	mov	r1, r4
 8010faa:	4628      	mov	r0, r5
 8010fac:	f000 f806 	bl	8010fbc <__swsetup_r>
 8010fb0:	2800      	cmp	r0, #0
 8010fb2:	d0d5      	beq.n	8010f60 <__swbuf_r+0x20>
 8010fb4:	f04f 37ff 	mov.w	r7, #4294967295
 8010fb8:	e7f4      	b.n	8010fa4 <__swbuf_r+0x64>
	...

08010fbc <__swsetup_r>:
 8010fbc:	b538      	push	{r3, r4, r5, lr}
 8010fbe:	4b2a      	ldr	r3, [pc, #168]	; (8011068 <__swsetup_r+0xac>)
 8010fc0:	4605      	mov	r5, r0
 8010fc2:	6818      	ldr	r0, [r3, #0]
 8010fc4:	460c      	mov	r4, r1
 8010fc6:	b118      	cbz	r0, 8010fd0 <__swsetup_r+0x14>
 8010fc8:	6a03      	ldr	r3, [r0, #32]
 8010fca:	b90b      	cbnz	r3, 8010fd0 <__swsetup_r+0x14>
 8010fcc:	f7fd fb04 	bl	800e5d8 <__sinit>
 8010fd0:	89a3      	ldrh	r3, [r4, #12]
 8010fd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010fd6:	0718      	lsls	r0, r3, #28
 8010fd8:	d422      	bmi.n	8011020 <__swsetup_r+0x64>
 8010fda:	06d9      	lsls	r1, r3, #27
 8010fdc:	d407      	bmi.n	8010fee <__swsetup_r+0x32>
 8010fde:	2309      	movs	r3, #9
 8010fe0:	602b      	str	r3, [r5, #0]
 8010fe2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010fe6:	81a3      	strh	r3, [r4, #12]
 8010fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8010fec:	e034      	b.n	8011058 <__swsetup_r+0x9c>
 8010fee:	0758      	lsls	r0, r3, #29
 8010ff0:	d512      	bpl.n	8011018 <__swsetup_r+0x5c>
 8010ff2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010ff4:	b141      	cbz	r1, 8011008 <__swsetup_r+0x4c>
 8010ff6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010ffa:	4299      	cmp	r1, r3
 8010ffc:	d002      	beq.n	8011004 <__swsetup_r+0x48>
 8010ffe:	4628      	mov	r0, r5
 8011000:	f7fe fac0 	bl	800f584 <_free_r>
 8011004:	2300      	movs	r3, #0
 8011006:	6363      	str	r3, [r4, #52]	; 0x34
 8011008:	89a3      	ldrh	r3, [r4, #12]
 801100a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801100e:	81a3      	strh	r3, [r4, #12]
 8011010:	2300      	movs	r3, #0
 8011012:	6063      	str	r3, [r4, #4]
 8011014:	6923      	ldr	r3, [r4, #16]
 8011016:	6023      	str	r3, [r4, #0]
 8011018:	89a3      	ldrh	r3, [r4, #12]
 801101a:	f043 0308 	orr.w	r3, r3, #8
 801101e:	81a3      	strh	r3, [r4, #12]
 8011020:	6923      	ldr	r3, [r4, #16]
 8011022:	b94b      	cbnz	r3, 8011038 <__swsetup_r+0x7c>
 8011024:	89a3      	ldrh	r3, [r4, #12]
 8011026:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801102a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801102e:	d003      	beq.n	8011038 <__swsetup_r+0x7c>
 8011030:	4621      	mov	r1, r4
 8011032:	4628      	mov	r0, r5
 8011034:	f000 f884 	bl	8011140 <__smakebuf_r>
 8011038:	89a0      	ldrh	r0, [r4, #12]
 801103a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801103e:	f010 0301 	ands.w	r3, r0, #1
 8011042:	d00a      	beq.n	801105a <__swsetup_r+0x9e>
 8011044:	2300      	movs	r3, #0
 8011046:	60a3      	str	r3, [r4, #8]
 8011048:	6963      	ldr	r3, [r4, #20]
 801104a:	425b      	negs	r3, r3
 801104c:	61a3      	str	r3, [r4, #24]
 801104e:	6923      	ldr	r3, [r4, #16]
 8011050:	b943      	cbnz	r3, 8011064 <__swsetup_r+0xa8>
 8011052:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011056:	d1c4      	bne.n	8010fe2 <__swsetup_r+0x26>
 8011058:	bd38      	pop	{r3, r4, r5, pc}
 801105a:	0781      	lsls	r1, r0, #30
 801105c:	bf58      	it	pl
 801105e:	6963      	ldrpl	r3, [r4, #20]
 8011060:	60a3      	str	r3, [r4, #8]
 8011062:	e7f4      	b.n	801104e <__swsetup_r+0x92>
 8011064:	2000      	movs	r0, #0
 8011066:	e7f7      	b.n	8011058 <__swsetup_r+0x9c>
 8011068:	20000200 	.word	0x20000200

0801106c <_raise_r>:
 801106c:	291f      	cmp	r1, #31
 801106e:	b538      	push	{r3, r4, r5, lr}
 8011070:	4604      	mov	r4, r0
 8011072:	460d      	mov	r5, r1
 8011074:	d904      	bls.n	8011080 <_raise_r+0x14>
 8011076:	2316      	movs	r3, #22
 8011078:	6003      	str	r3, [r0, #0]
 801107a:	f04f 30ff 	mov.w	r0, #4294967295
 801107e:	bd38      	pop	{r3, r4, r5, pc}
 8011080:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011082:	b112      	cbz	r2, 801108a <_raise_r+0x1e>
 8011084:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011088:	b94b      	cbnz	r3, 801109e <_raise_r+0x32>
 801108a:	4620      	mov	r0, r4
 801108c:	f000 f830 	bl	80110f0 <_getpid_r>
 8011090:	462a      	mov	r2, r5
 8011092:	4601      	mov	r1, r0
 8011094:	4620      	mov	r0, r4
 8011096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801109a:	f000 b817 	b.w	80110cc <_kill_r>
 801109e:	2b01      	cmp	r3, #1
 80110a0:	d00a      	beq.n	80110b8 <_raise_r+0x4c>
 80110a2:	1c59      	adds	r1, r3, #1
 80110a4:	d103      	bne.n	80110ae <_raise_r+0x42>
 80110a6:	2316      	movs	r3, #22
 80110a8:	6003      	str	r3, [r0, #0]
 80110aa:	2001      	movs	r0, #1
 80110ac:	e7e7      	b.n	801107e <_raise_r+0x12>
 80110ae:	2400      	movs	r4, #0
 80110b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80110b4:	4628      	mov	r0, r5
 80110b6:	4798      	blx	r3
 80110b8:	2000      	movs	r0, #0
 80110ba:	e7e0      	b.n	801107e <_raise_r+0x12>

080110bc <raise>:
 80110bc:	4b02      	ldr	r3, [pc, #8]	; (80110c8 <raise+0xc>)
 80110be:	4601      	mov	r1, r0
 80110c0:	6818      	ldr	r0, [r3, #0]
 80110c2:	f7ff bfd3 	b.w	801106c <_raise_r>
 80110c6:	bf00      	nop
 80110c8:	20000200 	.word	0x20000200

080110cc <_kill_r>:
 80110cc:	b538      	push	{r3, r4, r5, lr}
 80110ce:	4d07      	ldr	r5, [pc, #28]	; (80110ec <_kill_r+0x20>)
 80110d0:	2300      	movs	r3, #0
 80110d2:	4604      	mov	r4, r0
 80110d4:	4608      	mov	r0, r1
 80110d6:	4611      	mov	r1, r2
 80110d8:	602b      	str	r3, [r5, #0]
 80110da:	f7f1 fa27 	bl	800252c <_kill>
 80110de:	1c43      	adds	r3, r0, #1
 80110e0:	d102      	bne.n	80110e8 <_kill_r+0x1c>
 80110e2:	682b      	ldr	r3, [r5, #0]
 80110e4:	b103      	cbz	r3, 80110e8 <_kill_r+0x1c>
 80110e6:	6023      	str	r3, [r4, #0]
 80110e8:	bd38      	pop	{r3, r4, r5, pc}
 80110ea:	bf00      	nop
 80110ec:	20000ecc 	.word	0x20000ecc

080110f0 <_getpid_r>:
 80110f0:	f7f1 ba14 	b.w	800251c <_getpid>

080110f4 <__swhatbuf_r>:
 80110f4:	b570      	push	{r4, r5, r6, lr}
 80110f6:	460c      	mov	r4, r1
 80110f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110fc:	2900      	cmp	r1, #0
 80110fe:	b096      	sub	sp, #88	; 0x58
 8011100:	4615      	mov	r5, r2
 8011102:	461e      	mov	r6, r3
 8011104:	da0d      	bge.n	8011122 <__swhatbuf_r+0x2e>
 8011106:	89a3      	ldrh	r3, [r4, #12]
 8011108:	f013 0f80 	tst.w	r3, #128	; 0x80
 801110c:	f04f 0100 	mov.w	r1, #0
 8011110:	bf0c      	ite	eq
 8011112:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011116:	2340      	movne	r3, #64	; 0x40
 8011118:	2000      	movs	r0, #0
 801111a:	6031      	str	r1, [r6, #0]
 801111c:	602b      	str	r3, [r5, #0]
 801111e:	b016      	add	sp, #88	; 0x58
 8011120:	bd70      	pop	{r4, r5, r6, pc}
 8011122:	466a      	mov	r2, sp
 8011124:	f000 f848 	bl	80111b8 <_fstat_r>
 8011128:	2800      	cmp	r0, #0
 801112a:	dbec      	blt.n	8011106 <__swhatbuf_r+0x12>
 801112c:	9901      	ldr	r1, [sp, #4]
 801112e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011132:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011136:	4259      	negs	r1, r3
 8011138:	4159      	adcs	r1, r3
 801113a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801113e:	e7eb      	b.n	8011118 <__swhatbuf_r+0x24>

08011140 <__smakebuf_r>:
 8011140:	898b      	ldrh	r3, [r1, #12]
 8011142:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011144:	079d      	lsls	r5, r3, #30
 8011146:	4606      	mov	r6, r0
 8011148:	460c      	mov	r4, r1
 801114a:	d507      	bpl.n	801115c <__smakebuf_r+0x1c>
 801114c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011150:	6023      	str	r3, [r4, #0]
 8011152:	6123      	str	r3, [r4, #16]
 8011154:	2301      	movs	r3, #1
 8011156:	6163      	str	r3, [r4, #20]
 8011158:	b002      	add	sp, #8
 801115a:	bd70      	pop	{r4, r5, r6, pc}
 801115c:	ab01      	add	r3, sp, #4
 801115e:	466a      	mov	r2, sp
 8011160:	f7ff ffc8 	bl	80110f4 <__swhatbuf_r>
 8011164:	9900      	ldr	r1, [sp, #0]
 8011166:	4605      	mov	r5, r0
 8011168:	4630      	mov	r0, r6
 801116a:	f7fb fc89 	bl	800ca80 <_malloc_r>
 801116e:	b948      	cbnz	r0, 8011184 <__smakebuf_r+0x44>
 8011170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011174:	059a      	lsls	r2, r3, #22
 8011176:	d4ef      	bmi.n	8011158 <__smakebuf_r+0x18>
 8011178:	f023 0303 	bic.w	r3, r3, #3
 801117c:	f043 0302 	orr.w	r3, r3, #2
 8011180:	81a3      	strh	r3, [r4, #12]
 8011182:	e7e3      	b.n	801114c <__smakebuf_r+0xc>
 8011184:	89a3      	ldrh	r3, [r4, #12]
 8011186:	6020      	str	r0, [r4, #0]
 8011188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801118c:	81a3      	strh	r3, [r4, #12]
 801118e:	9b00      	ldr	r3, [sp, #0]
 8011190:	6163      	str	r3, [r4, #20]
 8011192:	9b01      	ldr	r3, [sp, #4]
 8011194:	6120      	str	r0, [r4, #16]
 8011196:	b15b      	cbz	r3, 80111b0 <__smakebuf_r+0x70>
 8011198:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801119c:	4630      	mov	r0, r6
 801119e:	f000 f81d 	bl	80111dc <_isatty_r>
 80111a2:	b128      	cbz	r0, 80111b0 <__smakebuf_r+0x70>
 80111a4:	89a3      	ldrh	r3, [r4, #12]
 80111a6:	f023 0303 	bic.w	r3, r3, #3
 80111aa:	f043 0301 	orr.w	r3, r3, #1
 80111ae:	81a3      	strh	r3, [r4, #12]
 80111b0:	89a3      	ldrh	r3, [r4, #12]
 80111b2:	431d      	orrs	r5, r3
 80111b4:	81a5      	strh	r5, [r4, #12]
 80111b6:	e7cf      	b.n	8011158 <__smakebuf_r+0x18>

080111b8 <_fstat_r>:
 80111b8:	b538      	push	{r3, r4, r5, lr}
 80111ba:	4d07      	ldr	r5, [pc, #28]	; (80111d8 <_fstat_r+0x20>)
 80111bc:	2300      	movs	r3, #0
 80111be:	4604      	mov	r4, r0
 80111c0:	4608      	mov	r0, r1
 80111c2:	4611      	mov	r1, r2
 80111c4:	602b      	str	r3, [r5, #0]
 80111c6:	f7f1 fa10 	bl	80025ea <_fstat>
 80111ca:	1c43      	adds	r3, r0, #1
 80111cc:	d102      	bne.n	80111d4 <_fstat_r+0x1c>
 80111ce:	682b      	ldr	r3, [r5, #0]
 80111d0:	b103      	cbz	r3, 80111d4 <_fstat_r+0x1c>
 80111d2:	6023      	str	r3, [r4, #0]
 80111d4:	bd38      	pop	{r3, r4, r5, pc}
 80111d6:	bf00      	nop
 80111d8:	20000ecc 	.word	0x20000ecc

080111dc <_isatty_r>:
 80111dc:	b538      	push	{r3, r4, r5, lr}
 80111de:	4d06      	ldr	r5, [pc, #24]	; (80111f8 <_isatty_r+0x1c>)
 80111e0:	2300      	movs	r3, #0
 80111e2:	4604      	mov	r4, r0
 80111e4:	4608      	mov	r0, r1
 80111e6:	602b      	str	r3, [r5, #0]
 80111e8:	f7f1 fa0f 	bl	800260a <_isatty>
 80111ec:	1c43      	adds	r3, r0, #1
 80111ee:	d102      	bne.n	80111f6 <_isatty_r+0x1a>
 80111f0:	682b      	ldr	r3, [r5, #0]
 80111f2:	b103      	cbz	r3, 80111f6 <_isatty_r+0x1a>
 80111f4:	6023      	str	r3, [r4, #0]
 80111f6:	bd38      	pop	{r3, r4, r5, pc}
 80111f8:	20000ecc 	.word	0x20000ecc

080111fc <atan2>:
 80111fc:	f000 bbe8 	b.w	80119d0 <__ieee754_atan2>

08011200 <fmod>:
 8011200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011202:	ed2d 8b02 	vpush	{d8}
 8011206:	ec57 6b10 	vmov	r6, r7, d0
 801120a:	ec55 4b11 	vmov	r4, r5, d1
 801120e:	f000 fca5 	bl	8011b5c <__ieee754_fmod>
 8011212:	4622      	mov	r2, r4
 8011214:	462b      	mov	r3, r5
 8011216:	4630      	mov	r0, r6
 8011218:	4639      	mov	r1, r7
 801121a:	eeb0 8a40 	vmov.f32	s16, s0
 801121e:	eef0 8a60 	vmov.f32	s17, s1
 8011222:	f7ef fc93 	bl	8000b4c <__aeabi_dcmpun>
 8011226:	b990      	cbnz	r0, 801124e <fmod+0x4e>
 8011228:	2200      	movs	r2, #0
 801122a:	2300      	movs	r3, #0
 801122c:	4620      	mov	r0, r4
 801122e:	4629      	mov	r1, r5
 8011230:	f7ef fc5a 	bl	8000ae8 <__aeabi_dcmpeq>
 8011234:	b158      	cbz	r0, 801124e <fmod+0x4e>
 8011236:	f7fd fadd 	bl	800e7f4 <__errno>
 801123a:	2321      	movs	r3, #33	; 0x21
 801123c:	6003      	str	r3, [r0, #0]
 801123e:	2200      	movs	r2, #0
 8011240:	2300      	movs	r3, #0
 8011242:	4610      	mov	r0, r2
 8011244:	4619      	mov	r1, r3
 8011246:	f7ef fb11 	bl	800086c <__aeabi_ddiv>
 801124a:	ec41 0b18 	vmov	d8, r0, r1
 801124e:	eeb0 0a48 	vmov.f32	s0, s16
 8011252:	eef0 0a68 	vmov.f32	s1, s17
 8011256:	ecbd 8b02 	vpop	{d8}
 801125a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801125c <pow>:
 801125c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801125e:	ed2d 8b02 	vpush	{d8}
 8011262:	eeb0 8a40 	vmov.f32	s16, s0
 8011266:	eef0 8a60 	vmov.f32	s17, s1
 801126a:	ec55 4b11 	vmov	r4, r5, d1
 801126e:	f000 fd83 	bl	8011d78 <__ieee754_pow>
 8011272:	4622      	mov	r2, r4
 8011274:	462b      	mov	r3, r5
 8011276:	4620      	mov	r0, r4
 8011278:	4629      	mov	r1, r5
 801127a:	ec57 6b10 	vmov	r6, r7, d0
 801127e:	f7ef fc65 	bl	8000b4c <__aeabi_dcmpun>
 8011282:	2800      	cmp	r0, #0
 8011284:	d13b      	bne.n	80112fe <pow+0xa2>
 8011286:	ec51 0b18 	vmov	r0, r1, d8
 801128a:	2200      	movs	r2, #0
 801128c:	2300      	movs	r3, #0
 801128e:	f7ef fc2b 	bl	8000ae8 <__aeabi_dcmpeq>
 8011292:	b1b8      	cbz	r0, 80112c4 <pow+0x68>
 8011294:	2200      	movs	r2, #0
 8011296:	2300      	movs	r3, #0
 8011298:	4620      	mov	r0, r4
 801129a:	4629      	mov	r1, r5
 801129c:	f7ef fc24 	bl	8000ae8 <__aeabi_dcmpeq>
 80112a0:	2800      	cmp	r0, #0
 80112a2:	d146      	bne.n	8011332 <pow+0xd6>
 80112a4:	ec45 4b10 	vmov	d0, r4, r5
 80112a8:	f000 f922 	bl	80114f0 <finite>
 80112ac:	b338      	cbz	r0, 80112fe <pow+0xa2>
 80112ae:	2200      	movs	r2, #0
 80112b0:	2300      	movs	r3, #0
 80112b2:	4620      	mov	r0, r4
 80112b4:	4629      	mov	r1, r5
 80112b6:	f7ef fc21 	bl	8000afc <__aeabi_dcmplt>
 80112ba:	b300      	cbz	r0, 80112fe <pow+0xa2>
 80112bc:	f7fd fa9a 	bl	800e7f4 <__errno>
 80112c0:	2322      	movs	r3, #34	; 0x22
 80112c2:	e01b      	b.n	80112fc <pow+0xa0>
 80112c4:	ec47 6b10 	vmov	d0, r6, r7
 80112c8:	f000 f912 	bl	80114f0 <finite>
 80112cc:	b9e0      	cbnz	r0, 8011308 <pow+0xac>
 80112ce:	eeb0 0a48 	vmov.f32	s0, s16
 80112d2:	eef0 0a68 	vmov.f32	s1, s17
 80112d6:	f000 f90b 	bl	80114f0 <finite>
 80112da:	b1a8      	cbz	r0, 8011308 <pow+0xac>
 80112dc:	ec45 4b10 	vmov	d0, r4, r5
 80112e0:	f000 f906 	bl	80114f0 <finite>
 80112e4:	b180      	cbz	r0, 8011308 <pow+0xac>
 80112e6:	4632      	mov	r2, r6
 80112e8:	463b      	mov	r3, r7
 80112ea:	4630      	mov	r0, r6
 80112ec:	4639      	mov	r1, r7
 80112ee:	f7ef fc2d 	bl	8000b4c <__aeabi_dcmpun>
 80112f2:	2800      	cmp	r0, #0
 80112f4:	d0e2      	beq.n	80112bc <pow+0x60>
 80112f6:	f7fd fa7d 	bl	800e7f4 <__errno>
 80112fa:	2321      	movs	r3, #33	; 0x21
 80112fc:	6003      	str	r3, [r0, #0]
 80112fe:	ecbd 8b02 	vpop	{d8}
 8011302:	ec47 6b10 	vmov	d0, r6, r7
 8011306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011308:	2200      	movs	r2, #0
 801130a:	2300      	movs	r3, #0
 801130c:	4630      	mov	r0, r6
 801130e:	4639      	mov	r1, r7
 8011310:	f7ef fbea 	bl	8000ae8 <__aeabi_dcmpeq>
 8011314:	2800      	cmp	r0, #0
 8011316:	d0f2      	beq.n	80112fe <pow+0xa2>
 8011318:	eeb0 0a48 	vmov.f32	s0, s16
 801131c:	eef0 0a68 	vmov.f32	s1, s17
 8011320:	f000 f8e6 	bl	80114f0 <finite>
 8011324:	2800      	cmp	r0, #0
 8011326:	d0ea      	beq.n	80112fe <pow+0xa2>
 8011328:	ec45 4b10 	vmov	d0, r4, r5
 801132c:	f000 f8e0 	bl	80114f0 <finite>
 8011330:	e7c3      	b.n	80112ba <pow+0x5e>
 8011332:	4f01      	ldr	r7, [pc, #4]	; (8011338 <pow+0xdc>)
 8011334:	2600      	movs	r6, #0
 8011336:	e7e2      	b.n	80112fe <pow+0xa2>
 8011338:	3ff00000 	.word	0x3ff00000

0801133c <sqrt>:
 801133c:	b538      	push	{r3, r4, r5, lr}
 801133e:	ed2d 8b02 	vpush	{d8}
 8011342:	ec55 4b10 	vmov	r4, r5, d0
 8011346:	f000 f8df 	bl	8011508 <__ieee754_sqrt>
 801134a:	4622      	mov	r2, r4
 801134c:	462b      	mov	r3, r5
 801134e:	4620      	mov	r0, r4
 8011350:	4629      	mov	r1, r5
 8011352:	eeb0 8a40 	vmov.f32	s16, s0
 8011356:	eef0 8a60 	vmov.f32	s17, s1
 801135a:	f7ef fbf7 	bl	8000b4c <__aeabi_dcmpun>
 801135e:	b990      	cbnz	r0, 8011386 <sqrt+0x4a>
 8011360:	2200      	movs	r2, #0
 8011362:	2300      	movs	r3, #0
 8011364:	4620      	mov	r0, r4
 8011366:	4629      	mov	r1, r5
 8011368:	f7ef fbc8 	bl	8000afc <__aeabi_dcmplt>
 801136c:	b158      	cbz	r0, 8011386 <sqrt+0x4a>
 801136e:	f7fd fa41 	bl	800e7f4 <__errno>
 8011372:	2321      	movs	r3, #33	; 0x21
 8011374:	6003      	str	r3, [r0, #0]
 8011376:	2200      	movs	r2, #0
 8011378:	2300      	movs	r3, #0
 801137a:	4610      	mov	r0, r2
 801137c:	4619      	mov	r1, r3
 801137e:	f7ef fa75 	bl	800086c <__aeabi_ddiv>
 8011382:	ec41 0b18 	vmov	d8, r0, r1
 8011386:	eeb0 0a48 	vmov.f32	s0, s16
 801138a:	eef0 0a68 	vmov.f32	s1, s17
 801138e:	ecbd 8b02 	vpop	{d8}
 8011392:	bd38      	pop	{r3, r4, r5, pc}
 8011394:	0000      	movs	r0, r0
	...

08011398 <cos>:
 8011398:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801139a:	ec53 2b10 	vmov	r2, r3, d0
 801139e:	4826      	ldr	r0, [pc, #152]	; (8011438 <cos+0xa0>)
 80113a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80113a4:	4281      	cmp	r1, r0
 80113a6:	dc06      	bgt.n	80113b6 <cos+0x1e>
 80113a8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8011430 <cos+0x98>
 80113ac:	b005      	add	sp, #20
 80113ae:	f85d eb04 	ldr.w	lr, [sp], #4
 80113b2:	f000 b985 	b.w	80116c0 <__kernel_cos>
 80113b6:	4821      	ldr	r0, [pc, #132]	; (801143c <cos+0xa4>)
 80113b8:	4281      	cmp	r1, r0
 80113ba:	dd09      	ble.n	80113d0 <cos+0x38>
 80113bc:	ee10 0a10 	vmov	r0, s0
 80113c0:	4619      	mov	r1, r3
 80113c2:	f7ee ff71 	bl	80002a8 <__aeabi_dsub>
 80113c6:	ec41 0b10 	vmov	d0, r0, r1
 80113ca:	b005      	add	sp, #20
 80113cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80113d0:	4668      	mov	r0, sp
 80113d2:	f001 f9fd 	bl	80127d0 <__ieee754_rem_pio2>
 80113d6:	f000 0003 	and.w	r0, r0, #3
 80113da:	2801      	cmp	r0, #1
 80113dc:	d00b      	beq.n	80113f6 <cos+0x5e>
 80113de:	2802      	cmp	r0, #2
 80113e0:	d016      	beq.n	8011410 <cos+0x78>
 80113e2:	b9e0      	cbnz	r0, 801141e <cos+0x86>
 80113e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80113e8:	ed9d 0b00 	vldr	d0, [sp]
 80113ec:	f000 f968 	bl	80116c0 <__kernel_cos>
 80113f0:	ec51 0b10 	vmov	r0, r1, d0
 80113f4:	e7e7      	b.n	80113c6 <cos+0x2e>
 80113f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80113fa:	ed9d 0b00 	vldr	d0, [sp]
 80113fe:	f000 fa27 	bl	8011850 <__kernel_sin>
 8011402:	ec53 2b10 	vmov	r2, r3, d0
 8011406:	ee10 0a10 	vmov	r0, s0
 801140a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801140e:	e7da      	b.n	80113c6 <cos+0x2e>
 8011410:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011414:	ed9d 0b00 	vldr	d0, [sp]
 8011418:	f000 f952 	bl	80116c0 <__kernel_cos>
 801141c:	e7f1      	b.n	8011402 <cos+0x6a>
 801141e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011422:	ed9d 0b00 	vldr	d0, [sp]
 8011426:	2001      	movs	r0, #1
 8011428:	f000 fa12 	bl	8011850 <__kernel_sin>
 801142c:	e7e0      	b.n	80113f0 <cos+0x58>
 801142e:	bf00      	nop
	...
 8011438:	3fe921fb 	.word	0x3fe921fb
 801143c:	7fefffff 	.word	0x7fefffff

08011440 <sin>:
 8011440:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011442:	ec53 2b10 	vmov	r2, r3, d0
 8011446:	4828      	ldr	r0, [pc, #160]	; (80114e8 <sin+0xa8>)
 8011448:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801144c:	4281      	cmp	r1, r0
 801144e:	dc07      	bgt.n	8011460 <sin+0x20>
 8011450:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80114e0 <sin+0xa0>
 8011454:	2000      	movs	r0, #0
 8011456:	b005      	add	sp, #20
 8011458:	f85d eb04 	ldr.w	lr, [sp], #4
 801145c:	f000 b9f8 	b.w	8011850 <__kernel_sin>
 8011460:	4822      	ldr	r0, [pc, #136]	; (80114ec <sin+0xac>)
 8011462:	4281      	cmp	r1, r0
 8011464:	dd09      	ble.n	801147a <sin+0x3a>
 8011466:	ee10 0a10 	vmov	r0, s0
 801146a:	4619      	mov	r1, r3
 801146c:	f7ee ff1c 	bl	80002a8 <__aeabi_dsub>
 8011470:	ec41 0b10 	vmov	d0, r0, r1
 8011474:	b005      	add	sp, #20
 8011476:	f85d fb04 	ldr.w	pc, [sp], #4
 801147a:	4668      	mov	r0, sp
 801147c:	f001 f9a8 	bl	80127d0 <__ieee754_rem_pio2>
 8011480:	f000 0003 	and.w	r0, r0, #3
 8011484:	2801      	cmp	r0, #1
 8011486:	d00c      	beq.n	80114a2 <sin+0x62>
 8011488:	2802      	cmp	r0, #2
 801148a:	d011      	beq.n	80114b0 <sin+0x70>
 801148c:	b9f0      	cbnz	r0, 80114cc <sin+0x8c>
 801148e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011492:	ed9d 0b00 	vldr	d0, [sp]
 8011496:	2001      	movs	r0, #1
 8011498:	f000 f9da 	bl	8011850 <__kernel_sin>
 801149c:	ec51 0b10 	vmov	r0, r1, d0
 80114a0:	e7e6      	b.n	8011470 <sin+0x30>
 80114a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80114a6:	ed9d 0b00 	vldr	d0, [sp]
 80114aa:	f000 f909 	bl	80116c0 <__kernel_cos>
 80114ae:	e7f5      	b.n	801149c <sin+0x5c>
 80114b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80114b4:	ed9d 0b00 	vldr	d0, [sp]
 80114b8:	2001      	movs	r0, #1
 80114ba:	f000 f9c9 	bl	8011850 <__kernel_sin>
 80114be:	ec53 2b10 	vmov	r2, r3, d0
 80114c2:	ee10 0a10 	vmov	r0, s0
 80114c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80114ca:	e7d1      	b.n	8011470 <sin+0x30>
 80114cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80114d0:	ed9d 0b00 	vldr	d0, [sp]
 80114d4:	f000 f8f4 	bl	80116c0 <__kernel_cos>
 80114d8:	e7f1      	b.n	80114be <sin+0x7e>
 80114da:	bf00      	nop
 80114dc:	f3af 8000 	nop.w
	...
 80114e8:	3fe921fb 	.word	0x3fe921fb
 80114ec:	7fefffff 	.word	0x7fefffff

080114f0 <finite>:
 80114f0:	b082      	sub	sp, #8
 80114f2:	ed8d 0b00 	vstr	d0, [sp]
 80114f6:	9801      	ldr	r0, [sp, #4]
 80114f8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80114fc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011500:	0fc0      	lsrs	r0, r0, #31
 8011502:	b002      	add	sp, #8
 8011504:	4770      	bx	lr
	...

08011508 <__ieee754_sqrt>:
 8011508:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801150c:	ec55 4b10 	vmov	r4, r5, d0
 8011510:	4e67      	ldr	r6, [pc, #412]	; (80116b0 <__ieee754_sqrt+0x1a8>)
 8011512:	43ae      	bics	r6, r5
 8011514:	ee10 0a10 	vmov	r0, s0
 8011518:	ee10 2a10 	vmov	r2, s0
 801151c:	4629      	mov	r1, r5
 801151e:	462b      	mov	r3, r5
 8011520:	d10d      	bne.n	801153e <__ieee754_sqrt+0x36>
 8011522:	f7ef f879 	bl	8000618 <__aeabi_dmul>
 8011526:	4602      	mov	r2, r0
 8011528:	460b      	mov	r3, r1
 801152a:	4620      	mov	r0, r4
 801152c:	4629      	mov	r1, r5
 801152e:	f7ee febd 	bl	80002ac <__adddf3>
 8011532:	4604      	mov	r4, r0
 8011534:	460d      	mov	r5, r1
 8011536:	ec45 4b10 	vmov	d0, r4, r5
 801153a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801153e:	2d00      	cmp	r5, #0
 8011540:	dc0b      	bgt.n	801155a <__ieee754_sqrt+0x52>
 8011542:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011546:	4326      	orrs	r6, r4
 8011548:	d0f5      	beq.n	8011536 <__ieee754_sqrt+0x2e>
 801154a:	b135      	cbz	r5, 801155a <__ieee754_sqrt+0x52>
 801154c:	f7ee feac 	bl	80002a8 <__aeabi_dsub>
 8011550:	4602      	mov	r2, r0
 8011552:	460b      	mov	r3, r1
 8011554:	f7ef f98a 	bl	800086c <__aeabi_ddiv>
 8011558:	e7eb      	b.n	8011532 <__ieee754_sqrt+0x2a>
 801155a:	1509      	asrs	r1, r1, #20
 801155c:	f000 808d 	beq.w	801167a <__ieee754_sqrt+0x172>
 8011560:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011564:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8011568:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801156c:	07c9      	lsls	r1, r1, #31
 801156e:	bf5c      	itt	pl
 8011570:	005b      	lslpl	r3, r3, #1
 8011572:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8011576:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801157a:	bf58      	it	pl
 801157c:	0052      	lslpl	r2, r2, #1
 801157e:	2500      	movs	r5, #0
 8011580:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011584:	1076      	asrs	r6, r6, #1
 8011586:	0052      	lsls	r2, r2, #1
 8011588:	f04f 0e16 	mov.w	lr, #22
 801158c:	46ac      	mov	ip, r5
 801158e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011592:	eb0c 0001 	add.w	r0, ip, r1
 8011596:	4298      	cmp	r0, r3
 8011598:	bfde      	ittt	le
 801159a:	1a1b      	suble	r3, r3, r0
 801159c:	eb00 0c01 	addle.w	ip, r0, r1
 80115a0:	186d      	addle	r5, r5, r1
 80115a2:	005b      	lsls	r3, r3, #1
 80115a4:	f1be 0e01 	subs.w	lr, lr, #1
 80115a8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80115ac:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80115b0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80115b4:	d1ed      	bne.n	8011592 <__ieee754_sqrt+0x8a>
 80115b6:	4674      	mov	r4, lr
 80115b8:	2720      	movs	r7, #32
 80115ba:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80115be:	4563      	cmp	r3, ip
 80115c0:	eb01 000e 	add.w	r0, r1, lr
 80115c4:	dc02      	bgt.n	80115cc <__ieee754_sqrt+0xc4>
 80115c6:	d113      	bne.n	80115f0 <__ieee754_sqrt+0xe8>
 80115c8:	4290      	cmp	r0, r2
 80115ca:	d811      	bhi.n	80115f0 <__ieee754_sqrt+0xe8>
 80115cc:	2800      	cmp	r0, #0
 80115ce:	eb00 0e01 	add.w	lr, r0, r1
 80115d2:	da57      	bge.n	8011684 <__ieee754_sqrt+0x17c>
 80115d4:	f1be 0f00 	cmp.w	lr, #0
 80115d8:	db54      	blt.n	8011684 <__ieee754_sqrt+0x17c>
 80115da:	f10c 0801 	add.w	r8, ip, #1
 80115de:	eba3 030c 	sub.w	r3, r3, ip
 80115e2:	4290      	cmp	r0, r2
 80115e4:	bf88      	it	hi
 80115e6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80115ea:	1a12      	subs	r2, r2, r0
 80115ec:	440c      	add	r4, r1
 80115ee:	46c4      	mov	ip, r8
 80115f0:	005b      	lsls	r3, r3, #1
 80115f2:	3f01      	subs	r7, #1
 80115f4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80115f8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80115fc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011600:	d1dd      	bne.n	80115be <__ieee754_sqrt+0xb6>
 8011602:	4313      	orrs	r3, r2
 8011604:	d01b      	beq.n	801163e <__ieee754_sqrt+0x136>
 8011606:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80116b4 <__ieee754_sqrt+0x1ac>
 801160a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80116b8 <__ieee754_sqrt+0x1b0>
 801160e:	e9da 0100 	ldrd	r0, r1, [sl]
 8011612:	e9db 2300 	ldrd	r2, r3, [fp]
 8011616:	f7ee fe47 	bl	80002a8 <__aeabi_dsub>
 801161a:	e9da 8900 	ldrd	r8, r9, [sl]
 801161e:	4602      	mov	r2, r0
 8011620:	460b      	mov	r3, r1
 8011622:	4640      	mov	r0, r8
 8011624:	4649      	mov	r1, r9
 8011626:	f7ef fa73 	bl	8000b10 <__aeabi_dcmple>
 801162a:	b140      	cbz	r0, 801163e <__ieee754_sqrt+0x136>
 801162c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8011630:	e9da 0100 	ldrd	r0, r1, [sl]
 8011634:	e9db 2300 	ldrd	r2, r3, [fp]
 8011638:	d126      	bne.n	8011688 <__ieee754_sqrt+0x180>
 801163a:	3501      	adds	r5, #1
 801163c:	463c      	mov	r4, r7
 801163e:	106a      	asrs	r2, r5, #1
 8011640:	0863      	lsrs	r3, r4, #1
 8011642:	07e9      	lsls	r1, r5, #31
 8011644:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011648:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801164c:	bf48      	it	mi
 801164e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011652:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8011656:	461c      	mov	r4, r3
 8011658:	e76d      	b.n	8011536 <__ieee754_sqrt+0x2e>
 801165a:	0ad3      	lsrs	r3, r2, #11
 801165c:	3815      	subs	r0, #21
 801165e:	0552      	lsls	r2, r2, #21
 8011660:	2b00      	cmp	r3, #0
 8011662:	d0fa      	beq.n	801165a <__ieee754_sqrt+0x152>
 8011664:	02dc      	lsls	r4, r3, #11
 8011666:	d50a      	bpl.n	801167e <__ieee754_sqrt+0x176>
 8011668:	f1c1 0420 	rsb	r4, r1, #32
 801166c:	fa22 f404 	lsr.w	r4, r2, r4
 8011670:	1e4d      	subs	r5, r1, #1
 8011672:	408a      	lsls	r2, r1
 8011674:	4323      	orrs	r3, r4
 8011676:	1b41      	subs	r1, r0, r5
 8011678:	e772      	b.n	8011560 <__ieee754_sqrt+0x58>
 801167a:	4608      	mov	r0, r1
 801167c:	e7f0      	b.n	8011660 <__ieee754_sqrt+0x158>
 801167e:	005b      	lsls	r3, r3, #1
 8011680:	3101      	adds	r1, #1
 8011682:	e7ef      	b.n	8011664 <__ieee754_sqrt+0x15c>
 8011684:	46e0      	mov	r8, ip
 8011686:	e7aa      	b.n	80115de <__ieee754_sqrt+0xd6>
 8011688:	f7ee fe10 	bl	80002ac <__adddf3>
 801168c:	e9da 8900 	ldrd	r8, r9, [sl]
 8011690:	4602      	mov	r2, r0
 8011692:	460b      	mov	r3, r1
 8011694:	4640      	mov	r0, r8
 8011696:	4649      	mov	r1, r9
 8011698:	f7ef fa30 	bl	8000afc <__aeabi_dcmplt>
 801169c:	b120      	cbz	r0, 80116a8 <__ieee754_sqrt+0x1a0>
 801169e:	1ca0      	adds	r0, r4, #2
 80116a0:	bf08      	it	eq
 80116a2:	3501      	addeq	r5, #1
 80116a4:	3402      	adds	r4, #2
 80116a6:	e7ca      	b.n	801163e <__ieee754_sqrt+0x136>
 80116a8:	3401      	adds	r4, #1
 80116aa:	f024 0401 	bic.w	r4, r4, #1
 80116ae:	e7c6      	b.n	801163e <__ieee754_sqrt+0x136>
 80116b0:	7ff00000 	.word	0x7ff00000
 80116b4:	20000208 	.word	0x20000208
 80116b8:	20000210 	.word	0x20000210
 80116bc:	00000000 	.word	0x00000000

080116c0 <__kernel_cos>:
 80116c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116c4:	ec57 6b10 	vmov	r6, r7, d0
 80116c8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80116cc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80116d0:	ed8d 1b00 	vstr	d1, [sp]
 80116d4:	da07      	bge.n	80116e6 <__kernel_cos+0x26>
 80116d6:	ee10 0a10 	vmov	r0, s0
 80116da:	4639      	mov	r1, r7
 80116dc:	f7ef fa4c 	bl	8000b78 <__aeabi_d2iz>
 80116e0:	2800      	cmp	r0, #0
 80116e2:	f000 8088 	beq.w	80117f6 <__kernel_cos+0x136>
 80116e6:	4632      	mov	r2, r6
 80116e8:	463b      	mov	r3, r7
 80116ea:	4630      	mov	r0, r6
 80116ec:	4639      	mov	r1, r7
 80116ee:	f7ee ff93 	bl	8000618 <__aeabi_dmul>
 80116f2:	4b51      	ldr	r3, [pc, #324]	; (8011838 <__kernel_cos+0x178>)
 80116f4:	2200      	movs	r2, #0
 80116f6:	4604      	mov	r4, r0
 80116f8:	460d      	mov	r5, r1
 80116fa:	f7ee ff8d 	bl	8000618 <__aeabi_dmul>
 80116fe:	a340      	add	r3, pc, #256	; (adr r3, 8011800 <__kernel_cos+0x140>)
 8011700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011704:	4682      	mov	sl, r0
 8011706:	468b      	mov	fp, r1
 8011708:	4620      	mov	r0, r4
 801170a:	4629      	mov	r1, r5
 801170c:	f7ee ff84 	bl	8000618 <__aeabi_dmul>
 8011710:	a33d      	add	r3, pc, #244	; (adr r3, 8011808 <__kernel_cos+0x148>)
 8011712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011716:	f7ee fdc9 	bl	80002ac <__adddf3>
 801171a:	4622      	mov	r2, r4
 801171c:	462b      	mov	r3, r5
 801171e:	f7ee ff7b 	bl	8000618 <__aeabi_dmul>
 8011722:	a33b      	add	r3, pc, #236	; (adr r3, 8011810 <__kernel_cos+0x150>)
 8011724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011728:	f7ee fdbe 	bl	80002a8 <__aeabi_dsub>
 801172c:	4622      	mov	r2, r4
 801172e:	462b      	mov	r3, r5
 8011730:	f7ee ff72 	bl	8000618 <__aeabi_dmul>
 8011734:	a338      	add	r3, pc, #224	; (adr r3, 8011818 <__kernel_cos+0x158>)
 8011736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801173a:	f7ee fdb7 	bl	80002ac <__adddf3>
 801173e:	4622      	mov	r2, r4
 8011740:	462b      	mov	r3, r5
 8011742:	f7ee ff69 	bl	8000618 <__aeabi_dmul>
 8011746:	a336      	add	r3, pc, #216	; (adr r3, 8011820 <__kernel_cos+0x160>)
 8011748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801174c:	f7ee fdac 	bl	80002a8 <__aeabi_dsub>
 8011750:	4622      	mov	r2, r4
 8011752:	462b      	mov	r3, r5
 8011754:	f7ee ff60 	bl	8000618 <__aeabi_dmul>
 8011758:	a333      	add	r3, pc, #204	; (adr r3, 8011828 <__kernel_cos+0x168>)
 801175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801175e:	f7ee fda5 	bl	80002ac <__adddf3>
 8011762:	4622      	mov	r2, r4
 8011764:	462b      	mov	r3, r5
 8011766:	f7ee ff57 	bl	8000618 <__aeabi_dmul>
 801176a:	4622      	mov	r2, r4
 801176c:	462b      	mov	r3, r5
 801176e:	f7ee ff53 	bl	8000618 <__aeabi_dmul>
 8011772:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011776:	4604      	mov	r4, r0
 8011778:	460d      	mov	r5, r1
 801177a:	4630      	mov	r0, r6
 801177c:	4639      	mov	r1, r7
 801177e:	f7ee ff4b 	bl	8000618 <__aeabi_dmul>
 8011782:	460b      	mov	r3, r1
 8011784:	4602      	mov	r2, r0
 8011786:	4629      	mov	r1, r5
 8011788:	4620      	mov	r0, r4
 801178a:	f7ee fd8d 	bl	80002a8 <__aeabi_dsub>
 801178e:	4b2b      	ldr	r3, [pc, #172]	; (801183c <__kernel_cos+0x17c>)
 8011790:	4598      	cmp	r8, r3
 8011792:	4606      	mov	r6, r0
 8011794:	460f      	mov	r7, r1
 8011796:	dc10      	bgt.n	80117ba <__kernel_cos+0xfa>
 8011798:	4602      	mov	r2, r0
 801179a:	460b      	mov	r3, r1
 801179c:	4650      	mov	r0, sl
 801179e:	4659      	mov	r1, fp
 80117a0:	f7ee fd82 	bl	80002a8 <__aeabi_dsub>
 80117a4:	460b      	mov	r3, r1
 80117a6:	4926      	ldr	r1, [pc, #152]	; (8011840 <__kernel_cos+0x180>)
 80117a8:	4602      	mov	r2, r0
 80117aa:	2000      	movs	r0, #0
 80117ac:	f7ee fd7c 	bl	80002a8 <__aeabi_dsub>
 80117b0:	ec41 0b10 	vmov	d0, r0, r1
 80117b4:	b003      	add	sp, #12
 80117b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117ba:	4b22      	ldr	r3, [pc, #136]	; (8011844 <__kernel_cos+0x184>)
 80117bc:	4920      	ldr	r1, [pc, #128]	; (8011840 <__kernel_cos+0x180>)
 80117be:	4598      	cmp	r8, r3
 80117c0:	bfcc      	ite	gt
 80117c2:	4d21      	ldrgt	r5, [pc, #132]	; (8011848 <__kernel_cos+0x188>)
 80117c4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80117c8:	2400      	movs	r4, #0
 80117ca:	4622      	mov	r2, r4
 80117cc:	462b      	mov	r3, r5
 80117ce:	2000      	movs	r0, #0
 80117d0:	f7ee fd6a 	bl	80002a8 <__aeabi_dsub>
 80117d4:	4622      	mov	r2, r4
 80117d6:	4680      	mov	r8, r0
 80117d8:	4689      	mov	r9, r1
 80117da:	462b      	mov	r3, r5
 80117dc:	4650      	mov	r0, sl
 80117de:	4659      	mov	r1, fp
 80117e0:	f7ee fd62 	bl	80002a8 <__aeabi_dsub>
 80117e4:	4632      	mov	r2, r6
 80117e6:	463b      	mov	r3, r7
 80117e8:	f7ee fd5e 	bl	80002a8 <__aeabi_dsub>
 80117ec:	4602      	mov	r2, r0
 80117ee:	460b      	mov	r3, r1
 80117f0:	4640      	mov	r0, r8
 80117f2:	4649      	mov	r1, r9
 80117f4:	e7da      	b.n	80117ac <__kernel_cos+0xec>
 80117f6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8011830 <__kernel_cos+0x170>
 80117fa:	e7db      	b.n	80117b4 <__kernel_cos+0xf4>
 80117fc:	f3af 8000 	nop.w
 8011800:	be8838d4 	.word	0xbe8838d4
 8011804:	bda8fae9 	.word	0xbda8fae9
 8011808:	bdb4b1c4 	.word	0xbdb4b1c4
 801180c:	3e21ee9e 	.word	0x3e21ee9e
 8011810:	809c52ad 	.word	0x809c52ad
 8011814:	3e927e4f 	.word	0x3e927e4f
 8011818:	19cb1590 	.word	0x19cb1590
 801181c:	3efa01a0 	.word	0x3efa01a0
 8011820:	16c15177 	.word	0x16c15177
 8011824:	3f56c16c 	.word	0x3f56c16c
 8011828:	5555554c 	.word	0x5555554c
 801182c:	3fa55555 	.word	0x3fa55555
 8011830:	00000000 	.word	0x00000000
 8011834:	3ff00000 	.word	0x3ff00000
 8011838:	3fe00000 	.word	0x3fe00000
 801183c:	3fd33332 	.word	0x3fd33332
 8011840:	3ff00000 	.word	0x3ff00000
 8011844:	3fe90000 	.word	0x3fe90000
 8011848:	3fd20000 	.word	0x3fd20000
 801184c:	00000000 	.word	0x00000000

08011850 <__kernel_sin>:
 8011850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011854:	ed2d 8b04 	vpush	{d8-d9}
 8011858:	eeb0 8a41 	vmov.f32	s16, s2
 801185c:	eef0 8a61 	vmov.f32	s17, s3
 8011860:	ec55 4b10 	vmov	r4, r5, d0
 8011864:	b083      	sub	sp, #12
 8011866:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801186a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801186e:	9001      	str	r0, [sp, #4]
 8011870:	da06      	bge.n	8011880 <__kernel_sin+0x30>
 8011872:	ee10 0a10 	vmov	r0, s0
 8011876:	4629      	mov	r1, r5
 8011878:	f7ef f97e 	bl	8000b78 <__aeabi_d2iz>
 801187c:	2800      	cmp	r0, #0
 801187e:	d051      	beq.n	8011924 <__kernel_sin+0xd4>
 8011880:	4622      	mov	r2, r4
 8011882:	462b      	mov	r3, r5
 8011884:	4620      	mov	r0, r4
 8011886:	4629      	mov	r1, r5
 8011888:	f7ee fec6 	bl	8000618 <__aeabi_dmul>
 801188c:	4682      	mov	sl, r0
 801188e:	468b      	mov	fp, r1
 8011890:	4602      	mov	r2, r0
 8011892:	460b      	mov	r3, r1
 8011894:	4620      	mov	r0, r4
 8011896:	4629      	mov	r1, r5
 8011898:	f7ee febe 	bl	8000618 <__aeabi_dmul>
 801189c:	a341      	add	r3, pc, #260	; (adr r3, 80119a4 <__kernel_sin+0x154>)
 801189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a2:	4680      	mov	r8, r0
 80118a4:	4689      	mov	r9, r1
 80118a6:	4650      	mov	r0, sl
 80118a8:	4659      	mov	r1, fp
 80118aa:	f7ee feb5 	bl	8000618 <__aeabi_dmul>
 80118ae:	a33f      	add	r3, pc, #252	; (adr r3, 80119ac <__kernel_sin+0x15c>)
 80118b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b4:	f7ee fcf8 	bl	80002a8 <__aeabi_dsub>
 80118b8:	4652      	mov	r2, sl
 80118ba:	465b      	mov	r3, fp
 80118bc:	f7ee feac 	bl	8000618 <__aeabi_dmul>
 80118c0:	a33c      	add	r3, pc, #240	; (adr r3, 80119b4 <__kernel_sin+0x164>)
 80118c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118c6:	f7ee fcf1 	bl	80002ac <__adddf3>
 80118ca:	4652      	mov	r2, sl
 80118cc:	465b      	mov	r3, fp
 80118ce:	f7ee fea3 	bl	8000618 <__aeabi_dmul>
 80118d2:	a33a      	add	r3, pc, #232	; (adr r3, 80119bc <__kernel_sin+0x16c>)
 80118d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118d8:	f7ee fce6 	bl	80002a8 <__aeabi_dsub>
 80118dc:	4652      	mov	r2, sl
 80118de:	465b      	mov	r3, fp
 80118e0:	f7ee fe9a 	bl	8000618 <__aeabi_dmul>
 80118e4:	a337      	add	r3, pc, #220	; (adr r3, 80119c4 <__kernel_sin+0x174>)
 80118e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ea:	f7ee fcdf 	bl	80002ac <__adddf3>
 80118ee:	9b01      	ldr	r3, [sp, #4]
 80118f0:	4606      	mov	r6, r0
 80118f2:	460f      	mov	r7, r1
 80118f4:	b9eb      	cbnz	r3, 8011932 <__kernel_sin+0xe2>
 80118f6:	4602      	mov	r2, r0
 80118f8:	460b      	mov	r3, r1
 80118fa:	4650      	mov	r0, sl
 80118fc:	4659      	mov	r1, fp
 80118fe:	f7ee fe8b 	bl	8000618 <__aeabi_dmul>
 8011902:	a325      	add	r3, pc, #148	; (adr r3, 8011998 <__kernel_sin+0x148>)
 8011904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011908:	f7ee fcce 	bl	80002a8 <__aeabi_dsub>
 801190c:	4642      	mov	r2, r8
 801190e:	464b      	mov	r3, r9
 8011910:	f7ee fe82 	bl	8000618 <__aeabi_dmul>
 8011914:	4602      	mov	r2, r0
 8011916:	460b      	mov	r3, r1
 8011918:	4620      	mov	r0, r4
 801191a:	4629      	mov	r1, r5
 801191c:	f7ee fcc6 	bl	80002ac <__adddf3>
 8011920:	4604      	mov	r4, r0
 8011922:	460d      	mov	r5, r1
 8011924:	ec45 4b10 	vmov	d0, r4, r5
 8011928:	b003      	add	sp, #12
 801192a:	ecbd 8b04 	vpop	{d8-d9}
 801192e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011932:	4b1b      	ldr	r3, [pc, #108]	; (80119a0 <__kernel_sin+0x150>)
 8011934:	ec51 0b18 	vmov	r0, r1, d8
 8011938:	2200      	movs	r2, #0
 801193a:	f7ee fe6d 	bl	8000618 <__aeabi_dmul>
 801193e:	4632      	mov	r2, r6
 8011940:	ec41 0b19 	vmov	d9, r0, r1
 8011944:	463b      	mov	r3, r7
 8011946:	4640      	mov	r0, r8
 8011948:	4649      	mov	r1, r9
 801194a:	f7ee fe65 	bl	8000618 <__aeabi_dmul>
 801194e:	4602      	mov	r2, r0
 8011950:	460b      	mov	r3, r1
 8011952:	ec51 0b19 	vmov	r0, r1, d9
 8011956:	f7ee fca7 	bl	80002a8 <__aeabi_dsub>
 801195a:	4652      	mov	r2, sl
 801195c:	465b      	mov	r3, fp
 801195e:	f7ee fe5b 	bl	8000618 <__aeabi_dmul>
 8011962:	ec53 2b18 	vmov	r2, r3, d8
 8011966:	f7ee fc9f 	bl	80002a8 <__aeabi_dsub>
 801196a:	a30b      	add	r3, pc, #44	; (adr r3, 8011998 <__kernel_sin+0x148>)
 801196c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011970:	4606      	mov	r6, r0
 8011972:	460f      	mov	r7, r1
 8011974:	4640      	mov	r0, r8
 8011976:	4649      	mov	r1, r9
 8011978:	f7ee fe4e 	bl	8000618 <__aeabi_dmul>
 801197c:	4602      	mov	r2, r0
 801197e:	460b      	mov	r3, r1
 8011980:	4630      	mov	r0, r6
 8011982:	4639      	mov	r1, r7
 8011984:	f7ee fc92 	bl	80002ac <__adddf3>
 8011988:	4602      	mov	r2, r0
 801198a:	460b      	mov	r3, r1
 801198c:	4620      	mov	r0, r4
 801198e:	4629      	mov	r1, r5
 8011990:	f7ee fc8a 	bl	80002a8 <__aeabi_dsub>
 8011994:	e7c4      	b.n	8011920 <__kernel_sin+0xd0>
 8011996:	bf00      	nop
 8011998:	55555549 	.word	0x55555549
 801199c:	3fc55555 	.word	0x3fc55555
 80119a0:	3fe00000 	.word	0x3fe00000
 80119a4:	5acfd57c 	.word	0x5acfd57c
 80119a8:	3de5d93a 	.word	0x3de5d93a
 80119ac:	8a2b9ceb 	.word	0x8a2b9ceb
 80119b0:	3e5ae5e6 	.word	0x3e5ae5e6
 80119b4:	57b1fe7d 	.word	0x57b1fe7d
 80119b8:	3ec71de3 	.word	0x3ec71de3
 80119bc:	19c161d5 	.word	0x19c161d5
 80119c0:	3f2a01a0 	.word	0x3f2a01a0
 80119c4:	1110f8a6 	.word	0x1110f8a6
 80119c8:	3f811111 	.word	0x3f811111
 80119cc:	00000000 	.word	0x00000000

080119d0 <__ieee754_atan2>:
 80119d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119d4:	ec57 6b11 	vmov	r6, r7, d1
 80119d8:	4273      	negs	r3, r6
 80119da:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8011b58 <__ieee754_atan2+0x188>
 80119de:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80119e2:	4333      	orrs	r3, r6
 80119e4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80119e8:	4543      	cmp	r3, r8
 80119ea:	ec51 0b10 	vmov	r0, r1, d0
 80119ee:	ee11 5a10 	vmov	r5, s2
 80119f2:	d80a      	bhi.n	8011a0a <__ieee754_atan2+0x3a>
 80119f4:	4244      	negs	r4, r0
 80119f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80119fa:	4304      	orrs	r4, r0
 80119fc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8011a00:	4544      	cmp	r4, r8
 8011a02:	ee10 9a10 	vmov	r9, s0
 8011a06:	468e      	mov	lr, r1
 8011a08:	d907      	bls.n	8011a1a <__ieee754_atan2+0x4a>
 8011a0a:	4632      	mov	r2, r6
 8011a0c:	463b      	mov	r3, r7
 8011a0e:	f7ee fc4d 	bl	80002ac <__adddf3>
 8011a12:	ec41 0b10 	vmov	d0, r0, r1
 8011a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a1a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8011a1e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011a22:	4334      	orrs	r4, r6
 8011a24:	d103      	bne.n	8011a2e <__ieee754_atan2+0x5e>
 8011a26:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a2a:	f001 b8d9 	b.w	8012be0 <atan>
 8011a2e:	17bc      	asrs	r4, r7, #30
 8011a30:	f004 0402 	and.w	r4, r4, #2
 8011a34:	ea53 0909 	orrs.w	r9, r3, r9
 8011a38:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8011a3c:	d107      	bne.n	8011a4e <__ieee754_atan2+0x7e>
 8011a3e:	2c02      	cmp	r4, #2
 8011a40:	d05f      	beq.n	8011b02 <__ieee754_atan2+0x132>
 8011a42:	2c03      	cmp	r4, #3
 8011a44:	d1e5      	bne.n	8011a12 <__ieee754_atan2+0x42>
 8011a46:	a140      	add	r1, pc, #256	; (adr r1, 8011b48 <__ieee754_atan2+0x178>)
 8011a48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a4c:	e7e1      	b.n	8011a12 <__ieee754_atan2+0x42>
 8011a4e:	4315      	orrs	r5, r2
 8011a50:	d106      	bne.n	8011a60 <__ieee754_atan2+0x90>
 8011a52:	f1be 0f00 	cmp.w	lr, #0
 8011a56:	da5f      	bge.n	8011b18 <__ieee754_atan2+0x148>
 8011a58:	a13d      	add	r1, pc, #244	; (adr r1, 8011b50 <__ieee754_atan2+0x180>)
 8011a5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a5e:	e7d8      	b.n	8011a12 <__ieee754_atan2+0x42>
 8011a60:	4542      	cmp	r2, r8
 8011a62:	d10f      	bne.n	8011a84 <__ieee754_atan2+0xb4>
 8011a64:	4293      	cmp	r3, r2
 8011a66:	f104 34ff 	add.w	r4, r4, #4294967295
 8011a6a:	d107      	bne.n	8011a7c <__ieee754_atan2+0xac>
 8011a6c:	2c02      	cmp	r4, #2
 8011a6e:	d84c      	bhi.n	8011b0a <__ieee754_atan2+0x13a>
 8011a70:	4b33      	ldr	r3, [pc, #204]	; (8011b40 <__ieee754_atan2+0x170>)
 8011a72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011a76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011a7a:	e7ca      	b.n	8011a12 <__ieee754_atan2+0x42>
 8011a7c:	2c02      	cmp	r4, #2
 8011a7e:	d848      	bhi.n	8011b12 <__ieee754_atan2+0x142>
 8011a80:	4b30      	ldr	r3, [pc, #192]	; (8011b44 <__ieee754_atan2+0x174>)
 8011a82:	e7f6      	b.n	8011a72 <__ieee754_atan2+0xa2>
 8011a84:	4543      	cmp	r3, r8
 8011a86:	d0e4      	beq.n	8011a52 <__ieee754_atan2+0x82>
 8011a88:	1a9b      	subs	r3, r3, r2
 8011a8a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8011a8e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011a92:	da1e      	bge.n	8011ad2 <__ieee754_atan2+0x102>
 8011a94:	2f00      	cmp	r7, #0
 8011a96:	da01      	bge.n	8011a9c <__ieee754_atan2+0xcc>
 8011a98:	323c      	adds	r2, #60	; 0x3c
 8011a9a:	db1e      	blt.n	8011ada <__ieee754_atan2+0x10a>
 8011a9c:	4632      	mov	r2, r6
 8011a9e:	463b      	mov	r3, r7
 8011aa0:	f7ee fee4 	bl	800086c <__aeabi_ddiv>
 8011aa4:	ec41 0b10 	vmov	d0, r0, r1
 8011aa8:	f001 fa3a 	bl	8012f20 <fabs>
 8011aac:	f001 f898 	bl	8012be0 <atan>
 8011ab0:	ec51 0b10 	vmov	r0, r1, d0
 8011ab4:	2c01      	cmp	r4, #1
 8011ab6:	d013      	beq.n	8011ae0 <__ieee754_atan2+0x110>
 8011ab8:	2c02      	cmp	r4, #2
 8011aba:	d015      	beq.n	8011ae8 <__ieee754_atan2+0x118>
 8011abc:	2c00      	cmp	r4, #0
 8011abe:	d0a8      	beq.n	8011a12 <__ieee754_atan2+0x42>
 8011ac0:	a317      	add	r3, pc, #92	; (adr r3, 8011b20 <__ieee754_atan2+0x150>)
 8011ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ac6:	f7ee fbef 	bl	80002a8 <__aeabi_dsub>
 8011aca:	a317      	add	r3, pc, #92	; (adr r3, 8011b28 <__ieee754_atan2+0x158>)
 8011acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ad0:	e014      	b.n	8011afc <__ieee754_atan2+0x12c>
 8011ad2:	a117      	add	r1, pc, #92	; (adr r1, 8011b30 <__ieee754_atan2+0x160>)
 8011ad4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ad8:	e7ec      	b.n	8011ab4 <__ieee754_atan2+0xe4>
 8011ada:	2000      	movs	r0, #0
 8011adc:	2100      	movs	r1, #0
 8011ade:	e7e9      	b.n	8011ab4 <__ieee754_atan2+0xe4>
 8011ae0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011ae4:	4619      	mov	r1, r3
 8011ae6:	e794      	b.n	8011a12 <__ieee754_atan2+0x42>
 8011ae8:	a30d      	add	r3, pc, #52	; (adr r3, 8011b20 <__ieee754_atan2+0x150>)
 8011aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aee:	f7ee fbdb 	bl	80002a8 <__aeabi_dsub>
 8011af2:	4602      	mov	r2, r0
 8011af4:	460b      	mov	r3, r1
 8011af6:	a10c      	add	r1, pc, #48	; (adr r1, 8011b28 <__ieee754_atan2+0x158>)
 8011af8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011afc:	f7ee fbd4 	bl	80002a8 <__aeabi_dsub>
 8011b00:	e787      	b.n	8011a12 <__ieee754_atan2+0x42>
 8011b02:	a109      	add	r1, pc, #36	; (adr r1, 8011b28 <__ieee754_atan2+0x158>)
 8011b04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b08:	e783      	b.n	8011a12 <__ieee754_atan2+0x42>
 8011b0a:	a10b      	add	r1, pc, #44	; (adr r1, 8011b38 <__ieee754_atan2+0x168>)
 8011b0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b10:	e77f      	b.n	8011a12 <__ieee754_atan2+0x42>
 8011b12:	2000      	movs	r0, #0
 8011b14:	2100      	movs	r1, #0
 8011b16:	e77c      	b.n	8011a12 <__ieee754_atan2+0x42>
 8011b18:	a105      	add	r1, pc, #20	; (adr r1, 8011b30 <__ieee754_atan2+0x160>)
 8011b1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b1e:	e778      	b.n	8011a12 <__ieee754_atan2+0x42>
 8011b20:	33145c07 	.word	0x33145c07
 8011b24:	3ca1a626 	.word	0x3ca1a626
 8011b28:	54442d18 	.word	0x54442d18
 8011b2c:	400921fb 	.word	0x400921fb
 8011b30:	54442d18 	.word	0x54442d18
 8011b34:	3ff921fb 	.word	0x3ff921fb
 8011b38:	54442d18 	.word	0x54442d18
 8011b3c:	3fe921fb 	.word	0x3fe921fb
 8011b40:	08013d08 	.word	0x08013d08
 8011b44:	08013d20 	.word	0x08013d20
 8011b48:	54442d18 	.word	0x54442d18
 8011b4c:	c00921fb 	.word	0xc00921fb
 8011b50:	54442d18 	.word	0x54442d18
 8011b54:	bff921fb 	.word	0xbff921fb
 8011b58:	7ff00000 	.word	0x7ff00000

08011b5c <__ieee754_fmod>:
 8011b5c:	ec53 2b11 	vmov	r2, r3, d1
 8011b60:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8011b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b68:	ea5c 0402 	orrs.w	r4, ip, r2
 8011b6c:	ec51 0b10 	vmov	r0, r1, d0
 8011b70:	ee11 7a10 	vmov	r7, s2
 8011b74:	ee11 ea10 	vmov	lr, s2
 8011b78:	461e      	mov	r6, r3
 8011b7a:	d00c      	beq.n	8011b96 <__ieee754_fmod+0x3a>
 8011b7c:	4c78      	ldr	r4, [pc, #480]	; (8011d60 <__ieee754_fmod+0x204>)
 8011b7e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8011b82:	45a0      	cmp	r8, r4
 8011b84:	4689      	mov	r9, r1
 8011b86:	dc06      	bgt.n	8011b96 <__ieee754_fmod+0x3a>
 8011b88:	4254      	negs	r4, r2
 8011b8a:	4d76      	ldr	r5, [pc, #472]	; (8011d64 <__ieee754_fmod+0x208>)
 8011b8c:	4314      	orrs	r4, r2
 8011b8e:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8011b92:	42ac      	cmp	r4, r5
 8011b94:	d909      	bls.n	8011baa <__ieee754_fmod+0x4e>
 8011b96:	f7ee fd3f 	bl	8000618 <__aeabi_dmul>
 8011b9a:	4602      	mov	r2, r0
 8011b9c:	460b      	mov	r3, r1
 8011b9e:	f7ee fe65 	bl	800086c <__aeabi_ddiv>
 8011ba2:	ec41 0b10 	vmov	d0, r0, r1
 8011ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011baa:	45e0      	cmp	r8, ip
 8011bac:	ee10 aa10 	vmov	sl, s0
 8011bb0:	ee10 4a10 	vmov	r4, s0
 8011bb4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8011bb8:	dc09      	bgt.n	8011bce <__ieee754_fmod+0x72>
 8011bba:	dbf2      	blt.n	8011ba2 <__ieee754_fmod+0x46>
 8011bbc:	4290      	cmp	r0, r2
 8011bbe:	d3f0      	bcc.n	8011ba2 <__ieee754_fmod+0x46>
 8011bc0:	d105      	bne.n	8011bce <__ieee754_fmod+0x72>
 8011bc2:	4b69      	ldr	r3, [pc, #420]	; (8011d68 <__ieee754_fmod+0x20c>)
 8011bc4:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8011bc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011bcc:	e7e9      	b.n	8011ba2 <__ieee754_fmod+0x46>
 8011bce:	4a65      	ldr	r2, [pc, #404]	; (8011d64 <__ieee754_fmod+0x208>)
 8011bd0:	ea19 0f02 	tst.w	r9, r2
 8011bd4:	d148      	bne.n	8011c68 <__ieee754_fmod+0x10c>
 8011bd6:	f1b8 0f00 	cmp.w	r8, #0
 8011bda:	d13d      	bne.n	8011c58 <__ieee754_fmod+0xfc>
 8011bdc:	4963      	ldr	r1, [pc, #396]	; (8011d6c <__ieee754_fmod+0x210>)
 8011bde:	4653      	mov	r3, sl
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	dc36      	bgt.n	8011c52 <__ieee754_fmod+0xf6>
 8011be4:	4216      	tst	r6, r2
 8011be6:	d14f      	bne.n	8011c88 <__ieee754_fmod+0x12c>
 8011be8:	f1bc 0f00 	cmp.w	ip, #0
 8011bec:	d144      	bne.n	8011c78 <__ieee754_fmod+0x11c>
 8011bee:	4a5f      	ldr	r2, [pc, #380]	; (8011d6c <__ieee754_fmod+0x210>)
 8011bf0:	463b      	mov	r3, r7
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	dc3d      	bgt.n	8011c72 <__ieee754_fmod+0x116>
 8011bf6:	485e      	ldr	r0, [pc, #376]	; (8011d70 <__ieee754_fmod+0x214>)
 8011bf8:	4281      	cmp	r1, r0
 8011bfa:	db4a      	blt.n	8011c92 <__ieee754_fmod+0x136>
 8011bfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011c00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011c04:	485a      	ldr	r0, [pc, #360]	; (8011d70 <__ieee754_fmod+0x214>)
 8011c06:	4282      	cmp	r2, r0
 8011c08:	db57      	blt.n	8011cba <__ieee754_fmod+0x15e>
 8011c0a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8011c0e:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8011c12:	1a89      	subs	r1, r1, r2
 8011c14:	1b98      	subs	r0, r3, r6
 8011c16:	eba4 070e 	sub.w	r7, r4, lr
 8011c1a:	2900      	cmp	r1, #0
 8011c1c:	d162      	bne.n	8011ce4 <__ieee754_fmod+0x188>
 8011c1e:	4574      	cmp	r4, lr
 8011c20:	bf38      	it	cc
 8011c22:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8011c26:	2800      	cmp	r0, #0
 8011c28:	bfa4      	itt	ge
 8011c2a:	463c      	movge	r4, r7
 8011c2c:	4603      	movge	r3, r0
 8011c2e:	ea53 0104 	orrs.w	r1, r3, r4
 8011c32:	d0c6      	beq.n	8011bc2 <__ieee754_fmod+0x66>
 8011c34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011c38:	db69      	blt.n	8011d0e <__ieee754_fmod+0x1b2>
 8011c3a:	494d      	ldr	r1, [pc, #308]	; (8011d70 <__ieee754_fmod+0x214>)
 8011c3c:	428a      	cmp	r2, r1
 8011c3e:	db6c      	blt.n	8011d1a <__ieee754_fmod+0x1be>
 8011c40:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011c44:	432b      	orrs	r3, r5
 8011c46:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8011c4a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011c4e:	4620      	mov	r0, r4
 8011c50:	e7a7      	b.n	8011ba2 <__ieee754_fmod+0x46>
 8011c52:	3901      	subs	r1, #1
 8011c54:	005b      	lsls	r3, r3, #1
 8011c56:	e7c3      	b.n	8011be0 <__ieee754_fmod+0x84>
 8011c58:	4945      	ldr	r1, [pc, #276]	; (8011d70 <__ieee754_fmod+0x214>)
 8011c5a:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	ddc0      	ble.n	8011be4 <__ieee754_fmod+0x88>
 8011c62:	3901      	subs	r1, #1
 8011c64:	005b      	lsls	r3, r3, #1
 8011c66:	e7fa      	b.n	8011c5e <__ieee754_fmod+0x102>
 8011c68:	ea4f 5128 	mov.w	r1, r8, asr #20
 8011c6c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011c70:	e7b8      	b.n	8011be4 <__ieee754_fmod+0x88>
 8011c72:	3a01      	subs	r2, #1
 8011c74:	005b      	lsls	r3, r3, #1
 8011c76:	e7bc      	b.n	8011bf2 <__ieee754_fmod+0x96>
 8011c78:	4a3d      	ldr	r2, [pc, #244]	; (8011d70 <__ieee754_fmod+0x214>)
 8011c7a:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	ddb9      	ble.n	8011bf6 <__ieee754_fmod+0x9a>
 8011c82:	3a01      	subs	r2, #1
 8011c84:	005b      	lsls	r3, r3, #1
 8011c86:	e7fa      	b.n	8011c7e <__ieee754_fmod+0x122>
 8011c88:	ea4f 522c 	mov.w	r2, ip, asr #20
 8011c8c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011c90:	e7b1      	b.n	8011bf6 <__ieee754_fmod+0x9a>
 8011c92:	1a40      	subs	r0, r0, r1
 8011c94:	281f      	cmp	r0, #31
 8011c96:	dc0a      	bgt.n	8011cae <__ieee754_fmod+0x152>
 8011c98:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8011c9c:	fa08 f800 	lsl.w	r8, r8, r0
 8011ca0:	fa2a f303 	lsr.w	r3, sl, r3
 8011ca4:	ea43 0308 	orr.w	r3, r3, r8
 8011ca8:	fa0a f400 	lsl.w	r4, sl, r0
 8011cac:	e7aa      	b.n	8011c04 <__ieee754_fmod+0xa8>
 8011cae:	4b31      	ldr	r3, [pc, #196]	; (8011d74 <__ieee754_fmod+0x218>)
 8011cb0:	1a5b      	subs	r3, r3, r1
 8011cb2:	fa0a f303 	lsl.w	r3, sl, r3
 8011cb6:	2400      	movs	r4, #0
 8011cb8:	e7a4      	b.n	8011c04 <__ieee754_fmod+0xa8>
 8011cba:	1a80      	subs	r0, r0, r2
 8011cbc:	281f      	cmp	r0, #31
 8011cbe:	dc0a      	bgt.n	8011cd6 <__ieee754_fmod+0x17a>
 8011cc0:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8011cc4:	fa0c fc00 	lsl.w	ip, ip, r0
 8011cc8:	fa27 f606 	lsr.w	r6, r7, r6
 8011ccc:	ea46 060c 	orr.w	r6, r6, ip
 8011cd0:	fa07 fe00 	lsl.w	lr, r7, r0
 8011cd4:	e79d      	b.n	8011c12 <__ieee754_fmod+0xb6>
 8011cd6:	4e27      	ldr	r6, [pc, #156]	; (8011d74 <__ieee754_fmod+0x218>)
 8011cd8:	1ab6      	subs	r6, r6, r2
 8011cda:	fa07 f606 	lsl.w	r6, r7, r6
 8011cde:	f04f 0e00 	mov.w	lr, #0
 8011ce2:	e796      	b.n	8011c12 <__ieee754_fmod+0xb6>
 8011ce4:	4574      	cmp	r4, lr
 8011ce6:	bf38      	it	cc
 8011ce8:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8011cec:	2800      	cmp	r0, #0
 8011cee:	da05      	bge.n	8011cfc <__ieee754_fmod+0x1a0>
 8011cf0:	0fe0      	lsrs	r0, r4, #31
 8011cf2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8011cf6:	0064      	lsls	r4, r4, #1
 8011cf8:	3901      	subs	r1, #1
 8011cfa:	e78b      	b.n	8011c14 <__ieee754_fmod+0xb8>
 8011cfc:	ea50 0307 	orrs.w	r3, r0, r7
 8011d00:	f43f af5f 	beq.w	8011bc2 <__ieee754_fmod+0x66>
 8011d04:	0ffb      	lsrs	r3, r7, #31
 8011d06:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8011d0a:	007c      	lsls	r4, r7, #1
 8011d0c:	e7f4      	b.n	8011cf8 <__ieee754_fmod+0x19c>
 8011d0e:	0fe1      	lsrs	r1, r4, #31
 8011d10:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8011d14:	0064      	lsls	r4, r4, #1
 8011d16:	3a01      	subs	r2, #1
 8011d18:	e78c      	b.n	8011c34 <__ieee754_fmod+0xd8>
 8011d1a:	1a89      	subs	r1, r1, r2
 8011d1c:	2914      	cmp	r1, #20
 8011d1e:	dc0a      	bgt.n	8011d36 <__ieee754_fmod+0x1da>
 8011d20:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8011d24:	fa03 f202 	lsl.w	r2, r3, r2
 8011d28:	40cc      	lsrs	r4, r1
 8011d2a:	4322      	orrs	r2, r4
 8011d2c:	410b      	asrs	r3, r1
 8011d2e:	ea43 0105 	orr.w	r1, r3, r5
 8011d32:	4610      	mov	r0, r2
 8011d34:	e735      	b.n	8011ba2 <__ieee754_fmod+0x46>
 8011d36:	291f      	cmp	r1, #31
 8011d38:	dc07      	bgt.n	8011d4a <__ieee754_fmod+0x1ee>
 8011d3a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8011d3e:	40cc      	lsrs	r4, r1
 8011d40:	fa03 f202 	lsl.w	r2, r3, r2
 8011d44:	4322      	orrs	r2, r4
 8011d46:	462b      	mov	r3, r5
 8011d48:	e7f1      	b.n	8011d2e <__ieee754_fmod+0x1d2>
 8011d4a:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8011d4e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011d52:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8011d56:	32e2      	adds	r2, #226	; 0xe2
 8011d58:	fa43 f202 	asr.w	r2, r3, r2
 8011d5c:	e7f3      	b.n	8011d46 <__ieee754_fmod+0x1ea>
 8011d5e:	bf00      	nop
 8011d60:	7fefffff 	.word	0x7fefffff
 8011d64:	7ff00000 	.word	0x7ff00000
 8011d68:	08013d38 	.word	0x08013d38
 8011d6c:	fffffbed 	.word	0xfffffbed
 8011d70:	fffffc02 	.word	0xfffffc02
 8011d74:	fffffbe2 	.word	0xfffffbe2

08011d78 <__ieee754_pow>:
 8011d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d7c:	ed2d 8b06 	vpush	{d8-d10}
 8011d80:	b089      	sub	sp, #36	; 0x24
 8011d82:	ed8d 1b00 	vstr	d1, [sp]
 8011d86:	e9dd 2900 	ldrd	r2, r9, [sp]
 8011d8a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011d8e:	ea58 0102 	orrs.w	r1, r8, r2
 8011d92:	ec57 6b10 	vmov	r6, r7, d0
 8011d96:	d115      	bne.n	8011dc4 <__ieee754_pow+0x4c>
 8011d98:	19b3      	adds	r3, r6, r6
 8011d9a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8011d9e:	4152      	adcs	r2, r2
 8011da0:	4299      	cmp	r1, r3
 8011da2:	4b89      	ldr	r3, [pc, #548]	; (8011fc8 <__ieee754_pow+0x250>)
 8011da4:	4193      	sbcs	r3, r2
 8011da6:	f080 84d1 	bcs.w	801274c <__ieee754_pow+0x9d4>
 8011daa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011dae:	4630      	mov	r0, r6
 8011db0:	4639      	mov	r1, r7
 8011db2:	f7ee fa7b 	bl	80002ac <__adddf3>
 8011db6:	ec41 0b10 	vmov	d0, r0, r1
 8011dba:	b009      	add	sp, #36	; 0x24
 8011dbc:	ecbd 8b06 	vpop	{d8-d10}
 8011dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dc4:	4b81      	ldr	r3, [pc, #516]	; (8011fcc <__ieee754_pow+0x254>)
 8011dc6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011dca:	429c      	cmp	r4, r3
 8011dcc:	ee10 aa10 	vmov	sl, s0
 8011dd0:	463d      	mov	r5, r7
 8011dd2:	dc06      	bgt.n	8011de2 <__ieee754_pow+0x6a>
 8011dd4:	d101      	bne.n	8011dda <__ieee754_pow+0x62>
 8011dd6:	2e00      	cmp	r6, #0
 8011dd8:	d1e7      	bne.n	8011daa <__ieee754_pow+0x32>
 8011dda:	4598      	cmp	r8, r3
 8011ddc:	dc01      	bgt.n	8011de2 <__ieee754_pow+0x6a>
 8011dde:	d10f      	bne.n	8011e00 <__ieee754_pow+0x88>
 8011de0:	b172      	cbz	r2, 8011e00 <__ieee754_pow+0x88>
 8011de2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8011de6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8011dea:	ea55 050a 	orrs.w	r5, r5, sl
 8011dee:	d1dc      	bne.n	8011daa <__ieee754_pow+0x32>
 8011df0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011df4:	18db      	adds	r3, r3, r3
 8011df6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8011dfa:	4152      	adcs	r2, r2
 8011dfc:	429d      	cmp	r5, r3
 8011dfe:	e7d0      	b.n	8011da2 <__ieee754_pow+0x2a>
 8011e00:	2d00      	cmp	r5, #0
 8011e02:	da3b      	bge.n	8011e7c <__ieee754_pow+0x104>
 8011e04:	4b72      	ldr	r3, [pc, #456]	; (8011fd0 <__ieee754_pow+0x258>)
 8011e06:	4598      	cmp	r8, r3
 8011e08:	dc51      	bgt.n	8011eae <__ieee754_pow+0x136>
 8011e0a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8011e0e:	4598      	cmp	r8, r3
 8011e10:	f340 84ab 	ble.w	801276a <__ieee754_pow+0x9f2>
 8011e14:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011e18:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011e1c:	2b14      	cmp	r3, #20
 8011e1e:	dd0f      	ble.n	8011e40 <__ieee754_pow+0xc8>
 8011e20:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011e24:	fa22 f103 	lsr.w	r1, r2, r3
 8011e28:	fa01 f303 	lsl.w	r3, r1, r3
 8011e2c:	4293      	cmp	r3, r2
 8011e2e:	f040 849c 	bne.w	801276a <__ieee754_pow+0x9f2>
 8011e32:	f001 0101 	and.w	r1, r1, #1
 8011e36:	f1c1 0302 	rsb	r3, r1, #2
 8011e3a:	9304      	str	r3, [sp, #16]
 8011e3c:	b182      	cbz	r2, 8011e60 <__ieee754_pow+0xe8>
 8011e3e:	e05f      	b.n	8011f00 <__ieee754_pow+0x188>
 8011e40:	2a00      	cmp	r2, #0
 8011e42:	d15b      	bne.n	8011efc <__ieee754_pow+0x184>
 8011e44:	f1c3 0314 	rsb	r3, r3, #20
 8011e48:	fa48 f103 	asr.w	r1, r8, r3
 8011e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8011e50:	4543      	cmp	r3, r8
 8011e52:	f040 8487 	bne.w	8012764 <__ieee754_pow+0x9ec>
 8011e56:	f001 0101 	and.w	r1, r1, #1
 8011e5a:	f1c1 0302 	rsb	r3, r1, #2
 8011e5e:	9304      	str	r3, [sp, #16]
 8011e60:	4b5c      	ldr	r3, [pc, #368]	; (8011fd4 <__ieee754_pow+0x25c>)
 8011e62:	4598      	cmp	r8, r3
 8011e64:	d132      	bne.n	8011ecc <__ieee754_pow+0x154>
 8011e66:	f1b9 0f00 	cmp.w	r9, #0
 8011e6a:	f280 8477 	bge.w	801275c <__ieee754_pow+0x9e4>
 8011e6e:	4959      	ldr	r1, [pc, #356]	; (8011fd4 <__ieee754_pow+0x25c>)
 8011e70:	4632      	mov	r2, r6
 8011e72:	463b      	mov	r3, r7
 8011e74:	2000      	movs	r0, #0
 8011e76:	f7ee fcf9 	bl	800086c <__aeabi_ddiv>
 8011e7a:	e79c      	b.n	8011db6 <__ieee754_pow+0x3e>
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	9304      	str	r3, [sp, #16]
 8011e80:	2a00      	cmp	r2, #0
 8011e82:	d13d      	bne.n	8011f00 <__ieee754_pow+0x188>
 8011e84:	4b51      	ldr	r3, [pc, #324]	; (8011fcc <__ieee754_pow+0x254>)
 8011e86:	4598      	cmp	r8, r3
 8011e88:	d1ea      	bne.n	8011e60 <__ieee754_pow+0xe8>
 8011e8a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011e8e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011e92:	ea53 030a 	orrs.w	r3, r3, sl
 8011e96:	f000 8459 	beq.w	801274c <__ieee754_pow+0x9d4>
 8011e9a:	4b4f      	ldr	r3, [pc, #316]	; (8011fd8 <__ieee754_pow+0x260>)
 8011e9c:	429c      	cmp	r4, r3
 8011e9e:	dd08      	ble.n	8011eb2 <__ieee754_pow+0x13a>
 8011ea0:	f1b9 0f00 	cmp.w	r9, #0
 8011ea4:	f2c0 8456 	blt.w	8012754 <__ieee754_pow+0x9dc>
 8011ea8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011eac:	e783      	b.n	8011db6 <__ieee754_pow+0x3e>
 8011eae:	2302      	movs	r3, #2
 8011eb0:	e7e5      	b.n	8011e7e <__ieee754_pow+0x106>
 8011eb2:	f1b9 0f00 	cmp.w	r9, #0
 8011eb6:	f04f 0000 	mov.w	r0, #0
 8011eba:	f04f 0100 	mov.w	r1, #0
 8011ebe:	f6bf af7a 	bge.w	8011db6 <__ieee754_pow+0x3e>
 8011ec2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8011ec6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011eca:	e774      	b.n	8011db6 <__ieee754_pow+0x3e>
 8011ecc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011ed0:	d106      	bne.n	8011ee0 <__ieee754_pow+0x168>
 8011ed2:	4632      	mov	r2, r6
 8011ed4:	463b      	mov	r3, r7
 8011ed6:	4630      	mov	r0, r6
 8011ed8:	4639      	mov	r1, r7
 8011eda:	f7ee fb9d 	bl	8000618 <__aeabi_dmul>
 8011ede:	e76a      	b.n	8011db6 <__ieee754_pow+0x3e>
 8011ee0:	4b3e      	ldr	r3, [pc, #248]	; (8011fdc <__ieee754_pow+0x264>)
 8011ee2:	4599      	cmp	r9, r3
 8011ee4:	d10c      	bne.n	8011f00 <__ieee754_pow+0x188>
 8011ee6:	2d00      	cmp	r5, #0
 8011ee8:	db0a      	blt.n	8011f00 <__ieee754_pow+0x188>
 8011eea:	ec47 6b10 	vmov	d0, r6, r7
 8011eee:	b009      	add	sp, #36	; 0x24
 8011ef0:	ecbd 8b06 	vpop	{d8-d10}
 8011ef4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ef8:	f7ff bb06 	b.w	8011508 <__ieee754_sqrt>
 8011efc:	2300      	movs	r3, #0
 8011efe:	9304      	str	r3, [sp, #16]
 8011f00:	ec47 6b10 	vmov	d0, r6, r7
 8011f04:	f001 f80c 	bl	8012f20 <fabs>
 8011f08:	ec51 0b10 	vmov	r0, r1, d0
 8011f0c:	f1ba 0f00 	cmp.w	sl, #0
 8011f10:	d129      	bne.n	8011f66 <__ieee754_pow+0x1ee>
 8011f12:	b124      	cbz	r4, 8011f1e <__ieee754_pow+0x1a6>
 8011f14:	4b2f      	ldr	r3, [pc, #188]	; (8011fd4 <__ieee754_pow+0x25c>)
 8011f16:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8011f1a:	429a      	cmp	r2, r3
 8011f1c:	d123      	bne.n	8011f66 <__ieee754_pow+0x1ee>
 8011f1e:	f1b9 0f00 	cmp.w	r9, #0
 8011f22:	da05      	bge.n	8011f30 <__ieee754_pow+0x1b8>
 8011f24:	4602      	mov	r2, r0
 8011f26:	460b      	mov	r3, r1
 8011f28:	2000      	movs	r0, #0
 8011f2a:	492a      	ldr	r1, [pc, #168]	; (8011fd4 <__ieee754_pow+0x25c>)
 8011f2c:	f7ee fc9e 	bl	800086c <__aeabi_ddiv>
 8011f30:	2d00      	cmp	r5, #0
 8011f32:	f6bf af40 	bge.w	8011db6 <__ieee754_pow+0x3e>
 8011f36:	9b04      	ldr	r3, [sp, #16]
 8011f38:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011f3c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011f40:	431c      	orrs	r4, r3
 8011f42:	d108      	bne.n	8011f56 <__ieee754_pow+0x1de>
 8011f44:	4602      	mov	r2, r0
 8011f46:	460b      	mov	r3, r1
 8011f48:	4610      	mov	r0, r2
 8011f4a:	4619      	mov	r1, r3
 8011f4c:	f7ee f9ac 	bl	80002a8 <__aeabi_dsub>
 8011f50:	4602      	mov	r2, r0
 8011f52:	460b      	mov	r3, r1
 8011f54:	e78f      	b.n	8011e76 <__ieee754_pow+0xfe>
 8011f56:	9b04      	ldr	r3, [sp, #16]
 8011f58:	2b01      	cmp	r3, #1
 8011f5a:	f47f af2c 	bne.w	8011db6 <__ieee754_pow+0x3e>
 8011f5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011f62:	4619      	mov	r1, r3
 8011f64:	e727      	b.n	8011db6 <__ieee754_pow+0x3e>
 8011f66:	0feb      	lsrs	r3, r5, #31
 8011f68:	3b01      	subs	r3, #1
 8011f6a:	9306      	str	r3, [sp, #24]
 8011f6c:	9a06      	ldr	r2, [sp, #24]
 8011f6e:	9b04      	ldr	r3, [sp, #16]
 8011f70:	4313      	orrs	r3, r2
 8011f72:	d102      	bne.n	8011f7a <__ieee754_pow+0x202>
 8011f74:	4632      	mov	r2, r6
 8011f76:	463b      	mov	r3, r7
 8011f78:	e7e6      	b.n	8011f48 <__ieee754_pow+0x1d0>
 8011f7a:	4b19      	ldr	r3, [pc, #100]	; (8011fe0 <__ieee754_pow+0x268>)
 8011f7c:	4598      	cmp	r8, r3
 8011f7e:	f340 80fb 	ble.w	8012178 <__ieee754_pow+0x400>
 8011f82:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011f86:	4598      	cmp	r8, r3
 8011f88:	4b13      	ldr	r3, [pc, #76]	; (8011fd8 <__ieee754_pow+0x260>)
 8011f8a:	dd0c      	ble.n	8011fa6 <__ieee754_pow+0x22e>
 8011f8c:	429c      	cmp	r4, r3
 8011f8e:	dc0f      	bgt.n	8011fb0 <__ieee754_pow+0x238>
 8011f90:	f1b9 0f00 	cmp.w	r9, #0
 8011f94:	da0f      	bge.n	8011fb6 <__ieee754_pow+0x23e>
 8011f96:	2000      	movs	r0, #0
 8011f98:	b009      	add	sp, #36	; 0x24
 8011f9a:	ecbd 8b06 	vpop	{d8-d10}
 8011f9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fa2:	f001 b86e 	b.w	8013082 <__math_oflow>
 8011fa6:	429c      	cmp	r4, r3
 8011fa8:	dbf2      	blt.n	8011f90 <__ieee754_pow+0x218>
 8011faa:	4b0a      	ldr	r3, [pc, #40]	; (8011fd4 <__ieee754_pow+0x25c>)
 8011fac:	429c      	cmp	r4, r3
 8011fae:	dd19      	ble.n	8011fe4 <__ieee754_pow+0x26c>
 8011fb0:	f1b9 0f00 	cmp.w	r9, #0
 8011fb4:	dcef      	bgt.n	8011f96 <__ieee754_pow+0x21e>
 8011fb6:	2000      	movs	r0, #0
 8011fb8:	b009      	add	sp, #36	; 0x24
 8011fba:	ecbd 8b06 	vpop	{d8-d10}
 8011fbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fc2:	f001 b855 	b.w	8013070 <__math_uflow>
 8011fc6:	bf00      	nop
 8011fc8:	fff00000 	.word	0xfff00000
 8011fcc:	7ff00000 	.word	0x7ff00000
 8011fd0:	433fffff 	.word	0x433fffff
 8011fd4:	3ff00000 	.word	0x3ff00000
 8011fd8:	3fefffff 	.word	0x3fefffff
 8011fdc:	3fe00000 	.word	0x3fe00000
 8011fe0:	41e00000 	.word	0x41e00000
 8011fe4:	4b60      	ldr	r3, [pc, #384]	; (8012168 <__ieee754_pow+0x3f0>)
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	f7ee f95e 	bl	80002a8 <__aeabi_dsub>
 8011fec:	a354      	add	r3, pc, #336	; (adr r3, 8012140 <__ieee754_pow+0x3c8>)
 8011fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff2:	4604      	mov	r4, r0
 8011ff4:	460d      	mov	r5, r1
 8011ff6:	f7ee fb0f 	bl	8000618 <__aeabi_dmul>
 8011ffa:	a353      	add	r3, pc, #332	; (adr r3, 8012148 <__ieee754_pow+0x3d0>)
 8011ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012000:	4606      	mov	r6, r0
 8012002:	460f      	mov	r7, r1
 8012004:	4620      	mov	r0, r4
 8012006:	4629      	mov	r1, r5
 8012008:	f7ee fb06 	bl	8000618 <__aeabi_dmul>
 801200c:	4b57      	ldr	r3, [pc, #348]	; (801216c <__ieee754_pow+0x3f4>)
 801200e:	4682      	mov	sl, r0
 8012010:	468b      	mov	fp, r1
 8012012:	2200      	movs	r2, #0
 8012014:	4620      	mov	r0, r4
 8012016:	4629      	mov	r1, r5
 8012018:	f7ee fafe 	bl	8000618 <__aeabi_dmul>
 801201c:	4602      	mov	r2, r0
 801201e:	460b      	mov	r3, r1
 8012020:	a14b      	add	r1, pc, #300	; (adr r1, 8012150 <__ieee754_pow+0x3d8>)
 8012022:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012026:	f7ee f93f 	bl	80002a8 <__aeabi_dsub>
 801202a:	4622      	mov	r2, r4
 801202c:	462b      	mov	r3, r5
 801202e:	f7ee faf3 	bl	8000618 <__aeabi_dmul>
 8012032:	4602      	mov	r2, r0
 8012034:	460b      	mov	r3, r1
 8012036:	2000      	movs	r0, #0
 8012038:	494d      	ldr	r1, [pc, #308]	; (8012170 <__ieee754_pow+0x3f8>)
 801203a:	f7ee f935 	bl	80002a8 <__aeabi_dsub>
 801203e:	4622      	mov	r2, r4
 8012040:	4680      	mov	r8, r0
 8012042:	4689      	mov	r9, r1
 8012044:	462b      	mov	r3, r5
 8012046:	4620      	mov	r0, r4
 8012048:	4629      	mov	r1, r5
 801204a:	f7ee fae5 	bl	8000618 <__aeabi_dmul>
 801204e:	4602      	mov	r2, r0
 8012050:	460b      	mov	r3, r1
 8012052:	4640      	mov	r0, r8
 8012054:	4649      	mov	r1, r9
 8012056:	f7ee fadf 	bl	8000618 <__aeabi_dmul>
 801205a:	a33f      	add	r3, pc, #252	; (adr r3, 8012158 <__ieee754_pow+0x3e0>)
 801205c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012060:	f7ee fada 	bl	8000618 <__aeabi_dmul>
 8012064:	4602      	mov	r2, r0
 8012066:	460b      	mov	r3, r1
 8012068:	4650      	mov	r0, sl
 801206a:	4659      	mov	r1, fp
 801206c:	f7ee f91c 	bl	80002a8 <__aeabi_dsub>
 8012070:	4602      	mov	r2, r0
 8012072:	460b      	mov	r3, r1
 8012074:	4680      	mov	r8, r0
 8012076:	4689      	mov	r9, r1
 8012078:	4630      	mov	r0, r6
 801207a:	4639      	mov	r1, r7
 801207c:	f7ee f916 	bl	80002ac <__adddf3>
 8012080:	2000      	movs	r0, #0
 8012082:	4632      	mov	r2, r6
 8012084:	463b      	mov	r3, r7
 8012086:	4604      	mov	r4, r0
 8012088:	460d      	mov	r5, r1
 801208a:	f7ee f90d 	bl	80002a8 <__aeabi_dsub>
 801208e:	4602      	mov	r2, r0
 8012090:	460b      	mov	r3, r1
 8012092:	4640      	mov	r0, r8
 8012094:	4649      	mov	r1, r9
 8012096:	f7ee f907 	bl	80002a8 <__aeabi_dsub>
 801209a:	9b04      	ldr	r3, [sp, #16]
 801209c:	9a06      	ldr	r2, [sp, #24]
 801209e:	3b01      	subs	r3, #1
 80120a0:	4313      	orrs	r3, r2
 80120a2:	4682      	mov	sl, r0
 80120a4:	468b      	mov	fp, r1
 80120a6:	f040 81e7 	bne.w	8012478 <__ieee754_pow+0x700>
 80120aa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8012160 <__ieee754_pow+0x3e8>
 80120ae:	eeb0 8a47 	vmov.f32	s16, s14
 80120b2:	eef0 8a67 	vmov.f32	s17, s15
 80120b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80120ba:	2600      	movs	r6, #0
 80120bc:	4632      	mov	r2, r6
 80120be:	463b      	mov	r3, r7
 80120c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80120c4:	f7ee f8f0 	bl	80002a8 <__aeabi_dsub>
 80120c8:	4622      	mov	r2, r4
 80120ca:	462b      	mov	r3, r5
 80120cc:	f7ee faa4 	bl	8000618 <__aeabi_dmul>
 80120d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80120d4:	4680      	mov	r8, r0
 80120d6:	4689      	mov	r9, r1
 80120d8:	4650      	mov	r0, sl
 80120da:	4659      	mov	r1, fp
 80120dc:	f7ee fa9c 	bl	8000618 <__aeabi_dmul>
 80120e0:	4602      	mov	r2, r0
 80120e2:	460b      	mov	r3, r1
 80120e4:	4640      	mov	r0, r8
 80120e6:	4649      	mov	r1, r9
 80120e8:	f7ee f8e0 	bl	80002ac <__adddf3>
 80120ec:	4632      	mov	r2, r6
 80120ee:	463b      	mov	r3, r7
 80120f0:	4680      	mov	r8, r0
 80120f2:	4689      	mov	r9, r1
 80120f4:	4620      	mov	r0, r4
 80120f6:	4629      	mov	r1, r5
 80120f8:	f7ee fa8e 	bl	8000618 <__aeabi_dmul>
 80120fc:	460b      	mov	r3, r1
 80120fe:	4604      	mov	r4, r0
 8012100:	460d      	mov	r5, r1
 8012102:	4602      	mov	r2, r0
 8012104:	4649      	mov	r1, r9
 8012106:	4640      	mov	r0, r8
 8012108:	f7ee f8d0 	bl	80002ac <__adddf3>
 801210c:	4b19      	ldr	r3, [pc, #100]	; (8012174 <__ieee754_pow+0x3fc>)
 801210e:	4299      	cmp	r1, r3
 8012110:	ec45 4b19 	vmov	d9, r4, r5
 8012114:	4606      	mov	r6, r0
 8012116:	460f      	mov	r7, r1
 8012118:	468b      	mov	fp, r1
 801211a:	f340 82f0 	ble.w	80126fe <__ieee754_pow+0x986>
 801211e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012122:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012126:	4303      	orrs	r3, r0
 8012128:	f000 81e4 	beq.w	80124f4 <__ieee754_pow+0x77c>
 801212c:	ec51 0b18 	vmov	r0, r1, d8
 8012130:	2200      	movs	r2, #0
 8012132:	2300      	movs	r3, #0
 8012134:	f7ee fce2 	bl	8000afc <__aeabi_dcmplt>
 8012138:	3800      	subs	r0, #0
 801213a:	bf18      	it	ne
 801213c:	2001      	movne	r0, #1
 801213e:	e72b      	b.n	8011f98 <__ieee754_pow+0x220>
 8012140:	60000000 	.word	0x60000000
 8012144:	3ff71547 	.word	0x3ff71547
 8012148:	f85ddf44 	.word	0xf85ddf44
 801214c:	3e54ae0b 	.word	0x3e54ae0b
 8012150:	55555555 	.word	0x55555555
 8012154:	3fd55555 	.word	0x3fd55555
 8012158:	652b82fe 	.word	0x652b82fe
 801215c:	3ff71547 	.word	0x3ff71547
 8012160:	00000000 	.word	0x00000000
 8012164:	bff00000 	.word	0xbff00000
 8012168:	3ff00000 	.word	0x3ff00000
 801216c:	3fd00000 	.word	0x3fd00000
 8012170:	3fe00000 	.word	0x3fe00000
 8012174:	408fffff 	.word	0x408fffff
 8012178:	4bd5      	ldr	r3, [pc, #852]	; (80124d0 <__ieee754_pow+0x758>)
 801217a:	402b      	ands	r3, r5
 801217c:	2200      	movs	r2, #0
 801217e:	b92b      	cbnz	r3, 801218c <__ieee754_pow+0x414>
 8012180:	4bd4      	ldr	r3, [pc, #848]	; (80124d4 <__ieee754_pow+0x75c>)
 8012182:	f7ee fa49 	bl	8000618 <__aeabi_dmul>
 8012186:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801218a:	460c      	mov	r4, r1
 801218c:	1523      	asrs	r3, r4, #20
 801218e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012192:	4413      	add	r3, r2
 8012194:	9305      	str	r3, [sp, #20]
 8012196:	4bd0      	ldr	r3, [pc, #832]	; (80124d8 <__ieee754_pow+0x760>)
 8012198:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801219c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80121a0:	429c      	cmp	r4, r3
 80121a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80121a6:	dd08      	ble.n	80121ba <__ieee754_pow+0x442>
 80121a8:	4bcc      	ldr	r3, [pc, #816]	; (80124dc <__ieee754_pow+0x764>)
 80121aa:	429c      	cmp	r4, r3
 80121ac:	f340 8162 	ble.w	8012474 <__ieee754_pow+0x6fc>
 80121b0:	9b05      	ldr	r3, [sp, #20]
 80121b2:	3301      	adds	r3, #1
 80121b4:	9305      	str	r3, [sp, #20]
 80121b6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80121ba:	2400      	movs	r4, #0
 80121bc:	00e3      	lsls	r3, r4, #3
 80121be:	9307      	str	r3, [sp, #28]
 80121c0:	4bc7      	ldr	r3, [pc, #796]	; (80124e0 <__ieee754_pow+0x768>)
 80121c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80121c6:	ed93 7b00 	vldr	d7, [r3]
 80121ca:	4629      	mov	r1, r5
 80121cc:	ec53 2b17 	vmov	r2, r3, d7
 80121d0:	eeb0 9a47 	vmov.f32	s18, s14
 80121d4:	eef0 9a67 	vmov.f32	s19, s15
 80121d8:	4682      	mov	sl, r0
 80121da:	f7ee f865 	bl	80002a8 <__aeabi_dsub>
 80121de:	4652      	mov	r2, sl
 80121e0:	4606      	mov	r6, r0
 80121e2:	460f      	mov	r7, r1
 80121e4:	462b      	mov	r3, r5
 80121e6:	ec51 0b19 	vmov	r0, r1, d9
 80121ea:	f7ee f85f 	bl	80002ac <__adddf3>
 80121ee:	4602      	mov	r2, r0
 80121f0:	460b      	mov	r3, r1
 80121f2:	2000      	movs	r0, #0
 80121f4:	49bb      	ldr	r1, [pc, #748]	; (80124e4 <__ieee754_pow+0x76c>)
 80121f6:	f7ee fb39 	bl	800086c <__aeabi_ddiv>
 80121fa:	ec41 0b1a 	vmov	d10, r0, r1
 80121fe:	4602      	mov	r2, r0
 8012200:	460b      	mov	r3, r1
 8012202:	4630      	mov	r0, r6
 8012204:	4639      	mov	r1, r7
 8012206:	f7ee fa07 	bl	8000618 <__aeabi_dmul>
 801220a:	2300      	movs	r3, #0
 801220c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012210:	9302      	str	r3, [sp, #8]
 8012212:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012216:	46ab      	mov	fp, r5
 8012218:	106d      	asrs	r5, r5, #1
 801221a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801221e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012222:	ec41 0b18 	vmov	d8, r0, r1
 8012226:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801222a:	2200      	movs	r2, #0
 801222c:	4640      	mov	r0, r8
 801222e:	4649      	mov	r1, r9
 8012230:	4614      	mov	r4, r2
 8012232:	461d      	mov	r5, r3
 8012234:	f7ee f9f0 	bl	8000618 <__aeabi_dmul>
 8012238:	4602      	mov	r2, r0
 801223a:	460b      	mov	r3, r1
 801223c:	4630      	mov	r0, r6
 801223e:	4639      	mov	r1, r7
 8012240:	f7ee f832 	bl	80002a8 <__aeabi_dsub>
 8012244:	ec53 2b19 	vmov	r2, r3, d9
 8012248:	4606      	mov	r6, r0
 801224a:	460f      	mov	r7, r1
 801224c:	4620      	mov	r0, r4
 801224e:	4629      	mov	r1, r5
 8012250:	f7ee f82a 	bl	80002a8 <__aeabi_dsub>
 8012254:	4602      	mov	r2, r0
 8012256:	460b      	mov	r3, r1
 8012258:	4650      	mov	r0, sl
 801225a:	4659      	mov	r1, fp
 801225c:	f7ee f824 	bl	80002a8 <__aeabi_dsub>
 8012260:	4642      	mov	r2, r8
 8012262:	464b      	mov	r3, r9
 8012264:	f7ee f9d8 	bl	8000618 <__aeabi_dmul>
 8012268:	4602      	mov	r2, r0
 801226a:	460b      	mov	r3, r1
 801226c:	4630      	mov	r0, r6
 801226e:	4639      	mov	r1, r7
 8012270:	f7ee f81a 	bl	80002a8 <__aeabi_dsub>
 8012274:	ec53 2b1a 	vmov	r2, r3, d10
 8012278:	f7ee f9ce 	bl	8000618 <__aeabi_dmul>
 801227c:	ec53 2b18 	vmov	r2, r3, d8
 8012280:	ec41 0b19 	vmov	d9, r0, r1
 8012284:	ec51 0b18 	vmov	r0, r1, d8
 8012288:	f7ee f9c6 	bl	8000618 <__aeabi_dmul>
 801228c:	a37c      	add	r3, pc, #496	; (adr r3, 8012480 <__ieee754_pow+0x708>)
 801228e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012292:	4604      	mov	r4, r0
 8012294:	460d      	mov	r5, r1
 8012296:	f7ee f9bf 	bl	8000618 <__aeabi_dmul>
 801229a:	a37b      	add	r3, pc, #492	; (adr r3, 8012488 <__ieee754_pow+0x710>)
 801229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a0:	f7ee f804 	bl	80002ac <__adddf3>
 80122a4:	4622      	mov	r2, r4
 80122a6:	462b      	mov	r3, r5
 80122a8:	f7ee f9b6 	bl	8000618 <__aeabi_dmul>
 80122ac:	a378      	add	r3, pc, #480	; (adr r3, 8012490 <__ieee754_pow+0x718>)
 80122ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122b2:	f7ed fffb 	bl	80002ac <__adddf3>
 80122b6:	4622      	mov	r2, r4
 80122b8:	462b      	mov	r3, r5
 80122ba:	f7ee f9ad 	bl	8000618 <__aeabi_dmul>
 80122be:	a376      	add	r3, pc, #472	; (adr r3, 8012498 <__ieee754_pow+0x720>)
 80122c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c4:	f7ed fff2 	bl	80002ac <__adddf3>
 80122c8:	4622      	mov	r2, r4
 80122ca:	462b      	mov	r3, r5
 80122cc:	f7ee f9a4 	bl	8000618 <__aeabi_dmul>
 80122d0:	a373      	add	r3, pc, #460	; (adr r3, 80124a0 <__ieee754_pow+0x728>)
 80122d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d6:	f7ed ffe9 	bl	80002ac <__adddf3>
 80122da:	4622      	mov	r2, r4
 80122dc:	462b      	mov	r3, r5
 80122de:	f7ee f99b 	bl	8000618 <__aeabi_dmul>
 80122e2:	a371      	add	r3, pc, #452	; (adr r3, 80124a8 <__ieee754_pow+0x730>)
 80122e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122e8:	f7ed ffe0 	bl	80002ac <__adddf3>
 80122ec:	4622      	mov	r2, r4
 80122ee:	4606      	mov	r6, r0
 80122f0:	460f      	mov	r7, r1
 80122f2:	462b      	mov	r3, r5
 80122f4:	4620      	mov	r0, r4
 80122f6:	4629      	mov	r1, r5
 80122f8:	f7ee f98e 	bl	8000618 <__aeabi_dmul>
 80122fc:	4602      	mov	r2, r0
 80122fe:	460b      	mov	r3, r1
 8012300:	4630      	mov	r0, r6
 8012302:	4639      	mov	r1, r7
 8012304:	f7ee f988 	bl	8000618 <__aeabi_dmul>
 8012308:	4642      	mov	r2, r8
 801230a:	4604      	mov	r4, r0
 801230c:	460d      	mov	r5, r1
 801230e:	464b      	mov	r3, r9
 8012310:	ec51 0b18 	vmov	r0, r1, d8
 8012314:	f7ed ffca 	bl	80002ac <__adddf3>
 8012318:	ec53 2b19 	vmov	r2, r3, d9
 801231c:	f7ee f97c 	bl	8000618 <__aeabi_dmul>
 8012320:	4622      	mov	r2, r4
 8012322:	462b      	mov	r3, r5
 8012324:	f7ed ffc2 	bl	80002ac <__adddf3>
 8012328:	4642      	mov	r2, r8
 801232a:	4682      	mov	sl, r0
 801232c:	468b      	mov	fp, r1
 801232e:	464b      	mov	r3, r9
 8012330:	4640      	mov	r0, r8
 8012332:	4649      	mov	r1, r9
 8012334:	f7ee f970 	bl	8000618 <__aeabi_dmul>
 8012338:	4b6b      	ldr	r3, [pc, #428]	; (80124e8 <__ieee754_pow+0x770>)
 801233a:	2200      	movs	r2, #0
 801233c:	4606      	mov	r6, r0
 801233e:	460f      	mov	r7, r1
 8012340:	f7ed ffb4 	bl	80002ac <__adddf3>
 8012344:	4652      	mov	r2, sl
 8012346:	465b      	mov	r3, fp
 8012348:	f7ed ffb0 	bl	80002ac <__adddf3>
 801234c:	2000      	movs	r0, #0
 801234e:	4604      	mov	r4, r0
 8012350:	460d      	mov	r5, r1
 8012352:	4602      	mov	r2, r0
 8012354:	460b      	mov	r3, r1
 8012356:	4640      	mov	r0, r8
 8012358:	4649      	mov	r1, r9
 801235a:	f7ee f95d 	bl	8000618 <__aeabi_dmul>
 801235e:	4b62      	ldr	r3, [pc, #392]	; (80124e8 <__ieee754_pow+0x770>)
 8012360:	4680      	mov	r8, r0
 8012362:	4689      	mov	r9, r1
 8012364:	2200      	movs	r2, #0
 8012366:	4620      	mov	r0, r4
 8012368:	4629      	mov	r1, r5
 801236a:	f7ed ff9d 	bl	80002a8 <__aeabi_dsub>
 801236e:	4632      	mov	r2, r6
 8012370:	463b      	mov	r3, r7
 8012372:	f7ed ff99 	bl	80002a8 <__aeabi_dsub>
 8012376:	4602      	mov	r2, r0
 8012378:	460b      	mov	r3, r1
 801237a:	4650      	mov	r0, sl
 801237c:	4659      	mov	r1, fp
 801237e:	f7ed ff93 	bl	80002a8 <__aeabi_dsub>
 8012382:	ec53 2b18 	vmov	r2, r3, d8
 8012386:	f7ee f947 	bl	8000618 <__aeabi_dmul>
 801238a:	4622      	mov	r2, r4
 801238c:	4606      	mov	r6, r0
 801238e:	460f      	mov	r7, r1
 8012390:	462b      	mov	r3, r5
 8012392:	ec51 0b19 	vmov	r0, r1, d9
 8012396:	f7ee f93f 	bl	8000618 <__aeabi_dmul>
 801239a:	4602      	mov	r2, r0
 801239c:	460b      	mov	r3, r1
 801239e:	4630      	mov	r0, r6
 80123a0:	4639      	mov	r1, r7
 80123a2:	f7ed ff83 	bl	80002ac <__adddf3>
 80123a6:	4606      	mov	r6, r0
 80123a8:	460f      	mov	r7, r1
 80123aa:	4602      	mov	r2, r0
 80123ac:	460b      	mov	r3, r1
 80123ae:	4640      	mov	r0, r8
 80123b0:	4649      	mov	r1, r9
 80123b2:	f7ed ff7b 	bl	80002ac <__adddf3>
 80123b6:	a33e      	add	r3, pc, #248	; (adr r3, 80124b0 <__ieee754_pow+0x738>)
 80123b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123bc:	2000      	movs	r0, #0
 80123be:	4604      	mov	r4, r0
 80123c0:	460d      	mov	r5, r1
 80123c2:	f7ee f929 	bl	8000618 <__aeabi_dmul>
 80123c6:	4642      	mov	r2, r8
 80123c8:	ec41 0b18 	vmov	d8, r0, r1
 80123cc:	464b      	mov	r3, r9
 80123ce:	4620      	mov	r0, r4
 80123d0:	4629      	mov	r1, r5
 80123d2:	f7ed ff69 	bl	80002a8 <__aeabi_dsub>
 80123d6:	4602      	mov	r2, r0
 80123d8:	460b      	mov	r3, r1
 80123da:	4630      	mov	r0, r6
 80123dc:	4639      	mov	r1, r7
 80123de:	f7ed ff63 	bl	80002a8 <__aeabi_dsub>
 80123e2:	a335      	add	r3, pc, #212	; (adr r3, 80124b8 <__ieee754_pow+0x740>)
 80123e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123e8:	f7ee f916 	bl	8000618 <__aeabi_dmul>
 80123ec:	a334      	add	r3, pc, #208	; (adr r3, 80124c0 <__ieee754_pow+0x748>)
 80123ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123f2:	4606      	mov	r6, r0
 80123f4:	460f      	mov	r7, r1
 80123f6:	4620      	mov	r0, r4
 80123f8:	4629      	mov	r1, r5
 80123fa:	f7ee f90d 	bl	8000618 <__aeabi_dmul>
 80123fe:	4602      	mov	r2, r0
 8012400:	460b      	mov	r3, r1
 8012402:	4630      	mov	r0, r6
 8012404:	4639      	mov	r1, r7
 8012406:	f7ed ff51 	bl	80002ac <__adddf3>
 801240a:	9a07      	ldr	r2, [sp, #28]
 801240c:	4b37      	ldr	r3, [pc, #220]	; (80124ec <__ieee754_pow+0x774>)
 801240e:	4413      	add	r3, r2
 8012410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012414:	f7ed ff4a 	bl	80002ac <__adddf3>
 8012418:	4682      	mov	sl, r0
 801241a:	9805      	ldr	r0, [sp, #20]
 801241c:	468b      	mov	fp, r1
 801241e:	f7ee f891 	bl	8000544 <__aeabi_i2d>
 8012422:	9a07      	ldr	r2, [sp, #28]
 8012424:	4b32      	ldr	r3, [pc, #200]	; (80124f0 <__ieee754_pow+0x778>)
 8012426:	4413      	add	r3, r2
 8012428:	e9d3 8900 	ldrd	r8, r9, [r3]
 801242c:	4606      	mov	r6, r0
 801242e:	460f      	mov	r7, r1
 8012430:	4652      	mov	r2, sl
 8012432:	465b      	mov	r3, fp
 8012434:	ec51 0b18 	vmov	r0, r1, d8
 8012438:	f7ed ff38 	bl	80002ac <__adddf3>
 801243c:	4642      	mov	r2, r8
 801243e:	464b      	mov	r3, r9
 8012440:	f7ed ff34 	bl	80002ac <__adddf3>
 8012444:	4632      	mov	r2, r6
 8012446:	463b      	mov	r3, r7
 8012448:	f7ed ff30 	bl	80002ac <__adddf3>
 801244c:	2000      	movs	r0, #0
 801244e:	4632      	mov	r2, r6
 8012450:	463b      	mov	r3, r7
 8012452:	4604      	mov	r4, r0
 8012454:	460d      	mov	r5, r1
 8012456:	f7ed ff27 	bl	80002a8 <__aeabi_dsub>
 801245a:	4642      	mov	r2, r8
 801245c:	464b      	mov	r3, r9
 801245e:	f7ed ff23 	bl	80002a8 <__aeabi_dsub>
 8012462:	ec53 2b18 	vmov	r2, r3, d8
 8012466:	f7ed ff1f 	bl	80002a8 <__aeabi_dsub>
 801246a:	4602      	mov	r2, r0
 801246c:	460b      	mov	r3, r1
 801246e:	4650      	mov	r0, sl
 8012470:	4659      	mov	r1, fp
 8012472:	e610      	b.n	8012096 <__ieee754_pow+0x31e>
 8012474:	2401      	movs	r4, #1
 8012476:	e6a1      	b.n	80121bc <__ieee754_pow+0x444>
 8012478:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80124c8 <__ieee754_pow+0x750>
 801247c:	e617      	b.n	80120ae <__ieee754_pow+0x336>
 801247e:	bf00      	nop
 8012480:	4a454eef 	.word	0x4a454eef
 8012484:	3fca7e28 	.word	0x3fca7e28
 8012488:	93c9db65 	.word	0x93c9db65
 801248c:	3fcd864a 	.word	0x3fcd864a
 8012490:	a91d4101 	.word	0xa91d4101
 8012494:	3fd17460 	.word	0x3fd17460
 8012498:	518f264d 	.word	0x518f264d
 801249c:	3fd55555 	.word	0x3fd55555
 80124a0:	db6fabff 	.word	0xdb6fabff
 80124a4:	3fdb6db6 	.word	0x3fdb6db6
 80124a8:	33333303 	.word	0x33333303
 80124ac:	3fe33333 	.word	0x3fe33333
 80124b0:	e0000000 	.word	0xe0000000
 80124b4:	3feec709 	.word	0x3feec709
 80124b8:	dc3a03fd 	.word	0xdc3a03fd
 80124bc:	3feec709 	.word	0x3feec709
 80124c0:	145b01f5 	.word	0x145b01f5
 80124c4:	be3e2fe0 	.word	0xbe3e2fe0
 80124c8:	00000000 	.word	0x00000000
 80124cc:	3ff00000 	.word	0x3ff00000
 80124d0:	7ff00000 	.word	0x7ff00000
 80124d4:	43400000 	.word	0x43400000
 80124d8:	0003988e 	.word	0x0003988e
 80124dc:	000bb679 	.word	0x000bb679
 80124e0:	08013d48 	.word	0x08013d48
 80124e4:	3ff00000 	.word	0x3ff00000
 80124e8:	40080000 	.word	0x40080000
 80124ec:	08013d68 	.word	0x08013d68
 80124f0:	08013d58 	.word	0x08013d58
 80124f4:	a3b3      	add	r3, pc, #716	; (adr r3, 80127c4 <__ieee754_pow+0xa4c>)
 80124f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124fa:	4640      	mov	r0, r8
 80124fc:	4649      	mov	r1, r9
 80124fe:	f7ed fed5 	bl	80002ac <__adddf3>
 8012502:	4622      	mov	r2, r4
 8012504:	ec41 0b1a 	vmov	d10, r0, r1
 8012508:	462b      	mov	r3, r5
 801250a:	4630      	mov	r0, r6
 801250c:	4639      	mov	r1, r7
 801250e:	f7ed fecb 	bl	80002a8 <__aeabi_dsub>
 8012512:	4602      	mov	r2, r0
 8012514:	460b      	mov	r3, r1
 8012516:	ec51 0b1a 	vmov	r0, r1, d10
 801251a:	f7ee fb0d 	bl	8000b38 <__aeabi_dcmpgt>
 801251e:	2800      	cmp	r0, #0
 8012520:	f47f ae04 	bne.w	801212c <__ieee754_pow+0x3b4>
 8012524:	4aa2      	ldr	r2, [pc, #648]	; (80127b0 <__ieee754_pow+0xa38>)
 8012526:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801252a:	4293      	cmp	r3, r2
 801252c:	f340 8107 	ble.w	801273e <__ieee754_pow+0x9c6>
 8012530:	151b      	asrs	r3, r3, #20
 8012532:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8012536:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801253a:	fa4a fa03 	asr.w	sl, sl, r3
 801253e:	44da      	add	sl, fp
 8012540:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8012544:	489b      	ldr	r0, [pc, #620]	; (80127b4 <__ieee754_pow+0xa3c>)
 8012546:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801254a:	4108      	asrs	r0, r1
 801254c:	ea00 030a 	and.w	r3, r0, sl
 8012550:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8012554:	f1c1 0114 	rsb	r1, r1, #20
 8012558:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801255c:	fa4a fa01 	asr.w	sl, sl, r1
 8012560:	f1bb 0f00 	cmp.w	fp, #0
 8012564:	f04f 0200 	mov.w	r2, #0
 8012568:	4620      	mov	r0, r4
 801256a:	4629      	mov	r1, r5
 801256c:	bfb8      	it	lt
 801256e:	f1ca 0a00 	rsblt	sl, sl, #0
 8012572:	f7ed fe99 	bl	80002a8 <__aeabi_dsub>
 8012576:	ec41 0b19 	vmov	d9, r0, r1
 801257a:	4642      	mov	r2, r8
 801257c:	464b      	mov	r3, r9
 801257e:	ec51 0b19 	vmov	r0, r1, d9
 8012582:	f7ed fe93 	bl	80002ac <__adddf3>
 8012586:	a37a      	add	r3, pc, #488	; (adr r3, 8012770 <__ieee754_pow+0x9f8>)
 8012588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801258c:	2000      	movs	r0, #0
 801258e:	4604      	mov	r4, r0
 8012590:	460d      	mov	r5, r1
 8012592:	f7ee f841 	bl	8000618 <__aeabi_dmul>
 8012596:	ec53 2b19 	vmov	r2, r3, d9
 801259a:	4606      	mov	r6, r0
 801259c:	460f      	mov	r7, r1
 801259e:	4620      	mov	r0, r4
 80125a0:	4629      	mov	r1, r5
 80125a2:	f7ed fe81 	bl	80002a8 <__aeabi_dsub>
 80125a6:	4602      	mov	r2, r0
 80125a8:	460b      	mov	r3, r1
 80125aa:	4640      	mov	r0, r8
 80125ac:	4649      	mov	r1, r9
 80125ae:	f7ed fe7b 	bl	80002a8 <__aeabi_dsub>
 80125b2:	a371      	add	r3, pc, #452	; (adr r3, 8012778 <__ieee754_pow+0xa00>)
 80125b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125b8:	f7ee f82e 	bl	8000618 <__aeabi_dmul>
 80125bc:	a370      	add	r3, pc, #448	; (adr r3, 8012780 <__ieee754_pow+0xa08>)
 80125be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c2:	4680      	mov	r8, r0
 80125c4:	4689      	mov	r9, r1
 80125c6:	4620      	mov	r0, r4
 80125c8:	4629      	mov	r1, r5
 80125ca:	f7ee f825 	bl	8000618 <__aeabi_dmul>
 80125ce:	4602      	mov	r2, r0
 80125d0:	460b      	mov	r3, r1
 80125d2:	4640      	mov	r0, r8
 80125d4:	4649      	mov	r1, r9
 80125d6:	f7ed fe69 	bl	80002ac <__adddf3>
 80125da:	4604      	mov	r4, r0
 80125dc:	460d      	mov	r5, r1
 80125de:	4602      	mov	r2, r0
 80125e0:	460b      	mov	r3, r1
 80125e2:	4630      	mov	r0, r6
 80125e4:	4639      	mov	r1, r7
 80125e6:	f7ed fe61 	bl	80002ac <__adddf3>
 80125ea:	4632      	mov	r2, r6
 80125ec:	463b      	mov	r3, r7
 80125ee:	4680      	mov	r8, r0
 80125f0:	4689      	mov	r9, r1
 80125f2:	f7ed fe59 	bl	80002a8 <__aeabi_dsub>
 80125f6:	4602      	mov	r2, r0
 80125f8:	460b      	mov	r3, r1
 80125fa:	4620      	mov	r0, r4
 80125fc:	4629      	mov	r1, r5
 80125fe:	f7ed fe53 	bl	80002a8 <__aeabi_dsub>
 8012602:	4642      	mov	r2, r8
 8012604:	4606      	mov	r6, r0
 8012606:	460f      	mov	r7, r1
 8012608:	464b      	mov	r3, r9
 801260a:	4640      	mov	r0, r8
 801260c:	4649      	mov	r1, r9
 801260e:	f7ee f803 	bl	8000618 <__aeabi_dmul>
 8012612:	a35d      	add	r3, pc, #372	; (adr r3, 8012788 <__ieee754_pow+0xa10>)
 8012614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012618:	4604      	mov	r4, r0
 801261a:	460d      	mov	r5, r1
 801261c:	f7ed fffc 	bl	8000618 <__aeabi_dmul>
 8012620:	a35b      	add	r3, pc, #364	; (adr r3, 8012790 <__ieee754_pow+0xa18>)
 8012622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012626:	f7ed fe3f 	bl	80002a8 <__aeabi_dsub>
 801262a:	4622      	mov	r2, r4
 801262c:	462b      	mov	r3, r5
 801262e:	f7ed fff3 	bl	8000618 <__aeabi_dmul>
 8012632:	a359      	add	r3, pc, #356	; (adr r3, 8012798 <__ieee754_pow+0xa20>)
 8012634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012638:	f7ed fe38 	bl	80002ac <__adddf3>
 801263c:	4622      	mov	r2, r4
 801263e:	462b      	mov	r3, r5
 8012640:	f7ed ffea 	bl	8000618 <__aeabi_dmul>
 8012644:	a356      	add	r3, pc, #344	; (adr r3, 80127a0 <__ieee754_pow+0xa28>)
 8012646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801264a:	f7ed fe2d 	bl	80002a8 <__aeabi_dsub>
 801264e:	4622      	mov	r2, r4
 8012650:	462b      	mov	r3, r5
 8012652:	f7ed ffe1 	bl	8000618 <__aeabi_dmul>
 8012656:	a354      	add	r3, pc, #336	; (adr r3, 80127a8 <__ieee754_pow+0xa30>)
 8012658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801265c:	f7ed fe26 	bl	80002ac <__adddf3>
 8012660:	4622      	mov	r2, r4
 8012662:	462b      	mov	r3, r5
 8012664:	f7ed ffd8 	bl	8000618 <__aeabi_dmul>
 8012668:	4602      	mov	r2, r0
 801266a:	460b      	mov	r3, r1
 801266c:	4640      	mov	r0, r8
 801266e:	4649      	mov	r1, r9
 8012670:	f7ed fe1a 	bl	80002a8 <__aeabi_dsub>
 8012674:	4604      	mov	r4, r0
 8012676:	460d      	mov	r5, r1
 8012678:	4602      	mov	r2, r0
 801267a:	460b      	mov	r3, r1
 801267c:	4640      	mov	r0, r8
 801267e:	4649      	mov	r1, r9
 8012680:	f7ed ffca 	bl	8000618 <__aeabi_dmul>
 8012684:	2200      	movs	r2, #0
 8012686:	ec41 0b19 	vmov	d9, r0, r1
 801268a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801268e:	4620      	mov	r0, r4
 8012690:	4629      	mov	r1, r5
 8012692:	f7ed fe09 	bl	80002a8 <__aeabi_dsub>
 8012696:	4602      	mov	r2, r0
 8012698:	460b      	mov	r3, r1
 801269a:	ec51 0b19 	vmov	r0, r1, d9
 801269e:	f7ee f8e5 	bl	800086c <__aeabi_ddiv>
 80126a2:	4632      	mov	r2, r6
 80126a4:	4604      	mov	r4, r0
 80126a6:	460d      	mov	r5, r1
 80126a8:	463b      	mov	r3, r7
 80126aa:	4640      	mov	r0, r8
 80126ac:	4649      	mov	r1, r9
 80126ae:	f7ed ffb3 	bl	8000618 <__aeabi_dmul>
 80126b2:	4632      	mov	r2, r6
 80126b4:	463b      	mov	r3, r7
 80126b6:	f7ed fdf9 	bl	80002ac <__adddf3>
 80126ba:	4602      	mov	r2, r0
 80126bc:	460b      	mov	r3, r1
 80126be:	4620      	mov	r0, r4
 80126c0:	4629      	mov	r1, r5
 80126c2:	f7ed fdf1 	bl	80002a8 <__aeabi_dsub>
 80126c6:	4642      	mov	r2, r8
 80126c8:	464b      	mov	r3, r9
 80126ca:	f7ed fded 	bl	80002a8 <__aeabi_dsub>
 80126ce:	460b      	mov	r3, r1
 80126d0:	4602      	mov	r2, r0
 80126d2:	4939      	ldr	r1, [pc, #228]	; (80127b8 <__ieee754_pow+0xa40>)
 80126d4:	2000      	movs	r0, #0
 80126d6:	f7ed fde7 	bl	80002a8 <__aeabi_dsub>
 80126da:	ec41 0b10 	vmov	d0, r0, r1
 80126de:	ee10 3a90 	vmov	r3, s1
 80126e2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80126e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80126ea:	da2b      	bge.n	8012744 <__ieee754_pow+0x9cc>
 80126ec:	4650      	mov	r0, sl
 80126ee:	f000 fc23 	bl	8012f38 <scalbn>
 80126f2:	ec51 0b10 	vmov	r0, r1, d0
 80126f6:	ec53 2b18 	vmov	r2, r3, d8
 80126fa:	f7ff bbee 	b.w	8011eda <__ieee754_pow+0x162>
 80126fe:	4b2f      	ldr	r3, [pc, #188]	; (80127bc <__ieee754_pow+0xa44>)
 8012700:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012704:	429e      	cmp	r6, r3
 8012706:	f77f af0d 	ble.w	8012524 <__ieee754_pow+0x7ac>
 801270a:	4b2d      	ldr	r3, [pc, #180]	; (80127c0 <__ieee754_pow+0xa48>)
 801270c:	440b      	add	r3, r1
 801270e:	4303      	orrs	r3, r0
 8012710:	d009      	beq.n	8012726 <__ieee754_pow+0x9ae>
 8012712:	ec51 0b18 	vmov	r0, r1, d8
 8012716:	2200      	movs	r2, #0
 8012718:	2300      	movs	r3, #0
 801271a:	f7ee f9ef 	bl	8000afc <__aeabi_dcmplt>
 801271e:	3800      	subs	r0, #0
 8012720:	bf18      	it	ne
 8012722:	2001      	movne	r0, #1
 8012724:	e448      	b.n	8011fb8 <__ieee754_pow+0x240>
 8012726:	4622      	mov	r2, r4
 8012728:	462b      	mov	r3, r5
 801272a:	f7ed fdbd 	bl	80002a8 <__aeabi_dsub>
 801272e:	4642      	mov	r2, r8
 8012730:	464b      	mov	r3, r9
 8012732:	f7ee f9f7 	bl	8000b24 <__aeabi_dcmpge>
 8012736:	2800      	cmp	r0, #0
 8012738:	f43f aef4 	beq.w	8012524 <__ieee754_pow+0x7ac>
 801273c:	e7e9      	b.n	8012712 <__ieee754_pow+0x99a>
 801273e:	f04f 0a00 	mov.w	sl, #0
 8012742:	e71a      	b.n	801257a <__ieee754_pow+0x802>
 8012744:	ec51 0b10 	vmov	r0, r1, d0
 8012748:	4619      	mov	r1, r3
 801274a:	e7d4      	b.n	80126f6 <__ieee754_pow+0x97e>
 801274c:	491a      	ldr	r1, [pc, #104]	; (80127b8 <__ieee754_pow+0xa40>)
 801274e:	2000      	movs	r0, #0
 8012750:	f7ff bb31 	b.w	8011db6 <__ieee754_pow+0x3e>
 8012754:	2000      	movs	r0, #0
 8012756:	2100      	movs	r1, #0
 8012758:	f7ff bb2d 	b.w	8011db6 <__ieee754_pow+0x3e>
 801275c:	4630      	mov	r0, r6
 801275e:	4639      	mov	r1, r7
 8012760:	f7ff bb29 	b.w	8011db6 <__ieee754_pow+0x3e>
 8012764:	9204      	str	r2, [sp, #16]
 8012766:	f7ff bb7b 	b.w	8011e60 <__ieee754_pow+0xe8>
 801276a:	2300      	movs	r3, #0
 801276c:	f7ff bb65 	b.w	8011e3a <__ieee754_pow+0xc2>
 8012770:	00000000 	.word	0x00000000
 8012774:	3fe62e43 	.word	0x3fe62e43
 8012778:	fefa39ef 	.word	0xfefa39ef
 801277c:	3fe62e42 	.word	0x3fe62e42
 8012780:	0ca86c39 	.word	0x0ca86c39
 8012784:	be205c61 	.word	0xbe205c61
 8012788:	72bea4d0 	.word	0x72bea4d0
 801278c:	3e663769 	.word	0x3e663769
 8012790:	c5d26bf1 	.word	0xc5d26bf1
 8012794:	3ebbbd41 	.word	0x3ebbbd41
 8012798:	af25de2c 	.word	0xaf25de2c
 801279c:	3f11566a 	.word	0x3f11566a
 80127a0:	16bebd93 	.word	0x16bebd93
 80127a4:	3f66c16c 	.word	0x3f66c16c
 80127a8:	5555553e 	.word	0x5555553e
 80127ac:	3fc55555 	.word	0x3fc55555
 80127b0:	3fe00000 	.word	0x3fe00000
 80127b4:	fff00000 	.word	0xfff00000
 80127b8:	3ff00000 	.word	0x3ff00000
 80127bc:	4090cbff 	.word	0x4090cbff
 80127c0:	3f6f3400 	.word	0x3f6f3400
 80127c4:	652b82fe 	.word	0x652b82fe
 80127c8:	3c971547 	.word	0x3c971547
 80127cc:	00000000 	.word	0x00000000

080127d0 <__ieee754_rem_pio2>:
 80127d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127d4:	ed2d 8b02 	vpush	{d8}
 80127d8:	ec55 4b10 	vmov	r4, r5, d0
 80127dc:	4bca      	ldr	r3, [pc, #808]	; (8012b08 <__ieee754_rem_pio2+0x338>)
 80127de:	b08b      	sub	sp, #44	; 0x2c
 80127e0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80127e4:	4598      	cmp	r8, r3
 80127e6:	4682      	mov	sl, r0
 80127e8:	9502      	str	r5, [sp, #8]
 80127ea:	dc08      	bgt.n	80127fe <__ieee754_rem_pio2+0x2e>
 80127ec:	2200      	movs	r2, #0
 80127ee:	2300      	movs	r3, #0
 80127f0:	ed80 0b00 	vstr	d0, [r0]
 80127f4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80127f8:	f04f 0b00 	mov.w	fp, #0
 80127fc:	e028      	b.n	8012850 <__ieee754_rem_pio2+0x80>
 80127fe:	4bc3      	ldr	r3, [pc, #780]	; (8012b0c <__ieee754_rem_pio2+0x33c>)
 8012800:	4598      	cmp	r8, r3
 8012802:	dc78      	bgt.n	80128f6 <__ieee754_rem_pio2+0x126>
 8012804:	9b02      	ldr	r3, [sp, #8]
 8012806:	4ec2      	ldr	r6, [pc, #776]	; (8012b10 <__ieee754_rem_pio2+0x340>)
 8012808:	2b00      	cmp	r3, #0
 801280a:	ee10 0a10 	vmov	r0, s0
 801280e:	a3b0      	add	r3, pc, #704	; (adr r3, 8012ad0 <__ieee754_rem_pio2+0x300>)
 8012810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012814:	4629      	mov	r1, r5
 8012816:	dd39      	ble.n	801288c <__ieee754_rem_pio2+0xbc>
 8012818:	f7ed fd46 	bl	80002a8 <__aeabi_dsub>
 801281c:	45b0      	cmp	r8, r6
 801281e:	4604      	mov	r4, r0
 8012820:	460d      	mov	r5, r1
 8012822:	d01b      	beq.n	801285c <__ieee754_rem_pio2+0x8c>
 8012824:	a3ac      	add	r3, pc, #688	; (adr r3, 8012ad8 <__ieee754_rem_pio2+0x308>)
 8012826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801282a:	f7ed fd3d 	bl	80002a8 <__aeabi_dsub>
 801282e:	4602      	mov	r2, r0
 8012830:	460b      	mov	r3, r1
 8012832:	e9ca 2300 	strd	r2, r3, [sl]
 8012836:	4620      	mov	r0, r4
 8012838:	4629      	mov	r1, r5
 801283a:	f7ed fd35 	bl	80002a8 <__aeabi_dsub>
 801283e:	a3a6      	add	r3, pc, #664	; (adr r3, 8012ad8 <__ieee754_rem_pio2+0x308>)
 8012840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012844:	f7ed fd30 	bl	80002a8 <__aeabi_dsub>
 8012848:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801284c:	f04f 0b01 	mov.w	fp, #1
 8012850:	4658      	mov	r0, fp
 8012852:	b00b      	add	sp, #44	; 0x2c
 8012854:	ecbd 8b02 	vpop	{d8}
 8012858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801285c:	a3a0      	add	r3, pc, #640	; (adr r3, 8012ae0 <__ieee754_rem_pio2+0x310>)
 801285e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012862:	f7ed fd21 	bl	80002a8 <__aeabi_dsub>
 8012866:	a3a0      	add	r3, pc, #640	; (adr r3, 8012ae8 <__ieee754_rem_pio2+0x318>)
 8012868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801286c:	4604      	mov	r4, r0
 801286e:	460d      	mov	r5, r1
 8012870:	f7ed fd1a 	bl	80002a8 <__aeabi_dsub>
 8012874:	4602      	mov	r2, r0
 8012876:	460b      	mov	r3, r1
 8012878:	e9ca 2300 	strd	r2, r3, [sl]
 801287c:	4620      	mov	r0, r4
 801287e:	4629      	mov	r1, r5
 8012880:	f7ed fd12 	bl	80002a8 <__aeabi_dsub>
 8012884:	a398      	add	r3, pc, #608	; (adr r3, 8012ae8 <__ieee754_rem_pio2+0x318>)
 8012886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801288a:	e7db      	b.n	8012844 <__ieee754_rem_pio2+0x74>
 801288c:	f7ed fd0e 	bl	80002ac <__adddf3>
 8012890:	45b0      	cmp	r8, r6
 8012892:	4604      	mov	r4, r0
 8012894:	460d      	mov	r5, r1
 8012896:	d016      	beq.n	80128c6 <__ieee754_rem_pio2+0xf6>
 8012898:	a38f      	add	r3, pc, #572	; (adr r3, 8012ad8 <__ieee754_rem_pio2+0x308>)
 801289a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801289e:	f7ed fd05 	bl	80002ac <__adddf3>
 80128a2:	4602      	mov	r2, r0
 80128a4:	460b      	mov	r3, r1
 80128a6:	e9ca 2300 	strd	r2, r3, [sl]
 80128aa:	4620      	mov	r0, r4
 80128ac:	4629      	mov	r1, r5
 80128ae:	f7ed fcfb 	bl	80002a8 <__aeabi_dsub>
 80128b2:	a389      	add	r3, pc, #548	; (adr r3, 8012ad8 <__ieee754_rem_pio2+0x308>)
 80128b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128b8:	f7ed fcf8 	bl	80002ac <__adddf3>
 80128bc:	f04f 3bff 	mov.w	fp, #4294967295
 80128c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80128c4:	e7c4      	b.n	8012850 <__ieee754_rem_pio2+0x80>
 80128c6:	a386      	add	r3, pc, #536	; (adr r3, 8012ae0 <__ieee754_rem_pio2+0x310>)
 80128c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128cc:	f7ed fcee 	bl	80002ac <__adddf3>
 80128d0:	a385      	add	r3, pc, #532	; (adr r3, 8012ae8 <__ieee754_rem_pio2+0x318>)
 80128d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128d6:	4604      	mov	r4, r0
 80128d8:	460d      	mov	r5, r1
 80128da:	f7ed fce7 	bl	80002ac <__adddf3>
 80128de:	4602      	mov	r2, r0
 80128e0:	460b      	mov	r3, r1
 80128e2:	e9ca 2300 	strd	r2, r3, [sl]
 80128e6:	4620      	mov	r0, r4
 80128e8:	4629      	mov	r1, r5
 80128ea:	f7ed fcdd 	bl	80002a8 <__aeabi_dsub>
 80128ee:	a37e      	add	r3, pc, #504	; (adr r3, 8012ae8 <__ieee754_rem_pio2+0x318>)
 80128f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128f4:	e7e0      	b.n	80128b8 <__ieee754_rem_pio2+0xe8>
 80128f6:	4b87      	ldr	r3, [pc, #540]	; (8012b14 <__ieee754_rem_pio2+0x344>)
 80128f8:	4598      	cmp	r8, r3
 80128fa:	f300 80d8 	bgt.w	8012aae <__ieee754_rem_pio2+0x2de>
 80128fe:	f000 fb0f 	bl	8012f20 <fabs>
 8012902:	ec55 4b10 	vmov	r4, r5, d0
 8012906:	ee10 0a10 	vmov	r0, s0
 801290a:	a379      	add	r3, pc, #484	; (adr r3, 8012af0 <__ieee754_rem_pio2+0x320>)
 801290c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012910:	4629      	mov	r1, r5
 8012912:	f7ed fe81 	bl	8000618 <__aeabi_dmul>
 8012916:	4b80      	ldr	r3, [pc, #512]	; (8012b18 <__ieee754_rem_pio2+0x348>)
 8012918:	2200      	movs	r2, #0
 801291a:	f7ed fcc7 	bl	80002ac <__adddf3>
 801291e:	f7ee f92b 	bl	8000b78 <__aeabi_d2iz>
 8012922:	4683      	mov	fp, r0
 8012924:	f7ed fe0e 	bl	8000544 <__aeabi_i2d>
 8012928:	4602      	mov	r2, r0
 801292a:	460b      	mov	r3, r1
 801292c:	ec43 2b18 	vmov	d8, r2, r3
 8012930:	a367      	add	r3, pc, #412	; (adr r3, 8012ad0 <__ieee754_rem_pio2+0x300>)
 8012932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012936:	f7ed fe6f 	bl	8000618 <__aeabi_dmul>
 801293a:	4602      	mov	r2, r0
 801293c:	460b      	mov	r3, r1
 801293e:	4620      	mov	r0, r4
 8012940:	4629      	mov	r1, r5
 8012942:	f7ed fcb1 	bl	80002a8 <__aeabi_dsub>
 8012946:	a364      	add	r3, pc, #400	; (adr r3, 8012ad8 <__ieee754_rem_pio2+0x308>)
 8012948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801294c:	4606      	mov	r6, r0
 801294e:	460f      	mov	r7, r1
 8012950:	ec51 0b18 	vmov	r0, r1, d8
 8012954:	f7ed fe60 	bl	8000618 <__aeabi_dmul>
 8012958:	f1bb 0f1f 	cmp.w	fp, #31
 801295c:	4604      	mov	r4, r0
 801295e:	460d      	mov	r5, r1
 8012960:	dc0d      	bgt.n	801297e <__ieee754_rem_pio2+0x1ae>
 8012962:	4b6e      	ldr	r3, [pc, #440]	; (8012b1c <__ieee754_rem_pio2+0x34c>)
 8012964:	f10b 32ff 	add.w	r2, fp, #4294967295
 8012968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801296c:	4543      	cmp	r3, r8
 801296e:	d006      	beq.n	801297e <__ieee754_rem_pio2+0x1ae>
 8012970:	4622      	mov	r2, r4
 8012972:	462b      	mov	r3, r5
 8012974:	4630      	mov	r0, r6
 8012976:	4639      	mov	r1, r7
 8012978:	f7ed fc96 	bl	80002a8 <__aeabi_dsub>
 801297c:	e00e      	b.n	801299c <__ieee754_rem_pio2+0x1cc>
 801297e:	462b      	mov	r3, r5
 8012980:	4622      	mov	r2, r4
 8012982:	4630      	mov	r0, r6
 8012984:	4639      	mov	r1, r7
 8012986:	f7ed fc8f 	bl	80002a8 <__aeabi_dsub>
 801298a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801298e:	9303      	str	r3, [sp, #12]
 8012990:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012994:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8012998:	2b10      	cmp	r3, #16
 801299a:	dc02      	bgt.n	80129a2 <__ieee754_rem_pio2+0x1d2>
 801299c:	e9ca 0100 	strd	r0, r1, [sl]
 80129a0:	e039      	b.n	8012a16 <__ieee754_rem_pio2+0x246>
 80129a2:	a34f      	add	r3, pc, #316	; (adr r3, 8012ae0 <__ieee754_rem_pio2+0x310>)
 80129a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129a8:	ec51 0b18 	vmov	r0, r1, d8
 80129ac:	f7ed fe34 	bl	8000618 <__aeabi_dmul>
 80129b0:	4604      	mov	r4, r0
 80129b2:	460d      	mov	r5, r1
 80129b4:	4602      	mov	r2, r0
 80129b6:	460b      	mov	r3, r1
 80129b8:	4630      	mov	r0, r6
 80129ba:	4639      	mov	r1, r7
 80129bc:	f7ed fc74 	bl	80002a8 <__aeabi_dsub>
 80129c0:	4602      	mov	r2, r0
 80129c2:	460b      	mov	r3, r1
 80129c4:	4680      	mov	r8, r0
 80129c6:	4689      	mov	r9, r1
 80129c8:	4630      	mov	r0, r6
 80129ca:	4639      	mov	r1, r7
 80129cc:	f7ed fc6c 	bl	80002a8 <__aeabi_dsub>
 80129d0:	4622      	mov	r2, r4
 80129d2:	462b      	mov	r3, r5
 80129d4:	f7ed fc68 	bl	80002a8 <__aeabi_dsub>
 80129d8:	a343      	add	r3, pc, #268	; (adr r3, 8012ae8 <__ieee754_rem_pio2+0x318>)
 80129da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129de:	4604      	mov	r4, r0
 80129e0:	460d      	mov	r5, r1
 80129e2:	ec51 0b18 	vmov	r0, r1, d8
 80129e6:	f7ed fe17 	bl	8000618 <__aeabi_dmul>
 80129ea:	4622      	mov	r2, r4
 80129ec:	462b      	mov	r3, r5
 80129ee:	f7ed fc5b 	bl	80002a8 <__aeabi_dsub>
 80129f2:	4602      	mov	r2, r0
 80129f4:	460b      	mov	r3, r1
 80129f6:	4604      	mov	r4, r0
 80129f8:	460d      	mov	r5, r1
 80129fa:	4640      	mov	r0, r8
 80129fc:	4649      	mov	r1, r9
 80129fe:	f7ed fc53 	bl	80002a8 <__aeabi_dsub>
 8012a02:	9a03      	ldr	r2, [sp, #12]
 8012a04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012a08:	1ad3      	subs	r3, r2, r3
 8012a0a:	2b31      	cmp	r3, #49	; 0x31
 8012a0c:	dc24      	bgt.n	8012a58 <__ieee754_rem_pio2+0x288>
 8012a0e:	e9ca 0100 	strd	r0, r1, [sl]
 8012a12:	4646      	mov	r6, r8
 8012a14:	464f      	mov	r7, r9
 8012a16:	e9da 8900 	ldrd	r8, r9, [sl]
 8012a1a:	4630      	mov	r0, r6
 8012a1c:	4642      	mov	r2, r8
 8012a1e:	464b      	mov	r3, r9
 8012a20:	4639      	mov	r1, r7
 8012a22:	f7ed fc41 	bl	80002a8 <__aeabi_dsub>
 8012a26:	462b      	mov	r3, r5
 8012a28:	4622      	mov	r2, r4
 8012a2a:	f7ed fc3d 	bl	80002a8 <__aeabi_dsub>
 8012a2e:	9b02      	ldr	r3, [sp, #8]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012a36:	f6bf af0b 	bge.w	8012850 <__ieee754_rem_pio2+0x80>
 8012a3a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012a3e:	f8ca 3004 	str.w	r3, [sl, #4]
 8012a42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012a46:	f8ca 8000 	str.w	r8, [sl]
 8012a4a:	f8ca 0008 	str.w	r0, [sl, #8]
 8012a4e:	f8ca 300c 	str.w	r3, [sl, #12]
 8012a52:	f1cb 0b00 	rsb	fp, fp, #0
 8012a56:	e6fb      	b.n	8012850 <__ieee754_rem_pio2+0x80>
 8012a58:	a327      	add	r3, pc, #156	; (adr r3, 8012af8 <__ieee754_rem_pio2+0x328>)
 8012a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a5e:	ec51 0b18 	vmov	r0, r1, d8
 8012a62:	f7ed fdd9 	bl	8000618 <__aeabi_dmul>
 8012a66:	4604      	mov	r4, r0
 8012a68:	460d      	mov	r5, r1
 8012a6a:	4602      	mov	r2, r0
 8012a6c:	460b      	mov	r3, r1
 8012a6e:	4640      	mov	r0, r8
 8012a70:	4649      	mov	r1, r9
 8012a72:	f7ed fc19 	bl	80002a8 <__aeabi_dsub>
 8012a76:	4602      	mov	r2, r0
 8012a78:	460b      	mov	r3, r1
 8012a7a:	4606      	mov	r6, r0
 8012a7c:	460f      	mov	r7, r1
 8012a7e:	4640      	mov	r0, r8
 8012a80:	4649      	mov	r1, r9
 8012a82:	f7ed fc11 	bl	80002a8 <__aeabi_dsub>
 8012a86:	4622      	mov	r2, r4
 8012a88:	462b      	mov	r3, r5
 8012a8a:	f7ed fc0d 	bl	80002a8 <__aeabi_dsub>
 8012a8e:	a31c      	add	r3, pc, #112	; (adr r3, 8012b00 <__ieee754_rem_pio2+0x330>)
 8012a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a94:	4604      	mov	r4, r0
 8012a96:	460d      	mov	r5, r1
 8012a98:	ec51 0b18 	vmov	r0, r1, d8
 8012a9c:	f7ed fdbc 	bl	8000618 <__aeabi_dmul>
 8012aa0:	4622      	mov	r2, r4
 8012aa2:	462b      	mov	r3, r5
 8012aa4:	f7ed fc00 	bl	80002a8 <__aeabi_dsub>
 8012aa8:	4604      	mov	r4, r0
 8012aaa:	460d      	mov	r5, r1
 8012aac:	e760      	b.n	8012970 <__ieee754_rem_pio2+0x1a0>
 8012aae:	4b1c      	ldr	r3, [pc, #112]	; (8012b20 <__ieee754_rem_pio2+0x350>)
 8012ab0:	4598      	cmp	r8, r3
 8012ab2:	dd37      	ble.n	8012b24 <__ieee754_rem_pio2+0x354>
 8012ab4:	ee10 2a10 	vmov	r2, s0
 8012ab8:	462b      	mov	r3, r5
 8012aba:	4620      	mov	r0, r4
 8012abc:	4629      	mov	r1, r5
 8012abe:	f7ed fbf3 	bl	80002a8 <__aeabi_dsub>
 8012ac2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012ac6:	e9ca 0100 	strd	r0, r1, [sl]
 8012aca:	e695      	b.n	80127f8 <__ieee754_rem_pio2+0x28>
 8012acc:	f3af 8000 	nop.w
 8012ad0:	54400000 	.word	0x54400000
 8012ad4:	3ff921fb 	.word	0x3ff921fb
 8012ad8:	1a626331 	.word	0x1a626331
 8012adc:	3dd0b461 	.word	0x3dd0b461
 8012ae0:	1a600000 	.word	0x1a600000
 8012ae4:	3dd0b461 	.word	0x3dd0b461
 8012ae8:	2e037073 	.word	0x2e037073
 8012aec:	3ba3198a 	.word	0x3ba3198a
 8012af0:	6dc9c883 	.word	0x6dc9c883
 8012af4:	3fe45f30 	.word	0x3fe45f30
 8012af8:	2e000000 	.word	0x2e000000
 8012afc:	3ba3198a 	.word	0x3ba3198a
 8012b00:	252049c1 	.word	0x252049c1
 8012b04:	397b839a 	.word	0x397b839a
 8012b08:	3fe921fb 	.word	0x3fe921fb
 8012b0c:	4002d97b 	.word	0x4002d97b
 8012b10:	3ff921fb 	.word	0x3ff921fb
 8012b14:	413921fb 	.word	0x413921fb
 8012b18:	3fe00000 	.word	0x3fe00000
 8012b1c:	08013d78 	.word	0x08013d78
 8012b20:	7fefffff 	.word	0x7fefffff
 8012b24:	ea4f 5628 	mov.w	r6, r8, asr #20
 8012b28:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8012b2c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8012b30:	4620      	mov	r0, r4
 8012b32:	460d      	mov	r5, r1
 8012b34:	f7ee f820 	bl	8000b78 <__aeabi_d2iz>
 8012b38:	f7ed fd04 	bl	8000544 <__aeabi_i2d>
 8012b3c:	4602      	mov	r2, r0
 8012b3e:	460b      	mov	r3, r1
 8012b40:	4620      	mov	r0, r4
 8012b42:	4629      	mov	r1, r5
 8012b44:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012b48:	f7ed fbae 	bl	80002a8 <__aeabi_dsub>
 8012b4c:	4b21      	ldr	r3, [pc, #132]	; (8012bd4 <__ieee754_rem_pio2+0x404>)
 8012b4e:	2200      	movs	r2, #0
 8012b50:	f7ed fd62 	bl	8000618 <__aeabi_dmul>
 8012b54:	460d      	mov	r5, r1
 8012b56:	4604      	mov	r4, r0
 8012b58:	f7ee f80e 	bl	8000b78 <__aeabi_d2iz>
 8012b5c:	f7ed fcf2 	bl	8000544 <__aeabi_i2d>
 8012b60:	4602      	mov	r2, r0
 8012b62:	460b      	mov	r3, r1
 8012b64:	4620      	mov	r0, r4
 8012b66:	4629      	mov	r1, r5
 8012b68:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012b6c:	f7ed fb9c 	bl	80002a8 <__aeabi_dsub>
 8012b70:	4b18      	ldr	r3, [pc, #96]	; (8012bd4 <__ieee754_rem_pio2+0x404>)
 8012b72:	2200      	movs	r2, #0
 8012b74:	f7ed fd50 	bl	8000618 <__aeabi_dmul>
 8012b78:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012b7c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8012b80:	2703      	movs	r7, #3
 8012b82:	2400      	movs	r4, #0
 8012b84:	2500      	movs	r5, #0
 8012b86:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8012b8a:	4622      	mov	r2, r4
 8012b8c:	462b      	mov	r3, r5
 8012b8e:	46b9      	mov	r9, r7
 8012b90:	3f01      	subs	r7, #1
 8012b92:	f7ed ffa9 	bl	8000ae8 <__aeabi_dcmpeq>
 8012b96:	2800      	cmp	r0, #0
 8012b98:	d1f5      	bne.n	8012b86 <__ieee754_rem_pio2+0x3b6>
 8012b9a:	4b0f      	ldr	r3, [pc, #60]	; (8012bd8 <__ieee754_rem_pio2+0x408>)
 8012b9c:	9301      	str	r3, [sp, #4]
 8012b9e:	2302      	movs	r3, #2
 8012ba0:	9300      	str	r3, [sp, #0]
 8012ba2:	4632      	mov	r2, r6
 8012ba4:	464b      	mov	r3, r9
 8012ba6:	4651      	mov	r1, sl
 8012ba8:	a804      	add	r0, sp, #16
 8012baa:	f000 fa75 	bl	8013098 <__kernel_rem_pio2>
 8012bae:	9b02      	ldr	r3, [sp, #8]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	4683      	mov	fp, r0
 8012bb4:	f6bf ae4c 	bge.w	8012850 <__ieee754_rem_pio2+0x80>
 8012bb8:	e9da 2100 	ldrd	r2, r1, [sl]
 8012bbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012bc0:	e9ca 2300 	strd	r2, r3, [sl]
 8012bc4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8012bc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012bcc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8012bd0:	e73f      	b.n	8012a52 <__ieee754_rem_pio2+0x282>
 8012bd2:	bf00      	nop
 8012bd4:	41700000 	.word	0x41700000
 8012bd8:	08013df8 	.word	0x08013df8
 8012bdc:	00000000 	.word	0x00000000

08012be0 <atan>:
 8012be0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012be4:	ec55 4b10 	vmov	r4, r5, d0
 8012be8:	4bc3      	ldr	r3, [pc, #780]	; (8012ef8 <atan+0x318>)
 8012bea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012bee:	429e      	cmp	r6, r3
 8012bf0:	46ab      	mov	fp, r5
 8012bf2:	dd18      	ble.n	8012c26 <atan+0x46>
 8012bf4:	4bc1      	ldr	r3, [pc, #772]	; (8012efc <atan+0x31c>)
 8012bf6:	429e      	cmp	r6, r3
 8012bf8:	dc01      	bgt.n	8012bfe <atan+0x1e>
 8012bfa:	d109      	bne.n	8012c10 <atan+0x30>
 8012bfc:	b144      	cbz	r4, 8012c10 <atan+0x30>
 8012bfe:	4622      	mov	r2, r4
 8012c00:	462b      	mov	r3, r5
 8012c02:	4620      	mov	r0, r4
 8012c04:	4629      	mov	r1, r5
 8012c06:	f7ed fb51 	bl	80002ac <__adddf3>
 8012c0a:	4604      	mov	r4, r0
 8012c0c:	460d      	mov	r5, r1
 8012c0e:	e006      	b.n	8012c1e <atan+0x3e>
 8012c10:	f1bb 0f00 	cmp.w	fp, #0
 8012c14:	f300 8131 	bgt.w	8012e7a <atan+0x29a>
 8012c18:	a59b      	add	r5, pc, #620	; (adr r5, 8012e88 <atan+0x2a8>)
 8012c1a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012c1e:	ec45 4b10 	vmov	d0, r4, r5
 8012c22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c26:	4bb6      	ldr	r3, [pc, #728]	; (8012f00 <atan+0x320>)
 8012c28:	429e      	cmp	r6, r3
 8012c2a:	dc14      	bgt.n	8012c56 <atan+0x76>
 8012c2c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012c30:	429e      	cmp	r6, r3
 8012c32:	dc0d      	bgt.n	8012c50 <atan+0x70>
 8012c34:	a396      	add	r3, pc, #600	; (adr r3, 8012e90 <atan+0x2b0>)
 8012c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c3a:	ee10 0a10 	vmov	r0, s0
 8012c3e:	4629      	mov	r1, r5
 8012c40:	f7ed fb34 	bl	80002ac <__adddf3>
 8012c44:	4baf      	ldr	r3, [pc, #700]	; (8012f04 <atan+0x324>)
 8012c46:	2200      	movs	r2, #0
 8012c48:	f7ed ff76 	bl	8000b38 <__aeabi_dcmpgt>
 8012c4c:	2800      	cmp	r0, #0
 8012c4e:	d1e6      	bne.n	8012c1e <atan+0x3e>
 8012c50:	f04f 3aff 	mov.w	sl, #4294967295
 8012c54:	e02b      	b.n	8012cae <atan+0xce>
 8012c56:	f000 f963 	bl	8012f20 <fabs>
 8012c5a:	4bab      	ldr	r3, [pc, #684]	; (8012f08 <atan+0x328>)
 8012c5c:	429e      	cmp	r6, r3
 8012c5e:	ec55 4b10 	vmov	r4, r5, d0
 8012c62:	f300 80bf 	bgt.w	8012de4 <atan+0x204>
 8012c66:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012c6a:	429e      	cmp	r6, r3
 8012c6c:	f300 80a0 	bgt.w	8012db0 <atan+0x1d0>
 8012c70:	ee10 2a10 	vmov	r2, s0
 8012c74:	ee10 0a10 	vmov	r0, s0
 8012c78:	462b      	mov	r3, r5
 8012c7a:	4629      	mov	r1, r5
 8012c7c:	f7ed fb16 	bl	80002ac <__adddf3>
 8012c80:	4ba0      	ldr	r3, [pc, #640]	; (8012f04 <atan+0x324>)
 8012c82:	2200      	movs	r2, #0
 8012c84:	f7ed fb10 	bl	80002a8 <__aeabi_dsub>
 8012c88:	2200      	movs	r2, #0
 8012c8a:	4606      	mov	r6, r0
 8012c8c:	460f      	mov	r7, r1
 8012c8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012c92:	4620      	mov	r0, r4
 8012c94:	4629      	mov	r1, r5
 8012c96:	f7ed fb09 	bl	80002ac <__adddf3>
 8012c9a:	4602      	mov	r2, r0
 8012c9c:	460b      	mov	r3, r1
 8012c9e:	4630      	mov	r0, r6
 8012ca0:	4639      	mov	r1, r7
 8012ca2:	f7ed fde3 	bl	800086c <__aeabi_ddiv>
 8012ca6:	f04f 0a00 	mov.w	sl, #0
 8012caa:	4604      	mov	r4, r0
 8012cac:	460d      	mov	r5, r1
 8012cae:	4622      	mov	r2, r4
 8012cb0:	462b      	mov	r3, r5
 8012cb2:	4620      	mov	r0, r4
 8012cb4:	4629      	mov	r1, r5
 8012cb6:	f7ed fcaf 	bl	8000618 <__aeabi_dmul>
 8012cba:	4602      	mov	r2, r0
 8012cbc:	460b      	mov	r3, r1
 8012cbe:	4680      	mov	r8, r0
 8012cc0:	4689      	mov	r9, r1
 8012cc2:	f7ed fca9 	bl	8000618 <__aeabi_dmul>
 8012cc6:	a374      	add	r3, pc, #464	; (adr r3, 8012e98 <atan+0x2b8>)
 8012cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ccc:	4606      	mov	r6, r0
 8012cce:	460f      	mov	r7, r1
 8012cd0:	f7ed fca2 	bl	8000618 <__aeabi_dmul>
 8012cd4:	a372      	add	r3, pc, #456	; (adr r3, 8012ea0 <atan+0x2c0>)
 8012cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cda:	f7ed fae7 	bl	80002ac <__adddf3>
 8012cde:	4632      	mov	r2, r6
 8012ce0:	463b      	mov	r3, r7
 8012ce2:	f7ed fc99 	bl	8000618 <__aeabi_dmul>
 8012ce6:	a370      	add	r3, pc, #448	; (adr r3, 8012ea8 <atan+0x2c8>)
 8012ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cec:	f7ed fade 	bl	80002ac <__adddf3>
 8012cf0:	4632      	mov	r2, r6
 8012cf2:	463b      	mov	r3, r7
 8012cf4:	f7ed fc90 	bl	8000618 <__aeabi_dmul>
 8012cf8:	a36d      	add	r3, pc, #436	; (adr r3, 8012eb0 <atan+0x2d0>)
 8012cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cfe:	f7ed fad5 	bl	80002ac <__adddf3>
 8012d02:	4632      	mov	r2, r6
 8012d04:	463b      	mov	r3, r7
 8012d06:	f7ed fc87 	bl	8000618 <__aeabi_dmul>
 8012d0a:	a36b      	add	r3, pc, #428	; (adr r3, 8012eb8 <atan+0x2d8>)
 8012d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d10:	f7ed facc 	bl	80002ac <__adddf3>
 8012d14:	4632      	mov	r2, r6
 8012d16:	463b      	mov	r3, r7
 8012d18:	f7ed fc7e 	bl	8000618 <__aeabi_dmul>
 8012d1c:	a368      	add	r3, pc, #416	; (adr r3, 8012ec0 <atan+0x2e0>)
 8012d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d22:	f7ed fac3 	bl	80002ac <__adddf3>
 8012d26:	4642      	mov	r2, r8
 8012d28:	464b      	mov	r3, r9
 8012d2a:	f7ed fc75 	bl	8000618 <__aeabi_dmul>
 8012d2e:	a366      	add	r3, pc, #408	; (adr r3, 8012ec8 <atan+0x2e8>)
 8012d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d34:	4680      	mov	r8, r0
 8012d36:	4689      	mov	r9, r1
 8012d38:	4630      	mov	r0, r6
 8012d3a:	4639      	mov	r1, r7
 8012d3c:	f7ed fc6c 	bl	8000618 <__aeabi_dmul>
 8012d40:	a363      	add	r3, pc, #396	; (adr r3, 8012ed0 <atan+0x2f0>)
 8012d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d46:	f7ed faaf 	bl	80002a8 <__aeabi_dsub>
 8012d4a:	4632      	mov	r2, r6
 8012d4c:	463b      	mov	r3, r7
 8012d4e:	f7ed fc63 	bl	8000618 <__aeabi_dmul>
 8012d52:	a361      	add	r3, pc, #388	; (adr r3, 8012ed8 <atan+0x2f8>)
 8012d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d58:	f7ed faa6 	bl	80002a8 <__aeabi_dsub>
 8012d5c:	4632      	mov	r2, r6
 8012d5e:	463b      	mov	r3, r7
 8012d60:	f7ed fc5a 	bl	8000618 <__aeabi_dmul>
 8012d64:	a35e      	add	r3, pc, #376	; (adr r3, 8012ee0 <atan+0x300>)
 8012d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d6a:	f7ed fa9d 	bl	80002a8 <__aeabi_dsub>
 8012d6e:	4632      	mov	r2, r6
 8012d70:	463b      	mov	r3, r7
 8012d72:	f7ed fc51 	bl	8000618 <__aeabi_dmul>
 8012d76:	a35c      	add	r3, pc, #368	; (adr r3, 8012ee8 <atan+0x308>)
 8012d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d7c:	f7ed fa94 	bl	80002a8 <__aeabi_dsub>
 8012d80:	4632      	mov	r2, r6
 8012d82:	463b      	mov	r3, r7
 8012d84:	f7ed fc48 	bl	8000618 <__aeabi_dmul>
 8012d88:	4602      	mov	r2, r0
 8012d8a:	460b      	mov	r3, r1
 8012d8c:	4640      	mov	r0, r8
 8012d8e:	4649      	mov	r1, r9
 8012d90:	f7ed fa8c 	bl	80002ac <__adddf3>
 8012d94:	4622      	mov	r2, r4
 8012d96:	462b      	mov	r3, r5
 8012d98:	f7ed fc3e 	bl	8000618 <__aeabi_dmul>
 8012d9c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8012da0:	4602      	mov	r2, r0
 8012da2:	460b      	mov	r3, r1
 8012da4:	d14b      	bne.n	8012e3e <atan+0x25e>
 8012da6:	4620      	mov	r0, r4
 8012da8:	4629      	mov	r1, r5
 8012daa:	f7ed fa7d 	bl	80002a8 <__aeabi_dsub>
 8012dae:	e72c      	b.n	8012c0a <atan+0x2a>
 8012db0:	ee10 0a10 	vmov	r0, s0
 8012db4:	4b53      	ldr	r3, [pc, #332]	; (8012f04 <atan+0x324>)
 8012db6:	2200      	movs	r2, #0
 8012db8:	4629      	mov	r1, r5
 8012dba:	f7ed fa75 	bl	80002a8 <__aeabi_dsub>
 8012dbe:	4b51      	ldr	r3, [pc, #324]	; (8012f04 <atan+0x324>)
 8012dc0:	4606      	mov	r6, r0
 8012dc2:	460f      	mov	r7, r1
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	4620      	mov	r0, r4
 8012dc8:	4629      	mov	r1, r5
 8012dca:	f7ed fa6f 	bl	80002ac <__adddf3>
 8012dce:	4602      	mov	r2, r0
 8012dd0:	460b      	mov	r3, r1
 8012dd2:	4630      	mov	r0, r6
 8012dd4:	4639      	mov	r1, r7
 8012dd6:	f7ed fd49 	bl	800086c <__aeabi_ddiv>
 8012dda:	f04f 0a01 	mov.w	sl, #1
 8012dde:	4604      	mov	r4, r0
 8012de0:	460d      	mov	r5, r1
 8012de2:	e764      	b.n	8012cae <atan+0xce>
 8012de4:	4b49      	ldr	r3, [pc, #292]	; (8012f0c <atan+0x32c>)
 8012de6:	429e      	cmp	r6, r3
 8012de8:	da1d      	bge.n	8012e26 <atan+0x246>
 8012dea:	ee10 0a10 	vmov	r0, s0
 8012dee:	4b48      	ldr	r3, [pc, #288]	; (8012f10 <atan+0x330>)
 8012df0:	2200      	movs	r2, #0
 8012df2:	4629      	mov	r1, r5
 8012df4:	f7ed fa58 	bl	80002a8 <__aeabi_dsub>
 8012df8:	4b45      	ldr	r3, [pc, #276]	; (8012f10 <atan+0x330>)
 8012dfa:	4606      	mov	r6, r0
 8012dfc:	460f      	mov	r7, r1
 8012dfe:	2200      	movs	r2, #0
 8012e00:	4620      	mov	r0, r4
 8012e02:	4629      	mov	r1, r5
 8012e04:	f7ed fc08 	bl	8000618 <__aeabi_dmul>
 8012e08:	4b3e      	ldr	r3, [pc, #248]	; (8012f04 <atan+0x324>)
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	f7ed fa4e 	bl	80002ac <__adddf3>
 8012e10:	4602      	mov	r2, r0
 8012e12:	460b      	mov	r3, r1
 8012e14:	4630      	mov	r0, r6
 8012e16:	4639      	mov	r1, r7
 8012e18:	f7ed fd28 	bl	800086c <__aeabi_ddiv>
 8012e1c:	f04f 0a02 	mov.w	sl, #2
 8012e20:	4604      	mov	r4, r0
 8012e22:	460d      	mov	r5, r1
 8012e24:	e743      	b.n	8012cae <atan+0xce>
 8012e26:	462b      	mov	r3, r5
 8012e28:	ee10 2a10 	vmov	r2, s0
 8012e2c:	4939      	ldr	r1, [pc, #228]	; (8012f14 <atan+0x334>)
 8012e2e:	2000      	movs	r0, #0
 8012e30:	f7ed fd1c 	bl	800086c <__aeabi_ddiv>
 8012e34:	f04f 0a03 	mov.w	sl, #3
 8012e38:	4604      	mov	r4, r0
 8012e3a:	460d      	mov	r5, r1
 8012e3c:	e737      	b.n	8012cae <atan+0xce>
 8012e3e:	4b36      	ldr	r3, [pc, #216]	; (8012f18 <atan+0x338>)
 8012e40:	4e36      	ldr	r6, [pc, #216]	; (8012f1c <atan+0x33c>)
 8012e42:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e4a:	f7ed fa2d 	bl	80002a8 <__aeabi_dsub>
 8012e4e:	4622      	mov	r2, r4
 8012e50:	462b      	mov	r3, r5
 8012e52:	f7ed fa29 	bl	80002a8 <__aeabi_dsub>
 8012e56:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8012e5a:	4602      	mov	r2, r0
 8012e5c:	460b      	mov	r3, r1
 8012e5e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012e62:	f7ed fa21 	bl	80002a8 <__aeabi_dsub>
 8012e66:	f1bb 0f00 	cmp.w	fp, #0
 8012e6a:	4604      	mov	r4, r0
 8012e6c:	460d      	mov	r5, r1
 8012e6e:	f6bf aed6 	bge.w	8012c1e <atan+0x3e>
 8012e72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e76:	461d      	mov	r5, r3
 8012e78:	e6d1      	b.n	8012c1e <atan+0x3e>
 8012e7a:	a51d      	add	r5, pc, #116	; (adr r5, 8012ef0 <atan+0x310>)
 8012e7c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012e80:	e6cd      	b.n	8012c1e <atan+0x3e>
 8012e82:	bf00      	nop
 8012e84:	f3af 8000 	nop.w
 8012e88:	54442d18 	.word	0x54442d18
 8012e8c:	bff921fb 	.word	0xbff921fb
 8012e90:	8800759c 	.word	0x8800759c
 8012e94:	7e37e43c 	.word	0x7e37e43c
 8012e98:	e322da11 	.word	0xe322da11
 8012e9c:	3f90ad3a 	.word	0x3f90ad3a
 8012ea0:	24760deb 	.word	0x24760deb
 8012ea4:	3fa97b4b 	.word	0x3fa97b4b
 8012ea8:	a0d03d51 	.word	0xa0d03d51
 8012eac:	3fb10d66 	.word	0x3fb10d66
 8012eb0:	c54c206e 	.word	0xc54c206e
 8012eb4:	3fb745cd 	.word	0x3fb745cd
 8012eb8:	920083ff 	.word	0x920083ff
 8012ebc:	3fc24924 	.word	0x3fc24924
 8012ec0:	5555550d 	.word	0x5555550d
 8012ec4:	3fd55555 	.word	0x3fd55555
 8012ec8:	2c6a6c2f 	.word	0x2c6a6c2f
 8012ecc:	bfa2b444 	.word	0xbfa2b444
 8012ed0:	52defd9a 	.word	0x52defd9a
 8012ed4:	3fadde2d 	.word	0x3fadde2d
 8012ed8:	af749a6d 	.word	0xaf749a6d
 8012edc:	3fb3b0f2 	.word	0x3fb3b0f2
 8012ee0:	fe231671 	.word	0xfe231671
 8012ee4:	3fbc71c6 	.word	0x3fbc71c6
 8012ee8:	9998ebc4 	.word	0x9998ebc4
 8012eec:	3fc99999 	.word	0x3fc99999
 8012ef0:	54442d18 	.word	0x54442d18
 8012ef4:	3ff921fb 	.word	0x3ff921fb
 8012ef8:	440fffff 	.word	0x440fffff
 8012efc:	7ff00000 	.word	0x7ff00000
 8012f00:	3fdbffff 	.word	0x3fdbffff
 8012f04:	3ff00000 	.word	0x3ff00000
 8012f08:	3ff2ffff 	.word	0x3ff2ffff
 8012f0c:	40038000 	.word	0x40038000
 8012f10:	3ff80000 	.word	0x3ff80000
 8012f14:	bff00000 	.word	0xbff00000
 8012f18:	08013f20 	.word	0x08013f20
 8012f1c:	08013f00 	.word	0x08013f00

08012f20 <fabs>:
 8012f20:	ec51 0b10 	vmov	r0, r1, d0
 8012f24:	ee10 2a10 	vmov	r2, s0
 8012f28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012f2c:	ec43 2b10 	vmov	d0, r2, r3
 8012f30:	4770      	bx	lr
 8012f32:	0000      	movs	r0, r0
 8012f34:	0000      	movs	r0, r0
	...

08012f38 <scalbn>:
 8012f38:	b570      	push	{r4, r5, r6, lr}
 8012f3a:	ec55 4b10 	vmov	r4, r5, d0
 8012f3e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8012f42:	4606      	mov	r6, r0
 8012f44:	462b      	mov	r3, r5
 8012f46:	b999      	cbnz	r1, 8012f70 <scalbn+0x38>
 8012f48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012f4c:	4323      	orrs	r3, r4
 8012f4e:	d03f      	beq.n	8012fd0 <scalbn+0x98>
 8012f50:	4b35      	ldr	r3, [pc, #212]	; (8013028 <scalbn+0xf0>)
 8012f52:	4629      	mov	r1, r5
 8012f54:	ee10 0a10 	vmov	r0, s0
 8012f58:	2200      	movs	r2, #0
 8012f5a:	f7ed fb5d 	bl	8000618 <__aeabi_dmul>
 8012f5e:	4b33      	ldr	r3, [pc, #204]	; (801302c <scalbn+0xf4>)
 8012f60:	429e      	cmp	r6, r3
 8012f62:	4604      	mov	r4, r0
 8012f64:	460d      	mov	r5, r1
 8012f66:	da10      	bge.n	8012f8a <scalbn+0x52>
 8012f68:	a327      	add	r3, pc, #156	; (adr r3, 8013008 <scalbn+0xd0>)
 8012f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f6e:	e01f      	b.n	8012fb0 <scalbn+0x78>
 8012f70:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8012f74:	4291      	cmp	r1, r2
 8012f76:	d10c      	bne.n	8012f92 <scalbn+0x5a>
 8012f78:	ee10 2a10 	vmov	r2, s0
 8012f7c:	4620      	mov	r0, r4
 8012f7e:	4629      	mov	r1, r5
 8012f80:	f7ed f994 	bl	80002ac <__adddf3>
 8012f84:	4604      	mov	r4, r0
 8012f86:	460d      	mov	r5, r1
 8012f88:	e022      	b.n	8012fd0 <scalbn+0x98>
 8012f8a:	460b      	mov	r3, r1
 8012f8c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8012f90:	3936      	subs	r1, #54	; 0x36
 8012f92:	f24c 3250 	movw	r2, #50000	; 0xc350
 8012f96:	4296      	cmp	r6, r2
 8012f98:	dd0d      	ble.n	8012fb6 <scalbn+0x7e>
 8012f9a:	2d00      	cmp	r5, #0
 8012f9c:	a11c      	add	r1, pc, #112	; (adr r1, 8013010 <scalbn+0xd8>)
 8012f9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012fa2:	da02      	bge.n	8012faa <scalbn+0x72>
 8012fa4:	a11c      	add	r1, pc, #112	; (adr r1, 8013018 <scalbn+0xe0>)
 8012fa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012faa:	a319      	add	r3, pc, #100	; (adr r3, 8013010 <scalbn+0xd8>)
 8012fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fb0:	f7ed fb32 	bl	8000618 <__aeabi_dmul>
 8012fb4:	e7e6      	b.n	8012f84 <scalbn+0x4c>
 8012fb6:	1872      	adds	r2, r6, r1
 8012fb8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012fbc:	428a      	cmp	r2, r1
 8012fbe:	dcec      	bgt.n	8012f9a <scalbn+0x62>
 8012fc0:	2a00      	cmp	r2, #0
 8012fc2:	dd08      	ble.n	8012fd6 <scalbn+0x9e>
 8012fc4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012fc8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012fcc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012fd0:	ec45 4b10 	vmov	d0, r4, r5
 8012fd4:	bd70      	pop	{r4, r5, r6, pc}
 8012fd6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012fda:	da08      	bge.n	8012fee <scalbn+0xb6>
 8012fdc:	2d00      	cmp	r5, #0
 8012fde:	a10a      	add	r1, pc, #40	; (adr r1, 8013008 <scalbn+0xd0>)
 8012fe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012fe4:	dac0      	bge.n	8012f68 <scalbn+0x30>
 8012fe6:	a10e      	add	r1, pc, #56	; (adr r1, 8013020 <scalbn+0xe8>)
 8012fe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012fec:	e7bc      	b.n	8012f68 <scalbn+0x30>
 8012fee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012ff2:	3236      	adds	r2, #54	; 0x36
 8012ff4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012ff8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012ffc:	4620      	mov	r0, r4
 8012ffe:	4b0c      	ldr	r3, [pc, #48]	; (8013030 <scalbn+0xf8>)
 8013000:	2200      	movs	r2, #0
 8013002:	e7d5      	b.n	8012fb0 <scalbn+0x78>
 8013004:	f3af 8000 	nop.w
 8013008:	c2f8f359 	.word	0xc2f8f359
 801300c:	01a56e1f 	.word	0x01a56e1f
 8013010:	8800759c 	.word	0x8800759c
 8013014:	7e37e43c 	.word	0x7e37e43c
 8013018:	8800759c 	.word	0x8800759c
 801301c:	fe37e43c 	.word	0xfe37e43c
 8013020:	c2f8f359 	.word	0xc2f8f359
 8013024:	81a56e1f 	.word	0x81a56e1f
 8013028:	43500000 	.word	0x43500000
 801302c:	ffff3cb0 	.word	0xffff3cb0
 8013030:	3c900000 	.word	0x3c900000

08013034 <with_errno>:
 8013034:	b570      	push	{r4, r5, r6, lr}
 8013036:	4604      	mov	r4, r0
 8013038:	460d      	mov	r5, r1
 801303a:	4616      	mov	r6, r2
 801303c:	f7fb fbda 	bl	800e7f4 <__errno>
 8013040:	4629      	mov	r1, r5
 8013042:	6006      	str	r6, [r0, #0]
 8013044:	4620      	mov	r0, r4
 8013046:	bd70      	pop	{r4, r5, r6, pc}

08013048 <xflow>:
 8013048:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801304a:	4614      	mov	r4, r2
 801304c:	461d      	mov	r5, r3
 801304e:	b108      	cbz	r0, 8013054 <xflow+0xc>
 8013050:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013054:	e9cd 2300 	strd	r2, r3, [sp]
 8013058:	e9dd 2300 	ldrd	r2, r3, [sp]
 801305c:	4620      	mov	r0, r4
 801305e:	4629      	mov	r1, r5
 8013060:	f7ed fada 	bl	8000618 <__aeabi_dmul>
 8013064:	2222      	movs	r2, #34	; 0x22
 8013066:	b003      	add	sp, #12
 8013068:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801306c:	f7ff bfe2 	b.w	8013034 <with_errno>

08013070 <__math_uflow>:
 8013070:	b508      	push	{r3, lr}
 8013072:	2200      	movs	r2, #0
 8013074:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013078:	f7ff ffe6 	bl	8013048 <xflow>
 801307c:	ec41 0b10 	vmov	d0, r0, r1
 8013080:	bd08      	pop	{r3, pc}

08013082 <__math_oflow>:
 8013082:	b508      	push	{r3, lr}
 8013084:	2200      	movs	r2, #0
 8013086:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801308a:	f7ff ffdd 	bl	8013048 <xflow>
 801308e:	ec41 0b10 	vmov	d0, r0, r1
 8013092:	bd08      	pop	{r3, pc}
 8013094:	0000      	movs	r0, r0
	...

08013098 <__kernel_rem_pio2>:
 8013098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801309c:	ed2d 8b02 	vpush	{d8}
 80130a0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80130a4:	f112 0f14 	cmn.w	r2, #20
 80130a8:	9306      	str	r3, [sp, #24]
 80130aa:	9104      	str	r1, [sp, #16]
 80130ac:	4bc2      	ldr	r3, [pc, #776]	; (80133b8 <__kernel_rem_pio2+0x320>)
 80130ae:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80130b0:	9009      	str	r0, [sp, #36]	; 0x24
 80130b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80130b6:	9300      	str	r3, [sp, #0]
 80130b8:	9b06      	ldr	r3, [sp, #24]
 80130ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80130be:	bfa8      	it	ge
 80130c0:	1ed4      	subge	r4, r2, #3
 80130c2:	9305      	str	r3, [sp, #20]
 80130c4:	bfb2      	itee	lt
 80130c6:	2400      	movlt	r4, #0
 80130c8:	2318      	movge	r3, #24
 80130ca:	fb94 f4f3 	sdivge	r4, r4, r3
 80130ce:	f06f 0317 	mvn.w	r3, #23
 80130d2:	fb04 3303 	mla	r3, r4, r3, r3
 80130d6:	eb03 0a02 	add.w	sl, r3, r2
 80130da:	9b00      	ldr	r3, [sp, #0]
 80130dc:	9a05      	ldr	r2, [sp, #20]
 80130de:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80133a8 <__kernel_rem_pio2+0x310>
 80130e2:	eb03 0802 	add.w	r8, r3, r2
 80130e6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80130e8:	1aa7      	subs	r7, r4, r2
 80130ea:	ae20      	add	r6, sp, #128	; 0x80
 80130ec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80130f0:	2500      	movs	r5, #0
 80130f2:	4545      	cmp	r5, r8
 80130f4:	dd13      	ble.n	801311e <__kernel_rem_pio2+0x86>
 80130f6:	9b06      	ldr	r3, [sp, #24]
 80130f8:	aa20      	add	r2, sp, #128	; 0x80
 80130fa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80130fe:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8013102:	f04f 0800 	mov.w	r8, #0
 8013106:	9b00      	ldr	r3, [sp, #0]
 8013108:	4598      	cmp	r8, r3
 801310a:	dc31      	bgt.n	8013170 <__kernel_rem_pio2+0xd8>
 801310c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80133a8 <__kernel_rem_pio2+0x310>
 8013110:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8013114:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013118:	462f      	mov	r7, r5
 801311a:	2600      	movs	r6, #0
 801311c:	e01b      	b.n	8013156 <__kernel_rem_pio2+0xbe>
 801311e:	42ef      	cmn	r7, r5
 8013120:	d407      	bmi.n	8013132 <__kernel_rem_pio2+0x9a>
 8013122:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8013126:	f7ed fa0d 	bl	8000544 <__aeabi_i2d>
 801312a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801312e:	3501      	adds	r5, #1
 8013130:	e7df      	b.n	80130f2 <__kernel_rem_pio2+0x5a>
 8013132:	ec51 0b18 	vmov	r0, r1, d8
 8013136:	e7f8      	b.n	801312a <__kernel_rem_pio2+0x92>
 8013138:	e9d7 2300 	ldrd	r2, r3, [r7]
 801313c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013140:	f7ed fa6a 	bl	8000618 <__aeabi_dmul>
 8013144:	4602      	mov	r2, r0
 8013146:	460b      	mov	r3, r1
 8013148:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801314c:	f7ed f8ae 	bl	80002ac <__adddf3>
 8013150:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013154:	3601      	adds	r6, #1
 8013156:	9b05      	ldr	r3, [sp, #20]
 8013158:	429e      	cmp	r6, r3
 801315a:	f1a7 0708 	sub.w	r7, r7, #8
 801315e:	ddeb      	ble.n	8013138 <__kernel_rem_pio2+0xa0>
 8013160:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013164:	f108 0801 	add.w	r8, r8, #1
 8013168:	ecab 7b02 	vstmia	fp!, {d7}
 801316c:	3508      	adds	r5, #8
 801316e:	e7ca      	b.n	8013106 <__kernel_rem_pio2+0x6e>
 8013170:	9b00      	ldr	r3, [sp, #0]
 8013172:	aa0c      	add	r2, sp, #48	; 0x30
 8013174:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013178:	930b      	str	r3, [sp, #44]	; 0x2c
 801317a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801317c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013180:	9c00      	ldr	r4, [sp, #0]
 8013182:	930a      	str	r3, [sp, #40]	; 0x28
 8013184:	00e3      	lsls	r3, r4, #3
 8013186:	9308      	str	r3, [sp, #32]
 8013188:	ab98      	add	r3, sp, #608	; 0x260
 801318a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801318e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8013192:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8013196:	ab70      	add	r3, sp, #448	; 0x1c0
 8013198:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801319c:	46c3      	mov	fp, r8
 801319e:	46a1      	mov	r9, r4
 80131a0:	f1b9 0f00 	cmp.w	r9, #0
 80131a4:	f1a5 0508 	sub.w	r5, r5, #8
 80131a8:	dc77      	bgt.n	801329a <__kernel_rem_pio2+0x202>
 80131aa:	ec47 6b10 	vmov	d0, r6, r7
 80131ae:	4650      	mov	r0, sl
 80131b0:	f7ff fec2 	bl	8012f38 <scalbn>
 80131b4:	ec57 6b10 	vmov	r6, r7, d0
 80131b8:	2200      	movs	r2, #0
 80131ba:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80131be:	ee10 0a10 	vmov	r0, s0
 80131c2:	4639      	mov	r1, r7
 80131c4:	f7ed fa28 	bl	8000618 <__aeabi_dmul>
 80131c8:	ec41 0b10 	vmov	d0, r0, r1
 80131cc:	f000 fab4 	bl	8013738 <floor>
 80131d0:	4b7a      	ldr	r3, [pc, #488]	; (80133bc <__kernel_rem_pio2+0x324>)
 80131d2:	ec51 0b10 	vmov	r0, r1, d0
 80131d6:	2200      	movs	r2, #0
 80131d8:	f7ed fa1e 	bl	8000618 <__aeabi_dmul>
 80131dc:	4602      	mov	r2, r0
 80131de:	460b      	mov	r3, r1
 80131e0:	4630      	mov	r0, r6
 80131e2:	4639      	mov	r1, r7
 80131e4:	f7ed f860 	bl	80002a8 <__aeabi_dsub>
 80131e8:	460f      	mov	r7, r1
 80131ea:	4606      	mov	r6, r0
 80131ec:	f7ed fcc4 	bl	8000b78 <__aeabi_d2iz>
 80131f0:	9002      	str	r0, [sp, #8]
 80131f2:	f7ed f9a7 	bl	8000544 <__aeabi_i2d>
 80131f6:	4602      	mov	r2, r0
 80131f8:	460b      	mov	r3, r1
 80131fa:	4630      	mov	r0, r6
 80131fc:	4639      	mov	r1, r7
 80131fe:	f7ed f853 	bl	80002a8 <__aeabi_dsub>
 8013202:	f1ba 0f00 	cmp.w	sl, #0
 8013206:	4606      	mov	r6, r0
 8013208:	460f      	mov	r7, r1
 801320a:	dd6d      	ble.n	80132e8 <__kernel_rem_pio2+0x250>
 801320c:	1e61      	subs	r1, r4, #1
 801320e:	ab0c      	add	r3, sp, #48	; 0x30
 8013210:	9d02      	ldr	r5, [sp, #8]
 8013212:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013216:	f1ca 0018 	rsb	r0, sl, #24
 801321a:	fa43 f200 	asr.w	r2, r3, r0
 801321e:	4415      	add	r5, r2
 8013220:	4082      	lsls	r2, r0
 8013222:	1a9b      	subs	r3, r3, r2
 8013224:	aa0c      	add	r2, sp, #48	; 0x30
 8013226:	9502      	str	r5, [sp, #8]
 8013228:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801322c:	f1ca 0217 	rsb	r2, sl, #23
 8013230:	fa43 fb02 	asr.w	fp, r3, r2
 8013234:	f1bb 0f00 	cmp.w	fp, #0
 8013238:	dd65      	ble.n	8013306 <__kernel_rem_pio2+0x26e>
 801323a:	9b02      	ldr	r3, [sp, #8]
 801323c:	2200      	movs	r2, #0
 801323e:	3301      	adds	r3, #1
 8013240:	9302      	str	r3, [sp, #8]
 8013242:	4615      	mov	r5, r2
 8013244:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8013248:	4294      	cmp	r4, r2
 801324a:	f300 809f 	bgt.w	801338c <__kernel_rem_pio2+0x2f4>
 801324e:	f1ba 0f00 	cmp.w	sl, #0
 8013252:	dd07      	ble.n	8013264 <__kernel_rem_pio2+0x1cc>
 8013254:	f1ba 0f01 	cmp.w	sl, #1
 8013258:	f000 80c1 	beq.w	80133de <__kernel_rem_pio2+0x346>
 801325c:	f1ba 0f02 	cmp.w	sl, #2
 8013260:	f000 80c7 	beq.w	80133f2 <__kernel_rem_pio2+0x35a>
 8013264:	f1bb 0f02 	cmp.w	fp, #2
 8013268:	d14d      	bne.n	8013306 <__kernel_rem_pio2+0x26e>
 801326a:	4632      	mov	r2, r6
 801326c:	463b      	mov	r3, r7
 801326e:	4954      	ldr	r1, [pc, #336]	; (80133c0 <__kernel_rem_pio2+0x328>)
 8013270:	2000      	movs	r0, #0
 8013272:	f7ed f819 	bl	80002a8 <__aeabi_dsub>
 8013276:	4606      	mov	r6, r0
 8013278:	460f      	mov	r7, r1
 801327a:	2d00      	cmp	r5, #0
 801327c:	d043      	beq.n	8013306 <__kernel_rem_pio2+0x26e>
 801327e:	4650      	mov	r0, sl
 8013280:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80133b0 <__kernel_rem_pio2+0x318>
 8013284:	f7ff fe58 	bl	8012f38 <scalbn>
 8013288:	4630      	mov	r0, r6
 801328a:	4639      	mov	r1, r7
 801328c:	ec53 2b10 	vmov	r2, r3, d0
 8013290:	f7ed f80a 	bl	80002a8 <__aeabi_dsub>
 8013294:	4606      	mov	r6, r0
 8013296:	460f      	mov	r7, r1
 8013298:	e035      	b.n	8013306 <__kernel_rem_pio2+0x26e>
 801329a:	4b4a      	ldr	r3, [pc, #296]	; (80133c4 <__kernel_rem_pio2+0x32c>)
 801329c:	2200      	movs	r2, #0
 801329e:	4630      	mov	r0, r6
 80132a0:	4639      	mov	r1, r7
 80132a2:	f7ed f9b9 	bl	8000618 <__aeabi_dmul>
 80132a6:	f7ed fc67 	bl	8000b78 <__aeabi_d2iz>
 80132aa:	f7ed f94b 	bl	8000544 <__aeabi_i2d>
 80132ae:	4602      	mov	r2, r0
 80132b0:	460b      	mov	r3, r1
 80132b2:	ec43 2b18 	vmov	d8, r2, r3
 80132b6:	4b44      	ldr	r3, [pc, #272]	; (80133c8 <__kernel_rem_pio2+0x330>)
 80132b8:	2200      	movs	r2, #0
 80132ba:	f7ed f9ad 	bl	8000618 <__aeabi_dmul>
 80132be:	4602      	mov	r2, r0
 80132c0:	460b      	mov	r3, r1
 80132c2:	4630      	mov	r0, r6
 80132c4:	4639      	mov	r1, r7
 80132c6:	f7ec ffef 	bl	80002a8 <__aeabi_dsub>
 80132ca:	f7ed fc55 	bl	8000b78 <__aeabi_d2iz>
 80132ce:	e9d5 2300 	ldrd	r2, r3, [r5]
 80132d2:	f84b 0b04 	str.w	r0, [fp], #4
 80132d6:	ec51 0b18 	vmov	r0, r1, d8
 80132da:	f7ec ffe7 	bl	80002ac <__adddf3>
 80132de:	f109 39ff 	add.w	r9, r9, #4294967295
 80132e2:	4606      	mov	r6, r0
 80132e4:	460f      	mov	r7, r1
 80132e6:	e75b      	b.n	80131a0 <__kernel_rem_pio2+0x108>
 80132e8:	d106      	bne.n	80132f8 <__kernel_rem_pio2+0x260>
 80132ea:	1e63      	subs	r3, r4, #1
 80132ec:	aa0c      	add	r2, sp, #48	; 0x30
 80132ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80132f2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80132f6:	e79d      	b.n	8013234 <__kernel_rem_pio2+0x19c>
 80132f8:	4b34      	ldr	r3, [pc, #208]	; (80133cc <__kernel_rem_pio2+0x334>)
 80132fa:	2200      	movs	r2, #0
 80132fc:	f7ed fc12 	bl	8000b24 <__aeabi_dcmpge>
 8013300:	2800      	cmp	r0, #0
 8013302:	d140      	bne.n	8013386 <__kernel_rem_pio2+0x2ee>
 8013304:	4683      	mov	fp, r0
 8013306:	2200      	movs	r2, #0
 8013308:	2300      	movs	r3, #0
 801330a:	4630      	mov	r0, r6
 801330c:	4639      	mov	r1, r7
 801330e:	f7ed fbeb 	bl	8000ae8 <__aeabi_dcmpeq>
 8013312:	2800      	cmp	r0, #0
 8013314:	f000 80c1 	beq.w	801349a <__kernel_rem_pio2+0x402>
 8013318:	1e65      	subs	r5, r4, #1
 801331a:	462b      	mov	r3, r5
 801331c:	2200      	movs	r2, #0
 801331e:	9900      	ldr	r1, [sp, #0]
 8013320:	428b      	cmp	r3, r1
 8013322:	da6d      	bge.n	8013400 <__kernel_rem_pio2+0x368>
 8013324:	2a00      	cmp	r2, #0
 8013326:	f000 808a 	beq.w	801343e <__kernel_rem_pio2+0x3a6>
 801332a:	ab0c      	add	r3, sp, #48	; 0x30
 801332c:	f1aa 0a18 	sub.w	sl, sl, #24
 8013330:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8013334:	2b00      	cmp	r3, #0
 8013336:	f000 80ae 	beq.w	8013496 <__kernel_rem_pio2+0x3fe>
 801333a:	4650      	mov	r0, sl
 801333c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80133b0 <__kernel_rem_pio2+0x318>
 8013340:	f7ff fdfa 	bl	8012f38 <scalbn>
 8013344:	1c6b      	adds	r3, r5, #1
 8013346:	00da      	lsls	r2, r3, #3
 8013348:	9205      	str	r2, [sp, #20]
 801334a:	ec57 6b10 	vmov	r6, r7, d0
 801334e:	aa70      	add	r2, sp, #448	; 0x1c0
 8013350:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80133c4 <__kernel_rem_pio2+0x32c>
 8013354:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8013358:	462c      	mov	r4, r5
 801335a:	f04f 0800 	mov.w	r8, #0
 801335e:	2c00      	cmp	r4, #0
 8013360:	f280 80d4 	bge.w	801350c <__kernel_rem_pio2+0x474>
 8013364:	462c      	mov	r4, r5
 8013366:	2c00      	cmp	r4, #0
 8013368:	f2c0 8102 	blt.w	8013570 <__kernel_rem_pio2+0x4d8>
 801336c:	4b18      	ldr	r3, [pc, #96]	; (80133d0 <__kernel_rem_pio2+0x338>)
 801336e:	461e      	mov	r6, r3
 8013370:	ab70      	add	r3, sp, #448	; 0x1c0
 8013372:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8013376:	1b2b      	subs	r3, r5, r4
 8013378:	f04f 0900 	mov.w	r9, #0
 801337c:	f04f 0a00 	mov.w	sl, #0
 8013380:	2700      	movs	r7, #0
 8013382:	9306      	str	r3, [sp, #24]
 8013384:	e0e6      	b.n	8013554 <__kernel_rem_pio2+0x4bc>
 8013386:	f04f 0b02 	mov.w	fp, #2
 801338a:	e756      	b.n	801323a <__kernel_rem_pio2+0x1a2>
 801338c:	f8d8 3000 	ldr.w	r3, [r8]
 8013390:	bb05      	cbnz	r5, 80133d4 <__kernel_rem_pio2+0x33c>
 8013392:	b123      	cbz	r3, 801339e <__kernel_rem_pio2+0x306>
 8013394:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8013398:	f8c8 3000 	str.w	r3, [r8]
 801339c:	2301      	movs	r3, #1
 801339e:	3201      	adds	r2, #1
 80133a0:	f108 0804 	add.w	r8, r8, #4
 80133a4:	461d      	mov	r5, r3
 80133a6:	e74f      	b.n	8013248 <__kernel_rem_pio2+0x1b0>
	...
 80133b4:	3ff00000 	.word	0x3ff00000
 80133b8:	08013f80 	.word	0x08013f80
 80133bc:	40200000 	.word	0x40200000
 80133c0:	3ff00000 	.word	0x3ff00000
 80133c4:	3e700000 	.word	0x3e700000
 80133c8:	41700000 	.word	0x41700000
 80133cc:	3fe00000 	.word	0x3fe00000
 80133d0:	08013f40 	.word	0x08013f40
 80133d4:	1acb      	subs	r3, r1, r3
 80133d6:	f8c8 3000 	str.w	r3, [r8]
 80133da:	462b      	mov	r3, r5
 80133dc:	e7df      	b.n	801339e <__kernel_rem_pio2+0x306>
 80133de:	1e62      	subs	r2, r4, #1
 80133e0:	ab0c      	add	r3, sp, #48	; 0x30
 80133e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133e6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80133ea:	a90c      	add	r1, sp, #48	; 0x30
 80133ec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80133f0:	e738      	b.n	8013264 <__kernel_rem_pio2+0x1cc>
 80133f2:	1e62      	subs	r2, r4, #1
 80133f4:	ab0c      	add	r3, sp, #48	; 0x30
 80133f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133fa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80133fe:	e7f4      	b.n	80133ea <__kernel_rem_pio2+0x352>
 8013400:	a90c      	add	r1, sp, #48	; 0x30
 8013402:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013406:	3b01      	subs	r3, #1
 8013408:	430a      	orrs	r2, r1
 801340a:	e788      	b.n	801331e <__kernel_rem_pio2+0x286>
 801340c:	3301      	adds	r3, #1
 801340e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8013412:	2900      	cmp	r1, #0
 8013414:	d0fa      	beq.n	801340c <__kernel_rem_pio2+0x374>
 8013416:	9a08      	ldr	r2, [sp, #32]
 8013418:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801341c:	446a      	add	r2, sp
 801341e:	3a98      	subs	r2, #152	; 0x98
 8013420:	9208      	str	r2, [sp, #32]
 8013422:	9a06      	ldr	r2, [sp, #24]
 8013424:	a920      	add	r1, sp, #128	; 0x80
 8013426:	18a2      	adds	r2, r4, r2
 8013428:	18e3      	adds	r3, r4, r3
 801342a:	f104 0801 	add.w	r8, r4, #1
 801342e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8013432:	9302      	str	r3, [sp, #8]
 8013434:	9b02      	ldr	r3, [sp, #8]
 8013436:	4543      	cmp	r3, r8
 8013438:	da04      	bge.n	8013444 <__kernel_rem_pio2+0x3ac>
 801343a:	461c      	mov	r4, r3
 801343c:	e6a2      	b.n	8013184 <__kernel_rem_pio2+0xec>
 801343e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013440:	2301      	movs	r3, #1
 8013442:	e7e4      	b.n	801340e <__kernel_rem_pio2+0x376>
 8013444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013446:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801344a:	f7ed f87b 	bl	8000544 <__aeabi_i2d>
 801344e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8013452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013454:	46ab      	mov	fp, r5
 8013456:	461c      	mov	r4, r3
 8013458:	f04f 0900 	mov.w	r9, #0
 801345c:	2600      	movs	r6, #0
 801345e:	2700      	movs	r7, #0
 8013460:	9b05      	ldr	r3, [sp, #20]
 8013462:	4599      	cmp	r9, r3
 8013464:	dd06      	ble.n	8013474 <__kernel_rem_pio2+0x3dc>
 8013466:	9b08      	ldr	r3, [sp, #32]
 8013468:	e8e3 6702 	strd	r6, r7, [r3], #8
 801346c:	f108 0801 	add.w	r8, r8, #1
 8013470:	9308      	str	r3, [sp, #32]
 8013472:	e7df      	b.n	8013434 <__kernel_rem_pio2+0x39c>
 8013474:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8013478:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801347c:	f7ed f8cc 	bl	8000618 <__aeabi_dmul>
 8013480:	4602      	mov	r2, r0
 8013482:	460b      	mov	r3, r1
 8013484:	4630      	mov	r0, r6
 8013486:	4639      	mov	r1, r7
 8013488:	f7ec ff10 	bl	80002ac <__adddf3>
 801348c:	f109 0901 	add.w	r9, r9, #1
 8013490:	4606      	mov	r6, r0
 8013492:	460f      	mov	r7, r1
 8013494:	e7e4      	b.n	8013460 <__kernel_rem_pio2+0x3c8>
 8013496:	3d01      	subs	r5, #1
 8013498:	e747      	b.n	801332a <__kernel_rem_pio2+0x292>
 801349a:	ec47 6b10 	vmov	d0, r6, r7
 801349e:	f1ca 0000 	rsb	r0, sl, #0
 80134a2:	f7ff fd49 	bl	8012f38 <scalbn>
 80134a6:	ec57 6b10 	vmov	r6, r7, d0
 80134aa:	4ba0      	ldr	r3, [pc, #640]	; (801372c <__kernel_rem_pio2+0x694>)
 80134ac:	ee10 0a10 	vmov	r0, s0
 80134b0:	2200      	movs	r2, #0
 80134b2:	4639      	mov	r1, r7
 80134b4:	f7ed fb36 	bl	8000b24 <__aeabi_dcmpge>
 80134b8:	b1f8      	cbz	r0, 80134fa <__kernel_rem_pio2+0x462>
 80134ba:	4b9d      	ldr	r3, [pc, #628]	; (8013730 <__kernel_rem_pio2+0x698>)
 80134bc:	2200      	movs	r2, #0
 80134be:	4630      	mov	r0, r6
 80134c0:	4639      	mov	r1, r7
 80134c2:	f7ed f8a9 	bl	8000618 <__aeabi_dmul>
 80134c6:	f7ed fb57 	bl	8000b78 <__aeabi_d2iz>
 80134ca:	4680      	mov	r8, r0
 80134cc:	f7ed f83a 	bl	8000544 <__aeabi_i2d>
 80134d0:	4b96      	ldr	r3, [pc, #600]	; (801372c <__kernel_rem_pio2+0x694>)
 80134d2:	2200      	movs	r2, #0
 80134d4:	f7ed f8a0 	bl	8000618 <__aeabi_dmul>
 80134d8:	460b      	mov	r3, r1
 80134da:	4602      	mov	r2, r0
 80134dc:	4639      	mov	r1, r7
 80134de:	4630      	mov	r0, r6
 80134e0:	f7ec fee2 	bl	80002a8 <__aeabi_dsub>
 80134e4:	f7ed fb48 	bl	8000b78 <__aeabi_d2iz>
 80134e8:	1c65      	adds	r5, r4, #1
 80134ea:	ab0c      	add	r3, sp, #48	; 0x30
 80134ec:	f10a 0a18 	add.w	sl, sl, #24
 80134f0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80134f4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80134f8:	e71f      	b.n	801333a <__kernel_rem_pio2+0x2a2>
 80134fa:	4630      	mov	r0, r6
 80134fc:	4639      	mov	r1, r7
 80134fe:	f7ed fb3b 	bl	8000b78 <__aeabi_d2iz>
 8013502:	ab0c      	add	r3, sp, #48	; 0x30
 8013504:	4625      	mov	r5, r4
 8013506:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801350a:	e716      	b.n	801333a <__kernel_rem_pio2+0x2a2>
 801350c:	ab0c      	add	r3, sp, #48	; 0x30
 801350e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013512:	f7ed f817 	bl	8000544 <__aeabi_i2d>
 8013516:	4632      	mov	r2, r6
 8013518:	463b      	mov	r3, r7
 801351a:	f7ed f87d 	bl	8000618 <__aeabi_dmul>
 801351e:	4642      	mov	r2, r8
 8013520:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8013524:	464b      	mov	r3, r9
 8013526:	4630      	mov	r0, r6
 8013528:	4639      	mov	r1, r7
 801352a:	f7ed f875 	bl	8000618 <__aeabi_dmul>
 801352e:	3c01      	subs	r4, #1
 8013530:	4606      	mov	r6, r0
 8013532:	460f      	mov	r7, r1
 8013534:	e713      	b.n	801335e <__kernel_rem_pio2+0x2c6>
 8013536:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801353a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801353e:	f7ed f86b 	bl	8000618 <__aeabi_dmul>
 8013542:	4602      	mov	r2, r0
 8013544:	460b      	mov	r3, r1
 8013546:	4648      	mov	r0, r9
 8013548:	4651      	mov	r1, sl
 801354a:	f7ec feaf 	bl	80002ac <__adddf3>
 801354e:	3701      	adds	r7, #1
 8013550:	4681      	mov	r9, r0
 8013552:	468a      	mov	sl, r1
 8013554:	9b00      	ldr	r3, [sp, #0]
 8013556:	429f      	cmp	r7, r3
 8013558:	dc02      	bgt.n	8013560 <__kernel_rem_pio2+0x4c8>
 801355a:	9b06      	ldr	r3, [sp, #24]
 801355c:	429f      	cmp	r7, r3
 801355e:	ddea      	ble.n	8013536 <__kernel_rem_pio2+0x49e>
 8013560:	9a06      	ldr	r2, [sp, #24]
 8013562:	ab48      	add	r3, sp, #288	; 0x120
 8013564:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8013568:	e9c6 9a00 	strd	r9, sl, [r6]
 801356c:	3c01      	subs	r4, #1
 801356e:	e6fa      	b.n	8013366 <__kernel_rem_pio2+0x2ce>
 8013570:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013572:	2b02      	cmp	r3, #2
 8013574:	dc0b      	bgt.n	801358e <__kernel_rem_pio2+0x4f6>
 8013576:	2b00      	cmp	r3, #0
 8013578:	dc39      	bgt.n	80135ee <__kernel_rem_pio2+0x556>
 801357a:	d05d      	beq.n	8013638 <__kernel_rem_pio2+0x5a0>
 801357c:	9b02      	ldr	r3, [sp, #8]
 801357e:	f003 0007 	and.w	r0, r3, #7
 8013582:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8013586:	ecbd 8b02 	vpop	{d8}
 801358a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801358e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013590:	2b03      	cmp	r3, #3
 8013592:	d1f3      	bne.n	801357c <__kernel_rem_pio2+0x4e4>
 8013594:	9b05      	ldr	r3, [sp, #20]
 8013596:	9500      	str	r5, [sp, #0]
 8013598:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801359c:	eb0d 0403 	add.w	r4, sp, r3
 80135a0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80135a4:	46a2      	mov	sl, r4
 80135a6:	9b00      	ldr	r3, [sp, #0]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	f1aa 0a08 	sub.w	sl, sl, #8
 80135ae:	dc69      	bgt.n	8013684 <__kernel_rem_pio2+0x5ec>
 80135b0:	46aa      	mov	sl, r5
 80135b2:	f1ba 0f01 	cmp.w	sl, #1
 80135b6:	f1a4 0408 	sub.w	r4, r4, #8
 80135ba:	f300 8083 	bgt.w	80136c4 <__kernel_rem_pio2+0x62c>
 80135be:	9c05      	ldr	r4, [sp, #20]
 80135c0:	ab48      	add	r3, sp, #288	; 0x120
 80135c2:	441c      	add	r4, r3
 80135c4:	2000      	movs	r0, #0
 80135c6:	2100      	movs	r1, #0
 80135c8:	2d01      	cmp	r5, #1
 80135ca:	f300 809a 	bgt.w	8013702 <__kernel_rem_pio2+0x66a>
 80135ce:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80135d2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80135d6:	f1bb 0f00 	cmp.w	fp, #0
 80135da:	f040 8098 	bne.w	801370e <__kernel_rem_pio2+0x676>
 80135de:	9b04      	ldr	r3, [sp, #16]
 80135e0:	e9c3 7800 	strd	r7, r8, [r3]
 80135e4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80135e8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80135ec:	e7c6      	b.n	801357c <__kernel_rem_pio2+0x4e4>
 80135ee:	9e05      	ldr	r6, [sp, #20]
 80135f0:	ab48      	add	r3, sp, #288	; 0x120
 80135f2:	441e      	add	r6, r3
 80135f4:	462c      	mov	r4, r5
 80135f6:	2000      	movs	r0, #0
 80135f8:	2100      	movs	r1, #0
 80135fa:	2c00      	cmp	r4, #0
 80135fc:	da33      	bge.n	8013666 <__kernel_rem_pio2+0x5ce>
 80135fe:	f1bb 0f00 	cmp.w	fp, #0
 8013602:	d036      	beq.n	8013672 <__kernel_rem_pio2+0x5da>
 8013604:	4602      	mov	r2, r0
 8013606:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801360a:	9c04      	ldr	r4, [sp, #16]
 801360c:	e9c4 2300 	strd	r2, r3, [r4]
 8013610:	4602      	mov	r2, r0
 8013612:	460b      	mov	r3, r1
 8013614:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8013618:	f7ec fe46 	bl	80002a8 <__aeabi_dsub>
 801361c:	ae4a      	add	r6, sp, #296	; 0x128
 801361e:	2401      	movs	r4, #1
 8013620:	42a5      	cmp	r5, r4
 8013622:	da29      	bge.n	8013678 <__kernel_rem_pio2+0x5e0>
 8013624:	f1bb 0f00 	cmp.w	fp, #0
 8013628:	d002      	beq.n	8013630 <__kernel_rem_pio2+0x598>
 801362a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801362e:	4619      	mov	r1, r3
 8013630:	9b04      	ldr	r3, [sp, #16]
 8013632:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013636:	e7a1      	b.n	801357c <__kernel_rem_pio2+0x4e4>
 8013638:	9c05      	ldr	r4, [sp, #20]
 801363a:	ab48      	add	r3, sp, #288	; 0x120
 801363c:	441c      	add	r4, r3
 801363e:	2000      	movs	r0, #0
 8013640:	2100      	movs	r1, #0
 8013642:	2d00      	cmp	r5, #0
 8013644:	da09      	bge.n	801365a <__kernel_rem_pio2+0x5c2>
 8013646:	f1bb 0f00 	cmp.w	fp, #0
 801364a:	d002      	beq.n	8013652 <__kernel_rem_pio2+0x5ba>
 801364c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013650:	4619      	mov	r1, r3
 8013652:	9b04      	ldr	r3, [sp, #16]
 8013654:	e9c3 0100 	strd	r0, r1, [r3]
 8013658:	e790      	b.n	801357c <__kernel_rem_pio2+0x4e4>
 801365a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801365e:	f7ec fe25 	bl	80002ac <__adddf3>
 8013662:	3d01      	subs	r5, #1
 8013664:	e7ed      	b.n	8013642 <__kernel_rem_pio2+0x5aa>
 8013666:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801366a:	f7ec fe1f 	bl	80002ac <__adddf3>
 801366e:	3c01      	subs	r4, #1
 8013670:	e7c3      	b.n	80135fa <__kernel_rem_pio2+0x562>
 8013672:	4602      	mov	r2, r0
 8013674:	460b      	mov	r3, r1
 8013676:	e7c8      	b.n	801360a <__kernel_rem_pio2+0x572>
 8013678:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801367c:	f7ec fe16 	bl	80002ac <__adddf3>
 8013680:	3401      	adds	r4, #1
 8013682:	e7cd      	b.n	8013620 <__kernel_rem_pio2+0x588>
 8013684:	e9da 8900 	ldrd	r8, r9, [sl]
 8013688:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801368c:	9b00      	ldr	r3, [sp, #0]
 801368e:	3b01      	subs	r3, #1
 8013690:	9300      	str	r3, [sp, #0]
 8013692:	4632      	mov	r2, r6
 8013694:	463b      	mov	r3, r7
 8013696:	4640      	mov	r0, r8
 8013698:	4649      	mov	r1, r9
 801369a:	f7ec fe07 	bl	80002ac <__adddf3>
 801369e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80136a2:	4602      	mov	r2, r0
 80136a4:	460b      	mov	r3, r1
 80136a6:	4640      	mov	r0, r8
 80136a8:	4649      	mov	r1, r9
 80136aa:	f7ec fdfd 	bl	80002a8 <__aeabi_dsub>
 80136ae:	4632      	mov	r2, r6
 80136b0:	463b      	mov	r3, r7
 80136b2:	f7ec fdfb 	bl	80002ac <__adddf3>
 80136b6:	ed9d 7b06 	vldr	d7, [sp, #24]
 80136ba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80136be:	ed8a 7b00 	vstr	d7, [sl]
 80136c2:	e770      	b.n	80135a6 <__kernel_rem_pio2+0x50e>
 80136c4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80136c8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80136cc:	4640      	mov	r0, r8
 80136ce:	4632      	mov	r2, r6
 80136d0:	463b      	mov	r3, r7
 80136d2:	4649      	mov	r1, r9
 80136d4:	f7ec fdea 	bl	80002ac <__adddf3>
 80136d8:	e9cd 0100 	strd	r0, r1, [sp]
 80136dc:	4602      	mov	r2, r0
 80136de:	460b      	mov	r3, r1
 80136e0:	4640      	mov	r0, r8
 80136e2:	4649      	mov	r1, r9
 80136e4:	f7ec fde0 	bl	80002a8 <__aeabi_dsub>
 80136e8:	4632      	mov	r2, r6
 80136ea:	463b      	mov	r3, r7
 80136ec:	f7ec fdde 	bl	80002ac <__adddf3>
 80136f0:	ed9d 7b00 	vldr	d7, [sp]
 80136f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80136f8:	ed84 7b00 	vstr	d7, [r4]
 80136fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013700:	e757      	b.n	80135b2 <__kernel_rem_pio2+0x51a>
 8013702:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013706:	f7ec fdd1 	bl	80002ac <__adddf3>
 801370a:	3d01      	subs	r5, #1
 801370c:	e75c      	b.n	80135c8 <__kernel_rem_pio2+0x530>
 801370e:	9b04      	ldr	r3, [sp, #16]
 8013710:	9a04      	ldr	r2, [sp, #16]
 8013712:	601f      	str	r7, [r3, #0]
 8013714:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8013718:	605c      	str	r4, [r3, #4]
 801371a:	609d      	str	r5, [r3, #8]
 801371c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013720:	60d3      	str	r3, [r2, #12]
 8013722:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013726:	6110      	str	r0, [r2, #16]
 8013728:	6153      	str	r3, [r2, #20]
 801372a:	e727      	b.n	801357c <__kernel_rem_pio2+0x4e4>
 801372c:	41700000 	.word	0x41700000
 8013730:	3e700000 	.word	0x3e700000
 8013734:	00000000 	.word	0x00000000

08013738 <floor>:
 8013738:	ec51 0b10 	vmov	r0, r1, d0
 801373c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013744:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8013748:	2e13      	cmp	r6, #19
 801374a:	ee10 5a10 	vmov	r5, s0
 801374e:	ee10 8a10 	vmov	r8, s0
 8013752:	460c      	mov	r4, r1
 8013754:	dc31      	bgt.n	80137ba <floor+0x82>
 8013756:	2e00      	cmp	r6, #0
 8013758:	da14      	bge.n	8013784 <floor+0x4c>
 801375a:	a333      	add	r3, pc, #204	; (adr r3, 8013828 <floor+0xf0>)
 801375c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013760:	f7ec fda4 	bl	80002ac <__adddf3>
 8013764:	2200      	movs	r2, #0
 8013766:	2300      	movs	r3, #0
 8013768:	f7ed f9e6 	bl	8000b38 <__aeabi_dcmpgt>
 801376c:	b138      	cbz	r0, 801377e <floor+0x46>
 801376e:	2c00      	cmp	r4, #0
 8013770:	da53      	bge.n	801381a <floor+0xe2>
 8013772:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8013776:	4325      	orrs	r5, r4
 8013778:	d052      	beq.n	8013820 <floor+0xe8>
 801377a:	4c2d      	ldr	r4, [pc, #180]	; (8013830 <floor+0xf8>)
 801377c:	2500      	movs	r5, #0
 801377e:	4621      	mov	r1, r4
 8013780:	4628      	mov	r0, r5
 8013782:	e024      	b.n	80137ce <floor+0x96>
 8013784:	4f2b      	ldr	r7, [pc, #172]	; (8013834 <floor+0xfc>)
 8013786:	4137      	asrs	r7, r6
 8013788:	ea01 0307 	and.w	r3, r1, r7
 801378c:	4303      	orrs	r3, r0
 801378e:	d01e      	beq.n	80137ce <floor+0x96>
 8013790:	a325      	add	r3, pc, #148	; (adr r3, 8013828 <floor+0xf0>)
 8013792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013796:	f7ec fd89 	bl	80002ac <__adddf3>
 801379a:	2200      	movs	r2, #0
 801379c:	2300      	movs	r3, #0
 801379e:	f7ed f9cb 	bl	8000b38 <__aeabi_dcmpgt>
 80137a2:	2800      	cmp	r0, #0
 80137a4:	d0eb      	beq.n	801377e <floor+0x46>
 80137a6:	2c00      	cmp	r4, #0
 80137a8:	bfbe      	ittt	lt
 80137aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80137ae:	4133      	asrlt	r3, r6
 80137b0:	18e4      	addlt	r4, r4, r3
 80137b2:	ea24 0407 	bic.w	r4, r4, r7
 80137b6:	2500      	movs	r5, #0
 80137b8:	e7e1      	b.n	801377e <floor+0x46>
 80137ba:	2e33      	cmp	r6, #51	; 0x33
 80137bc:	dd0b      	ble.n	80137d6 <floor+0x9e>
 80137be:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80137c2:	d104      	bne.n	80137ce <floor+0x96>
 80137c4:	ee10 2a10 	vmov	r2, s0
 80137c8:	460b      	mov	r3, r1
 80137ca:	f7ec fd6f 	bl	80002ac <__adddf3>
 80137ce:	ec41 0b10 	vmov	d0, r0, r1
 80137d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137d6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80137da:	f04f 37ff 	mov.w	r7, #4294967295
 80137de:	40df      	lsrs	r7, r3
 80137e0:	4238      	tst	r0, r7
 80137e2:	d0f4      	beq.n	80137ce <floor+0x96>
 80137e4:	a310      	add	r3, pc, #64	; (adr r3, 8013828 <floor+0xf0>)
 80137e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137ea:	f7ec fd5f 	bl	80002ac <__adddf3>
 80137ee:	2200      	movs	r2, #0
 80137f0:	2300      	movs	r3, #0
 80137f2:	f7ed f9a1 	bl	8000b38 <__aeabi_dcmpgt>
 80137f6:	2800      	cmp	r0, #0
 80137f8:	d0c1      	beq.n	801377e <floor+0x46>
 80137fa:	2c00      	cmp	r4, #0
 80137fc:	da0a      	bge.n	8013814 <floor+0xdc>
 80137fe:	2e14      	cmp	r6, #20
 8013800:	d101      	bne.n	8013806 <floor+0xce>
 8013802:	3401      	adds	r4, #1
 8013804:	e006      	b.n	8013814 <floor+0xdc>
 8013806:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801380a:	2301      	movs	r3, #1
 801380c:	40b3      	lsls	r3, r6
 801380e:	441d      	add	r5, r3
 8013810:	45a8      	cmp	r8, r5
 8013812:	d8f6      	bhi.n	8013802 <floor+0xca>
 8013814:	ea25 0507 	bic.w	r5, r5, r7
 8013818:	e7b1      	b.n	801377e <floor+0x46>
 801381a:	2500      	movs	r5, #0
 801381c:	462c      	mov	r4, r5
 801381e:	e7ae      	b.n	801377e <floor+0x46>
 8013820:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8013824:	e7ab      	b.n	801377e <floor+0x46>
 8013826:	bf00      	nop
 8013828:	8800759c 	.word	0x8800759c
 801382c:	7e37e43c 	.word	0x7e37e43c
 8013830:	bff00000 	.word	0xbff00000
 8013834:	000fffff 	.word	0x000fffff

08013838 <_init>:
 8013838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801383a:	bf00      	nop
 801383c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801383e:	bc08      	pop	{r3}
 8013840:	469e      	mov	lr, r3
 8013842:	4770      	bx	lr

08013844 <_fini>:
 8013844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013846:	bf00      	nop
 8013848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801384a:	bc08      	pop	{r3}
 801384c:	469e      	mov	lr, r3
 801384e:	4770      	bx	lr
