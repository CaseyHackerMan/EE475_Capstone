
EE_475_Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013850  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000730  080139e0  080139e0  000239e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014110  08014110  00030218  2**0
                  CONTENTS
  4 .ARM          00000008  08014110  08014110  00024110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014118  08014118  00030218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014118  08014118  00024118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801411c  0801411c  0002411c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  08014120  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030218  2**0
                  CONTENTS
 10 .bss          00000cc4  20000218  20000218  00030218  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000edc  20000edc  00030218  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c5f8  00000000  00000000  0003028b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003fe6  00000000  00000000  0004c883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001878  00000000  00000000  00050870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001312  00000000  00000000  000520e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025853  00000000  00000000  000533fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ebfa  00000000  00000000  00078c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6f1d  00000000  00000000  00097847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008440  00000000  00000000  0016e764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00176ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080139c8 	.word	0x080139c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	080139c8 	.word	0x080139c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <deg2rad>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


double deg2rad(double deg) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	ed87 0b00 	vstr	d0, [r7]
    return deg * M_PI / 180.0;
 8000ffa:	a30e      	add	r3, pc, #56	; (adr r3, 8001034 <deg2rad+0x44>)
 8000ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001000:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001004:	f7ff faf8 	bl	80005f8 <__aeabi_dmul>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <deg2rad+0x40>)
 8001016:	f7ff fc19 	bl	800084c <__aeabi_ddiv>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001022:	eeb0 0a47 	vmov.f32	s0, s14
 8001026:	eef0 0a67 	vmov.f32	s1, s15
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40668000 	.word	0x40668000
 8001034:	54442d18 	.word	0x54442d18
 8001038:	400921fb 	.word	0x400921fb
 800103c:	00000000 	.word	0x00000000

08001040 <update_target>:

void update_target() {
 8001040:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001044:	ed2d 8b02 	vpush	{d8}
 8001048:	b098      	sub	sp, #96	; 0x60
 800104a:	af00      	add	r7, sp, #0
    double lat, lon, tar_lat, tar_lon;

    // Convert latitude and longitude from degrees to radians
    lat = deg2rad(latitude);
 800104c:	4bba      	ldr	r3, [pc, #744]	; (8001338 <update_target+0x2f8>)
 800104e:	ed93 7b00 	vldr	d7, [r3]
 8001052:	eeb0 0a47 	vmov.f32	s0, s14
 8001056:	eef0 0a67 	vmov.f32	s1, s15
 800105a:	f7ff ffc9 	bl	8000ff0 <deg2rad>
 800105e:	ed87 0b16 	vstr	d0, [r7, #88]	; 0x58
    lon = deg2rad(longitude);
 8001062:	4bb6      	ldr	r3, [pc, #728]	; (800133c <update_target+0x2fc>)
 8001064:	ed93 7b00 	vldr	d7, [r3]
 8001068:	eeb0 0a47 	vmov.f32	s0, s14
 800106c:	eef0 0a67 	vmov.f32	s1, s15
 8001070:	f7ff ffbe 	bl	8000ff0 <deg2rad>
 8001074:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    tar_lat = deg2rad(target_latitude);
 8001078:	4bb1      	ldr	r3, [pc, #708]	; (8001340 <update_target+0x300>)
 800107a:	ed93 7b00 	vldr	d7, [r3]
 800107e:	eeb0 0a47 	vmov.f32	s0, s14
 8001082:	eef0 0a67 	vmov.f32	s1, s15
 8001086:	f7ff ffb3 	bl	8000ff0 <deg2rad>
 800108a:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
    tar_lon = deg2rad(target_longitude);
 800108e:	4bad      	ldr	r3, [pc, #692]	; (8001344 <update_target+0x304>)
 8001090:	ed93 7b00 	vldr	d7, [r3]
 8001094:	eeb0 0a47 	vmov.f32	s0, s14
 8001098:	eef0 0a67 	vmov.f32	s1, s15
 800109c:	f7ff ffa8 	bl	8000ff0 <deg2rad>
 80010a0:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
    double dlon = tar_lon - lon;
 80010a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80010a8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80010ac:	f7ff f8ec 	bl	8000288 <__aeabi_dsub>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double dlat = tar_lat - lat;
 80010b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80010bc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80010c0:	f7ff f8e2 	bl	8000288 <__aeabi_dsub>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    // Calculate the bearing(direction)
    double y = sin(dlon) * cos(tar_lat);
 80010cc:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80010d0:	f010 fa7e 	bl	80115d0 <sin>
 80010d4:	ec55 4b10 	vmov	r4, r5, d0
 80010d8:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80010dc:	f010 fa24 	bl	8011528 <cos>
 80010e0:	ec53 2b10 	vmov	r2, r3, d0
 80010e4:	4620      	mov	r0, r4
 80010e6:	4629      	mov	r1, r5
 80010e8:	f7ff fa86 	bl	80005f8 <__aeabi_dmul>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double x = cos(lat) * sin(tar_lat) - sin(lat) * cos(lat) * cos(dlon);
 80010f4:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 80010f8:	f010 fa16 	bl	8011528 <cos>
 80010fc:	ec55 4b10 	vmov	r4, r5, d0
 8001100:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8001104:	f010 fa64 	bl	80115d0 <sin>
 8001108:	ec53 2b10 	vmov	r2, r3, d0
 800110c:	4620      	mov	r0, r4
 800110e:	4629      	mov	r1, r5
 8001110:	f7ff fa72 	bl	80005f8 <__aeabi_dmul>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4614      	mov	r4, r2
 800111a:	461d      	mov	r5, r3
 800111c:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 8001120:	f010 fa56 	bl	80115d0 <sin>
 8001124:	ec59 8b10 	vmov	r8, r9, d0
 8001128:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 800112c:	f010 f9fc 	bl	8011528 <cos>
 8001130:	ec53 2b10 	vmov	r2, r3, d0
 8001134:	4640      	mov	r0, r8
 8001136:	4649      	mov	r1, r9
 8001138:	f7ff fa5e 	bl	80005f8 <__aeabi_dmul>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4690      	mov	r8, r2
 8001142:	4699      	mov	r9, r3
 8001144:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001148:	f010 f9ee 	bl	8011528 <cos>
 800114c:	ec53 2b10 	vmov	r2, r3, d0
 8001150:	4640      	mov	r0, r8
 8001152:	4649      	mov	r1, r9
 8001154:	f7ff fa50 	bl	80005f8 <__aeabi_dmul>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4620      	mov	r0, r4
 800115e:	4629      	mov	r1, r5
 8001160:	f7ff f892 	bl	8000288 <__aeabi_dsub>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double heading_rad = atan2(y, x);
 800116c:	ed97 1b08 	vldr	d1, [r7, #32]
 8001170:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001174:	f010 f90a 	bl	801138c <atan2>
 8001178:	ed87 0b06 	vstr	d0, [r7, #24]
    double heading_deg = heading_rad * (180 / M_PI);
 800117c:	a366      	add	r3, pc, #408	; (adr r3, 8001318 <update_target+0x2d8>)
 800117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001182:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001186:	f7ff fa37 	bl	80005f8 <__aeabi_dmul>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    target_heading = fmod(heading_deg + 360, 360);
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	4b6c      	ldr	r3, [pc, #432]	; (8001348 <update_target+0x308>)
 8001198:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800119c:	f7ff f876 	bl	800028c <__adddf3>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	ec43 2b17 	vmov	d7, r2, r3
 80011a8:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 8001320 <update_target+0x2e0>
 80011ac:	eeb0 0a47 	vmov.f32	s0, s14
 80011b0:	eef0 0a67 	vmov.f32	s1, s15
 80011b4:	f010 f8ec 	bl	8011390 <fmod>
 80011b8:	eeb0 7a40 	vmov.f32	s14, s0
 80011bc:	eef0 7a60 	vmov.f32	s15, s1
 80011c0:	4b62      	ldr	r3, [pc, #392]	; (800134c <update_target+0x30c>)
 80011c2:	ed83 7b00 	vstr	d7, [r3]

    // Calculate distance
    double a = pow(sin(dlat / 2), 2) + cos(lat) * cos(tar_lat) * pow(sin(dlon / 2), 2);
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ce:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80011d2:	f7ff fb3b 	bl	800084c <__aeabi_ddiv>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	ec43 2b17 	vmov	d7, r2, r3
 80011de:	eeb0 0a47 	vmov.f32	s0, s14
 80011e2:	eef0 0a67 	vmov.f32	s1, s15
 80011e6:	f010 f9f3 	bl	80115d0 <sin>
 80011ea:	eeb0 7a40 	vmov.f32	s14, s0
 80011ee:	eef0 7a60 	vmov.f32	s15, s1
 80011f2:	ed9f 1b4d 	vldr	d1, [pc, #308]	; 8001328 <update_target+0x2e8>
 80011f6:	eeb0 0a47 	vmov.f32	s0, s14
 80011fa:	eef0 0a67 	vmov.f32	s1, s15
 80011fe:	f010 f8f5 	bl	80113ec <pow>
 8001202:	ec59 8b10 	vmov	r8, r9, d0
 8001206:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 800120a:	f010 f98d 	bl	8011528 <cos>
 800120e:	ec55 4b10 	vmov	r4, r5, d0
 8001212:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8001216:	f010 f987 	bl	8011528 <cos>
 800121a:	ec53 2b10 	vmov	r2, r3, d0
 800121e:	4620      	mov	r0, r4
 8001220:	4629      	mov	r1, r5
 8001222:	f7ff f9e9 	bl	80005f8 <__aeabi_dmul>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4614      	mov	r4, r2
 800122c:	461d      	mov	r5, r3
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001236:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800123a:	f7ff fb07 	bl	800084c <__aeabi_ddiv>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	ec43 2b17 	vmov	d7, r2, r3
 8001246:	eeb0 0a47 	vmov.f32	s0, s14
 800124a:	eef0 0a67 	vmov.f32	s1, s15
 800124e:	f010 f9bf 	bl	80115d0 <sin>
 8001252:	eeb0 7a40 	vmov.f32	s14, s0
 8001256:	eef0 7a60 	vmov.f32	s15, s1
 800125a:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8001328 <update_target+0x2e8>
 800125e:	eeb0 0a47 	vmov.f32	s0, s14
 8001262:	eef0 0a67 	vmov.f32	s1, s15
 8001266:	f010 f8c1 	bl	80113ec <pow>
 800126a:	ec53 2b10 	vmov	r2, r3, d0
 800126e:	4620      	mov	r0, r4
 8001270:	4629      	mov	r1, r5
 8001272:	f7ff f9c1 	bl	80005f8 <__aeabi_dmul>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4640      	mov	r0, r8
 800127c:	4649      	mov	r1, r9
 800127e:	f7ff f805 	bl	800028c <__adddf3>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	e9c7 2302 	strd	r2, r3, [r7, #8]
    double c = 2 * atan2(sqrt(a), sqrt(1 - a));
 800128a:	ed97 0b02 	vldr	d0, [r7, #8]
 800128e:	f010 f91d 	bl	80114cc <sqrt>
 8001292:	eeb0 8a40 	vmov.f32	s16, s0
 8001296:	eef0 8a60 	vmov.f32	s17, s1
 800129a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800129e:	f04f 0000 	mov.w	r0, #0
 80012a2:	492b      	ldr	r1, [pc, #172]	; (8001350 <update_target+0x310>)
 80012a4:	f7fe fff0 	bl	8000288 <__aeabi_dsub>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	ec43 2b17 	vmov	d7, r2, r3
 80012b0:	eeb0 0a47 	vmov.f32	s0, s14
 80012b4:	eef0 0a67 	vmov.f32	s1, s15
 80012b8:	f010 f908 	bl	80114cc <sqrt>
 80012bc:	eeb0 7a40 	vmov.f32	s14, s0
 80012c0:	eef0 7a60 	vmov.f32	s15, s1
 80012c4:	eeb0 1a47 	vmov.f32	s2, s14
 80012c8:	eef0 1a67 	vmov.f32	s3, s15
 80012cc:	eeb0 0a48 	vmov.f32	s0, s16
 80012d0:	eef0 0a68 	vmov.f32	s1, s17
 80012d4:	f010 f85a 	bl	801138c <atan2>
 80012d8:	ec51 0b10 	vmov	r0, r1, d0
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	f7fe ffd4 	bl	800028c <__adddf3>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	e9c7 2300 	strd	r2, r3, [r7]
    target_distance = 6371000 * c;
 80012ec:	a310      	add	r3, pc, #64	; (adr r3, 8001330 <update_target+0x2f0>)
 80012ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012f6:	f7ff f97f 	bl	80005f8 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4915      	ldr	r1, [pc, #84]	; (8001354 <update_target+0x314>)
 8001300:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001304:	bf00      	nop
 8001306:	3760      	adds	r7, #96	; 0x60
 8001308:	46bd      	mov	sp, r7
 800130a:	ecbd 8b02 	vpop	{d8}
 800130e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001312:	bf00      	nop
 8001314:	f3af 8000 	nop.w
 8001318:	1a63c1f8 	.word	0x1a63c1f8
 800131c:	404ca5dc 	.word	0x404ca5dc
 8001320:	00000000 	.word	0x00000000
 8001324:	40768000 	.word	0x40768000
 8001328:	00000000 	.word	0x00000000
 800132c:	40000000 	.word	0x40000000
 8001330:	00000000 	.word	0x00000000
 8001334:	41584dae 	.word	0x41584dae
 8001338:	20000468 	.word	0x20000468
 800133c:	20000470 	.word	0x20000470
 8001340:	20000000 	.word	0x20000000
 8001344:	20000008 	.word	0x20000008
 8001348:	40768000 	.word	0x40768000
 800134c:	20000488 	.word	0x20000488
 8001350:	3ff00000 	.word	0x3ff00000
 8001354:	20000490 	.word	0x20000490

08001358 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	if (huart == &huart3) {
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a28      	ldr	r2, [pc, #160]	; (8001404 <HAL_UART_RxCpltCallback+0xac>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d122      	bne.n	80013ae <HAL_UART_RxCpltCallback+0x56>
		uint8_t c = UART3_Rx_buf[UART3_Rx_count++];
 8001368:	4b27      	ldr	r3, [pc, #156]	; (8001408 <HAL_UART_RxCpltCallback+0xb0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	1c5a      	adds	r2, r3, #1
 800136e:	4926      	ldr	r1, [pc, #152]	; (8001408 <HAL_UART_RxCpltCallback+0xb0>)
 8001370:	600a      	str	r2, [r1, #0]
 8001372:	4a26      	ldr	r2, [pc, #152]	; (800140c <HAL_UART_RxCpltCallback+0xb4>)
 8001374:	5cd3      	ldrb	r3, [r2, r3]
 8001376:	73bb      	strb	r3, [r7, #14]

		if(c == '\n' || UART3_Rx_count >= 100) {
 8001378:	7bbb      	ldrb	r3, [r7, #14]
 800137a:	2b0a      	cmp	r3, #10
 800137c:	d003      	beq.n	8001386 <HAL_UART_RxCpltCallback+0x2e>
 800137e:	4b22      	ldr	r3, [pc, #136]	; (8001408 <HAL_UART_RxCpltCallback+0xb0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b63      	cmp	r3, #99	; 0x63
 8001384:	dd08      	ble.n	8001398 <HAL_UART_RxCpltCallback+0x40>
			parse_GPS(UART3_Rx_buf, UART3_Rx_count);
 8001386:	4b20      	ldr	r3, [pc, #128]	; (8001408 <HAL_UART_RxCpltCallback+0xb0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4619      	mov	r1, r3
 800138c:	481f      	ldr	r0, [pc, #124]	; (800140c <HAL_UART_RxCpltCallback+0xb4>)
 800138e:	f000 f859 	bl	8001444 <parse_GPS>
			UART3_Rx_count = 0;
 8001392:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <HAL_UART_RxCpltCallback+0xb0>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, UART3_Rx_buf + UART3_Rx_count, 1);
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <HAL_UART_RxCpltCallback+0xb0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	4b1b      	ldr	r3, [pc, #108]	; (800140c <HAL_UART_RxCpltCallback+0xb4>)
 80013a0:	4413      	add	r3, r2
 80013a2:	2201      	movs	r2, #1
 80013a4:	4619      	mov	r1, r3
 80013a6:	4817      	ldr	r0, [pc, #92]	; (8001404 <HAL_UART_RxCpltCallback+0xac>)
 80013a8:	f006 ff7b 	bl	80082a2 <HAL_UART_Receive_IT>
			UART5_Rx_count = 0;
		}

		HAL_UART_Receive_IT(&huart5, UART5_Rx_buf + UART5_Rx_count, 1);
	}
}
 80013ac:	e025      	b.n	80013fa <HAL_UART_RxCpltCallback+0xa2>
	} else if (huart == &huart5) {
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a17      	ldr	r2, [pc, #92]	; (8001410 <HAL_UART_RxCpltCallback+0xb8>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d121      	bne.n	80013fa <HAL_UART_RxCpltCallback+0xa2>
		uint8_t c = UART5_Rx_buf[UART5_Rx_count++];
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <HAL_UART_RxCpltCallback+0xbc>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	4915      	ldr	r1, [pc, #84]	; (8001414 <HAL_UART_RxCpltCallback+0xbc>)
 80013be:	600a      	str	r2, [r1, #0]
 80013c0:	4a15      	ldr	r2, [pc, #84]	; (8001418 <HAL_UART_RxCpltCallback+0xc0>)
 80013c2:	5cd3      	ldrb	r3, [r2, r3]
 80013c4:	73fb      	strb	r3, [r7, #15]
		if(c == '\n' || UART5_Rx_count >= 100) {
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	2b0a      	cmp	r3, #10
 80013ca:	d003      	beq.n	80013d4 <HAL_UART_RxCpltCallback+0x7c>
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <HAL_UART_RxCpltCallback+0xbc>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b63      	cmp	r3, #99	; 0x63
 80013d2:	dd08      	ble.n	80013e6 <HAL_UART_RxCpltCallback+0x8e>
			parse_lora(UART5_Rx_buf, UART5_Rx_count);
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <HAL_UART_RxCpltCallback+0xbc>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	480f      	ldr	r0, [pc, #60]	; (8001418 <HAL_UART_RxCpltCallback+0xc0>)
 80013dc:	f000 f81e 	bl	800141c <parse_lora>
			UART5_Rx_count = 0;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <HAL_UART_RxCpltCallback+0xbc>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart5, UART5_Rx_buf + UART5_Rx_count, 1);
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_UART_RxCpltCallback+0xbc>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_UART_RxCpltCallback+0xc0>)
 80013ee:	4413      	add	r3, r2
 80013f0:	2201      	movs	r2, #1
 80013f2:	4619      	mov	r1, r3
 80013f4:	4806      	ldr	r0, [pc, #24]	; (8001410 <HAL_UART_RxCpltCallback+0xb8>)
 80013f6:	f006 ff54 	bl	80082a2 <HAL_UART_Receive_IT>
}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200003b8 	.word	0x200003b8
 8001408:	20000560 	.word	0x20000560
 800140c:	200004fc 	.word	0x200004fc
 8001410:	20000328 	.word	0x20000328
 8001414:	200005c8 	.word	0x200005c8
 8001418:	20000564 	.word	0x20000564

0800141c <parse_lora>:

void parse_lora(uint8_t* buf, int count) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, buf, count, HAL_MAX_DELAY);
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	b29a      	uxth	r2, r3
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4803      	ldr	r0, [pc, #12]	; (8001440 <parse_lora+0x24>)
 8001432:	f006 feab 	bl	800818c <HAL_UART_Transmit>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000370 	.word	0x20000370

08001444 <parse_GPS>:

void parse_GPS(uint8_t* buf, int count) {
 8001444:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001448:	b092      	sub	sp, #72	; 0x48
 800144a:	af02      	add	r7, sp, #8
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	6039      	str	r1, [r7, #0]
	// $GPRMC,011725.00,A,4739.21106,N,12218.32692,W,0.019,,190224,,,D*6A
	// 0      1         2 3          4 5           6

	if (count <= 6 || strncmp((char*) buf, "$GPRMC", 6)) return;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	2b06      	cmp	r3, #6
 8001454:	f340 80ba 	ble.w	80015cc <parse_GPS+0x188>
 8001458:	2206      	movs	r2, #6
 800145a:	495f      	ldr	r1, [pc, #380]	; (80015d8 <parse_GPS+0x194>)
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f00d fa24 	bl	800e8aa <strncmp>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	f040 80b1 	bne.w	80015cc <parse_GPS+0x188>

	int i = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t* items[11];
	uint8_t* ptr = buf;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	63bb      	str	r3, [r7, #56]	; 0x38
	items[i++] = ptr;
 8001472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001474:	1c5a      	adds	r2, r3, #1
 8001476:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	3340      	adds	r3, #64	; 0x40
 800147c:	443b      	add	r3, r7
 800147e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001480:	f843 2c34 	str.w	r2, [r3, #-52]

	while (ptr < buf+count) {
 8001484:	e016      	b.n	80014b4 <parse_GPS+0x70>
		if (*ptr == ',') {
 8001486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b2c      	cmp	r3, #44	; 0x2c
 800148c:	d10f      	bne.n	80014ae <parse_GPS+0x6a>
			*ptr = '\0';
 800148e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
			if (i < 11) items[i++] = ptr+1;
 8001494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001496:	2b0a      	cmp	r3, #10
 8001498:	dc13      	bgt.n	80014c2 <parse_GPS+0x7e>
 800149a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800149c:	1c5a      	adds	r2, r3, #1
 800149e:	63fa      	str	r2, [r7, #60]	; 0x3c
 80014a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014a2:	3201      	adds	r2, #1
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	3340      	adds	r3, #64	; 0x40
 80014a8:	443b      	add	r3, r7
 80014aa:	f843 2c34 	str.w	r2, [r3, #-52]
			else break;
		}
		ptr++;
 80014ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014b0:	3301      	adds	r3, #1
 80014b2:	63bb      	str	r3, [r7, #56]	; 0x38
	while (ptr < buf+count) {
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014bc:	429a      	cmp	r2, r3
 80014be:	d3e2      	bcc.n	8001486 <parse_GPS+0x42>
 80014c0:	e000      	b.n	80014c4 <parse_GPS+0x80>
			else break;
 80014c2:	bf00      	nop
	}

	if (*items[2] == 'A') time = atof((char*) items[1]);
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b41      	cmp	r3, #65	; 0x41
 80014ca:	d10a      	bne.n	80014e2 <parse_GPS+0x9e>
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f00b fb6a 	bl	800cba8 <atof>
 80014d4:	eeb0 7a40 	vmov.f32	s14, s0
 80014d8:	eef0 7a60 	vmov.f32	s15, s1
 80014dc:	4b3f      	ldr	r3, [pc, #252]	; (80015dc <parse_GPS+0x198>)
 80014de:	ed83 7b00 	vstr	d7, [r3]
	if (*items[4] == 'N') {
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b4e      	cmp	r3, #78	; 0x4e
 80014e8:	d10e      	bne.n	8001508 <parse_GPS+0xc4>
		GPS_location_ready = 1;
 80014ea:	4b3d      	ldr	r3, [pc, #244]	; (80015e0 <parse_GPS+0x19c>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	701a      	strb	r2, [r3, #0]
		latitude = format_NMEA(items[3]);
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f884 	bl	8001600 <format_NMEA>
 80014f8:	eeb0 7a40 	vmov.f32	s14, s0
 80014fc:	eef0 7a60 	vmov.f32	s15, s1
 8001500:	4b38      	ldr	r3, [pc, #224]	; (80015e4 <parse_GPS+0x1a0>)
 8001502:	ed83 7b00 	vstr	d7, [r3]
 8001506:	e012      	b.n	800152e <parse_GPS+0xea>
	} else if (*items[4] == 'S') {
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b53      	cmp	r3, #83	; 0x53
 800150e:	d10e      	bne.n	800152e <parse_GPS+0xea>
		GPS_location_ready = 1;
 8001510:	4b33      	ldr	r3, [pc, #204]	; (80015e0 <parse_GPS+0x19c>)
 8001512:	2201      	movs	r2, #1
 8001514:	701a      	strb	r2, [r3, #0]
		latitude = -format_NMEA(items[3]);
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	4618      	mov	r0, r3
 800151a:	f000 f871 	bl	8001600 <format_NMEA>
 800151e:	ec53 2b10 	vmov	r2, r3, d0
 8001522:	4690      	mov	r8, r2
 8001524:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001528:	4b2e      	ldr	r3, [pc, #184]	; (80015e4 <parse_GPS+0x1a0>)
 800152a:	e9c3 8900 	strd	r8, r9, [r3]
	}
	if (*items[6] == 'E') {
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b45      	cmp	r3, #69	; 0x45
 8001534:	d10e      	bne.n	8001554 <parse_GPS+0x110>
		GPS_location_ready = 1;
 8001536:	4b2a      	ldr	r3, [pc, #168]	; (80015e0 <parse_GPS+0x19c>)
 8001538:	2201      	movs	r2, #1
 800153a:	701a      	strb	r2, [r3, #0]
		longitude = format_NMEA(items[5]);
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	4618      	mov	r0, r3
 8001540:	f000 f85e 	bl	8001600 <format_NMEA>
 8001544:	eeb0 7a40 	vmov.f32	s14, s0
 8001548:	eef0 7a60 	vmov.f32	s15, s1
 800154c:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <parse_GPS+0x1a4>)
 800154e:	ed83 7b00 	vstr	d7, [r3]
 8001552:	e012      	b.n	800157a <parse_GPS+0x136>
	} else if (*items[6] == 'W') {
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b57      	cmp	r3, #87	; 0x57
 800155a:	d10e      	bne.n	800157a <parse_GPS+0x136>
		GPS_location_ready = 1;
 800155c:	4b20      	ldr	r3, [pc, #128]	; (80015e0 <parse_GPS+0x19c>)
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
		longitude = -format_NMEA(items[5]);
 8001562:	6a3b      	ldr	r3, [r7, #32]
 8001564:	4618      	mov	r0, r3
 8001566:	f000 f84b 	bl	8001600 <format_NMEA>
 800156a:	ec53 2b10 	vmov	r2, r3, d0
 800156e:	4614      	mov	r4, r2
 8001570:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001574:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <parse_GPS+0x1a4>)
 8001576:	e9c3 4500 	strd	r4, r5, [r3]
	}
	if (*items[8] != '\0') {
 800157a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00f      	beq.n	80015a2 <parse_GPS+0x15e>
		GPS_heading_ready = 1;
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <parse_GPS+0x1a8>)
 8001584:	2201      	movs	r2, #1
 8001586:	701a      	strb	r2, [r3, #0]
		GPS_heading = atof((char*) items[8]);
 8001588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158a:	4618      	mov	r0, r3
 800158c:	f00b fb0c 	bl	800cba8 <atof>
 8001590:	ec53 2b10 	vmov	r2, r3, d0
 8001594:	4610      	mov	r0, r2
 8001596:	4619      	mov	r1, r3
 8001598:	f7ff fb26 	bl	8000be8 <__aeabi_d2f>
 800159c:	4603      	mov	r3, r0
 800159e:	4a14      	ldr	r2, [pc, #80]	; (80015f0 <parse_GPS+0x1ac>)
 80015a0:	6013      	str	r3, [r2, #0]
	}

	sprintf((char*) UART2_Tx_buf, "T_Head=%f, C_Head=%f\r\n",
 80015a2:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <parse_GPS+0x1b0>)
 80015a4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <parse_GPS+0x1ac>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe ffcb 	bl	8000548 <__aeabi_f2d>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	e9cd 2300 	strd	r2, r3, [sp]
 80015ba:	4622      	mov	r2, r4
 80015bc:	462b      	mov	r3, r5
 80015be:	490e      	ldr	r1, [pc, #56]	; (80015f8 <parse_GPS+0x1b4>)
 80015c0:	480e      	ldr	r0, [pc, #56]	; (80015fc <parse_GPS+0x1b8>)
 80015c2:	f00d f907 	bl	800e7d4 <siprintf>
				target_heading, GPS_heading);
	printd();
 80015c6:	f000 f8f7 	bl	80017b8 <printd>
 80015ca:	e000      	b.n	80015ce <parse_GPS+0x18a>
	if (count <= 6 || strncmp((char*) buf, "$GPRMC", 6)) return;
 80015cc:	bf00      	nop
}
 80015ce:	3740      	adds	r7, #64	; 0x40
 80015d0:	46bd      	mov	sp, r7
 80015d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015d6:	bf00      	nop
 80015d8:	080139e0 	.word	0x080139e0
 80015dc:	20000460 	.word	0x20000460
 80015e0:	20000481 	.word	0x20000481
 80015e4:	20000468 	.word	0x20000468
 80015e8:	20000470 	.word	0x20000470
 80015ec:	20000480 	.word	0x20000480
 80015f0:	20000478 	.word	0x20000478
 80015f4:	20000488 	.word	0x20000488
 80015f8:	080139e8 	.word	0x080139e8
 80015fc:	20000498 	.word	0x20000498

08001600 <format_NMEA>:

double format_NMEA(uint8_t* buf) {
 8001600:	b5b0      	push	{r4, r5, r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	double val = atof(buf);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f00b facd 	bl	800cba8 <atof>
 800160e:	ed87 0b04 	vstr	d0, [r7, #16]
	int deg = val/100;
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	4b1d      	ldr	r3, [pc, #116]	; (800168c <format_NMEA+0x8c>)
 8001618:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800161c:	f7ff f916 	bl	800084c <__aeabi_ddiv>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	f7ff fa96 	bl	8000b58 <__aeabi_d2iz>
 800162c:	4603      	mov	r3, r0
 800162e:	60fb      	str	r3, [r7, #12]
	return (val - deg*100)/60 + deg;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2264      	movs	r2, #100	; 0x64
 8001634:	fb02 f303 	mul.w	r3, r2, r3
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ff73 	bl	8000524 <__aeabi_i2d>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001646:	f7fe fe1f 	bl	8000288 <__aeabi_dsub>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <format_NMEA+0x90>)
 8001658:	f7ff f8f8 	bl	800084c <__aeabi_ddiv>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4614      	mov	r4, r2
 8001662:	461d      	mov	r5, r3
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f7fe ff5d 	bl	8000524 <__aeabi_i2d>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4620      	mov	r0, r4
 8001670:	4629      	mov	r1, r5
 8001672:	f7fe fe0b 	bl	800028c <__adddf3>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	ec43 2b17 	vmov	d7, r2, r3
}
 800167e:	eeb0 0a47 	vmov.f32	s0, s14
 8001682:	eef0 0a67 	vmov.f32	s1, s15
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bdb0      	pop	{r4, r5, r7, pc}
 800168c:	40590000 	.word	0x40590000
 8001690:	404e0000 	.word	0x404e0000

08001694 <update_IMU_heading>:
	sprintf((char*) UART2_Tx_buf, "Time=%d:%d:%d Latitude=%f, Longitude=%f\r\n",
			Hours, Min, Sec, Lat, Long);
	printd();
}

float update_IMU_heading() {
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af04      	add	r7, sp, #16
	uint8_t data[2];
	HAL_I2C_Mem_Read(&hi2c1, BNO055_ADDRESS << 1, BNO055_ADDR_HEADING, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	9302      	str	r3, [sp, #8]
 80016a0:	2302      	movs	r3, #2
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2301      	movs	r3, #1
 80016aa:	221a      	movs	r2, #26
 80016ac:	2150      	movs	r1, #80	; 0x50
 80016ae:	480d      	ldr	r0, [pc, #52]	; (80016e4 <update_IMU_heading+0x50>)
 80016b0:	f004 fb30 	bl	8005d14 <HAL_I2C_Mem_Read>
	IMU_heading = (float)((int16_t)(data[1] << 8 | data[0])) / 16.0;
 80016b4:	797b      	ldrb	r3, [r7, #5]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	b21a      	sxth	r2, r3
 80016ba:	793b      	ldrb	r3, [r7, #4]
 80016bc:	b21b      	sxth	r3, r3
 80016be:	4313      	orrs	r3, r2
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	ee07 3a90 	vmov	s15, r3
 80016c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ca:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80016ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016d2:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <update_IMU_heading+0x54>)
 80016d4:	edc3 7a00 	vstr	s15, [r3]
}
 80016d8:	bf00      	nop
 80016da:	eeb0 0a67 	vmov.f32	s0, s15
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000234 	.word	0x20000234
 80016e8:	2000047c 	.word	0x2000047c

080016ec <set_steering>:
//	double siny_cosp = 2 * (qw * qz + qx * qy);
//	double cosy_cosp = 1 - 2 * (qy * qy + qz * qz);
//	return atan2(siny_cosp, cosy_cosp)*180/3.14159265;
//}

void set_steering(float direction) {
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	ed87 0a01 	vstr	s0, [r7, #4]
	int pulse = direction*500+1500;
 80016f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016fa:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001744 <set_steering+0x58>
 80016fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001702:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001748 <set_steering+0x5c>
 8001706:	ee77 7a87 	vadd.f32	s15, s15, s14
 800170a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800170e:	ee17 3a90 	vmov	r3, s15
 8001712:	60fb      	str	r3, [r7, #12]
	if (pulse > 2000) pulse = 2000;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800171a:	dd02      	ble.n	8001722 <set_steering+0x36>
 800171c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001720:	60fb      	str	r3, [r7, #12]
	if (pulse < 1000) pulse = 1000;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001728:	da02      	bge.n	8001730 <set_steering+0x44>
 800172a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172e:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <set_steering+0x60>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001738:	bf00      	nop
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	43fa0000 	.word	0x43fa0000
 8001748:	44bb8000 	.word	0x44bb8000
 800174c:	200002e0 	.word	0x200002e0

08001750 <set_speed>:

void set_speed(float speed) {
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	ed87 0a01 	vstr	s0, [r7, #4]
	int pulse = speed*200+1500;
 800175a:	edd7 7a01 	vldr	s15, [r7, #4]
 800175e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80017ac <set_speed+0x5c>
 8001762:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001766:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80017b0 <set_speed+0x60>
 800176a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800176e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001772:	ee17 3a90 	vmov	r3, s15
 8001776:	60fb      	str	r3, [r7, #12]
	if (pulse > 1700) pulse = 1700;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800177e:	4293      	cmp	r3, r2
 8001780:	dd02      	ble.n	8001788 <set_speed+0x38>
 8001782:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8001786:	60fb      	str	r3, [r7, #12]
	if (pulse < 1500) pulse = 1500;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f240 52db 	movw	r2, #1499	; 0x5db
 800178e:	4293      	cmp	r3, r2
 8001790:	dc02      	bgt.n	8001798 <set_speed+0x48>
 8001792:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001796:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse);
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <set_speed+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	639a      	str	r2, [r3, #56]	; 0x38
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	43480000 	.word	0x43480000
 80017b0:	44bb8000 	.word	0x44bb8000
 80017b4:	200002e0 	.word	0x200002e0

080017b8 <printd>:

void printd() {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, UART2_Tx_buf, strlen((char*) UART2_Tx_buf), HAL_MAX_DELAY);
 80017bc:	4806      	ldr	r0, [pc, #24]	; (80017d8 <printd+0x20>)
 80017be:	f7fe fd57 	bl	8000270 <strlen>
 80017c2:	4603      	mov	r3, r0
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ca:	4903      	ldr	r1, [pc, #12]	; (80017d8 <printd+0x20>)
 80017cc:	4803      	ldr	r0, [pc, #12]	; (80017dc <printd+0x24>)
 80017ce:	f006 fcdd 	bl	800818c <HAL_UART_Transmit>
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000498 	.word	0x20000498
 80017dc:	20000370 	.word	0x20000370

080017e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017e0:	b5b0      	push	{r4, r5, r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017e6:	f001 f863 	bl	80028b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ea:	f000 f981 	bl	8001af0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ee:	f000 fb9b 	bl	8001f28 <MX_GPIO_Init>
  MX_DMA_Init();
 80017f2:	f000 fb79 	bl	8001ee8 <MX_DMA_Init>
  MX_I2C1_Init();
 80017f6:	f000 f9e5 	bl	8001bc4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80017fa:	f000 fa11 	bl	8001c20 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80017fe:	f00a fec9 	bl	800c594 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8001802:	f000 fb1d 	bl	8001e40 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001806:	f000 fa41 	bl	8001c8c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800180a:	f000 fb43 	bl	8001e94 <MX_USART3_UART_Init>
  MX_UART5_Init();
 800180e:	f000 faed 	bl	8001dec <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  int i = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  char run = 0; // wait for GPS fix
 8001816:	2300      	movs	r3, #0
 8001818:	74fb      	strb	r3, [r7, #19]
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800181a:	2100      	movs	r1, #0
 800181c:	489e      	ldr	r0, [pc, #632]	; (8001a98 <main+0x2b8>)
 800181e:	f005 fe29 	bl	8007474 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001822:	2104      	movs	r1, #4
 8001824:	489c      	ldr	r0, [pc, #624]	; (8001a98 <main+0x2b8>)
 8001826:	f005 fe25 	bl	8007474 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, UART3_Rx_buf, 1);
 800182a:	2201      	movs	r2, #1
 800182c:	499b      	ldr	r1, [pc, #620]	; (8001a9c <main+0x2bc>)
 800182e:	489c      	ldr	r0, [pc, #624]	; (8001aa0 <main+0x2c0>)
 8001830:	f006 fd37 	bl	80082a2 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart5, UART5_Rx_buf, 1);
 8001834:	2201      	movs	r2, #1
 8001836:	499b      	ldr	r1, [pc, #620]	; (8001aa4 <main+0x2c4>)
 8001838:	489b      	ldr	r0, [pc, #620]	; (8001aa8 <main+0x2c8>)
 800183a:	f006 fd32 	bl	80082a2 <HAL_UART_Receive_IT>
  uint8_t mode = BNO055_MODE_IMU;
 800183e:	2308      	movs	r3, #8
 8001840:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Mem_Write(&hi2c1, BNO055_ADDRESS << 1, BNO055_ADDR_OPRMODE, I2C_MEMADD_SIZE_8BIT, &mode, 1, HAL_MAX_DELAY);
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
 8001846:	9302      	str	r3, [sp, #8]
 8001848:	2301      	movs	r3, #1
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	1cfb      	adds	r3, r7, #3
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2301      	movs	r3, #1
 8001852:	223d      	movs	r2, #61	; 0x3d
 8001854:	2150      	movs	r1, #80	; 0x50
 8001856:	4895      	ldr	r0, [pc, #596]	; (8001aac <main+0x2cc>)
 8001858:	f004 f962 	bl	8005b20 <HAL_I2C_Mem_Write>
  HAL_UART_Transmit(&huart2, (uint8_t*) "Hello!\r\n", 8, HAL_MAX_DELAY);
 800185c:	f04f 33ff 	mov.w	r3, #4294967295
 8001860:	2208      	movs	r2, #8
 8001862:	4993      	ldr	r1, [pc, #588]	; (8001ab0 <main+0x2d0>)
 8001864:	4893      	ldr	r0, [pc, #588]	; (8001ab4 <main+0x2d4>)
 8001866:	f006 fc91 	bl	800818c <HAL_UART_Transmit>
  set_steering(0);
 800186a:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8001ab8 <main+0x2d8>
 800186e:	f7ff ff3d 	bl	80016ec <set_steering>
  set_speed(0);
 8001872:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8001ab8 <main+0x2d8>
 8001876:	f7ff ff6b 	bl	8001750 <set_speed>
  HAL_Delay(2000);
 800187a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800187e:	f001 f889 	bl	8002994 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001882:	f00a fead 	bl	800c5e0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    update_IMU_heading();
 8001886:	f7ff ff05 	bl	8001694 <update_IMU_heading>
    // sprintf((char*) UART2_Tx_buf, "%f %f %f\r\n", latitude, longitude, rel_heading);
    // printd();

    if (GPS_location_ready) {
 800188a:	4b8c      	ldr	r3, [pc, #560]	; (8001abc <main+0x2dc>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d015      	beq.n	80018be <main+0xde>
    	GPS_location_ready = 0;
 8001892:	4b8a      	ldr	r3, [pc, #552]	; (8001abc <main+0x2dc>)
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
    	update_target();
 8001898:	f7ff fbd2 	bl	8001040 <update_target>
    	run = (target_distance > 1);
 800189c:	4b88      	ldr	r3, [pc, #544]	; (8001ac0 <main+0x2e0>)
 800189e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018a2:	2301      	movs	r3, #1
 80018a4:	461c      	mov	r4, r3
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	4b86      	ldr	r3, [pc, #536]	; (8001ac4 <main+0x2e4>)
 80018ac:	f7ff f934 	bl	8000b18 <__aeabi_dcmpgt>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <main+0xda>
 80018b6:	2300      	movs	r3, #0
 80018b8:	461c      	mov	r4, r3
 80018ba:	b2e3      	uxtb	r3, r4
 80018bc:	74fb      	strb	r3, [r7, #19]
    }

    if (run) {
 80018be:	7cfb      	ldrb	r3, [r7, #19]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 80dd 	beq.w	8001a80 <main+0x2a0>
    	float heading = IMU_heading + IMU_heading_offset;
 80018c6:	4b80      	ldr	r3, [pc, #512]	; (8001ac8 <main+0x2e8>)
 80018c8:	ed93 7a00 	vldr	s14, [r3]
 80018cc:	4b7f      	ldr	r3, [pc, #508]	; (8001acc <main+0x2ec>)
 80018ce:	edd3 7a00 	vldr	s15, [r3]
 80018d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d6:	edc7 7a03 	vstr	s15, [r7, #12]
    	if (heading >= 360) heading -= 360;
 80018da:	edd7 7a03 	vldr	s15, [r7, #12]
 80018de:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8001ad0 <main+0x2f0>
 80018e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ea:	db07      	blt.n	80018fc <main+0x11c>
 80018ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80018f0:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8001ad0 <main+0x2f0>
 80018f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018f8:	edc7 7a03 	vstr	s15, [r7, #12]

    	if (GPS_heading_ready) {
 80018fc:	4b75      	ldr	r3, [pc, #468]	; (8001ad4 <main+0x2f4>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d063      	beq.n	80019cc <main+0x1ec>
    		GPS_heading_ready = 0;
 8001904:	4b73      	ldr	r3, [pc, #460]	; (8001ad4 <main+0x2f4>)
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
    		float error = heading - GPS_heading;
 800190a:	4b73      	ldr	r3, [pc, #460]	; (8001ad8 <main+0x2f8>)
 800190c:	edd3 7a00 	vldr	s15, [r3]
 8001910:	ed97 7a03 	vldr	s14, [r7, #12]
 8001914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001918:	edc7 7a02 	vstr	s15, [r7, #8]
    		if (error < -180) error += 360;
 800191c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001920:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001adc <main+0x2fc>
 8001924:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192c:	d508      	bpl.n	8001940 <main+0x160>
 800192e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001932:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001ad0 <main+0x2f0>
 8001936:	ee77 7a87 	vadd.f32	s15, s15, s14
 800193a:	edc7 7a02 	vstr	s15, [r7, #8]
 800193e:	e010      	b.n	8001962 <main+0x182>
    		else if (error >= 180) error -= 360;
 8001940:	edd7 7a02 	vldr	s15, [r7, #8]
 8001944:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001ae0 <main+0x300>
 8001948:	eef4 7ac7 	vcmpe.f32	s15, s14
 800194c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001950:	db07      	blt.n	8001962 <main+0x182>
 8001952:	edd7 7a02 	vldr	s15, [r7, #8]
 8001956:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001ad0 <main+0x2f0>
 800195a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800195e:	edc7 7a02 	vstr	s15, [r7, #8]
    		IMU_heading_offset -= error/5;
 8001962:	4b5a      	ldr	r3, [pc, #360]	; (8001acc <main+0x2ec>)
 8001964:	ed93 7a00 	vldr	s14, [r3]
 8001968:	edd7 6a02 	vldr	s13, [r7, #8]
 800196c:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8001970:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001974:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001978:	4b54      	ldr	r3, [pc, #336]	; (8001acc <main+0x2ec>)
 800197a:	edc3 7a00 	vstr	s15, [r3]
    		if (IMU_heading_offset < 0) IMU_heading_offset += 360;
 800197e:	4b53      	ldr	r3, [pc, #332]	; (8001acc <main+0x2ec>)
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198c:	d50a      	bpl.n	80019a4 <main+0x1c4>
 800198e:	4b4f      	ldr	r3, [pc, #316]	; (8001acc <main+0x2ec>)
 8001990:	edd3 7a00 	vldr	s15, [r3]
 8001994:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001ad0 <main+0x2f0>
 8001998:	ee77 7a87 	vadd.f32	s15, s15, s14
 800199c:	4b4b      	ldr	r3, [pc, #300]	; (8001acc <main+0x2ec>)
 800199e:	edc3 7a00 	vstr	s15, [r3]
 80019a2:	e013      	b.n	80019cc <main+0x1ec>
    		else if (IMU_heading_offset >= 360) IMU_heading_offset -= 360;
 80019a4:	4b49      	ldr	r3, [pc, #292]	; (8001acc <main+0x2ec>)
 80019a6:	edd3 7a00 	vldr	s15, [r3]
 80019aa:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001ad0 <main+0x2f0>
 80019ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b6:	db09      	blt.n	80019cc <main+0x1ec>
 80019b8:	4b44      	ldr	r3, [pc, #272]	; (8001acc <main+0x2ec>)
 80019ba:	edd3 7a00 	vldr	s15, [r3]
 80019be:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001ad0 <main+0x2f0>
 80019c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019c6:	4b41      	ldr	r3, [pc, #260]	; (8001acc <main+0x2ec>)
 80019c8:	edc3 7a00 	vstr	s15, [r3]
    	}

    	float target_error = heading - target_heading;
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f7fe fdbb 	bl	8000548 <__aeabi_f2d>
 80019d2:	4b44      	ldr	r3, [pc, #272]	; (8001ae4 <main+0x304>)
 80019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d8:	f7fe fc56 	bl	8000288 <__aeabi_dsub>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	f7ff f900 	bl	8000be8 <__aeabi_d2f>
 80019e8:	4603      	mov	r3, r0
 80019ea:	607b      	str	r3, [r7, #4]
    	if (target_error < -180) target_error += 360;
 80019ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80019f0:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001adc <main+0x2fc>
 80019f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fc:	d508      	bpl.n	8001a10 <main+0x230>
 80019fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a02:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001ad0 <main+0x2f0>
 8001a06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a0a:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a0e:	e010      	b.n	8001a32 <main+0x252>
    	else if (target_error >= 180) target_error -= 360;
 8001a10:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a14:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001ae0 <main+0x300>
 8001a18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a20:	db07      	blt.n	8001a32 <main+0x252>
 8001a22:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a26:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001ad0 <main+0x2f0>
 8001a2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a2e:	edc7 7a01 	vstr	s15, [r7, #4]

    	set_steering(target_error/180.0*steer_Pk);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7fe fd88 	bl	8000548 <__aeabi_f2d>
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ae8 <main+0x308>)
 8001a3e:	f7fe ff05 	bl	800084c <__aeabi_ddiv>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4614      	mov	r4, r2
 8001a48:	461d      	mov	r5, r3
 8001a4a:	4b28      	ldr	r3, [pc, #160]	; (8001aec <main+0x30c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fd7a 	bl	8000548 <__aeabi_f2d>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4620      	mov	r0, r4
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	f7fe fdcc 	bl	80005f8 <__aeabi_dmul>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f7ff f8be 	bl	8000be8 <__aeabi_d2f>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	ee00 3a10 	vmov	s0, r3
 8001a72:	f7ff fe3b 	bl	80016ec <set_steering>
    	set_speed(1); // fast
 8001a76:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001a7a:	f7ff fe69 	bl	8001750 <set_speed>
 8001a7e:	e003      	b.n	8001a88 <main+0x2a8>
    } else {
    	set_speed(0);
 8001a80:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8001ab8 <main+0x2d8>
 8001a84:	f7ff fe64 	bl	8001750 <set_speed>
    }

    HAL_Delay(LOOP_DELAY);
 8001a88:	2064      	movs	r0, #100	; 0x64
 8001a8a:	f000 ff83 	bl	8002994 <HAL_Delay>
    i++;
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	3301      	adds	r3, #1
 8001a92:	617b      	str	r3, [r7, #20]
    MX_USB_HOST_Process();
 8001a94:	e6f5      	b.n	8001882 <main+0xa2>
 8001a96:	bf00      	nop
 8001a98:	200002e0 	.word	0x200002e0
 8001a9c:	200004fc 	.word	0x200004fc
 8001aa0:	200003b8 	.word	0x200003b8
 8001aa4:	20000564 	.word	0x20000564
 8001aa8:	20000328 	.word	0x20000328
 8001aac:	20000234 	.word	0x20000234
 8001ab0:	08013a2c 	.word	0x08013a2c
 8001ab4:	20000370 	.word	0x20000370
 8001ab8:	00000000 	.word	0x00000000
 8001abc:	20000481 	.word	0x20000481
 8001ac0:	20000490 	.word	0x20000490
 8001ac4:	3ff00000 	.word	0x3ff00000
 8001ac8:	2000047c 	.word	0x2000047c
 8001acc:	20000484 	.word	0x20000484
 8001ad0:	43b40000 	.word	0x43b40000
 8001ad4:	20000480 	.word	0x20000480
 8001ad8:	20000478 	.word	0x20000478
 8001adc:	c3340000 	.word	0xc3340000
 8001ae0:	43340000 	.word	0x43340000
 8001ae4:	20000488 	.word	0x20000488
 8001ae8:	40668000 	.word	0x40668000
 8001aec:	20000010 	.word	0x20000010

08001af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b094      	sub	sp, #80	; 0x50
 8001af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001af6:	f107 0320 	add.w	r3, r7, #32
 8001afa:	2230      	movs	r2, #48	; 0x30
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f00c fecb 	bl	800e89a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b14:	2300      	movs	r3, #0
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	4b28      	ldr	r3, [pc, #160]	; (8001bbc <SystemClock_Config+0xcc>)
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	4a27      	ldr	r2, [pc, #156]	; (8001bbc <SystemClock_Config+0xcc>)
 8001b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b22:	6413      	str	r3, [r2, #64]	; 0x40
 8001b24:	4b25      	ldr	r3, [pc, #148]	; (8001bbc <SystemClock_Config+0xcc>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b30:	2300      	movs	r3, #0
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <SystemClock_Config+0xd0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a21      	ldr	r2, [pc, #132]	; (8001bc0 <SystemClock_Config+0xd0>)
 8001b3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <SystemClock_Config+0xd0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b56:	2302      	movs	r3, #2
 8001b58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b60:	2308      	movs	r3, #8
 8001b62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b64:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001b68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b6e:	2307      	movs	r3, #7
 8001b70:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b72:	f107 0320 	add.w	r3, r7, #32
 8001b76:	4618      	mov	r0, r3
 8001b78:	f004 feb2 	bl	80068e0 <HAL_RCC_OscConfig>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001b82:	f000 faef 	bl	8002164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b86:	230f      	movs	r3, #15
 8001b88:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b92:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b9e:	f107 030c 	add.w	r3, r7, #12
 8001ba2:	2105      	movs	r1, #5
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f005 f913 	bl	8006dd0 <HAL_RCC_ClockConfig>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001bb0:	f000 fad8 	bl	8002164 <Error_Handler>
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	3750      	adds	r7, #80	; 0x50
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40007000 	.word	0x40007000

08001bc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <MX_I2C1_Init+0x50>)
 8001bca:	4a13      	ldr	r2, [pc, #76]	; (8001c18 <MX_I2C1_Init+0x54>)
 8001bcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <MX_I2C1_Init+0x50>)
 8001bd0:	4a12      	ldr	r2, [pc, #72]	; (8001c1c <MX_I2C1_Init+0x58>)
 8001bd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <MX_I2C1_Init+0x50>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <MX_I2C1_Init+0x50>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <MX_I2C1_Init+0x50>)
 8001be2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001be6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001be8:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <MX_I2C1_Init+0x50>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <MX_I2C1_Init+0x50>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bf4:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <MX_I2C1_Init+0x50>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <MX_I2C1_Init+0x50>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c00:	4804      	ldr	r0, [pc, #16]	; (8001c14 <MX_I2C1_Init+0x50>)
 8001c02:	f003 fe49 	bl	8005898 <HAL_I2C_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c0c:	f000 faaa 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000234 	.word	0x20000234
 8001c18:	40005400 	.word	0x40005400
 8001c1c:	000186a0 	.word	0x000186a0

08001c20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c24:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c26:	4a18      	ldr	r2, [pc, #96]	; (8001c88 <MX_SPI1_Init+0x68>)
 8001c28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c2a:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c32:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c64:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c6c:	220a      	movs	r2, #10
 8001c6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c70:	4804      	ldr	r0, [pc, #16]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c72:	f005 facd 	bl	8007210 <HAL_SPI_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c7c:	f000 fa72 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000288 	.word	0x20000288
 8001c88:	40013000 	.word	0x40013000

08001c8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b096      	sub	sp, #88	; 0x58
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
 8001cb8:	611a      	str	r2, [r3, #16]
 8001cba:	615a      	str	r2, [r3, #20]
 8001cbc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	2220      	movs	r2, #32
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f00c fde8 	bl	800e89a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cca:	4b46      	ldr	r3, [pc, #280]	; (8001de4 <MX_TIM1_Init+0x158>)
 8001ccc:	4a46      	ldr	r2, [pc, #280]	; (8001de8 <MX_TIM1_Init+0x15c>)
 8001cce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168;
 8001cd0:	4b44      	ldr	r3, [pc, #272]	; (8001de4 <MX_TIM1_Init+0x158>)
 8001cd2:	22a8      	movs	r2, #168	; 0xa8
 8001cd4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd6:	4b43      	ldr	r3, [pc, #268]	; (8001de4 <MX_TIM1_Init+0x158>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001cdc:	4b41      	ldr	r3, [pc, #260]	; (8001de4 <MX_TIM1_Init+0x158>)
 8001cde:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001ce2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce4:	4b3f      	ldr	r3, [pc, #252]	; (8001de4 <MX_TIM1_Init+0x158>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cea:	4b3e      	ldr	r3, [pc, #248]	; (8001de4 <MX_TIM1_Init+0x158>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf0:	4b3c      	ldr	r3, [pc, #240]	; (8001de4 <MX_TIM1_Init+0x158>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cf6:	483b      	ldr	r0, [pc, #236]	; (8001de4 <MX_TIM1_Init+0x158>)
 8001cf8:	f005 fb13 	bl	8007322 <HAL_TIM_Base_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001d02:	f000 fa2f 	bl	8002164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d0a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d10:	4619      	mov	r1, r3
 8001d12:	4834      	ldr	r0, [pc, #208]	; (8001de4 <MX_TIM1_Init+0x158>)
 8001d14:	f005 fd38 	bl	8007788 <HAL_TIM_ConfigClockSource>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001d1e:	f000 fa21 	bl	8002164 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d22:	4830      	ldr	r0, [pc, #192]	; (8001de4 <MX_TIM1_Init+0x158>)
 8001d24:	f005 fb4c 	bl	80073c0 <HAL_TIM_PWM_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001d2e:	f000 fa19 	bl	8002164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d32:	2300      	movs	r3, #0
 8001d34:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4828      	ldr	r0, [pc, #160]	; (8001de4 <MX_TIM1_Init+0x158>)
 8001d42:	f006 f905 	bl	8007f50 <HAL_TIMEx_MasterConfigSynchronization>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001d4c:	f000 fa0a 	bl	8002164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d50:	2360      	movs	r3, #96	; 0x60
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8001d54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d58:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d72:	2200      	movs	r2, #0
 8001d74:	4619      	mov	r1, r3
 8001d76:	481b      	ldr	r0, [pc, #108]	; (8001de4 <MX_TIM1_Init+0x158>)
 8001d78:	f005 fc44 	bl	8007604 <HAL_TIM_PWM_ConfigChannel>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001d82:	f000 f9ef 	bl	8002164 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8e:	2204      	movs	r2, #4
 8001d90:	4619      	mov	r1, r3
 8001d92:	4814      	ldr	r0, [pc, #80]	; (8001de4 <MX_TIM1_Init+0x158>)
 8001d94:	f005 fc36 	bl	8007604 <HAL_TIM_PWM_ConfigChannel>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001d9e:	f000 f9e1 	bl	8002164 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001db6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4807      	ldr	r0, [pc, #28]	; (8001de4 <MX_TIM1_Init+0x158>)
 8001dc6:	f006 f93f 	bl	8008048 <HAL_TIMEx_ConfigBreakDeadTime>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8001dd0:	f000 f9c8 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001dd4:	4803      	ldr	r0, [pc, #12]	; (8001de4 <MX_TIM1_Init+0x158>)
 8001dd6:	f000 faa5 	bl	8002324 <HAL_TIM_MspPostInit>

}
 8001dda:	bf00      	nop
 8001ddc:	3758      	adds	r7, #88	; 0x58
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200002e0 	.word	0x200002e0
 8001de8:	40010000 	.word	0x40010000

08001dec <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <MX_UART5_Init+0x4c>)
 8001df2:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <MX_UART5_Init+0x50>)
 8001df4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 38400;
 8001df6:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <MX_UART5_Init+0x4c>)
 8001df8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001dfc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <MX_UART5_Init+0x4c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <MX_UART5_Init+0x4c>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <MX_UART5_Init+0x4c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001e10:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <MX_UART5_Init+0x4c>)
 8001e12:	220c      	movs	r2, #12
 8001e14:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e16:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <MX_UART5_Init+0x4c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <MX_UART5_Init+0x4c>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001e22:	4805      	ldr	r0, [pc, #20]	; (8001e38 <MX_UART5_Init+0x4c>)
 8001e24:	f006 f962 	bl	80080ec <HAL_UART_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001e2e:	f000 f999 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000328 	.word	0x20000328
 8001e3c:	40005000 	.word	0x40005000

08001e40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e44:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <MX_USART2_UART_Init+0x4c>)
 8001e46:	4a12      	ldr	r2, [pc, #72]	; (8001e90 <MX_USART2_UART_Init+0x50>)
 8001e48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <MX_USART2_UART_Init+0x4c>)
 8001e4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <MX_USART2_UART_Init+0x4c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <MX_USART2_UART_Init+0x4c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <MX_USART2_UART_Init+0x4c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <MX_USART2_UART_Init+0x4c>)
 8001e66:	220c      	movs	r2, #12
 8001e68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <MX_USART2_UART_Init+0x4c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <MX_USART2_UART_Init+0x4c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e76:	4805      	ldr	r0, [pc, #20]	; (8001e8c <MX_USART2_UART_Init+0x4c>)
 8001e78:	f006 f938 	bl	80080ec <HAL_UART_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e82:	f000 f96f 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000370 	.word	0x20000370
 8001e90:	40004400 	.word	0x40004400

08001e94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001e9a:	4a12      	ldr	r2, [pc, #72]	; (8001ee4 <MX_USART3_UART_Init+0x50>)
 8001e9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001ea0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ea4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001eb8:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001eba:	220c      	movs	r2, #12
 8001ebc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001eca:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001ecc:	f006 f90e 	bl	80080ec <HAL_UART_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ed6:	f000 f945 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200003b8 	.word	0x200003b8
 8001ee4:	40004800 	.word	0x40004800

08001ee8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <MX_DMA_Init+0x3c>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a0b      	ldr	r2, [pc, #44]	; (8001f24 <MX_DMA_Init+0x3c>)
 8001ef8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <MX_DMA_Init+0x3c>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	200c      	movs	r0, #12
 8001f10:	f000 fe3f 	bl	8002b92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001f14:	200c      	movs	r0, #12
 8001f16:	f000 fe58 	bl	8002bca <HAL_NVIC_EnableIRQ>

}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800

08001f28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08c      	sub	sp, #48	; 0x30
 8001f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2e:	f107 031c 	add.w	r3, r7, #28
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	60da      	str	r2, [r3, #12]
 8001f3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61bb      	str	r3, [r7, #24]
 8001f42:	4b82      	ldr	r3, [pc, #520]	; (800214c <MX_GPIO_Init+0x224>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a81      	ldr	r2, [pc, #516]	; (800214c <MX_GPIO_Init+0x224>)
 8001f48:	f043 0310 	orr.w	r3, r3, #16
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b7f      	ldr	r3, [pc, #508]	; (800214c <MX_GPIO_Init+0x224>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	61bb      	str	r3, [r7, #24]
 8001f58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	4b7b      	ldr	r3, [pc, #492]	; (800214c <MX_GPIO_Init+0x224>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a7a      	ldr	r2, [pc, #488]	; (800214c <MX_GPIO_Init+0x224>)
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b78      	ldr	r3, [pc, #480]	; (800214c <MX_GPIO_Init+0x224>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	4b74      	ldr	r3, [pc, #464]	; (800214c <MX_GPIO_Init+0x224>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a73      	ldr	r2, [pc, #460]	; (800214c <MX_GPIO_Init+0x224>)
 8001f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b71      	ldr	r3, [pc, #452]	; (800214c <MX_GPIO_Init+0x224>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	4b6d      	ldr	r3, [pc, #436]	; (800214c <MX_GPIO_Init+0x224>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a6c      	ldr	r2, [pc, #432]	; (800214c <MX_GPIO_Init+0x224>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b6a      	ldr	r3, [pc, #424]	; (800214c <MX_GPIO_Init+0x224>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	4b66      	ldr	r3, [pc, #408]	; (800214c <MX_GPIO_Init+0x224>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a65      	ldr	r2, [pc, #404]	; (800214c <MX_GPIO_Init+0x224>)
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b63      	ldr	r3, [pc, #396]	; (800214c <MX_GPIO_Init+0x224>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	4b5f      	ldr	r3, [pc, #380]	; (800214c <MX_GPIO_Init+0x224>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a5e      	ldr	r2, [pc, #376]	; (800214c <MX_GPIO_Init+0x224>)
 8001fd4:	f043 0308 	orr.w	r3, r3, #8
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b5c      	ldr	r3, [pc, #368]	; (800214c <MX_GPIO_Init+0x224>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2108      	movs	r1, #8
 8001fea:	4859      	ldr	r0, [pc, #356]	; (8002150 <MX_GPIO_Init+0x228>)
 8001fec:	f001 fb20 	bl	8003630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	4857      	ldr	r0, [pc, #348]	; (8002154 <MX_GPIO_Init+0x22c>)
 8001ff6:	f001 fb1b 	bl	8003630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002000:	4855      	ldr	r0, [pc, #340]	; (8002158 <MX_GPIO_Init+0x230>)
 8002002:	f001 fb15 	bl	8003630 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002006:	2308      	movs	r3, #8
 8002008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200a:	2301      	movs	r3, #1
 800200c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002012:	2300      	movs	r3, #0
 8002014:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002016:	f107 031c 	add.w	r3, r7, #28
 800201a:	4619      	mov	r1, r3
 800201c:	484c      	ldr	r0, [pc, #304]	; (8002150 <MX_GPIO_Init+0x228>)
 800201e:	f001 f96b 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002022:	2301      	movs	r3, #1
 8002024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002026:	2301      	movs	r3, #1
 8002028:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202e:	2300      	movs	r3, #0
 8002030:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002032:	f107 031c 	add.w	r3, r7, #28
 8002036:	4619      	mov	r1, r3
 8002038:	4846      	ldr	r0, [pc, #280]	; (8002154 <MX_GPIO_Init+0x22c>)
 800203a:	f001 f95d 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800203e:	2308      	movs	r3, #8
 8002040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204a:	2300      	movs	r3, #0
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800204e:	2305      	movs	r3, #5
 8002050:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002052:	f107 031c 	add.w	r3, r7, #28
 8002056:	4619      	mov	r1, r3
 8002058:	483e      	ldr	r0, [pc, #248]	; (8002154 <MX_GPIO_Init+0x22c>)
 800205a:	f001 f94d 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800205e:	2301      	movs	r3, #1
 8002060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002062:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002066:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	4619      	mov	r1, r3
 8002072:	483a      	ldr	r0, [pc, #232]	; (800215c <MX_GPIO_Init+0x234>)
 8002074:	f001 f940 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002078:	2310      	movs	r3, #16
 800207a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002084:	2300      	movs	r3, #0
 8002086:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002088:	2306      	movs	r3, #6
 800208a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208c:	f107 031c 	add.w	r3, r7, #28
 8002090:	4619      	mov	r1, r3
 8002092:	4832      	ldr	r0, [pc, #200]	; (800215c <MX_GPIO_Init+0x234>)
 8002094:	f001 f930 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002098:	2304      	movs	r3, #4
 800209a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800209c:	2300      	movs	r3, #0
 800209e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80020a4:	f107 031c 	add.w	r3, r7, #28
 80020a8:	4619      	mov	r1, r3
 80020aa:	482d      	ldr	r0, [pc, #180]	; (8002160 <MX_GPIO_Init+0x238>)
 80020ac:	f001 f924 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80020b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
 80020b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020be:	2300      	movs	r3, #0
 80020c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020c2:	2305      	movs	r3, #5
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80020c6:	f107 031c 	add.w	r3, r7, #28
 80020ca:	4619      	mov	r1, r3
 80020cc:	4824      	ldr	r0, [pc, #144]	; (8002160 <MX_GPIO_Init+0x238>)
 80020ce:	f001 f913 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80020d2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80020d6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d8:	2301      	movs	r3, #1
 80020da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e0:	2300      	movs	r3, #0
 80020e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020e4:	f107 031c 	add.w	r3, r7, #28
 80020e8:	4619      	mov	r1, r3
 80020ea:	481b      	ldr	r0, [pc, #108]	; (8002158 <MX_GPIO_Init+0x230>)
 80020ec:	f001 f904 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 80020f0:	f44f 6390 	mov.w	r3, #1152	; 0x480
 80020f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	2302      	movs	r3, #2
 80020f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fe:	2300      	movs	r3, #0
 8002100:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002102:	2306      	movs	r3, #6
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002106:	f107 031c 	add.w	r3, r7, #28
 800210a:	4619      	mov	r1, r3
 800210c:	4811      	ldr	r0, [pc, #68]	; (8002154 <MX_GPIO_Init+0x22c>)
 800210e:	f001 f8f3 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002112:	2320      	movs	r3, #32
 8002114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002116:	2300      	movs	r3, #0
 8002118:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800211e:	f107 031c 	add.w	r3, r7, #28
 8002122:	4619      	mov	r1, r3
 8002124:	480c      	ldr	r0, [pc, #48]	; (8002158 <MX_GPIO_Init+0x230>)
 8002126:	f001 f8e7 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800212a:	2302      	movs	r3, #2
 800212c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800212e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002138:	f107 031c 	add.w	r3, r7, #28
 800213c:	4619      	mov	r1, r3
 800213e:	4804      	ldr	r0, [pc, #16]	; (8002150 <MX_GPIO_Init+0x228>)
 8002140:	f001 f8da 	bl	80032f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002144:	bf00      	nop
 8002146:	3730      	adds	r7, #48	; 0x30
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40023800 	.word	0x40023800
 8002150:	40021000 	.word	0x40021000
 8002154:	40020800 	.word	0x40020800
 8002158:	40020c00 	.word	0x40020c00
 800215c:	40020000 	.word	0x40020000
 8002160:	40020400 	.word	0x40020400

08002164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002168:	b672      	cpsid	i
}
 800216a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800216c:	e7fe      	b.n	800216c <Error_Handler+0x8>
	...

08002170 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	607b      	str	r3, [r7, #4]
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <HAL_MspInit+0x4c>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	4a0f      	ldr	r2, [pc, #60]	; (80021bc <HAL_MspInit+0x4c>)
 8002180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002184:	6453      	str	r3, [r2, #68]	; 0x44
 8002186:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <HAL_MspInit+0x4c>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800218e:	607b      	str	r3, [r7, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	603b      	str	r3, [r7, #0]
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_MspInit+0x4c>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	4a08      	ldr	r2, [pc, #32]	; (80021bc <HAL_MspInit+0x4c>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a0:	6413      	str	r3, [r2, #64]	; 0x40
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_MspInit+0x4c>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021ae:	2007      	movs	r0, #7
 80021b0:	f000 fce4 	bl	8002b7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40023800 	.word	0x40023800

080021c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08a      	sub	sp, #40	; 0x28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a19      	ldr	r2, [pc, #100]	; (8002244 <HAL_I2C_MspInit+0x84>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d12c      	bne.n	800223c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	4b18      	ldr	r3, [pc, #96]	; (8002248 <HAL_I2C_MspInit+0x88>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	4a17      	ldr	r2, [pc, #92]	; (8002248 <HAL_I2C_MspInit+0x88>)
 80021ec:	f043 0302 	orr.w	r3, r3, #2
 80021f0:	6313      	str	r3, [r2, #48]	; 0x30
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <HAL_I2C_MspInit+0x88>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80021fe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002204:	2312      	movs	r3, #18
 8002206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002208:	2301      	movs	r3, #1
 800220a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	2300      	movs	r3, #0
 800220e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002210:	2304      	movs	r3, #4
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	4619      	mov	r1, r3
 800221a:	480c      	ldr	r0, [pc, #48]	; (800224c <HAL_I2C_MspInit+0x8c>)
 800221c:	f001 f86c 	bl	80032f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	4b08      	ldr	r3, [pc, #32]	; (8002248 <HAL_I2C_MspInit+0x88>)
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	4a07      	ldr	r2, [pc, #28]	; (8002248 <HAL_I2C_MspInit+0x88>)
 800222a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800222e:	6413      	str	r3, [r2, #64]	; 0x40
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <HAL_I2C_MspInit+0x88>)
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800223c:	bf00      	nop
 800223e:	3728      	adds	r7, #40	; 0x28
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40005400 	.word	0x40005400
 8002248:	40023800 	.word	0x40023800
 800224c:	40020400 	.word	0x40020400

08002250 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08a      	sub	sp, #40	; 0x28
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a19      	ldr	r2, [pc, #100]	; (80022d4 <HAL_SPI_MspInit+0x84>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d12b      	bne.n	80022ca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <HAL_SPI_MspInit+0x88>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	4a17      	ldr	r2, [pc, #92]	; (80022d8 <HAL_SPI_MspInit+0x88>)
 800227c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002280:	6453      	str	r3, [r2, #68]	; 0x44
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <HAL_SPI_MspInit+0x88>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_SPI_MspInit+0x88>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a10      	ldr	r2, [pc, #64]	; (80022d8 <HAL_SPI_MspInit+0x88>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <HAL_SPI_MspInit+0x88>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80022aa:	23e0      	movs	r3, #224	; 0xe0
 80022ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b6:	2300      	movs	r3, #0
 80022b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022ba:	2305      	movs	r3, #5
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022be:	f107 0314 	add.w	r3, r7, #20
 80022c2:	4619      	mov	r1, r3
 80022c4:	4805      	ldr	r0, [pc, #20]	; (80022dc <HAL_SPI_MspInit+0x8c>)
 80022c6:	f001 f817 	bl	80032f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022ca:	bf00      	nop
 80022cc:	3728      	adds	r7, #40	; 0x28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40013000 	.word	0x40013000
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40020000 	.word	0x40020000

080022e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0b      	ldr	r2, [pc, #44]	; (800231c <HAL_TIM_Base_MspInit+0x3c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d10d      	bne.n	800230e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <HAL_TIM_Base_MspInit+0x40>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	4a09      	ldr	r2, [pc, #36]	; (8002320 <HAL_TIM_Base_MspInit+0x40>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	6453      	str	r3, [r2, #68]	; 0x44
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <HAL_TIM_Base_MspInit+0x40>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800230e:	bf00      	nop
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40010000 	.word	0x40010000
 8002320:	40023800 	.word	0x40023800

08002324 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 030c 	add.w	r3, r7, #12
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a12      	ldr	r2, [pc, #72]	; (800238c <HAL_TIM_MspPostInit+0x68>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d11e      	bne.n	8002384 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	4b11      	ldr	r3, [pc, #68]	; (8002390 <HAL_TIM_MspPostInit+0x6c>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a10      	ldr	r2, [pc, #64]	; (8002390 <HAL_TIM_MspPostInit+0x6c>)
 8002350:	f043 0310 	orr.w	r3, r3, #16
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <HAL_TIM_MspPostInit+0x6c>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002362:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002366:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002368:	2302      	movs	r3, #2
 800236a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2300      	movs	r3, #0
 8002372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002374:	2301      	movs	r3, #1
 8002376:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	4619      	mov	r1, r3
 800237e:	4805      	ldr	r0, [pc, #20]	; (8002394 <HAL_TIM_MspPostInit+0x70>)
 8002380:	f000 ffba 	bl	80032f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002384:	bf00      	nop
 8002386:	3720      	adds	r7, #32
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40010000 	.word	0x40010000
 8002390:	40023800 	.word	0x40023800
 8002394:	40021000 	.word	0x40021000

08002398 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b090      	sub	sp, #64	; 0x40
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a8a      	ldr	r2, [pc, #552]	; (80025e0 <HAL_UART_MspInit+0x248>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d153      	bne.n	8002462 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80023be:	4b89      	ldr	r3, [pc, #548]	; (80025e4 <HAL_UART_MspInit+0x24c>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	4a88      	ldr	r2, [pc, #544]	; (80025e4 <HAL_UART_MspInit+0x24c>)
 80023c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023c8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ca:	4b86      	ldr	r3, [pc, #536]	; (80025e4 <HAL_UART_MspInit+0x24c>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80023d4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
 80023da:	4b82      	ldr	r3, [pc, #520]	; (80025e4 <HAL_UART_MspInit+0x24c>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a81      	ldr	r2, [pc, #516]	; (80025e4 <HAL_UART_MspInit+0x24c>)
 80023e0:	f043 0304 	orr.w	r3, r3, #4
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b7f      	ldr	r3, [pc, #508]	; (80025e4 <HAL_UART_MspInit+0x24c>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	623b      	str	r3, [r7, #32]
 80023f6:	4b7b      	ldr	r3, [pc, #492]	; (80025e4 <HAL_UART_MspInit+0x24c>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	4a7a      	ldr	r2, [pc, #488]	; (80025e4 <HAL_UART_MspInit+0x24c>)
 80023fc:	f043 0308 	orr.w	r3, r3, #8
 8002400:	6313      	str	r3, [r2, #48]	; 0x30
 8002402:	4b78      	ldr	r3, [pc, #480]	; (80025e4 <HAL_UART_MspInit+0x24c>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	623b      	str	r3, [r7, #32]
 800240c:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800240e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002412:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241c:	2303      	movs	r3, #3
 800241e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002420:	2308      	movs	r3, #8
 8002422:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002424:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002428:	4619      	mov	r1, r3
 800242a:	486f      	ldr	r0, [pc, #444]	; (80025e8 <HAL_UART_MspInit+0x250>)
 800242c:	f000 ff64 	bl	80032f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002430:	2304      	movs	r3, #4
 8002432:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002434:	2302      	movs	r3, #2
 8002436:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243c:	2303      	movs	r3, #3
 800243e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002440:	2308      	movs	r3, #8
 8002442:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002444:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002448:	4619      	mov	r1, r3
 800244a:	4868      	ldr	r0, [pc, #416]	; (80025ec <HAL_UART_MspInit+0x254>)
 800244c:	f000 ff54 	bl	80032f8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002450:	2200      	movs	r2, #0
 8002452:	2100      	movs	r1, #0
 8002454:	2035      	movs	r0, #53	; 0x35
 8002456:	f000 fb9c 	bl	8002b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800245a:	2035      	movs	r0, #53	; 0x35
 800245c:	f000 fbb5 	bl	8002bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002460:	e0ba      	b.n	80025d8 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART2)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a62      	ldr	r2, [pc, #392]	; (80025f0 <HAL_UART_MspInit+0x258>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d12c      	bne.n	80024c6 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800246c:	2300      	movs	r3, #0
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <HAL_UART_MspInit+0x24c>)
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	4a5b      	ldr	r2, [pc, #364]	; (80025e4 <HAL_UART_MspInit+0x24c>)
 8002476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800247a:	6413      	str	r3, [r2, #64]	; 0x40
 800247c:	4b59      	ldr	r3, [pc, #356]	; (80025e4 <HAL_UART_MspInit+0x24c>)
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002484:	61fb      	str	r3, [r7, #28]
 8002486:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002488:	2300      	movs	r3, #0
 800248a:	61bb      	str	r3, [r7, #24]
 800248c:	4b55      	ldr	r3, [pc, #340]	; (80025e4 <HAL_UART_MspInit+0x24c>)
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	4a54      	ldr	r2, [pc, #336]	; (80025e4 <HAL_UART_MspInit+0x24c>)
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	6313      	str	r3, [r2, #48]	; 0x30
 8002498:	4b52      	ldr	r3, [pc, #328]	; (80025e4 <HAL_UART_MspInit+0x24c>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	61bb      	str	r3, [r7, #24]
 80024a2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024a4:	230c      	movs	r3, #12
 80024a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a8:	2302      	movs	r3, #2
 80024aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b0:	2303      	movs	r3, #3
 80024b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024b4:	2307      	movs	r3, #7
 80024b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024bc:	4619      	mov	r1, r3
 80024be:	484d      	ldr	r0, [pc, #308]	; (80025f4 <HAL_UART_MspInit+0x25c>)
 80024c0:	f000 ff1a 	bl	80032f8 <HAL_GPIO_Init>
}
 80024c4:	e088      	b.n	80025d8 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART3)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a4b      	ldr	r2, [pc, #300]	; (80025f8 <HAL_UART_MspInit+0x260>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	f040 8083 	bne.w	80025d8 <HAL_UART_MspInit+0x240>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
 80024d6:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_UART_MspInit+0x24c>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	4a42      	ldr	r2, [pc, #264]	; (80025e4 <HAL_UART_MspInit+0x24c>)
 80024dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024e0:	6413      	str	r3, [r2, #64]	; 0x40
 80024e2:	4b40      	ldr	r3, [pc, #256]	; (80025e4 <HAL_UART_MspInit+0x24c>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	613b      	str	r3, [r7, #16]
 80024f2:	4b3c      	ldr	r3, [pc, #240]	; (80025e4 <HAL_UART_MspInit+0x24c>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	4a3b      	ldr	r2, [pc, #236]	; (80025e4 <HAL_UART_MspInit+0x24c>)
 80024f8:	f043 0302 	orr.w	r3, r3, #2
 80024fc:	6313      	str	r3, [r2, #48]	; 0x30
 80024fe:	4b39      	ldr	r3, [pc, #228]	; (80025e4 <HAL_UART_MspInit+0x24c>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	4b35      	ldr	r3, [pc, #212]	; (80025e4 <HAL_UART_MspInit+0x24c>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	4a34      	ldr	r2, [pc, #208]	; (80025e4 <HAL_UART_MspInit+0x24c>)
 8002514:	f043 0308 	orr.w	r3, r3, #8
 8002518:	6313      	str	r3, [r2, #48]	; 0x30
 800251a:	4b32      	ldr	r3, [pc, #200]	; (80025e4 <HAL_UART_MspInit+0x24c>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002526:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800252a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252c:	2302      	movs	r3, #2
 800252e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002534:	2303      	movs	r3, #3
 8002536:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002538:	2307      	movs	r3, #7
 800253a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800253c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002540:	4619      	mov	r1, r3
 8002542:	482e      	ldr	r0, [pc, #184]	; (80025fc <HAL_UART_MspInit+0x264>)
 8002544:	f000 fed8 	bl	80032f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002548:	f44f 7380 	mov.w	r3, #256	; 0x100
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254e:	2302      	movs	r3, #2
 8002550:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002556:	2303      	movs	r3, #3
 8002558:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800255a:	2307      	movs	r3, #7
 800255c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800255e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002562:	4619      	mov	r1, r3
 8002564:	4821      	ldr	r0, [pc, #132]	; (80025ec <HAL_UART_MspInit+0x254>)
 8002566:	f000 fec7 	bl	80032f8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800256a:	4b25      	ldr	r3, [pc, #148]	; (8002600 <HAL_UART_MspInit+0x268>)
 800256c:	4a25      	ldr	r2, [pc, #148]	; (8002604 <HAL_UART_MspInit+0x26c>)
 800256e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002570:	4b23      	ldr	r3, [pc, #140]	; (8002600 <HAL_UART_MspInit+0x268>)
 8002572:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002576:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002578:	4b21      	ldr	r3, [pc, #132]	; (8002600 <HAL_UART_MspInit+0x268>)
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800257e:	4b20      	ldr	r3, [pc, #128]	; (8002600 <HAL_UART_MspInit+0x268>)
 8002580:	2200      	movs	r2, #0
 8002582:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002584:	4b1e      	ldr	r3, [pc, #120]	; (8002600 <HAL_UART_MspInit+0x268>)
 8002586:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800258a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800258c:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <HAL_UART_MspInit+0x268>)
 800258e:	2200      	movs	r2, #0
 8002590:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002592:	4b1b      	ldr	r3, [pc, #108]	; (8002600 <HAL_UART_MspInit+0x268>)
 8002594:	2200      	movs	r2, #0
 8002596:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002598:	4b19      	ldr	r3, [pc, #100]	; (8002600 <HAL_UART_MspInit+0x268>)
 800259a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800259e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025a0:	4b17      	ldr	r3, [pc, #92]	; (8002600 <HAL_UART_MspInit+0x268>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025a6:	4b16      	ldr	r3, [pc, #88]	; (8002600 <HAL_UART_MspInit+0x268>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80025ac:	4814      	ldr	r0, [pc, #80]	; (8002600 <HAL_UART_MspInit+0x268>)
 80025ae:	f000 fb27 	bl	8002c00 <HAL_DMA_Init>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <HAL_UART_MspInit+0x224>
      Error_Handler();
 80025b8:	f7ff fdd4 	bl	8002164 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a10      	ldr	r2, [pc, #64]	; (8002600 <HAL_UART_MspInit+0x268>)
 80025c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80025c2:	4a0f      	ldr	r2, [pc, #60]	; (8002600 <HAL_UART_MspInit+0x268>)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80025c8:	2200      	movs	r2, #0
 80025ca:	2100      	movs	r1, #0
 80025cc:	2027      	movs	r0, #39	; 0x27
 80025ce:	f000 fae0 	bl	8002b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80025d2:	2027      	movs	r0, #39	; 0x27
 80025d4:	f000 faf9 	bl	8002bca <HAL_NVIC_EnableIRQ>
}
 80025d8:	bf00      	nop
 80025da:	3740      	adds	r7, #64	; 0x40
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40005000 	.word	0x40005000
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40020800 	.word	0x40020800
 80025ec:	40020c00 	.word	0x40020c00
 80025f0:	40004400 	.word	0x40004400
 80025f4:	40020000 	.word	0x40020000
 80025f8:	40004800 	.word	0x40004800
 80025fc:	40020400 	.word	0x40020400
 8002600:	20000400 	.word	0x20000400
 8002604:	40026028 	.word	0x40026028

08002608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800260c:	e7fe      	b.n	800260c <NMI_Handler+0x4>

0800260e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800260e:	b480      	push	{r7}
 8002610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002612:	e7fe      	b.n	8002612 <HardFault_Handler+0x4>

08002614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002618:	e7fe      	b.n	8002618 <MemManage_Handler+0x4>

0800261a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800261e:	e7fe      	b.n	800261e <BusFault_Handler+0x4>

08002620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002624:	e7fe      	b.n	8002624 <UsageFault_Handler+0x4>

08002626 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002626:	b480      	push	{r7}
 8002628:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002654:	f000 f97e 	bl	8002954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002658:	bf00      	nop
 800265a:	bd80      	pop	{r7, pc}

0800265c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002660:	4802      	ldr	r0, [pc, #8]	; (800266c <DMA1_Stream1_IRQHandler+0x10>)
 8002662:	f000 fc0d 	bl	8002e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000400 	.word	0x20000400

08002670 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002674:	4802      	ldr	r0, [pc, #8]	; (8002680 <USART3_IRQHandler+0x10>)
 8002676:	f005 fe39 	bl	80082ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	200003b8 	.word	0x200003b8

08002684 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002688:	4802      	ldr	r0, [pc, #8]	; (8002694 <UART5_IRQHandler+0x10>)
 800268a:	f005 fe2f 	bl	80082ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000328 	.word	0x20000328

08002698 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800269c:	4802      	ldr	r0, [pc, #8]	; (80026a8 <OTG_FS_IRQHandler+0x10>)
 800269e:	f001 fac1 	bl	8003c24 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	200009b0 	.word	0x200009b0

080026ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return 1;
 80026b0:	2301      	movs	r3, #1
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <_kill>:

int _kill(int pid, int sig)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026c6:	f00c f95d 	bl	800e984 <__errno>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2216      	movs	r2, #22
 80026ce:	601a      	str	r2, [r3, #0]
  return -1;
 80026d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <_exit>:

void _exit (int status)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026e4:	f04f 31ff 	mov.w	r1, #4294967295
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff ffe7 	bl	80026bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80026ee:	e7fe      	b.n	80026ee <_exit+0x12>

080026f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	e00a      	b.n	8002718 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002702:	f3af 8000 	nop.w
 8002706:	4601      	mov	r1, r0
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	60ba      	str	r2, [r7, #8]
 800270e:	b2ca      	uxtb	r2, r1
 8002710:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	3301      	adds	r3, #1
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	429a      	cmp	r2, r3
 800271e:	dbf0      	blt.n	8002702 <_read+0x12>
  }

  return len;
 8002720:	687b      	ldr	r3, [r7, #4]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b086      	sub	sp, #24
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	e009      	b.n	8002750 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	60ba      	str	r2, [r7, #8]
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	3301      	adds	r3, #1
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	429a      	cmp	r2, r3
 8002756:	dbf1      	blt.n	800273c <_write+0x12>
  }
  return len;
 8002758:	687b      	ldr	r3, [r7, #4]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <_close>:

int _close(int file)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800276a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800278a:	605a      	str	r2, [r3, #4]
  return 0;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <_isatty>:

int _isatty(int file)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027a2:	2301      	movs	r3, #1
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027d4:	4a14      	ldr	r2, [pc, #80]	; (8002828 <_sbrk+0x5c>)
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <_sbrk+0x60>)
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027e0:	4b13      	ldr	r3, [pc, #76]	; (8002830 <_sbrk+0x64>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d102      	bne.n	80027ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027e8:	4b11      	ldr	r3, [pc, #68]	; (8002830 <_sbrk+0x64>)
 80027ea:	4a12      	ldr	r2, [pc, #72]	; (8002834 <_sbrk+0x68>)
 80027ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ee:	4b10      	ldr	r3, [pc, #64]	; (8002830 <_sbrk+0x64>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4413      	add	r3, r2
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d207      	bcs.n	800280c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027fc:	f00c f8c2 	bl	800e984 <__errno>
 8002800:	4603      	mov	r3, r0
 8002802:	220c      	movs	r2, #12
 8002804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002806:	f04f 33ff 	mov.w	r3, #4294967295
 800280a:	e009      	b.n	8002820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800280c:	4b08      	ldr	r3, [pc, #32]	; (8002830 <_sbrk+0x64>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002812:	4b07      	ldr	r3, [pc, #28]	; (8002830 <_sbrk+0x64>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4413      	add	r3, r2
 800281a:	4a05      	ldr	r2, [pc, #20]	; (8002830 <_sbrk+0x64>)
 800281c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800281e:	68fb      	ldr	r3, [r7, #12]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20020000 	.word	0x20020000
 800282c:	00000400 	.word	0x00000400
 8002830:	200005cc 	.word	0x200005cc
 8002834:	20000ee0 	.word	0x20000ee0

08002838 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800283c:	4b06      	ldr	r3, [pc, #24]	; (8002858 <SystemInit+0x20>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002842:	4a05      	ldr	r2, [pc, #20]	; (8002858 <SystemInit+0x20>)
 8002844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002848:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800284c:	bf00      	nop
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800285c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002894 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002860:	f7ff ffea 	bl	8002838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002864:	480c      	ldr	r0, [pc, #48]	; (8002898 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002866:	490d      	ldr	r1, [pc, #52]	; (800289c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002868:	4a0d      	ldr	r2, [pc, #52]	; (80028a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800286a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800286c:	e002      	b.n	8002874 <LoopCopyDataInit>

0800286e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800286e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002872:	3304      	adds	r3, #4

08002874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002878:	d3f9      	bcc.n	800286e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800287a:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800287c:	4c0a      	ldr	r4, [pc, #40]	; (80028a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800287e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002880:	e001      	b.n	8002886 <LoopFillZerobss>

08002882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002884:	3204      	adds	r2, #4

08002886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002888:	d3fb      	bcc.n	8002882 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800288a:	f00c f881 	bl	800e990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800288e:	f7fe ffa7 	bl	80017e0 <main>
  bx  lr    
 8002892:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002894:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800289c:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80028a0:	08014120 	.word	0x08014120
  ldr r2, =_sbss
 80028a4:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80028a8:	20000edc 	.word	0x20000edc

080028ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028ac:	e7fe      	b.n	80028ac <ADC_IRQHandler>
	...

080028b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028b4:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <HAL_Init+0x40>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a0d      	ldr	r2, [pc, #52]	; (80028f0 <HAL_Init+0x40>)
 80028ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_Init+0x40>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <HAL_Init+0x40>)
 80028c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <HAL_Init+0x40>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a07      	ldr	r2, [pc, #28]	; (80028f0 <HAL_Init+0x40>)
 80028d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028d8:	2003      	movs	r0, #3
 80028da:	f000 f94f 	bl	8002b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028de:	2000      	movs	r0, #0
 80028e0:	f000 f808 	bl	80028f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028e4:	f7ff fc44 	bl	8002170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40023c00 	.word	0x40023c00

080028f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028fc:	4b12      	ldr	r3, [pc, #72]	; (8002948 <HAL_InitTick+0x54>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_InitTick+0x58>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	4619      	mov	r1, r3
 8002906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800290a:	fbb3 f3f1 	udiv	r3, r3, r1
 800290e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002912:	4618      	mov	r0, r3
 8002914:	f000 f967 	bl	8002be6 <HAL_SYSTICK_Config>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e00e      	b.n	8002940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b0f      	cmp	r3, #15
 8002926:	d80a      	bhi.n	800293e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002928:	2200      	movs	r2, #0
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	f04f 30ff 	mov.w	r0, #4294967295
 8002930:	f000 f92f 	bl	8002b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002934:	4a06      	ldr	r2, [pc, #24]	; (8002950 <HAL_InitTick+0x5c>)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	e000      	b.n	8002940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
}
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	20000014 	.word	0x20000014
 800294c:	2000001c 	.word	0x2000001c
 8002950:	20000018 	.word	0x20000018

08002954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <HAL_IncTick+0x20>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_IncTick+0x24>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4413      	add	r3, r2
 8002964:	4a04      	ldr	r2, [pc, #16]	; (8002978 <HAL_IncTick+0x24>)
 8002966:	6013      	str	r3, [r2, #0]
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	2000001c 	.word	0x2000001c
 8002978:	200005d0 	.word	0x200005d0

0800297c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return uwTick;
 8002980:	4b03      	ldr	r3, [pc, #12]	; (8002990 <HAL_GetTick+0x14>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	200005d0 	.word	0x200005d0

08002994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800299c:	f7ff ffee 	bl	800297c <HAL_GetTick>
 80029a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ac:	d005      	beq.n	80029ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ae:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <HAL_Delay+0x44>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	461a      	mov	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4413      	add	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029ba:	bf00      	nop
 80029bc:	f7ff ffde 	bl	800297c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d8f7      	bhi.n	80029bc <HAL_Delay+0x28>
  {
  }
}
 80029cc:	bf00      	nop
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	2000001c 	.word	0x2000001c

080029dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <__NVIC_SetPriorityGrouping+0x44>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029f8:	4013      	ands	r3, r2
 80029fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a0e:	4a04      	ldr	r2, [pc, #16]	; (8002a20 <__NVIC_SetPriorityGrouping+0x44>)
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	60d3      	str	r3, [r2, #12]
}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a28:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <__NVIC_GetPriorityGrouping+0x18>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	0a1b      	lsrs	r3, r3, #8
 8002a2e:	f003 0307 	and.w	r3, r3, #7
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	db0b      	blt.n	8002a6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	f003 021f 	and.w	r2, r3, #31
 8002a58:	4907      	ldr	r1, [pc, #28]	; (8002a78 <__NVIC_EnableIRQ+0x38>)
 8002a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	2001      	movs	r0, #1
 8002a62:	fa00 f202 	lsl.w	r2, r0, r2
 8002a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	e000e100 	.word	0xe000e100

08002a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	6039      	str	r1, [r7, #0]
 8002a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	db0a      	blt.n	8002aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	490c      	ldr	r1, [pc, #48]	; (8002ac8 <__NVIC_SetPriority+0x4c>)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	0112      	lsls	r2, r2, #4
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aa4:	e00a      	b.n	8002abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	4908      	ldr	r1, [pc, #32]	; (8002acc <__NVIC_SetPriority+0x50>)
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	3b04      	subs	r3, #4
 8002ab4:	0112      	lsls	r2, r2, #4
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	440b      	add	r3, r1
 8002aba:	761a      	strb	r2, [r3, #24]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	e000e100 	.word	0xe000e100
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b089      	sub	sp, #36	; 0x24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f1c3 0307 	rsb	r3, r3, #7
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	bf28      	it	cs
 8002aee:	2304      	movcs	r3, #4
 8002af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3304      	adds	r3, #4
 8002af6:	2b06      	cmp	r3, #6
 8002af8:	d902      	bls.n	8002b00 <NVIC_EncodePriority+0x30>
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3b03      	subs	r3, #3
 8002afe:	e000      	b.n	8002b02 <NVIC_EncodePriority+0x32>
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b04:	f04f 32ff 	mov.w	r2, #4294967295
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	401a      	ands	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b18:	f04f 31ff 	mov.w	r1, #4294967295
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b22:	43d9      	mvns	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b28:	4313      	orrs	r3, r2
         );
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3724      	adds	r7, #36	; 0x24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b48:	d301      	bcc.n	8002b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e00f      	b.n	8002b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b4e:	4a0a      	ldr	r2, [pc, #40]	; (8002b78 <SysTick_Config+0x40>)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b56:	210f      	movs	r1, #15
 8002b58:	f04f 30ff 	mov.w	r0, #4294967295
 8002b5c:	f7ff ff8e 	bl	8002a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b60:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <SysTick_Config+0x40>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b66:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <SysTick_Config+0x40>)
 8002b68:	2207      	movs	r2, #7
 8002b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	e000e010 	.word	0xe000e010

08002b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff ff29 	bl	80029dc <__NVIC_SetPriorityGrouping>
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b086      	sub	sp, #24
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	4603      	mov	r3, r0
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba4:	f7ff ff3e 	bl	8002a24 <__NVIC_GetPriorityGrouping>
 8002ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	6978      	ldr	r0, [r7, #20]
 8002bb0:	f7ff ff8e 	bl	8002ad0 <NVIC_EncodePriority>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bba:	4611      	mov	r1, r2
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff ff5d 	bl	8002a7c <__NVIC_SetPriority>
}
 8002bc2:	bf00      	nop
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff ff31 	bl	8002a40 <__NVIC_EnableIRQ>
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b082      	sub	sp, #8
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7ff ffa2 	bl	8002b38 <SysTick_Config>
 8002bf4:	4603      	mov	r3, r0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c0c:	f7ff feb6 	bl	800297c <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e099      	b.n	8002d50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c3c:	e00f      	b.n	8002c5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c3e:	f7ff fe9d 	bl	800297c <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b05      	cmp	r3, #5
 8002c4a:	d908      	bls.n	8002c5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2203      	movs	r2, #3
 8002c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e078      	b.n	8002d50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1e8      	bne.n	8002c3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	4b38      	ldr	r3, [pc, #224]	; (8002d58 <HAL_DMA_Init+0x158>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ca2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d107      	bne.n	8002cc8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f023 0307 	bic.w	r3, r3, #7
 8002cde:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d117      	bne.n	8002d22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00e      	beq.n	8002d22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 fa7b 	bl	8003200 <DMA_CheckFifoParam>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2240      	movs	r2, #64	; 0x40
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e016      	b.n	8002d50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 fa32 	bl	8003194 <DMA_CalcBaseAndBitshift>
 8002d30:	4603      	mov	r3, r0
 8002d32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d38:	223f      	movs	r2, #63	; 0x3f
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	f010803f 	.word	0xf010803f

08002d5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d6a:	f7ff fe07 	bl	800297c <HAL_GetTick>
 8002d6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d008      	beq.n	8002d8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2280      	movs	r2, #128	; 0x80
 8002d80:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e052      	b.n	8002e34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0216 	bic.w	r2, r2, #22
 8002d9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695a      	ldr	r2, [r3, #20]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d103      	bne.n	8002dbe <HAL_DMA_Abort+0x62>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d007      	beq.n	8002dce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0208 	bic.w	r2, r2, #8
 8002dcc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0201 	bic.w	r2, r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dde:	e013      	b.n	8002e08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002de0:	f7ff fdcc 	bl	800297c <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b05      	cmp	r3, #5
 8002dec:	d90c      	bls.n	8002e08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2220      	movs	r2, #32
 8002df2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2203      	movs	r2, #3
 8002df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e015      	b.n	8002e34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1e4      	bne.n	8002de0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1a:	223f      	movs	r2, #63	; 0x3f
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d004      	beq.n	8002e5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2280      	movs	r2, #128	; 0x80
 8002e54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e00c      	b.n	8002e74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2205      	movs	r2, #5
 8002e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0201 	bic.w	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e8c:	4b8e      	ldr	r3, [pc, #568]	; (80030c8 <HAL_DMA_IRQHandler+0x248>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a8e      	ldr	r2, [pc, #568]	; (80030cc <HAL_DMA_IRQHandler+0x24c>)
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	0a9b      	lsrs	r3, r3, #10
 8002e98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eaa:	2208      	movs	r2, #8
 8002eac:	409a      	lsls	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d01a      	beq.n	8002eec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d013      	beq.n	8002eec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0204 	bic.w	r2, r2, #4
 8002ed2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed8:	2208      	movs	r2, #8
 8002eda:	409a      	lsls	r2, r3
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee4:	f043 0201 	orr.w	r2, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d012      	beq.n	8002f22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00b      	beq.n	8002f22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0e:	2201      	movs	r2, #1
 8002f10:	409a      	lsls	r2, r3
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1a:	f043 0202 	orr.w	r2, r3, #2
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f26:	2204      	movs	r2, #4
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d012      	beq.n	8002f58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00b      	beq.n	8002f58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f44:	2204      	movs	r2, #4
 8002f46:	409a      	lsls	r2, r3
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f50:	f043 0204 	orr.w	r2, r3, #4
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5c:	2210      	movs	r2, #16
 8002f5e:	409a      	lsls	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d043      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d03c      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7a:	2210      	movs	r2, #16
 8002f7c:	409a      	lsls	r2, r3
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d018      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d108      	bne.n	8002fb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d024      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	4798      	blx	r3
 8002fae:	e01f      	b.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d01b      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	4798      	blx	r3
 8002fc0:	e016      	b.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d107      	bne.n	8002fe0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0208 	bic.w	r2, r2, #8
 8002fde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 808f 	beq.w	8003120 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0310 	and.w	r3, r3, #16
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 8087 	beq.w	8003120 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003016:	2220      	movs	r2, #32
 8003018:	409a      	lsls	r2, r3
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b05      	cmp	r3, #5
 8003028:	d136      	bne.n	8003098 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0216 	bic.w	r2, r2, #22
 8003038:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695a      	ldr	r2, [r3, #20]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003048:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d103      	bne.n	800305a <HAL_DMA_IRQHandler+0x1da>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0208 	bic.w	r2, r2, #8
 8003068:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306e:	223f      	movs	r2, #63	; 0x3f
 8003070:	409a      	lsls	r2, r3
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800308a:	2b00      	cmp	r3, #0
 800308c:	d07e      	beq.n	800318c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	4798      	blx	r3
        }
        return;
 8003096:	e079      	b.n	800318c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d01d      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10d      	bne.n	80030d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d031      	beq.n	8003120 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	4798      	blx	r3
 80030c4:	e02c      	b.n	8003120 <HAL_DMA_IRQHandler+0x2a0>
 80030c6:	bf00      	nop
 80030c8:	20000014 	.word	0x20000014
 80030cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d023      	beq.n	8003120 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	4798      	blx	r3
 80030e0:	e01e      	b.n	8003120 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10f      	bne.n	8003110 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0210 	bic.w	r2, r2, #16
 80030fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003124:	2b00      	cmp	r3, #0
 8003126:	d032      	beq.n	800318e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d022      	beq.n	800317a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2205      	movs	r2, #5
 8003138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0201 	bic.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	3301      	adds	r3, #1
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	429a      	cmp	r2, r3
 8003156:	d307      	bcc.n	8003168 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f2      	bne.n	800314c <HAL_DMA_IRQHandler+0x2cc>
 8003166:	e000      	b.n	800316a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003168:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317e:	2b00      	cmp	r3, #0
 8003180:	d005      	beq.n	800318e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	4798      	blx	r3
 800318a:	e000      	b.n	800318e <HAL_DMA_IRQHandler+0x30e>
        return;
 800318c:	bf00      	nop
    }
  }
}
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	3b10      	subs	r3, #16
 80031a4:	4a14      	ldr	r2, [pc, #80]	; (80031f8 <DMA_CalcBaseAndBitshift+0x64>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	091b      	lsrs	r3, r3, #4
 80031ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031ae:	4a13      	ldr	r2, [pc, #76]	; (80031fc <DMA_CalcBaseAndBitshift+0x68>)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4413      	add	r3, r2
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d909      	bls.n	80031d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031ca:	f023 0303 	bic.w	r3, r3, #3
 80031ce:	1d1a      	adds	r2, r3, #4
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	659a      	str	r2, [r3, #88]	; 0x58
 80031d4:	e007      	b.n	80031e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031de:	f023 0303 	bic.w	r3, r3, #3
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	aaaaaaab 	.word	0xaaaaaaab
 80031fc:	08013a54 	.word	0x08013a54

08003200 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d11f      	bne.n	800325a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b03      	cmp	r3, #3
 800321e:	d856      	bhi.n	80032ce <DMA_CheckFifoParam+0xce>
 8003220:	a201      	add	r2, pc, #4	; (adr r2, 8003228 <DMA_CheckFifoParam+0x28>)
 8003222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003226:	bf00      	nop
 8003228:	08003239 	.word	0x08003239
 800322c:	0800324b 	.word	0x0800324b
 8003230:	08003239 	.word	0x08003239
 8003234:	080032cf 	.word	0x080032cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d046      	beq.n	80032d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003248:	e043      	b.n	80032d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003252:	d140      	bne.n	80032d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003258:	e03d      	b.n	80032d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003262:	d121      	bne.n	80032a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b03      	cmp	r3, #3
 8003268:	d837      	bhi.n	80032da <DMA_CheckFifoParam+0xda>
 800326a:	a201      	add	r2, pc, #4	; (adr r2, 8003270 <DMA_CheckFifoParam+0x70>)
 800326c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003270:	08003281 	.word	0x08003281
 8003274:	08003287 	.word	0x08003287
 8003278:	08003281 	.word	0x08003281
 800327c:	08003299 	.word	0x08003299
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	73fb      	strb	r3, [r7, #15]
      break;
 8003284:	e030      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d025      	beq.n	80032de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003296:	e022      	b.n	80032de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032a0:	d11f      	bne.n	80032e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032a6:	e01c      	b.n	80032e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d903      	bls.n	80032b6 <DMA_CheckFifoParam+0xb6>
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d003      	beq.n	80032bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032b4:	e018      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	73fb      	strb	r3, [r7, #15]
      break;
 80032ba:	e015      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00e      	beq.n	80032e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	73fb      	strb	r3, [r7, #15]
      break;
 80032cc:	e00b      	b.n	80032e6 <DMA_CheckFifoParam+0xe6>
      break;
 80032ce:	bf00      	nop
 80032d0:	e00a      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      break;
 80032d2:	bf00      	nop
 80032d4:	e008      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      break;
 80032d6:	bf00      	nop
 80032d8:	e006      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      break;
 80032da:	bf00      	nop
 80032dc:	e004      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      break;
 80032de:	bf00      	nop
 80032e0:	e002      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80032e2:	bf00      	nop
 80032e4:	e000      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      break;
 80032e6:	bf00      	nop
    }
  } 
  
  return status; 
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop

080032f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b089      	sub	sp, #36	; 0x24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003306:	2300      	movs	r3, #0
 8003308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800330e:	2300      	movs	r3, #0
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	e16b      	b.n	80035ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003314:	2201      	movs	r2, #1
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4013      	ands	r3, r2
 8003326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	429a      	cmp	r2, r3
 800332e:	f040 815a 	bne.w	80035e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	2b01      	cmp	r3, #1
 800333c:	d005      	beq.n	800334a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003346:	2b02      	cmp	r3, #2
 8003348:	d130      	bne.n	80033ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	2203      	movs	r2, #3
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43db      	mvns	r3, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4013      	ands	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003380:	2201      	movs	r2, #1
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4013      	ands	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	091b      	lsrs	r3, r3, #4
 8003396:	f003 0201 	and.w	r2, r3, #1
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d017      	beq.n	80033e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	2203      	movs	r2, #3
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d123      	bne.n	800343c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	08da      	lsrs	r2, r3, #3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3208      	adds	r2, #8
 80033fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003400:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	220f      	movs	r2, #15
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4013      	ands	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	08da      	lsrs	r2, r3, #3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3208      	adds	r2, #8
 8003436:	69b9      	ldr	r1, [r7, #24]
 8003438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	2203      	movs	r2, #3
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 0203 	and.w	r2, r3, #3
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80b4 	beq.w	80035e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	4b60      	ldr	r3, [pc, #384]	; (8003604 <HAL_GPIO_Init+0x30c>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	4a5f      	ldr	r2, [pc, #380]	; (8003604 <HAL_GPIO_Init+0x30c>)
 8003488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800348c:	6453      	str	r3, [r2, #68]	; 0x44
 800348e:	4b5d      	ldr	r3, [pc, #372]	; (8003604 <HAL_GPIO_Init+0x30c>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800349a:	4a5b      	ldr	r2, [pc, #364]	; (8003608 <HAL_GPIO_Init+0x310>)
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	089b      	lsrs	r3, r3, #2
 80034a0:	3302      	adds	r3, #2
 80034a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	220f      	movs	r2, #15
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43db      	mvns	r3, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4013      	ands	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a52      	ldr	r2, [pc, #328]	; (800360c <HAL_GPIO_Init+0x314>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d02b      	beq.n	800351e <HAL_GPIO_Init+0x226>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a51      	ldr	r2, [pc, #324]	; (8003610 <HAL_GPIO_Init+0x318>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d025      	beq.n	800351a <HAL_GPIO_Init+0x222>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a50      	ldr	r2, [pc, #320]	; (8003614 <HAL_GPIO_Init+0x31c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d01f      	beq.n	8003516 <HAL_GPIO_Init+0x21e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a4f      	ldr	r2, [pc, #316]	; (8003618 <HAL_GPIO_Init+0x320>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d019      	beq.n	8003512 <HAL_GPIO_Init+0x21a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a4e      	ldr	r2, [pc, #312]	; (800361c <HAL_GPIO_Init+0x324>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d013      	beq.n	800350e <HAL_GPIO_Init+0x216>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a4d      	ldr	r2, [pc, #308]	; (8003620 <HAL_GPIO_Init+0x328>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00d      	beq.n	800350a <HAL_GPIO_Init+0x212>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a4c      	ldr	r2, [pc, #304]	; (8003624 <HAL_GPIO_Init+0x32c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d007      	beq.n	8003506 <HAL_GPIO_Init+0x20e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a4b      	ldr	r2, [pc, #300]	; (8003628 <HAL_GPIO_Init+0x330>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d101      	bne.n	8003502 <HAL_GPIO_Init+0x20a>
 80034fe:	2307      	movs	r3, #7
 8003500:	e00e      	b.n	8003520 <HAL_GPIO_Init+0x228>
 8003502:	2308      	movs	r3, #8
 8003504:	e00c      	b.n	8003520 <HAL_GPIO_Init+0x228>
 8003506:	2306      	movs	r3, #6
 8003508:	e00a      	b.n	8003520 <HAL_GPIO_Init+0x228>
 800350a:	2305      	movs	r3, #5
 800350c:	e008      	b.n	8003520 <HAL_GPIO_Init+0x228>
 800350e:	2304      	movs	r3, #4
 8003510:	e006      	b.n	8003520 <HAL_GPIO_Init+0x228>
 8003512:	2303      	movs	r3, #3
 8003514:	e004      	b.n	8003520 <HAL_GPIO_Init+0x228>
 8003516:	2302      	movs	r3, #2
 8003518:	e002      	b.n	8003520 <HAL_GPIO_Init+0x228>
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <HAL_GPIO_Init+0x228>
 800351e:	2300      	movs	r3, #0
 8003520:	69fa      	ldr	r2, [r7, #28]
 8003522:	f002 0203 	and.w	r2, r2, #3
 8003526:	0092      	lsls	r2, r2, #2
 8003528:	4093      	lsls	r3, r2
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4313      	orrs	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003530:	4935      	ldr	r1, [pc, #212]	; (8003608 <HAL_GPIO_Init+0x310>)
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	089b      	lsrs	r3, r3, #2
 8003536:	3302      	adds	r3, #2
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800353e:	4b3b      	ldr	r3, [pc, #236]	; (800362c <HAL_GPIO_Init+0x334>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	43db      	mvns	r3, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4013      	ands	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003562:	4a32      	ldr	r2, [pc, #200]	; (800362c <HAL_GPIO_Init+0x334>)
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003568:	4b30      	ldr	r3, [pc, #192]	; (800362c <HAL_GPIO_Init+0x334>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	43db      	mvns	r3, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4013      	ands	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800358c:	4a27      	ldr	r2, [pc, #156]	; (800362c <HAL_GPIO_Init+0x334>)
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003592:	4b26      	ldr	r3, [pc, #152]	; (800362c <HAL_GPIO_Init+0x334>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	43db      	mvns	r3, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4013      	ands	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035b6:	4a1d      	ldr	r2, [pc, #116]	; (800362c <HAL_GPIO_Init+0x334>)
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035bc:	4b1b      	ldr	r3, [pc, #108]	; (800362c <HAL_GPIO_Init+0x334>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	43db      	mvns	r3, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4013      	ands	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035e0:	4a12      	ldr	r2, [pc, #72]	; (800362c <HAL_GPIO_Init+0x334>)
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	3301      	adds	r3, #1
 80035ea:	61fb      	str	r3, [r7, #28]
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	2b0f      	cmp	r3, #15
 80035f0:	f67f ae90 	bls.w	8003314 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035f4:	bf00      	nop
 80035f6:	bf00      	nop
 80035f8:	3724      	adds	r7, #36	; 0x24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	40023800 	.word	0x40023800
 8003608:	40013800 	.word	0x40013800
 800360c:	40020000 	.word	0x40020000
 8003610:	40020400 	.word	0x40020400
 8003614:	40020800 	.word	0x40020800
 8003618:	40020c00 	.word	0x40020c00
 800361c:	40021000 	.word	0x40021000
 8003620:	40021400 	.word	0x40021400
 8003624:	40021800 	.word	0x40021800
 8003628:	40021c00 	.word	0x40021c00
 800362c:	40013c00 	.word	0x40013c00

08003630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	460b      	mov	r3, r1
 800363a:	807b      	strh	r3, [r7, #2]
 800363c:	4613      	mov	r3, r2
 800363e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003640:	787b      	ldrb	r3, [r7, #1]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003646:	887a      	ldrh	r2, [r7, #2]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800364c:	e003      	b.n	8003656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800364e:	887b      	ldrh	r3, [r7, #2]
 8003650:	041a      	lsls	r2, r3, #16
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	619a      	str	r2, [r3, #24]
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b086      	sub	sp, #24
 8003666:	af02      	add	r7, sp, #8
 8003668:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e059      	b.n	8003728 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d106      	bne.n	8003694 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f008 ffde 	bl	800c650 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2203      	movs	r2, #3
 8003698:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036a2:	d102      	bne.n	80036aa <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f005 fde7 	bl	8009282 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6818      	ldr	r0, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	7c1a      	ldrb	r2, [r3, #16]
 80036bc:	f88d 2000 	strb.w	r2, [sp]
 80036c0:	3304      	adds	r3, #4
 80036c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036c4:	f005 fd68 	bl	8009198 <USB_CoreInit>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d005      	beq.n	80036da <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2202      	movs	r2, #2
 80036d2:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e026      	b.n	8003728 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2101      	movs	r1, #1
 80036e0:	4618      	mov	r0, r3
 80036e2:	f005 fddf 	bl	80092a4 <USB_SetCurrentMode>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e017      	b.n	8003728 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6818      	ldr	r0, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	7c1a      	ldrb	r2, [r3, #16]
 8003700:	f88d 2000 	strb.w	r2, [sp]
 8003704:	3304      	adds	r3, #4
 8003706:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003708:	f005 ff82 	bl	8009610 <USB_HostInit>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d005      	beq.n	800371e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2202      	movs	r2, #2
 8003716:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e004      	b.n	8003728 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003730:	b590      	push	{r4, r7, lr}
 8003732:	b08b      	sub	sp, #44	; 0x2c
 8003734:	af04      	add	r7, sp, #16
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	4608      	mov	r0, r1
 800373a:	4611      	mov	r1, r2
 800373c:	461a      	mov	r2, r3
 800373e:	4603      	mov	r3, r0
 8003740:	70fb      	strb	r3, [r7, #3]
 8003742:	460b      	mov	r3, r1
 8003744:	70bb      	strb	r3, [r7, #2]
 8003746:	4613      	mov	r3, r2
 8003748:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800374a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800374c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_HCD_HC_Init+0x2c>
 8003758:	2302      	movs	r3, #2
 800375a:	e09d      	b.n	8003898 <HAL_HCD_HC_Init+0x168>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003764:	78fa      	ldrb	r2, [r7, #3]
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	4613      	mov	r3, r2
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	1a9b      	subs	r3, r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	3319      	adds	r3, #25
 8003774:	2200      	movs	r2, #0
 8003776:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	3314      	adds	r3, #20
 8003788:	787a      	ldrb	r2, [r7, #1]
 800378a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	1a9b      	subs	r3, r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	3315      	adds	r3, #21
 800379c:	78fa      	ldrb	r2, [r7, #3]
 800379e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80037a0:	78fa      	ldrb	r2, [r7, #3]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	3326      	adds	r3, #38	; 0x26
 80037b0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80037b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80037b6:	78fa      	ldrb	r2, [r7, #3]
 80037b8:	78bb      	ldrb	r3, [r7, #2]
 80037ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037be:	b2d8      	uxtb	r0, r3
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	1a9b      	subs	r3, r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	440b      	add	r3, r1
 80037cc:	3316      	adds	r3, #22
 80037ce:	4602      	mov	r2, r0
 80037d0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80037d2:	78fb      	ldrb	r3, [r7, #3]
 80037d4:	4619      	mov	r1, r3
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fbc8 	bl	8003f6c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80037dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	da0a      	bge.n	80037fa <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80037e4:	78fa      	ldrb	r2, [r7, #3]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	3317      	adds	r3, #23
 80037f4:	2201      	movs	r2, #1
 80037f6:	701a      	strb	r2, [r3, #0]
 80037f8:	e009      	b.n	800380e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80037fa:	78fa      	ldrb	r2, [r7, #3]
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	1a9b      	subs	r3, r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	3317      	adds	r3, #23
 800380a:	2200      	movs	r2, #0
 800380c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f006 f860 	bl	80098d8 <USB_GetHostSpeed>
 8003818:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800381a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800381e:	2b01      	cmp	r3, #1
 8003820:	d10b      	bne.n	800383a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003822:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003826:	2b01      	cmp	r3, #1
 8003828:	d107      	bne.n	800383a <HAL_HCD_HC_Init+0x10a>
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d104      	bne.n	800383a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	2bbc      	cmp	r3, #188	; 0xbc
 8003834:	d901      	bls.n	800383a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003836:	23bc      	movs	r3, #188	; 0xbc
 8003838:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800383a:	78fa      	ldrb	r2, [r7, #3]
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	3318      	adds	r3, #24
 800384a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800384e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003850:	78fa      	ldrb	r2, [r7, #3]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	b298      	uxth	r0, r3
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	4613      	mov	r3, r2
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	1a9b      	subs	r3, r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	3328      	adds	r3, #40	; 0x28
 8003864:	4602      	mov	r2, r0
 8003866:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6818      	ldr	r0, [r3, #0]
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	b29b      	uxth	r3, r3
 8003870:	787c      	ldrb	r4, [r7, #1]
 8003872:	78ba      	ldrb	r2, [r7, #2]
 8003874:	78f9      	ldrb	r1, [r7, #3]
 8003876:	9302      	str	r3, [sp, #8]
 8003878:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800387c:	9301      	str	r3, [sp, #4]
 800387e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	4623      	mov	r3, r4
 8003886:	f006 f84f 	bl	8009928 <USB_HC_Init>
 800388a:	4603      	mov	r3, r0
 800388c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8003896:	7bfb      	ldrb	r3, [r7, #15]
}
 8003898:	4618      	mov	r0, r3
 800389a:	371c      	adds	r7, #28
 800389c:	46bd      	mov	sp, r7
 800389e:	bd90      	pop	{r4, r7, pc}

080038a0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_HCD_HC_Halt+0x1e>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e00f      	b.n	80038de <HAL_HCD_HC_Halt+0x3e>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	78fa      	ldrb	r2, [r7, #3]
 80038cc:	4611      	mov	r1, r2
 80038ce:	4618      	mov	r0, r3
 80038d0:	f006 fbe1 	bl	800a096 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	4608      	mov	r0, r1
 80038f2:	4611      	mov	r1, r2
 80038f4:	461a      	mov	r2, r3
 80038f6:	4603      	mov	r3, r0
 80038f8:	70fb      	strb	r3, [r7, #3]
 80038fa:	460b      	mov	r3, r1
 80038fc:	70bb      	strb	r3, [r7, #2]
 80038fe:	4613      	mov	r3, r2
 8003900:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003902:	78fa      	ldrb	r2, [r7, #3]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	3317      	adds	r3, #23
 8003912:	78ba      	ldrb	r2, [r7, #2]
 8003914:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003916:	78fa      	ldrb	r2, [r7, #3]
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	4613      	mov	r3, r2
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	1a9b      	subs	r3, r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	3326      	adds	r3, #38	; 0x26
 8003926:	787a      	ldrb	r2, [r7, #1]
 8003928:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800392a:	7c3b      	ldrb	r3, [r7, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d114      	bne.n	800395a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003930:	78fa      	ldrb	r2, [r7, #3]
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	1a9b      	subs	r3, r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	332a      	adds	r3, #42	; 0x2a
 8003940:	2203      	movs	r2, #3
 8003942:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003944:	78fa      	ldrb	r2, [r7, #3]
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	4613      	mov	r3, r2
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	1a9b      	subs	r3, r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	3319      	adds	r3, #25
 8003954:	7f3a      	ldrb	r2, [r7, #28]
 8003956:	701a      	strb	r2, [r3, #0]
 8003958:	e009      	b.n	800396e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800395a:	78fa      	ldrb	r2, [r7, #3]
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	4613      	mov	r3, r2
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	1a9b      	subs	r3, r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	440b      	add	r3, r1
 8003968:	332a      	adds	r3, #42	; 0x2a
 800396a:	2202      	movs	r2, #2
 800396c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800396e:	787b      	ldrb	r3, [r7, #1]
 8003970:	2b03      	cmp	r3, #3
 8003972:	f200 8102 	bhi.w	8003b7a <HAL_HCD_HC_SubmitRequest+0x292>
 8003976:	a201      	add	r2, pc, #4	; (adr r2, 800397c <HAL_HCD_HC_SubmitRequest+0x94>)
 8003978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397c:	0800398d 	.word	0x0800398d
 8003980:	08003b65 	.word	0x08003b65
 8003984:	08003a51 	.word	0x08003a51
 8003988:	08003adb 	.word	0x08003adb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800398c:	7c3b      	ldrb	r3, [r7, #16]
 800398e:	2b01      	cmp	r3, #1
 8003990:	f040 80f5 	bne.w	8003b7e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003994:	78bb      	ldrb	r3, [r7, #2]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d12d      	bne.n	80039f6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800399a:	8b3b      	ldrh	r3, [r7, #24]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d109      	bne.n	80039b4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80039a0:	78fa      	ldrb	r2, [r7, #3]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	333d      	adds	r3, #61	; 0x3d
 80039b0:	2201      	movs	r2, #1
 80039b2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80039b4:	78fa      	ldrb	r2, [r7, #3]
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	1a9b      	subs	r3, r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	333d      	adds	r3, #61	; 0x3d
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10a      	bne.n	80039e0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039ca:	78fa      	ldrb	r2, [r7, #3]
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	4613      	mov	r3, r2
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	1a9b      	subs	r3, r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	332a      	adds	r3, #42	; 0x2a
 80039da:	2200      	movs	r2, #0
 80039dc:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80039de:	e0ce      	b.n	8003b7e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039e0:	78fa      	ldrb	r2, [r7, #3]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	332a      	adds	r3, #42	; 0x2a
 80039f0:	2202      	movs	r2, #2
 80039f2:	701a      	strb	r2, [r3, #0]
      break;
 80039f4:	e0c3      	b.n	8003b7e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	1a9b      	subs	r3, r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	331a      	adds	r3, #26
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	f040 80b8 	bne.w	8003b7e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003a0e:	78fa      	ldrb	r2, [r7, #3]
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	1a9b      	subs	r3, r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	333c      	adds	r3, #60	; 0x3c
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a24:	78fa      	ldrb	r2, [r7, #3]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	1a9b      	subs	r3, r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	332a      	adds	r3, #42	; 0x2a
 8003a34:	2200      	movs	r2, #0
 8003a36:	701a      	strb	r2, [r3, #0]
      break;
 8003a38:	e0a1      	b.n	8003b7e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a3a:	78fa      	ldrb	r2, [r7, #3]
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	1a9b      	subs	r3, r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	440b      	add	r3, r1
 8003a48:	332a      	adds	r3, #42	; 0x2a
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	701a      	strb	r2, [r3, #0]
      break;
 8003a4e:	e096      	b.n	8003b7e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003a50:	78bb      	ldrb	r3, [r7, #2]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d120      	bne.n	8003a98 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003a56:	78fa      	ldrb	r2, [r7, #3]
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	1a9b      	subs	r3, r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	333d      	adds	r3, #61	; 0x3d
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a6c:	78fa      	ldrb	r2, [r7, #3]
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	1a9b      	subs	r3, r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	332a      	adds	r3, #42	; 0x2a
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003a80:	e07e      	b.n	8003b80 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a82:	78fa      	ldrb	r2, [r7, #3]
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	4613      	mov	r3, r2
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	1a9b      	subs	r3, r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	440b      	add	r3, r1
 8003a90:	332a      	adds	r3, #42	; 0x2a
 8003a92:	2202      	movs	r2, #2
 8003a94:	701a      	strb	r2, [r3, #0]
      break;
 8003a96:	e073      	b.n	8003b80 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003a98:	78fa      	ldrb	r2, [r7, #3]
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	333c      	adds	r3, #60	; 0x3c
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10a      	bne.n	8003ac4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003aae:	78fa      	ldrb	r2, [r7, #3]
 8003ab0:	6879      	ldr	r1, [r7, #4]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	011b      	lsls	r3, r3, #4
 8003ab6:	1a9b      	subs	r3, r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	440b      	add	r3, r1
 8003abc:	332a      	adds	r3, #42	; 0x2a
 8003abe:	2200      	movs	r2, #0
 8003ac0:	701a      	strb	r2, [r3, #0]
      break;
 8003ac2:	e05d      	b.n	8003b80 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ac4:	78fa      	ldrb	r2, [r7, #3]
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	1a9b      	subs	r3, r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	332a      	adds	r3, #42	; 0x2a
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	701a      	strb	r2, [r3, #0]
      break;
 8003ad8:	e052      	b.n	8003b80 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003ada:	78bb      	ldrb	r3, [r7, #2]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d120      	bne.n	8003b22 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ae0:	78fa      	ldrb	r2, [r7, #3]
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	011b      	lsls	r3, r3, #4
 8003ae8:	1a9b      	subs	r3, r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	333d      	adds	r3, #61	; 0x3d
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10a      	bne.n	8003b0c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003af6:	78fa      	ldrb	r2, [r7, #3]
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	4613      	mov	r3, r2
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	1a9b      	subs	r3, r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	440b      	add	r3, r1
 8003b04:	332a      	adds	r3, #42	; 0x2a
 8003b06:	2200      	movs	r2, #0
 8003b08:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003b0a:	e039      	b.n	8003b80 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b0c:	78fa      	ldrb	r2, [r7, #3]
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	4613      	mov	r3, r2
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	1a9b      	subs	r3, r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	332a      	adds	r3, #42	; 0x2a
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	701a      	strb	r2, [r3, #0]
      break;
 8003b20:	e02e      	b.n	8003b80 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003b22:	78fa      	ldrb	r2, [r7, #3]
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	440b      	add	r3, r1
 8003b30:	333c      	adds	r3, #60	; 0x3c
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10a      	bne.n	8003b4e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b38:	78fa      	ldrb	r2, [r7, #3]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	1a9b      	subs	r3, r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	332a      	adds	r3, #42	; 0x2a
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]
      break;
 8003b4c:	e018      	b.n	8003b80 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b4e:	78fa      	ldrb	r2, [r7, #3]
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	1a9b      	subs	r3, r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	332a      	adds	r3, #42	; 0x2a
 8003b5e:	2202      	movs	r2, #2
 8003b60:	701a      	strb	r2, [r3, #0]
      break;
 8003b62:	e00d      	b.n	8003b80 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b64:	78fa      	ldrb	r2, [r7, #3]
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	332a      	adds	r3, #42	; 0x2a
 8003b74:	2200      	movs	r2, #0
 8003b76:	701a      	strb	r2, [r3, #0]
      break;
 8003b78:	e002      	b.n	8003b80 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003b7a:	bf00      	nop
 8003b7c:	e000      	b.n	8003b80 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003b7e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003b80:	78fa      	ldrb	r2, [r7, #3]
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	4613      	mov	r3, r2
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	1a9b      	subs	r3, r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	332c      	adds	r3, #44	; 0x2c
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	8b39      	ldrh	r1, [r7, #24]
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	1a9b      	subs	r3, r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4403      	add	r3, r0
 8003ba4:	3334      	adds	r3, #52	; 0x34
 8003ba6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003ba8:	78fa      	ldrb	r2, [r7, #3]
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	4613      	mov	r3, r2
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	1a9b      	subs	r3, r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	334c      	adds	r3, #76	; 0x4c
 8003bb8:	2200      	movs	r2, #0
 8003bba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003bbc:	78fa      	ldrb	r2, [r7, #3]
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	3338      	adds	r3, #56	; 0x38
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003bd0:	78fa      	ldrb	r2, [r7, #3]
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	1a9b      	subs	r3, r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	3315      	adds	r3, #21
 8003be0:	78fa      	ldrb	r2, [r7, #3]
 8003be2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003be4:	78fa      	ldrb	r2, [r7, #3]
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	4613      	mov	r3, r2
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	1a9b      	subs	r3, r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	334d      	adds	r3, #77	; 0x4d
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	78fa      	ldrb	r2, [r7, #3]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	1a9b      	subs	r3, r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	3310      	adds	r3, #16
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	1d19      	adds	r1, r3, #4
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	799b      	ldrb	r3, [r3, #6]
 8003c12:	461a      	mov	r2, r3
 8003c14:	f005 ffb4 	bl	8009b80 <USB_HC_StartXfer>
 8003c18:	4603      	mov	r3, r0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop

08003c24 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f005 fca8 	bl	8009590 <USB_GetMode>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	f040 80fb 	bne.w	8003e3e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f005 fc6b 	bl	8009528 <USB_ReadInterrupts>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 80f1 	beq.w	8003e3c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f005 fc62 	bl	8009528 <USB_ReadInterrupts>
 8003c64:	4603      	mov	r3, r0
 8003c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c6e:	d104      	bne.n	8003c7a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003c78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f005 fc52 	bl	8009528 <USB_ReadInterrupts>
 8003c84:	4603      	mov	r3, r0
 8003c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c8e:	d104      	bne.n	8003c9a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c98:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f005 fc42 	bl	8009528 <USB_ReadInterrupts>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003caa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cae:	d104      	bne.n	8003cba <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003cb8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f005 fc32 	bl	8009528 <USB_ReadInterrupts>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d103      	bne.n	8003cd6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f005 fc24 	bl	8009528 <USB_ReadInterrupts>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ce6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cea:	d120      	bne.n	8003d2e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003cf4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d113      	bne.n	8003d2e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003d06:	2110      	movs	r1, #16
 8003d08:	6938      	ldr	r0, [r7, #16]
 8003d0a:	f005 fb17 	bl	800933c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003d0e:	6938      	ldr	r0, [r7, #16]
 8003d10:	f005 fb46 	bl	80093a0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	7a5b      	ldrb	r3, [r3, #9]
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d105      	bne.n	8003d28 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2101      	movs	r1, #1
 8003d22:	4618      	mov	r0, r3
 8003d24:	f005 fd38 	bl	8009798 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f008 fd0f 	bl	800c74c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f005 fbf8 	bl	8009528 <USB_ReadInterrupts>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d42:	d102      	bne.n	8003d4a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f001 fd33 	bl	80057b0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f005 fbea 	bl	8009528 <USB_ReadInterrupts>
 8003d54:	4603      	mov	r3, r0
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d106      	bne.n	8003d6c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f008 fcd8 	bl	800c714 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2208      	movs	r2, #8
 8003d6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f005 fbd9 	bl	8009528 <USB_ReadInterrupts>
 8003d76:	4603      	mov	r3, r0
 8003d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d80:	d139      	bne.n	8003df6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f006 f974 	bl	800a074 <USB_HC_ReadInterrupt>
 8003d8c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	e025      	b.n	8003de0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d018      	beq.n	8003dda <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dbe:	d106      	bne.n	8003dce <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f905 	bl	8003fd6 <HCD_HC_IN_IRQHandler>
 8003dcc:	e005      	b.n	8003dda <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 ff67 	bl	8004ca8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	795b      	ldrb	r3, [r3, #5]
 8003de4:	461a      	mov	r2, r3
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d3d3      	bcc.n	8003d94 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003df4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f005 fb94 	bl	8009528 <USB_ReadInterrupts>
 8003e00:	4603      	mov	r3, r0
 8003e02:	f003 0310 	and.w	r3, r3, #16
 8003e06:	2b10      	cmp	r3, #16
 8003e08:	d101      	bne.n	8003e0e <HAL_HCD_IRQHandler+0x1ea>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <HAL_HCD_IRQHandler+0x1ec>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d014      	beq.n	8003e3e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699a      	ldr	r2, [r3, #24]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0210 	bic.w	r2, r2, #16
 8003e22:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f001 fbe4 	bl	80055f2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	699a      	ldr	r2, [r3, #24]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f042 0210 	orr.w	r2, r2, #16
 8003e38:	619a      	str	r2, [r3, #24]
 8003e3a:	e000      	b.n	8003e3e <HAL_HCD_IRQHandler+0x21a>
      return;
 8003e3c:	bf00      	nop
    }
  }
}
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_HCD_Start+0x16>
 8003e56:	2302      	movs	r3, #2
 8003e58:	e013      	b.n	8003e82 <HAL_HCD_Start+0x3e>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2101      	movs	r1, #1
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f005 fcfc 	bl	8009866 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f005 f9f4 	bl	8009260 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b082      	sub	sp, #8
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_HCD_Stop+0x16>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e00d      	b.n	8003ebc <HAL_HCD_Stop+0x32>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f006 fa4f 	bl	800a350 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f005 fc9e 	bl	8009812 <USB_ResetPort>
 8003ed6:	4603      	mov	r3, r0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003eec:	78fa      	ldrb	r2, [r7, #3]
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	1a9b      	subs	r3, r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	334c      	adds	r3, #76	; 0x4c
 8003efc:	781b      	ldrb	r3, [r3, #0]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
 8003f12:	460b      	mov	r3, r1
 8003f14:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003f16:	78fa      	ldrb	r2, [r7, #3]
 8003f18:	6879      	ldr	r1, [r7, #4]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	1a9b      	subs	r3, r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	440b      	add	r3, r1
 8003f24:	3338      	adds	r3, #56	; 0x38
 8003f26:	681b      	ldr	r3, [r3, #0]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f005 fce0 	bl	8009906 <USB_GetCurrentFrame>
 8003f46:	4603      	mov	r3, r0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f005 fcbb 	bl	80098d8 <USB_GetHostSpeed>
 8003f62:	4603      	mov	r3, r0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003f78:	78fa      	ldrb	r2, [r7, #3]
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	1a9b      	subs	r3, r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	331a      	adds	r3, #26
 8003f88:	2200      	movs	r2, #0
 8003f8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003f8c:	78fa      	ldrb	r2, [r7, #3]
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	4613      	mov	r3, r2
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	1a9b      	subs	r3, r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	331b      	adds	r3, #27
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003fa0:	78fa      	ldrb	r2, [r7, #3]
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	3325      	adds	r3, #37	; 0x25
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003fb4:	78fa      	ldrb	r2, [r7, #3]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	3324      	adds	r3, #36	; 0x24
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b086      	sub	sp, #24
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	460b      	mov	r3, r1
 8003fe0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	78fa      	ldrb	r2, [r7, #3]
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f005 faaa 	bl	800954e <USB_ReadChInterrupts>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b04      	cmp	r3, #4
 8004002:	d11a      	bne.n	800403a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004004:	78fb      	ldrb	r3, [r7, #3]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	4413      	add	r3, r2
 800400c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004010:	461a      	mov	r2, r3
 8004012:	2304      	movs	r3, #4
 8004014:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004016:	78fa      	ldrb	r2, [r7, #3]
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	1a9b      	subs	r3, r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	440b      	add	r3, r1
 8004024:	334d      	adds	r3, #77	; 0x4d
 8004026:	2207      	movs	r2, #7
 8004028:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	78fa      	ldrb	r2, [r7, #3]
 8004030:	4611      	mov	r1, r2
 8004032:	4618      	mov	r0, r3
 8004034:	f006 f82f 	bl	800a096 <USB_HC_Halt>
 8004038:	e09e      	b.n	8004178 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	78fa      	ldrb	r2, [r7, #3]
 8004040:	4611      	mov	r1, r2
 8004042:	4618      	mov	r0, r3
 8004044:	f005 fa83 	bl	800954e <USB_ReadChInterrupts>
 8004048:	4603      	mov	r3, r0
 800404a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004052:	d11b      	bne.n	800408c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4413      	add	r3, r2
 800405c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004060:	461a      	mov	r2, r3
 8004062:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004066:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004068:	78fa      	ldrb	r2, [r7, #3]
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	4613      	mov	r3, r2
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	1a9b      	subs	r3, r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	334d      	adds	r3, #77	; 0x4d
 8004078:	2208      	movs	r2, #8
 800407a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	78fa      	ldrb	r2, [r7, #3]
 8004082:	4611      	mov	r1, r2
 8004084:	4618      	mov	r0, r3
 8004086:	f006 f806 	bl	800a096 <USB_HC_Halt>
 800408a:	e075      	b.n	8004178 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	78fa      	ldrb	r2, [r7, #3]
 8004092:	4611      	mov	r1, r2
 8004094:	4618      	mov	r0, r3
 8004096:	f005 fa5a 	bl	800954e <USB_ReadChInterrupts>
 800409a:	4603      	mov	r3, r0
 800409c:	f003 0308 	and.w	r3, r3, #8
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d11a      	bne.n	80040da <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80040a4:	78fb      	ldrb	r3, [r7, #3]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b0:	461a      	mov	r2, r3
 80040b2:	2308      	movs	r3, #8
 80040b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80040b6:	78fa      	ldrb	r2, [r7, #3]
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	4613      	mov	r3, r2
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	440b      	add	r3, r1
 80040c4:	334d      	adds	r3, #77	; 0x4d
 80040c6:	2206      	movs	r2, #6
 80040c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	78fa      	ldrb	r2, [r7, #3]
 80040d0:	4611      	mov	r1, r2
 80040d2:	4618      	mov	r0, r3
 80040d4:	f005 ffdf 	bl	800a096 <USB_HC_Halt>
 80040d8:	e04e      	b.n	8004178 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	78fa      	ldrb	r2, [r7, #3]
 80040e0:	4611      	mov	r1, r2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f005 fa33 	bl	800954e <USB_ReadChInterrupts>
 80040e8:	4603      	mov	r3, r0
 80040ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f2:	d11b      	bne.n	800412c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004100:	461a      	mov	r2, r3
 8004102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004106:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004108:	78fa      	ldrb	r2, [r7, #3]
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	4613      	mov	r3, r2
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	1a9b      	subs	r3, r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	334d      	adds	r3, #77	; 0x4d
 8004118:	2209      	movs	r2, #9
 800411a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	78fa      	ldrb	r2, [r7, #3]
 8004122:	4611      	mov	r1, r2
 8004124:	4618      	mov	r0, r3
 8004126:	f005 ffb6 	bl	800a096 <USB_HC_Halt>
 800412a:	e025      	b.n	8004178 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	78fa      	ldrb	r2, [r7, #3]
 8004132:	4611      	mov	r1, r2
 8004134:	4618      	mov	r0, r3
 8004136:	f005 fa0a 	bl	800954e <USB_ReadChInterrupts>
 800413a:	4603      	mov	r3, r0
 800413c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004140:	2b80      	cmp	r3, #128	; 0x80
 8004142:	d119      	bne.n	8004178 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004144:	78fb      	ldrb	r3, [r7, #3]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	4413      	add	r3, r2
 800414c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004150:	461a      	mov	r2, r3
 8004152:	2380      	movs	r3, #128	; 0x80
 8004154:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004156:	78fa      	ldrb	r2, [r7, #3]
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	4613      	mov	r3, r2
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	1a9b      	subs	r3, r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	440b      	add	r3, r1
 8004164:	334d      	adds	r3, #77	; 0x4d
 8004166:	2207      	movs	r2, #7
 8004168:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	78fa      	ldrb	r2, [r7, #3]
 8004170:	4611      	mov	r1, r2
 8004172:	4618      	mov	r0, r3
 8004174:	f005 ff8f 	bl	800a096 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	78fa      	ldrb	r2, [r7, #3]
 800417e:	4611      	mov	r1, r2
 8004180:	4618      	mov	r0, r3
 8004182:	f005 f9e4 	bl	800954e <USB_ReadChInterrupts>
 8004186:	4603      	mov	r3, r0
 8004188:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800418c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004190:	d112      	bne.n	80041b8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	78fa      	ldrb	r2, [r7, #3]
 8004198:	4611      	mov	r1, r2
 800419a:	4618      	mov	r0, r3
 800419c:	f005 ff7b 	bl	800a096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ac:	461a      	mov	r2, r3
 80041ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041b2:	6093      	str	r3, [r2, #8]
 80041b4:	f000 bd75 	b.w	8004ca2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	78fa      	ldrb	r2, [r7, #3]
 80041be:	4611      	mov	r1, r2
 80041c0:	4618      	mov	r0, r3
 80041c2:	f005 f9c4 	bl	800954e <USB_ReadChInterrupts>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	f040 8128 	bne.w	8004422 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80041d2:	78fb      	ldrb	r3, [r7, #3]
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041de:	461a      	mov	r2, r3
 80041e0:	2320      	movs	r3, #32
 80041e2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80041e4:	78fa      	ldrb	r2, [r7, #3]
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	4613      	mov	r3, r2
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	1a9b      	subs	r3, r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	331b      	adds	r3, #27
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d119      	bne.n	800422e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80041fa:	78fa      	ldrb	r2, [r7, #3]
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	4613      	mov	r3, r2
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	1a9b      	subs	r3, r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	440b      	add	r3, r1
 8004208:	331b      	adds	r3, #27
 800420a:	2200      	movs	r2, #0
 800420c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800420e:	78fb      	ldrb	r3, [r7, #3]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	4413      	add	r3, r2
 8004216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	0151      	lsls	r1, r2, #5
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	440a      	add	r2, r1
 8004224:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	799b      	ldrb	r3, [r3, #6]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d01b      	beq.n	800426e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004236:	78fa      	ldrb	r2, [r7, #3]
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	4613      	mov	r3, r2
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	1a9b      	subs	r3, r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	3330      	adds	r3, #48	; 0x30
 8004246:	6819      	ldr	r1, [r3, #0]
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	4413      	add	r3, r2
 8004250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800425a:	78fa      	ldrb	r2, [r7, #3]
 800425c:	1ac9      	subs	r1, r1, r3
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	4613      	mov	r3, r2
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	1a9b      	subs	r3, r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4403      	add	r3, r0
 800426a:	3338      	adds	r3, #56	; 0x38
 800426c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800426e:	78fa      	ldrb	r2, [r7, #3]
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	4613      	mov	r3, r2
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	1a9b      	subs	r3, r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	440b      	add	r3, r1
 800427c:	334d      	adds	r3, #77	; 0x4d
 800427e:	2201      	movs	r2, #1
 8004280:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004282:	78fa      	ldrb	r2, [r7, #3]
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	4613      	mov	r3, r2
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	440b      	add	r3, r1
 8004290:	3344      	adds	r3, #68	; 0x44
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004296:	78fb      	ldrb	r3, [r7, #3]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	4413      	add	r3, r2
 800429e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a2:	461a      	mov	r2, r3
 80042a4:	2301      	movs	r3, #1
 80042a6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80042a8:	78fa      	ldrb	r2, [r7, #3]
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	4613      	mov	r3, r2
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	1a9b      	subs	r3, r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	3326      	adds	r3, #38	; 0x26
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80042be:	78fa      	ldrb	r2, [r7, #3]
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	4613      	mov	r3, r2
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	1a9b      	subs	r3, r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	3326      	adds	r3, #38	; 0x26
 80042ce:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d110      	bne.n	80042f6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	78fa      	ldrb	r2, [r7, #3]
 80042da:	4611      	mov	r1, r2
 80042dc:	4618      	mov	r0, r3
 80042de:	f005 feda 	bl	800a096 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ee:	461a      	mov	r2, r3
 80042f0:	2310      	movs	r3, #16
 80042f2:	6093      	str	r3, [r2, #8]
 80042f4:	e03d      	b.n	8004372 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80042f6:	78fa      	ldrb	r2, [r7, #3]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	3326      	adds	r3, #38	; 0x26
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b03      	cmp	r3, #3
 800430a:	d00a      	beq.n	8004322 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800430c:	78fa      	ldrb	r2, [r7, #3]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	3326      	adds	r3, #38	; 0x26
 800431c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800431e:	2b01      	cmp	r3, #1
 8004320:	d127      	bne.n	8004372 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004322:	78fb      	ldrb	r3, [r7, #3]
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	4413      	add	r3, r2
 800432a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	78fa      	ldrb	r2, [r7, #3]
 8004332:	0151      	lsls	r1, r2, #5
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	440a      	add	r2, r1
 8004338:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800433c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004340:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004342:	78fa      	ldrb	r2, [r7, #3]
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	4613      	mov	r3, r2
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	1a9b      	subs	r3, r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	440b      	add	r3, r1
 8004350:	334c      	adds	r3, #76	; 0x4c
 8004352:	2201      	movs	r2, #1
 8004354:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004356:	78fa      	ldrb	r2, [r7, #3]
 8004358:	6879      	ldr	r1, [r7, #4]
 800435a:	4613      	mov	r3, r2
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	1a9b      	subs	r3, r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	440b      	add	r3, r1
 8004364:	334c      	adds	r3, #76	; 0x4c
 8004366:	781a      	ldrb	r2, [r3, #0]
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	4619      	mov	r1, r3
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f008 f9fb 	bl	800c768 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	799b      	ldrb	r3, [r3, #6]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d13b      	bne.n	80043f2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800437a:	78fa      	ldrb	r2, [r7, #3]
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	4613      	mov	r3, r2
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	1a9b      	subs	r3, r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	440b      	add	r3, r1
 8004388:	3338      	adds	r3, #56	; 0x38
 800438a:	6819      	ldr	r1, [r3, #0]
 800438c:	78fa      	ldrb	r2, [r7, #3]
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	1a9b      	subs	r3, r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4403      	add	r3, r0
 800439a:	3328      	adds	r3, #40	; 0x28
 800439c:	881b      	ldrh	r3, [r3, #0]
 800439e:	440b      	add	r3, r1
 80043a0:	1e59      	subs	r1, r3, #1
 80043a2:	78fa      	ldrb	r2, [r7, #3]
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	4613      	mov	r3, r2
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4403      	add	r3, r0
 80043b0:	3328      	adds	r3, #40	; 0x28
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 8470 	beq.w	8004ca2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80043c2:	78fa      	ldrb	r2, [r7, #3]
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	4613      	mov	r3, r2
 80043c8:	011b      	lsls	r3, r3, #4
 80043ca:	1a9b      	subs	r3, r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	440b      	add	r3, r1
 80043d0:	333c      	adds	r3, #60	; 0x3c
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	78fa      	ldrb	r2, [r7, #3]
 80043d6:	f083 0301 	eor.w	r3, r3, #1
 80043da:	b2d8      	uxtb	r0, r3
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	4613      	mov	r3, r2
 80043e0:	011b      	lsls	r3, r3, #4
 80043e2:	1a9b      	subs	r3, r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	440b      	add	r3, r1
 80043e8:	333c      	adds	r3, #60	; 0x3c
 80043ea:	4602      	mov	r2, r0
 80043ec:	701a      	strb	r2, [r3, #0]
 80043ee:	f000 bc58 	b.w	8004ca2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80043f2:	78fa      	ldrb	r2, [r7, #3]
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	1a9b      	subs	r3, r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	333c      	adds	r3, #60	; 0x3c
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	78fa      	ldrb	r2, [r7, #3]
 8004406:	f083 0301 	eor.w	r3, r3, #1
 800440a:	b2d8      	uxtb	r0, r3
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	4613      	mov	r3, r2
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	1a9b      	subs	r3, r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	440b      	add	r3, r1
 8004418:	333c      	adds	r3, #60	; 0x3c
 800441a:	4602      	mov	r2, r0
 800441c:	701a      	strb	r2, [r3, #0]
 800441e:	f000 bc40 	b.w	8004ca2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	78fa      	ldrb	r2, [r7, #3]
 8004428:	4611      	mov	r1, r2
 800442a:	4618      	mov	r0, r3
 800442c:	f005 f88f 	bl	800954e <USB_ReadChInterrupts>
 8004430:	4603      	mov	r3, r0
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b20      	cmp	r3, #32
 8004438:	d131      	bne.n	800449e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800443a:	78fb      	ldrb	r3, [r7, #3]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	4413      	add	r3, r2
 8004442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004446:	461a      	mov	r2, r3
 8004448:	2320      	movs	r3, #32
 800444a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800444c:	78fa      	ldrb	r2, [r7, #3]
 800444e:	6879      	ldr	r1, [r7, #4]
 8004450:	4613      	mov	r3, r2
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	1a9b      	subs	r3, r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	331a      	adds	r3, #26
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b01      	cmp	r3, #1
 8004460:	f040 841f 	bne.w	8004ca2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004464:	78fa      	ldrb	r2, [r7, #3]
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	1a9b      	subs	r3, r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	331b      	adds	r3, #27
 8004474:	2201      	movs	r2, #1
 8004476:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004478:	78fa      	ldrb	r2, [r7, #3]
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	4613      	mov	r3, r2
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	1a9b      	subs	r3, r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	334d      	adds	r3, #77	; 0x4d
 8004488:	2203      	movs	r2, #3
 800448a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	78fa      	ldrb	r2, [r7, #3]
 8004492:	4611      	mov	r1, r2
 8004494:	4618      	mov	r0, r3
 8004496:	f005 fdfe 	bl	800a096 <USB_HC_Halt>
 800449a:	f000 bc02 	b.w	8004ca2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	78fa      	ldrb	r2, [r7, #3]
 80044a4:	4611      	mov	r1, r2
 80044a6:	4618      	mov	r0, r3
 80044a8:	f005 f851 	bl	800954e <USB_ReadChInterrupts>
 80044ac:	4603      	mov	r3, r0
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	f040 8305 	bne.w	8004ac2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80044b8:	78fb      	ldrb	r3, [r7, #3]
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c4:	461a      	mov	r2, r3
 80044c6:	2302      	movs	r3, #2
 80044c8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80044ca:	78fa      	ldrb	r2, [r7, #3]
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	4613      	mov	r3, r2
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	1a9b      	subs	r3, r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	334d      	adds	r3, #77	; 0x4d
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d114      	bne.n	800450a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044e0:	78fa      	ldrb	r2, [r7, #3]
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	4613      	mov	r3, r2
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	334d      	adds	r3, #77	; 0x4d
 80044f0:	2202      	movs	r2, #2
 80044f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80044f4:	78fa      	ldrb	r2, [r7, #3]
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	4613      	mov	r3, r2
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	1a9b      	subs	r3, r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	334c      	adds	r3, #76	; 0x4c
 8004504:	2201      	movs	r2, #1
 8004506:	701a      	strb	r2, [r3, #0]
 8004508:	e2cc      	b.n	8004aa4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800450a:	78fa      	ldrb	r2, [r7, #3]
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	1a9b      	subs	r3, r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	440b      	add	r3, r1
 8004518:	334d      	adds	r3, #77	; 0x4d
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b06      	cmp	r3, #6
 800451e:	d114      	bne.n	800454a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004520:	78fa      	ldrb	r2, [r7, #3]
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	4613      	mov	r3, r2
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	1a9b      	subs	r3, r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	334d      	adds	r3, #77	; 0x4d
 8004530:	2202      	movs	r2, #2
 8004532:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004534:	78fa      	ldrb	r2, [r7, #3]
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	4613      	mov	r3, r2
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	1a9b      	subs	r3, r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	440b      	add	r3, r1
 8004542:	334c      	adds	r3, #76	; 0x4c
 8004544:	2205      	movs	r2, #5
 8004546:	701a      	strb	r2, [r3, #0]
 8004548:	e2ac      	b.n	8004aa4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800454a:	78fa      	ldrb	r2, [r7, #3]
 800454c:	6879      	ldr	r1, [r7, #4]
 800454e:	4613      	mov	r3, r2
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	1a9b      	subs	r3, r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	440b      	add	r3, r1
 8004558:	334d      	adds	r3, #77	; 0x4d
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b07      	cmp	r3, #7
 800455e:	d00b      	beq.n	8004578 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004560:	78fa      	ldrb	r2, [r7, #3]
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	4613      	mov	r3, r2
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	1a9b      	subs	r3, r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	440b      	add	r3, r1
 800456e:	334d      	adds	r3, #77	; 0x4d
 8004570:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004572:	2b09      	cmp	r3, #9
 8004574:	f040 80a6 	bne.w	80046c4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004578:	78fa      	ldrb	r2, [r7, #3]
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	4613      	mov	r3, r2
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	1a9b      	subs	r3, r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	334d      	adds	r3, #77	; 0x4d
 8004588:	2202      	movs	r2, #2
 800458a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800458c:	78fa      	ldrb	r2, [r7, #3]
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	4613      	mov	r3, r2
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	1a9b      	subs	r3, r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	3344      	adds	r3, #68	; 0x44
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	1c59      	adds	r1, r3, #1
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	4613      	mov	r3, r2
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	1a9b      	subs	r3, r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4403      	add	r3, r0
 80045ac:	3344      	adds	r3, #68	; 0x44
 80045ae:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80045b0:	78fa      	ldrb	r2, [r7, #3]
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	4613      	mov	r3, r2
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	1a9b      	subs	r3, r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	3344      	adds	r3, #68	; 0x44
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d943      	bls.n	800464e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80045c6:	78fa      	ldrb	r2, [r7, #3]
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	4613      	mov	r3, r2
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	1a9b      	subs	r3, r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	440b      	add	r3, r1
 80045d4:	3344      	adds	r3, #68	; 0x44
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80045da:	78fa      	ldrb	r2, [r7, #3]
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	4613      	mov	r3, r2
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	1a9b      	subs	r3, r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	440b      	add	r3, r1
 80045e8:	331a      	adds	r3, #26
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d123      	bne.n	8004638 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80045f0:	78fa      	ldrb	r2, [r7, #3]
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	4613      	mov	r3, r2
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	331b      	adds	r3, #27
 8004600:	2200      	movs	r2, #0
 8004602:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004604:	78fa      	ldrb	r2, [r7, #3]
 8004606:	6879      	ldr	r1, [r7, #4]
 8004608:	4613      	mov	r3, r2
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	1a9b      	subs	r3, r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	440b      	add	r3, r1
 8004612:	331c      	adds	r3, #28
 8004614:	2200      	movs	r2, #0
 8004616:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004618:	78fb      	ldrb	r3, [r7, #3]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	4413      	add	r3, r2
 8004620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	78fa      	ldrb	r2, [r7, #3]
 8004628:	0151      	lsls	r1, r2, #5
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	440a      	add	r2, r1
 800462e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004636:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004638:	78fa      	ldrb	r2, [r7, #3]
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	4613      	mov	r3, r2
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	1a9b      	subs	r3, r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	334c      	adds	r3, #76	; 0x4c
 8004648:	2204      	movs	r2, #4
 800464a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800464c:	e229      	b.n	8004aa2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800464e:	78fa      	ldrb	r2, [r7, #3]
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	4613      	mov	r3, r2
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	1a9b      	subs	r3, r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	440b      	add	r3, r1
 800465c:	334c      	adds	r3, #76	; 0x4c
 800465e:	2202      	movs	r2, #2
 8004660:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004662:	78fa      	ldrb	r2, [r7, #3]
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	1a9b      	subs	r3, r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	440b      	add	r3, r1
 8004670:	3326      	adds	r3, #38	; 0x26
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00b      	beq.n	8004690 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004678:	78fa      	ldrb	r2, [r7, #3]
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	4613      	mov	r3, r2
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	1a9b      	subs	r3, r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	3326      	adds	r3, #38	; 0x26
 8004688:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800468a:	2b02      	cmp	r3, #2
 800468c:	f040 8209 	bne.w	8004aa2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004690:	78fb      	ldrb	r3, [r7, #3]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	4413      	add	r3, r2
 8004698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046a6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046ae:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046bc:	461a      	mov	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046c2:	e1ee      	b.n	8004aa2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80046c4:	78fa      	ldrb	r2, [r7, #3]
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	4613      	mov	r3, r2
 80046ca:	011b      	lsls	r3, r3, #4
 80046cc:	1a9b      	subs	r3, r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	334d      	adds	r3, #77	; 0x4d
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b05      	cmp	r3, #5
 80046d8:	f040 80c8 	bne.w	800486c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046dc:	78fa      	ldrb	r2, [r7, #3]
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	4613      	mov	r3, r2
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	1a9b      	subs	r3, r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	334d      	adds	r3, #77	; 0x4d
 80046ec:	2202      	movs	r2, #2
 80046ee:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80046f0:	78fa      	ldrb	r2, [r7, #3]
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	4613      	mov	r3, r2
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	1a9b      	subs	r3, r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	331b      	adds	r3, #27
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b01      	cmp	r3, #1
 8004704:	f040 81ce 	bne.w	8004aa4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004708:	78fa      	ldrb	r2, [r7, #3]
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	4613      	mov	r3, r2
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	1a9b      	subs	r3, r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	3326      	adds	r3, #38	; 0x26
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b03      	cmp	r3, #3
 800471c:	d16b      	bne.n	80047f6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800471e:	78fa      	ldrb	r2, [r7, #3]
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	4613      	mov	r3, r2
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	1a9b      	subs	r3, r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	440b      	add	r3, r1
 800472c:	3348      	adds	r3, #72	; 0x48
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	1c59      	adds	r1, r3, #1
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	4613      	mov	r3, r2
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	1a9b      	subs	r3, r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4403      	add	r3, r0
 800473e:	3348      	adds	r3, #72	; 0x48
 8004740:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004742:	78fa      	ldrb	r2, [r7, #3]
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	4613      	mov	r3, r2
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	1a9b      	subs	r3, r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	440b      	add	r3, r1
 8004750:	3348      	adds	r3, #72	; 0x48
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b02      	cmp	r3, #2
 8004756:	d943      	bls.n	80047e0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004758:	78fa      	ldrb	r2, [r7, #3]
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	4613      	mov	r3, r2
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	1a9b      	subs	r3, r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	3348      	adds	r3, #72	; 0x48
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800476c:	78fa      	ldrb	r2, [r7, #3]
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	4613      	mov	r3, r2
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	1a9b      	subs	r3, r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	331b      	adds	r3, #27
 800477c:	2200      	movs	r2, #0
 800477e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004780:	78fa      	ldrb	r2, [r7, #3]
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	4613      	mov	r3, r2
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	1a9b      	subs	r3, r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	440b      	add	r3, r1
 800478e:	3344      	adds	r3, #68	; 0x44
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b02      	cmp	r3, #2
 8004794:	d809      	bhi.n	80047aa <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004796:	78fa      	ldrb	r2, [r7, #3]
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	4613      	mov	r3, r2
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	1a9b      	subs	r3, r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	440b      	add	r3, r1
 80047a4:	331c      	adds	r3, #28
 80047a6:	2201      	movs	r2, #1
 80047a8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80047aa:	78fb      	ldrb	r3, [r7, #3]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	78fa      	ldrb	r2, [r7, #3]
 80047ba:	0151      	lsls	r1, r2, #5
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	440a      	add	r2, r1
 80047c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047c8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80047ca:	78fa      	ldrb	r2, [r7, #3]
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	4613      	mov	r3, r2
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	1a9b      	subs	r3, r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	440b      	add	r3, r1
 80047d8:	334c      	adds	r3, #76	; 0x4c
 80047da:	2204      	movs	r2, #4
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	e014      	b.n	800480a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80047e0:	78fa      	ldrb	r2, [r7, #3]
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	4613      	mov	r3, r2
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	1a9b      	subs	r3, r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	334c      	adds	r3, #76	; 0x4c
 80047f0:	2202      	movs	r2, #2
 80047f2:	701a      	strb	r2, [r3, #0]
 80047f4:	e009      	b.n	800480a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80047f6:	78fa      	ldrb	r2, [r7, #3]
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	4613      	mov	r3, r2
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	1a9b      	subs	r3, r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	440b      	add	r3, r1
 8004804:	334c      	adds	r3, #76	; 0x4c
 8004806:	2202      	movs	r2, #2
 8004808:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800480a:	78fa      	ldrb	r2, [r7, #3]
 800480c:	6879      	ldr	r1, [r7, #4]
 800480e:	4613      	mov	r3, r2
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	1a9b      	subs	r3, r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	440b      	add	r3, r1
 8004818:	3326      	adds	r3, #38	; 0x26
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00b      	beq.n	8004838 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004820:	78fa      	ldrb	r2, [r7, #3]
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	4613      	mov	r3, r2
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	1a9b      	subs	r3, r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	3326      	adds	r3, #38	; 0x26
 8004830:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004832:	2b02      	cmp	r3, #2
 8004834:	f040 8136 	bne.w	8004aa4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	4413      	add	r3, r2
 8004840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800484e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004856:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004858:	78fb      	ldrb	r3, [r7, #3]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	4413      	add	r3, r2
 8004860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004864:	461a      	mov	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	e11b      	b.n	8004aa4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800486c:	78fa      	ldrb	r2, [r7, #3]
 800486e:	6879      	ldr	r1, [r7, #4]
 8004870:	4613      	mov	r3, r2
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	1a9b      	subs	r3, r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	440b      	add	r3, r1
 800487a:	334d      	adds	r3, #77	; 0x4d
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b03      	cmp	r3, #3
 8004880:	f040 8081 	bne.w	8004986 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004884:	78fa      	ldrb	r2, [r7, #3]
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	4613      	mov	r3, r2
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	1a9b      	subs	r3, r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	440b      	add	r3, r1
 8004892:	334d      	adds	r3, #77	; 0x4d
 8004894:	2202      	movs	r2, #2
 8004896:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004898:	78fa      	ldrb	r2, [r7, #3]
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	4613      	mov	r3, r2
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	1a9b      	subs	r3, r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	440b      	add	r3, r1
 80048a6:	331b      	adds	r3, #27
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	f040 80fa 	bne.w	8004aa4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80048b0:	78fa      	ldrb	r2, [r7, #3]
 80048b2:	6879      	ldr	r1, [r7, #4]
 80048b4:	4613      	mov	r3, r2
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	1a9b      	subs	r3, r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	440b      	add	r3, r1
 80048be:	334c      	adds	r3, #76	; 0x4c
 80048c0:	2202      	movs	r2, #2
 80048c2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	78fa      	ldrb	r2, [r7, #3]
 80048d4:	0151      	lsls	r1, r2, #5
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	440a      	add	r2, r1
 80048da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80048e4:	78fb      	ldrb	r3, [r7, #3]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	78fa      	ldrb	r2, [r7, #3]
 80048f4:	0151      	lsls	r1, r2, #5
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	440a      	add	r2, r1
 80048fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004902:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4413      	add	r3, r2
 800490c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	78fa      	ldrb	r2, [r7, #3]
 8004914:	0151      	lsls	r1, r2, #5
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	440a      	add	r2, r1
 800491a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800491e:	f023 0320 	bic.w	r3, r3, #32
 8004922:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004924:	78fa      	ldrb	r2, [r7, #3]
 8004926:	6879      	ldr	r1, [r7, #4]
 8004928:	4613      	mov	r3, r2
 800492a:	011b      	lsls	r3, r3, #4
 800492c:	1a9b      	subs	r3, r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	440b      	add	r3, r1
 8004932:	3326      	adds	r3, #38	; 0x26
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00b      	beq.n	8004952 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800493a:	78fa      	ldrb	r2, [r7, #3]
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	4613      	mov	r3, r2
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	1a9b      	subs	r3, r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	440b      	add	r3, r1
 8004948:	3326      	adds	r3, #38	; 0x26
 800494a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800494c:	2b02      	cmp	r3, #2
 800494e:	f040 80a9 	bne.w	8004aa4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004952:	78fb      	ldrb	r3, [r7, #3]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	4413      	add	r3, r2
 800495a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004968:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004970:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004972:	78fb      	ldrb	r3, [r7, #3]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	4413      	add	r3, r2
 800497a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800497e:	461a      	mov	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6013      	str	r3, [r2, #0]
 8004984:	e08e      	b.n	8004aa4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004986:	78fa      	ldrb	r2, [r7, #3]
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	4613      	mov	r3, r2
 800498c:	011b      	lsls	r3, r3, #4
 800498e:	1a9b      	subs	r3, r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	440b      	add	r3, r1
 8004994:	334d      	adds	r3, #77	; 0x4d
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b04      	cmp	r3, #4
 800499a:	d143      	bne.n	8004a24 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800499c:	78fa      	ldrb	r2, [r7, #3]
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	4613      	mov	r3, r2
 80049a2:	011b      	lsls	r3, r3, #4
 80049a4:	1a9b      	subs	r3, r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	334d      	adds	r3, #77	; 0x4d
 80049ac:	2202      	movs	r2, #2
 80049ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80049b0:	78fa      	ldrb	r2, [r7, #3]
 80049b2:	6879      	ldr	r1, [r7, #4]
 80049b4:	4613      	mov	r3, r2
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	1a9b      	subs	r3, r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	334c      	adds	r3, #76	; 0x4c
 80049c0:	2202      	movs	r2, #2
 80049c2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80049c4:	78fa      	ldrb	r2, [r7, #3]
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	4613      	mov	r3, r2
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	1a9b      	subs	r3, r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	3326      	adds	r3, #38	; 0x26
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80049da:	78fa      	ldrb	r2, [r7, #3]
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	440b      	add	r3, r1
 80049e8:	3326      	adds	r3, #38	; 0x26
 80049ea:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d159      	bne.n	8004aa4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80049f0:	78fb      	ldrb	r3, [r7, #3]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a06:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a0e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6013      	str	r3, [r2, #0]
 8004a22:	e03f      	b.n	8004aa4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004a24:	78fa      	ldrb	r2, [r7, #3]
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	1a9b      	subs	r3, r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	440b      	add	r3, r1
 8004a32:	334d      	adds	r3, #77	; 0x4d
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d126      	bne.n	8004a88 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a3a:	78fa      	ldrb	r2, [r7, #3]
 8004a3c:	6879      	ldr	r1, [r7, #4]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	1a9b      	subs	r3, r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	440b      	add	r3, r1
 8004a48:	334d      	adds	r3, #77	; 0x4d
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004a4e:	78fa      	ldrb	r2, [r7, #3]
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	4613      	mov	r3, r2
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	1a9b      	subs	r3, r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	440b      	add	r3, r1
 8004a5c:	3344      	adds	r3, #68	; 0x44
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	1c59      	adds	r1, r3, #1
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	4613      	mov	r3, r2
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	1a9b      	subs	r3, r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4403      	add	r3, r0
 8004a6e:	3344      	adds	r3, #68	; 0x44
 8004a70:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004a72:	78fa      	ldrb	r2, [r7, #3]
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	4613      	mov	r3, r2
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	1a9b      	subs	r3, r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	440b      	add	r3, r1
 8004a80:	334c      	adds	r3, #76	; 0x4c
 8004a82:	2204      	movs	r2, #4
 8004a84:	701a      	strb	r2, [r3, #0]
 8004a86:	e00d      	b.n	8004aa4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004a88:	78fa      	ldrb	r2, [r7, #3]
 8004a8a:	6879      	ldr	r1, [r7, #4]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	1a9b      	subs	r3, r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	334d      	adds	r3, #77	; 0x4d
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	f000 8100 	beq.w	8004ca0 <HCD_HC_IN_IRQHandler+0xcca>
 8004aa0:	e000      	b.n	8004aa4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004aa2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004aa4:	78fa      	ldrb	r2, [r7, #3]
 8004aa6:	6879      	ldr	r1, [r7, #4]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	011b      	lsls	r3, r3, #4
 8004aac:	1a9b      	subs	r3, r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	440b      	add	r3, r1
 8004ab2:	334c      	adds	r3, #76	; 0x4c
 8004ab4:	781a      	ldrb	r2, [r3, #0]
 8004ab6:	78fb      	ldrb	r3, [r7, #3]
 8004ab8:	4619      	mov	r1, r3
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f007 fe54 	bl	800c768 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004ac0:	e0ef      	b.n	8004ca2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	78fa      	ldrb	r2, [r7, #3]
 8004ac8:	4611      	mov	r1, r2
 8004aca:	4618      	mov	r0, r3
 8004acc:	f004 fd3f 	bl	800954e <USB_ReadChInterrupts>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad6:	2b40      	cmp	r3, #64	; 0x40
 8004ad8:	d12f      	bne.n	8004b3a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004ada:	78fb      	ldrb	r3, [r7, #3]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	2340      	movs	r3, #64	; 0x40
 8004aea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004aec:	78fa      	ldrb	r2, [r7, #3]
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	4613      	mov	r3, r2
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	1a9b      	subs	r3, r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	440b      	add	r3, r1
 8004afa:	334d      	adds	r3, #77	; 0x4d
 8004afc:	2205      	movs	r2, #5
 8004afe:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004b00:	78fa      	ldrb	r2, [r7, #3]
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	4613      	mov	r3, r2
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	1a9b      	subs	r3, r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	331a      	adds	r3, #26
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d109      	bne.n	8004b2a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004b16:	78fa      	ldrb	r2, [r7, #3]
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	1a9b      	subs	r3, r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	440b      	add	r3, r1
 8004b24:	3344      	adds	r3, #68	; 0x44
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	78fa      	ldrb	r2, [r7, #3]
 8004b30:	4611      	mov	r1, r2
 8004b32:	4618      	mov	r0, r3
 8004b34:	f005 faaf 	bl	800a096 <USB_HC_Halt>
 8004b38:	e0b3      	b.n	8004ca2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	78fa      	ldrb	r2, [r7, #3]
 8004b40:	4611      	mov	r1, r2
 8004b42:	4618      	mov	r0, r3
 8004b44:	f004 fd03 	bl	800954e <USB_ReadChInterrupts>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	f003 0310 	and.w	r3, r3, #16
 8004b4e:	2b10      	cmp	r3, #16
 8004b50:	f040 80a7 	bne.w	8004ca2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004b54:	78fa      	ldrb	r2, [r7, #3]
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	1a9b      	subs	r3, r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	3326      	adds	r3, #38	; 0x26
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	d11b      	bne.n	8004ba2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004b6a:	78fa      	ldrb	r2, [r7, #3]
 8004b6c:	6879      	ldr	r1, [r7, #4]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	011b      	lsls	r3, r3, #4
 8004b72:	1a9b      	subs	r3, r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	440b      	add	r3, r1
 8004b78:	3344      	adds	r3, #68	; 0x44
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004b7e:	78fa      	ldrb	r2, [r7, #3]
 8004b80:	6879      	ldr	r1, [r7, #4]
 8004b82:	4613      	mov	r3, r2
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	1a9b      	subs	r3, r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	440b      	add	r3, r1
 8004b8c:	334d      	adds	r3, #77	; 0x4d
 8004b8e:	2204      	movs	r2, #4
 8004b90:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	78fa      	ldrb	r2, [r7, #3]
 8004b98:	4611      	mov	r1, r2
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f005 fa7b 	bl	800a096 <USB_HC_Halt>
 8004ba0:	e03f      	b.n	8004c22 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ba2:	78fa      	ldrb	r2, [r7, #3]
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	1a9b      	subs	r3, r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	440b      	add	r3, r1
 8004bb0:	3326      	adds	r3, #38	; 0x26
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00a      	beq.n	8004bce <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004bb8:	78fa      	ldrb	r2, [r7, #3]
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	1a9b      	subs	r3, r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	3326      	adds	r3, #38	; 0x26
 8004bc8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d129      	bne.n	8004c22 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004bce:	78fa      	ldrb	r2, [r7, #3]
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	1a9b      	subs	r3, r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	3344      	adds	r3, #68	; 0x44
 8004bde:	2200      	movs	r2, #0
 8004be0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	799b      	ldrb	r3, [r3, #6]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <HCD_HC_IN_IRQHandler+0xc2a>
 8004bea:	78fa      	ldrb	r2, [r7, #3]
 8004bec:	6879      	ldr	r1, [r7, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	1a9b      	subs	r3, r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	331b      	adds	r3, #27
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d110      	bne.n	8004c22 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004c00:	78fa      	ldrb	r2, [r7, #3]
 8004c02:	6879      	ldr	r1, [r7, #4]
 8004c04:	4613      	mov	r3, r2
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	1a9b      	subs	r3, r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	334d      	adds	r3, #77	; 0x4d
 8004c10:	2204      	movs	r2, #4
 8004c12:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	78fa      	ldrb	r2, [r7, #3]
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f005 fa3a 	bl	800a096 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004c22:	78fa      	ldrb	r2, [r7, #3]
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	4613      	mov	r3, r2
 8004c28:	011b      	lsls	r3, r3, #4
 8004c2a:	1a9b      	subs	r3, r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	440b      	add	r3, r1
 8004c30:	331b      	adds	r3, #27
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d129      	bne.n	8004c8c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004c38:	78fa      	ldrb	r2, [r7, #3]
 8004c3a:	6879      	ldr	r1, [r7, #4]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	331b      	adds	r3, #27
 8004c48:	2200      	movs	r2, #0
 8004c4a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	78fa      	ldrb	r2, [r7, #3]
 8004c5c:	0151      	lsls	r1, r2, #5
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	440a      	add	r2, r1
 8004c62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c6a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004c6c:	78fb      	ldrb	r3, [r7, #3]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	78fa      	ldrb	r2, [r7, #3]
 8004c7c:	0151      	lsls	r1, r2, #5
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	440a      	add	r2, r1
 8004c82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c86:	f043 0320 	orr.w	r3, r3, #32
 8004c8a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004c8c:	78fb      	ldrb	r3, [r7, #3]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c98:	461a      	mov	r2, r3
 8004c9a:	2310      	movs	r3, #16
 8004c9c:	6093      	str	r3, [r2, #8]
 8004c9e:	e000      	b.n	8004ca2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004ca0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	78fa      	ldrb	r2, [r7, #3]
 8004cc4:	4611      	mov	r1, r2
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f004 fc41 	bl	800954e <USB_ReadChInterrupts>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d11b      	bne.n	8004d0e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004cd6:	78fb      	ldrb	r3, [r7, #3]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	2304      	movs	r3, #4
 8004ce6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004ce8:	78fa      	ldrb	r2, [r7, #3]
 8004cea:	6879      	ldr	r1, [r7, #4]
 8004cec:	4613      	mov	r3, r2
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	1a9b      	subs	r3, r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	334d      	adds	r3, #77	; 0x4d
 8004cf8:	2207      	movs	r2, #7
 8004cfa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	78fa      	ldrb	r2, [r7, #3]
 8004d02:	4611      	mov	r1, r2
 8004d04:	4618      	mov	r0, r3
 8004d06:	f005 f9c6 	bl	800a096 <USB_HC_Halt>
 8004d0a:	f000 bc6f 	b.w	80055ec <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	78fa      	ldrb	r2, [r7, #3]
 8004d14:	4611      	mov	r1, r2
 8004d16:	4618      	mov	r0, r3
 8004d18:	f004 fc19 	bl	800954e <USB_ReadChInterrupts>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	f003 0320 	and.w	r3, r3, #32
 8004d22:	2b20      	cmp	r3, #32
 8004d24:	f040 8082 	bne.w	8004e2c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004d28:	78fb      	ldrb	r3, [r7, #3]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d34:	461a      	mov	r2, r3
 8004d36:	2320      	movs	r3, #32
 8004d38:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004d3a:	78fa      	ldrb	r2, [r7, #3]
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	1a9b      	subs	r3, r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	440b      	add	r3, r1
 8004d48:	3319      	adds	r3, #25
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d124      	bne.n	8004d9a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004d50:	78fa      	ldrb	r2, [r7, #3]
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	4613      	mov	r3, r2
 8004d56:	011b      	lsls	r3, r3, #4
 8004d58:	1a9b      	subs	r3, r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	3319      	adds	r3, #25
 8004d60:	2200      	movs	r2, #0
 8004d62:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004d64:	78fa      	ldrb	r2, [r7, #3]
 8004d66:	6879      	ldr	r1, [r7, #4]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	1a9b      	subs	r3, r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	334c      	adds	r3, #76	; 0x4c
 8004d74:	2202      	movs	r2, #2
 8004d76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004d78:	78fa      	ldrb	r2, [r7, #3]
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	1a9b      	subs	r3, r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	440b      	add	r3, r1
 8004d86:	334d      	adds	r3, #77	; 0x4d
 8004d88:	2203      	movs	r2, #3
 8004d8a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	78fa      	ldrb	r2, [r7, #3]
 8004d92:	4611      	mov	r1, r2
 8004d94:	4618      	mov	r0, r3
 8004d96:	f005 f97e 	bl	800a096 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004d9a:	78fa      	ldrb	r2, [r7, #3]
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	1a9b      	subs	r3, r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	440b      	add	r3, r1
 8004da8:	331a      	adds	r3, #26
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	f040 841d 	bne.w	80055ec <HCD_HC_OUT_IRQHandler+0x944>
 8004db2:	78fa      	ldrb	r2, [r7, #3]
 8004db4:	6879      	ldr	r1, [r7, #4]
 8004db6:	4613      	mov	r3, r2
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	1a9b      	subs	r3, r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	440b      	add	r3, r1
 8004dc0:	331b      	adds	r3, #27
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f040 8411 	bne.w	80055ec <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004dca:	78fa      	ldrb	r2, [r7, #3]
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	1a9b      	subs	r3, r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	440b      	add	r3, r1
 8004dd8:	3326      	adds	r3, #38	; 0x26
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d009      	beq.n	8004df4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004de0:	78fa      	ldrb	r2, [r7, #3]
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	4613      	mov	r3, r2
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	1a9b      	subs	r3, r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	440b      	add	r3, r1
 8004dee:	331b      	adds	r3, #27
 8004df0:	2201      	movs	r2, #1
 8004df2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004df4:	78fa      	ldrb	r2, [r7, #3]
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	011b      	lsls	r3, r3, #4
 8004dfc:	1a9b      	subs	r3, r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	440b      	add	r3, r1
 8004e02:	334d      	adds	r3, #77	; 0x4d
 8004e04:	2203      	movs	r2, #3
 8004e06:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	78fa      	ldrb	r2, [r7, #3]
 8004e0e:	4611      	mov	r1, r2
 8004e10:	4618      	mov	r0, r3
 8004e12:	f005 f940 	bl	800a096 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004e16:	78fa      	ldrb	r2, [r7, #3]
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	1a9b      	subs	r3, r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	440b      	add	r3, r1
 8004e24:	3344      	adds	r3, #68	; 0x44
 8004e26:	2200      	movs	r2, #0
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	e3df      	b.n	80055ec <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	78fa      	ldrb	r2, [r7, #3]
 8004e32:	4611      	mov	r1, r2
 8004e34:	4618      	mov	r0, r3
 8004e36:	f004 fb8a 	bl	800954e <USB_ReadChInterrupts>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e44:	d111      	bne.n	8004e6a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004e46:	78fb      	ldrb	r3, [r7, #3]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e52:	461a      	mov	r2, r3
 8004e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e58:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	78fa      	ldrb	r2, [r7, #3]
 8004e60:	4611      	mov	r1, r2
 8004e62:	4618      	mov	r0, r3
 8004e64:	f005 f917 	bl	800a096 <USB_HC_Halt>
 8004e68:	e3c0      	b.n	80055ec <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	78fa      	ldrb	r2, [r7, #3]
 8004e70:	4611      	mov	r1, r2
 8004e72:	4618      	mov	r0, r3
 8004e74:	f004 fb6b 	bl	800954e <USB_ReadChInterrupts>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d168      	bne.n	8004f54 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004e82:	78fa      	ldrb	r2, [r7, #3]
 8004e84:	6879      	ldr	r1, [r7, #4]
 8004e86:	4613      	mov	r3, r2
 8004e88:	011b      	lsls	r3, r3, #4
 8004e8a:	1a9b      	subs	r3, r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	440b      	add	r3, r1
 8004e90:	3344      	adds	r3, #68	; 0x44
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	78fa      	ldrb	r2, [r7, #3]
 8004e9c:	4611      	mov	r1, r2
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f004 fb55 	bl	800954e <USB_ReadChInterrupts>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eaa:	2b40      	cmp	r3, #64	; 0x40
 8004eac:	d112      	bne.n	8004ed4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004eae:	78fa      	ldrb	r2, [r7, #3]
 8004eb0:	6879      	ldr	r1, [r7, #4]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	011b      	lsls	r3, r3, #4
 8004eb6:	1a9b      	subs	r3, r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	440b      	add	r3, r1
 8004ebc:	3319      	adds	r3, #25
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004ec2:	78fb      	ldrb	r3, [r7, #3]
 8004ec4:	015a      	lsls	r2, r3, #5
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ece:	461a      	mov	r2, r3
 8004ed0:	2340      	movs	r3, #64	; 0x40
 8004ed2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004ed4:	78fa      	ldrb	r2, [r7, #3]
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	1a9b      	subs	r3, r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	440b      	add	r3, r1
 8004ee2:	331b      	adds	r3, #27
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d019      	beq.n	8004f1e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004eea:	78fa      	ldrb	r2, [r7, #3]
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	1a9b      	subs	r3, r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	331b      	adds	r3, #27
 8004efa:	2200      	movs	r2, #0
 8004efc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004efe:	78fb      	ldrb	r3, [r7, #3]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	78fa      	ldrb	r2, [r7, #3]
 8004f0e:	0151      	lsls	r1, r2, #5
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	440a      	add	r2, r1
 8004f14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f1c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004f1e:	78fb      	ldrb	r3, [r7, #3]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004f30:	78fa      	ldrb	r2, [r7, #3]
 8004f32:	6879      	ldr	r1, [r7, #4]
 8004f34:	4613      	mov	r3, r2
 8004f36:	011b      	lsls	r3, r3, #4
 8004f38:	1a9b      	subs	r3, r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	440b      	add	r3, r1
 8004f3e:	334d      	adds	r3, #77	; 0x4d
 8004f40:	2201      	movs	r2, #1
 8004f42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	78fa      	ldrb	r2, [r7, #3]
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f005 f8a2 	bl	800a096 <USB_HC_Halt>
 8004f52:	e34b      	b.n	80055ec <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	78fa      	ldrb	r2, [r7, #3]
 8004f5a:	4611      	mov	r1, r2
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f004 faf6 	bl	800954e <USB_ReadChInterrupts>
 8004f62:	4603      	mov	r3, r0
 8004f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f68:	2b40      	cmp	r3, #64	; 0x40
 8004f6a:	d139      	bne.n	8004fe0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004f6c:	78fa      	ldrb	r2, [r7, #3]
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	4613      	mov	r3, r2
 8004f72:	011b      	lsls	r3, r3, #4
 8004f74:	1a9b      	subs	r3, r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	334d      	adds	r3, #77	; 0x4d
 8004f7c:	2205      	movs	r2, #5
 8004f7e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004f80:	78fa      	ldrb	r2, [r7, #3]
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	4613      	mov	r3, r2
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	1a9b      	subs	r3, r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	440b      	add	r3, r1
 8004f8e:	331a      	adds	r3, #26
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d109      	bne.n	8004faa <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004f96:	78fa      	ldrb	r2, [r7, #3]
 8004f98:	6879      	ldr	r1, [r7, #4]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	011b      	lsls	r3, r3, #4
 8004f9e:	1a9b      	subs	r3, r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	440b      	add	r3, r1
 8004fa4:	3319      	adds	r3, #25
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004faa:	78fa      	ldrb	r2, [r7, #3]
 8004fac:	6879      	ldr	r1, [r7, #4]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	011b      	lsls	r3, r3, #4
 8004fb2:	1a9b      	subs	r3, r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	3344      	adds	r3, #68	; 0x44
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	78fa      	ldrb	r2, [r7, #3]
 8004fc4:	4611      	mov	r1, r2
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f005 f865 	bl	800a096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004fcc:	78fb      	ldrb	r3, [r7, #3]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd8:	461a      	mov	r2, r3
 8004fda:	2340      	movs	r3, #64	; 0x40
 8004fdc:	6093      	str	r3, [r2, #8]
 8004fde:	e305      	b.n	80055ec <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	78fa      	ldrb	r2, [r7, #3]
 8004fe6:	4611      	mov	r1, r2
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f004 fab0 	bl	800954e <USB_ReadChInterrupts>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d11a      	bne.n	800502e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004ff8:	78fb      	ldrb	r3, [r7, #3]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005004:	461a      	mov	r2, r3
 8005006:	2308      	movs	r3, #8
 8005008:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800500a:	78fa      	ldrb	r2, [r7, #3]
 800500c:	6879      	ldr	r1, [r7, #4]
 800500e:	4613      	mov	r3, r2
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	1a9b      	subs	r3, r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	440b      	add	r3, r1
 8005018:	334d      	adds	r3, #77	; 0x4d
 800501a:	2206      	movs	r2, #6
 800501c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	78fa      	ldrb	r2, [r7, #3]
 8005024:	4611      	mov	r1, r2
 8005026:	4618      	mov	r0, r3
 8005028:	f005 f835 	bl	800a096 <USB_HC_Halt>
 800502c:	e2de      	b.n	80055ec <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	78fa      	ldrb	r2, [r7, #3]
 8005034:	4611      	mov	r1, r2
 8005036:	4618      	mov	r0, r3
 8005038:	f004 fa89 	bl	800954e <USB_ReadChInterrupts>
 800503c:	4603      	mov	r3, r0
 800503e:	f003 0310 	and.w	r3, r3, #16
 8005042:	2b10      	cmp	r3, #16
 8005044:	d144      	bne.n	80050d0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005046:	78fa      	ldrb	r2, [r7, #3]
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	4613      	mov	r3, r2
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	1a9b      	subs	r3, r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	440b      	add	r3, r1
 8005054:	3344      	adds	r3, #68	; 0x44
 8005056:	2200      	movs	r2, #0
 8005058:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800505a:	78fa      	ldrb	r2, [r7, #3]
 800505c:	6879      	ldr	r1, [r7, #4]
 800505e:	4613      	mov	r3, r2
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	1a9b      	subs	r3, r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	440b      	add	r3, r1
 8005068:	334d      	adds	r3, #77	; 0x4d
 800506a:	2204      	movs	r2, #4
 800506c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800506e:	78fa      	ldrb	r2, [r7, #3]
 8005070:	6879      	ldr	r1, [r7, #4]
 8005072:	4613      	mov	r3, r2
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	1a9b      	subs	r3, r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	440b      	add	r3, r1
 800507c:	3319      	adds	r3, #25
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d114      	bne.n	80050ae <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005084:	78fa      	ldrb	r2, [r7, #3]
 8005086:	6879      	ldr	r1, [r7, #4]
 8005088:	4613      	mov	r3, r2
 800508a:	011b      	lsls	r3, r3, #4
 800508c:	1a9b      	subs	r3, r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	440b      	add	r3, r1
 8005092:	3318      	adds	r3, #24
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d109      	bne.n	80050ae <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800509a:	78fa      	ldrb	r2, [r7, #3]
 800509c:	6879      	ldr	r1, [r7, #4]
 800509e:	4613      	mov	r3, r2
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	1a9b      	subs	r3, r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	440b      	add	r3, r1
 80050a8:	3319      	adds	r3, #25
 80050aa:	2201      	movs	r2, #1
 80050ac:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	78fa      	ldrb	r2, [r7, #3]
 80050b4:	4611      	mov	r1, r2
 80050b6:	4618      	mov	r0, r3
 80050b8:	f004 ffed 	bl	800a096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c8:	461a      	mov	r2, r3
 80050ca:	2310      	movs	r3, #16
 80050cc:	6093      	str	r3, [r2, #8]
 80050ce:	e28d      	b.n	80055ec <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	78fa      	ldrb	r2, [r7, #3]
 80050d6:	4611      	mov	r1, r2
 80050d8:	4618      	mov	r0, r3
 80050da:	f004 fa38 	bl	800954e <USB_ReadChInterrupts>
 80050de:	4603      	mov	r3, r0
 80050e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e4:	2b80      	cmp	r3, #128	; 0x80
 80050e6:	d169      	bne.n	80051bc <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	799b      	ldrb	r3, [r3, #6]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d111      	bne.n	8005114 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80050f0:	78fa      	ldrb	r2, [r7, #3]
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	4613      	mov	r3, r2
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	1a9b      	subs	r3, r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	334d      	adds	r3, #77	; 0x4d
 8005100:	2207      	movs	r2, #7
 8005102:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	78fa      	ldrb	r2, [r7, #3]
 800510a:	4611      	mov	r1, r2
 800510c:	4618      	mov	r0, r3
 800510e:	f004 ffc2 	bl	800a096 <USB_HC_Halt>
 8005112:	e049      	b.n	80051a8 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005114:	78fa      	ldrb	r2, [r7, #3]
 8005116:	6879      	ldr	r1, [r7, #4]
 8005118:	4613      	mov	r3, r2
 800511a:	011b      	lsls	r3, r3, #4
 800511c:	1a9b      	subs	r3, r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	440b      	add	r3, r1
 8005122:	3344      	adds	r3, #68	; 0x44
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	1c59      	adds	r1, r3, #1
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	4613      	mov	r3, r2
 800512c:	011b      	lsls	r3, r3, #4
 800512e:	1a9b      	subs	r3, r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4403      	add	r3, r0
 8005134:	3344      	adds	r3, #68	; 0x44
 8005136:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005138:	78fa      	ldrb	r2, [r7, #3]
 800513a:	6879      	ldr	r1, [r7, #4]
 800513c:	4613      	mov	r3, r2
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	1a9b      	subs	r3, r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	440b      	add	r3, r1
 8005146:	3344      	adds	r3, #68	; 0x44
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b02      	cmp	r3, #2
 800514c:	d922      	bls.n	8005194 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800514e:	78fa      	ldrb	r2, [r7, #3]
 8005150:	6879      	ldr	r1, [r7, #4]
 8005152:	4613      	mov	r3, r2
 8005154:	011b      	lsls	r3, r3, #4
 8005156:	1a9b      	subs	r3, r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	440b      	add	r3, r1
 800515c:	3344      	adds	r3, #68	; 0x44
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005162:	78fa      	ldrb	r2, [r7, #3]
 8005164:	6879      	ldr	r1, [r7, #4]
 8005166:	4613      	mov	r3, r2
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	1a9b      	subs	r3, r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	440b      	add	r3, r1
 8005170:	334c      	adds	r3, #76	; 0x4c
 8005172:	2204      	movs	r2, #4
 8005174:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005176:	78fa      	ldrb	r2, [r7, #3]
 8005178:	6879      	ldr	r1, [r7, #4]
 800517a:	4613      	mov	r3, r2
 800517c:	011b      	lsls	r3, r3, #4
 800517e:	1a9b      	subs	r3, r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	440b      	add	r3, r1
 8005184:	334c      	adds	r3, #76	; 0x4c
 8005186:	781a      	ldrb	r2, [r3, #0]
 8005188:	78fb      	ldrb	r3, [r7, #3]
 800518a:	4619      	mov	r1, r3
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f007 faeb 	bl	800c768 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005192:	e009      	b.n	80051a8 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005194:	78fa      	ldrb	r2, [r7, #3]
 8005196:	6879      	ldr	r1, [r7, #4]
 8005198:	4613      	mov	r3, r2
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	1a9b      	subs	r3, r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	440b      	add	r3, r1
 80051a2:	334c      	adds	r3, #76	; 0x4c
 80051a4:	2202      	movs	r2, #2
 80051a6:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80051a8:	78fb      	ldrb	r3, [r7, #3]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b4:	461a      	mov	r2, r3
 80051b6:	2380      	movs	r3, #128	; 0x80
 80051b8:	6093      	str	r3, [r2, #8]
 80051ba:	e217      	b.n	80055ec <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	78fa      	ldrb	r2, [r7, #3]
 80051c2:	4611      	mov	r1, r2
 80051c4:	4618      	mov	r0, r3
 80051c6:	f004 f9c2 	bl	800954e <USB_ReadChInterrupts>
 80051ca:	4603      	mov	r3, r0
 80051cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d4:	d11b      	bne.n	800520e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80051d6:	78fa      	ldrb	r2, [r7, #3]
 80051d8:	6879      	ldr	r1, [r7, #4]
 80051da:	4613      	mov	r3, r2
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	1a9b      	subs	r3, r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	440b      	add	r3, r1
 80051e4:	334d      	adds	r3, #77	; 0x4d
 80051e6:	2209      	movs	r2, #9
 80051e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	78fa      	ldrb	r2, [r7, #3]
 80051f0:	4611      	mov	r1, r2
 80051f2:	4618      	mov	r0, r3
 80051f4:	f004 ff4f 	bl	800a096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80051f8:	78fb      	ldrb	r3, [r7, #3]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005204:	461a      	mov	r2, r3
 8005206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800520a:	6093      	str	r3, [r2, #8]
 800520c:	e1ee      	b.n	80055ec <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	78fa      	ldrb	r2, [r7, #3]
 8005214:	4611      	mov	r1, r2
 8005216:	4618      	mov	r0, r3
 8005218:	f004 f999 	bl	800954e <USB_ReadChInterrupts>
 800521c:	4603      	mov	r3, r0
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b02      	cmp	r3, #2
 8005224:	f040 81df 	bne.w	80055e6 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005228:	78fb      	ldrb	r3, [r7, #3]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	4413      	add	r3, r2
 8005230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005234:	461a      	mov	r2, r3
 8005236:	2302      	movs	r3, #2
 8005238:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800523a:	78fa      	ldrb	r2, [r7, #3]
 800523c:	6879      	ldr	r1, [r7, #4]
 800523e:	4613      	mov	r3, r2
 8005240:	011b      	lsls	r3, r3, #4
 8005242:	1a9b      	subs	r3, r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	440b      	add	r3, r1
 8005248:	334d      	adds	r3, #77	; 0x4d
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b01      	cmp	r3, #1
 800524e:	f040 8093 	bne.w	8005378 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005252:	78fa      	ldrb	r2, [r7, #3]
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	4613      	mov	r3, r2
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	1a9b      	subs	r3, r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	440b      	add	r3, r1
 8005260:	334d      	adds	r3, #77	; 0x4d
 8005262:	2202      	movs	r2, #2
 8005264:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005266:	78fa      	ldrb	r2, [r7, #3]
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	4613      	mov	r3, r2
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	1a9b      	subs	r3, r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	440b      	add	r3, r1
 8005274:	334c      	adds	r3, #76	; 0x4c
 8005276:	2201      	movs	r2, #1
 8005278:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800527a:	78fa      	ldrb	r2, [r7, #3]
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	4613      	mov	r3, r2
 8005280:	011b      	lsls	r3, r3, #4
 8005282:	1a9b      	subs	r3, r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	440b      	add	r3, r1
 8005288:	3326      	adds	r3, #38	; 0x26
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	2b02      	cmp	r3, #2
 800528e:	d00b      	beq.n	80052a8 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005290:	78fa      	ldrb	r2, [r7, #3]
 8005292:	6879      	ldr	r1, [r7, #4]
 8005294:	4613      	mov	r3, r2
 8005296:	011b      	lsls	r3, r3, #4
 8005298:	1a9b      	subs	r3, r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	440b      	add	r3, r1
 800529e:	3326      	adds	r3, #38	; 0x26
 80052a0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	f040 8190 	bne.w	80055c8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	799b      	ldrb	r3, [r3, #6]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d115      	bne.n	80052dc <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80052b0:	78fa      	ldrb	r2, [r7, #3]
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	4613      	mov	r3, r2
 80052b6:	011b      	lsls	r3, r3, #4
 80052b8:	1a9b      	subs	r3, r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	440b      	add	r3, r1
 80052be:	333d      	adds	r3, #61	; 0x3d
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	78fa      	ldrb	r2, [r7, #3]
 80052c4:	f083 0301 	eor.w	r3, r3, #1
 80052c8:	b2d8      	uxtb	r0, r3
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	4613      	mov	r3, r2
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	1a9b      	subs	r3, r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	333d      	adds	r3, #61	; 0x3d
 80052d8:	4602      	mov	r2, r0
 80052da:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	799b      	ldrb	r3, [r3, #6]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	f040 8171 	bne.w	80055c8 <HCD_HC_OUT_IRQHandler+0x920>
 80052e6:	78fa      	ldrb	r2, [r7, #3]
 80052e8:	6879      	ldr	r1, [r7, #4]
 80052ea:	4613      	mov	r3, r2
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	1a9b      	subs	r3, r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	440b      	add	r3, r1
 80052f4:	3334      	adds	r3, #52	; 0x34
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 8165 	beq.w	80055c8 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80052fe:	78fa      	ldrb	r2, [r7, #3]
 8005300:	6879      	ldr	r1, [r7, #4]
 8005302:	4613      	mov	r3, r2
 8005304:	011b      	lsls	r3, r3, #4
 8005306:	1a9b      	subs	r3, r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	440b      	add	r3, r1
 800530c:	3334      	adds	r3, #52	; 0x34
 800530e:	6819      	ldr	r1, [r3, #0]
 8005310:	78fa      	ldrb	r2, [r7, #3]
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	4613      	mov	r3, r2
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	1a9b      	subs	r3, r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4403      	add	r3, r0
 800531e:	3328      	adds	r3, #40	; 0x28
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	440b      	add	r3, r1
 8005324:	1e59      	subs	r1, r3, #1
 8005326:	78fa      	ldrb	r2, [r7, #3]
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	4613      	mov	r3, r2
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	1a9b      	subs	r3, r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4403      	add	r3, r0
 8005334:	3328      	adds	r3, #40	; 0x28
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	fbb1 f3f3 	udiv	r3, r1, r3
 800533c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 813f 	beq.w	80055c8 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800534a:	78fa      	ldrb	r2, [r7, #3]
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	4613      	mov	r3, r2
 8005350:	011b      	lsls	r3, r3, #4
 8005352:	1a9b      	subs	r3, r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	440b      	add	r3, r1
 8005358:	333d      	adds	r3, #61	; 0x3d
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	78fa      	ldrb	r2, [r7, #3]
 800535e:	f083 0301 	eor.w	r3, r3, #1
 8005362:	b2d8      	uxtb	r0, r3
 8005364:	6879      	ldr	r1, [r7, #4]
 8005366:	4613      	mov	r3, r2
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	1a9b      	subs	r3, r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	440b      	add	r3, r1
 8005370:	333d      	adds	r3, #61	; 0x3d
 8005372:	4602      	mov	r2, r0
 8005374:	701a      	strb	r2, [r3, #0]
 8005376:	e127      	b.n	80055c8 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005378:	78fa      	ldrb	r2, [r7, #3]
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	4613      	mov	r3, r2
 800537e:	011b      	lsls	r3, r3, #4
 8005380:	1a9b      	subs	r3, r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	440b      	add	r3, r1
 8005386:	334d      	adds	r3, #77	; 0x4d
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	2b03      	cmp	r3, #3
 800538c:	d120      	bne.n	80053d0 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800538e:	78fa      	ldrb	r2, [r7, #3]
 8005390:	6879      	ldr	r1, [r7, #4]
 8005392:	4613      	mov	r3, r2
 8005394:	011b      	lsls	r3, r3, #4
 8005396:	1a9b      	subs	r3, r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	440b      	add	r3, r1
 800539c:	334d      	adds	r3, #77	; 0x4d
 800539e:	2202      	movs	r2, #2
 80053a0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80053a2:	78fa      	ldrb	r2, [r7, #3]
 80053a4:	6879      	ldr	r1, [r7, #4]
 80053a6:	4613      	mov	r3, r2
 80053a8:	011b      	lsls	r3, r3, #4
 80053aa:	1a9b      	subs	r3, r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	440b      	add	r3, r1
 80053b0:	331b      	adds	r3, #27
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	f040 8107 	bne.w	80055c8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80053ba:	78fa      	ldrb	r2, [r7, #3]
 80053bc:	6879      	ldr	r1, [r7, #4]
 80053be:	4613      	mov	r3, r2
 80053c0:	011b      	lsls	r3, r3, #4
 80053c2:	1a9b      	subs	r3, r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	440b      	add	r3, r1
 80053c8:	334c      	adds	r3, #76	; 0x4c
 80053ca:	2202      	movs	r2, #2
 80053cc:	701a      	strb	r2, [r3, #0]
 80053ce:	e0fb      	b.n	80055c8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80053d0:	78fa      	ldrb	r2, [r7, #3]
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	4613      	mov	r3, r2
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	1a9b      	subs	r3, r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	440b      	add	r3, r1
 80053de:	334d      	adds	r3, #77	; 0x4d
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d13a      	bne.n	800545c <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80053e6:	78fa      	ldrb	r2, [r7, #3]
 80053e8:	6879      	ldr	r1, [r7, #4]
 80053ea:	4613      	mov	r3, r2
 80053ec:	011b      	lsls	r3, r3, #4
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	440b      	add	r3, r1
 80053f4:	334d      	adds	r3, #77	; 0x4d
 80053f6:	2202      	movs	r2, #2
 80053f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80053fa:	78fa      	ldrb	r2, [r7, #3]
 80053fc:	6879      	ldr	r1, [r7, #4]
 80053fe:	4613      	mov	r3, r2
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	1a9b      	subs	r3, r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	440b      	add	r3, r1
 8005408:	334c      	adds	r3, #76	; 0x4c
 800540a:	2202      	movs	r2, #2
 800540c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800540e:	78fa      	ldrb	r2, [r7, #3]
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	4613      	mov	r3, r2
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	1a9b      	subs	r3, r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	440b      	add	r3, r1
 800541c:	331b      	adds	r3, #27
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2b01      	cmp	r3, #1
 8005422:	f040 80d1 	bne.w	80055c8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005426:	78fa      	ldrb	r2, [r7, #3]
 8005428:	6879      	ldr	r1, [r7, #4]
 800542a:	4613      	mov	r3, r2
 800542c:	011b      	lsls	r3, r3, #4
 800542e:	1a9b      	subs	r3, r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	440b      	add	r3, r1
 8005434:	331b      	adds	r3, #27
 8005436:	2200      	movs	r2, #0
 8005438:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800543a:	78fb      	ldrb	r3, [r7, #3]
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	4413      	add	r3, r2
 8005442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	78fa      	ldrb	r2, [r7, #3]
 800544a:	0151      	lsls	r1, r2, #5
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	440a      	add	r2, r1
 8005450:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005458:	6053      	str	r3, [r2, #4]
 800545a:	e0b5      	b.n	80055c8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800545c:	78fa      	ldrb	r2, [r7, #3]
 800545e:	6879      	ldr	r1, [r7, #4]
 8005460:	4613      	mov	r3, r2
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	1a9b      	subs	r3, r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	440b      	add	r3, r1
 800546a:	334d      	adds	r3, #77	; 0x4d
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b05      	cmp	r3, #5
 8005470:	d114      	bne.n	800549c <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005472:	78fa      	ldrb	r2, [r7, #3]
 8005474:	6879      	ldr	r1, [r7, #4]
 8005476:	4613      	mov	r3, r2
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	1a9b      	subs	r3, r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	440b      	add	r3, r1
 8005480:	334d      	adds	r3, #77	; 0x4d
 8005482:	2202      	movs	r2, #2
 8005484:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005486:	78fa      	ldrb	r2, [r7, #3]
 8005488:	6879      	ldr	r1, [r7, #4]
 800548a:	4613      	mov	r3, r2
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	1a9b      	subs	r3, r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	440b      	add	r3, r1
 8005494:	334c      	adds	r3, #76	; 0x4c
 8005496:	2202      	movs	r2, #2
 8005498:	701a      	strb	r2, [r3, #0]
 800549a:	e095      	b.n	80055c8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800549c:	78fa      	ldrb	r2, [r7, #3]
 800549e:	6879      	ldr	r1, [r7, #4]
 80054a0:	4613      	mov	r3, r2
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	1a9b      	subs	r3, r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	440b      	add	r3, r1
 80054aa:	334d      	adds	r3, #77	; 0x4d
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	2b06      	cmp	r3, #6
 80054b0:	d114      	bne.n	80054dc <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80054b2:	78fa      	ldrb	r2, [r7, #3]
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	4613      	mov	r3, r2
 80054b8:	011b      	lsls	r3, r3, #4
 80054ba:	1a9b      	subs	r3, r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	440b      	add	r3, r1
 80054c0:	334d      	adds	r3, #77	; 0x4d
 80054c2:	2202      	movs	r2, #2
 80054c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80054c6:	78fa      	ldrb	r2, [r7, #3]
 80054c8:	6879      	ldr	r1, [r7, #4]
 80054ca:	4613      	mov	r3, r2
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	1a9b      	subs	r3, r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	440b      	add	r3, r1
 80054d4:	334c      	adds	r3, #76	; 0x4c
 80054d6:	2205      	movs	r2, #5
 80054d8:	701a      	strb	r2, [r3, #0]
 80054da:	e075      	b.n	80055c8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80054dc:	78fa      	ldrb	r2, [r7, #3]
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	4613      	mov	r3, r2
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	440b      	add	r3, r1
 80054ea:	334d      	adds	r3, #77	; 0x4d
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2b07      	cmp	r3, #7
 80054f0:	d00a      	beq.n	8005508 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80054f2:	78fa      	ldrb	r2, [r7, #3]
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	4613      	mov	r3, r2
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	1a9b      	subs	r3, r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	440b      	add	r3, r1
 8005500:	334d      	adds	r3, #77	; 0x4d
 8005502:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005504:	2b09      	cmp	r3, #9
 8005506:	d170      	bne.n	80055ea <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005508:	78fa      	ldrb	r2, [r7, #3]
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	4613      	mov	r3, r2
 800550e:	011b      	lsls	r3, r3, #4
 8005510:	1a9b      	subs	r3, r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	440b      	add	r3, r1
 8005516:	334d      	adds	r3, #77	; 0x4d
 8005518:	2202      	movs	r2, #2
 800551a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800551c:	78fa      	ldrb	r2, [r7, #3]
 800551e:	6879      	ldr	r1, [r7, #4]
 8005520:	4613      	mov	r3, r2
 8005522:	011b      	lsls	r3, r3, #4
 8005524:	1a9b      	subs	r3, r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	440b      	add	r3, r1
 800552a:	3344      	adds	r3, #68	; 0x44
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	1c59      	adds	r1, r3, #1
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	4613      	mov	r3, r2
 8005534:	011b      	lsls	r3, r3, #4
 8005536:	1a9b      	subs	r3, r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4403      	add	r3, r0
 800553c:	3344      	adds	r3, #68	; 0x44
 800553e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005540:	78fa      	ldrb	r2, [r7, #3]
 8005542:	6879      	ldr	r1, [r7, #4]
 8005544:	4613      	mov	r3, r2
 8005546:	011b      	lsls	r3, r3, #4
 8005548:	1a9b      	subs	r3, r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	440b      	add	r3, r1
 800554e:	3344      	adds	r3, #68	; 0x44
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b02      	cmp	r3, #2
 8005554:	d914      	bls.n	8005580 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005556:	78fa      	ldrb	r2, [r7, #3]
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	4613      	mov	r3, r2
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	1a9b      	subs	r3, r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	440b      	add	r3, r1
 8005564:	3344      	adds	r3, #68	; 0x44
 8005566:	2200      	movs	r2, #0
 8005568:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800556a:	78fa      	ldrb	r2, [r7, #3]
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	4613      	mov	r3, r2
 8005570:	011b      	lsls	r3, r3, #4
 8005572:	1a9b      	subs	r3, r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	440b      	add	r3, r1
 8005578:	334c      	adds	r3, #76	; 0x4c
 800557a:	2204      	movs	r2, #4
 800557c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800557e:	e022      	b.n	80055c6 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005580:	78fa      	ldrb	r2, [r7, #3]
 8005582:	6879      	ldr	r1, [r7, #4]
 8005584:	4613      	mov	r3, r2
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	1a9b      	subs	r3, r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	440b      	add	r3, r1
 800558e:	334c      	adds	r3, #76	; 0x4c
 8005590:	2202      	movs	r2, #2
 8005592:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005594:	78fb      	ldrb	r3, [r7, #3]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	4413      	add	r3, r2
 800559c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055aa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055b2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80055b4:	78fb      	ldrb	r3, [r7, #3]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c0:	461a      	mov	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80055c6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80055c8:	78fa      	ldrb	r2, [r7, #3]
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	4613      	mov	r3, r2
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	1a9b      	subs	r3, r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	440b      	add	r3, r1
 80055d6:	334c      	adds	r3, #76	; 0x4c
 80055d8:	781a      	ldrb	r2, [r3, #0]
 80055da:	78fb      	ldrb	r3, [r7, #3]
 80055dc:	4619      	mov	r1, r3
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f007 f8c2 	bl	800c768 <HAL_HCD_HC_NotifyURBChange_Callback>
 80055e4:	e002      	b.n	80055ec <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80055e6:	bf00      	nop
 80055e8:	e000      	b.n	80055ec <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80055ea:	bf00      	nop
  }
}
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b08a      	sub	sp, #40	; 0x28
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	0c5b      	lsrs	r3, r3, #17
 8005618:	f003 030f 	and.w	r3, r3, #15
 800561c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	091b      	lsrs	r3, r3, #4
 8005622:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005626:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	2b02      	cmp	r3, #2
 800562c:	d004      	beq.n	8005638 <HCD_RXQLVL_IRQHandler+0x46>
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2b05      	cmp	r3, #5
 8005632:	f000 80b6 	beq.w	80057a2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005636:	e0b7      	b.n	80057a8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 80b3 	beq.w	80057a6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005640:	6879      	ldr	r1, [r7, #4]
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	4613      	mov	r3, r2
 8005646:	011b      	lsls	r3, r3, #4
 8005648:	1a9b      	subs	r3, r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	440b      	add	r3, r1
 800564e:	332c      	adds	r3, #44	; 0x2c
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 80a7 	beq.w	80057a6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005658:	6879      	ldr	r1, [r7, #4]
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	4613      	mov	r3, r2
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	1a9b      	subs	r3, r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	440b      	add	r3, r1
 8005666:	3338      	adds	r3, #56	; 0x38
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	18d1      	adds	r1, r2, r3
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	4613      	mov	r3, r2
 8005674:	011b      	lsls	r3, r3, #4
 8005676:	1a9b      	subs	r3, r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4403      	add	r3, r0
 800567c:	3334      	adds	r3, #52	; 0x34
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4299      	cmp	r1, r3
 8005682:	f200 8083 	bhi.w	800578c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6818      	ldr	r0, [r3, #0]
 800568a:	6879      	ldr	r1, [r7, #4]
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	4613      	mov	r3, r2
 8005690:	011b      	lsls	r3, r3, #4
 8005692:	1a9b      	subs	r3, r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	440b      	add	r3, r1
 8005698:	332c      	adds	r3, #44	; 0x2c
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	b292      	uxth	r2, r2
 80056a0:	4619      	mov	r1, r3
 80056a2:	f003 fee9 	bl	8009478 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80056a6:	6879      	ldr	r1, [r7, #4]
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	4613      	mov	r3, r2
 80056ac:	011b      	lsls	r3, r3, #4
 80056ae:	1a9b      	subs	r3, r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	440b      	add	r3, r1
 80056b4:	332c      	adds	r3, #44	; 0x2c
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	18d1      	adds	r1, r2, r3
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	4613      	mov	r3, r2
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	1a9b      	subs	r3, r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4403      	add	r3, r0
 80056ca:	332c      	adds	r3, #44	; 0x2c
 80056cc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80056ce:	6879      	ldr	r1, [r7, #4]
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	4613      	mov	r3, r2
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	1a9b      	subs	r3, r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	440b      	add	r3, r1
 80056dc:	3338      	adds	r3, #56	; 0x38
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	18d1      	adds	r1, r2, r3
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	4613      	mov	r3, r2
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	1a9b      	subs	r3, r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4403      	add	r3, r0
 80056f2:	3338      	adds	r3, #56	; 0x38
 80056f4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	0cdb      	lsrs	r3, r3, #19
 8005706:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800570a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	4613      	mov	r3, r2
 8005712:	011b      	lsls	r3, r3, #4
 8005714:	1a9b      	subs	r3, r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	440b      	add	r3, r1
 800571a:	3328      	adds	r3, #40	; 0x28
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	4293      	cmp	r3, r2
 8005724:	d13f      	bne.n	80057a6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d03c      	beq.n	80057a6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	4413      	add	r3, r2
 8005734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005742:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800574a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	4413      	add	r3, r2
 8005754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005758:	461a      	mov	r2, r3
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	4613      	mov	r3, r2
 8005764:	011b      	lsls	r3, r3, #4
 8005766:	1a9b      	subs	r3, r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	440b      	add	r3, r1
 800576c:	333c      	adds	r3, #60	; 0x3c
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	f083 0301 	eor.w	r3, r3, #1
 8005774:	b2d8      	uxtb	r0, r3
 8005776:	6879      	ldr	r1, [r7, #4]
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	4613      	mov	r3, r2
 800577c:	011b      	lsls	r3, r3, #4
 800577e:	1a9b      	subs	r3, r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	440b      	add	r3, r1
 8005784:	333c      	adds	r3, #60	; 0x3c
 8005786:	4602      	mov	r2, r0
 8005788:	701a      	strb	r2, [r3, #0]
      break;
 800578a:	e00c      	b.n	80057a6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800578c:	6879      	ldr	r1, [r7, #4]
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	4613      	mov	r3, r2
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	1a9b      	subs	r3, r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	440b      	add	r3, r1
 800579a:	334c      	adds	r3, #76	; 0x4c
 800579c:	2204      	movs	r2, #4
 800579e:	701a      	strb	r2, [r3, #0]
      break;
 80057a0:	e001      	b.n	80057a6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80057a2:	bf00      	nop
 80057a4:	e000      	b.n	80057a8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80057a6:	bf00      	nop
  }
}
 80057a8:	bf00      	nop
 80057aa:	3728      	adds	r7, #40	; 0x28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80057dc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d10b      	bne.n	8005800 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d102      	bne.n	80057f8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f006 ff9c 	bl	800c730 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f043 0302 	orr.w	r3, r3, #2
 80057fe:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b08      	cmp	r3, #8
 8005808:	d132      	bne.n	8005870 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f043 0308 	orr.w	r3, r3, #8
 8005810:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f003 0304 	and.w	r3, r3, #4
 8005818:	2b04      	cmp	r3, #4
 800581a:	d126      	bne.n	800586a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	7a5b      	ldrb	r3, [r3, #9]
 8005820:	2b02      	cmp	r3, #2
 8005822:	d113      	bne.n	800584c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800582a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800582e:	d106      	bne.n	800583e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2102      	movs	r1, #2
 8005836:	4618      	mov	r0, r3
 8005838:	f003 ffae 	bl	8009798 <USB_InitFSLSPClkSel>
 800583c:	e011      	b.n	8005862 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2101      	movs	r1, #1
 8005844:	4618      	mov	r0, r3
 8005846:	f003 ffa7 	bl	8009798 <USB_InitFSLSPClkSel>
 800584a:	e00a      	b.n	8005862 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	79db      	ldrb	r3, [r3, #7]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d106      	bne.n	8005862 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800585a:	461a      	mov	r2, r3
 800585c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005860:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f006 ff8e 	bl	800c784 <HAL_HCD_PortEnabled_Callback>
 8005868:	e002      	b.n	8005870 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f006 ff98 	bl	800c7a0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b20      	cmp	r3, #32
 8005878:	d103      	bne.n	8005882 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	f043 0320 	orr.w	r3, r3, #32
 8005880:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005888:	461a      	mov	r2, r3
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	6013      	str	r3, [r2, #0]
}
 800588e:	bf00      	nop
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e12b      	b.n	8005b02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d106      	bne.n	80058c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7fc fc7e 	bl	80021c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2224      	movs	r2, #36	; 0x24
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0201 	bic.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80058fc:	f001 fc60 	bl	80071c0 <HAL_RCC_GetPCLK1Freq>
 8005900:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	4a81      	ldr	r2, [pc, #516]	; (8005b0c <HAL_I2C_Init+0x274>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d807      	bhi.n	800591c <HAL_I2C_Init+0x84>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4a80      	ldr	r2, [pc, #512]	; (8005b10 <HAL_I2C_Init+0x278>)
 8005910:	4293      	cmp	r3, r2
 8005912:	bf94      	ite	ls
 8005914:	2301      	movls	r3, #1
 8005916:	2300      	movhi	r3, #0
 8005918:	b2db      	uxtb	r3, r3
 800591a:	e006      	b.n	800592a <HAL_I2C_Init+0x92>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4a7d      	ldr	r2, [pc, #500]	; (8005b14 <HAL_I2C_Init+0x27c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	bf94      	ite	ls
 8005924:	2301      	movls	r3, #1
 8005926:	2300      	movhi	r3, #0
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e0e7      	b.n	8005b02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4a78      	ldr	r2, [pc, #480]	; (8005b18 <HAL_I2C_Init+0x280>)
 8005936:	fba2 2303 	umull	r2, r3, r2, r3
 800593a:	0c9b      	lsrs	r3, r3, #18
 800593c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	430a      	orrs	r2, r1
 8005950:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	4a6a      	ldr	r2, [pc, #424]	; (8005b0c <HAL_I2C_Init+0x274>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d802      	bhi.n	800596c <HAL_I2C_Init+0xd4>
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	3301      	adds	r3, #1
 800596a:	e009      	b.n	8005980 <HAL_I2C_Init+0xe8>
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005972:	fb02 f303 	mul.w	r3, r2, r3
 8005976:	4a69      	ldr	r2, [pc, #420]	; (8005b1c <HAL_I2C_Init+0x284>)
 8005978:	fba2 2303 	umull	r2, r3, r2, r3
 800597c:	099b      	lsrs	r3, r3, #6
 800597e:	3301      	adds	r3, #1
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6812      	ldr	r2, [r2, #0]
 8005984:	430b      	orrs	r3, r1
 8005986:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005992:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	495c      	ldr	r1, [pc, #368]	; (8005b0c <HAL_I2C_Init+0x274>)
 800599c:	428b      	cmp	r3, r1
 800599e:	d819      	bhi.n	80059d4 <HAL_I2C_Init+0x13c>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	1e59      	subs	r1, r3, #1
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80059ae:	1c59      	adds	r1, r3, #1
 80059b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80059b4:	400b      	ands	r3, r1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <HAL_I2C_Init+0x138>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	1e59      	subs	r1, r3, #1
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80059c8:	3301      	adds	r3, #1
 80059ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059ce:	e051      	b.n	8005a74 <HAL_I2C_Init+0x1dc>
 80059d0:	2304      	movs	r3, #4
 80059d2:	e04f      	b.n	8005a74 <HAL_I2C_Init+0x1dc>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d111      	bne.n	8005a00 <HAL_I2C_Init+0x168>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	1e58      	subs	r0, r3, #1
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6859      	ldr	r1, [r3, #4]
 80059e4:	460b      	mov	r3, r1
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	440b      	add	r3, r1
 80059ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80059ee:	3301      	adds	r3, #1
 80059f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	bf0c      	ite	eq
 80059f8:	2301      	moveq	r3, #1
 80059fa:	2300      	movne	r3, #0
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	e012      	b.n	8005a26 <HAL_I2C_Init+0x18e>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	1e58      	subs	r0, r3, #1
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6859      	ldr	r1, [r3, #4]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	440b      	add	r3, r1
 8005a0e:	0099      	lsls	r1, r3, #2
 8005a10:	440b      	add	r3, r1
 8005a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a16:	3301      	adds	r3, #1
 8005a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	bf0c      	ite	eq
 8005a20:	2301      	moveq	r3, #1
 8005a22:	2300      	movne	r3, #0
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <HAL_I2C_Init+0x196>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e022      	b.n	8005a74 <HAL_I2C_Init+0x1dc>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10e      	bne.n	8005a54 <HAL_I2C_Init+0x1bc>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	1e58      	subs	r0, r3, #1
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6859      	ldr	r1, [r3, #4]
 8005a3e:	460b      	mov	r3, r1
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	440b      	add	r3, r1
 8005a44:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a48:	3301      	adds	r3, #1
 8005a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a52:	e00f      	b.n	8005a74 <HAL_I2C_Init+0x1dc>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	1e58      	subs	r0, r3, #1
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6859      	ldr	r1, [r3, #4]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	440b      	add	r3, r1
 8005a62:	0099      	lsls	r1, r3, #2
 8005a64:	440b      	add	r3, r1
 8005a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	6809      	ldr	r1, [r1, #0]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	69da      	ldr	r2, [r3, #28]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005aa2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6911      	ldr	r1, [r2, #16]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	68d2      	ldr	r2, [r2, #12]
 8005aae:	4311      	orrs	r1, r2
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6812      	ldr	r2, [r2, #0]
 8005ab4:	430b      	orrs	r3, r1
 8005ab6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	695a      	ldr	r2, [r3, #20]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0201 	orr.w	r2, r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2220      	movs	r2, #32
 8005aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	000186a0 	.word	0x000186a0
 8005b10:	001e847f 	.word	0x001e847f
 8005b14:	003d08ff 	.word	0x003d08ff
 8005b18:	431bde83 	.word	0x431bde83
 8005b1c:	10624dd3 	.word	0x10624dd3

08005b20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b088      	sub	sp, #32
 8005b24:	af02      	add	r7, sp, #8
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	4608      	mov	r0, r1
 8005b2a:	4611      	mov	r1, r2
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	4603      	mov	r3, r0
 8005b30:	817b      	strh	r3, [r7, #10]
 8005b32:	460b      	mov	r3, r1
 8005b34:	813b      	strh	r3, [r7, #8]
 8005b36:	4613      	mov	r3, r2
 8005b38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b3a:	f7fc ff1f 	bl	800297c <HAL_GetTick>
 8005b3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b20      	cmp	r3, #32
 8005b4a:	f040 80d9 	bne.w	8005d00 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	2319      	movs	r3, #25
 8005b54:	2201      	movs	r2, #1
 8005b56:	496d      	ldr	r1, [pc, #436]	; (8005d0c <HAL_I2C_Mem_Write+0x1ec>)
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 fc8b 	bl	8006474 <I2C_WaitOnFlagUntilTimeout>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005b64:	2302      	movs	r3, #2
 8005b66:	e0cc      	b.n	8005d02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d101      	bne.n	8005b76 <HAL_I2C_Mem_Write+0x56>
 8005b72:	2302      	movs	r3, #2
 8005b74:	e0c5      	b.n	8005d02 <HAL_I2C_Mem_Write+0x1e2>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d007      	beq.n	8005b9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0201 	orr.w	r2, r2, #1
 8005b9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005baa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2221      	movs	r2, #33	; 0x21
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2240      	movs	r2, #64	; 0x40
 8005bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6a3a      	ldr	r2, [r7, #32]
 8005bc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005bcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	4a4d      	ldr	r2, [pc, #308]	; (8005d10 <HAL_I2C_Mem_Write+0x1f0>)
 8005bdc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005bde:	88f8      	ldrh	r0, [r7, #6]
 8005be0:	893a      	ldrh	r2, [r7, #8]
 8005be2:	8979      	ldrh	r1, [r7, #10]
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	9301      	str	r3, [sp, #4]
 8005be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	4603      	mov	r3, r0
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 fac2 	bl	8006178 <I2C_RequestMemoryWrite>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d052      	beq.n	8005ca0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e081      	b.n	8005d02 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 fd50 	bl	80066a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00d      	beq.n	8005c2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	2b04      	cmp	r3, #4
 8005c14:	d107      	bne.n	8005c26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e06b      	b.n	8005d02 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	781a      	ldrb	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	1c5a      	adds	r2, r3, #1
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c44:	3b01      	subs	r3, #1
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	3b01      	subs	r3, #1
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b04      	cmp	r3, #4
 8005c66:	d11b      	bne.n	8005ca0 <HAL_I2C_Mem_Write+0x180>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d017      	beq.n	8005ca0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	781a      	ldrb	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1aa      	bne.n	8005bfe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 fd43 	bl	8006738 <I2C_WaitOnBTFFlagUntilTimeout>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00d      	beq.n	8005cd4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbc:	2b04      	cmp	r3, #4
 8005cbe:	d107      	bne.n	8005cd0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e016      	b.n	8005d02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	e000      	b.n	8005d02 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005d00:	2302      	movs	r3, #2
  }
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3718      	adds	r7, #24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	00100002 	.word	0x00100002
 8005d10:	ffff0000 	.word	0xffff0000

08005d14 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08c      	sub	sp, #48	; 0x30
 8005d18:	af02      	add	r7, sp, #8
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	4608      	mov	r0, r1
 8005d1e:	4611      	mov	r1, r2
 8005d20:	461a      	mov	r2, r3
 8005d22:	4603      	mov	r3, r0
 8005d24:	817b      	strh	r3, [r7, #10]
 8005d26:	460b      	mov	r3, r1
 8005d28:	813b      	strh	r3, [r7, #8]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d2e:	f7fc fe25 	bl	800297c <HAL_GetTick>
 8005d32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b20      	cmp	r3, #32
 8005d3e:	f040 8214 	bne.w	800616a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	9300      	str	r3, [sp, #0]
 8005d46:	2319      	movs	r3, #25
 8005d48:	2201      	movs	r2, #1
 8005d4a:	497b      	ldr	r1, [pc, #492]	; (8005f38 <HAL_I2C_Mem_Read+0x224>)
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 fb91 	bl	8006474 <I2C_WaitOnFlagUntilTimeout>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005d58:	2302      	movs	r3, #2
 8005d5a:	e207      	b.n	800616c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d101      	bne.n	8005d6a <HAL_I2C_Mem_Read+0x56>
 8005d66:	2302      	movs	r3, #2
 8005d68:	e200      	b.n	800616c <HAL_I2C_Mem_Read+0x458>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d007      	beq.n	8005d90 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0201 	orr.w	r2, r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2222      	movs	r2, #34	; 0x22
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2240      	movs	r2, #64	; 0x40
 8005dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005dc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4a5b      	ldr	r2, [pc, #364]	; (8005f3c <HAL_I2C_Mem_Read+0x228>)
 8005dd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005dd2:	88f8      	ldrh	r0, [r7, #6]
 8005dd4:	893a      	ldrh	r2, [r7, #8]
 8005dd6:	8979      	ldrh	r1, [r7, #10]
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	9301      	str	r3, [sp, #4]
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	4603      	mov	r3, r0
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 fa5e 	bl	80062a4 <I2C_RequestMemoryRead>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e1bc      	b.n	800616c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d113      	bne.n	8005e22 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	623b      	str	r3, [r7, #32]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	623b      	str	r3, [r7, #32]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	623b      	str	r3, [r7, #32]
 8005e0e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	e190      	b.n	8006144 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d11b      	bne.n	8005e62 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	61fb      	str	r3, [r7, #28]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	61fb      	str	r3, [r7, #28]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	61fb      	str	r3, [r7, #28]
 8005e4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	e170      	b.n	8006144 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d11b      	bne.n	8005ea2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e78:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	61bb      	str	r3, [r7, #24]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	61bb      	str	r3, [r7, #24]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	61bb      	str	r3, [r7, #24]
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	e150      	b.n	8006144 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	617b      	str	r3, [r7, #20]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	617b      	str	r3, [r7, #20]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	617b      	str	r3, [r7, #20]
 8005eb6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005eb8:	e144      	b.n	8006144 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	f200 80f1 	bhi.w	80060a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d123      	bne.n	8005f14 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ece:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 fc79 	bl	80067c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e145      	b.n	800616c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	691a      	ldr	r2, [r3, #16]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	b2d2      	uxtb	r2, r2
 8005eec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005efc:	3b01      	subs	r3, #1
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f12:	e117      	b.n	8006144 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d14e      	bne.n	8005fba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f22:	2200      	movs	r2, #0
 8005f24:	4906      	ldr	r1, [pc, #24]	; (8005f40 <HAL_I2C_Mem_Read+0x22c>)
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 faa4 	bl	8006474 <I2C_WaitOnFlagUntilTimeout>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d008      	beq.n	8005f44 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e11a      	b.n	800616c <HAL_I2C_Mem_Read+0x458>
 8005f36:	bf00      	nop
 8005f38:	00100002 	.word	0x00100002
 8005f3c:	ffff0000 	.word	0xffff0000
 8005f40:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	691a      	ldr	r2, [r3, #16]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5e:	b2d2      	uxtb	r2, r2
 8005f60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f70:	3b01      	subs	r3, #1
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	691a      	ldr	r2, [r3, #16]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f90:	b2d2      	uxtb	r2, r2
 8005f92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	1c5a      	adds	r2, r3, #1
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fb8:	e0c4      	b.n	8006144 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	496c      	ldr	r1, [pc, #432]	; (8006174 <HAL_I2C_Mem_Read+0x460>)
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 fa55 	bl	8006474 <I2C_WaitOnFlagUntilTimeout>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d001      	beq.n	8005fd4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e0cb      	b.n	800616c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fe2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	691a      	ldr	r2, [r3, #16]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006000:	3b01      	subs	r3, #1
 8006002:	b29a      	uxth	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800600c:	b29b      	uxth	r3, r3
 800600e:	3b01      	subs	r3, #1
 8006010:	b29a      	uxth	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601c:	2200      	movs	r2, #0
 800601e:	4955      	ldr	r1, [pc, #340]	; (8006174 <HAL_I2C_Mem_Read+0x460>)
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 fa27 	bl	8006474 <I2C_WaitOnFlagUntilTimeout>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e09d      	b.n	800616c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800603e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691a      	ldr	r2, [r3, #16]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	b2d2      	uxtb	r2, r2
 800604c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800605c:	3b01      	subs	r3, #1
 800605e:	b29a      	uxth	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006068:	b29b      	uxth	r3, r3
 800606a:	3b01      	subs	r3, #1
 800606c:	b29a      	uxth	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	691a      	ldr	r2, [r3, #16]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607c:	b2d2      	uxtb	r2, r2
 800607e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800608e:	3b01      	subs	r3, #1
 8006090:	b29a      	uxth	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609a:	b29b      	uxth	r3, r3
 800609c:	3b01      	subs	r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060a4:	e04e      	b.n	8006144 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 fb8c 	bl	80067c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e058      	b.n	800616c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	691a      	ldr	r2, [r3, #16]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c4:	b2d2      	uxtb	r2, r2
 80060c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060cc:	1c5a      	adds	r2, r3, #1
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d6:	3b01      	subs	r3, #1
 80060d8:	b29a      	uxth	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	3b01      	subs	r3, #1
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	f003 0304 	and.w	r3, r3, #4
 80060f6:	2b04      	cmp	r3, #4
 80060f8:	d124      	bne.n	8006144 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060fe:	2b03      	cmp	r3, #3
 8006100:	d107      	bne.n	8006112 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006110:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	691a      	ldr	r2, [r3, #16]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611c:	b2d2      	uxtb	r2, r2
 800611e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	1c5a      	adds	r2, r3, #1
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800612e:	3b01      	subs	r3, #1
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800613a:	b29b      	uxth	r3, r3
 800613c:	3b01      	subs	r3, #1
 800613e:	b29a      	uxth	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006148:	2b00      	cmp	r3, #0
 800614a:	f47f aeb6 	bne.w	8005eba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2220      	movs	r2, #32
 8006152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006166:	2300      	movs	r3, #0
 8006168:	e000      	b.n	800616c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800616a:	2302      	movs	r3, #2
  }
}
 800616c:	4618      	mov	r0, r3
 800616e:	3728      	adds	r7, #40	; 0x28
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	00010004 	.word	0x00010004

08006178 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b088      	sub	sp, #32
 800617c:	af02      	add	r7, sp, #8
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	4608      	mov	r0, r1
 8006182:	4611      	mov	r1, r2
 8006184:	461a      	mov	r2, r3
 8006186:	4603      	mov	r3, r0
 8006188:	817b      	strh	r3, [r7, #10]
 800618a:	460b      	mov	r3, r1
 800618c:	813b      	strh	r3, [r7, #8]
 800618e:	4613      	mov	r3, r2
 8006190:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f000 f960 	bl	8006474 <I2C_WaitOnFlagUntilTimeout>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00d      	beq.n	80061d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061c8:	d103      	bne.n	80061d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e05f      	b.n	8006296 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061d6:	897b      	ldrh	r3, [r7, #10]
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	461a      	mov	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e8:	6a3a      	ldr	r2, [r7, #32]
 80061ea:	492d      	ldr	r1, [pc, #180]	; (80062a0 <I2C_RequestMemoryWrite+0x128>)
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 f9bb 	bl	8006568 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e04c      	b.n	8006296 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061fc:	2300      	movs	r3, #0
 80061fe:	617b      	str	r3, [r7, #20]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	617b      	str	r3, [r7, #20]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	617b      	str	r3, [r7, #20]
 8006210:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006214:	6a39      	ldr	r1, [r7, #32]
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f000 fa46 	bl	80066a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00d      	beq.n	800623e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006226:	2b04      	cmp	r3, #4
 8006228:	d107      	bne.n	800623a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006238:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e02b      	b.n	8006296 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800623e:	88fb      	ldrh	r3, [r7, #6]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d105      	bne.n	8006250 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006244:	893b      	ldrh	r3, [r7, #8]
 8006246:	b2da      	uxtb	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	611a      	str	r2, [r3, #16]
 800624e:	e021      	b.n	8006294 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006250:	893b      	ldrh	r3, [r7, #8]
 8006252:	0a1b      	lsrs	r3, r3, #8
 8006254:	b29b      	uxth	r3, r3
 8006256:	b2da      	uxtb	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800625e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006260:	6a39      	ldr	r1, [r7, #32]
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f000 fa20 	bl	80066a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00d      	beq.n	800628a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	2b04      	cmp	r3, #4
 8006274:	d107      	bne.n	8006286 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006284:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e005      	b.n	8006296 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800628a:	893b      	ldrh	r3, [r7, #8]
 800628c:	b2da      	uxtb	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3718      	adds	r7, #24
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	00010002 	.word	0x00010002

080062a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af02      	add	r7, sp, #8
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	4608      	mov	r0, r1
 80062ae:	4611      	mov	r1, r2
 80062b0:	461a      	mov	r2, r3
 80062b2:	4603      	mov	r3, r0
 80062b4:	817b      	strh	r3, [r7, #10]
 80062b6:	460b      	mov	r3, r1
 80062b8:	813b      	strh	r3, [r7, #8]
 80062ba:	4613      	mov	r3, r2
 80062bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f000 f8c2 	bl	8006474 <I2C_WaitOnFlagUntilTimeout>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00d      	beq.n	8006312 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006304:	d103      	bne.n	800630e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800630c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e0aa      	b.n	8006468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006312:	897b      	ldrh	r3, [r7, #10]
 8006314:	b2db      	uxtb	r3, r3
 8006316:	461a      	mov	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006320:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	6a3a      	ldr	r2, [r7, #32]
 8006326:	4952      	ldr	r1, [pc, #328]	; (8006470 <I2C_RequestMemoryRead+0x1cc>)
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f000 f91d 	bl	8006568 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e097      	b.n	8006468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006338:	2300      	movs	r3, #0
 800633a:	617b      	str	r3, [r7, #20]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	617b      	str	r3, [r7, #20]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	617b      	str	r3, [r7, #20]
 800634c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800634e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006350:	6a39      	ldr	r1, [r7, #32]
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f000 f9a8 	bl	80066a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00d      	beq.n	800637a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	2b04      	cmp	r3, #4
 8006364:	d107      	bne.n	8006376 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006374:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e076      	b.n	8006468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800637a:	88fb      	ldrh	r3, [r7, #6]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d105      	bne.n	800638c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006380:	893b      	ldrh	r3, [r7, #8]
 8006382:	b2da      	uxtb	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	611a      	str	r2, [r3, #16]
 800638a:	e021      	b.n	80063d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800638c:	893b      	ldrh	r3, [r7, #8]
 800638e:	0a1b      	lsrs	r3, r3, #8
 8006390:	b29b      	uxth	r3, r3
 8006392:	b2da      	uxtb	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800639a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800639c:	6a39      	ldr	r1, [r7, #32]
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f000 f982 	bl	80066a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00d      	beq.n	80063c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	d107      	bne.n	80063c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e050      	b.n	8006468 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063c6:	893b      	ldrh	r3, [r7, #8]
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d2:	6a39      	ldr	r1, [r7, #32]
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 f967 	bl	80066a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00d      	beq.n	80063fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d107      	bne.n	80063f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e035      	b.n	8006468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800640a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	6a3b      	ldr	r3, [r7, #32]
 8006412:	2200      	movs	r2, #0
 8006414:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 f82b 	bl	8006474 <I2C_WaitOnFlagUntilTimeout>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00d      	beq.n	8006440 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800642e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006432:	d103      	bne.n	800643c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800643a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e013      	b.n	8006468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006440:	897b      	ldrh	r3, [r7, #10]
 8006442:	b2db      	uxtb	r3, r3
 8006444:	f043 0301 	orr.w	r3, r3, #1
 8006448:	b2da      	uxtb	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	6a3a      	ldr	r2, [r7, #32]
 8006454:	4906      	ldr	r1, [pc, #24]	; (8006470 <I2C_RequestMemoryRead+0x1cc>)
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f000 f886 	bl	8006568 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e000      	b.n	8006468 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3718      	adds	r7, #24
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	00010002 	.word	0x00010002

08006474 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	603b      	str	r3, [r7, #0]
 8006480:	4613      	mov	r3, r2
 8006482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006484:	e048      	b.n	8006518 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648c:	d044      	beq.n	8006518 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800648e:	f7fc fa75 	bl	800297c <HAL_GetTick>
 8006492:	4602      	mov	r2, r0
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	429a      	cmp	r2, r3
 800649c:	d302      	bcc.n	80064a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d139      	bne.n	8006518 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	0c1b      	lsrs	r3, r3, #16
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d10d      	bne.n	80064ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	43da      	mvns	r2, r3
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	4013      	ands	r3, r2
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	bf0c      	ite	eq
 80064c0:	2301      	moveq	r3, #1
 80064c2:	2300      	movne	r3, #0
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	461a      	mov	r2, r3
 80064c8:	e00c      	b.n	80064e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	43da      	mvns	r2, r3
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	4013      	ands	r3, r2
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	2b00      	cmp	r3, #0
 80064da:	bf0c      	ite	eq
 80064dc:	2301      	moveq	r3, #1
 80064de:	2300      	movne	r3, #0
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	461a      	mov	r2, r3
 80064e4:	79fb      	ldrb	r3, [r7, #7]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d116      	bne.n	8006518 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2220      	movs	r2, #32
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006504:	f043 0220 	orr.w	r2, r3, #32
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e023      	b.n	8006560 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	0c1b      	lsrs	r3, r3, #16
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b01      	cmp	r3, #1
 8006520:	d10d      	bne.n	800653e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	43da      	mvns	r2, r3
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	4013      	ands	r3, r2
 800652e:	b29b      	uxth	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	bf0c      	ite	eq
 8006534:	2301      	moveq	r3, #1
 8006536:	2300      	movne	r3, #0
 8006538:	b2db      	uxtb	r3, r3
 800653a:	461a      	mov	r2, r3
 800653c:	e00c      	b.n	8006558 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	43da      	mvns	r2, r3
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	4013      	ands	r3, r2
 800654a:	b29b      	uxth	r3, r3
 800654c:	2b00      	cmp	r3, #0
 800654e:	bf0c      	ite	eq
 8006550:	2301      	moveq	r3, #1
 8006552:	2300      	movne	r3, #0
 8006554:	b2db      	uxtb	r3, r3
 8006556:	461a      	mov	r2, r3
 8006558:	79fb      	ldrb	r3, [r7, #7]
 800655a:	429a      	cmp	r2, r3
 800655c:	d093      	beq.n	8006486 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
 8006574:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006576:	e071      	b.n	800665c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006586:	d123      	bne.n	80065d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006596:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2220      	movs	r2, #32
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065bc:	f043 0204 	orr.w	r2, r3, #4
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e067      	b.n	80066a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d6:	d041      	beq.n	800665c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065d8:	f7fc f9d0 	bl	800297c <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d302      	bcc.n	80065ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d136      	bne.n	800665c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	0c1b      	lsrs	r3, r3, #16
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d10c      	bne.n	8006612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	43da      	mvns	r2, r3
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	4013      	ands	r3, r2
 8006604:	b29b      	uxth	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	bf14      	ite	ne
 800660a:	2301      	movne	r3, #1
 800660c:	2300      	moveq	r3, #0
 800660e:	b2db      	uxtb	r3, r3
 8006610:	e00b      	b.n	800662a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	43da      	mvns	r2, r3
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	4013      	ands	r3, r2
 800661e:	b29b      	uxth	r3, r3
 8006620:	2b00      	cmp	r3, #0
 8006622:	bf14      	ite	ne
 8006624:	2301      	movne	r3, #1
 8006626:	2300      	moveq	r3, #0
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d016      	beq.n	800665c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2220      	movs	r2, #32
 8006638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006648:	f043 0220 	orr.w	r2, r3, #32
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e021      	b.n	80066a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	0c1b      	lsrs	r3, r3, #16
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b01      	cmp	r3, #1
 8006664:	d10c      	bne.n	8006680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	43da      	mvns	r2, r3
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	4013      	ands	r3, r2
 8006672:	b29b      	uxth	r3, r3
 8006674:	2b00      	cmp	r3, #0
 8006676:	bf14      	ite	ne
 8006678:	2301      	movne	r3, #1
 800667a:	2300      	moveq	r3, #0
 800667c:	b2db      	uxtb	r3, r3
 800667e:	e00b      	b.n	8006698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	43da      	mvns	r2, r3
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	4013      	ands	r3, r2
 800668c:	b29b      	uxth	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	bf14      	ite	ne
 8006692:	2301      	movne	r3, #1
 8006694:	2300      	moveq	r3, #0
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b00      	cmp	r3, #0
 800669a:	f47f af6d 	bne.w	8006578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066b4:	e034      	b.n	8006720 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f000 f8e3 	bl	8006882 <I2C_IsAcknowledgeFailed>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e034      	b.n	8006730 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066cc:	d028      	beq.n	8006720 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ce:	f7fc f955 	bl	800297c <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d302      	bcc.n	80066e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d11d      	bne.n	8006720 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ee:	2b80      	cmp	r3, #128	; 0x80
 80066f0:	d016      	beq.n	8006720 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2220      	movs	r2, #32
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670c:	f043 0220 	orr.w	r2, r3, #32
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e007      	b.n	8006730 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800672a:	2b80      	cmp	r3, #128	; 0x80
 800672c:	d1c3      	bne.n	80066b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006744:	e034      	b.n	80067b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f000 f89b 	bl	8006882 <I2C_IsAcknowledgeFailed>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d001      	beq.n	8006756 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e034      	b.n	80067c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675c:	d028      	beq.n	80067b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800675e:	f7fc f90d 	bl	800297c <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	429a      	cmp	r2, r3
 800676c:	d302      	bcc.n	8006774 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d11d      	bne.n	80067b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	f003 0304 	and.w	r3, r3, #4
 800677e:	2b04      	cmp	r3, #4
 8006780:	d016      	beq.n	80067b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2220      	movs	r2, #32
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679c:	f043 0220 	orr.w	r2, r3, #32
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e007      	b.n	80067c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	f003 0304 	and.w	r3, r3, #4
 80067ba:	2b04      	cmp	r3, #4
 80067bc:	d1c3      	bne.n	8006746 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067d4:	e049      	b.n	800686a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	f003 0310 	and.w	r3, r3, #16
 80067e0:	2b10      	cmp	r3, #16
 80067e2:	d119      	bne.n	8006818 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f06f 0210 	mvn.w	r2, #16
 80067ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2220      	movs	r2, #32
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e030      	b.n	800687a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006818:	f7fc f8b0 	bl	800297c <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	429a      	cmp	r2, r3
 8006826:	d302      	bcc.n	800682e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d11d      	bne.n	800686a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006838:	2b40      	cmp	r3, #64	; 0x40
 800683a:	d016      	beq.n	800686a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2220      	movs	r2, #32
 8006846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	f043 0220 	orr.w	r2, r3, #32
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e007      	b.n	800687a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006874:	2b40      	cmp	r3, #64	; 0x40
 8006876:	d1ae      	bne.n	80067d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006898:	d11b      	bne.n	80068d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80068a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2220      	movs	r2, #32
 80068ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068be:	f043 0204 	orr.w	r2, r3, #4
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e000      	b.n	80068d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e267      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d075      	beq.n	80069ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068fe:	4b88      	ldr	r3, [pc, #544]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f003 030c 	and.w	r3, r3, #12
 8006906:	2b04      	cmp	r3, #4
 8006908:	d00c      	beq.n	8006924 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800690a:	4b85      	ldr	r3, [pc, #532]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006912:	2b08      	cmp	r3, #8
 8006914:	d112      	bne.n	800693c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006916:	4b82      	ldr	r3, [pc, #520]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800691e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006922:	d10b      	bne.n	800693c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006924:	4b7e      	ldr	r3, [pc, #504]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d05b      	beq.n	80069e8 <HAL_RCC_OscConfig+0x108>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d157      	bne.n	80069e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e242      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006944:	d106      	bne.n	8006954 <HAL_RCC_OscConfig+0x74>
 8006946:	4b76      	ldr	r3, [pc, #472]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a75      	ldr	r2, [pc, #468]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 800694c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006950:	6013      	str	r3, [r2, #0]
 8006952:	e01d      	b.n	8006990 <HAL_RCC_OscConfig+0xb0>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800695c:	d10c      	bne.n	8006978 <HAL_RCC_OscConfig+0x98>
 800695e:	4b70      	ldr	r3, [pc, #448]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a6f      	ldr	r2, [pc, #444]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006968:	6013      	str	r3, [r2, #0]
 800696a:	4b6d      	ldr	r3, [pc, #436]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a6c      	ldr	r2, [pc, #432]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006974:	6013      	str	r3, [r2, #0]
 8006976:	e00b      	b.n	8006990 <HAL_RCC_OscConfig+0xb0>
 8006978:	4b69      	ldr	r3, [pc, #420]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a68      	ldr	r2, [pc, #416]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 800697e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006982:	6013      	str	r3, [r2, #0]
 8006984:	4b66      	ldr	r3, [pc, #408]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a65      	ldr	r2, [pc, #404]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 800698a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800698e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d013      	beq.n	80069c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006998:	f7fb fff0 	bl	800297c <HAL_GetTick>
 800699c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800699e:	e008      	b.n	80069b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069a0:	f7fb ffec 	bl	800297c <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b64      	cmp	r3, #100	; 0x64
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e207      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069b2:	4b5b      	ldr	r3, [pc, #364]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d0f0      	beq.n	80069a0 <HAL_RCC_OscConfig+0xc0>
 80069be:	e014      	b.n	80069ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069c0:	f7fb ffdc 	bl	800297c <HAL_GetTick>
 80069c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069c6:	e008      	b.n	80069da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069c8:	f7fb ffd8 	bl	800297c <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b64      	cmp	r3, #100	; 0x64
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e1f3      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069da:	4b51      	ldr	r3, [pc, #324]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1f0      	bne.n	80069c8 <HAL_RCC_OscConfig+0xe8>
 80069e6:	e000      	b.n	80069ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d063      	beq.n	8006abe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069f6:	4b4a      	ldr	r3, [pc, #296]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f003 030c 	and.w	r3, r3, #12
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00b      	beq.n	8006a1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a02:	4b47      	ldr	r3, [pc, #284]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a0a:	2b08      	cmp	r3, #8
 8006a0c:	d11c      	bne.n	8006a48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a0e:	4b44      	ldr	r3, [pc, #272]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d116      	bne.n	8006a48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a1a:	4b41      	ldr	r3, [pc, #260]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d005      	beq.n	8006a32 <HAL_RCC_OscConfig+0x152>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d001      	beq.n	8006a32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e1c7      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a32:	4b3b      	ldr	r3, [pc, #236]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	00db      	lsls	r3, r3, #3
 8006a40:	4937      	ldr	r1, [pc, #220]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a46:	e03a      	b.n	8006abe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d020      	beq.n	8006a92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a50:	4b34      	ldr	r3, [pc, #208]	; (8006b24 <HAL_RCC_OscConfig+0x244>)
 8006a52:	2201      	movs	r2, #1
 8006a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a56:	f7fb ff91 	bl	800297c <HAL_GetTick>
 8006a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a5c:	e008      	b.n	8006a70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a5e:	f7fb ff8d 	bl	800297c <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d901      	bls.n	8006a70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e1a8      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a70:	4b2b      	ldr	r3, [pc, #172]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0302 	and.w	r3, r3, #2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d0f0      	beq.n	8006a5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a7c:	4b28      	ldr	r3, [pc, #160]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	00db      	lsls	r3, r3, #3
 8006a8a:	4925      	ldr	r1, [pc, #148]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	600b      	str	r3, [r1, #0]
 8006a90:	e015      	b.n	8006abe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a92:	4b24      	ldr	r3, [pc, #144]	; (8006b24 <HAL_RCC_OscConfig+0x244>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a98:	f7fb ff70 	bl	800297c <HAL_GetTick>
 8006a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a9e:	e008      	b.n	8006ab2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006aa0:	f7fb ff6c 	bl	800297c <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e187      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ab2:	4b1b      	ldr	r3, [pc, #108]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1f0      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0308 	and.w	r3, r3, #8
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d036      	beq.n	8006b38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d016      	beq.n	8006b00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ad2:	4b15      	ldr	r3, [pc, #84]	; (8006b28 <HAL_RCC_OscConfig+0x248>)
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ad8:	f7fb ff50 	bl	800297c <HAL_GetTick>
 8006adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ade:	e008      	b.n	8006af2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ae0:	f7fb ff4c 	bl	800297c <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d901      	bls.n	8006af2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e167      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006af2:	4b0b      	ldr	r3, [pc, #44]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006af6:	f003 0302 	and.w	r3, r3, #2
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d0f0      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x200>
 8006afe:	e01b      	b.n	8006b38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b00:	4b09      	ldr	r3, [pc, #36]	; (8006b28 <HAL_RCC_OscConfig+0x248>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b06:	f7fb ff39 	bl	800297c <HAL_GetTick>
 8006b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b0c:	e00e      	b.n	8006b2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b0e:	f7fb ff35 	bl	800297c <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d907      	bls.n	8006b2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e150      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
 8006b20:	40023800 	.word	0x40023800
 8006b24:	42470000 	.word	0x42470000
 8006b28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b2c:	4b88      	ldr	r3, [pc, #544]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1ea      	bne.n	8006b0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0304 	and.w	r3, r3, #4
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 8097 	beq.w	8006c74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b46:	2300      	movs	r3, #0
 8006b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b4a:	4b81      	ldr	r3, [pc, #516]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10f      	bne.n	8006b76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b56:	2300      	movs	r3, #0
 8006b58:	60bb      	str	r3, [r7, #8]
 8006b5a:	4b7d      	ldr	r3, [pc, #500]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5e:	4a7c      	ldr	r2, [pc, #496]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b64:	6413      	str	r3, [r2, #64]	; 0x40
 8006b66:	4b7a      	ldr	r3, [pc, #488]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b6e:	60bb      	str	r3, [r7, #8]
 8006b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b72:	2301      	movs	r3, #1
 8006b74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b76:	4b77      	ldr	r3, [pc, #476]	; (8006d54 <HAL_RCC_OscConfig+0x474>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d118      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b82:	4b74      	ldr	r3, [pc, #464]	; (8006d54 <HAL_RCC_OscConfig+0x474>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a73      	ldr	r2, [pc, #460]	; (8006d54 <HAL_RCC_OscConfig+0x474>)
 8006b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b8e:	f7fb fef5 	bl	800297c <HAL_GetTick>
 8006b92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b94:	e008      	b.n	8006ba8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b96:	f7fb fef1 	bl	800297c <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d901      	bls.n	8006ba8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e10c      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ba8:	4b6a      	ldr	r3, [pc, #424]	; (8006d54 <HAL_RCC_OscConfig+0x474>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d0f0      	beq.n	8006b96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d106      	bne.n	8006bca <HAL_RCC_OscConfig+0x2ea>
 8006bbc:	4b64      	ldr	r3, [pc, #400]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc0:	4a63      	ldr	r2, [pc, #396]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006bc2:	f043 0301 	orr.w	r3, r3, #1
 8006bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8006bc8:	e01c      	b.n	8006c04 <HAL_RCC_OscConfig+0x324>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	2b05      	cmp	r3, #5
 8006bd0:	d10c      	bne.n	8006bec <HAL_RCC_OscConfig+0x30c>
 8006bd2:	4b5f      	ldr	r3, [pc, #380]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd6:	4a5e      	ldr	r2, [pc, #376]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006bd8:	f043 0304 	orr.w	r3, r3, #4
 8006bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8006bde:	4b5c      	ldr	r3, [pc, #368]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be2:	4a5b      	ldr	r2, [pc, #364]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006be4:	f043 0301 	orr.w	r3, r3, #1
 8006be8:	6713      	str	r3, [r2, #112]	; 0x70
 8006bea:	e00b      	b.n	8006c04 <HAL_RCC_OscConfig+0x324>
 8006bec:	4b58      	ldr	r3, [pc, #352]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf0:	4a57      	ldr	r2, [pc, #348]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006bf2:	f023 0301 	bic.w	r3, r3, #1
 8006bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8006bf8:	4b55      	ldr	r3, [pc, #340]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfc:	4a54      	ldr	r2, [pc, #336]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006bfe:	f023 0304 	bic.w	r3, r3, #4
 8006c02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d015      	beq.n	8006c38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c0c:	f7fb feb6 	bl	800297c <HAL_GetTick>
 8006c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c12:	e00a      	b.n	8006c2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c14:	f7fb feb2 	bl	800297c <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d901      	bls.n	8006c2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e0cb      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c2a:	4b49      	ldr	r3, [pc, #292]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d0ee      	beq.n	8006c14 <HAL_RCC_OscConfig+0x334>
 8006c36:	e014      	b.n	8006c62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c38:	f7fb fea0 	bl	800297c <HAL_GetTick>
 8006c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c3e:	e00a      	b.n	8006c56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c40:	f7fb fe9c 	bl	800297c <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e0b5      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c56:	4b3e      	ldr	r3, [pc, #248]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1ee      	bne.n	8006c40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d105      	bne.n	8006c74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c68:	4b39      	ldr	r3, [pc, #228]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6c:	4a38      	ldr	r2, [pc, #224]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 80a1 	beq.w	8006dc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c7e:	4b34      	ldr	r3, [pc, #208]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f003 030c 	and.w	r3, r3, #12
 8006c86:	2b08      	cmp	r3, #8
 8006c88:	d05c      	beq.n	8006d44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d141      	bne.n	8006d16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c92:	4b31      	ldr	r3, [pc, #196]	; (8006d58 <HAL_RCC_OscConfig+0x478>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c98:	f7fb fe70 	bl	800297c <HAL_GetTick>
 8006c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c9e:	e008      	b.n	8006cb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ca0:	f7fb fe6c 	bl	800297c <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d901      	bls.n	8006cb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e087      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cb2:	4b27      	ldr	r3, [pc, #156]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1f0      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	69da      	ldr	r2, [r3, #28]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	019b      	lsls	r3, r3, #6
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd4:	085b      	lsrs	r3, r3, #1
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	041b      	lsls	r3, r3, #16
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce0:	061b      	lsls	r3, r3, #24
 8006ce2:	491b      	ldr	r1, [pc, #108]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ce8:	4b1b      	ldr	r3, [pc, #108]	; (8006d58 <HAL_RCC_OscConfig+0x478>)
 8006cea:	2201      	movs	r2, #1
 8006cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cee:	f7fb fe45 	bl	800297c <HAL_GetTick>
 8006cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cf4:	e008      	b.n	8006d08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cf6:	f7fb fe41 	bl	800297c <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d901      	bls.n	8006d08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e05c      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d08:	4b11      	ldr	r3, [pc, #68]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d0f0      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x416>
 8006d14:	e054      	b.n	8006dc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d16:	4b10      	ldr	r3, [pc, #64]	; (8006d58 <HAL_RCC_OscConfig+0x478>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d1c:	f7fb fe2e 	bl	800297c <HAL_GetTick>
 8006d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d22:	e008      	b.n	8006d36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d24:	f7fb fe2a 	bl	800297c <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d901      	bls.n	8006d36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e045      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d36:	4b06      	ldr	r3, [pc, #24]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1f0      	bne.n	8006d24 <HAL_RCC_OscConfig+0x444>
 8006d42:	e03d      	b.n	8006dc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d107      	bne.n	8006d5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e038      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
 8006d50:	40023800 	.word	0x40023800
 8006d54:	40007000 	.word	0x40007000
 8006d58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d5c:	4b1b      	ldr	r3, [pc, #108]	; (8006dcc <HAL_RCC_OscConfig+0x4ec>)
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d028      	beq.n	8006dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d121      	bne.n	8006dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d11a      	bne.n	8006dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d111      	bne.n	8006dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da2:	085b      	lsrs	r3, r3, #1
 8006da4:	3b01      	subs	r3, #1
 8006da6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d107      	bne.n	8006dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d001      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e000      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	40023800 	.word	0x40023800

08006dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e0cc      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006de4:	4b68      	ldr	r3, [pc, #416]	; (8006f88 <HAL_RCC_ClockConfig+0x1b8>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0307 	and.w	r3, r3, #7
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d90c      	bls.n	8006e0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006df2:	4b65      	ldr	r3, [pc, #404]	; (8006f88 <HAL_RCC_ClockConfig+0x1b8>)
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	b2d2      	uxtb	r2, r2
 8006df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dfa:	4b63      	ldr	r3, [pc, #396]	; (8006f88 <HAL_RCC_ClockConfig+0x1b8>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0307 	and.w	r3, r3, #7
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d001      	beq.n	8006e0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e0b8      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d020      	beq.n	8006e5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0304 	and.w	r3, r3, #4
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d005      	beq.n	8006e30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e24:	4b59      	ldr	r3, [pc, #356]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	4a58      	ldr	r2, [pc, #352]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0308 	and.w	r3, r3, #8
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d005      	beq.n	8006e48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e3c:	4b53      	ldr	r3, [pc, #332]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	4a52      	ldr	r2, [pc, #328]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e48:	4b50      	ldr	r3, [pc, #320]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	494d      	ldr	r1, [pc, #308]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d044      	beq.n	8006ef0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d107      	bne.n	8006e7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e6e:	4b47      	ldr	r3, [pc, #284]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d119      	bne.n	8006eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e07f      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d003      	beq.n	8006e8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d107      	bne.n	8006e9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e8e:	4b3f      	ldr	r3, [pc, #252]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d109      	bne.n	8006eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e06f      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e9e:	4b3b      	ldr	r3, [pc, #236]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0302 	and.w	r3, r3, #2
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e067      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006eae:	4b37      	ldr	r3, [pc, #220]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f023 0203 	bic.w	r2, r3, #3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	4934      	ldr	r1, [pc, #208]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ec0:	f7fb fd5c 	bl	800297c <HAL_GetTick>
 8006ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ec6:	e00a      	b.n	8006ede <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ec8:	f7fb fd58 	bl	800297c <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d901      	bls.n	8006ede <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e04f      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ede:	4b2b      	ldr	r3, [pc, #172]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f003 020c 	and.w	r2, r3, #12
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d1eb      	bne.n	8006ec8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ef0:	4b25      	ldr	r3, [pc, #148]	; (8006f88 <HAL_RCC_ClockConfig+0x1b8>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0307 	and.w	r3, r3, #7
 8006ef8:	683a      	ldr	r2, [r7, #0]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d20c      	bcs.n	8006f18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006efe:	4b22      	ldr	r3, [pc, #136]	; (8006f88 <HAL_RCC_ClockConfig+0x1b8>)
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	b2d2      	uxtb	r2, r2
 8006f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f06:	4b20      	ldr	r3, [pc, #128]	; (8006f88 <HAL_RCC_ClockConfig+0x1b8>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0307 	and.w	r3, r3, #7
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d001      	beq.n	8006f18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e032      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0304 	and.w	r3, r3, #4
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d008      	beq.n	8006f36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f24:	4b19      	ldr	r3, [pc, #100]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	4916      	ldr	r1, [pc, #88]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0308 	and.w	r3, r3, #8
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d009      	beq.n	8006f56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f42:	4b12      	ldr	r3, [pc, #72]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	00db      	lsls	r3, r3, #3
 8006f50:	490e      	ldr	r1, [pc, #56]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f56:	f000 f821 	bl	8006f9c <HAL_RCC_GetSysClockFreq>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	4b0b      	ldr	r3, [pc, #44]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	091b      	lsrs	r3, r3, #4
 8006f62:	f003 030f 	and.w	r3, r3, #15
 8006f66:	490a      	ldr	r1, [pc, #40]	; (8006f90 <HAL_RCC_ClockConfig+0x1c0>)
 8006f68:	5ccb      	ldrb	r3, [r1, r3]
 8006f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f6e:	4a09      	ldr	r2, [pc, #36]	; (8006f94 <HAL_RCC_ClockConfig+0x1c4>)
 8006f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f72:	4b09      	ldr	r3, [pc, #36]	; (8006f98 <HAL_RCC_ClockConfig+0x1c8>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fb fcbc 	bl	80028f4 <HAL_InitTick>

  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	40023c00 	.word	0x40023c00
 8006f8c:	40023800 	.word	0x40023800
 8006f90:	08013a3c 	.word	0x08013a3c
 8006f94:	20000014 	.word	0x20000014
 8006f98:	20000018 	.word	0x20000018

08006f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fa0:	b094      	sub	sp, #80	; 0x50
 8006fa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8006fa8:	2300      	movs	r3, #0
 8006faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fac:	2300      	movs	r3, #0
 8006fae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fb4:	4b79      	ldr	r3, [pc, #484]	; (800719c <HAL_RCC_GetSysClockFreq+0x200>)
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f003 030c 	and.w	r3, r3, #12
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d00d      	beq.n	8006fdc <HAL_RCC_GetSysClockFreq+0x40>
 8006fc0:	2b08      	cmp	r3, #8
 8006fc2:	f200 80e1 	bhi.w	8007188 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d002      	beq.n	8006fd0 <HAL_RCC_GetSysClockFreq+0x34>
 8006fca:	2b04      	cmp	r3, #4
 8006fcc:	d003      	beq.n	8006fd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8006fce:	e0db      	b.n	8007188 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006fd0:	4b73      	ldr	r3, [pc, #460]	; (80071a0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006fd2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006fd4:	e0db      	b.n	800718e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006fd6:	4b73      	ldr	r3, [pc, #460]	; (80071a4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006fd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006fda:	e0d8      	b.n	800718e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fdc:	4b6f      	ldr	r3, [pc, #444]	; (800719c <HAL_RCC_GetSysClockFreq+0x200>)
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fe4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006fe6:	4b6d      	ldr	r3, [pc, #436]	; (800719c <HAL_RCC_GetSysClockFreq+0x200>)
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d063      	beq.n	80070ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ff2:	4b6a      	ldr	r3, [pc, #424]	; (800719c <HAL_RCC_GetSysClockFreq+0x200>)
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	099b      	lsrs	r3, r3, #6
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ffc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007004:	633b      	str	r3, [r7, #48]	; 0x30
 8007006:	2300      	movs	r3, #0
 8007008:	637b      	str	r3, [r7, #52]	; 0x34
 800700a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800700e:	4622      	mov	r2, r4
 8007010:	462b      	mov	r3, r5
 8007012:	f04f 0000 	mov.w	r0, #0
 8007016:	f04f 0100 	mov.w	r1, #0
 800701a:	0159      	lsls	r1, r3, #5
 800701c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007020:	0150      	lsls	r0, r2, #5
 8007022:	4602      	mov	r2, r0
 8007024:	460b      	mov	r3, r1
 8007026:	4621      	mov	r1, r4
 8007028:	1a51      	subs	r1, r2, r1
 800702a:	6139      	str	r1, [r7, #16]
 800702c:	4629      	mov	r1, r5
 800702e:	eb63 0301 	sbc.w	r3, r3, r1
 8007032:	617b      	str	r3, [r7, #20]
 8007034:	f04f 0200 	mov.w	r2, #0
 8007038:	f04f 0300 	mov.w	r3, #0
 800703c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007040:	4659      	mov	r1, fp
 8007042:	018b      	lsls	r3, r1, #6
 8007044:	4651      	mov	r1, sl
 8007046:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800704a:	4651      	mov	r1, sl
 800704c:	018a      	lsls	r2, r1, #6
 800704e:	4651      	mov	r1, sl
 8007050:	ebb2 0801 	subs.w	r8, r2, r1
 8007054:	4659      	mov	r1, fp
 8007056:	eb63 0901 	sbc.w	r9, r3, r1
 800705a:	f04f 0200 	mov.w	r2, #0
 800705e:	f04f 0300 	mov.w	r3, #0
 8007062:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007066:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800706a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800706e:	4690      	mov	r8, r2
 8007070:	4699      	mov	r9, r3
 8007072:	4623      	mov	r3, r4
 8007074:	eb18 0303 	adds.w	r3, r8, r3
 8007078:	60bb      	str	r3, [r7, #8]
 800707a:	462b      	mov	r3, r5
 800707c:	eb49 0303 	adc.w	r3, r9, r3
 8007080:	60fb      	str	r3, [r7, #12]
 8007082:	f04f 0200 	mov.w	r2, #0
 8007086:	f04f 0300 	mov.w	r3, #0
 800708a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800708e:	4629      	mov	r1, r5
 8007090:	024b      	lsls	r3, r1, #9
 8007092:	4621      	mov	r1, r4
 8007094:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007098:	4621      	mov	r1, r4
 800709a:	024a      	lsls	r2, r1, #9
 800709c:	4610      	mov	r0, r2
 800709e:	4619      	mov	r1, r3
 80070a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070a2:	2200      	movs	r2, #0
 80070a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80070a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80070ac:	f7f9 fdec 	bl	8000c88 <__aeabi_uldivmod>
 80070b0:	4602      	mov	r2, r0
 80070b2:	460b      	mov	r3, r1
 80070b4:	4613      	mov	r3, r2
 80070b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070b8:	e058      	b.n	800716c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070ba:	4b38      	ldr	r3, [pc, #224]	; (800719c <HAL_RCC_GetSysClockFreq+0x200>)
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	099b      	lsrs	r3, r3, #6
 80070c0:	2200      	movs	r2, #0
 80070c2:	4618      	mov	r0, r3
 80070c4:	4611      	mov	r1, r2
 80070c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80070ca:	623b      	str	r3, [r7, #32]
 80070cc:	2300      	movs	r3, #0
 80070ce:	627b      	str	r3, [r7, #36]	; 0x24
 80070d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80070d4:	4642      	mov	r2, r8
 80070d6:	464b      	mov	r3, r9
 80070d8:	f04f 0000 	mov.w	r0, #0
 80070dc:	f04f 0100 	mov.w	r1, #0
 80070e0:	0159      	lsls	r1, r3, #5
 80070e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070e6:	0150      	lsls	r0, r2, #5
 80070e8:	4602      	mov	r2, r0
 80070ea:	460b      	mov	r3, r1
 80070ec:	4641      	mov	r1, r8
 80070ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80070f2:	4649      	mov	r1, r9
 80070f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80070f8:	f04f 0200 	mov.w	r2, #0
 80070fc:	f04f 0300 	mov.w	r3, #0
 8007100:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007104:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007108:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800710c:	ebb2 040a 	subs.w	r4, r2, sl
 8007110:	eb63 050b 	sbc.w	r5, r3, fp
 8007114:	f04f 0200 	mov.w	r2, #0
 8007118:	f04f 0300 	mov.w	r3, #0
 800711c:	00eb      	lsls	r3, r5, #3
 800711e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007122:	00e2      	lsls	r2, r4, #3
 8007124:	4614      	mov	r4, r2
 8007126:	461d      	mov	r5, r3
 8007128:	4643      	mov	r3, r8
 800712a:	18e3      	adds	r3, r4, r3
 800712c:	603b      	str	r3, [r7, #0]
 800712e:	464b      	mov	r3, r9
 8007130:	eb45 0303 	adc.w	r3, r5, r3
 8007134:	607b      	str	r3, [r7, #4]
 8007136:	f04f 0200 	mov.w	r2, #0
 800713a:	f04f 0300 	mov.w	r3, #0
 800713e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007142:	4629      	mov	r1, r5
 8007144:	028b      	lsls	r3, r1, #10
 8007146:	4621      	mov	r1, r4
 8007148:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800714c:	4621      	mov	r1, r4
 800714e:	028a      	lsls	r2, r1, #10
 8007150:	4610      	mov	r0, r2
 8007152:	4619      	mov	r1, r3
 8007154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007156:	2200      	movs	r2, #0
 8007158:	61bb      	str	r3, [r7, #24]
 800715a:	61fa      	str	r2, [r7, #28]
 800715c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007160:	f7f9 fd92 	bl	8000c88 <__aeabi_uldivmod>
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	4613      	mov	r3, r2
 800716a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800716c:	4b0b      	ldr	r3, [pc, #44]	; (800719c <HAL_RCC_GetSysClockFreq+0x200>)
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	0c1b      	lsrs	r3, r3, #16
 8007172:	f003 0303 	and.w	r3, r3, #3
 8007176:	3301      	adds	r3, #1
 8007178:	005b      	lsls	r3, r3, #1
 800717a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800717c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800717e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007180:	fbb2 f3f3 	udiv	r3, r2, r3
 8007184:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007186:	e002      	b.n	800718e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007188:	4b05      	ldr	r3, [pc, #20]	; (80071a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800718a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800718c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800718e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007190:	4618      	mov	r0, r3
 8007192:	3750      	adds	r7, #80	; 0x50
 8007194:	46bd      	mov	sp, r7
 8007196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800719a:	bf00      	nop
 800719c:	40023800 	.word	0x40023800
 80071a0:	00f42400 	.word	0x00f42400
 80071a4:	007a1200 	.word	0x007a1200

080071a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071a8:	b480      	push	{r7}
 80071aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071ac:	4b03      	ldr	r3, [pc, #12]	; (80071bc <HAL_RCC_GetHCLKFreq+0x14>)
 80071ae:	681b      	ldr	r3, [r3, #0]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	20000014 	.word	0x20000014

080071c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80071c4:	f7ff fff0 	bl	80071a8 <HAL_RCC_GetHCLKFreq>
 80071c8:	4602      	mov	r2, r0
 80071ca:	4b05      	ldr	r3, [pc, #20]	; (80071e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	0a9b      	lsrs	r3, r3, #10
 80071d0:	f003 0307 	and.w	r3, r3, #7
 80071d4:	4903      	ldr	r1, [pc, #12]	; (80071e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071d6:	5ccb      	ldrb	r3, [r1, r3]
 80071d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071dc:	4618      	mov	r0, r3
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	40023800 	.word	0x40023800
 80071e4:	08013a4c 	.word	0x08013a4c

080071e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80071ec:	f7ff ffdc 	bl	80071a8 <HAL_RCC_GetHCLKFreq>
 80071f0:	4602      	mov	r2, r0
 80071f2:	4b05      	ldr	r3, [pc, #20]	; (8007208 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	0b5b      	lsrs	r3, r3, #13
 80071f8:	f003 0307 	and.w	r3, r3, #7
 80071fc:	4903      	ldr	r1, [pc, #12]	; (800720c <HAL_RCC_GetPCLK2Freq+0x24>)
 80071fe:	5ccb      	ldrb	r3, [r1, r3]
 8007200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007204:	4618      	mov	r0, r3
 8007206:	bd80      	pop	{r7, pc}
 8007208:	40023800 	.word	0x40023800
 800720c:	08013a4c 	.word	0x08013a4c

08007210 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e07b      	b.n	800731a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	2b00      	cmp	r3, #0
 8007228:	d108      	bne.n	800723c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007232:	d009      	beq.n	8007248 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	61da      	str	r2, [r3, #28]
 800723a:	e005      	b.n	8007248 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d106      	bne.n	8007268 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7fa fff4 	bl	8002250 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800727e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007290:	431a      	orrs	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800729a:	431a      	orrs	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	f003 0302 	and.w	r3, r3, #2
 80072a4:	431a      	orrs	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	431a      	orrs	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072b8:	431a      	orrs	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072c2:	431a      	orrs	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a1b      	ldr	r3, [r3, #32]
 80072c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072cc:	ea42 0103 	orr.w	r1, r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	430a      	orrs	r2, r1
 80072de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	0c1b      	lsrs	r3, r3, #16
 80072e6:	f003 0104 	and.w	r1, r3, #4
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ee:	f003 0210 	and.w	r2, r3, #16
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	430a      	orrs	r2, r1
 80072f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	69da      	ldr	r2, [r3, #28]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007308:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b082      	sub	sp, #8
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d101      	bne.n	8007334 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e041      	b.n	80073b8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b00      	cmp	r3, #0
 800733e:	d106      	bne.n	800734e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7fa ffc9 	bl	80022e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2202      	movs	r2, #2
 8007352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	3304      	adds	r3, #4
 800735e:	4619      	mov	r1, r3
 8007360:	4610      	mov	r0, r2
 8007362:	f000 fad9 	bl	8007918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2201      	movs	r2, #1
 8007372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2201      	movs	r2, #1
 800737a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2201      	movs	r2, #1
 8007382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2201      	movs	r2, #1
 800738a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2201      	movs	r2, #1
 8007392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2201      	movs	r2, #1
 800739a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3708      	adds	r7, #8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e041      	b.n	8007456 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d106      	bne.n	80073ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f839 	bl	800745e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2202      	movs	r2, #2
 80073f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	3304      	adds	r3, #4
 80073fc:	4619      	mov	r1, r3
 80073fe:	4610      	mov	r0, r2
 8007400:	f000 fa8a 	bl	8007918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800745e:	b480      	push	{r7}
 8007460:	b083      	sub	sp, #12
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007466:	bf00      	nop
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
	...

08007474 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d109      	bne.n	8007498 <HAL_TIM_PWM_Start+0x24>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b01      	cmp	r3, #1
 800748e:	bf14      	ite	ne
 8007490:	2301      	movne	r3, #1
 8007492:	2300      	moveq	r3, #0
 8007494:	b2db      	uxtb	r3, r3
 8007496:	e022      	b.n	80074de <HAL_TIM_PWM_Start+0x6a>
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2b04      	cmp	r3, #4
 800749c:	d109      	bne.n	80074b2 <HAL_TIM_PWM_Start+0x3e>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	bf14      	ite	ne
 80074aa:	2301      	movne	r3, #1
 80074ac:	2300      	moveq	r3, #0
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	e015      	b.n	80074de <HAL_TIM_PWM_Start+0x6a>
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b08      	cmp	r3, #8
 80074b6:	d109      	bne.n	80074cc <HAL_TIM_PWM_Start+0x58>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	bf14      	ite	ne
 80074c4:	2301      	movne	r3, #1
 80074c6:	2300      	moveq	r3, #0
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	e008      	b.n	80074de <HAL_TIM_PWM_Start+0x6a>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	bf14      	ite	ne
 80074d8:	2301      	movne	r3, #1
 80074da:	2300      	moveq	r3, #0
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e07c      	b.n	80075e0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d104      	bne.n	80074f6 <HAL_TIM_PWM_Start+0x82>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2202      	movs	r2, #2
 80074f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074f4:	e013      	b.n	800751e <HAL_TIM_PWM_Start+0xaa>
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	2b04      	cmp	r3, #4
 80074fa:	d104      	bne.n	8007506 <HAL_TIM_PWM_Start+0x92>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2202      	movs	r2, #2
 8007500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007504:	e00b      	b.n	800751e <HAL_TIM_PWM_Start+0xaa>
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2b08      	cmp	r3, #8
 800750a:	d104      	bne.n	8007516 <HAL_TIM_PWM_Start+0xa2>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2202      	movs	r2, #2
 8007510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007514:	e003      	b.n	800751e <HAL_TIM_PWM_Start+0xaa>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2202      	movs	r2, #2
 800751a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2201      	movs	r2, #1
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	4618      	mov	r0, r3
 8007528:	f000 fcec 	bl	8007f04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a2d      	ldr	r2, [pc, #180]	; (80075e8 <HAL_TIM_PWM_Start+0x174>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d004      	beq.n	8007540 <HAL_TIM_PWM_Start+0xcc>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a2c      	ldr	r2, [pc, #176]	; (80075ec <HAL_TIM_PWM_Start+0x178>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d101      	bne.n	8007544 <HAL_TIM_PWM_Start+0xd0>
 8007540:	2301      	movs	r3, #1
 8007542:	e000      	b.n	8007546 <HAL_TIM_PWM_Start+0xd2>
 8007544:	2300      	movs	r3, #0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d007      	beq.n	800755a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007558:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a22      	ldr	r2, [pc, #136]	; (80075e8 <HAL_TIM_PWM_Start+0x174>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d022      	beq.n	80075aa <HAL_TIM_PWM_Start+0x136>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800756c:	d01d      	beq.n	80075aa <HAL_TIM_PWM_Start+0x136>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a1f      	ldr	r2, [pc, #124]	; (80075f0 <HAL_TIM_PWM_Start+0x17c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d018      	beq.n	80075aa <HAL_TIM_PWM_Start+0x136>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a1d      	ldr	r2, [pc, #116]	; (80075f4 <HAL_TIM_PWM_Start+0x180>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d013      	beq.n	80075aa <HAL_TIM_PWM_Start+0x136>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a1c      	ldr	r2, [pc, #112]	; (80075f8 <HAL_TIM_PWM_Start+0x184>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d00e      	beq.n	80075aa <HAL_TIM_PWM_Start+0x136>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a16      	ldr	r2, [pc, #88]	; (80075ec <HAL_TIM_PWM_Start+0x178>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d009      	beq.n	80075aa <HAL_TIM_PWM_Start+0x136>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a18      	ldr	r2, [pc, #96]	; (80075fc <HAL_TIM_PWM_Start+0x188>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d004      	beq.n	80075aa <HAL_TIM_PWM_Start+0x136>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a16      	ldr	r2, [pc, #88]	; (8007600 <HAL_TIM_PWM_Start+0x18c>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d111      	bne.n	80075ce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f003 0307 	and.w	r3, r3, #7
 80075b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2b06      	cmp	r3, #6
 80075ba:	d010      	beq.n	80075de <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f042 0201 	orr.w	r2, r2, #1
 80075ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075cc:	e007      	b.n	80075de <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f042 0201 	orr.w	r2, r2, #1
 80075dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	40010000 	.word	0x40010000
 80075ec:	40010400 	.word	0x40010400
 80075f0:	40000400 	.word	0x40000400
 80075f4:	40000800 	.word	0x40000800
 80075f8:	40000c00 	.word	0x40000c00
 80075fc:	40014000 	.word	0x40014000
 8007600:	40001800 	.word	0x40001800

08007604 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007610:	2300      	movs	r3, #0
 8007612:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800761a:	2b01      	cmp	r3, #1
 800761c:	d101      	bne.n	8007622 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800761e:	2302      	movs	r3, #2
 8007620:	e0ae      	b.n	8007780 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2b0c      	cmp	r3, #12
 800762e:	f200 809f 	bhi.w	8007770 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007632:	a201      	add	r2, pc, #4	; (adr r2, 8007638 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007638:	0800766d 	.word	0x0800766d
 800763c:	08007771 	.word	0x08007771
 8007640:	08007771 	.word	0x08007771
 8007644:	08007771 	.word	0x08007771
 8007648:	080076ad 	.word	0x080076ad
 800764c:	08007771 	.word	0x08007771
 8007650:	08007771 	.word	0x08007771
 8007654:	08007771 	.word	0x08007771
 8007658:	080076ef 	.word	0x080076ef
 800765c:	08007771 	.word	0x08007771
 8007660:	08007771 	.word	0x08007771
 8007664:	08007771 	.word	0x08007771
 8007668:	0800772f 	.word	0x0800772f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68b9      	ldr	r1, [r7, #8]
 8007672:	4618      	mov	r0, r3
 8007674:	f000 f9fc 	bl	8007a70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	699a      	ldr	r2, [r3, #24]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f042 0208 	orr.w	r2, r2, #8
 8007686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	699a      	ldr	r2, [r3, #24]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f022 0204 	bic.w	r2, r2, #4
 8007696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6999      	ldr	r1, [r3, #24]
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	691a      	ldr	r2, [r3, #16]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	430a      	orrs	r2, r1
 80076a8:	619a      	str	r2, [r3, #24]
      break;
 80076aa:	e064      	b.n	8007776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68b9      	ldr	r1, [r7, #8]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 fa4c 	bl	8007b50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	699a      	ldr	r2, [r3, #24]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	699a      	ldr	r2, [r3, #24]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6999      	ldr	r1, [r3, #24]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	021a      	lsls	r2, r3, #8
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	430a      	orrs	r2, r1
 80076ea:	619a      	str	r2, [r3, #24]
      break;
 80076ec:	e043      	b.n	8007776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68b9      	ldr	r1, [r7, #8]
 80076f4:	4618      	mov	r0, r3
 80076f6:	f000 faa1 	bl	8007c3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69da      	ldr	r2, [r3, #28]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f042 0208 	orr.w	r2, r2, #8
 8007708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	69da      	ldr	r2, [r3, #28]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f022 0204 	bic.w	r2, r2, #4
 8007718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	69d9      	ldr	r1, [r3, #28]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	691a      	ldr	r2, [r3, #16]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	430a      	orrs	r2, r1
 800772a:	61da      	str	r2, [r3, #28]
      break;
 800772c:	e023      	b.n	8007776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68b9      	ldr	r1, [r7, #8]
 8007734:	4618      	mov	r0, r3
 8007736:	f000 faf5 	bl	8007d24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	69da      	ldr	r2, [r3, #28]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	69da      	ldr	r2, [r3, #28]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	69d9      	ldr	r1, [r3, #28]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	021a      	lsls	r2, r3, #8
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	61da      	str	r2, [r3, #28]
      break;
 800776e:	e002      	b.n	8007776 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	75fb      	strb	r3, [r7, #23]
      break;
 8007774:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800777e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007780:	4618      	mov	r0, r3
 8007782:	3718      	adds	r7, #24
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007792:	2300      	movs	r3, #0
 8007794:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800779c:	2b01      	cmp	r3, #1
 800779e:	d101      	bne.n	80077a4 <HAL_TIM_ConfigClockSource+0x1c>
 80077a0:	2302      	movs	r3, #2
 80077a2:	e0b4      	b.n	800790e <HAL_TIM_ConfigClockSource+0x186>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2202      	movs	r2, #2
 80077b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80077c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077dc:	d03e      	beq.n	800785c <HAL_TIM_ConfigClockSource+0xd4>
 80077de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077e2:	f200 8087 	bhi.w	80078f4 <HAL_TIM_ConfigClockSource+0x16c>
 80077e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ea:	f000 8086 	beq.w	80078fa <HAL_TIM_ConfigClockSource+0x172>
 80077ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077f2:	d87f      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x16c>
 80077f4:	2b70      	cmp	r3, #112	; 0x70
 80077f6:	d01a      	beq.n	800782e <HAL_TIM_ConfigClockSource+0xa6>
 80077f8:	2b70      	cmp	r3, #112	; 0x70
 80077fa:	d87b      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x16c>
 80077fc:	2b60      	cmp	r3, #96	; 0x60
 80077fe:	d050      	beq.n	80078a2 <HAL_TIM_ConfigClockSource+0x11a>
 8007800:	2b60      	cmp	r3, #96	; 0x60
 8007802:	d877      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007804:	2b50      	cmp	r3, #80	; 0x50
 8007806:	d03c      	beq.n	8007882 <HAL_TIM_ConfigClockSource+0xfa>
 8007808:	2b50      	cmp	r3, #80	; 0x50
 800780a:	d873      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x16c>
 800780c:	2b40      	cmp	r3, #64	; 0x40
 800780e:	d058      	beq.n	80078c2 <HAL_TIM_ConfigClockSource+0x13a>
 8007810:	2b40      	cmp	r3, #64	; 0x40
 8007812:	d86f      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007814:	2b30      	cmp	r3, #48	; 0x30
 8007816:	d064      	beq.n	80078e2 <HAL_TIM_ConfigClockSource+0x15a>
 8007818:	2b30      	cmp	r3, #48	; 0x30
 800781a:	d86b      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x16c>
 800781c:	2b20      	cmp	r3, #32
 800781e:	d060      	beq.n	80078e2 <HAL_TIM_ConfigClockSource+0x15a>
 8007820:	2b20      	cmp	r3, #32
 8007822:	d867      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007824:	2b00      	cmp	r3, #0
 8007826:	d05c      	beq.n	80078e2 <HAL_TIM_ConfigClockSource+0x15a>
 8007828:	2b10      	cmp	r3, #16
 800782a:	d05a      	beq.n	80078e2 <HAL_TIM_ConfigClockSource+0x15a>
 800782c:	e062      	b.n	80078f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800783e:	f000 fb41 	bl	8007ec4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007850:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	609a      	str	r2, [r3, #8]
      break;
 800785a:	e04f      	b.n	80078fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800786c:	f000 fb2a 	bl	8007ec4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	689a      	ldr	r2, [r3, #8]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800787e:	609a      	str	r2, [r3, #8]
      break;
 8007880:	e03c      	b.n	80078fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800788e:	461a      	mov	r2, r3
 8007890:	f000 fa9e 	bl	8007dd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2150      	movs	r1, #80	; 0x50
 800789a:	4618      	mov	r0, r3
 800789c:	f000 faf7 	bl	8007e8e <TIM_ITRx_SetConfig>
      break;
 80078a0:	e02c      	b.n	80078fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078ae:	461a      	mov	r2, r3
 80078b0:	f000 fabd 	bl	8007e2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2160      	movs	r1, #96	; 0x60
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 fae7 	bl	8007e8e <TIM_ITRx_SetConfig>
      break;
 80078c0:	e01c      	b.n	80078fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078ce:	461a      	mov	r2, r3
 80078d0:	f000 fa7e 	bl	8007dd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2140      	movs	r1, #64	; 0x40
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 fad7 	bl	8007e8e <TIM_ITRx_SetConfig>
      break;
 80078e0:	e00c      	b.n	80078fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4619      	mov	r1, r3
 80078ec:	4610      	mov	r0, r2
 80078ee:	f000 face 	bl	8007e8e <TIM_ITRx_SetConfig>
      break;
 80078f2:	e003      	b.n	80078fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	73fb      	strb	r3, [r7, #15]
      break;
 80078f8:	e000      	b.n	80078fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80078fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800790c:	7bfb      	ldrb	r3, [r7, #15]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
	...

08007918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a46      	ldr	r2, [pc, #280]	; (8007a44 <TIM_Base_SetConfig+0x12c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d013      	beq.n	8007958 <TIM_Base_SetConfig+0x40>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007936:	d00f      	beq.n	8007958 <TIM_Base_SetConfig+0x40>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a43      	ldr	r2, [pc, #268]	; (8007a48 <TIM_Base_SetConfig+0x130>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d00b      	beq.n	8007958 <TIM_Base_SetConfig+0x40>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a42      	ldr	r2, [pc, #264]	; (8007a4c <TIM_Base_SetConfig+0x134>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d007      	beq.n	8007958 <TIM_Base_SetConfig+0x40>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a41      	ldr	r2, [pc, #260]	; (8007a50 <TIM_Base_SetConfig+0x138>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d003      	beq.n	8007958 <TIM_Base_SetConfig+0x40>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a40      	ldr	r2, [pc, #256]	; (8007a54 <TIM_Base_SetConfig+0x13c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d108      	bne.n	800796a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800795e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	4313      	orrs	r3, r2
 8007968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a35      	ldr	r2, [pc, #212]	; (8007a44 <TIM_Base_SetConfig+0x12c>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d02b      	beq.n	80079ca <TIM_Base_SetConfig+0xb2>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007978:	d027      	beq.n	80079ca <TIM_Base_SetConfig+0xb2>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a32      	ldr	r2, [pc, #200]	; (8007a48 <TIM_Base_SetConfig+0x130>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d023      	beq.n	80079ca <TIM_Base_SetConfig+0xb2>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a31      	ldr	r2, [pc, #196]	; (8007a4c <TIM_Base_SetConfig+0x134>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d01f      	beq.n	80079ca <TIM_Base_SetConfig+0xb2>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a30      	ldr	r2, [pc, #192]	; (8007a50 <TIM_Base_SetConfig+0x138>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d01b      	beq.n	80079ca <TIM_Base_SetConfig+0xb2>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a2f      	ldr	r2, [pc, #188]	; (8007a54 <TIM_Base_SetConfig+0x13c>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d017      	beq.n	80079ca <TIM_Base_SetConfig+0xb2>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a2e      	ldr	r2, [pc, #184]	; (8007a58 <TIM_Base_SetConfig+0x140>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d013      	beq.n	80079ca <TIM_Base_SetConfig+0xb2>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a2d      	ldr	r2, [pc, #180]	; (8007a5c <TIM_Base_SetConfig+0x144>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d00f      	beq.n	80079ca <TIM_Base_SetConfig+0xb2>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a2c      	ldr	r2, [pc, #176]	; (8007a60 <TIM_Base_SetConfig+0x148>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d00b      	beq.n	80079ca <TIM_Base_SetConfig+0xb2>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a2b      	ldr	r2, [pc, #172]	; (8007a64 <TIM_Base_SetConfig+0x14c>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d007      	beq.n	80079ca <TIM_Base_SetConfig+0xb2>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a2a      	ldr	r2, [pc, #168]	; (8007a68 <TIM_Base_SetConfig+0x150>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d003      	beq.n	80079ca <TIM_Base_SetConfig+0xb2>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a29      	ldr	r2, [pc, #164]	; (8007a6c <TIM_Base_SetConfig+0x154>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d108      	bne.n	80079dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	4313      	orrs	r3, r2
 80079da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	689a      	ldr	r2, [r3, #8]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a10      	ldr	r2, [pc, #64]	; (8007a44 <TIM_Base_SetConfig+0x12c>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d003      	beq.n	8007a10 <TIM_Base_SetConfig+0xf8>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a12      	ldr	r2, [pc, #72]	; (8007a54 <TIM_Base_SetConfig+0x13c>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d103      	bne.n	8007a18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	691a      	ldr	r2, [r3, #16]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d105      	bne.n	8007a36 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	f023 0201 	bic.w	r2, r3, #1
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	611a      	str	r2, [r3, #16]
  }
}
 8007a36:	bf00      	nop
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	40010000 	.word	0x40010000
 8007a48:	40000400 	.word	0x40000400
 8007a4c:	40000800 	.word	0x40000800
 8007a50:	40000c00 	.word	0x40000c00
 8007a54:	40010400 	.word	0x40010400
 8007a58:	40014000 	.word	0x40014000
 8007a5c:	40014400 	.word	0x40014400
 8007a60:	40014800 	.word	0x40014800
 8007a64:	40001800 	.word	0x40001800
 8007a68:	40001c00 	.word	0x40001c00
 8007a6c:	40002000 	.word	0x40002000

08007a70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b087      	sub	sp, #28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a1b      	ldr	r3, [r3, #32]
 8007a84:	f023 0201 	bic.w	r2, r3, #1
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f023 0303 	bic.w	r3, r3, #3
 8007aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	f023 0302 	bic.w	r3, r3, #2
 8007ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a20      	ldr	r2, [pc, #128]	; (8007b48 <TIM_OC1_SetConfig+0xd8>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d003      	beq.n	8007ad4 <TIM_OC1_SetConfig+0x64>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a1f      	ldr	r2, [pc, #124]	; (8007b4c <TIM_OC1_SetConfig+0xdc>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d10c      	bne.n	8007aee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f023 0308 	bic.w	r3, r3, #8
 8007ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f023 0304 	bic.w	r3, r3, #4
 8007aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a15      	ldr	r2, [pc, #84]	; (8007b48 <TIM_OC1_SetConfig+0xd8>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d003      	beq.n	8007afe <TIM_OC1_SetConfig+0x8e>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a14      	ldr	r2, [pc, #80]	; (8007b4c <TIM_OC1_SetConfig+0xdc>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d111      	bne.n	8007b22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	693a      	ldr	r2, [r7, #16]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	685a      	ldr	r2, [r3, #4]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	621a      	str	r2, [r3, #32]
}
 8007b3c:	bf00      	nop
 8007b3e:	371c      	adds	r7, #28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	40010000 	.word	0x40010000
 8007b4c:	40010400 	.word	0x40010400

08007b50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b087      	sub	sp, #28
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	f023 0210 	bic.w	r2, r3, #16
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	021b      	lsls	r3, r3, #8
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	f023 0320 	bic.w	r3, r3, #32
 8007b9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	011b      	lsls	r3, r3, #4
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a22      	ldr	r2, [pc, #136]	; (8007c34 <TIM_OC2_SetConfig+0xe4>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d003      	beq.n	8007bb8 <TIM_OC2_SetConfig+0x68>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a21      	ldr	r2, [pc, #132]	; (8007c38 <TIM_OC2_SetConfig+0xe8>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d10d      	bne.n	8007bd4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	011b      	lsls	r3, r3, #4
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a17      	ldr	r2, [pc, #92]	; (8007c34 <TIM_OC2_SetConfig+0xe4>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d003      	beq.n	8007be4 <TIM_OC2_SetConfig+0x94>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a16      	ldr	r2, [pc, #88]	; (8007c38 <TIM_OC2_SetConfig+0xe8>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d113      	bne.n	8007c0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	695b      	ldr	r3, [r3, #20]
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	693a      	ldr	r2, [r7, #16]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	685a      	ldr	r2, [r3, #4]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	621a      	str	r2, [r3, #32]
}
 8007c26:	bf00      	nop
 8007c28:	371c      	adds	r7, #28
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	40010000 	.word	0x40010000
 8007c38:	40010400 	.word	0x40010400

08007c3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b087      	sub	sp, #28
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a1b      	ldr	r3, [r3, #32]
 8007c50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	69db      	ldr	r3, [r3, #28]
 8007c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f023 0303 	bic.w	r3, r3, #3
 8007c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	021b      	lsls	r3, r3, #8
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a21      	ldr	r2, [pc, #132]	; (8007d1c <TIM_OC3_SetConfig+0xe0>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d003      	beq.n	8007ca2 <TIM_OC3_SetConfig+0x66>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a20      	ldr	r2, [pc, #128]	; (8007d20 <TIM_OC3_SetConfig+0xe4>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d10d      	bne.n	8007cbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ca8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	021b      	lsls	r3, r3, #8
 8007cb0:	697a      	ldr	r2, [r7, #20]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a16      	ldr	r2, [pc, #88]	; (8007d1c <TIM_OC3_SetConfig+0xe0>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d003      	beq.n	8007cce <TIM_OC3_SetConfig+0x92>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a15      	ldr	r2, [pc, #84]	; (8007d20 <TIM_OC3_SetConfig+0xe4>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d113      	bne.n	8007cf6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	011b      	lsls	r3, r3, #4
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	011b      	lsls	r3, r3, #4
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	693a      	ldr	r2, [r7, #16]
 8007cfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	685a      	ldr	r2, [r3, #4]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	621a      	str	r2, [r3, #32]
}
 8007d10:	bf00      	nop
 8007d12:	371c      	adds	r7, #28
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr
 8007d1c:	40010000 	.word	0x40010000
 8007d20:	40010400 	.word	0x40010400

08007d24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b087      	sub	sp, #28
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a1b      	ldr	r3, [r3, #32]
 8007d38:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	021b      	lsls	r3, r3, #8
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	031b      	lsls	r3, r3, #12
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a12      	ldr	r2, [pc, #72]	; (8007dc8 <TIM_OC4_SetConfig+0xa4>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d003      	beq.n	8007d8c <TIM_OC4_SetConfig+0x68>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a11      	ldr	r2, [pc, #68]	; (8007dcc <TIM_OC4_SetConfig+0xa8>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d109      	bne.n	8007da0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	019b      	lsls	r3, r3, #6
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	685a      	ldr	r2, [r3, #4]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	621a      	str	r2, [r3, #32]
}
 8007dba:	bf00      	nop
 8007dbc:	371c      	adds	r7, #28
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	40010000 	.word	0x40010000
 8007dcc:	40010400 	.word	0x40010400

08007dd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b087      	sub	sp, #28
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6a1b      	ldr	r3, [r3, #32]
 8007de0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	f023 0201 	bic.w	r2, r3, #1
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	011b      	lsls	r3, r3, #4
 8007e00:	693a      	ldr	r2, [r7, #16]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	f023 030a 	bic.w	r3, r3, #10
 8007e0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	697a      	ldr	r2, [r7, #20]
 8007e20:	621a      	str	r2, [r3, #32]
}
 8007e22:	bf00      	nop
 8007e24:	371c      	adds	r7, #28
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b087      	sub	sp, #28
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	60f8      	str	r0, [r7, #12]
 8007e36:	60b9      	str	r1, [r7, #8]
 8007e38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6a1b      	ldr	r3, [r3, #32]
 8007e3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6a1b      	ldr	r3, [r3, #32]
 8007e44:	f023 0210 	bic.w	r2, r3, #16
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	031b      	lsls	r3, r3, #12
 8007e5e:	693a      	ldr	r2, [r7, #16]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	011b      	lsls	r3, r3, #4
 8007e70:	697a      	ldr	r2, [r7, #20]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	621a      	str	r2, [r3, #32]
}
 8007e82:	bf00      	nop
 8007e84:	371c      	adds	r7, #28
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr

08007e8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e8e:	b480      	push	{r7}
 8007e90:	b085      	sub	sp, #20
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ea4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	f043 0307 	orr.w	r3, r3, #7
 8007eb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	609a      	str	r2, [r3, #8]
}
 8007eb8:	bf00      	nop
 8007eba:	3714      	adds	r7, #20
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b087      	sub	sp, #28
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
 8007ed0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ede:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	021a      	lsls	r2, r3, #8
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	697a      	ldr	r2, [r7, #20]
 8007ef6:	609a      	str	r2, [r3, #8]
}
 8007ef8:	bf00      	nop
 8007efa:	371c      	adds	r7, #28
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b087      	sub	sp, #28
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	f003 031f 	and.w	r3, r3, #31
 8007f16:	2201      	movs	r2, #1
 8007f18:	fa02 f303 	lsl.w	r3, r2, r3
 8007f1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6a1a      	ldr	r2, [r3, #32]
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	43db      	mvns	r3, r3
 8007f26:	401a      	ands	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6a1a      	ldr	r2, [r3, #32]
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	f003 031f 	and.w	r3, r3, #31
 8007f36:	6879      	ldr	r1, [r7, #4]
 8007f38:	fa01 f303 	lsl.w	r3, r1, r3
 8007f3c:	431a      	orrs	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	621a      	str	r2, [r3, #32]
}
 8007f42:	bf00      	nop
 8007f44:	371c      	adds	r7, #28
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
	...

08007f50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d101      	bne.n	8007f68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f64:	2302      	movs	r3, #2
 8007f66:	e05a      	b.n	800801e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2202      	movs	r2, #2
 8007f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a21      	ldr	r2, [pc, #132]	; (800802c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d022      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb4:	d01d      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a1d      	ldr	r2, [pc, #116]	; (8008030 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d018      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a1b      	ldr	r2, [pc, #108]	; (8008034 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d013      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a1a      	ldr	r2, [pc, #104]	; (8008038 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d00e      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a18      	ldr	r2, [pc, #96]	; (800803c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d009      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a17      	ldr	r2, [pc, #92]	; (8008040 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d004      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a15      	ldr	r2, [pc, #84]	; (8008044 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d10c      	bne.n	800800c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ff8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	4313      	orrs	r3, r2
 8008002:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	40010000 	.word	0x40010000
 8008030:	40000400 	.word	0x40000400
 8008034:	40000800 	.word	0x40000800
 8008038:	40000c00 	.word	0x40000c00
 800803c:	40010400 	.word	0x40010400
 8008040:	40014000 	.word	0x40014000
 8008044:	40001800 	.word	0x40001800

08008048 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008052:	2300      	movs	r3, #0
 8008054:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800805c:	2b01      	cmp	r3, #1
 800805e:	d101      	bne.n	8008064 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008060:	2302      	movs	r3, #2
 8008062:	e03d      	b.n	80080e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	4313      	orrs	r3, r2
 8008078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	4313      	orrs	r3, r2
 8008086:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	4313      	orrs	r3, r2
 8008094:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	695b      	ldr	r3, [r3, #20]
 80080bc:	4313      	orrs	r3, r2
 80080be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	69db      	ldr	r3, [r3, #28]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e042      	b.n	8008184 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	d106      	bne.n	8008118 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f7fa f940 	bl	8002398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2224      	movs	r2, #36	; 0x24
 800811c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68da      	ldr	r2, [r3, #12]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800812e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fdbd 	bl	8008cb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	691a      	ldr	r2, [r3, #16]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008144:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	695a      	ldr	r2, [r3, #20]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008154:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68da      	ldr	r2, [r3, #12]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008164:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2220      	movs	r2, #32
 8008170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2220      	movs	r2, #32
 8008178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b08a      	sub	sp, #40	; 0x28
 8008190:	af02      	add	r7, sp, #8
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	603b      	str	r3, [r7, #0]
 8008198:	4613      	mov	r3, r2
 800819a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800819c:	2300      	movs	r3, #0
 800819e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b20      	cmp	r3, #32
 80081aa:	d175      	bne.n	8008298 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d002      	beq.n	80081b8 <HAL_UART_Transmit+0x2c>
 80081b2:	88fb      	ldrh	r3, [r7, #6]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e06e      	b.n	800829a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2221      	movs	r2, #33	; 0x21
 80081c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80081ca:	f7fa fbd7 	bl	800297c <HAL_GetTick>
 80081ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	88fa      	ldrh	r2, [r7, #6]
 80081d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	88fa      	ldrh	r2, [r7, #6]
 80081da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081e4:	d108      	bne.n	80081f8 <HAL_UART_Transmit+0x6c>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d104      	bne.n	80081f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80081ee:	2300      	movs	r3, #0
 80081f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	61bb      	str	r3, [r7, #24]
 80081f6:	e003      	b.n	8008200 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081fc:	2300      	movs	r3, #0
 80081fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008200:	e02e      	b.n	8008260 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	2200      	movs	r2, #0
 800820a:	2180      	movs	r1, #128	; 0x80
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f000 fb1f 	bl	8008850 <UART_WaitOnFlagUntilTimeout>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d005      	beq.n	8008224 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2220      	movs	r2, #32
 800821c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8008220:	2303      	movs	r3, #3
 8008222:	e03a      	b.n	800829a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10b      	bne.n	8008242 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	881b      	ldrh	r3, [r3, #0]
 800822e:	461a      	mov	r2, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008238:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	3302      	adds	r3, #2
 800823e:	61bb      	str	r3, [r7, #24]
 8008240:	e007      	b.n	8008252 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	781a      	ldrb	r2, [r3, #0]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	3301      	adds	r3, #1
 8008250:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008256:	b29b      	uxth	r3, r3
 8008258:	3b01      	subs	r3, #1
 800825a:	b29a      	uxth	r2, r3
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008264:	b29b      	uxth	r3, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1cb      	bne.n	8008202 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	2200      	movs	r2, #0
 8008272:	2140      	movs	r1, #64	; 0x40
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f000 faeb 	bl	8008850 <UART_WaitOnFlagUntilTimeout>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d005      	beq.n	800828c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2220      	movs	r2, #32
 8008284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8008288:	2303      	movs	r3, #3
 800828a:	e006      	b.n	800829a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2220      	movs	r2, #32
 8008290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	e000      	b.n	800829a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008298:	2302      	movs	r3, #2
  }
}
 800829a:	4618      	mov	r0, r3
 800829c:	3720      	adds	r7, #32
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b084      	sub	sp, #16
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	60f8      	str	r0, [r7, #12]
 80082aa:	60b9      	str	r1, [r7, #8]
 80082ac:	4613      	mov	r3, r2
 80082ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	2b20      	cmp	r3, #32
 80082ba:	d112      	bne.n	80082e2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d002      	beq.n	80082c8 <HAL_UART_Receive_IT+0x26>
 80082c2:	88fb      	ldrh	r3, [r7, #6]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d101      	bne.n	80082cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	e00b      	b.n	80082e4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2200      	movs	r2, #0
 80082d0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80082d2:	88fb      	ldrh	r3, [r7, #6]
 80082d4:	461a      	mov	r2, r3
 80082d6:	68b9      	ldr	r1, [r7, #8]
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f000 fb12 	bl	8008902 <UART_Start_Receive_IT>
 80082de:	4603      	mov	r3, r0
 80082e0:	e000      	b.n	80082e4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80082e2:	2302      	movs	r3, #2
  }
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b0ba      	sub	sp, #232	; 0xe8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008312:	2300      	movs	r3, #0
 8008314:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008318:	2300      	movs	r3, #0
 800831a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800831e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008322:	f003 030f 	and.w	r3, r3, #15
 8008326:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800832a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800832e:	2b00      	cmp	r3, #0
 8008330:	d10f      	bne.n	8008352 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008336:	f003 0320 	and.w	r3, r3, #32
 800833a:	2b00      	cmp	r3, #0
 800833c:	d009      	beq.n	8008352 <HAL_UART_IRQHandler+0x66>
 800833e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008342:	f003 0320 	and.w	r3, r3, #32
 8008346:	2b00      	cmp	r3, #0
 8008348:	d003      	beq.n	8008352 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fbf2 	bl	8008b34 <UART_Receive_IT>
      return;
 8008350:	e25b      	b.n	800880a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008352:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008356:	2b00      	cmp	r3, #0
 8008358:	f000 80de 	beq.w	8008518 <HAL_UART_IRQHandler+0x22c>
 800835c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008360:	f003 0301 	and.w	r3, r3, #1
 8008364:	2b00      	cmp	r3, #0
 8008366:	d106      	bne.n	8008376 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800836c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 80d1 	beq.w	8008518 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00b      	beq.n	800839a <HAL_UART_IRQHandler+0xae>
 8008382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800838a:	2b00      	cmp	r3, #0
 800838c:	d005      	beq.n	800839a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008392:	f043 0201 	orr.w	r2, r3, #1
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800839a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800839e:	f003 0304 	and.w	r3, r3, #4
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00b      	beq.n	80083be <HAL_UART_IRQHandler+0xd2>
 80083a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083aa:	f003 0301 	and.w	r3, r3, #1
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d005      	beq.n	80083be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083b6:	f043 0202 	orr.w	r2, r3, #2
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80083be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083c2:	f003 0302 	and.w	r3, r3, #2
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00b      	beq.n	80083e2 <HAL_UART_IRQHandler+0xf6>
 80083ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d005      	beq.n	80083e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083da:	f043 0204 	orr.w	r2, r3, #4
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80083e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083e6:	f003 0308 	and.w	r3, r3, #8
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d011      	beq.n	8008412 <HAL_UART_IRQHandler+0x126>
 80083ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083f2:	f003 0320 	and.w	r3, r3, #32
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d105      	bne.n	8008406 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80083fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b00      	cmp	r3, #0
 8008404:	d005      	beq.n	8008412 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800840a:	f043 0208 	orr.w	r2, r3, #8
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008416:	2b00      	cmp	r3, #0
 8008418:	f000 81f2 	beq.w	8008800 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800841c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008420:	f003 0320 	and.w	r3, r3, #32
 8008424:	2b00      	cmp	r3, #0
 8008426:	d008      	beq.n	800843a <HAL_UART_IRQHandler+0x14e>
 8008428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800842c:	f003 0320 	and.w	r3, r3, #32
 8008430:	2b00      	cmp	r3, #0
 8008432:	d002      	beq.n	800843a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fb7d 	bl	8008b34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	695b      	ldr	r3, [r3, #20]
 8008440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008444:	2b40      	cmp	r3, #64	; 0x40
 8008446:	bf0c      	ite	eq
 8008448:	2301      	moveq	r3, #1
 800844a:	2300      	movne	r3, #0
 800844c:	b2db      	uxtb	r3, r3
 800844e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008456:	f003 0308 	and.w	r3, r3, #8
 800845a:	2b00      	cmp	r3, #0
 800845c:	d103      	bne.n	8008466 <HAL_UART_IRQHandler+0x17a>
 800845e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008462:	2b00      	cmp	r3, #0
 8008464:	d04f      	beq.n	8008506 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 fa85 	bl	8008976 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	695b      	ldr	r3, [r3, #20]
 8008472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008476:	2b40      	cmp	r3, #64	; 0x40
 8008478:	d141      	bne.n	80084fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	3314      	adds	r3, #20
 8008480:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008484:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008488:	e853 3f00 	ldrex	r3, [r3]
 800848c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008490:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008494:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008498:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	3314      	adds	r3, #20
 80084a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80084a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80084aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80084b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80084b6:	e841 2300 	strex	r3, r2, [r1]
 80084ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80084be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1d9      	bne.n	800847a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d013      	beq.n	80084f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d2:	4a7e      	ldr	r2, [pc, #504]	; (80086cc <HAL_UART_IRQHandler+0x3e0>)
 80084d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084da:	4618      	mov	r0, r3
 80084dc:	f7fa fcae 	bl	8002e3c <HAL_DMA_Abort_IT>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d016      	beq.n	8008514 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80084f0:	4610      	mov	r0, r2
 80084f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084f4:	e00e      	b.n	8008514 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f994 	bl	8008824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084fc:	e00a      	b.n	8008514 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f990 	bl	8008824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008504:	e006      	b.n	8008514 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f98c 	bl	8008824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008512:	e175      	b.n	8008800 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008514:	bf00      	nop
    return;
 8008516:	e173      	b.n	8008800 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851c:	2b01      	cmp	r3, #1
 800851e:	f040 814f 	bne.w	80087c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008526:	f003 0310 	and.w	r3, r3, #16
 800852a:	2b00      	cmp	r3, #0
 800852c:	f000 8148 	beq.w	80087c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008534:	f003 0310 	and.w	r3, r3, #16
 8008538:	2b00      	cmp	r3, #0
 800853a:	f000 8141 	beq.w	80087c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800853e:	2300      	movs	r3, #0
 8008540:	60bb      	str	r3, [r7, #8]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	60bb      	str	r3, [r7, #8]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	60bb      	str	r3, [r7, #8]
 8008552:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800855e:	2b40      	cmp	r3, #64	; 0x40
 8008560:	f040 80b6 	bne.w	80086d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008570:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008574:	2b00      	cmp	r3, #0
 8008576:	f000 8145 	beq.w	8008804 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800857e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008582:	429a      	cmp	r2, r3
 8008584:	f080 813e 	bcs.w	8008804 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800858e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008594:	69db      	ldr	r3, [r3, #28]
 8008596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800859a:	f000 8088 	beq.w	80086ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	330c      	adds	r3, #12
 80085a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085ac:	e853 3f00 	ldrex	r3, [r3]
 80085b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80085b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	330c      	adds	r3, #12
 80085c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80085ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80085ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80085d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80085da:	e841 2300 	strex	r3, r2, [r1]
 80085de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80085e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1d9      	bne.n	800859e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	3314      	adds	r3, #20
 80085f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085f4:	e853 3f00 	ldrex	r3, [r3]
 80085f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80085fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085fc:	f023 0301 	bic.w	r3, r3, #1
 8008600:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	3314      	adds	r3, #20
 800860a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800860e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008612:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008614:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008616:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800861a:	e841 2300 	strex	r3, r2, [r1]
 800861e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1e1      	bne.n	80085ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	3314      	adds	r3, #20
 800862c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008630:	e853 3f00 	ldrex	r3, [r3]
 8008634:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800863c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	3314      	adds	r3, #20
 8008646:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800864a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800864c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008650:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008652:	e841 2300 	strex	r3, r2, [r1]
 8008656:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1e3      	bne.n	8008626 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2220      	movs	r2, #32
 8008662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	330c      	adds	r3, #12
 8008672:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008676:	e853 3f00 	ldrex	r3, [r3]
 800867a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800867c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800867e:	f023 0310 	bic.w	r3, r3, #16
 8008682:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	330c      	adds	r3, #12
 800868c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008690:	65ba      	str	r2, [r7, #88]	; 0x58
 8008692:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008694:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008696:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008698:	e841 2300 	strex	r3, r2, [r1]
 800869c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800869e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d1e3      	bne.n	800866c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7fa fb57 	bl	8002d5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2202      	movs	r2, #2
 80086b2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086bc:	b29b      	uxth	r3, r3
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	4619      	mov	r1, r3
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 f8b7 	bl	8008838 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80086ca:	e09b      	b.n	8008804 <HAL_UART_IRQHandler+0x518>
 80086cc:	08008a3d 	.word	0x08008a3d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086d8:	b29b      	uxth	r3, r3
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f000 808e 	beq.w	8008808 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80086ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f000 8089 	beq.w	8008808 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	330c      	adds	r3, #12
 80086fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008700:	e853 3f00 	ldrex	r3, [r3]
 8008704:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008708:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800870c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	330c      	adds	r3, #12
 8008716:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800871a:	647a      	str	r2, [r7, #68]	; 0x44
 800871c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008720:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008722:	e841 2300 	strex	r3, r2, [r1]
 8008726:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1e3      	bne.n	80086f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	3314      	adds	r3, #20
 8008734:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008738:	e853 3f00 	ldrex	r3, [r3]
 800873c:	623b      	str	r3, [r7, #32]
   return(result);
 800873e:	6a3b      	ldr	r3, [r7, #32]
 8008740:	f023 0301 	bic.w	r3, r3, #1
 8008744:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	3314      	adds	r3, #20
 800874e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008752:	633a      	str	r2, [r7, #48]	; 0x30
 8008754:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800875a:	e841 2300 	strex	r3, r2, [r1]
 800875e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1e3      	bne.n	800872e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2220      	movs	r2, #32
 800876a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	330c      	adds	r3, #12
 800877a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	60fb      	str	r3, [r7, #12]
   return(result);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f023 0310 	bic.w	r3, r3, #16
 800878a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	330c      	adds	r3, #12
 8008794:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008798:	61fa      	str	r2, [r7, #28]
 800879a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879c:	69b9      	ldr	r1, [r7, #24]
 800879e:	69fa      	ldr	r2, [r7, #28]
 80087a0:	e841 2300 	strex	r3, r2, [r1]
 80087a4:	617b      	str	r3, [r7, #20]
   return(result);
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1e3      	bne.n	8008774 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2202      	movs	r2, #2
 80087b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80087b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80087b6:	4619      	mov	r1, r3
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f83d 	bl	8008838 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80087be:	e023      	b.n	8008808 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80087c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d009      	beq.n	80087e0 <HAL_UART_IRQHandler+0x4f4>
 80087cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d003      	beq.n	80087e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 f943 	bl	8008a64 <UART_Transmit_IT>
    return;
 80087de:	e014      	b.n	800880a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80087e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00e      	beq.n	800880a <HAL_UART_IRQHandler+0x51e>
 80087ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d008      	beq.n	800880a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f983 	bl	8008b04 <UART_EndTransmit_IT>
    return;
 80087fe:	e004      	b.n	800880a <HAL_UART_IRQHandler+0x51e>
    return;
 8008800:	bf00      	nop
 8008802:	e002      	b.n	800880a <HAL_UART_IRQHandler+0x51e>
      return;
 8008804:	bf00      	nop
 8008806:	e000      	b.n	800880a <HAL_UART_IRQHandler+0x51e>
      return;
 8008808:	bf00      	nop
  }
}
 800880a:	37e8      	adds	r7, #232	; 0xe8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008818:	bf00      	nop
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	460b      	mov	r3, r1
 8008842:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008844:	bf00      	nop
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	603b      	str	r3, [r7, #0]
 800885c:	4613      	mov	r3, r2
 800885e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008860:	e03b      	b.n	80088da <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008862:	6a3b      	ldr	r3, [r7, #32]
 8008864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008868:	d037      	beq.n	80088da <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800886a:	f7fa f887 	bl	800297c <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	6a3a      	ldr	r2, [r7, #32]
 8008876:	429a      	cmp	r2, r3
 8008878:	d302      	bcc.n	8008880 <UART_WaitOnFlagUntilTimeout+0x30>
 800887a:	6a3b      	ldr	r3, [r7, #32]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d101      	bne.n	8008884 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008880:	2303      	movs	r3, #3
 8008882:	e03a      	b.n	80088fa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	f003 0304 	and.w	r3, r3, #4
 800888e:	2b00      	cmp	r3, #0
 8008890:	d023      	beq.n	80088da <UART_WaitOnFlagUntilTimeout+0x8a>
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	2b80      	cmp	r3, #128	; 0x80
 8008896:	d020      	beq.n	80088da <UART_WaitOnFlagUntilTimeout+0x8a>
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	2b40      	cmp	r3, #64	; 0x40
 800889c:	d01d      	beq.n	80088da <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 0308 	and.w	r3, r3, #8
 80088a8:	2b08      	cmp	r3, #8
 80088aa:	d116      	bne.n	80088da <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80088ac:	2300      	movs	r3, #0
 80088ae:	617b      	str	r3, [r7, #20]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	617b      	str	r3, [r7, #20]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	617b      	str	r3, [r7, #20]
 80088c0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f000 f857 	bl	8008976 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2208      	movs	r2, #8
 80088cc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e00f      	b.n	80088fa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	4013      	ands	r3, r2
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	bf0c      	ite	eq
 80088ea:	2301      	moveq	r3, #1
 80088ec:	2300      	movne	r3, #0
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	461a      	mov	r2, r3
 80088f2:	79fb      	ldrb	r3, [r7, #7]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d0b4      	beq.n	8008862 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3718      	adds	r7, #24
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008902:	b480      	push	{r7}
 8008904:	b085      	sub	sp, #20
 8008906:	af00      	add	r7, sp, #0
 8008908:	60f8      	str	r0, [r7, #12]
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	4613      	mov	r3, r2
 800890e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	88fa      	ldrh	r2, [r7, #6]
 800891a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	88fa      	ldrh	r2, [r7, #6]
 8008920:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2222      	movs	r2, #34	; 0x22
 800892c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d007      	beq.n	8008948 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68da      	ldr	r2, [r3, #12]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008946:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	695a      	ldr	r2, [r3, #20]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f042 0201 	orr.w	r2, r2, #1
 8008956:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	68da      	ldr	r2, [r3, #12]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f042 0220 	orr.w	r2, r2, #32
 8008966:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3714      	adds	r7, #20
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008976:	b480      	push	{r7}
 8008978:	b095      	sub	sp, #84	; 0x54
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	330c      	adds	r3, #12
 8008984:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008988:	e853 3f00 	ldrex	r3, [r3]
 800898c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800898e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008990:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008994:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	330c      	adds	r3, #12
 800899c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800899e:	643a      	str	r2, [r7, #64]	; 0x40
 80089a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089a6:	e841 2300 	strex	r3, r2, [r1]
 80089aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1e5      	bne.n	800897e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	3314      	adds	r3, #20
 80089b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ba:	6a3b      	ldr	r3, [r7, #32]
 80089bc:	e853 3f00 	ldrex	r3, [r3]
 80089c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	f023 0301 	bic.w	r3, r3, #1
 80089c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	3314      	adds	r3, #20
 80089d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089da:	e841 2300 	strex	r3, r2, [r1]
 80089de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1e5      	bne.n	80089b2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d119      	bne.n	8008a22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	330c      	adds	r3, #12
 80089f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	e853 3f00 	ldrex	r3, [r3]
 80089fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	f023 0310 	bic.w	r3, r3, #16
 8008a04:	647b      	str	r3, [r7, #68]	; 0x44
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	330c      	adds	r3, #12
 8008a0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a0e:	61ba      	str	r2, [r7, #24]
 8008a10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a12:	6979      	ldr	r1, [r7, #20]
 8008a14:	69ba      	ldr	r2, [r7, #24]
 8008a16:	e841 2300 	strex	r3, r2, [r1]
 8008a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1e5      	bne.n	80089ee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2220      	movs	r2, #32
 8008a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008a30:	bf00      	nop
 8008a32:	3754      	adds	r7, #84	; 0x54
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2200      	movs	r2, #0
 8008a54:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f7ff fee4 	bl	8008824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a5c:	bf00      	nop
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b21      	cmp	r3, #33	; 0x21
 8008a76:	d13e      	bne.n	8008af6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a80:	d114      	bne.n	8008aac <UART_Transmit_IT+0x48>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d110      	bne.n	8008aac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a1b      	ldr	r3, [r3, #32]
 8008a8e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	881b      	ldrh	r3, [r3, #0]
 8008a94:	461a      	mov	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a9e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6a1b      	ldr	r3, [r3, #32]
 8008aa4:	1c9a      	adds	r2, r3, #2
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	621a      	str	r2, [r3, #32]
 8008aaa:	e008      	b.n	8008abe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6a1b      	ldr	r3, [r3, #32]
 8008ab0:	1c59      	adds	r1, r3, #1
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	6211      	str	r1, [r2, #32]
 8008ab6:	781a      	ldrb	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	4619      	mov	r1, r3
 8008acc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10f      	bne.n	8008af2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68da      	ldr	r2, [r3, #12]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ae0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68da      	ldr	r2, [r3, #12]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008af0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008af2:	2300      	movs	r3, #0
 8008af4:	e000      	b.n	8008af8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008af6:	2302      	movs	r3, #2
  }
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68da      	ldr	r2, [r3, #12]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2220      	movs	r2, #32
 8008b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f7ff fe73 	bl	8008810 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b08c      	sub	sp, #48	; 0x30
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	2b22      	cmp	r3, #34	; 0x22
 8008b46:	f040 80ae 	bne.w	8008ca6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b52:	d117      	bne.n	8008b84 <UART_Receive_IT+0x50>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d113      	bne.n	8008b84 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b64:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7c:	1c9a      	adds	r2, r3, #2
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	629a      	str	r2, [r3, #40]	; 0x28
 8008b82:	e026      	b.n	8008bd2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b96:	d007      	beq.n	8008ba8 <UART_Receive_IT+0x74>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d10a      	bne.n	8008bb6 <UART_Receive_IT+0x82>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d106      	bne.n	8008bb6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	b2da      	uxtb	r2, r3
 8008bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb2:	701a      	strb	r2, [r3, #0]
 8008bb4:	e008      	b.n	8008bc8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bcc:	1c5a      	adds	r2, r3, #1
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	4619      	mov	r1, r3
 8008be0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d15d      	bne.n	8008ca2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68da      	ldr	r2, [r3, #12]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f022 0220 	bic.w	r2, r2, #32
 8008bf4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	68da      	ldr	r2, [r3, #12]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	695a      	ldr	r2, [r3, #20]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f022 0201 	bic.w	r2, r2, #1
 8008c14:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2220      	movs	r2, #32
 8008c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d135      	bne.n	8008c98 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	330c      	adds	r3, #12
 8008c38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	e853 3f00 	ldrex	r3, [r3]
 8008c40:	613b      	str	r3, [r7, #16]
   return(result);
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	f023 0310 	bic.w	r3, r3, #16
 8008c48:	627b      	str	r3, [r7, #36]	; 0x24
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	330c      	adds	r3, #12
 8008c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c52:	623a      	str	r2, [r7, #32]
 8008c54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c56:	69f9      	ldr	r1, [r7, #28]
 8008c58:	6a3a      	ldr	r2, [r7, #32]
 8008c5a:	e841 2300 	strex	r3, r2, [r1]
 8008c5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1e5      	bne.n	8008c32 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 0310 	and.w	r3, r3, #16
 8008c70:	2b10      	cmp	r3, #16
 8008c72:	d10a      	bne.n	8008c8a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c74:	2300      	movs	r3, #0
 8008c76:	60fb      	str	r3, [r7, #12]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	60fb      	str	r3, [r7, #12]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	60fb      	str	r3, [r7, #12]
 8008c88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7ff fdd1 	bl	8008838 <HAL_UARTEx_RxEventCallback>
 8008c96:	e002      	b.n	8008c9e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f7f8 fb5d 	bl	8001358 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	e002      	b.n	8008ca8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	e000      	b.n	8008ca8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008ca6:	2302      	movs	r3, #2
  }
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3730      	adds	r7, #48	; 0x30
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cb4:	b0c0      	sub	sp, #256	; 0x100
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ccc:	68d9      	ldr	r1, [r3, #12]
 8008cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	ea40 0301 	orr.w	r3, r0, r1
 8008cd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cde:	689a      	ldr	r2, [r3, #8]
 8008ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	431a      	orrs	r2, r3
 8008ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cec:	695b      	ldr	r3, [r3, #20]
 8008cee:	431a      	orrs	r2, r3
 8008cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cf4:	69db      	ldr	r3, [r3, #28]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008d08:	f021 010c 	bic.w	r1, r1, #12
 8008d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008d16:	430b      	orrs	r3, r1
 8008d18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	695b      	ldr	r3, [r3, #20]
 8008d22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d2a:	6999      	ldr	r1, [r3, #24]
 8008d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	ea40 0301 	orr.w	r3, r0, r1
 8008d36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	4b8f      	ldr	r3, [pc, #572]	; (8008f7c <UART_SetConfig+0x2cc>)
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d005      	beq.n	8008d50 <UART_SetConfig+0xa0>
 8008d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	4b8d      	ldr	r3, [pc, #564]	; (8008f80 <UART_SetConfig+0x2d0>)
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d104      	bne.n	8008d5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d50:	f7fe fa4a 	bl	80071e8 <HAL_RCC_GetPCLK2Freq>
 8008d54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008d58:	e003      	b.n	8008d62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d5a:	f7fe fa31 	bl	80071c0 <HAL_RCC_GetPCLK1Freq>
 8008d5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d6c:	f040 810c 	bne.w	8008f88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d74:	2200      	movs	r2, #0
 8008d76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008d7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008d82:	4622      	mov	r2, r4
 8008d84:	462b      	mov	r3, r5
 8008d86:	1891      	adds	r1, r2, r2
 8008d88:	65b9      	str	r1, [r7, #88]	; 0x58
 8008d8a:	415b      	adcs	r3, r3
 8008d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008d92:	4621      	mov	r1, r4
 8008d94:	eb12 0801 	adds.w	r8, r2, r1
 8008d98:	4629      	mov	r1, r5
 8008d9a:	eb43 0901 	adc.w	r9, r3, r1
 8008d9e:	f04f 0200 	mov.w	r2, #0
 8008da2:	f04f 0300 	mov.w	r3, #0
 8008da6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008daa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008dae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008db2:	4690      	mov	r8, r2
 8008db4:	4699      	mov	r9, r3
 8008db6:	4623      	mov	r3, r4
 8008db8:	eb18 0303 	adds.w	r3, r8, r3
 8008dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008dc0:	462b      	mov	r3, r5
 8008dc2:	eb49 0303 	adc.w	r3, r9, r3
 8008dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008dd6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008dda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008dde:	460b      	mov	r3, r1
 8008de0:	18db      	adds	r3, r3, r3
 8008de2:	653b      	str	r3, [r7, #80]	; 0x50
 8008de4:	4613      	mov	r3, r2
 8008de6:	eb42 0303 	adc.w	r3, r2, r3
 8008dea:	657b      	str	r3, [r7, #84]	; 0x54
 8008dec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008df0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008df4:	f7f7 ff48 	bl	8000c88 <__aeabi_uldivmod>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	4b61      	ldr	r3, [pc, #388]	; (8008f84 <UART_SetConfig+0x2d4>)
 8008dfe:	fba3 2302 	umull	r2, r3, r3, r2
 8008e02:	095b      	lsrs	r3, r3, #5
 8008e04:	011c      	lsls	r4, r3, #4
 8008e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008e14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008e18:	4642      	mov	r2, r8
 8008e1a:	464b      	mov	r3, r9
 8008e1c:	1891      	adds	r1, r2, r2
 8008e1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008e20:	415b      	adcs	r3, r3
 8008e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008e28:	4641      	mov	r1, r8
 8008e2a:	eb12 0a01 	adds.w	sl, r2, r1
 8008e2e:	4649      	mov	r1, r9
 8008e30:	eb43 0b01 	adc.w	fp, r3, r1
 8008e34:	f04f 0200 	mov.w	r2, #0
 8008e38:	f04f 0300 	mov.w	r3, #0
 8008e3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008e40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008e44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e48:	4692      	mov	sl, r2
 8008e4a:	469b      	mov	fp, r3
 8008e4c:	4643      	mov	r3, r8
 8008e4e:	eb1a 0303 	adds.w	r3, sl, r3
 8008e52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e56:	464b      	mov	r3, r9
 8008e58:	eb4b 0303 	adc.w	r3, fp, r3
 8008e5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008e70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008e74:	460b      	mov	r3, r1
 8008e76:	18db      	adds	r3, r3, r3
 8008e78:	643b      	str	r3, [r7, #64]	; 0x40
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	eb42 0303 	adc.w	r3, r2, r3
 8008e80:	647b      	str	r3, [r7, #68]	; 0x44
 8008e82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008e86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008e8a:	f7f7 fefd 	bl	8000c88 <__aeabi_uldivmod>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	460b      	mov	r3, r1
 8008e92:	4611      	mov	r1, r2
 8008e94:	4b3b      	ldr	r3, [pc, #236]	; (8008f84 <UART_SetConfig+0x2d4>)
 8008e96:	fba3 2301 	umull	r2, r3, r3, r1
 8008e9a:	095b      	lsrs	r3, r3, #5
 8008e9c:	2264      	movs	r2, #100	; 0x64
 8008e9e:	fb02 f303 	mul.w	r3, r2, r3
 8008ea2:	1acb      	subs	r3, r1, r3
 8008ea4:	00db      	lsls	r3, r3, #3
 8008ea6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008eaa:	4b36      	ldr	r3, [pc, #216]	; (8008f84 <UART_SetConfig+0x2d4>)
 8008eac:	fba3 2302 	umull	r2, r3, r3, r2
 8008eb0:	095b      	lsrs	r3, r3, #5
 8008eb2:	005b      	lsls	r3, r3, #1
 8008eb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008eb8:	441c      	add	r4, r3
 8008eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ec4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008ec8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008ecc:	4642      	mov	r2, r8
 8008ece:	464b      	mov	r3, r9
 8008ed0:	1891      	adds	r1, r2, r2
 8008ed2:	63b9      	str	r1, [r7, #56]	; 0x38
 8008ed4:	415b      	adcs	r3, r3
 8008ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ed8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008edc:	4641      	mov	r1, r8
 8008ede:	1851      	adds	r1, r2, r1
 8008ee0:	6339      	str	r1, [r7, #48]	; 0x30
 8008ee2:	4649      	mov	r1, r9
 8008ee4:	414b      	adcs	r3, r1
 8008ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ee8:	f04f 0200 	mov.w	r2, #0
 8008eec:	f04f 0300 	mov.w	r3, #0
 8008ef0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008ef4:	4659      	mov	r1, fp
 8008ef6:	00cb      	lsls	r3, r1, #3
 8008ef8:	4651      	mov	r1, sl
 8008efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008efe:	4651      	mov	r1, sl
 8008f00:	00ca      	lsls	r2, r1, #3
 8008f02:	4610      	mov	r0, r2
 8008f04:	4619      	mov	r1, r3
 8008f06:	4603      	mov	r3, r0
 8008f08:	4642      	mov	r2, r8
 8008f0a:	189b      	adds	r3, r3, r2
 8008f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f10:	464b      	mov	r3, r9
 8008f12:	460a      	mov	r2, r1
 8008f14:	eb42 0303 	adc.w	r3, r2, r3
 8008f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008f28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008f2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008f30:	460b      	mov	r3, r1
 8008f32:	18db      	adds	r3, r3, r3
 8008f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f36:	4613      	mov	r3, r2
 8008f38:	eb42 0303 	adc.w	r3, r2, r3
 8008f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008f46:	f7f7 fe9f 	bl	8000c88 <__aeabi_uldivmod>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4b0d      	ldr	r3, [pc, #52]	; (8008f84 <UART_SetConfig+0x2d4>)
 8008f50:	fba3 1302 	umull	r1, r3, r3, r2
 8008f54:	095b      	lsrs	r3, r3, #5
 8008f56:	2164      	movs	r1, #100	; 0x64
 8008f58:	fb01 f303 	mul.w	r3, r1, r3
 8008f5c:	1ad3      	subs	r3, r2, r3
 8008f5e:	00db      	lsls	r3, r3, #3
 8008f60:	3332      	adds	r3, #50	; 0x32
 8008f62:	4a08      	ldr	r2, [pc, #32]	; (8008f84 <UART_SetConfig+0x2d4>)
 8008f64:	fba2 2303 	umull	r2, r3, r2, r3
 8008f68:	095b      	lsrs	r3, r3, #5
 8008f6a:	f003 0207 	and.w	r2, r3, #7
 8008f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4422      	add	r2, r4
 8008f76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008f78:	e106      	b.n	8009188 <UART_SetConfig+0x4d8>
 8008f7a:	bf00      	nop
 8008f7c:	40011000 	.word	0x40011000
 8008f80:	40011400 	.word	0x40011400
 8008f84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008f92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008f96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008f9a:	4642      	mov	r2, r8
 8008f9c:	464b      	mov	r3, r9
 8008f9e:	1891      	adds	r1, r2, r2
 8008fa0:	6239      	str	r1, [r7, #32]
 8008fa2:	415b      	adcs	r3, r3
 8008fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8008fa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008faa:	4641      	mov	r1, r8
 8008fac:	1854      	adds	r4, r2, r1
 8008fae:	4649      	mov	r1, r9
 8008fb0:	eb43 0501 	adc.w	r5, r3, r1
 8008fb4:	f04f 0200 	mov.w	r2, #0
 8008fb8:	f04f 0300 	mov.w	r3, #0
 8008fbc:	00eb      	lsls	r3, r5, #3
 8008fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008fc2:	00e2      	lsls	r2, r4, #3
 8008fc4:	4614      	mov	r4, r2
 8008fc6:	461d      	mov	r5, r3
 8008fc8:	4643      	mov	r3, r8
 8008fca:	18e3      	adds	r3, r4, r3
 8008fcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008fd0:	464b      	mov	r3, r9
 8008fd2:	eb45 0303 	adc.w	r3, r5, r3
 8008fd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008fe6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008fea:	f04f 0200 	mov.w	r2, #0
 8008fee:	f04f 0300 	mov.w	r3, #0
 8008ff2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008ff6:	4629      	mov	r1, r5
 8008ff8:	008b      	lsls	r3, r1, #2
 8008ffa:	4621      	mov	r1, r4
 8008ffc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009000:	4621      	mov	r1, r4
 8009002:	008a      	lsls	r2, r1, #2
 8009004:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009008:	f7f7 fe3e 	bl	8000c88 <__aeabi_uldivmod>
 800900c:	4602      	mov	r2, r0
 800900e:	460b      	mov	r3, r1
 8009010:	4b60      	ldr	r3, [pc, #384]	; (8009194 <UART_SetConfig+0x4e4>)
 8009012:	fba3 2302 	umull	r2, r3, r3, r2
 8009016:	095b      	lsrs	r3, r3, #5
 8009018:	011c      	lsls	r4, r3, #4
 800901a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800901e:	2200      	movs	r2, #0
 8009020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009024:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009028:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800902c:	4642      	mov	r2, r8
 800902e:	464b      	mov	r3, r9
 8009030:	1891      	adds	r1, r2, r2
 8009032:	61b9      	str	r1, [r7, #24]
 8009034:	415b      	adcs	r3, r3
 8009036:	61fb      	str	r3, [r7, #28]
 8009038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800903c:	4641      	mov	r1, r8
 800903e:	1851      	adds	r1, r2, r1
 8009040:	6139      	str	r1, [r7, #16]
 8009042:	4649      	mov	r1, r9
 8009044:	414b      	adcs	r3, r1
 8009046:	617b      	str	r3, [r7, #20]
 8009048:	f04f 0200 	mov.w	r2, #0
 800904c:	f04f 0300 	mov.w	r3, #0
 8009050:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009054:	4659      	mov	r1, fp
 8009056:	00cb      	lsls	r3, r1, #3
 8009058:	4651      	mov	r1, sl
 800905a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800905e:	4651      	mov	r1, sl
 8009060:	00ca      	lsls	r2, r1, #3
 8009062:	4610      	mov	r0, r2
 8009064:	4619      	mov	r1, r3
 8009066:	4603      	mov	r3, r0
 8009068:	4642      	mov	r2, r8
 800906a:	189b      	adds	r3, r3, r2
 800906c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009070:	464b      	mov	r3, r9
 8009072:	460a      	mov	r2, r1
 8009074:	eb42 0303 	adc.w	r3, r2, r3
 8009078:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800907c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	67bb      	str	r3, [r7, #120]	; 0x78
 8009086:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009088:	f04f 0200 	mov.w	r2, #0
 800908c:	f04f 0300 	mov.w	r3, #0
 8009090:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009094:	4649      	mov	r1, r9
 8009096:	008b      	lsls	r3, r1, #2
 8009098:	4641      	mov	r1, r8
 800909a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800909e:	4641      	mov	r1, r8
 80090a0:	008a      	lsls	r2, r1, #2
 80090a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80090a6:	f7f7 fdef 	bl	8000c88 <__aeabi_uldivmod>
 80090aa:	4602      	mov	r2, r0
 80090ac:	460b      	mov	r3, r1
 80090ae:	4611      	mov	r1, r2
 80090b0:	4b38      	ldr	r3, [pc, #224]	; (8009194 <UART_SetConfig+0x4e4>)
 80090b2:	fba3 2301 	umull	r2, r3, r3, r1
 80090b6:	095b      	lsrs	r3, r3, #5
 80090b8:	2264      	movs	r2, #100	; 0x64
 80090ba:	fb02 f303 	mul.w	r3, r2, r3
 80090be:	1acb      	subs	r3, r1, r3
 80090c0:	011b      	lsls	r3, r3, #4
 80090c2:	3332      	adds	r3, #50	; 0x32
 80090c4:	4a33      	ldr	r2, [pc, #204]	; (8009194 <UART_SetConfig+0x4e4>)
 80090c6:	fba2 2303 	umull	r2, r3, r2, r3
 80090ca:	095b      	lsrs	r3, r3, #5
 80090cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090d0:	441c      	add	r4, r3
 80090d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090d6:	2200      	movs	r2, #0
 80090d8:	673b      	str	r3, [r7, #112]	; 0x70
 80090da:	677a      	str	r2, [r7, #116]	; 0x74
 80090dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80090e0:	4642      	mov	r2, r8
 80090e2:	464b      	mov	r3, r9
 80090e4:	1891      	adds	r1, r2, r2
 80090e6:	60b9      	str	r1, [r7, #8]
 80090e8:	415b      	adcs	r3, r3
 80090ea:	60fb      	str	r3, [r7, #12]
 80090ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80090f0:	4641      	mov	r1, r8
 80090f2:	1851      	adds	r1, r2, r1
 80090f4:	6039      	str	r1, [r7, #0]
 80090f6:	4649      	mov	r1, r9
 80090f8:	414b      	adcs	r3, r1
 80090fa:	607b      	str	r3, [r7, #4]
 80090fc:	f04f 0200 	mov.w	r2, #0
 8009100:	f04f 0300 	mov.w	r3, #0
 8009104:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009108:	4659      	mov	r1, fp
 800910a:	00cb      	lsls	r3, r1, #3
 800910c:	4651      	mov	r1, sl
 800910e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009112:	4651      	mov	r1, sl
 8009114:	00ca      	lsls	r2, r1, #3
 8009116:	4610      	mov	r0, r2
 8009118:	4619      	mov	r1, r3
 800911a:	4603      	mov	r3, r0
 800911c:	4642      	mov	r2, r8
 800911e:	189b      	adds	r3, r3, r2
 8009120:	66bb      	str	r3, [r7, #104]	; 0x68
 8009122:	464b      	mov	r3, r9
 8009124:	460a      	mov	r2, r1
 8009126:	eb42 0303 	adc.w	r3, r2, r3
 800912a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800912c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	663b      	str	r3, [r7, #96]	; 0x60
 8009136:	667a      	str	r2, [r7, #100]	; 0x64
 8009138:	f04f 0200 	mov.w	r2, #0
 800913c:	f04f 0300 	mov.w	r3, #0
 8009140:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009144:	4649      	mov	r1, r9
 8009146:	008b      	lsls	r3, r1, #2
 8009148:	4641      	mov	r1, r8
 800914a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800914e:	4641      	mov	r1, r8
 8009150:	008a      	lsls	r2, r1, #2
 8009152:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009156:	f7f7 fd97 	bl	8000c88 <__aeabi_uldivmod>
 800915a:	4602      	mov	r2, r0
 800915c:	460b      	mov	r3, r1
 800915e:	4b0d      	ldr	r3, [pc, #52]	; (8009194 <UART_SetConfig+0x4e4>)
 8009160:	fba3 1302 	umull	r1, r3, r3, r2
 8009164:	095b      	lsrs	r3, r3, #5
 8009166:	2164      	movs	r1, #100	; 0x64
 8009168:	fb01 f303 	mul.w	r3, r1, r3
 800916c:	1ad3      	subs	r3, r2, r3
 800916e:	011b      	lsls	r3, r3, #4
 8009170:	3332      	adds	r3, #50	; 0x32
 8009172:	4a08      	ldr	r2, [pc, #32]	; (8009194 <UART_SetConfig+0x4e4>)
 8009174:	fba2 2303 	umull	r2, r3, r2, r3
 8009178:	095b      	lsrs	r3, r3, #5
 800917a:	f003 020f 	and.w	r2, r3, #15
 800917e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4422      	add	r2, r4
 8009186:	609a      	str	r2, [r3, #8]
}
 8009188:	bf00      	nop
 800918a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800918e:	46bd      	mov	sp, r7
 8009190:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009194:	51eb851f 	.word	0x51eb851f

08009198 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009198:	b084      	sub	sp, #16
 800919a:	b580      	push	{r7, lr}
 800919c:	b084      	sub	sp, #16
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
 80091a2:	f107 001c 	add.w	r0, r7, #28
 80091a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80091aa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d123      	bne.n	80091fa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80091c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80091da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d105      	bne.n	80091ee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 f9dc 	bl	80095ac <USB_CoreReset>
 80091f4:	4603      	mov	r3, r0
 80091f6:	73fb      	strb	r3, [r7, #15]
 80091f8:	e01b      	b.n	8009232 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 f9d0 	bl	80095ac <USB_CoreReset>
 800920c:	4603      	mov	r3, r0
 800920e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009210:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009214:	2b00      	cmp	r3, #0
 8009216:	d106      	bne.n	8009226 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	639a      	str	r2, [r3, #56]	; 0x38
 8009224:	e005      	b.n	8009232 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800922a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009232:	7fbb      	ldrb	r3, [r7, #30]
 8009234:	2b01      	cmp	r3, #1
 8009236:	d10b      	bne.n	8009250 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	f043 0206 	orr.w	r2, r3, #6
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	f043 0220 	orr.w	r2, r3, #32
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009250:	7bfb      	ldrb	r3, [r7, #15]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800925c:	b004      	add	sp, #16
 800925e:	4770      	bx	lr

08009260 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	f043 0201 	orr.w	r2, r3, #1
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	370c      	adds	r7, #12
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr

08009282 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009282:	b480      	push	{r7}
 8009284:	b083      	sub	sp, #12
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	f023 0201 	bic.w	r2, r3, #1
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80092b0:	2300      	movs	r3, #0
 80092b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d115      	bne.n	80092f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80092d2:	200a      	movs	r0, #10
 80092d4:	f7f9 fb5e 	bl	8002994 <HAL_Delay>
      ms += 10U;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	330a      	adds	r3, #10
 80092dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f956 	bl	8009590 <USB_GetMode>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d01e      	beq.n	8009328 <USB_SetCurrentMode+0x84>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2bc7      	cmp	r3, #199	; 0xc7
 80092ee:	d9f0      	bls.n	80092d2 <USB_SetCurrentMode+0x2e>
 80092f0:	e01a      	b.n	8009328 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80092f2:	78fb      	ldrb	r3, [r7, #3]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d115      	bne.n	8009324 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009304:	200a      	movs	r0, #10
 8009306:	f7f9 fb45 	bl	8002994 <HAL_Delay>
      ms += 10U;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	330a      	adds	r3, #10
 800930e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 f93d 	bl	8009590 <USB_GetMode>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d005      	beq.n	8009328 <USB_SetCurrentMode+0x84>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2bc7      	cmp	r3, #199	; 0xc7
 8009320:	d9f0      	bls.n	8009304 <USB_SetCurrentMode+0x60>
 8009322:	e001      	b.n	8009328 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e005      	b.n	8009334 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2bc8      	cmp	r3, #200	; 0xc8
 800932c:	d101      	bne.n	8009332 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	e000      	b.n	8009334 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3710      	adds	r7, #16
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009346:	2300      	movs	r3, #0
 8009348:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	3301      	adds	r3, #1
 800934e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009356:	d901      	bls.n	800935c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009358:	2303      	movs	r3, #3
 800935a:	e01b      	b.n	8009394 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	2b00      	cmp	r3, #0
 8009362:	daf2      	bge.n	800934a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009364:	2300      	movs	r3, #0
 8009366:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	019b      	lsls	r3, r3, #6
 800936c:	f043 0220 	orr.w	r2, r3, #32
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	3301      	adds	r3, #1
 8009378:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009380:	d901      	bls.n	8009386 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009382:	2303      	movs	r3, #3
 8009384:	e006      	b.n	8009394 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	f003 0320 	and.w	r3, r3, #32
 800938e:	2b20      	cmp	r3, #32
 8009390:	d0f0      	beq.n	8009374 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3714      	adds	r7, #20
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b085      	sub	sp, #20
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093a8:	2300      	movs	r3, #0
 80093aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	3301      	adds	r3, #1
 80093b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80093b8:	d901      	bls.n	80093be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e018      	b.n	80093f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	daf2      	bge.n	80093ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80093c6:	2300      	movs	r3, #0
 80093c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2210      	movs	r2, #16
 80093ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	3301      	adds	r3, #1
 80093d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80093dc:	d901      	bls.n	80093e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80093de:	2303      	movs	r3, #3
 80093e0:	e006      	b.n	80093f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	f003 0310 	and.w	r3, r3, #16
 80093ea:	2b10      	cmp	r3, #16
 80093ec:	d0f0      	beq.n	80093d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3714      	adds	r7, #20
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b089      	sub	sp, #36	; 0x24
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	4611      	mov	r1, r2
 8009408:	461a      	mov	r2, r3
 800940a:	460b      	mov	r3, r1
 800940c:	71fb      	strb	r3, [r7, #7]
 800940e:	4613      	mov	r3, r2
 8009410:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800941a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800941e:	2b00      	cmp	r3, #0
 8009420:	d123      	bne.n	800946a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009422:	88bb      	ldrh	r3, [r7, #4]
 8009424:	3303      	adds	r3, #3
 8009426:	089b      	lsrs	r3, r3, #2
 8009428:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800942a:	2300      	movs	r3, #0
 800942c:	61bb      	str	r3, [r7, #24]
 800942e:	e018      	b.n	8009462 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009430:	79fb      	ldrb	r3, [r7, #7]
 8009432:	031a      	lsls	r2, r3, #12
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	4413      	add	r3, r2
 8009438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800943c:	461a      	mov	r2, r3
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	3301      	adds	r3, #1
 8009448:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	3301      	adds	r3, #1
 800944e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	3301      	adds	r3, #1
 8009454:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	3301      	adds	r3, #1
 800945a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	3301      	adds	r3, #1
 8009460:	61bb      	str	r3, [r7, #24]
 8009462:	69ba      	ldr	r2, [r7, #24]
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	429a      	cmp	r2, r3
 8009468:	d3e2      	bcc.n	8009430 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	3724      	adds	r7, #36	; 0x24
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009478:	b480      	push	{r7}
 800947a:	b08b      	sub	sp, #44	; 0x2c
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	4613      	mov	r3, r2
 8009484:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800948e:	88fb      	ldrh	r3, [r7, #6]
 8009490:	089b      	lsrs	r3, r3, #2
 8009492:	b29b      	uxth	r3, r3
 8009494:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009496:	88fb      	ldrh	r3, [r7, #6]
 8009498:	f003 0303 	and.w	r3, r3, #3
 800949c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800949e:	2300      	movs	r3, #0
 80094a0:	623b      	str	r3, [r7, #32]
 80094a2:	e014      	b.n	80094ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80094a4:	69bb      	ldr	r3, [r7, #24]
 80094a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80094b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b2:	3301      	adds	r3, #1
 80094b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80094b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b8:	3301      	adds	r3, #1
 80094ba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80094bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094be:	3301      	adds	r3, #1
 80094c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80094c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c4:	3301      	adds	r3, #1
 80094c6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80094c8:	6a3b      	ldr	r3, [r7, #32]
 80094ca:	3301      	adds	r3, #1
 80094cc:	623b      	str	r3, [r7, #32]
 80094ce:	6a3a      	ldr	r2, [r7, #32]
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d3e6      	bcc.n	80094a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80094d6:	8bfb      	ldrh	r3, [r7, #30]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d01e      	beq.n	800951a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80094dc:	2300      	movs	r3, #0
 80094de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094e6:	461a      	mov	r2, r3
 80094e8:	f107 0310 	add.w	r3, r7, #16
 80094ec:	6812      	ldr	r2, [r2, #0]
 80094ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	6a3b      	ldr	r3, [r7, #32]
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	00db      	lsls	r3, r3, #3
 80094f8:	fa22 f303 	lsr.w	r3, r2, r3
 80094fc:	b2da      	uxtb	r2, r3
 80094fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009500:	701a      	strb	r2, [r3, #0]
      i++;
 8009502:	6a3b      	ldr	r3, [r7, #32]
 8009504:	3301      	adds	r3, #1
 8009506:	623b      	str	r3, [r7, #32]
      pDest++;
 8009508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950a:	3301      	adds	r3, #1
 800950c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800950e:	8bfb      	ldrh	r3, [r7, #30]
 8009510:	3b01      	subs	r3, #1
 8009512:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009514:	8bfb      	ldrh	r3, [r7, #30]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1ea      	bne.n	80094f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800951a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800951c:	4618      	mov	r0, r3
 800951e:	372c      	adds	r7, #44	; 0x2c
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009528:	b480      	push	{r7}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	695b      	ldr	r3, [r3, #20]
 8009534:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	699b      	ldr	r3, [r3, #24]
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	4013      	ands	r3, r2
 800953e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009540:	68fb      	ldr	r3, [r7, #12]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3714      	adds	r7, #20
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr

0800954e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800954e:	b480      	push	{r7}
 8009550:	b085      	sub	sp, #20
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
 8009556:	460b      	mov	r3, r1
 8009558:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800955e:	78fb      	ldrb	r3, [r7, #3]
 8009560:	015a      	lsls	r2, r3, #5
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	4413      	add	r3, r2
 8009566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800956e:	78fb      	ldrb	r3, [r7, #3]
 8009570:	015a      	lsls	r2, r3, #5
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	4413      	add	r3, r2
 8009576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	68ba      	ldr	r2, [r7, #8]
 800957e:	4013      	ands	r3, r2
 8009580:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009582:	68bb      	ldr	r3, [r7, #8]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	695b      	ldr	r3, [r3, #20]
 800959c:	f003 0301 	and.w	r3, r3, #1
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095b4:	2300      	movs	r3, #0
 80095b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	3301      	adds	r3, #1
 80095bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80095c4:	d901      	bls.n	80095ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	e01b      	b.n	8009602 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	daf2      	bge.n	80095b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80095d2:	2300      	movs	r3, #0
 80095d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	f043 0201 	orr.w	r2, r3, #1
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	3301      	adds	r3, #1
 80095e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80095ee:	d901      	bls.n	80095f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80095f0:	2303      	movs	r3, #3
 80095f2:	e006      	b.n	8009602 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	f003 0301 	and.w	r3, r3, #1
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d0f0      	beq.n	80095e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3714      	adds	r7, #20
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr
	...

08009610 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009610:	b084      	sub	sp, #16
 8009612:	b580      	push	{r7, lr}
 8009614:	b086      	sub	sp, #24
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
 800961a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800961e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009622:	2300      	movs	r3, #0
 8009624:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009630:	461a      	mov	r2, r3
 8009632:	2300      	movs	r3, #0
 8009634:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800963a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009646:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009652:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009662:	2b00      	cmp	r3, #0
 8009664:	d119      	bne.n	800969a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800966a:	2b01      	cmp	r3, #1
 800966c:	d10a      	bne.n	8009684 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800967c:	f043 0304 	orr.w	r3, r3, #4
 8009680:	6013      	str	r3, [r2, #0]
 8009682:	e014      	b.n	80096ae <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68fa      	ldr	r2, [r7, #12]
 800968e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009692:	f023 0304 	bic.w	r3, r3, #4
 8009696:	6013      	str	r3, [r2, #0]
 8009698:	e009      	b.n	80096ae <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80096a8:	f023 0304 	bic.w	r3, r3, #4
 80096ac:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80096ae:	2110      	movs	r1, #16
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f7ff fe43 	bl	800933c <USB_FlushTxFifo>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d001      	beq.n	80096c0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f7ff fe6d 	bl	80093a0 <USB_FlushRxFifo>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d001      	beq.n	80096d0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80096d0:	2300      	movs	r3, #0
 80096d2:	613b      	str	r3, [r7, #16]
 80096d4:	e015      	b.n	8009702 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	015a      	lsls	r2, r3, #5
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	4413      	add	r3, r2
 80096de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096e2:	461a      	mov	r2, r3
 80096e4:	f04f 33ff 	mov.w	r3, #4294967295
 80096e8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	015a      	lsls	r2, r3, #5
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	4413      	add	r3, r2
 80096f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096f6:	461a      	mov	r2, r3
 80096f8:	2300      	movs	r3, #0
 80096fa:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	3301      	adds	r3, #1
 8009700:	613b      	str	r3, [r7, #16]
 8009702:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009706:	461a      	mov	r2, r3
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	4293      	cmp	r3, r2
 800970c:	d3e3      	bcc.n	80096d6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f04f 32ff 	mov.w	r2, #4294967295
 800971a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4a18      	ldr	r2, [pc, #96]	; (8009780 <USB_HostInit+0x170>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d10b      	bne.n	800973c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800972a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4a15      	ldr	r2, [pc, #84]	; (8009784 <USB_HostInit+0x174>)
 8009730:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a14      	ldr	r2, [pc, #80]	; (8009788 <USB_HostInit+0x178>)
 8009736:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800973a:	e009      	b.n	8009750 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2280      	movs	r2, #128	; 0x80
 8009740:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a11      	ldr	r2, [pc, #68]	; (800978c <USB_HostInit+0x17c>)
 8009746:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4a11      	ldr	r2, [pc, #68]	; (8009790 <USB_HostInit+0x180>)
 800974c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009750:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009754:	2b00      	cmp	r3, #0
 8009756:	d105      	bne.n	8009764 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	699b      	ldr	r3, [r3, #24]
 800975c:	f043 0210 	orr.w	r2, r3, #16
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	699a      	ldr	r2, [r3, #24]
 8009768:	4b0a      	ldr	r3, [pc, #40]	; (8009794 <USB_HostInit+0x184>)
 800976a:	4313      	orrs	r3, r2
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009770:	7dfb      	ldrb	r3, [r7, #23]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3718      	adds	r7, #24
 8009776:	46bd      	mov	sp, r7
 8009778:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800977c:	b004      	add	sp, #16
 800977e:	4770      	bx	lr
 8009780:	40040000 	.word	0x40040000
 8009784:	01000200 	.word	0x01000200
 8009788:	00e00300 	.word	0x00e00300
 800978c:	00600080 	.word	0x00600080
 8009790:	004000e0 	.word	0x004000e0
 8009794:	a3200008 	.word	0xa3200008

08009798 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	460b      	mov	r3, r1
 80097a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80097b6:	f023 0303 	bic.w	r3, r3, #3
 80097ba:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	78fb      	ldrb	r3, [r7, #3]
 80097c6:	f003 0303 	and.w	r3, r3, #3
 80097ca:	68f9      	ldr	r1, [r7, #12]
 80097cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80097d0:	4313      	orrs	r3, r2
 80097d2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80097d4:	78fb      	ldrb	r3, [r7, #3]
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d107      	bne.n	80097ea <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097e0:	461a      	mov	r2, r3
 80097e2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80097e6:	6053      	str	r3, [r2, #4]
 80097e8:	e00c      	b.n	8009804 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80097ea:	78fb      	ldrb	r3, [r7, #3]
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d107      	bne.n	8009800 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097f6:	461a      	mov	r2, r3
 80097f8:	f241 7370 	movw	r3, #6000	; 0x1770
 80097fc:	6053      	str	r3, [r2, #4]
 80097fe:	e001      	b.n	8009804 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	e000      	b.n	8009806 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	3714      	adds	r7, #20
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr

08009812 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b084      	sub	sp, #16
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800981e:	2300      	movs	r3, #0
 8009820:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009832:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	68fa      	ldr	r2, [r7, #12]
 8009838:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800983c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009840:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009842:	2064      	movs	r0, #100	; 0x64
 8009844:	f7f9 f8a6 	bl	8002994 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009854:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009856:	200a      	movs	r0, #10
 8009858:	f7f9 f89c 	bl	8002994 <HAL_Delay>

  return HAL_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3710      	adds	r7, #16
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009866:	b480      	push	{r7}
 8009868:	b085      	sub	sp, #20
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
 800986e:	460b      	mov	r3, r1
 8009870:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009876:	2300      	movs	r3, #0
 8009878:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800988a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009892:	2b00      	cmp	r3, #0
 8009894:	d109      	bne.n	80098aa <USB_DriveVbus+0x44>
 8009896:	78fb      	ldrb	r3, [r7, #3]
 8009898:	2b01      	cmp	r3, #1
 800989a:	d106      	bne.n	80098aa <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80098a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80098a8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80098b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098b4:	d109      	bne.n	80098ca <USB_DriveVbus+0x64>
 80098b6:	78fb      	ldrb	r3, [r7, #3]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d106      	bne.n	80098ca <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	68fa      	ldr	r2, [r7, #12]
 80098c0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80098c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098c8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3714      	adds	r7, #20
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80098e4:	2300      	movs	r3, #0
 80098e6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	0c5b      	lsrs	r3, r3, #17
 80098f6:	f003 0303 	and.w	r3, r3, #3
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr

08009906 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8009906:	b480      	push	{r7}
 8009908:	b085      	sub	sp, #20
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	b29b      	uxth	r3, r3
}
 800991c:	4618      	mov	r0, r3
 800991e:	3714      	adds	r7, #20
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b088      	sub	sp, #32
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	4608      	mov	r0, r1
 8009932:	4611      	mov	r1, r2
 8009934:	461a      	mov	r2, r3
 8009936:	4603      	mov	r3, r0
 8009938:	70fb      	strb	r3, [r7, #3]
 800993a:	460b      	mov	r3, r1
 800993c:	70bb      	strb	r3, [r7, #2]
 800993e:	4613      	mov	r3, r2
 8009940:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009942:	2300      	movs	r3, #0
 8009944:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800994a:	78fb      	ldrb	r3, [r7, #3]
 800994c:	015a      	lsls	r2, r3, #5
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	4413      	add	r3, r2
 8009952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009956:	461a      	mov	r2, r3
 8009958:	f04f 33ff 	mov.w	r3, #4294967295
 800995c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800995e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009962:	2b03      	cmp	r3, #3
 8009964:	d87c      	bhi.n	8009a60 <USB_HC_Init+0x138>
 8009966:	a201      	add	r2, pc, #4	; (adr r2, 800996c <USB_HC_Init+0x44>)
 8009968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800996c:	0800997d 	.word	0x0800997d
 8009970:	08009a23 	.word	0x08009a23
 8009974:	0800997d 	.word	0x0800997d
 8009978:	080099e5 	.word	0x080099e5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800997c:	78fb      	ldrb	r3, [r7, #3]
 800997e:	015a      	lsls	r2, r3, #5
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	4413      	add	r3, r2
 8009984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009988:	461a      	mov	r2, r3
 800998a:	f240 439d 	movw	r3, #1181	; 0x49d
 800998e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009990:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009994:	2b00      	cmp	r3, #0
 8009996:	da10      	bge.n	80099ba <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009998:	78fb      	ldrb	r3, [r7, #3]
 800999a:	015a      	lsls	r2, r3, #5
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	4413      	add	r3, r2
 80099a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	78fa      	ldrb	r2, [r7, #3]
 80099a8:	0151      	lsls	r1, r2, #5
 80099aa:	693a      	ldr	r2, [r7, #16]
 80099ac:	440a      	add	r2, r1
 80099ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099b6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80099b8:	e055      	b.n	8009a66 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a6f      	ldr	r2, [pc, #444]	; (8009b7c <USB_HC_Init+0x254>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d151      	bne.n	8009a66 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80099c2:	78fb      	ldrb	r3, [r7, #3]
 80099c4:	015a      	lsls	r2, r3, #5
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	4413      	add	r3, r2
 80099ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	78fa      	ldrb	r2, [r7, #3]
 80099d2:	0151      	lsls	r1, r2, #5
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	440a      	add	r2, r1
 80099d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80099e0:	60d3      	str	r3, [r2, #12]
      break;
 80099e2:	e040      	b.n	8009a66 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80099e4:	78fb      	ldrb	r3, [r7, #3]
 80099e6:	015a      	lsls	r2, r3, #5
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	4413      	add	r3, r2
 80099ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099f0:	461a      	mov	r2, r3
 80099f2:	f240 639d 	movw	r3, #1693	; 0x69d
 80099f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80099f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	da34      	bge.n	8009a6a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009a00:	78fb      	ldrb	r3, [r7, #3]
 8009a02:	015a      	lsls	r2, r3, #5
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	4413      	add	r3, r2
 8009a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	78fa      	ldrb	r2, [r7, #3]
 8009a10:	0151      	lsls	r1, r2, #5
 8009a12:	693a      	ldr	r2, [r7, #16]
 8009a14:	440a      	add	r2, r1
 8009a16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a1e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009a20:	e023      	b.n	8009a6a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009a22:	78fb      	ldrb	r3, [r7, #3]
 8009a24:	015a      	lsls	r2, r3, #5
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	4413      	add	r3, r2
 8009a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a2e:	461a      	mov	r2, r3
 8009a30:	f240 2325 	movw	r3, #549	; 0x225
 8009a34:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009a36:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	da17      	bge.n	8009a6e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009a3e:	78fb      	ldrb	r3, [r7, #3]
 8009a40:	015a      	lsls	r2, r3, #5
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	4413      	add	r3, r2
 8009a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	78fa      	ldrb	r2, [r7, #3]
 8009a4e:	0151      	lsls	r1, r2, #5
 8009a50:	693a      	ldr	r2, [r7, #16]
 8009a52:	440a      	add	r2, r1
 8009a54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a58:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009a5c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009a5e:	e006      	b.n	8009a6e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8009a60:	2301      	movs	r3, #1
 8009a62:	77fb      	strb	r3, [r7, #31]
      break;
 8009a64:	e004      	b.n	8009a70 <USB_HC_Init+0x148>
      break;
 8009a66:	bf00      	nop
 8009a68:	e002      	b.n	8009a70 <USB_HC_Init+0x148>
      break;
 8009a6a:	bf00      	nop
 8009a6c:	e000      	b.n	8009a70 <USB_HC_Init+0x148>
      break;
 8009a6e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009a70:	78fb      	ldrb	r3, [r7, #3]
 8009a72:	015a      	lsls	r2, r3, #5
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	4413      	add	r3, r2
 8009a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	2300      	movs	r3, #0
 8009a80:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009a82:	78fb      	ldrb	r3, [r7, #3]
 8009a84:	015a      	lsls	r2, r3, #5
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	4413      	add	r3, r2
 8009a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	78fa      	ldrb	r2, [r7, #3]
 8009a92:	0151      	lsls	r1, r2, #5
 8009a94:	693a      	ldr	r2, [r7, #16]
 8009a96:	440a      	add	r2, r1
 8009a98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a9c:	f043 0302 	orr.w	r3, r3, #2
 8009aa0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009aa8:	699a      	ldr	r2, [r3, #24]
 8009aaa:	78fb      	ldrb	r3, [r7, #3]
 8009aac:	f003 030f 	and.w	r3, r3, #15
 8009ab0:	2101      	movs	r1, #1
 8009ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ab6:	6939      	ldr	r1, [r7, #16]
 8009ab8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009abc:	4313      	orrs	r3, r2
 8009abe:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	699b      	ldr	r3, [r3, #24]
 8009ac4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009acc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	da03      	bge.n	8009adc <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009ad4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ad8:	61bb      	str	r3, [r7, #24]
 8009ada:	e001      	b.n	8009ae0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8009adc:	2300      	movs	r3, #0
 8009ade:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f7ff fef9 	bl	80098d8 <USB_GetHostSpeed>
 8009ae6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009ae8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	d106      	bne.n	8009afe <USB_HC_Init+0x1d6>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2b02      	cmp	r3, #2
 8009af4:	d003      	beq.n	8009afe <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009af6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009afa:	617b      	str	r3, [r7, #20]
 8009afc:	e001      	b.n	8009b02 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009afe:	2300      	movs	r3, #0
 8009b00:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009b02:	787b      	ldrb	r3, [r7, #1]
 8009b04:	059b      	lsls	r3, r3, #22
 8009b06:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009b0a:	78bb      	ldrb	r3, [r7, #2]
 8009b0c:	02db      	lsls	r3, r3, #11
 8009b0e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009b12:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009b14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009b18:	049b      	lsls	r3, r3, #18
 8009b1a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009b1e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8009b20:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009b22:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009b26:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	431a      	orrs	r2, r3
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009b30:	78fa      	ldrb	r2, [r7, #3]
 8009b32:	0151      	lsls	r1, r2, #5
 8009b34:	693a      	ldr	r2, [r7, #16]
 8009b36:	440a      	add	r2, r1
 8009b38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009b3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009b40:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009b42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009b46:	2b03      	cmp	r3, #3
 8009b48:	d003      	beq.n	8009b52 <USB_HC_Init+0x22a>
 8009b4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d10f      	bne.n	8009b72 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009b52:	78fb      	ldrb	r3, [r7, #3]
 8009b54:	015a      	lsls	r2, r3, #5
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	4413      	add	r3, r2
 8009b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	78fa      	ldrb	r2, [r7, #3]
 8009b62:	0151      	lsls	r1, r2, #5
 8009b64:	693a      	ldr	r2, [r7, #16]
 8009b66:	440a      	add	r2, r1
 8009b68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009b70:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009b72:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3720      	adds	r7, #32
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	40040000 	.word	0x40040000

08009b80 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b08c      	sub	sp, #48	; 0x30
 8009b84:	af02      	add	r7, sp, #8
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	4613      	mov	r3, r2
 8009b8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	785b      	ldrb	r3, [r3, #1]
 8009b96:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8009b98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b9c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	4a5d      	ldr	r2, [pc, #372]	; (8009d18 <USB_HC_StartXfer+0x198>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d12f      	bne.n	8009c06 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8009ba6:	79fb      	ldrb	r3, [r7, #7]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d11c      	bne.n	8009be6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	7c9b      	ldrb	r3, [r3, #18]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d003      	beq.n	8009bbc <USB_HC_StartXfer+0x3c>
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	7c9b      	ldrb	r3, [r3, #18]
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d124      	bne.n	8009c06 <USB_HC_StartXfer+0x86>
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	799b      	ldrb	r3, [r3, #6]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d120      	bne.n	8009c06 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	015a      	lsls	r2, r3, #5
 8009bc8:	6a3b      	ldr	r3, [r7, #32]
 8009bca:	4413      	add	r3, r2
 8009bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	69fa      	ldr	r2, [r7, #28]
 8009bd4:	0151      	lsls	r1, r2, #5
 8009bd6:	6a3a      	ldr	r2, [r7, #32]
 8009bd8:	440a      	add	r2, r1
 8009bda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009be2:	60d3      	str	r3, [r2, #12]
 8009be4:	e00f      	b.n	8009c06 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	791b      	ldrb	r3, [r3, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d10b      	bne.n	8009c06 <USB_HC_StartXfer+0x86>
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	795b      	ldrb	r3, [r3, #5]
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d107      	bne.n	8009c06 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	785b      	ldrb	r3, [r3, #1]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f000 fb6b 	bl	800a2d8 <USB_DoPing>
        return HAL_OK;
 8009c02:	2300      	movs	r3, #0
 8009c04:	e232      	b.n	800a06c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	799b      	ldrb	r3, [r3, #6]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d158      	bne.n	8009cc0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	78db      	ldrb	r3, [r3, #3]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d007      	beq.n	8009c2a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009c1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009c1c:	68ba      	ldr	r2, [r7, #8]
 8009c1e:	8a92      	ldrh	r2, [r2, #20]
 8009c20:	fb03 f202 	mul.w	r2, r3, r2
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	61da      	str	r2, [r3, #28]
 8009c28:	e07c      	b.n	8009d24 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	7c9b      	ldrb	r3, [r3, #18]
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d130      	bne.n	8009c94 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	6a1b      	ldr	r3, [r3, #32]
 8009c36:	2bbc      	cmp	r3, #188	; 0xbc
 8009c38:	d918      	bls.n	8009c6c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	8a9b      	ldrh	r3, [r3, #20]
 8009c3e:	461a      	mov	r2, r3
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	69da      	ldr	r2, [r3, #28]
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d003      	beq.n	8009c5c <USB_HC_StartXfer+0xdc>
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d103      	bne.n	8009c64 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	2202      	movs	r2, #2
 8009c60:	60da      	str	r2, [r3, #12]
 8009c62:	e05f      	b.n	8009d24 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	2201      	movs	r2, #1
 8009c68:	60da      	str	r2, [r3, #12]
 8009c6a:	e05b      	b.n	8009d24 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	6a1a      	ldr	r2, [r3, #32]
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d007      	beq.n	8009c8c <USB_HC_StartXfer+0x10c>
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	d003      	beq.n	8009c8c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	2204      	movs	r2, #4
 8009c88:	60da      	str	r2, [r3, #12]
 8009c8a:	e04b      	b.n	8009d24 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	2203      	movs	r2, #3
 8009c90:	60da      	str	r2, [r3, #12]
 8009c92:	e047      	b.n	8009d24 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8009c94:	79fb      	ldrb	r3, [r7, #7]
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d10d      	bne.n	8009cb6 <USB_HC_StartXfer+0x136>
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	6a1b      	ldr	r3, [r3, #32]
 8009c9e:	68ba      	ldr	r2, [r7, #8]
 8009ca0:	8a92      	ldrh	r2, [r2, #20]
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d907      	bls.n	8009cb6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009ca6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ca8:	68ba      	ldr	r2, [r7, #8]
 8009caa:	8a92      	ldrh	r2, [r2, #20]
 8009cac:	fb03 f202 	mul.w	r2, r3, r2
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	61da      	str	r2, [r3, #28]
 8009cb4:	e036      	b.n	8009d24 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	6a1a      	ldr	r2, [r3, #32]
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	61da      	str	r2, [r3, #28]
 8009cbe:	e031      	b.n	8009d24 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	6a1b      	ldr	r3, [r3, #32]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d018      	beq.n	8009cfa <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	6a1b      	ldr	r3, [r3, #32]
 8009ccc:	68ba      	ldr	r2, [r7, #8]
 8009cce:	8a92      	ldrh	r2, [r2, #20]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	3b01      	subs	r3, #1
 8009cd4:	68ba      	ldr	r2, [r7, #8]
 8009cd6:	8a92      	ldrh	r2, [r2, #20]
 8009cd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cdc:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8009cde:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009ce0:	8b7b      	ldrh	r3, [r7, #26]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d90b      	bls.n	8009cfe <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8009ce6:	8b7b      	ldrh	r3, [r7, #26]
 8009ce8:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009cea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009cec:	68ba      	ldr	r2, [r7, #8]
 8009cee:	8a92      	ldrh	r2, [r2, #20]
 8009cf0:	fb03 f202 	mul.w	r2, r3, r2
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	61da      	str	r2, [r3, #28]
 8009cf8:	e001      	b.n	8009cfe <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	78db      	ldrb	r3, [r3, #3]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00a      	beq.n	8009d1c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009d06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d08:	68ba      	ldr	r2, [r7, #8]
 8009d0a:	8a92      	ldrh	r2, [r2, #20]
 8009d0c:	fb03 f202 	mul.w	r2, r3, r2
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	61da      	str	r2, [r3, #28]
 8009d14:	e006      	b.n	8009d24 <USB_HC_StartXfer+0x1a4>
 8009d16:	bf00      	nop
 8009d18:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	6a1a      	ldr	r2, [r3, #32]
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	69db      	ldr	r3, [r3, #28]
 8009d28:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009d2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d2e:	04d9      	lsls	r1, r3, #19
 8009d30:	4ba3      	ldr	r3, [pc, #652]	; (8009fc0 <USB_HC_StartXfer+0x440>)
 8009d32:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009d34:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	7d9b      	ldrb	r3, [r3, #22]
 8009d3a:	075b      	lsls	r3, r3, #29
 8009d3c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009d40:	69f9      	ldr	r1, [r7, #28]
 8009d42:	0148      	lsls	r0, r1, #5
 8009d44:	6a39      	ldr	r1, [r7, #32]
 8009d46:	4401      	add	r1, r0
 8009d48:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009d4c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009d4e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009d50:	79fb      	ldrb	r3, [r7, #7]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d009      	beq.n	8009d6a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	6999      	ldr	r1, [r3, #24]
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	015a      	lsls	r2, r3, #5
 8009d5e:	6a3b      	ldr	r3, [r7, #32]
 8009d60:	4413      	add	r3, r2
 8009d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d66:	460a      	mov	r2, r1
 8009d68:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009d6a:	6a3b      	ldr	r3, [r7, #32]
 8009d6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	f003 0301 	and.w	r3, r3, #1
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	bf0c      	ite	eq
 8009d7a:	2301      	moveq	r3, #1
 8009d7c:	2300      	movne	r3, #0
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	015a      	lsls	r2, r3, #5
 8009d86:	6a3b      	ldr	r3, [r7, #32]
 8009d88:	4413      	add	r3, r2
 8009d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	69fa      	ldr	r2, [r7, #28]
 8009d92:	0151      	lsls	r1, r2, #5
 8009d94:	6a3a      	ldr	r2, [r7, #32]
 8009d96:	440a      	add	r2, r1
 8009d98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d9c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009da0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	015a      	lsls	r2, r3, #5
 8009da6:	6a3b      	ldr	r3, [r7, #32]
 8009da8:	4413      	add	r3, r2
 8009daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	7e7b      	ldrb	r3, [r7, #25]
 8009db2:	075b      	lsls	r3, r3, #29
 8009db4:	69f9      	ldr	r1, [r7, #28]
 8009db6:	0148      	lsls	r0, r1, #5
 8009db8:	6a39      	ldr	r1, [r7, #32]
 8009dba:	4401      	add	r1, r0
 8009dbc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	799b      	ldrb	r3, [r3, #6]
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	f040 80c3 	bne.w	8009f54 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	7c5b      	ldrb	r3, [r3, #17]
 8009dd2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009dd4:	68ba      	ldr	r2, [r7, #8]
 8009dd6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	69fa      	ldr	r2, [r7, #28]
 8009ddc:	0151      	lsls	r1, r2, #5
 8009dde:	6a3a      	ldr	r2, [r7, #32]
 8009de0:	440a      	add	r2, r1
 8009de2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009de6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009dea:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	015a      	lsls	r2, r3, #5
 8009df0:	6a3b      	ldr	r3, [r7, #32]
 8009df2:	4413      	add	r3, r2
 8009df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	69fa      	ldr	r2, [r7, #28]
 8009dfc:	0151      	lsls	r1, r2, #5
 8009dfe:	6a3a      	ldr	r2, [r7, #32]
 8009e00:	440a      	add	r2, r1
 8009e02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e06:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009e0a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	79db      	ldrb	r3, [r3, #7]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d123      	bne.n	8009e5c <USB_HC_StartXfer+0x2dc>
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	78db      	ldrb	r3, [r3, #3]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d11f      	bne.n	8009e5c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	015a      	lsls	r2, r3, #5
 8009e20:	6a3b      	ldr	r3, [r7, #32]
 8009e22:	4413      	add	r3, r2
 8009e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	69fa      	ldr	r2, [r7, #28]
 8009e2c:	0151      	lsls	r1, r2, #5
 8009e2e:	6a3a      	ldr	r2, [r7, #32]
 8009e30:	440a      	add	r2, r1
 8009e32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e3a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	015a      	lsls	r2, r3, #5
 8009e40:	6a3b      	ldr	r3, [r7, #32]
 8009e42:	4413      	add	r3, r2
 8009e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	69fa      	ldr	r2, [r7, #28]
 8009e4c:	0151      	lsls	r1, r2, #5
 8009e4e:	6a3a      	ldr	r2, [r7, #32]
 8009e50:	440a      	add	r2, r1
 8009e52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e5a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	7c9b      	ldrb	r3, [r3, #18]
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d003      	beq.n	8009e6c <USB_HC_StartXfer+0x2ec>
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	7c9b      	ldrb	r3, [r3, #18]
 8009e68:	2b03      	cmp	r3, #3
 8009e6a:	d117      	bne.n	8009e9c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d113      	bne.n	8009e9c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	78db      	ldrb	r3, [r3, #3]
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d10f      	bne.n	8009e9c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	015a      	lsls	r2, r3, #5
 8009e80:	6a3b      	ldr	r3, [r7, #32]
 8009e82:	4413      	add	r3, r2
 8009e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	69fa      	ldr	r2, [r7, #28]
 8009e8c:	0151      	lsls	r1, r2, #5
 8009e8e:	6a3a      	ldr	r2, [r7, #32]
 8009e90:	440a      	add	r2, r1
 8009e92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e9a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	7c9b      	ldrb	r3, [r3, #18]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d162      	bne.n	8009f6a <USB_HC_StartXfer+0x3ea>
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	78db      	ldrb	r3, [r3, #3]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d15e      	bne.n	8009f6a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	2b03      	cmp	r3, #3
 8009eb4:	d858      	bhi.n	8009f68 <USB_HC_StartXfer+0x3e8>
 8009eb6:	a201      	add	r2, pc, #4	; (adr r2, 8009ebc <USB_HC_StartXfer+0x33c>)
 8009eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ebc:	08009ecd 	.word	0x08009ecd
 8009ec0:	08009eef 	.word	0x08009eef
 8009ec4:	08009f11 	.word	0x08009f11
 8009ec8:	08009f33 	.word	0x08009f33
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8009ecc:	69fb      	ldr	r3, [r7, #28]
 8009ece:	015a      	lsls	r2, r3, #5
 8009ed0:	6a3b      	ldr	r3, [r7, #32]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	69fa      	ldr	r2, [r7, #28]
 8009edc:	0151      	lsls	r1, r2, #5
 8009ede:	6a3a      	ldr	r2, [r7, #32]
 8009ee0:	440a      	add	r2, r1
 8009ee2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009eea:	6053      	str	r3, [r2, #4]
          break;
 8009eec:	e03d      	b.n	8009f6a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	015a      	lsls	r2, r3, #5
 8009ef2:	6a3b      	ldr	r3, [r7, #32]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	69fa      	ldr	r2, [r7, #28]
 8009efe:	0151      	lsls	r1, r2, #5
 8009f00:	6a3a      	ldr	r2, [r7, #32]
 8009f02:	440a      	add	r2, r1
 8009f04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f08:	f043 030e 	orr.w	r3, r3, #14
 8009f0c:	6053      	str	r3, [r2, #4]
          break;
 8009f0e:	e02c      	b.n	8009f6a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	015a      	lsls	r2, r3, #5
 8009f14:	6a3b      	ldr	r3, [r7, #32]
 8009f16:	4413      	add	r3, r2
 8009f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	69fa      	ldr	r2, [r7, #28]
 8009f20:	0151      	lsls	r1, r2, #5
 8009f22:	6a3a      	ldr	r2, [r7, #32]
 8009f24:	440a      	add	r2, r1
 8009f26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f2e:	6053      	str	r3, [r2, #4]
          break;
 8009f30:	e01b      	b.n	8009f6a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8009f32:	69fb      	ldr	r3, [r7, #28]
 8009f34:	015a      	lsls	r2, r3, #5
 8009f36:	6a3b      	ldr	r3, [r7, #32]
 8009f38:	4413      	add	r3, r2
 8009f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	69fa      	ldr	r2, [r7, #28]
 8009f42:	0151      	lsls	r1, r2, #5
 8009f44:	6a3a      	ldr	r2, [r7, #32]
 8009f46:	440a      	add	r2, r1
 8009f48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f50:	6053      	str	r3, [r2, #4]
          break;
 8009f52:	e00a      	b.n	8009f6a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	015a      	lsls	r2, r3, #5
 8009f58:	6a3b      	ldr	r3, [r7, #32]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f60:	461a      	mov	r2, r3
 8009f62:	2300      	movs	r3, #0
 8009f64:	6053      	str	r3, [r2, #4]
 8009f66:	e000      	b.n	8009f6a <USB_HC_StartXfer+0x3ea>
          break;
 8009f68:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	015a      	lsls	r2, r3, #5
 8009f6e:	6a3b      	ldr	r3, [r7, #32]
 8009f70:	4413      	add	r3, r2
 8009f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009f80:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	78db      	ldrb	r3, [r3, #3]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d004      	beq.n	8009f94 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f90:	613b      	str	r3, [r7, #16]
 8009f92:	e003      	b.n	8009f9c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009f9a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009fa2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	015a      	lsls	r2, r3, #5
 8009fa8:	6a3b      	ldr	r3, [r7, #32]
 8009faa:	4413      	add	r3, r2
 8009fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009fb6:	79fb      	ldrb	r3, [r7, #7]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d003      	beq.n	8009fc4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	e055      	b.n	800a06c <USB_HC_StartXfer+0x4ec>
 8009fc0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	78db      	ldrb	r3, [r3, #3]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d14e      	bne.n	800a06a <USB_HC_StartXfer+0x4ea>
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	6a1b      	ldr	r3, [r3, #32]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d04a      	beq.n	800a06a <USB_HC_StartXfer+0x4ea>
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	79db      	ldrb	r3, [r3, #7]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d146      	bne.n	800a06a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	7c9b      	ldrb	r3, [r3, #18]
 8009fe0:	2b03      	cmp	r3, #3
 8009fe2:	d831      	bhi.n	800a048 <USB_HC_StartXfer+0x4c8>
 8009fe4:	a201      	add	r2, pc, #4	; (adr r2, 8009fec <USB_HC_StartXfer+0x46c>)
 8009fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fea:	bf00      	nop
 8009fec:	08009ffd 	.word	0x08009ffd
 8009ff0:	0800a021 	.word	0x0800a021
 8009ff4:	08009ffd 	.word	0x08009ffd
 8009ff8:	0800a021 	.word	0x0800a021
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	6a1b      	ldr	r3, [r3, #32]
 800a000:	3303      	adds	r3, #3
 800a002:	089b      	lsrs	r3, r3, #2
 800a004:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a006:	8afa      	ldrh	r2, [r7, #22]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	429a      	cmp	r2, r3
 800a010:	d91c      	bls.n	800a04c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	699b      	ldr	r3, [r3, #24]
 800a016:	f043 0220 	orr.w	r2, r3, #32
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	619a      	str	r2, [r3, #24]
        }
        break;
 800a01e:	e015      	b.n	800a04c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	6a1b      	ldr	r3, [r3, #32]
 800a024:	3303      	adds	r3, #3
 800a026:	089b      	lsrs	r3, r3, #2
 800a028:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a02a:	8afa      	ldrh	r2, [r7, #22]
 800a02c:	6a3b      	ldr	r3, [r7, #32]
 800a02e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a032:	691b      	ldr	r3, [r3, #16]
 800a034:	b29b      	uxth	r3, r3
 800a036:	429a      	cmp	r2, r3
 800a038:	d90a      	bls.n	800a050 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	699b      	ldr	r3, [r3, #24]
 800a03e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	619a      	str	r2, [r3, #24]
        }
        break;
 800a046:	e003      	b.n	800a050 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800a048:	bf00      	nop
 800a04a:	e002      	b.n	800a052 <USB_HC_StartXfer+0x4d2>
        break;
 800a04c:	bf00      	nop
 800a04e:	e000      	b.n	800a052 <USB_HC_StartXfer+0x4d2>
        break;
 800a050:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	6999      	ldr	r1, [r3, #24]
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	785a      	ldrb	r2, [r3, #1]
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	6a1b      	ldr	r3, [r3, #32]
 800a05e:	b29b      	uxth	r3, r3
 800a060:	2000      	movs	r0, #0
 800a062:	9000      	str	r0, [sp, #0]
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f7ff f9c9 	bl	80093fc <USB_WritePacket>
  }

  return HAL_OK;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3728      	adds	r7, #40	; 0x28
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a074:	b480      	push	{r7}
 800a076:	b085      	sub	sp, #20
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a086:	695b      	ldr	r3, [r3, #20]
 800a088:	b29b      	uxth	r3, r3
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3714      	adds	r7, #20
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr

0800a096 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a096:	b480      	push	{r7}
 800a098:	b089      	sub	sp, #36	; 0x24
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
 800a09e:	460b      	mov	r3, r1
 800a0a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a0a6:	78fb      	ldrb	r3, [r7, #3]
 800a0a8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	015a      	lsls	r2, r3, #5
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	0c9b      	lsrs	r3, r3, #18
 800a0be:	f003 0303 	and.w	r3, r3, #3
 800a0c2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	015a      	lsls	r2, r3, #5
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	4413      	add	r3, r2
 800a0cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	0fdb      	lsrs	r3, r3, #31
 800a0d4:	f003 0301 	and.w	r3, r3, #1
 800a0d8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800a0da:	69bb      	ldr	r3, [r7, #24]
 800a0dc:	015a      	lsls	r2, r3, #5
 800a0de:	69fb      	ldr	r3, [r7, #28]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	0fdb      	lsrs	r3, r3, #31
 800a0ea:	f003 0301 	and.w	r3, r3, #1
 800a0ee:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	f003 0320 	and.w	r3, r3, #32
 800a0f8:	2b20      	cmp	r3, #32
 800a0fa:	d10d      	bne.n	800a118 <USB_HC_Halt+0x82>
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d10a      	bne.n	800a118 <USB_HC_Halt+0x82>
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d005      	beq.n	800a114 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d002      	beq.n	800a114 <USB_HC_Halt+0x7e>
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	2b03      	cmp	r3, #3
 800a112:	d101      	bne.n	800a118 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800a114:	2300      	movs	r3, #0
 800a116:	e0d8      	b.n	800a2ca <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d002      	beq.n	800a124 <USB_HC_Halt+0x8e>
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	2b02      	cmp	r3, #2
 800a122:	d173      	bne.n	800a20c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	015a      	lsls	r2, r3, #5
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	4413      	add	r3, r2
 800a12c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	69ba      	ldr	r2, [r7, #24]
 800a134:	0151      	lsls	r1, r2, #5
 800a136:	69fa      	ldr	r2, [r7, #28]
 800a138:	440a      	add	r2, r1
 800a13a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a13e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a142:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	f003 0320 	and.w	r3, r3, #32
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d14a      	bne.n	800a1e6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a154:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d133      	bne.n	800a1c4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	015a      	lsls	r2, r3, #5
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	4413      	add	r3, r2
 800a164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	69ba      	ldr	r2, [r7, #24]
 800a16c:	0151      	lsls	r1, r2, #5
 800a16e:	69fa      	ldr	r2, [r7, #28]
 800a170:	440a      	add	r2, r1
 800a172:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a176:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a17a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	015a      	lsls	r2, r3, #5
 800a180:	69fb      	ldr	r3, [r7, #28]
 800a182:	4413      	add	r3, r2
 800a184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	69ba      	ldr	r2, [r7, #24]
 800a18c:	0151      	lsls	r1, r2, #5
 800a18e:	69fa      	ldr	r2, [r7, #28]
 800a190:	440a      	add	r2, r1
 800a192:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a196:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a19a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a1a8:	d82e      	bhi.n	800a208 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	015a      	lsls	r2, r3, #5
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	4413      	add	r3, r2
 800a1b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1c0:	d0ec      	beq.n	800a19c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a1c2:	e081      	b.n	800a2c8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	015a      	lsls	r2, r3, #5
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	69ba      	ldr	r2, [r7, #24]
 800a1d4:	0151      	lsls	r1, r2, #5
 800a1d6:	69fa      	ldr	r2, [r7, #28]
 800a1d8:	440a      	add	r2, r1
 800a1da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a1de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a1e2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a1e4:	e070      	b.n	800a2c8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	015a      	lsls	r2, r3, #5
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	69ba      	ldr	r2, [r7, #24]
 800a1f6:	0151      	lsls	r1, r2, #5
 800a1f8:	69fa      	ldr	r2, [r7, #28]
 800a1fa:	440a      	add	r2, r1
 800a1fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a204:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a206:	e05f      	b.n	800a2c8 <USB_HC_Halt+0x232>
            break;
 800a208:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a20a:	e05d      	b.n	800a2c8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	015a      	lsls	r2, r3, #5
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	4413      	add	r3, r2
 800a214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	69ba      	ldr	r2, [r7, #24]
 800a21c:	0151      	lsls	r1, r2, #5
 800a21e:	69fa      	ldr	r2, [r7, #28]
 800a220:	440a      	add	r2, r1
 800a222:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a226:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a22a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d133      	bne.n	800a2a4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	015a      	lsls	r2, r3, #5
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	4413      	add	r3, r2
 800a244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	69ba      	ldr	r2, [r7, #24]
 800a24c:	0151      	lsls	r1, r2, #5
 800a24e:	69fa      	ldr	r2, [r7, #28]
 800a250:	440a      	add	r2, r1
 800a252:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a256:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a25a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	015a      	lsls	r2, r3, #5
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	4413      	add	r3, r2
 800a264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	69ba      	ldr	r2, [r7, #24]
 800a26c:	0151      	lsls	r1, r2, #5
 800a26e:	69fa      	ldr	r2, [r7, #28]
 800a270:	440a      	add	r2, r1
 800a272:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a276:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a27a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	3301      	adds	r3, #1
 800a280:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a288:	d81d      	bhi.n	800a2c6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	015a      	lsls	r2, r3, #5
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	4413      	add	r3, r2
 800a292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a29c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a2a0:	d0ec      	beq.n	800a27c <USB_HC_Halt+0x1e6>
 800a2a2:	e011      	b.n	800a2c8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	015a      	lsls	r2, r3, #5
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	69ba      	ldr	r2, [r7, #24]
 800a2b4:	0151      	lsls	r1, r2, #5
 800a2b6:	69fa      	ldr	r2, [r7, #28]
 800a2b8:	440a      	add	r2, r1
 800a2ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a2c2:	6013      	str	r3, [r2, #0]
 800a2c4:	e000      	b.n	800a2c8 <USB_HC_Halt+0x232>
          break;
 800a2c6:	bf00      	nop
    }
  }

  return HAL_OK;
 800a2c8:	2300      	movs	r3, #0
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3724      	adds	r7, #36	; 0x24
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr
	...

0800a2d8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b087      	sub	sp, #28
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a2e8:	78fb      	ldrb	r3, [r7, #3]
 800a2ea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	04da      	lsls	r2, r3, #19
 800a2f4:	4b15      	ldr	r3, [pc, #84]	; (800a34c <USB_DoPing+0x74>)
 800a2f6:	4013      	ands	r3, r2
 800a2f8:	693a      	ldr	r2, [r7, #16]
 800a2fa:	0151      	lsls	r1, r2, #5
 800a2fc:	697a      	ldr	r2, [r7, #20]
 800a2fe:	440a      	add	r2, r1
 800a300:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a304:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a308:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	015a      	lsls	r2, r3, #5
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	4413      	add	r3, r2
 800a312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a320:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a328:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	015a      	lsls	r2, r3, #5
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	4413      	add	r3, r2
 800a332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a336:	461a      	mov	r2, r3
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	371c      	adds	r7, #28
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	1ff80000 	.word	0x1ff80000

0800a350 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b088      	sub	sp, #32
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a358:	2300      	movs	r3, #0
 800a35a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a360:	2300      	movs	r3, #0
 800a362:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f7fe ff8c 	bl	8009282 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a36a:	2110      	movs	r1, #16
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f7fe ffe5 	bl	800933c <USB_FlushTxFifo>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d001      	beq.n	800a37c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a378:	2301      	movs	r3, #1
 800a37a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f7ff f80f 	bl	80093a0 <USB_FlushRxFifo>
 800a382:	4603      	mov	r3, r0
 800a384:	2b00      	cmp	r3, #0
 800a386:	d001      	beq.n	800a38c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a388:	2301      	movs	r3, #1
 800a38a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a38c:	2300      	movs	r3, #0
 800a38e:	61bb      	str	r3, [r7, #24]
 800a390:	e01f      	b.n	800a3d2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	015a      	lsls	r2, r3, #5
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	4413      	add	r3, r2
 800a39a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a3b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a3b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	015a      	lsls	r2, r3, #5
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	61bb      	str	r3, [r7, #24]
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	2b0f      	cmp	r3, #15
 800a3d6:	d9dc      	bls.n	800a392 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a3d8:	2300      	movs	r3, #0
 800a3da:	61bb      	str	r3, [r7, #24]
 800a3dc:	e034      	b.n	800a448 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	015a      	lsls	r2, r3, #5
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a3fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a404:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	015a      	lsls	r2, r3, #5
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	4413      	add	r3, r2
 800a40e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a412:	461a      	mov	r2, r3
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	3301      	adds	r3, #1
 800a41c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a424:	d80c      	bhi.n	800a440 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	015a      	lsls	r2, r3, #5
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	4413      	add	r3, r2
 800a42e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a438:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a43c:	d0ec      	beq.n	800a418 <USB_StopHost+0xc8>
 800a43e:	e000      	b.n	800a442 <USB_StopHost+0xf2>
        break;
 800a440:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	3301      	adds	r3, #1
 800a446:	61bb      	str	r3, [r7, #24]
 800a448:	69bb      	ldr	r3, [r7, #24]
 800a44a:	2b0f      	cmp	r3, #15
 800a44c:	d9c7      	bls.n	800a3de <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a454:	461a      	mov	r2, r3
 800a456:	f04f 33ff 	mov.w	r3, #4294967295
 800a45a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f04f 32ff 	mov.w	r2, #4294967295
 800a462:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f7fe fefb 	bl	8009260 <USB_EnableGlobalInt>

  return ret;
 800a46a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3720      	adds	r7, #32
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a474:	b590      	push	{r4, r7, lr}
 800a476:	b089      	sub	sp, #36	; 0x24
 800a478:	af04      	add	r7, sp, #16
 800a47a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a47c:	2301      	movs	r3, #1
 800a47e:	2202      	movs	r2, #2
 800a480:	2102      	movs	r1, #2
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 fc85 	bl	800ad92 <USBH_FindInterface>
 800a488:	4603      	mov	r3, r0
 800a48a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a48c:	7bfb      	ldrb	r3, [r7, #15]
 800a48e:	2bff      	cmp	r3, #255	; 0xff
 800a490:	d002      	beq.n	800a498 <USBH_CDC_InterfaceInit+0x24>
 800a492:	7bfb      	ldrb	r3, [r7, #15]
 800a494:	2b01      	cmp	r3, #1
 800a496:	d901      	bls.n	800a49c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a498:	2302      	movs	r3, #2
 800a49a:	e13d      	b.n	800a718 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a49c:	7bfb      	ldrb	r3, [r7, #15]
 800a49e:	4619      	mov	r1, r3
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 fc5a 	bl	800ad5a <USBH_SelectInterface>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a4aa:	7bbb      	ldrb	r3, [r7, #14]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d001      	beq.n	800a4b4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a4b0:	2302      	movs	r3, #2
 800a4b2:	e131      	b.n	800a718 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a4ba:	2050      	movs	r0, #80	; 0x50
 800a4bc:	f002 fb78 	bl	800cbb0 <malloc>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4ca:	69db      	ldr	r3, [r3, #28]
 800a4cc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d101      	bne.n	800a4d8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a4d4:	2302      	movs	r3, #2
 800a4d6:	e11f      	b.n	800a718 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a4d8:	2250      	movs	r2, #80	; 0x50
 800a4da:	2100      	movs	r1, #0
 800a4dc:	68b8      	ldr	r0, [r7, #8]
 800a4de:	f004 f9dc 	bl	800e89a <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a4e2:	7bfb      	ldrb	r3, [r7, #15]
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	211a      	movs	r1, #26
 800a4e8:	fb01 f303 	mul.w	r3, r1, r3
 800a4ec:	4413      	add	r3, r2
 800a4ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	b25b      	sxtb	r3, r3
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	da15      	bge.n	800a526 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	211a      	movs	r1, #26
 800a500:	fb01 f303 	mul.w	r3, r1, r3
 800a504:	4413      	add	r3, r2
 800a506:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a50a:	781a      	ldrb	r2, [r3, #0]
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a510:	7bfb      	ldrb	r3, [r7, #15]
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	211a      	movs	r1, #26
 800a516:	fb01 f303 	mul.w	r3, r1, r3
 800a51a:	4413      	add	r3, r2
 800a51c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a520:	881a      	ldrh	r2, [r3, #0]
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	785b      	ldrb	r3, [r3, #1]
 800a52a:	4619      	mov	r1, r3
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f001 ffce 	bl	800c4ce <USBH_AllocPipe>
 800a532:	4603      	mov	r3, r0
 800a534:	461a      	mov	r2, r3
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	7819      	ldrb	r1, [r3, #0]
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	7858      	ldrb	r0, [r3, #1]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a54e:	68ba      	ldr	r2, [r7, #8]
 800a550:	8952      	ldrh	r2, [r2, #10]
 800a552:	9202      	str	r2, [sp, #8]
 800a554:	2203      	movs	r2, #3
 800a556:	9201      	str	r2, [sp, #4]
 800a558:	9300      	str	r3, [sp, #0]
 800a55a:	4623      	mov	r3, r4
 800a55c:	4602      	mov	r2, r0
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f001 ff86 	bl	800c470 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	2200      	movs	r2, #0
 800a56a:	4619      	mov	r1, r3
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f002 fa95 	bl	800ca9c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a572:	2300      	movs	r3, #0
 800a574:	2200      	movs	r2, #0
 800a576:	210a      	movs	r1, #10
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 fc0a 	bl	800ad92 <USBH_FindInterface>
 800a57e:	4603      	mov	r3, r0
 800a580:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a582:	7bfb      	ldrb	r3, [r7, #15]
 800a584:	2bff      	cmp	r3, #255	; 0xff
 800a586:	d002      	beq.n	800a58e <USBH_CDC_InterfaceInit+0x11a>
 800a588:	7bfb      	ldrb	r3, [r7, #15]
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d901      	bls.n	800a592 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a58e:	2302      	movs	r3, #2
 800a590:	e0c2      	b.n	800a718 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a592:	7bfb      	ldrb	r3, [r7, #15]
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	211a      	movs	r1, #26
 800a598:	fb01 f303 	mul.w	r3, r1, r3
 800a59c:	4413      	add	r3, r2
 800a59e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	b25b      	sxtb	r3, r3
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	da16      	bge.n	800a5d8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a5aa:	7bfb      	ldrb	r3, [r7, #15]
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	211a      	movs	r1, #26
 800a5b0:	fb01 f303 	mul.w	r3, r1, r3
 800a5b4:	4413      	add	r3, r2
 800a5b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a5ba:	781a      	ldrb	r2, [r3, #0]
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a5c0:	7bfb      	ldrb	r3, [r7, #15]
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	211a      	movs	r1, #26
 800a5c6:	fb01 f303 	mul.w	r3, r1, r3
 800a5ca:	4413      	add	r3, r2
 800a5cc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a5d0:	881a      	ldrh	r2, [r3, #0]
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	835a      	strh	r2, [r3, #26]
 800a5d6:	e015      	b.n	800a604 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a5d8:	7bfb      	ldrb	r3, [r7, #15]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	211a      	movs	r1, #26
 800a5de:	fb01 f303 	mul.w	r3, r1, r3
 800a5e2:	4413      	add	r3, r2
 800a5e4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a5e8:	781a      	ldrb	r2, [r3, #0]
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a5ee:	7bfb      	ldrb	r3, [r7, #15]
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	211a      	movs	r1, #26
 800a5f4:	fb01 f303 	mul.w	r3, r1, r3
 800a5f8:	4413      	add	r3, r2
 800a5fa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a5fe:	881a      	ldrh	r2, [r3, #0]
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a604:	7bfb      	ldrb	r3, [r7, #15]
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	211a      	movs	r1, #26
 800a60a:	fb01 f303 	mul.w	r3, r1, r3
 800a60e:	4413      	add	r3, r2
 800a610:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	b25b      	sxtb	r3, r3
 800a618:	2b00      	cmp	r3, #0
 800a61a:	da16      	bge.n	800a64a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a61c:	7bfb      	ldrb	r3, [r7, #15]
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	211a      	movs	r1, #26
 800a622:	fb01 f303 	mul.w	r3, r1, r3
 800a626:	4413      	add	r3, r2
 800a628:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a62c:	781a      	ldrb	r2, [r3, #0]
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a632:	7bfb      	ldrb	r3, [r7, #15]
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	211a      	movs	r1, #26
 800a638:	fb01 f303 	mul.w	r3, r1, r3
 800a63c:	4413      	add	r3, r2
 800a63e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a642:	881a      	ldrh	r2, [r3, #0]
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	835a      	strh	r2, [r3, #26]
 800a648:	e015      	b.n	800a676 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a64a:	7bfb      	ldrb	r3, [r7, #15]
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	211a      	movs	r1, #26
 800a650:	fb01 f303 	mul.w	r3, r1, r3
 800a654:	4413      	add	r3, r2
 800a656:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a65a:	781a      	ldrb	r2, [r3, #0]
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a660:	7bfb      	ldrb	r3, [r7, #15]
 800a662:	687a      	ldr	r2, [r7, #4]
 800a664:	211a      	movs	r1, #26
 800a666:	fb01 f303 	mul.w	r3, r1, r3
 800a66a:	4413      	add	r3, r2
 800a66c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a670:	881a      	ldrh	r2, [r3, #0]
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	7b9b      	ldrb	r3, [r3, #14]
 800a67a:	4619      	mov	r1, r3
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f001 ff26 	bl	800c4ce <USBH_AllocPipe>
 800a682:	4603      	mov	r3, r0
 800a684:	461a      	mov	r2, r3
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	7bdb      	ldrb	r3, [r3, #15]
 800a68e:	4619      	mov	r1, r3
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f001 ff1c 	bl	800c4ce <USBH_AllocPipe>
 800a696:	4603      	mov	r3, r0
 800a698:	461a      	mov	r2, r3
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	7b59      	ldrb	r1, [r3, #13]
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	7b98      	ldrb	r0, [r3, #14]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a6b2:	68ba      	ldr	r2, [r7, #8]
 800a6b4:	8b12      	ldrh	r2, [r2, #24]
 800a6b6:	9202      	str	r2, [sp, #8]
 800a6b8:	2202      	movs	r2, #2
 800a6ba:	9201      	str	r2, [sp, #4]
 800a6bc:	9300      	str	r3, [sp, #0]
 800a6be:	4623      	mov	r3, r4
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f001 fed4 	bl	800c470 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	7b19      	ldrb	r1, [r3, #12]
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	7bd8      	ldrb	r0, [r3, #15]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a6dc:	68ba      	ldr	r2, [r7, #8]
 800a6de:	8b52      	ldrh	r2, [r2, #26]
 800a6e0:	9202      	str	r2, [sp, #8]
 800a6e2:	2202      	movs	r2, #2
 800a6e4:	9201      	str	r2, [sp, #4]
 800a6e6:	9300      	str	r3, [sp, #0]
 800a6e8:	4623      	mov	r3, r4
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f001 febf 	bl	800c470 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	7b5b      	ldrb	r3, [r3, #13]
 800a6fe:	2200      	movs	r2, #0
 800a700:	4619      	mov	r1, r3
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f002 f9ca 	bl	800ca9c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	7b1b      	ldrb	r3, [r3, #12]
 800a70c:	2200      	movs	r2, #0
 800a70e:	4619      	mov	r1, r3
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f002 f9c3 	bl	800ca9c <USBH_LL_SetToggle>

  return USBH_OK;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3714      	adds	r7, #20
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd90      	pop	{r4, r7, pc}

0800a720 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a72e:	69db      	ldr	r3, [r3, #28]
 800a730:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00e      	beq.n	800a758 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	4619      	mov	r1, r3
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f001 feb4 	bl	800c4ae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	4619      	mov	r1, r3
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f001 fedf 	bl	800c510 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2200      	movs	r2, #0
 800a756:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	7b1b      	ldrb	r3, [r3, #12]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d00e      	beq.n	800a77e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	7b1b      	ldrb	r3, [r3, #12]
 800a764:	4619      	mov	r1, r3
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f001 fea1 	bl	800c4ae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	7b1b      	ldrb	r3, [r3, #12]
 800a770:	4619      	mov	r1, r3
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f001 fecc 	bl	800c510 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2200      	movs	r2, #0
 800a77c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	7b5b      	ldrb	r3, [r3, #13]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d00e      	beq.n	800a7a4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	7b5b      	ldrb	r3, [r3, #13]
 800a78a:	4619      	mov	r1, r3
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f001 fe8e 	bl	800c4ae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	7b5b      	ldrb	r3, [r3, #13]
 800a796:	4619      	mov	r1, r3
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f001 feb9 	bl	800c510 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7aa:	69db      	ldr	r3, [r3, #28]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00b      	beq.n	800a7c8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7b6:	69db      	ldr	r3, [r3, #28]
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f002 fa01 	bl	800cbc0 <free>
    phost->pActiveClass->pData = 0U;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a7c8:	2300      	movs	r3, #0
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b084      	sub	sp, #16
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7e0:	69db      	ldr	r3, [r3, #28]
 800a7e2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	3340      	adds	r3, #64	; 0x40
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 f8b1 	bl	800a952 <GetLineCoding>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a7f4:	7afb      	ldrb	r3, [r7, #11]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d105      	bne.n	800a806 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a800:	2102      	movs	r1, #2
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a806:	7afb      	ldrb	r3, [r7, #11]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a818:	2301      	movs	r3, #1
 800a81a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a81c:	2300      	movs	r3, #0
 800a81e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a826:	69db      	ldr	r3, [r3, #28]
 800a828:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a830:	2b04      	cmp	r3, #4
 800a832:	d877      	bhi.n	800a924 <USBH_CDC_Process+0x114>
 800a834:	a201      	add	r2, pc, #4	; (adr r2, 800a83c <USBH_CDC_Process+0x2c>)
 800a836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a83a:	bf00      	nop
 800a83c:	0800a851 	.word	0x0800a851
 800a840:	0800a857 	.word	0x0800a857
 800a844:	0800a887 	.word	0x0800a887
 800a848:	0800a8fb 	.word	0x0800a8fb
 800a84c:	0800a909 	.word	0x0800a909
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a850:	2300      	movs	r3, #0
 800a852:	73fb      	strb	r3, [r7, #15]
      break;
 800a854:	e06d      	b.n	800a932 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a85a:	4619      	mov	r1, r3
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 f897 	bl	800a990 <SetLineCoding>
 800a862:	4603      	mov	r3, r0
 800a864:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a866:	7bbb      	ldrb	r3, [r7, #14]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d104      	bne.n	800a876 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	2202      	movs	r2, #2
 800a870:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a874:	e058      	b.n	800a928 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a876:	7bbb      	ldrb	r3, [r7, #14]
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d055      	beq.n	800a928 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	2204      	movs	r2, #4
 800a880:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a884:	e050      	b.n	800a928 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	3340      	adds	r3, #64	; 0x40
 800a88a:	4619      	mov	r1, r3
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 f860 	bl	800a952 <GetLineCoding>
 800a892:	4603      	mov	r3, r0
 800a894:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a896:	7bbb      	ldrb	r3, [r7, #14]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d126      	bne.n	800a8ea <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8ae:	791b      	ldrb	r3, [r3, #4]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d13b      	bne.n	800a92c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8be:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d133      	bne.n	800a92c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8ce:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d12b      	bne.n	800a92c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8dc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d124      	bne.n	800a92c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 f958 	bl	800ab98 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a8e8:	e020      	b.n	800a92c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a8ea:	7bbb      	ldrb	r3, [r7, #14]
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d01d      	beq.n	800a92c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	2204      	movs	r2, #4
 800a8f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a8f8:	e018      	b.n	800a92c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 f867 	bl	800a9ce <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 f8da 	bl	800aaba <CDC_ProcessReception>
      break;
 800a906:	e014      	b.n	800a932 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a908:	2100      	movs	r1, #0
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f001 f822 	bl	800b954 <USBH_ClrFeature>
 800a910:	4603      	mov	r3, r0
 800a912:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a914:	7bbb      	ldrb	r3, [r7, #14]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d10a      	bne.n	800a930 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	2200      	movs	r2, #0
 800a91e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a922:	e005      	b.n	800a930 <USBH_CDC_Process+0x120>

    default:
      break;
 800a924:	bf00      	nop
 800a926:	e004      	b.n	800a932 <USBH_CDC_Process+0x122>
      break;
 800a928:	bf00      	nop
 800a92a:	e002      	b.n	800a932 <USBH_CDC_Process+0x122>
      break;
 800a92c:	bf00      	nop
 800a92e:	e000      	b.n	800a932 <USBH_CDC_Process+0x122>
      break;
 800a930:	bf00      	nop

  }

  return status;
 800a932:	7bfb      	ldrb	r3, [r7, #15]
}
 800a934:	4618      	mov	r0, r3
 800a936:	3710      	adds	r7, #16
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a944:	2300      	movs	r3, #0
}
 800a946:	4618      	mov	r0, r3
 800a948:	370c      	adds	r7, #12
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr

0800a952 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a952:	b580      	push	{r7, lr}
 800a954:	b082      	sub	sp, #8
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
 800a95a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	22a1      	movs	r2, #161	; 0xa1
 800a960:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2221      	movs	r2, #33	; 0x21
 800a966:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2207      	movs	r2, #7
 800a978:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	2207      	movs	r2, #7
 800a97e:	4619      	mov	r1, r3
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f001 fb23 	bl	800bfcc <USBH_CtlReq>
 800a986:	4603      	mov	r3, r0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3708      	adds	r7, #8
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2221      	movs	r2, #33	; 0x21
 800a99e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2220      	movs	r2, #32
 800a9a4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2207      	movs	r2, #7
 800a9b6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	2207      	movs	r2, #7
 800a9bc:	4619      	mov	r1, r3
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f001 fb04 	bl	800bfcc <USBH_CtlReq>
 800a9c4:	4603      	mov	r3, r0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3708      	adds	r7, #8
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b086      	sub	sp, #24
 800a9d2:	af02      	add	r7, sp, #8
 800a9d4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9dc:	69db      	ldr	r3, [r3, #28]
 800a9de:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d002      	beq.n	800a9f4 <CDC_ProcessTransmission+0x26>
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	d023      	beq.n	800aa3a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a9f2:	e05e      	b.n	800aab2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	8b12      	ldrh	r2, [r2, #24]
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d90b      	bls.n	800aa18 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	69d9      	ldr	r1, [r3, #28]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	8b1a      	ldrh	r2, [r3, #24]
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	7b5b      	ldrb	r3, [r3, #13]
 800aa0c:	2001      	movs	r0, #1
 800aa0e:	9000      	str	r0, [sp, #0]
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f001 fcea 	bl	800c3ea <USBH_BulkSendData>
 800aa16:	e00b      	b.n	800aa30 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800aa20:	b29a      	uxth	r2, r3
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	7b5b      	ldrb	r3, [r3, #13]
 800aa26:	2001      	movs	r0, #1
 800aa28:	9000      	str	r0, [sp, #0]
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f001 fcdd 	bl	800c3ea <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2202      	movs	r2, #2
 800aa34:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800aa38:	e03b      	b.n	800aab2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	7b5b      	ldrb	r3, [r3, #13]
 800aa3e:	4619      	mov	r1, r3
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f002 f801 	bl	800ca48 <USBH_LL_GetURBState>
 800aa46:	4603      	mov	r3, r0
 800aa48:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800aa4a:	7afb      	ldrb	r3, [r7, #11]
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d128      	bne.n	800aaa2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	8b12      	ldrh	r2, [r2, #24]
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d90e      	bls.n	800aa7a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	8b12      	ldrh	r2, [r2, #24]
 800aa64:	1a9a      	subs	r2, r3, r2
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	69db      	ldr	r3, [r3, #28]
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	8b12      	ldrh	r2, [r2, #24]
 800aa72:	441a      	add	r2, r3
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	61da      	str	r2, [r3, #28]
 800aa78:	e002      	b.n	800aa80 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d004      	beq.n	800aa92 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800aa90:	e00e      	b.n	800aab0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2200      	movs	r2, #0
 800aa96:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 f868 	bl	800ab70 <USBH_CDC_TransmitCallback>
      break;
 800aaa0:	e006      	b.n	800aab0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800aaa2:	7afb      	ldrb	r3, [r7, #11]
 800aaa4:	2b02      	cmp	r3, #2
 800aaa6:	d103      	bne.n	800aab0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2201      	movs	r2, #1
 800aaac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800aab0:	bf00      	nop
  }
}
 800aab2:	bf00      	nop
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b086      	sub	sp, #24
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aac8:	69db      	ldr	r3, [r3, #28]
 800aaca:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800aacc:	2300      	movs	r3, #0
 800aace:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800aad6:	2b03      	cmp	r3, #3
 800aad8:	d002      	beq.n	800aae0 <CDC_ProcessReception+0x26>
 800aada:	2b04      	cmp	r3, #4
 800aadc:	d00e      	beq.n	800aafc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800aade:	e043      	b.n	800ab68 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	6a19      	ldr	r1, [r3, #32]
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	8b5a      	ldrh	r2, [r3, #26]
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	7b1b      	ldrb	r3, [r3, #12]
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f001 fca1 	bl	800c434 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	2204      	movs	r2, #4
 800aaf6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800aafa:	e035      	b.n	800ab68 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	7b1b      	ldrb	r3, [r3, #12]
 800ab00:	4619      	mov	r1, r3
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f001 ffa0 	bl	800ca48 <USBH_LL_GetURBState>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800ab0c:	7cfb      	ldrb	r3, [r7, #19]
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d129      	bne.n	800ab66 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	7b1b      	ldrb	r3, [r3, #12]
 800ab16:	4619      	mov	r1, r3
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f001 ff03 	bl	800c924 <USBH_LL_GetLastXferSize>
 800ab1e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d016      	beq.n	800ab58 <CDC_ProcessReception+0x9e>
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	8b5b      	ldrh	r3, [r3, #26]
 800ab2e:	461a      	mov	r2, r3
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d910      	bls.n	800ab58 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	1ad2      	subs	r2, r2, r3
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	6a1a      	ldr	r2, [r3, #32]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	441a      	add	r2, r3
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	2203      	movs	r2, #3
 800ab52:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800ab56:	e006      	b.n	800ab66 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 f80f 	bl	800ab84 <USBH_CDC_ReceiveCallback>
      break;
 800ab66:	bf00      	nop
  }
}
 800ab68:	bf00      	nop
 800ab6a:	3718      	adds	r7, #24
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ab78:	bf00      	nop
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ab8c:	bf00      	nop
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800aba0:	bf00      	nop
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	4613      	mov	r3, r2
 800abb8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d101      	bne.n	800abc4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800abc0:	2302      	movs	r3, #2
 800abc2:	e029      	b.n	800ac18 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	79fa      	ldrb	r2, [r7, #7]
 800abc8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2200      	movs	r2, #0
 800abd0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2200      	movs	r2, #0
 800abd8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f000 f81f 	bl	800ac20 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2200      	movs	r2, #0
 800abe6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2200      	movs	r2, #0
 800abee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2200      	movs	r2, #0
 800abf6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d003      	beq.n	800ac10 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	68ba      	ldr	r2, [r7, #8]
 800ac0c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800ac10:	68f8      	ldr	r0, [r7, #12]
 800ac12:	f001 fdd3 	bl	800c7bc <USBH_LL_Init>

  return USBH_OK;
 800ac16:	2300      	movs	r3, #0
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3710      	adds	r7, #16
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	60fb      	str	r3, [r7, #12]
 800ac30:	e009      	b.n	800ac46 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	33e0      	adds	r3, #224	; 0xe0
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	4413      	add	r3, r2
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	3301      	adds	r3, #1
 800ac44:	60fb      	str	r3, [r7, #12]
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2b0f      	cmp	r3, #15
 800ac4a:	d9f2      	bls.n	800ac32 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	60fb      	str	r3, [r7, #12]
 800ac50:	e009      	b.n	800ac66 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	4413      	add	r3, r2
 800ac58:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	3301      	adds	r3, #1
 800ac64:	60fb      	str	r3, [r7, #12]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac6c:	d3f1      	bcc.n	800ac52 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2240      	movs	r2, #64	; 0x40
 800ac92:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2201      	movs	r2, #1
 800aca6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2200      	movs	r2, #0
 800acb6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	331c      	adds	r3, #28
 800acbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800acc2:	2100      	movs	r1, #0
 800acc4:	4618      	mov	r0, r3
 800acc6:	f003 fde8 	bl	800e89a <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800acd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acd4:	2100      	movs	r1, #0
 800acd6:	4618      	mov	r0, r3
 800acd8:	f003 fddf 	bl	800e89a <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f203 3326 	addw	r3, r3, #806	; 0x326
 800ace2:	2212      	movs	r2, #18
 800ace4:	2100      	movs	r1, #0
 800ace6:	4618      	mov	r0, r3
 800ace8:	f003 fdd7 	bl	800e89a <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800acf2:	223e      	movs	r2, #62	; 0x3e
 800acf4:	2100      	movs	r1, #0
 800acf6:	4618      	mov	r0, r3
 800acf8:	f003 fdcf 	bl	800e89a <memset>

  return USBH_OK;
 800acfc:	2300      	movs	r3, #0
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3710      	adds	r7, #16
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ad06:	b480      	push	{r7}
 800ad08:	b085      	sub	sp, #20
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
 800ad0e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ad10:	2300      	movs	r3, #0
 800ad12:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d016      	beq.n	800ad48 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d10e      	bne.n	800ad42 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ad2a:	1c59      	adds	r1, r3, #1
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	33de      	adds	r3, #222	; 0xde
 800ad36:	6839      	ldr	r1, [r7, #0]
 800ad38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	73fb      	strb	r3, [r7, #15]
 800ad40:	e004      	b.n	800ad4c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ad42:	2302      	movs	r3, #2
 800ad44:	73fb      	strb	r3, [r7, #15]
 800ad46:	e001      	b.n	800ad4c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ad48:	2302      	movs	r3, #2
 800ad4a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ad4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3714      	adds	r7, #20
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr

0800ad5a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ad5a:	b480      	push	{r7}
 800ad5c:	b085      	sub	sp, #20
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
 800ad62:	460b      	mov	r3, r1
 800ad64:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ad66:	2300      	movs	r3, #0
 800ad68:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800ad70:	78fa      	ldrb	r2, [r7, #3]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d204      	bcs.n	800ad80 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	78fa      	ldrb	r2, [r7, #3]
 800ad7a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800ad7e:	e001      	b.n	800ad84 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ad80:	2302      	movs	r3, #2
 800ad82:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ad84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3714      	adds	r7, #20
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr

0800ad92 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ad92:	b480      	push	{r7}
 800ad94:	b087      	sub	sp, #28
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
 800ad9a:	4608      	mov	r0, r1
 800ad9c:	4611      	mov	r1, r2
 800ad9e:	461a      	mov	r2, r3
 800ada0:	4603      	mov	r3, r0
 800ada2:	70fb      	strb	r3, [r7, #3]
 800ada4:	460b      	mov	r3, r1
 800ada6:	70bb      	strb	r3, [r7, #2]
 800ada8:	4613      	mov	r3, r2
 800adaa:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800adac:	2300      	movs	r3, #0
 800adae:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800adb0:	2300      	movs	r3, #0
 800adb2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800adba:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800adbc:	e025      	b.n	800ae0a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800adbe:	7dfb      	ldrb	r3, [r7, #23]
 800adc0:	221a      	movs	r2, #26
 800adc2:	fb02 f303 	mul.w	r3, r2, r3
 800adc6:	3308      	adds	r3, #8
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	4413      	add	r3, r2
 800adcc:	3302      	adds	r3, #2
 800adce:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	795b      	ldrb	r3, [r3, #5]
 800add4:	78fa      	ldrb	r2, [r7, #3]
 800add6:	429a      	cmp	r2, r3
 800add8:	d002      	beq.n	800ade0 <USBH_FindInterface+0x4e>
 800adda:	78fb      	ldrb	r3, [r7, #3]
 800addc:	2bff      	cmp	r3, #255	; 0xff
 800adde:	d111      	bne.n	800ae04 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ade4:	78ba      	ldrb	r2, [r7, #2]
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d002      	beq.n	800adf0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800adea:	78bb      	ldrb	r3, [r7, #2]
 800adec:	2bff      	cmp	r3, #255	; 0xff
 800adee:	d109      	bne.n	800ae04 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800adf4:	787a      	ldrb	r2, [r7, #1]
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d002      	beq.n	800ae00 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800adfa:	787b      	ldrb	r3, [r7, #1]
 800adfc:	2bff      	cmp	r3, #255	; 0xff
 800adfe:	d101      	bne.n	800ae04 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ae00:	7dfb      	ldrb	r3, [r7, #23]
 800ae02:	e006      	b.n	800ae12 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ae04:	7dfb      	ldrb	r3, [r7, #23]
 800ae06:	3301      	adds	r3, #1
 800ae08:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ae0a:	7dfb      	ldrb	r3, [r7, #23]
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d9d6      	bls.n	800adbe <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ae10:	23ff      	movs	r3, #255	; 0xff
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	371c      	adds	r7, #28
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr

0800ae1e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b082      	sub	sp, #8
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f001 fd04 	bl	800c834 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800ae2c:	2101      	movs	r1, #1
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f001 fe1d 	bl	800ca6e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3708      	adds	r7, #8
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
	...

0800ae40 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b088      	sub	sp, #32
 800ae44:	af04      	add	r7, sp, #16
 800ae46:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ae48:	2302      	movs	r3, #2
 800ae4a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d102      	bne.n	800ae62 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2203      	movs	r2, #3
 800ae60:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	2b0b      	cmp	r3, #11
 800ae6a:	f200 81be 	bhi.w	800b1ea <USBH_Process+0x3aa>
 800ae6e:	a201      	add	r2, pc, #4	; (adr r2, 800ae74 <USBH_Process+0x34>)
 800ae70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae74:	0800aea5 	.word	0x0800aea5
 800ae78:	0800aed7 	.word	0x0800aed7
 800ae7c:	0800af3f 	.word	0x0800af3f
 800ae80:	0800b185 	.word	0x0800b185
 800ae84:	0800b1eb 	.word	0x0800b1eb
 800ae88:	0800afe3 	.word	0x0800afe3
 800ae8c:	0800b12b 	.word	0x0800b12b
 800ae90:	0800b019 	.word	0x0800b019
 800ae94:	0800b039 	.word	0x0800b039
 800ae98:	0800b059 	.word	0x0800b059
 800ae9c:	0800b09d 	.word	0x0800b09d
 800aea0:	0800b16d 	.word	0x0800b16d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f000 819e 	beq.w	800b1ee <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800aeb8:	20c8      	movs	r0, #200	; 0xc8
 800aeba:	f001 fe22 	bl	800cb02 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f001 fd15 	bl	800c8ee <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800aed4:	e18b      	b.n	800b1ee <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d107      	bne.n	800aef0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2202      	movs	r2, #2
 800aeec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aeee:	e18d      	b.n	800b20c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800aef6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aefa:	d914      	bls.n	800af26 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800af02:	3301      	adds	r3, #1
 800af04:	b2da      	uxtb	r2, r3
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800af12:	2b03      	cmp	r3, #3
 800af14:	d903      	bls.n	800af1e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	220d      	movs	r2, #13
 800af1a:	701a      	strb	r2, [r3, #0]
      break;
 800af1c:	e176      	b.n	800b20c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2200      	movs	r2, #0
 800af22:	701a      	strb	r2, [r3, #0]
      break;
 800af24:	e172      	b.n	800b20c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800af2c:	f103 020a 	add.w	r2, r3, #10
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800af36:	200a      	movs	r0, #10
 800af38:	f001 fde3 	bl	800cb02 <USBH_Delay>
      break;
 800af3c:	e166      	b.n	800b20c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af44:	2b00      	cmp	r3, #0
 800af46:	d005      	beq.n	800af54 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af4e:	2104      	movs	r1, #4
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800af54:	2064      	movs	r0, #100	; 0x64
 800af56:	f001 fdd4 	bl	800cb02 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f001 fca0 	bl	800c8a0 <USBH_LL_GetSpeed>
 800af60:	4603      	mov	r3, r0
 800af62:	461a      	mov	r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2205      	movs	r2, #5
 800af6e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800af70:	2100      	movs	r1, #0
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f001 faab 	bl	800c4ce <USBH_AllocPipe>
 800af78:	4603      	mov	r3, r0
 800af7a:	461a      	mov	r2, r3
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800af80:	2180      	movs	r1, #128	; 0x80
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f001 faa3 	bl	800c4ce <USBH_AllocPipe>
 800af88:	4603      	mov	r3, r0
 800af8a:	461a      	mov	r2, r3
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	7919      	ldrb	r1, [r3, #4]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800afa4:	b292      	uxth	r2, r2
 800afa6:	9202      	str	r2, [sp, #8]
 800afa8:	2200      	movs	r2, #0
 800afaa:	9201      	str	r2, [sp, #4]
 800afac:	9300      	str	r3, [sp, #0]
 800afae:	4603      	mov	r3, r0
 800afb0:	2280      	movs	r2, #128	; 0x80
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f001 fa5c 	bl	800c470 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	7959      	ldrb	r1, [r3, #5]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800afcc:	b292      	uxth	r2, r2
 800afce:	9202      	str	r2, [sp, #8]
 800afd0:	2200      	movs	r2, #0
 800afd2:	9201      	str	r2, [sp, #4]
 800afd4:	9300      	str	r3, [sp, #0]
 800afd6:	4603      	mov	r3, r0
 800afd8:	2200      	movs	r2, #0
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f001 fa48 	bl	800c470 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800afe0:	e114      	b.n	800b20c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 f918 	bl	800b218 <USBH_HandleEnum>
 800afe8:	4603      	mov	r3, r0
 800afea:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800afec:	7bbb      	ldrb	r3, [r7, #14]
 800afee:	b2db      	uxtb	r3, r3
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	f040 80fe 	bne.w	800b1f2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b004:	2b01      	cmp	r3, #1
 800b006:	d103      	bne.n	800b010 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2208      	movs	r2, #8
 800b00c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b00e:	e0f0      	b.n	800b1f2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2207      	movs	r2, #7
 800b014:	701a      	strb	r2, [r3, #0]
      break;
 800b016:	e0ec      	b.n	800b1f2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b01e:	2b00      	cmp	r3, #0
 800b020:	f000 80e9 	beq.w	800b1f6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b02a:	2101      	movs	r1, #1
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2208      	movs	r2, #8
 800b034:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b036:	e0de      	b.n	800b1f6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b03e:	b29b      	uxth	r3, r3
 800b040:	4619      	mov	r1, r3
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 fc3f 	bl	800b8c6 <USBH_SetCfg>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	f040 80d5 	bne.w	800b1fa <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2209      	movs	r2, #9
 800b054:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b056:	e0d0      	b.n	800b1fa <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b05e:	f003 0320 	and.w	r3, r3, #32
 800b062:	2b00      	cmp	r3, #0
 800b064:	d016      	beq.n	800b094 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b066:	2101      	movs	r1, #1
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 fc4f 	bl	800b90c <USBH_SetFeature>
 800b06e:	4603      	mov	r3, r0
 800b070:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b072:	7bbb      	ldrb	r3, [r7, #14]
 800b074:	b2db      	uxtb	r3, r3
 800b076:	2b00      	cmp	r3, #0
 800b078:	d103      	bne.n	800b082 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	220a      	movs	r2, #10
 800b07e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b080:	e0bd      	b.n	800b1fe <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800b082:	7bbb      	ldrb	r3, [r7, #14]
 800b084:	b2db      	uxtb	r3, r3
 800b086:	2b03      	cmp	r3, #3
 800b088:	f040 80b9 	bne.w	800b1fe <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	220a      	movs	r2, #10
 800b090:	701a      	strb	r2, [r3, #0]
      break;
 800b092:	e0b4      	b.n	800b1fe <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	220a      	movs	r2, #10
 800b098:	701a      	strb	r2, [r3, #0]
      break;
 800b09a:	e0b0      	b.n	800b1fe <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	f000 80ad 	beq.w	800b202 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	73fb      	strb	r3, [r7, #15]
 800b0b4:	e016      	b.n	800b0e4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b0b6:	7bfa      	ldrb	r2, [r7, #15]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	32de      	adds	r2, #222	; 0xde
 800b0bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0c0:	791a      	ldrb	r2, [r3, #4]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d108      	bne.n	800b0de <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b0cc:	7bfa      	ldrb	r2, [r7, #15]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	32de      	adds	r2, #222	; 0xde
 800b0d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b0dc:	e005      	b.n	800b0ea <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b0de:	7bfb      	ldrb	r3, [r7, #15]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	73fb      	strb	r3, [r7, #15]
 800b0e4:	7bfb      	ldrb	r3, [r7, #15]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d0e5      	beq.n	800b0b6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d016      	beq.n	800b122 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b0fa:	689b      	ldr	r3, [r3, #8]
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	4798      	blx	r3
 800b100:	4603      	mov	r3, r0
 800b102:	2b00      	cmp	r3, #0
 800b104:	d109      	bne.n	800b11a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2206      	movs	r2, #6
 800b10a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b112:	2103      	movs	r1, #3
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b118:	e073      	b.n	800b202 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	220d      	movs	r2, #13
 800b11e:	701a      	strb	r2, [r3, #0]
      break;
 800b120:	e06f      	b.n	800b202 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	220d      	movs	r2, #13
 800b126:	701a      	strb	r2, [r3, #0]
      break;
 800b128:	e06b      	b.n	800b202 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b130:	2b00      	cmp	r3, #0
 800b132:	d017      	beq.n	800b164 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b13a:	691b      	ldr	r3, [r3, #16]
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	4798      	blx	r3
 800b140:	4603      	mov	r3, r0
 800b142:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b144:	7bbb      	ldrb	r3, [r7, #14]
 800b146:	b2db      	uxtb	r3, r3
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d103      	bne.n	800b154 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	220b      	movs	r2, #11
 800b150:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b152:	e058      	b.n	800b206 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800b154:	7bbb      	ldrb	r3, [r7, #14]
 800b156:	b2db      	uxtb	r3, r3
 800b158:	2b02      	cmp	r3, #2
 800b15a:	d154      	bne.n	800b206 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	220d      	movs	r2, #13
 800b160:	701a      	strb	r2, [r3, #0]
      break;
 800b162:	e050      	b.n	800b206 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	220d      	movs	r2, #13
 800b168:	701a      	strb	r2, [r3, #0]
      break;
 800b16a:	e04c      	b.n	800b206 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b172:	2b00      	cmp	r3, #0
 800b174:	d049      	beq.n	800b20a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b17c:	695b      	ldr	r3, [r3, #20]
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	4798      	blx	r3
      }
      break;
 800b182:	e042      	b.n	800b20a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2200      	movs	r2, #0
 800b188:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f7ff fd47 	bl	800ac20 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d009      	beq.n	800b1b0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d005      	beq.n	800b1c6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b1c0:	2105      	movs	r1, #5
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d107      	bne.n	800b1e2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f7ff fe1f 	bl	800ae1e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b1e0:	e014      	b.n	800b20c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f001 fb26 	bl	800c834 <USBH_LL_Start>
      break;
 800b1e8:	e010      	b.n	800b20c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800b1ea:	bf00      	nop
 800b1ec:	e00e      	b.n	800b20c <USBH_Process+0x3cc>
      break;
 800b1ee:	bf00      	nop
 800b1f0:	e00c      	b.n	800b20c <USBH_Process+0x3cc>
      break;
 800b1f2:	bf00      	nop
 800b1f4:	e00a      	b.n	800b20c <USBH_Process+0x3cc>
    break;
 800b1f6:	bf00      	nop
 800b1f8:	e008      	b.n	800b20c <USBH_Process+0x3cc>
      break;
 800b1fa:	bf00      	nop
 800b1fc:	e006      	b.n	800b20c <USBH_Process+0x3cc>
      break;
 800b1fe:	bf00      	nop
 800b200:	e004      	b.n	800b20c <USBH_Process+0x3cc>
      break;
 800b202:	bf00      	nop
 800b204:	e002      	b.n	800b20c <USBH_Process+0x3cc>
      break;
 800b206:	bf00      	nop
 800b208:	e000      	b.n	800b20c <USBH_Process+0x3cc>
      break;
 800b20a:	bf00      	nop
  }
  return USBH_OK;
 800b20c:	2300      	movs	r3, #0
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop

0800b218 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b088      	sub	sp, #32
 800b21c:	af04      	add	r7, sp, #16
 800b21e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b220:	2301      	movs	r3, #1
 800b222:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b224:	2301      	movs	r3, #1
 800b226:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	785b      	ldrb	r3, [r3, #1]
 800b22c:	2b07      	cmp	r3, #7
 800b22e:	f200 81c1 	bhi.w	800b5b4 <USBH_HandleEnum+0x39c>
 800b232:	a201      	add	r2, pc, #4	; (adr r2, 800b238 <USBH_HandleEnum+0x20>)
 800b234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b238:	0800b259 	.word	0x0800b259
 800b23c:	0800b317 	.word	0x0800b317
 800b240:	0800b381 	.word	0x0800b381
 800b244:	0800b40f 	.word	0x0800b40f
 800b248:	0800b479 	.word	0x0800b479
 800b24c:	0800b4e9 	.word	0x0800b4e9
 800b250:	0800b52f 	.word	0x0800b52f
 800b254:	0800b575 	.word	0x0800b575
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b258:	2108      	movs	r1, #8
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 fa50 	bl	800b700 <USBH_Get_DevDesc>
 800b260:	4603      	mov	r3, r0
 800b262:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b264:	7bbb      	ldrb	r3, [r7, #14]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d130      	bne.n	800b2cc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2201      	movs	r2, #1
 800b278:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	7919      	ldrb	r1, [r3, #4]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b28e:	b292      	uxth	r2, r2
 800b290:	9202      	str	r2, [sp, #8]
 800b292:	2200      	movs	r2, #0
 800b294:	9201      	str	r2, [sp, #4]
 800b296:	9300      	str	r3, [sp, #0]
 800b298:	4603      	mov	r3, r0
 800b29a:	2280      	movs	r2, #128	; 0x80
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f001 f8e7 	bl	800c470 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	7959      	ldrb	r1, [r3, #5]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b2b6:	b292      	uxth	r2, r2
 800b2b8:	9202      	str	r2, [sp, #8]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	9201      	str	r2, [sp, #4]
 800b2be:	9300      	str	r3, [sp, #0]
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f001 f8d3 	bl	800c470 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b2ca:	e175      	b.n	800b5b8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b2cc:	7bbb      	ldrb	r3, [r7, #14]
 800b2ce:	2b03      	cmp	r3, #3
 800b2d0:	f040 8172 	bne.w	800b5b8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b2da:	3301      	adds	r3, #1
 800b2dc:	b2da      	uxtb	r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b2ea:	2b03      	cmp	r3, #3
 800b2ec:	d903      	bls.n	800b2f6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	220d      	movs	r2, #13
 800b2f2:	701a      	strb	r2, [r3, #0]
      break;
 800b2f4:	e160      	b.n	800b5b8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	795b      	ldrb	r3, [r3, #5]
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f001 f907 	bl	800c510 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	791b      	ldrb	r3, [r3, #4]
 800b306:	4619      	mov	r1, r3
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f001 f901 	bl	800c510 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	701a      	strb	r2, [r3, #0]
      break;
 800b314:	e150      	b.n	800b5b8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b316:	2112      	movs	r1, #18
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 f9f1 	bl	800b700 <USBH_Get_DevDesc>
 800b31e:	4603      	mov	r3, r0
 800b320:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b322:	7bbb      	ldrb	r3, [r7, #14]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d103      	bne.n	800b330 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2202      	movs	r2, #2
 800b32c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b32e:	e145      	b.n	800b5bc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b330:	7bbb      	ldrb	r3, [r7, #14]
 800b332:	2b03      	cmp	r3, #3
 800b334:	f040 8142 	bne.w	800b5bc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b33e:	3301      	adds	r3, #1
 800b340:	b2da      	uxtb	r2, r3
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b34e:	2b03      	cmp	r3, #3
 800b350:	d903      	bls.n	800b35a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	220d      	movs	r2, #13
 800b356:	701a      	strb	r2, [r3, #0]
      break;
 800b358:	e130      	b.n	800b5bc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	795b      	ldrb	r3, [r3, #5]
 800b35e:	4619      	mov	r1, r3
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f001 f8d5 	bl	800c510 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	791b      	ldrb	r3, [r3, #4]
 800b36a:	4619      	mov	r1, r3
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f001 f8cf 	bl	800c510 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2200      	movs	r2, #0
 800b376:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	701a      	strb	r2, [r3, #0]
      break;
 800b37e:	e11d      	b.n	800b5bc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b380:	2101      	movs	r1, #1
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 fa7b 	bl	800b87e <USBH_SetAddress>
 800b388:	4603      	mov	r3, r0
 800b38a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b38c:	7bbb      	ldrb	r3, [r7, #14]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d132      	bne.n	800b3f8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b392:	2002      	movs	r0, #2
 800b394:	f001 fbb5 	bl	800cb02 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2203      	movs	r2, #3
 800b3a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	7919      	ldrb	r1, [r3, #4]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b3ba:	b292      	uxth	r2, r2
 800b3bc:	9202      	str	r2, [sp, #8]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	9201      	str	r2, [sp, #4]
 800b3c2:	9300      	str	r3, [sp, #0]
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2280      	movs	r2, #128	; 0x80
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f001 f851 	bl	800c470 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	7959      	ldrb	r1, [r3, #5]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b3e2:	b292      	uxth	r2, r2
 800b3e4:	9202      	str	r2, [sp, #8]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	9201      	str	r2, [sp, #4]
 800b3ea:	9300      	str	r3, [sp, #0]
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f001 f83d 	bl	800c470 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b3f6:	e0e3      	b.n	800b5c0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b3f8:	7bbb      	ldrb	r3, [r7, #14]
 800b3fa:	2b03      	cmp	r3, #3
 800b3fc:	f040 80e0 	bne.w	800b5c0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	220d      	movs	r2, #13
 800b404:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	705a      	strb	r2, [r3, #1]
      break;
 800b40c:	e0d8      	b.n	800b5c0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b40e:	2109      	movs	r1, #9
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 f9a1 	bl	800b758 <USBH_Get_CfgDesc>
 800b416:	4603      	mov	r3, r0
 800b418:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b41a:	7bbb      	ldrb	r3, [r7, #14]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d103      	bne.n	800b428 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2204      	movs	r2, #4
 800b424:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b426:	e0cd      	b.n	800b5c4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b428:	7bbb      	ldrb	r3, [r7, #14]
 800b42a:	2b03      	cmp	r3, #3
 800b42c:	f040 80ca 	bne.w	800b5c4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b436:	3301      	adds	r3, #1
 800b438:	b2da      	uxtb	r2, r3
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b446:	2b03      	cmp	r3, #3
 800b448:	d903      	bls.n	800b452 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	220d      	movs	r2, #13
 800b44e:	701a      	strb	r2, [r3, #0]
      break;
 800b450:	e0b8      	b.n	800b5c4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	795b      	ldrb	r3, [r3, #5]
 800b456:	4619      	mov	r1, r3
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f001 f859 	bl	800c510 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	791b      	ldrb	r3, [r3, #4]
 800b462:	4619      	mov	r1, r3
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f001 f853 	bl	800c510 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	701a      	strb	r2, [r3, #0]
      break;
 800b476:	e0a5      	b.n	800b5c4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b47e:	4619      	mov	r1, r3
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 f969 	bl	800b758 <USBH_Get_CfgDesc>
 800b486:	4603      	mov	r3, r0
 800b488:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b48a:	7bbb      	ldrb	r3, [r7, #14]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d103      	bne.n	800b498 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2205      	movs	r2, #5
 800b494:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b496:	e097      	b.n	800b5c8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b498:	7bbb      	ldrb	r3, [r7, #14]
 800b49a:	2b03      	cmp	r3, #3
 800b49c:	f040 8094 	bne.w	800b5c8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	b2da      	uxtb	r2, r3
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b4b6:	2b03      	cmp	r3, #3
 800b4b8:	d903      	bls.n	800b4c2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	220d      	movs	r2, #13
 800b4be:	701a      	strb	r2, [r3, #0]
      break;
 800b4c0:	e082      	b.n	800b5c8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	795b      	ldrb	r3, [r3, #5]
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f001 f821 	bl	800c510 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	791b      	ldrb	r3, [r3, #4]
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f001 f81b 	bl	800c510 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	701a      	strb	r2, [r3, #0]
      break;
 800b4e6:	e06f      	b.n	800b5c8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d019      	beq.n	800b526 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b4fe:	23ff      	movs	r3, #255	; 0xff
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f000 f953 	bl	800b7ac <USBH_Get_StringDesc>
 800b506:	4603      	mov	r3, r0
 800b508:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b50a:	7bbb      	ldrb	r3, [r7, #14]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d103      	bne.n	800b518 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2206      	movs	r2, #6
 800b514:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b516:	e059      	b.n	800b5cc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b518:	7bbb      	ldrb	r3, [r7, #14]
 800b51a:	2b03      	cmp	r3, #3
 800b51c:	d156      	bne.n	800b5cc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2206      	movs	r2, #6
 800b522:	705a      	strb	r2, [r3, #1]
      break;
 800b524:	e052      	b.n	800b5cc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2206      	movs	r2, #6
 800b52a:	705a      	strb	r2, [r3, #1]
      break;
 800b52c:	e04e      	b.n	800b5cc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b534:	2b00      	cmp	r3, #0
 800b536:	d019      	beq.n	800b56c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b544:	23ff      	movs	r3, #255	; 0xff
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 f930 	bl	800b7ac <USBH_Get_StringDesc>
 800b54c:	4603      	mov	r3, r0
 800b54e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b550:	7bbb      	ldrb	r3, [r7, #14]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d103      	bne.n	800b55e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2207      	movs	r2, #7
 800b55a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b55c:	e038      	b.n	800b5d0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b55e:	7bbb      	ldrb	r3, [r7, #14]
 800b560:	2b03      	cmp	r3, #3
 800b562:	d135      	bne.n	800b5d0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2207      	movs	r2, #7
 800b568:	705a      	strb	r2, [r3, #1]
      break;
 800b56a:	e031      	b.n	800b5d0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2207      	movs	r2, #7
 800b570:	705a      	strb	r2, [r3, #1]
      break;
 800b572:	e02d      	b.n	800b5d0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d017      	beq.n	800b5ae <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b58a:	23ff      	movs	r3, #255	; 0xff
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 f90d 	bl	800b7ac <USBH_Get_StringDesc>
 800b592:	4603      	mov	r3, r0
 800b594:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b596:	7bbb      	ldrb	r3, [r7, #14]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d102      	bne.n	800b5a2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b59c:	2300      	movs	r3, #0
 800b59e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b5a0:	e018      	b.n	800b5d4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b5a2:	7bbb      	ldrb	r3, [r7, #14]
 800b5a4:	2b03      	cmp	r3, #3
 800b5a6:	d115      	bne.n	800b5d4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	73fb      	strb	r3, [r7, #15]
      break;
 800b5ac:	e012      	b.n	800b5d4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	73fb      	strb	r3, [r7, #15]
      break;
 800b5b2:	e00f      	b.n	800b5d4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b5b4:	bf00      	nop
 800b5b6:	e00e      	b.n	800b5d6 <USBH_HandleEnum+0x3be>
      break;
 800b5b8:	bf00      	nop
 800b5ba:	e00c      	b.n	800b5d6 <USBH_HandleEnum+0x3be>
      break;
 800b5bc:	bf00      	nop
 800b5be:	e00a      	b.n	800b5d6 <USBH_HandleEnum+0x3be>
      break;
 800b5c0:	bf00      	nop
 800b5c2:	e008      	b.n	800b5d6 <USBH_HandleEnum+0x3be>
      break;
 800b5c4:	bf00      	nop
 800b5c6:	e006      	b.n	800b5d6 <USBH_HandleEnum+0x3be>
      break;
 800b5c8:	bf00      	nop
 800b5ca:	e004      	b.n	800b5d6 <USBH_HandleEnum+0x3be>
      break;
 800b5cc:	bf00      	nop
 800b5ce:	e002      	b.n	800b5d6 <USBH_HandleEnum+0x3be>
      break;
 800b5d0:	bf00      	nop
 800b5d2:	e000      	b.n	800b5d6 <USBH_HandleEnum+0x3be>
      break;
 800b5d4:	bf00      	nop
  }
  return Status;
 800b5d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3710      	adds	r7, #16
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	683a      	ldr	r2, [r7, #0]
 800b5ee:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b5f2:	bf00      	nop
 800b5f4:	370c      	adds	r7, #12
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr

0800b5fe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b082      	sub	sp, #8
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b60c:	1c5a      	adds	r2, r3, #1
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 f804 	bl	800b622 <USBH_HandleSof>
}
 800b61a:	bf00      	nop
 800b61c:	3708      	adds	r7, #8
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b082      	sub	sp, #8
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	b2db      	uxtb	r3, r3
 800b630:	2b0b      	cmp	r3, #11
 800b632:	d10a      	bne.n	800b64a <USBH_HandleSof+0x28>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d005      	beq.n	800b64a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b644:	699b      	ldr	r3, [r3, #24]
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	4798      	blx	r3
  }
}
 800b64a:	bf00      	nop
 800b64c:	3708      	adds	r7, #8
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b652:	b480      	push	{r7}
 800b654:	b083      	sub	sp, #12
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2201      	movs	r2, #1
 800b65e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b662:	bf00      	nop
}
 800b664:	370c      	adds	r7, #12
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr

0800b66e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b66e:	b480      	push	{r7}
 800b670:	b083      	sub	sp, #12
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2200      	movs	r2, #0
 800b67a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b67e:	bf00      	nop
}
 800b680:	370c      	adds	r7, #12
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr

0800b68a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b68a:	b480      	push	{r7}
 800b68c:	b083      	sub	sp, #12
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2201      	movs	r2, #1
 800b696:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b6aa:	2300      	movs	r3, #0
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	370c      	adds	r7, #12
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr

0800b6b8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f001 f8c6 	bl	800c86a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	791b      	ldrb	r3, [r3, #4]
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f000 ff13 	bl	800c510 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	795b      	ldrb	r3, [r3, #5]
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 ff0d 	bl	800c510 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b6f6:	2300      	movs	r3, #0
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3708      	adds	r7, #8
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b086      	sub	sp, #24
 800b704:	af02      	add	r7, sp, #8
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	460b      	mov	r3, r1
 800b70a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800b70c:	887b      	ldrh	r3, [r7, #2]
 800b70e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b712:	d901      	bls.n	800b718 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b714:	2303      	movs	r3, #3
 800b716:	e01b      	b.n	800b750 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b71e:	887b      	ldrh	r3, [r7, #2]
 800b720:	9300      	str	r3, [sp, #0]
 800b722:	4613      	mov	r3, r2
 800b724:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b728:	2100      	movs	r1, #0
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 f872 	bl	800b814 <USBH_GetDescriptor>
 800b730:	4603      	mov	r3, r0
 800b732:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800b734:	7bfb      	ldrb	r3, [r7, #15]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d109      	bne.n	800b74e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b740:	887a      	ldrh	r2, [r7, #2]
 800b742:	4619      	mov	r1, r3
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 f929 	bl	800b99c <USBH_ParseDevDesc>
 800b74a:	4603      	mov	r3, r0
 800b74c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b74e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b750:	4618      	mov	r0, r3
 800b752:	3710      	adds	r7, #16
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b086      	sub	sp, #24
 800b75c:	af02      	add	r7, sp, #8
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	460b      	mov	r3, r1
 800b762:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	331c      	adds	r3, #28
 800b768:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800b76a:	887b      	ldrh	r3, [r7, #2]
 800b76c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b770:	d901      	bls.n	800b776 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b772:	2303      	movs	r3, #3
 800b774:	e016      	b.n	800b7a4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b776:	887b      	ldrh	r3, [r7, #2]
 800b778:	9300      	str	r3, [sp, #0]
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b780:	2100      	movs	r1, #0
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 f846 	bl	800b814 <USBH_GetDescriptor>
 800b788:	4603      	mov	r3, r0
 800b78a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b78c:	7bfb      	ldrb	r3, [r7, #15]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d107      	bne.n	800b7a2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b792:	887b      	ldrh	r3, [r7, #2]
 800b794:	461a      	mov	r2, r3
 800b796:	68b9      	ldr	r1, [r7, #8]
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 f9b3 	bl	800bb04 <USBH_ParseCfgDesc>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b7a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3710      	adds	r7, #16
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b088      	sub	sp, #32
 800b7b0:	af02      	add	r7, sp, #8
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	607a      	str	r2, [r7, #4]
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	72fb      	strb	r3, [r7, #11]
 800b7bc:	4613      	mov	r3, r2
 800b7be:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800b7c0:	893b      	ldrh	r3, [r7, #8]
 800b7c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7c6:	d802      	bhi.n	800b7ce <USBH_Get_StringDesc+0x22>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d101      	bne.n	800b7d2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b7ce:	2303      	movs	r3, #3
 800b7d0:	e01c      	b.n	800b80c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800b7d2:	7afb      	ldrb	r3, [r7, #11]
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b7da:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b7e2:	893b      	ldrh	r3, [r7, #8]
 800b7e4:	9300      	str	r3, [sp, #0]
 800b7e6:	460b      	mov	r3, r1
 800b7e8:	2100      	movs	r1, #0
 800b7ea:	68f8      	ldr	r0, [r7, #12]
 800b7ec:	f000 f812 	bl	800b814 <USBH_GetDescriptor>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b7f4:	7dfb      	ldrb	r3, [r7, #23]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d107      	bne.n	800b80a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b800:	893a      	ldrh	r2, [r7, #8]
 800b802:	6879      	ldr	r1, [r7, #4]
 800b804:	4618      	mov	r0, r3
 800b806:	f000 fb93 	bl	800bf30 <USBH_ParseStringDesc>
  }

  return status;
 800b80a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3718      	adds	r7, #24
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	607b      	str	r3, [r7, #4]
 800b81e:	460b      	mov	r3, r1
 800b820:	72fb      	strb	r3, [r7, #11]
 800b822:	4613      	mov	r3, r2
 800b824:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	789b      	ldrb	r3, [r3, #2]
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d11c      	bne.n	800b868 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b82e:	7afb      	ldrb	r3, [r7, #11]
 800b830:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b834:	b2da      	uxtb	r2, r3
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2206      	movs	r2, #6
 800b83e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	893a      	ldrh	r2, [r7, #8]
 800b844:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b846:	893b      	ldrh	r3, [r7, #8]
 800b848:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b84c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b850:	d104      	bne.n	800b85c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	f240 4209 	movw	r2, #1033	; 0x409
 800b858:	829a      	strh	r2, [r3, #20]
 800b85a:	e002      	b.n	800b862 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2200      	movs	r2, #0
 800b860:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	8b3a      	ldrh	r2, [r7, #24]
 800b866:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b868:	8b3b      	ldrh	r3, [r7, #24]
 800b86a:	461a      	mov	r2, r3
 800b86c:	6879      	ldr	r1, [r7, #4]
 800b86e:	68f8      	ldr	r0, [r7, #12]
 800b870:	f000 fbac 	bl	800bfcc <USBH_CtlReq>
 800b874:	4603      	mov	r3, r0
}
 800b876:	4618      	mov	r0, r3
 800b878:	3710      	adds	r7, #16
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}

0800b87e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b87e:	b580      	push	{r7, lr}
 800b880:	b082      	sub	sp, #8
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
 800b886:	460b      	mov	r3, r1
 800b888:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	789b      	ldrb	r3, [r3, #2]
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d10f      	bne.n	800b8b2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2200      	movs	r2, #0
 800b896:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2205      	movs	r2, #5
 800b89c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b89e:	78fb      	ldrb	r3, [r7, #3]
 800b8a0:	b29a      	uxth	r2, r3
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	2100      	movs	r1, #0
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 fb88 	bl	800bfcc <USBH_CtlReq>
 800b8bc:	4603      	mov	r3, r0
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3708      	adds	r7, #8
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b082      	sub	sp, #8
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	789b      	ldrb	r3, [r3, #2]
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d10e      	bne.n	800b8f8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2209      	movs	r2, #9
 800b8e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	887a      	ldrh	r2, [r7, #2]
 800b8ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	2100      	movs	r1, #0
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 fb65 	bl	800bfcc <USBH_CtlReq>
 800b902:	4603      	mov	r3, r0
}
 800b904:	4618      	mov	r0, r3
 800b906:	3708      	adds	r7, #8
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	460b      	mov	r3, r1
 800b916:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	789b      	ldrb	r3, [r3, #2]
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d10f      	bne.n	800b940 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2203      	movs	r2, #3
 800b92a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b92c:	78fb      	ldrb	r3, [r7, #3]
 800b92e:	b29a      	uxth	r2, r3
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2200      	movs	r2, #0
 800b938:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2200      	movs	r2, #0
 800b93e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b940:	2200      	movs	r2, #0
 800b942:	2100      	movs	r1, #0
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f000 fb41 	bl	800bfcc <USBH_CtlReq>
 800b94a:	4603      	mov	r3, r0
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3708      	adds	r7, #8
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	460b      	mov	r3, r1
 800b95e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	789b      	ldrb	r3, [r3, #2]
 800b964:	2b01      	cmp	r3, #1
 800b966:	d10f      	bne.n	800b988 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2202      	movs	r2, #2
 800b96c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2201      	movs	r2, #1
 800b972:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b97a:	78fb      	ldrb	r3, [r7, #3]
 800b97c:	b29a      	uxth	r2, r3
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2200      	movs	r2, #0
 800b986:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b988:	2200      	movs	r2, #0
 800b98a:	2100      	movs	r1, #0
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 fb1d 	bl	800bfcc <USBH_CtlReq>
 800b992:	4603      	mov	r3, r0
}
 800b994:	4618      	mov	r0, r3
 800b996:	3708      	adds	r7, #8
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b087      	sub	sp, #28
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	4613      	mov	r3, r2
 800b9a8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f203 3326 	addw	r3, r3, #806	; 0x326
 800b9b0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d101      	bne.n	800b9c0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800b9bc:	2302      	movs	r3, #2
 800b9be:	e098      	b.n	800baf2 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	781a      	ldrb	r2, [r3, #0]
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	785a      	ldrb	r2, [r3, #1]
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	3302      	adds	r3, #2
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	3303      	adds	r3, #3
 800b9dc:	781b      	ldrb	r3, [r3, #0]
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	021b      	lsls	r3, r3, #8
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	b29a      	uxth	r2, r3
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	791a      	ldrb	r2, [r3, #4]
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	795a      	ldrb	r2, [r3, #5]
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	799a      	ldrb	r2, [r3, #6]
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	79da      	ldrb	r2, [r3, #7]
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d004      	beq.n	800ba20 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d11b      	bne.n	800ba58 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	79db      	ldrb	r3, [r3, #7]
 800ba24:	2b20      	cmp	r3, #32
 800ba26:	dc0f      	bgt.n	800ba48 <USBH_ParseDevDesc+0xac>
 800ba28:	2b08      	cmp	r3, #8
 800ba2a:	db0f      	blt.n	800ba4c <USBH_ParseDevDesc+0xb0>
 800ba2c:	3b08      	subs	r3, #8
 800ba2e:	4a34      	ldr	r2, [pc, #208]	; (800bb00 <USBH_ParseDevDesc+0x164>)
 800ba30:	fa22 f303 	lsr.w	r3, r2, r3
 800ba34:	f003 0301 	and.w	r3, r3, #1
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	bf14      	ite	ne
 800ba3c:	2301      	movne	r3, #1
 800ba3e:	2300      	moveq	r3, #0
 800ba40:	b2db      	uxtb	r3, r3
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d106      	bne.n	800ba54 <USBH_ParseDevDesc+0xb8>
 800ba46:	e001      	b.n	800ba4c <USBH_ParseDevDesc+0xb0>
 800ba48:	2b40      	cmp	r3, #64	; 0x40
 800ba4a:	d003      	beq.n	800ba54 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	2208      	movs	r2, #8
 800ba50:	71da      	strb	r2, [r3, #7]
        break;
 800ba52:	e000      	b.n	800ba56 <USBH_ParseDevDesc+0xba>
        break;
 800ba54:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800ba56:	e00e      	b.n	800ba76 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ba5e:	2b02      	cmp	r3, #2
 800ba60:	d107      	bne.n	800ba72 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	79db      	ldrb	r3, [r3, #7]
 800ba66:	2b08      	cmp	r3, #8
 800ba68:	d005      	beq.n	800ba76 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	2208      	movs	r2, #8
 800ba6e:	71da      	strb	r2, [r3, #7]
 800ba70:	e001      	b.n	800ba76 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800ba72:	2303      	movs	r3, #3
 800ba74:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800ba76:	88fb      	ldrh	r3, [r7, #6]
 800ba78:	2b08      	cmp	r3, #8
 800ba7a:	d939      	bls.n	800baf0 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	3308      	adds	r3, #8
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	b29a      	uxth	r2, r3
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	3309      	adds	r3, #9
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	b29b      	uxth	r3, r3
 800ba8c:	021b      	lsls	r3, r3, #8
 800ba8e:	b29b      	uxth	r3, r3
 800ba90:	4313      	orrs	r3, r2
 800ba92:	b29a      	uxth	r2, r3
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	330a      	adds	r3, #10
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	330b      	adds	r3, #11
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	021b      	lsls	r3, r3, #8
 800baaa:	b29b      	uxth	r3, r3
 800baac:	4313      	orrs	r3, r2
 800baae:	b29a      	uxth	r2, r3
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	330c      	adds	r3, #12
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	b29a      	uxth	r2, r3
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	330d      	adds	r3, #13
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	021b      	lsls	r3, r3, #8
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	4313      	orrs	r3, r2
 800baca:	b29a      	uxth	r2, r3
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	7b9a      	ldrb	r2, [r3, #14]
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	7bda      	ldrb	r2, [r3, #15]
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	7c1a      	ldrb	r2, [r3, #16]
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	7c5a      	ldrb	r2, [r3, #17]
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800baf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	371c      	adds	r7, #28
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr
 800bafe:	bf00      	nop
 800bb00:	01000101 	.word	0x01000101

0800bb04 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b08c      	sub	sp, #48	; 0x30
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	4613      	mov	r3, r2
 800bb10:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bb18:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bb20:	2300      	movs	r3, #0
 800bb22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800bb26:	2300      	movs	r3, #0
 800bb28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d101      	bne.n	800bb36 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800bb32:	2302      	movs	r3, #2
 800bb34:	e0db      	b.n	800bcee <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	781a      	ldrb	r2, [r3, #0]
 800bb3e:	6a3b      	ldr	r3, [r7, #32]
 800bb40:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	785a      	ldrb	r2, [r3, #1]
 800bb46:	6a3b      	ldr	r3, [r7, #32]
 800bb48:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	3302      	adds	r3, #2
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	b29a      	uxth	r2, r3
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	3303      	adds	r3, #3
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	021b      	lsls	r3, r3, #8
 800bb5c:	b29b      	uxth	r3, r3
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb66:	bf28      	it	cs
 800bb68:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800bb6c:	b29a      	uxth	r2, r3
 800bb6e:	6a3b      	ldr	r3, [r7, #32]
 800bb70:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	791a      	ldrb	r2, [r3, #4]
 800bb76:	6a3b      	ldr	r3, [r7, #32]
 800bb78:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	795a      	ldrb	r2, [r3, #5]
 800bb7e:	6a3b      	ldr	r3, [r7, #32]
 800bb80:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	799a      	ldrb	r2, [r3, #6]
 800bb86:	6a3b      	ldr	r3, [r7, #32]
 800bb88:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	79da      	ldrb	r2, [r3, #7]
 800bb8e:	6a3b      	ldr	r3, [r7, #32]
 800bb90:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	7a1a      	ldrb	r2, [r3, #8]
 800bb96:	6a3b      	ldr	r3, [r7, #32]
 800bb98:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800bb9a:	6a3b      	ldr	r3, [r7, #32]
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	2b09      	cmp	r3, #9
 800bba0:	d002      	beq.n	800bba8 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800bba2:	6a3b      	ldr	r3, [r7, #32]
 800bba4:	2209      	movs	r2, #9
 800bba6:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bba8:	88fb      	ldrh	r3, [r7, #6]
 800bbaa:	2b09      	cmp	r3, #9
 800bbac:	f240 809d 	bls.w	800bcea <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800bbb0:	2309      	movs	r3, #9
 800bbb2:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bbb8:	e081      	b.n	800bcbe <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bbba:	f107 0316 	add.w	r3, r7, #22
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbc2:	f000 f9e8 	bl	800bf96 <USBH_GetNextDesc>
 800bbc6:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800bbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbca:	785b      	ldrb	r3, [r3, #1]
 800bbcc:	2b04      	cmp	r3, #4
 800bbce:	d176      	bne.n	800bcbe <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800bbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	2b09      	cmp	r3, #9
 800bbd6:	d002      	beq.n	800bbde <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800bbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbda:	2209      	movs	r2, #9
 800bbdc:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800bbde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbe2:	221a      	movs	r2, #26
 800bbe4:	fb02 f303 	mul.w	r3, r2, r3
 800bbe8:	3308      	adds	r3, #8
 800bbea:	6a3a      	ldr	r2, [r7, #32]
 800bbec:	4413      	add	r3, r2
 800bbee:	3302      	adds	r3, #2
 800bbf0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800bbf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbf4:	69f8      	ldr	r0, [r7, #28]
 800bbf6:	f000 f87e 	bl	800bcf6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800bc00:	2300      	movs	r3, #0
 800bc02:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bc04:	e043      	b.n	800bc8e <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bc06:	f107 0316 	add.w	r3, r7, #22
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc0e:	f000 f9c2 	bl	800bf96 <USBH_GetNextDesc>
 800bc12:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc16:	785b      	ldrb	r3, [r3, #1]
 800bc18:	2b05      	cmp	r3, #5
 800bc1a:	d138      	bne.n	800bc8e <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800bc1c:	69fb      	ldr	r3, [r7, #28]
 800bc1e:	795b      	ldrb	r3, [r3, #5]
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d113      	bne.n	800bc4c <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800bc24:	69fb      	ldr	r3, [r7, #28]
 800bc26:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800bc28:	2b02      	cmp	r3, #2
 800bc2a:	d003      	beq.n	800bc34 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800bc2c:	69fb      	ldr	r3, [r7, #28]
 800bc2e:	799b      	ldrb	r3, [r3, #6]
 800bc30:	2b03      	cmp	r3, #3
 800bc32:	d10b      	bne.n	800bc4c <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bc34:	69fb      	ldr	r3, [r7, #28]
 800bc36:	79db      	ldrb	r3, [r3, #7]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d10b      	bne.n	800bc54 <USBH_ParseCfgDesc+0x150>
 800bc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	2b09      	cmp	r3, #9
 800bc42:	d007      	beq.n	800bc54 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800bc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc46:	2209      	movs	r2, #9
 800bc48:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bc4a:	e003      	b.n	800bc54 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800bc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc4e:	2207      	movs	r2, #7
 800bc50:	701a      	strb	r2, [r3, #0]
 800bc52:	e000      	b.n	800bc56 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bc54:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800bc56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc5a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bc5e:	3201      	adds	r2, #1
 800bc60:	00d2      	lsls	r2, r2, #3
 800bc62:	211a      	movs	r1, #26
 800bc64:	fb01 f303 	mul.w	r3, r1, r3
 800bc68:	4413      	add	r3, r2
 800bc6a:	3308      	adds	r3, #8
 800bc6c:	6a3a      	ldr	r2, [r7, #32]
 800bc6e:	4413      	add	r3, r2
 800bc70:	3304      	adds	r3, #4
 800bc72:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800bc74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc76:	69b9      	ldr	r1, [r7, #24]
 800bc78:	68f8      	ldr	r0, [r7, #12]
 800bc7a:	f000 f870 	bl	800bd5e <USBH_ParseEPDesc>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800bc84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc88:	3301      	adds	r3, #1
 800bc8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bc8e:	69fb      	ldr	r3, [r7, #28]
 800bc90:	791b      	ldrb	r3, [r3, #4]
 800bc92:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d204      	bcs.n	800bca4 <USBH_ParseCfgDesc+0x1a0>
 800bc9a:	6a3b      	ldr	r3, [r7, #32]
 800bc9c:	885a      	ldrh	r2, [r3, #2]
 800bc9e:	8afb      	ldrh	r3, [r7, #22]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d8b0      	bhi.n	800bc06 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800bca4:	69fb      	ldr	r3, [r7, #28]
 800bca6:	791b      	ldrb	r3, [r3, #4]
 800bca8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d201      	bcs.n	800bcb4 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800bcb0:	2303      	movs	r3, #3
 800bcb2:	e01c      	b.n	800bcee <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800bcb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcb8:	3301      	adds	r3, #1
 800bcba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bcbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d805      	bhi.n	800bcd2 <USBH_ParseCfgDesc+0x1ce>
 800bcc6:	6a3b      	ldr	r3, [r7, #32]
 800bcc8:	885a      	ldrh	r2, [r3, #2]
 800bcca:	8afb      	ldrh	r3, [r7, #22]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	f63f af74 	bhi.w	800bbba <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800bcd2:	6a3b      	ldr	r3, [r7, #32]
 800bcd4:	791b      	ldrb	r3, [r3, #4]
 800bcd6:	2b02      	cmp	r3, #2
 800bcd8:	bf28      	it	cs
 800bcda:	2302      	movcs	r3, #2
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d201      	bcs.n	800bcea <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800bce6:	2303      	movs	r3, #3
 800bce8:	e001      	b.n	800bcee <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800bcea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3730      	adds	r7, #48	; 0x30
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}

0800bcf6 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800bcf6:	b480      	push	{r7}
 800bcf8:	b083      	sub	sp, #12
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6078      	str	r0, [r7, #4]
 800bcfe:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	781a      	ldrb	r2, [r3, #0]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	785a      	ldrb	r2, [r3, #1]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	789a      	ldrb	r2, [r3, #2]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	78da      	ldrb	r2, [r3, #3]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	3304      	adds	r3, #4
 800bd24:	781b      	ldrb	r3, [r3, #0]
 800bd26:	2b02      	cmp	r3, #2
 800bd28:	bf28      	it	cs
 800bd2a:	2302      	movcs	r3, #2
 800bd2c:	b2da      	uxtb	r2, r3
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	795a      	ldrb	r2, [r3, #5]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	799a      	ldrb	r2, [r3, #6]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	79da      	ldrb	r2, [r3, #7]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	7a1a      	ldrb	r2, [r3, #8]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	721a      	strb	r2, [r3, #8]
}
 800bd52:	bf00      	nop
 800bd54:	370c      	adds	r7, #12
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr

0800bd5e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800bd5e:	b480      	push	{r7}
 800bd60:	b087      	sub	sp, #28
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	60f8      	str	r0, [r7, #12]
 800bd66:	60b9      	str	r1, [r7, #8]
 800bd68:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	781a      	ldrb	r2, [r3, #0]
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	785a      	ldrb	r2, [r3, #1]
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	789a      	ldrb	r2, [r3, #2]
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	78da      	ldrb	r2, [r3, #3]
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	3304      	adds	r3, #4
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	b29a      	uxth	r2, r3
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	3305      	adds	r3, #5
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	b29b      	uxth	r3, r3
 800bd9e:	021b      	lsls	r3, r3, #8
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	4313      	orrs	r3, r2
 800bda4:	b29a      	uxth	r2, r3
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	799a      	ldrb	r2, [r3, #6]
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	889b      	ldrh	r3, [r3, #4]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d009      	beq.n	800bdce <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800bdbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdc2:	d804      	bhi.n	800bdce <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800bdc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdcc:	d901      	bls.n	800bdd2 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800bdce:	2303      	movs	r3, #3
 800bdd0:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d136      	bne.n	800be4a <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	78db      	ldrb	r3, [r3, #3]
 800bde0:	f003 0303 	and.w	r3, r3, #3
 800bde4:	2b02      	cmp	r3, #2
 800bde6:	d108      	bne.n	800bdfa <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	889b      	ldrh	r3, [r3, #4]
 800bdec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdf0:	f240 8097 	bls.w	800bf22 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bdf4:	2303      	movs	r3, #3
 800bdf6:	75fb      	strb	r3, [r7, #23]
 800bdf8:	e093      	b.n	800bf22 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	78db      	ldrb	r3, [r3, #3]
 800bdfe:	f003 0303 	and.w	r3, r3, #3
 800be02:	2b00      	cmp	r3, #0
 800be04:	d107      	bne.n	800be16 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	889b      	ldrh	r3, [r3, #4]
 800be0a:	2b40      	cmp	r3, #64	; 0x40
 800be0c:	f240 8089 	bls.w	800bf22 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800be10:	2303      	movs	r3, #3
 800be12:	75fb      	strb	r3, [r7, #23]
 800be14:	e085      	b.n	800bf22 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	78db      	ldrb	r3, [r3, #3]
 800be1a:	f003 0303 	and.w	r3, r3, #3
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d005      	beq.n	800be2e <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	78db      	ldrb	r3, [r3, #3]
 800be26:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800be2a:	2b03      	cmp	r3, #3
 800be2c:	d10a      	bne.n	800be44 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	799b      	ldrb	r3, [r3, #6]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d003      	beq.n	800be3e <USBH_ParseEPDesc+0xe0>
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	799b      	ldrb	r3, [r3, #6]
 800be3a:	2b10      	cmp	r3, #16
 800be3c:	d970      	bls.n	800bf20 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800be3e:	2303      	movs	r3, #3
 800be40:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800be42:	e06d      	b.n	800bf20 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800be44:	2303      	movs	r3, #3
 800be46:	75fb      	strb	r3, [r7, #23]
 800be48:	e06b      	b.n	800bf22 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800be50:	2b01      	cmp	r3, #1
 800be52:	d13c      	bne.n	800bece <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	78db      	ldrb	r3, [r3, #3]
 800be58:	f003 0303 	and.w	r3, r3, #3
 800be5c:	2b02      	cmp	r3, #2
 800be5e:	d005      	beq.n	800be6c <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	78db      	ldrb	r3, [r3, #3]
 800be64:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d106      	bne.n	800be7a <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	889b      	ldrh	r3, [r3, #4]
 800be70:	2b40      	cmp	r3, #64	; 0x40
 800be72:	d956      	bls.n	800bf22 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800be74:	2303      	movs	r3, #3
 800be76:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800be78:	e053      	b.n	800bf22 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	78db      	ldrb	r3, [r3, #3]
 800be7e:	f003 0303 	and.w	r3, r3, #3
 800be82:	2b01      	cmp	r3, #1
 800be84:	d10e      	bne.n	800bea4 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	799b      	ldrb	r3, [r3, #6]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d007      	beq.n	800be9e <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800be92:	2b10      	cmp	r3, #16
 800be94:	d803      	bhi.n	800be9e <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800be9a:	2b40      	cmp	r3, #64	; 0x40
 800be9c:	d941      	bls.n	800bf22 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800be9e:	2303      	movs	r3, #3
 800bea0:	75fb      	strb	r3, [r7, #23]
 800bea2:	e03e      	b.n	800bf22 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	78db      	ldrb	r3, [r3, #3]
 800bea8:	f003 0303 	and.w	r3, r3, #3
 800beac:	2b03      	cmp	r3, #3
 800beae:	d10b      	bne.n	800bec8 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	799b      	ldrb	r3, [r3, #6]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d004      	beq.n	800bec2 <USBH_ParseEPDesc+0x164>
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	889b      	ldrh	r3, [r3, #4]
 800bebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bec0:	d32f      	bcc.n	800bf22 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bec2:	2303      	movs	r3, #3
 800bec4:	75fb      	strb	r3, [r7, #23]
 800bec6:	e02c      	b.n	800bf22 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800bec8:	2303      	movs	r3, #3
 800beca:	75fb      	strb	r3, [r7, #23]
 800becc:	e029      	b.n	800bf22 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bed4:	2b02      	cmp	r3, #2
 800bed6:	d120      	bne.n	800bf1a <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	78db      	ldrb	r3, [r3, #3]
 800bedc:	f003 0303 	and.w	r3, r3, #3
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d106      	bne.n	800bef2 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	889b      	ldrh	r3, [r3, #4]
 800bee8:	2b08      	cmp	r3, #8
 800beea:	d01a      	beq.n	800bf22 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800beec:	2303      	movs	r3, #3
 800beee:	75fb      	strb	r3, [r7, #23]
 800bef0:	e017      	b.n	800bf22 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	78db      	ldrb	r3, [r3, #3]
 800bef6:	f003 0303 	and.w	r3, r3, #3
 800befa:	2b03      	cmp	r3, #3
 800befc:	d10a      	bne.n	800bf14 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	799b      	ldrb	r3, [r3, #6]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d003      	beq.n	800bf0e <USBH_ParseEPDesc+0x1b0>
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	889b      	ldrh	r3, [r3, #4]
 800bf0a:	2b08      	cmp	r3, #8
 800bf0c:	d909      	bls.n	800bf22 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bf0e:	2303      	movs	r3, #3
 800bf10:	75fb      	strb	r3, [r7, #23]
 800bf12:	e006      	b.n	800bf22 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800bf14:	2303      	movs	r3, #3
 800bf16:	75fb      	strb	r3, [r7, #23]
 800bf18:	e003      	b.n	800bf22 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800bf1a:	2303      	movs	r3, #3
 800bf1c:	75fb      	strb	r3, [r7, #23]
 800bf1e:	e000      	b.n	800bf22 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bf20:	bf00      	nop
  }

  return status;
 800bf22:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	371c      	adds	r7, #28
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr

0800bf30 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b087      	sub	sp, #28
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	3301      	adds	r3, #1
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	2b03      	cmp	r3, #3
 800bf46:	d120      	bne.n	800bf8a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	1e9a      	subs	r2, r3, #2
 800bf4e:	88fb      	ldrh	r3, [r7, #6]
 800bf50:	4293      	cmp	r3, r2
 800bf52:	bf28      	it	cs
 800bf54:	4613      	movcs	r3, r2
 800bf56:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	3302      	adds	r3, #2
 800bf5c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800bf5e:	2300      	movs	r3, #0
 800bf60:	82fb      	strh	r3, [r7, #22]
 800bf62:	e00b      	b.n	800bf7c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bf64:	8afb      	ldrh	r3, [r7, #22]
 800bf66:	68fa      	ldr	r2, [r7, #12]
 800bf68:	4413      	add	r3, r2
 800bf6a:	781a      	ldrb	r2, [r3, #0]
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	3301      	adds	r3, #1
 800bf74:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bf76:	8afb      	ldrh	r3, [r7, #22]
 800bf78:	3302      	adds	r3, #2
 800bf7a:	82fb      	strh	r3, [r7, #22]
 800bf7c:	8afa      	ldrh	r2, [r7, #22]
 800bf7e:	8abb      	ldrh	r3, [r7, #20]
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d3ef      	bcc.n	800bf64 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	2200      	movs	r2, #0
 800bf88:	701a      	strb	r2, [r3, #0]
  }
}
 800bf8a:	bf00      	nop
 800bf8c:	371c      	adds	r7, #28
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf94:	4770      	bx	lr

0800bf96 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bf96:	b480      	push	{r7}
 800bf98:	b085      	sub	sp, #20
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
 800bf9e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	881a      	ldrh	r2, [r3, #0]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	b29b      	uxth	r3, r3
 800bfaa:	4413      	add	r3, r2
 800bfac:	b29a      	uxth	r2, r3
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	4413      	add	r3, r2
 800bfbc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3714      	adds	r7, #20
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b086      	sub	sp, #24
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	60b9      	str	r1, [r7, #8]
 800bfd6:	4613      	mov	r3, r2
 800bfd8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	789b      	ldrb	r3, [r3, #2]
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d002      	beq.n	800bfec <USBH_CtlReq+0x20>
 800bfe6:	2b02      	cmp	r3, #2
 800bfe8:	d00f      	beq.n	800c00a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800bfea:	e027      	b.n	800c03c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	68ba      	ldr	r2, [r7, #8]
 800bff0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	88fa      	ldrh	r2, [r7, #6]
 800bff6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2201      	movs	r2, #1
 800bffc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2202      	movs	r2, #2
 800c002:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c004:	2301      	movs	r3, #1
 800c006:	75fb      	strb	r3, [r7, #23]
      break;
 800c008:	e018      	b.n	800c03c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c00a:	68f8      	ldr	r0, [r7, #12]
 800c00c:	f000 f81c 	bl	800c048 <USBH_HandleControl>
 800c010:	4603      	mov	r3, r0
 800c012:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c014:	7dfb      	ldrb	r3, [r7, #23]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d002      	beq.n	800c020 <USBH_CtlReq+0x54>
 800c01a:	7dfb      	ldrb	r3, [r7, #23]
 800c01c:	2b03      	cmp	r3, #3
 800c01e:	d106      	bne.n	800c02e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	2201      	movs	r2, #1
 800c024:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2200      	movs	r2, #0
 800c02a:	761a      	strb	r2, [r3, #24]
      break;
 800c02c:	e005      	b.n	800c03a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c02e:	7dfb      	ldrb	r3, [r7, #23]
 800c030:	2b02      	cmp	r3, #2
 800c032:	d102      	bne.n	800c03a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2201      	movs	r2, #1
 800c038:	709a      	strb	r2, [r3, #2]
      break;
 800c03a:	bf00      	nop
  }
  return status;
 800c03c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3718      	adds	r7, #24
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
	...

0800c048 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b086      	sub	sp, #24
 800c04c:	af02      	add	r7, sp, #8
 800c04e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c050:	2301      	movs	r3, #1
 800c052:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c054:	2300      	movs	r3, #0
 800c056:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	7e1b      	ldrb	r3, [r3, #24]
 800c05c:	3b01      	subs	r3, #1
 800c05e:	2b0a      	cmp	r3, #10
 800c060:	f200 8156 	bhi.w	800c310 <USBH_HandleControl+0x2c8>
 800c064:	a201      	add	r2, pc, #4	; (adr r2, 800c06c <USBH_HandleControl+0x24>)
 800c066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c06a:	bf00      	nop
 800c06c:	0800c099 	.word	0x0800c099
 800c070:	0800c0b3 	.word	0x0800c0b3
 800c074:	0800c11d 	.word	0x0800c11d
 800c078:	0800c143 	.word	0x0800c143
 800c07c:	0800c17b 	.word	0x0800c17b
 800c080:	0800c1a5 	.word	0x0800c1a5
 800c084:	0800c1f7 	.word	0x0800c1f7
 800c088:	0800c219 	.word	0x0800c219
 800c08c:	0800c255 	.word	0x0800c255
 800c090:	0800c27b 	.word	0x0800c27b
 800c094:	0800c2b9 	.word	0x0800c2b9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f103 0110 	add.w	r1, r3, #16
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	795b      	ldrb	r3, [r3, #5]
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f000 f943 	bl	800c330 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2202      	movs	r2, #2
 800c0ae:	761a      	strb	r2, [r3, #24]
      break;
 800c0b0:	e139      	b.n	800c326 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	795b      	ldrb	r3, [r3, #5]
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f000 fcc5 	bl	800ca48 <USBH_LL_GetURBState>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c0c2:	7bbb      	ldrb	r3, [r7, #14]
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d11e      	bne.n	800c106 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	7c1b      	ldrb	r3, [r3, #16]
 800c0cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c0d0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	8adb      	ldrh	r3, [r3, #22]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d00a      	beq.n	800c0f0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c0da:	7b7b      	ldrb	r3, [r7, #13]
 800c0dc:	2b80      	cmp	r3, #128	; 0x80
 800c0de:	d103      	bne.n	800c0e8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2203      	movs	r2, #3
 800c0e4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c0e6:	e115      	b.n	800c314 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2205      	movs	r2, #5
 800c0ec:	761a      	strb	r2, [r3, #24]
      break;
 800c0ee:	e111      	b.n	800c314 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c0f0:	7b7b      	ldrb	r3, [r7, #13]
 800c0f2:	2b80      	cmp	r3, #128	; 0x80
 800c0f4:	d103      	bne.n	800c0fe <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2209      	movs	r2, #9
 800c0fa:	761a      	strb	r2, [r3, #24]
      break;
 800c0fc:	e10a      	b.n	800c314 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2207      	movs	r2, #7
 800c102:	761a      	strb	r2, [r3, #24]
      break;
 800c104:	e106      	b.n	800c314 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c106:	7bbb      	ldrb	r3, [r7, #14]
 800c108:	2b04      	cmp	r3, #4
 800c10a:	d003      	beq.n	800c114 <USBH_HandleControl+0xcc>
 800c10c:	7bbb      	ldrb	r3, [r7, #14]
 800c10e:	2b02      	cmp	r3, #2
 800c110:	f040 8100 	bne.w	800c314 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	220b      	movs	r2, #11
 800c118:	761a      	strb	r2, [r3, #24]
      break;
 800c11a:	e0fb      	b.n	800c314 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c122:	b29a      	uxth	r2, r3
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6899      	ldr	r1, [r3, #8]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	899a      	ldrh	r2, [r3, #12]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	791b      	ldrb	r3, [r3, #4]
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f000 f93a 	bl	800c3ae <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2204      	movs	r2, #4
 800c13e:	761a      	strb	r2, [r3, #24]
      break;
 800c140:	e0f1      	b.n	800c326 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	791b      	ldrb	r3, [r3, #4]
 800c146:	4619      	mov	r1, r3
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f000 fc7d 	bl	800ca48 <USBH_LL_GetURBState>
 800c14e:	4603      	mov	r3, r0
 800c150:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c152:	7bbb      	ldrb	r3, [r7, #14]
 800c154:	2b01      	cmp	r3, #1
 800c156:	d102      	bne.n	800c15e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2209      	movs	r2, #9
 800c15c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c15e:	7bbb      	ldrb	r3, [r7, #14]
 800c160:	2b05      	cmp	r3, #5
 800c162:	d102      	bne.n	800c16a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c164:	2303      	movs	r3, #3
 800c166:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c168:	e0d6      	b.n	800c318 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c16a:	7bbb      	ldrb	r3, [r7, #14]
 800c16c:	2b04      	cmp	r3, #4
 800c16e:	f040 80d3 	bne.w	800c318 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	220b      	movs	r2, #11
 800c176:	761a      	strb	r2, [r3, #24]
      break;
 800c178:	e0ce      	b.n	800c318 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6899      	ldr	r1, [r3, #8]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	899a      	ldrh	r2, [r3, #12]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	795b      	ldrb	r3, [r3, #5]
 800c186:	2001      	movs	r0, #1
 800c188:	9000      	str	r0, [sp, #0]
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 f8ea 	bl	800c364 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c196:	b29a      	uxth	r2, r3
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2206      	movs	r2, #6
 800c1a0:	761a      	strb	r2, [r3, #24]
      break;
 800c1a2:	e0c0      	b.n	800c326 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	795b      	ldrb	r3, [r3, #5]
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 fc4c 	bl	800ca48 <USBH_LL_GetURBState>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c1b4:	7bbb      	ldrb	r3, [r7, #14]
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	d103      	bne.n	800c1c2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2207      	movs	r2, #7
 800c1be:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c1c0:	e0ac      	b.n	800c31c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c1c2:	7bbb      	ldrb	r3, [r7, #14]
 800c1c4:	2b05      	cmp	r3, #5
 800c1c6:	d105      	bne.n	800c1d4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	220c      	movs	r2, #12
 800c1cc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c1ce:	2303      	movs	r3, #3
 800c1d0:	73fb      	strb	r3, [r7, #15]
      break;
 800c1d2:	e0a3      	b.n	800c31c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c1d4:	7bbb      	ldrb	r3, [r7, #14]
 800c1d6:	2b02      	cmp	r3, #2
 800c1d8:	d103      	bne.n	800c1e2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2205      	movs	r2, #5
 800c1de:	761a      	strb	r2, [r3, #24]
      break;
 800c1e0:	e09c      	b.n	800c31c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c1e2:	7bbb      	ldrb	r3, [r7, #14]
 800c1e4:	2b04      	cmp	r3, #4
 800c1e6:	f040 8099 	bne.w	800c31c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	220b      	movs	r2, #11
 800c1ee:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c1f0:	2302      	movs	r3, #2
 800c1f2:	73fb      	strb	r3, [r7, #15]
      break;
 800c1f4:	e092      	b.n	800c31c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	791b      	ldrb	r3, [r3, #4]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	2100      	movs	r1, #0
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f000 f8d5 	bl	800c3ae <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c20a:	b29a      	uxth	r2, r3
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2208      	movs	r2, #8
 800c214:	761a      	strb	r2, [r3, #24]

      break;
 800c216:	e086      	b.n	800c326 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	791b      	ldrb	r3, [r3, #4]
 800c21c:	4619      	mov	r1, r3
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 fc12 	bl	800ca48 <USBH_LL_GetURBState>
 800c224:	4603      	mov	r3, r0
 800c226:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c228:	7bbb      	ldrb	r3, [r7, #14]
 800c22a:	2b01      	cmp	r3, #1
 800c22c:	d105      	bne.n	800c23a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	220d      	movs	r2, #13
 800c232:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c234:	2300      	movs	r3, #0
 800c236:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c238:	e072      	b.n	800c320 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c23a:	7bbb      	ldrb	r3, [r7, #14]
 800c23c:	2b04      	cmp	r3, #4
 800c23e:	d103      	bne.n	800c248 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	220b      	movs	r2, #11
 800c244:	761a      	strb	r2, [r3, #24]
      break;
 800c246:	e06b      	b.n	800c320 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c248:	7bbb      	ldrb	r3, [r7, #14]
 800c24a:	2b05      	cmp	r3, #5
 800c24c:	d168      	bne.n	800c320 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c24e:	2303      	movs	r3, #3
 800c250:	73fb      	strb	r3, [r7, #15]
      break;
 800c252:	e065      	b.n	800c320 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	795b      	ldrb	r3, [r3, #5]
 800c258:	2201      	movs	r2, #1
 800c25a:	9200      	str	r2, [sp, #0]
 800c25c:	2200      	movs	r2, #0
 800c25e:	2100      	movs	r1, #0
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f000 f87f 	bl	800c364 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c26c:	b29a      	uxth	r2, r3
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	220a      	movs	r2, #10
 800c276:	761a      	strb	r2, [r3, #24]
      break;
 800c278:	e055      	b.n	800c326 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	795b      	ldrb	r3, [r3, #5]
 800c27e:	4619      	mov	r1, r3
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f000 fbe1 	bl	800ca48 <USBH_LL_GetURBState>
 800c286:	4603      	mov	r3, r0
 800c288:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c28a:	7bbb      	ldrb	r3, [r7, #14]
 800c28c:	2b01      	cmp	r3, #1
 800c28e:	d105      	bne.n	800c29c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c290:	2300      	movs	r3, #0
 800c292:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	220d      	movs	r2, #13
 800c298:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c29a:	e043      	b.n	800c324 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c29c:	7bbb      	ldrb	r3, [r7, #14]
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	d103      	bne.n	800c2aa <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2209      	movs	r2, #9
 800c2a6:	761a      	strb	r2, [r3, #24]
      break;
 800c2a8:	e03c      	b.n	800c324 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c2aa:	7bbb      	ldrb	r3, [r7, #14]
 800c2ac:	2b04      	cmp	r3, #4
 800c2ae:	d139      	bne.n	800c324 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	220b      	movs	r2, #11
 800c2b4:	761a      	strb	r2, [r3, #24]
      break;
 800c2b6:	e035      	b.n	800c324 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	7e5b      	ldrb	r3, [r3, #25]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	b2da      	uxtb	r2, r3
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	765a      	strb	r2, [r3, #25]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	7e5b      	ldrb	r3, [r3, #25]
 800c2c8:	2b02      	cmp	r3, #2
 800c2ca:	d806      	bhi.n	800c2da <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c2d8:	e025      	b.n	800c326 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c2e0:	2106      	movs	r1, #6
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	795b      	ldrb	r3, [r3, #5]
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 f90c 	bl	800c510 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	791b      	ldrb	r3, [r3, #4]
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 f906 	bl	800c510 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2200      	movs	r2, #0
 800c308:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c30a:	2302      	movs	r3, #2
 800c30c:	73fb      	strb	r3, [r7, #15]
      break;
 800c30e:	e00a      	b.n	800c326 <USBH_HandleControl+0x2de>

    default:
      break;
 800c310:	bf00      	nop
 800c312:	e008      	b.n	800c326 <USBH_HandleControl+0x2de>
      break;
 800c314:	bf00      	nop
 800c316:	e006      	b.n	800c326 <USBH_HandleControl+0x2de>
      break;
 800c318:	bf00      	nop
 800c31a:	e004      	b.n	800c326 <USBH_HandleControl+0x2de>
      break;
 800c31c:	bf00      	nop
 800c31e:	e002      	b.n	800c326 <USBH_HandleControl+0x2de>
      break;
 800c320:	bf00      	nop
 800c322:	e000      	b.n	800c326 <USBH_HandleControl+0x2de>
      break;
 800c324:	bf00      	nop
  }

  return status;
 800c326:	7bfb      	ldrb	r3, [r7, #15]
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3710      	adds	r7, #16
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b088      	sub	sp, #32
 800c334:	af04      	add	r7, sp, #16
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	4613      	mov	r3, r2
 800c33c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c33e:	79f9      	ldrb	r1, [r7, #7]
 800c340:	2300      	movs	r3, #0
 800c342:	9303      	str	r3, [sp, #12]
 800c344:	2308      	movs	r3, #8
 800c346:	9302      	str	r3, [sp, #8]
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	9301      	str	r3, [sp, #4]
 800c34c:	2300      	movs	r3, #0
 800c34e:	9300      	str	r3, [sp, #0]
 800c350:	2300      	movs	r3, #0
 800c352:	2200      	movs	r2, #0
 800c354:	68f8      	ldr	r0, [r7, #12]
 800c356:	f000 fb46 	bl	800c9e6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c35a:	2300      	movs	r3, #0
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3710      	adds	r7, #16
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b088      	sub	sp, #32
 800c368:	af04      	add	r7, sp, #16
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	4611      	mov	r1, r2
 800c370:	461a      	mov	r2, r3
 800c372:	460b      	mov	r3, r1
 800c374:	80fb      	strh	r3, [r7, #6]
 800c376:	4613      	mov	r3, r2
 800c378:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c380:	2b00      	cmp	r3, #0
 800c382:	d001      	beq.n	800c388 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c384:	2300      	movs	r3, #0
 800c386:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c388:	7979      	ldrb	r1, [r7, #5]
 800c38a:	7e3b      	ldrb	r3, [r7, #24]
 800c38c:	9303      	str	r3, [sp, #12]
 800c38e:	88fb      	ldrh	r3, [r7, #6]
 800c390:	9302      	str	r3, [sp, #8]
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	9301      	str	r3, [sp, #4]
 800c396:	2301      	movs	r3, #1
 800c398:	9300      	str	r3, [sp, #0]
 800c39a:	2300      	movs	r3, #0
 800c39c:	2200      	movs	r2, #0
 800c39e:	68f8      	ldr	r0, [r7, #12]
 800c3a0:	f000 fb21 	bl	800c9e6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c3a4:	2300      	movs	r3, #0
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3710      	adds	r7, #16
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b088      	sub	sp, #32
 800c3b2:	af04      	add	r7, sp, #16
 800c3b4:	60f8      	str	r0, [r7, #12]
 800c3b6:	60b9      	str	r1, [r7, #8]
 800c3b8:	4611      	mov	r1, r2
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	460b      	mov	r3, r1
 800c3be:	80fb      	strh	r3, [r7, #6]
 800c3c0:	4613      	mov	r3, r2
 800c3c2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c3c4:	7979      	ldrb	r1, [r7, #5]
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	9303      	str	r3, [sp, #12]
 800c3ca:	88fb      	ldrh	r3, [r7, #6]
 800c3cc:	9302      	str	r3, [sp, #8]
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	9301      	str	r3, [sp, #4]
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	9300      	str	r3, [sp, #0]
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	2201      	movs	r2, #1
 800c3da:	68f8      	ldr	r0, [r7, #12]
 800c3dc:	f000 fb03 	bl	800c9e6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c3e0:	2300      	movs	r3, #0

}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3710      	adds	r7, #16
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}

0800c3ea <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c3ea:	b580      	push	{r7, lr}
 800c3ec:	b088      	sub	sp, #32
 800c3ee:	af04      	add	r7, sp, #16
 800c3f0:	60f8      	str	r0, [r7, #12]
 800c3f2:	60b9      	str	r1, [r7, #8]
 800c3f4:	4611      	mov	r1, r2
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	80fb      	strh	r3, [r7, #6]
 800c3fc:	4613      	mov	r3, r2
 800c3fe:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c406:	2b00      	cmp	r3, #0
 800c408:	d001      	beq.n	800c40e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c40a:	2300      	movs	r3, #0
 800c40c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c40e:	7979      	ldrb	r1, [r7, #5]
 800c410:	7e3b      	ldrb	r3, [r7, #24]
 800c412:	9303      	str	r3, [sp, #12]
 800c414:	88fb      	ldrh	r3, [r7, #6]
 800c416:	9302      	str	r3, [sp, #8]
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	9301      	str	r3, [sp, #4]
 800c41c:	2301      	movs	r3, #1
 800c41e:	9300      	str	r3, [sp, #0]
 800c420:	2302      	movs	r3, #2
 800c422:	2200      	movs	r2, #0
 800c424:	68f8      	ldr	r0, [r7, #12]
 800c426:	f000 fade 	bl	800c9e6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c42a:	2300      	movs	r3, #0
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3710      	adds	r7, #16
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}

0800c434 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b088      	sub	sp, #32
 800c438:	af04      	add	r7, sp, #16
 800c43a:	60f8      	str	r0, [r7, #12]
 800c43c:	60b9      	str	r1, [r7, #8]
 800c43e:	4611      	mov	r1, r2
 800c440:	461a      	mov	r2, r3
 800c442:	460b      	mov	r3, r1
 800c444:	80fb      	strh	r3, [r7, #6]
 800c446:	4613      	mov	r3, r2
 800c448:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c44a:	7979      	ldrb	r1, [r7, #5]
 800c44c:	2300      	movs	r3, #0
 800c44e:	9303      	str	r3, [sp, #12]
 800c450:	88fb      	ldrh	r3, [r7, #6]
 800c452:	9302      	str	r3, [sp, #8]
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	9301      	str	r3, [sp, #4]
 800c458:	2301      	movs	r3, #1
 800c45a:	9300      	str	r3, [sp, #0]
 800c45c:	2302      	movs	r3, #2
 800c45e:	2201      	movs	r2, #1
 800c460:	68f8      	ldr	r0, [r7, #12]
 800c462:	f000 fac0 	bl	800c9e6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c466:	2300      	movs	r3, #0
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3710      	adds	r7, #16
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b086      	sub	sp, #24
 800c474:	af04      	add	r7, sp, #16
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	4608      	mov	r0, r1
 800c47a:	4611      	mov	r1, r2
 800c47c:	461a      	mov	r2, r3
 800c47e:	4603      	mov	r3, r0
 800c480:	70fb      	strb	r3, [r7, #3]
 800c482:	460b      	mov	r3, r1
 800c484:	70bb      	strb	r3, [r7, #2]
 800c486:	4613      	mov	r3, r2
 800c488:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c48a:	7878      	ldrb	r0, [r7, #1]
 800c48c:	78ba      	ldrb	r2, [r7, #2]
 800c48e:	78f9      	ldrb	r1, [r7, #3]
 800c490:	8b3b      	ldrh	r3, [r7, #24]
 800c492:	9302      	str	r3, [sp, #8]
 800c494:	7d3b      	ldrb	r3, [r7, #20]
 800c496:	9301      	str	r3, [sp, #4]
 800c498:	7c3b      	ldrb	r3, [r7, #16]
 800c49a:	9300      	str	r3, [sp, #0]
 800c49c:	4603      	mov	r3, r0
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f000 fa53 	bl	800c94a <USBH_LL_OpenPipe>

  return USBH_OK;
 800c4a4:	2300      	movs	r3, #0
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3708      	adds	r7, #8
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}

0800c4ae <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c4ae:	b580      	push	{r7, lr}
 800c4b0:	b082      	sub	sp, #8
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c4ba:	78fb      	ldrb	r3, [r7, #3]
 800c4bc:	4619      	mov	r1, r3
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f000 fa72 	bl	800c9a8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c4c4:	2300      	movs	r3, #0
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3708      	adds	r7, #8
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}

0800c4ce <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c4ce:	b580      	push	{r7, lr}
 800c4d0:	b084      	sub	sp, #16
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 f836 	bl	800c54c <USBH_GetFreePipe>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c4e4:	89fb      	ldrh	r3, [r7, #14]
 800c4e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d00a      	beq.n	800c504 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c4ee:	78fa      	ldrb	r2, [r7, #3]
 800c4f0:	89fb      	ldrh	r3, [r7, #14]
 800c4f2:	f003 030f 	and.w	r3, r3, #15
 800c4f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c4fa:	6879      	ldr	r1, [r7, #4]
 800c4fc:	33e0      	adds	r3, #224	; 0xe0
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	440b      	add	r3, r1
 800c502:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c504:	89fb      	ldrh	r3, [r7, #14]
 800c506:	b2db      	uxtb	r3, r3
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3710      	adds	r7, #16
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c510:	b480      	push	{r7}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	460b      	mov	r3, r1
 800c51a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c51c:	78fb      	ldrb	r3, [r7, #3]
 800c51e:	2b0f      	cmp	r3, #15
 800c520:	d80d      	bhi.n	800c53e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c522:	78fb      	ldrb	r3, [r7, #3]
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	33e0      	adds	r3, #224	; 0xe0
 800c528:	009b      	lsls	r3, r3, #2
 800c52a:	4413      	add	r3, r2
 800c52c:	685a      	ldr	r2, [r3, #4]
 800c52e:	78fb      	ldrb	r3, [r7, #3]
 800c530:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c534:	6879      	ldr	r1, [r7, #4]
 800c536:	33e0      	adds	r3, #224	; 0xe0
 800c538:	009b      	lsls	r3, r3, #2
 800c53a:	440b      	add	r3, r1
 800c53c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c53e:	2300      	movs	r3, #0
}
 800c540:	4618      	mov	r0, r3
 800c542:	370c      	adds	r7, #12
 800c544:	46bd      	mov	sp, r7
 800c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54a:	4770      	bx	lr

0800c54c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c54c:	b480      	push	{r7}
 800c54e:	b085      	sub	sp, #20
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c554:	2300      	movs	r3, #0
 800c556:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c558:	2300      	movs	r3, #0
 800c55a:	73fb      	strb	r3, [r7, #15]
 800c55c:	e00f      	b.n	800c57e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c55e:	7bfb      	ldrb	r3, [r7, #15]
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	33e0      	adds	r3, #224	; 0xe0
 800c564:	009b      	lsls	r3, r3, #2
 800c566:	4413      	add	r3, r2
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d102      	bne.n	800c578 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c572:	7bfb      	ldrb	r3, [r7, #15]
 800c574:	b29b      	uxth	r3, r3
 800c576:	e007      	b.n	800c588 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c578:	7bfb      	ldrb	r3, [r7, #15]
 800c57a:	3301      	adds	r3, #1
 800c57c:	73fb      	strb	r3, [r7, #15]
 800c57e:	7bfb      	ldrb	r3, [r7, #15]
 800c580:	2b0f      	cmp	r3, #15
 800c582:	d9ec      	bls.n	800c55e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c584:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3714      	adds	r7, #20
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr

0800c594 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c598:	2201      	movs	r2, #1
 800c59a:	490e      	ldr	r1, [pc, #56]	; (800c5d4 <MX_USB_HOST_Init+0x40>)
 800c59c:	480e      	ldr	r0, [pc, #56]	; (800c5d8 <MX_USB_HOST_Init+0x44>)
 800c59e:	f7fe fb05 	bl	800abac <USBH_Init>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d001      	beq.n	800c5ac <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c5a8:	f7f5 fddc 	bl	8002164 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c5ac:	490b      	ldr	r1, [pc, #44]	; (800c5dc <MX_USB_HOST_Init+0x48>)
 800c5ae:	480a      	ldr	r0, [pc, #40]	; (800c5d8 <MX_USB_HOST_Init+0x44>)
 800c5b0:	f7fe fba9 	bl	800ad06 <USBH_RegisterClass>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d001      	beq.n	800c5be <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c5ba:	f7f5 fdd3 	bl	8002164 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c5be:	4806      	ldr	r0, [pc, #24]	; (800c5d8 <MX_USB_HOST_Init+0x44>)
 800c5c0:	f7fe fc2d 	bl	800ae1e <USBH_Start>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d001      	beq.n	800c5ce <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c5ca:	f7f5 fdcb 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c5ce:	bf00      	nop
 800c5d0:	bd80      	pop	{r7, pc}
 800c5d2:	bf00      	nop
 800c5d4:	0800c5f5 	.word	0x0800c5f5
 800c5d8:	200005d4 	.word	0x200005d4
 800c5dc:	20000020 	.word	0x20000020

0800c5e0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c5e4:	4802      	ldr	r0, [pc, #8]	; (800c5f0 <MX_USB_HOST_Process+0x10>)
 800c5e6:	f7fe fc2b 	bl	800ae40 <USBH_Process>
}
 800c5ea:	bf00      	nop
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	200005d4 	.word	0x200005d4

0800c5f4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c600:	78fb      	ldrb	r3, [r7, #3]
 800c602:	3b01      	subs	r3, #1
 800c604:	2b04      	cmp	r3, #4
 800c606:	d819      	bhi.n	800c63c <USBH_UserProcess+0x48>
 800c608:	a201      	add	r2, pc, #4	; (adr r2, 800c610 <USBH_UserProcess+0x1c>)
 800c60a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c60e:	bf00      	nop
 800c610:	0800c63d 	.word	0x0800c63d
 800c614:	0800c62d 	.word	0x0800c62d
 800c618:	0800c63d 	.word	0x0800c63d
 800c61c:	0800c635 	.word	0x0800c635
 800c620:	0800c625 	.word	0x0800c625
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c624:	4b09      	ldr	r3, [pc, #36]	; (800c64c <USBH_UserProcess+0x58>)
 800c626:	2203      	movs	r2, #3
 800c628:	701a      	strb	r2, [r3, #0]
  break;
 800c62a:	e008      	b.n	800c63e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c62c:	4b07      	ldr	r3, [pc, #28]	; (800c64c <USBH_UserProcess+0x58>)
 800c62e:	2202      	movs	r2, #2
 800c630:	701a      	strb	r2, [r3, #0]
  break;
 800c632:	e004      	b.n	800c63e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c634:	4b05      	ldr	r3, [pc, #20]	; (800c64c <USBH_UserProcess+0x58>)
 800c636:	2201      	movs	r2, #1
 800c638:	701a      	strb	r2, [r3, #0]
  break;
 800c63a:	e000      	b.n	800c63e <USBH_UserProcess+0x4a>

  default:
  break;
 800c63c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c63e:	bf00      	nop
 800c640:	370c      	adds	r7, #12
 800c642:	46bd      	mov	sp, r7
 800c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c648:	4770      	bx	lr
 800c64a:	bf00      	nop
 800c64c:	200009ac 	.word	0x200009ac

0800c650 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b08a      	sub	sp, #40	; 0x28
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c658:	f107 0314 	add.w	r3, r7, #20
 800c65c:	2200      	movs	r2, #0
 800c65e:	601a      	str	r2, [r3, #0]
 800c660:	605a      	str	r2, [r3, #4]
 800c662:	609a      	str	r2, [r3, #8]
 800c664:	60da      	str	r2, [r3, #12]
 800c666:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c670:	d147      	bne.n	800c702 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c672:	2300      	movs	r3, #0
 800c674:	613b      	str	r3, [r7, #16]
 800c676:	4b25      	ldr	r3, [pc, #148]	; (800c70c <HAL_HCD_MspInit+0xbc>)
 800c678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c67a:	4a24      	ldr	r2, [pc, #144]	; (800c70c <HAL_HCD_MspInit+0xbc>)
 800c67c:	f043 0301 	orr.w	r3, r3, #1
 800c680:	6313      	str	r3, [r2, #48]	; 0x30
 800c682:	4b22      	ldr	r3, [pc, #136]	; (800c70c <HAL_HCD_MspInit+0xbc>)
 800c684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c686:	f003 0301 	and.w	r3, r3, #1
 800c68a:	613b      	str	r3, [r7, #16]
 800c68c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c68e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c694:	2300      	movs	r3, #0
 800c696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c698:	2300      	movs	r3, #0
 800c69a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c69c:	f107 0314 	add.w	r3, r7, #20
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	481b      	ldr	r0, [pc, #108]	; (800c710 <HAL_HCD_MspInit+0xc0>)
 800c6a4:	f7f6 fe28 	bl	80032f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c6a8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c6ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6ae:	2302      	movs	r3, #2
 800c6b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c6ba:	230a      	movs	r3, #10
 800c6bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c6be:	f107 0314 	add.w	r3, r7, #20
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	4812      	ldr	r0, [pc, #72]	; (800c710 <HAL_HCD_MspInit+0xc0>)
 800c6c6:	f7f6 fe17 	bl	80032f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c6ca:	4b10      	ldr	r3, [pc, #64]	; (800c70c <HAL_HCD_MspInit+0xbc>)
 800c6cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6ce:	4a0f      	ldr	r2, [pc, #60]	; (800c70c <HAL_HCD_MspInit+0xbc>)
 800c6d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6d4:	6353      	str	r3, [r2, #52]	; 0x34
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	60fb      	str	r3, [r7, #12]
 800c6da:	4b0c      	ldr	r3, [pc, #48]	; (800c70c <HAL_HCD_MspInit+0xbc>)
 800c6dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6de:	4a0b      	ldr	r2, [pc, #44]	; (800c70c <HAL_HCD_MspInit+0xbc>)
 800c6e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c6e4:	6453      	str	r3, [r2, #68]	; 0x44
 800c6e6:	4b09      	ldr	r3, [pc, #36]	; (800c70c <HAL_HCD_MspInit+0xbc>)
 800c6e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c6ee:	60fb      	str	r3, [r7, #12]
 800c6f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	2043      	movs	r0, #67	; 0x43
 800c6f8:	f7f6 fa4b 	bl	8002b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c6fc:	2043      	movs	r0, #67	; 0x43
 800c6fe:	f7f6 fa64 	bl	8002bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c702:	bf00      	nop
 800c704:	3728      	adds	r7, #40	; 0x28
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
 800c70a:	bf00      	nop
 800c70c:	40023800 	.word	0x40023800
 800c710:	40020000 	.word	0x40020000

0800c714 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b082      	sub	sp, #8
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c722:	4618      	mov	r0, r3
 800c724:	f7fe ff6b 	bl	800b5fe <USBH_LL_IncTimer>
}
 800c728:	bf00      	nop
 800c72a:	3708      	adds	r7, #8
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}

0800c730 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c73e:	4618      	mov	r0, r3
 800c740:	f7fe ffa3 	bl	800b68a <USBH_LL_Connect>
}
 800c744:	bf00      	nop
 800c746:	3708      	adds	r7, #8
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b082      	sub	sp, #8
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7fe ffac 	bl	800b6b8 <USBH_LL_Disconnect>
}
 800c760:	bf00      	nop
 800c762:	3708      	adds	r7, #8
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}

0800c768 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c768:	b480      	push	{r7}
 800c76a:	b083      	sub	sp, #12
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	460b      	mov	r3, r1
 800c772:	70fb      	strb	r3, [r7, #3]
 800c774:	4613      	mov	r3, r2
 800c776:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c778:	bf00      	nop
 800c77a:	370c      	adds	r7, #12
 800c77c:	46bd      	mov	sp, r7
 800c77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c782:	4770      	bx	lr

0800c784 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b082      	sub	sp, #8
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c792:	4618      	mov	r0, r3
 800c794:	f7fe ff5d 	bl	800b652 <USBH_LL_PortEnabled>
}
 800c798:	bf00      	nop
 800c79a:	3708      	adds	r7, #8
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f7fe ff5d 	bl	800b66e <USBH_LL_PortDisabled>
}
 800c7b4:	bf00      	nop
 800c7b6:	3708      	adds	r7, #8
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d12a      	bne.n	800c824 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c7ce:	4a18      	ldr	r2, [pc, #96]	; (800c830 <USBH_LL_Init+0x74>)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	4a15      	ldr	r2, [pc, #84]	; (800c830 <USBH_LL_Init+0x74>)
 800c7da:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c7de:	4b14      	ldr	r3, [pc, #80]	; (800c830 <USBH_LL_Init+0x74>)
 800c7e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c7e4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c7e6:	4b12      	ldr	r3, [pc, #72]	; (800c830 <USBH_LL_Init+0x74>)
 800c7e8:	2208      	movs	r2, #8
 800c7ea:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c7ec:	4b10      	ldr	r3, [pc, #64]	; (800c830 <USBH_LL_Init+0x74>)
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c7f2:	4b0f      	ldr	r3, [pc, #60]	; (800c830 <USBH_LL_Init+0x74>)
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c7f8:	4b0d      	ldr	r3, [pc, #52]	; (800c830 <USBH_LL_Init+0x74>)
 800c7fa:	2202      	movs	r2, #2
 800c7fc:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c7fe:	4b0c      	ldr	r3, [pc, #48]	; (800c830 <USBH_LL_Init+0x74>)
 800c800:	2200      	movs	r2, #0
 800c802:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c804:	480a      	ldr	r0, [pc, #40]	; (800c830 <USBH_LL_Init+0x74>)
 800c806:	f7f6 ff2c 	bl	8003662 <HAL_HCD_Init>
 800c80a:	4603      	mov	r3, r0
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d001      	beq.n	800c814 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c810:	f7f5 fca8 	bl	8002164 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c814:	4806      	ldr	r0, [pc, #24]	; (800c830 <USBH_LL_Init+0x74>)
 800c816:	f7f7 fb8d 	bl	8003f34 <HAL_HCD_GetCurrentFrame>
 800c81a:	4603      	mov	r3, r0
 800c81c:	4619      	mov	r1, r3
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f7fe fede 	bl	800b5e0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c824:	2300      	movs	r3, #0
}
 800c826:	4618      	mov	r0, r3
 800c828:	3708      	adds	r7, #8
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}
 800c82e:	bf00      	nop
 800c830:	200009b0 	.word	0x200009b0

0800c834 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b084      	sub	sp, #16
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c83c:	2300      	movs	r3, #0
 800c83e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c840:	2300      	movs	r3, #0
 800c842:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c84a:	4618      	mov	r0, r3
 800c84c:	f7f7 fafa 	bl	8003e44 <HAL_HCD_Start>
 800c850:	4603      	mov	r3, r0
 800c852:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c854:	7bfb      	ldrb	r3, [r7, #15]
 800c856:	4618      	mov	r0, r3
 800c858:	f000 f95e 	bl	800cb18 <USBH_Get_USB_Status>
 800c85c:	4603      	mov	r3, r0
 800c85e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c860:	7bbb      	ldrb	r3, [r7, #14]
}
 800c862:	4618      	mov	r0, r3
 800c864:	3710      	adds	r7, #16
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}

0800c86a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c86a:	b580      	push	{r7, lr}
 800c86c:	b084      	sub	sp, #16
 800c86e:	af00      	add	r7, sp, #0
 800c870:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c872:	2300      	movs	r3, #0
 800c874:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c876:	2300      	movs	r3, #0
 800c878:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c880:	4618      	mov	r0, r3
 800c882:	f7f7 fb02 	bl	8003e8a <HAL_HCD_Stop>
 800c886:	4603      	mov	r3, r0
 800c888:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c88a:	7bfb      	ldrb	r3, [r7, #15]
 800c88c:	4618      	mov	r0, r3
 800c88e:	f000 f943 	bl	800cb18 <USBH_Get_USB_Status>
 800c892:	4603      	mov	r3, r0
 800c894:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c896:	7bbb      	ldrb	r3, [r7, #14]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3710      	adds	r7, #16
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f7f7 fb4c 	bl	8003f50 <HAL_HCD_GetCurrentSpeed>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	2b02      	cmp	r3, #2
 800c8bc:	d00c      	beq.n	800c8d8 <USBH_LL_GetSpeed+0x38>
 800c8be:	2b02      	cmp	r3, #2
 800c8c0:	d80d      	bhi.n	800c8de <USBH_LL_GetSpeed+0x3e>
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d002      	beq.n	800c8cc <USBH_LL_GetSpeed+0x2c>
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d003      	beq.n	800c8d2 <USBH_LL_GetSpeed+0x32>
 800c8ca:	e008      	b.n	800c8de <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	73fb      	strb	r3, [r7, #15]
    break;
 800c8d0:	e008      	b.n	800c8e4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	73fb      	strb	r3, [r7, #15]
    break;
 800c8d6:	e005      	b.n	800c8e4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c8d8:	2302      	movs	r3, #2
 800c8da:	73fb      	strb	r3, [r7, #15]
    break;
 800c8dc:	e002      	b.n	800c8e4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c8de:	2301      	movs	r3, #1
 800c8e0:	73fb      	strb	r3, [r7, #15]
    break;
 800c8e2:	bf00      	nop
  }
  return  speed;
 800c8e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3710      	adds	r7, #16
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}

0800c8ee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c8ee:	b580      	push	{r7, lr}
 800c8f0:	b084      	sub	sp, #16
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c904:	4618      	mov	r0, r3
 800c906:	f7f7 fadd 	bl	8003ec4 <HAL_HCD_ResetPort>
 800c90a:	4603      	mov	r3, r0
 800c90c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c90e:	7bfb      	ldrb	r3, [r7, #15]
 800c910:	4618      	mov	r0, r3
 800c912:	f000 f901 	bl	800cb18 <USBH_Get_USB_Status>
 800c916:	4603      	mov	r3, r0
 800c918:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c91a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3710      	adds	r7, #16
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	460b      	mov	r3, r1
 800c92e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c936:	78fa      	ldrb	r2, [r7, #3]
 800c938:	4611      	mov	r1, r2
 800c93a:	4618      	mov	r0, r3
 800c93c:	f7f7 fae5 	bl	8003f0a <HAL_HCD_HC_GetXferCount>
 800c940:	4603      	mov	r3, r0
}
 800c942:	4618      	mov	r0, r3
 800c944:	3708      	adds	r7, #8
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}

0800c94a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c94a:	b590      	push	{r4, r7, lr}
 800c94c:	b089      	sub	sp, #36	; 0x24
 800c94e:	af04      	add	r7, sp, #16
 800c950:	6078      	str	r0, [r7, #4]
 800c952:	4608      	mov	r0, r1
 800c954:	4611      	mov	r1, r2
 800c956:	461a      	mov	r2, r3
 800c958:	4603      	mov	r3, r0
 800c95a:	70fb      	strb	r3, [r7, #3]
 800c95c:	460b      	mov	r3, r1
 800c95e:	70bb      	strb	r3, [r7, #2]
 800c960:	4613      	mov	r3, r2
 800c962:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c964:	2300      	movs	r3, #0
 800c966:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c968:	2300      	movs	r3, #0
 800c96a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c972:	787c      	ldrb	r4, [r7, #1]
 800c974:	78ba      	ldrb	r2, [r7, #2]
 800c976:	78f9      	ldrb	r1, [r7, #3]
 800c978:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c97a:	9302      	str	r3, [sp, #8]
 800c97c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c980:	9301      	str	r3, [sp, #4]
 800c982:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c986:	9300      	str	r3, [sp, #0]
 800c988:	4623      	mov	r3, r4
 800c98a:	f7f6 fed1 	bl	8003730 <HAL_HCD_HC_Init>
 800c98e:	4603      	mov	r3, r0
 800c990:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c992:	7bfb      	ldrb	r3, [r7, #15]
 800c994:	4618      	mov	r0, r3
 800c996:	f000 f8bf 	bl	800cb18 <USBH_Get_USB_Status>
 800c99a:	4603      	mov	r3, r0
 800c99c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c99e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3714      	adds	r7, #20
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd90      	pop	{r4, r7, pc}

0800c9a8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b084      	sub	sp, #16
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
 800c9b0:	460b      	mov	r3, r1
 800c9b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c9c2:	78fa      	ldrb	r2, [r7, #3]
 800c9c4:	4611      	mov	r1, r2
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7f6 ff6a 	bl	80038a0 <HAL_HCD_HC_Halt>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c9d0:	7bfb      	ldrb	r3, [r7, #15]
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f000 f8a0 	bl	800cb18 <USBH_Get_USB_Status>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3710      	adds	r7, #16
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}

0800c9e6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c9e6:	b590      	push	{r4, r7, lr}
 800c9e8:	b089      	sub	sp, #36	; 0x24
 800c9ea:	af04      	add	r7, sp, #16
 800c9ec:	6078      	str	r0, [r7, #4]
 800c9ee:	4608      	mov	r0, r1
 800c9f0:	4611      	mov	r1, r2
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	70fb      	strb	r3, [r7, #3]
 800c9f8:	460b      	mov	r3, r1
 800c9fa:	70bb      	strb	r3, [r7, #2]
 800c9fc:	4613      	mov	r3, r2
 800c9fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca00:	2300      	movs	r3, #0
 800ca02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ca04:	2300      	movs	r3, #0
 800ca06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ca0e:	787c      	ldrb	r4, [r7, #1]
 800ca10:	78ba      	ldrb	r2, [r7, #2]
 800ca12:	78f9      	ldrb	r1, [r7, #3]
 800ca14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ca18:	9303      	str	r3, [sp, #12]
 800ca1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ca1c:	9302      	str	r3, [sp, #8]
 800ca1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca20:	9301      	str	r3, [sp, #4]
 800ca22:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ca26:	9300      	str	r3, [sp, #0]
 800ca28:	4623      	mov	r3, r4
 800ca2a:	f7f6 ff5d 	bl	80038e8 <HAL_HCD_HC_SubmitRequest>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ca32:	7bfb      	ldrb	r3, [r7, #15]
 800ca34:	4618      	mov	r0, r3
 800ca36:	f000 f86f 	bl	800cb18 <USBH_Get_USB_Status>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3714      	adds	r7, #20
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd90      	pop	{r4, r7, pc}

0800ca48 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	460b      	mov	r3, r1
 800ca52:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ca5a:	78fa      	ldrb	r2, [r7, #3]
 800ca5c:	4611      	mov	r1, r2
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f7f7 fa3e 	bl	8003ee0 <HAL_HCD_HC_GetURBState>
 800ca64:	4603      	mov	r3, r0
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	3708      	adds	r7, #8
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}

0800ca6e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ca6e:	b580      	push	{r7, lr}
 800ca70:	b082      	sub	sp, #8
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
 800ca76:	460b      	mov	r3, r1
 800ca78:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ca80:	2b01      	cmp	r3, #1
 800ca82:	d103      	bne.n	800ca8c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ca84:	78fb      	ldrb	r3, [r7, #3]
 800ca86:	4618      	mov	r0, r3
 800ca88:	f000 f872 	bl	800cb70 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ca8c:	20c8      	movs	r0, #200	; 0xc8
 800ca8e:	f7f5 ff81 	bl	8002994 <HAL_Delay>
  return USBH_OK;
 800ca92:	2300      	movs	r3, #0
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3708      	adds	r7, #8
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b085      	sub	sp, #20
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	460b      	mov	r3, r1
 800caa6:	70fb      	strb	r3, [r7, #3]
 800caa8:	4613      	mov	r3, r2
 800caaa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cab2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cab4:	78fa      	ldrb	r2, [r7, #3]
 800cab6:	68f9      	ldr	r1, [r7, #12]
 800cab8:	4613      	mov	r3, r2
 800caba:	011b      	lsls	r3, r3, #4
 800cabc:	1a9b      	subs	r3, r3, r2
 800cabe:	009b      	lsls	r3, r3, #2
 800cac0:	440b      	add	r3, r1
 800cac2:	3317      	adds	r3, #23
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d00a      	beq.n	800cae0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800caca:	78fa      	ldrb	r2, [r7, #3]
 800cacc:	68f9      	ldr	r1, [r7, #12]
 800cace:	4613      	mov	r3, r2
 800cad0:	011b      	lsls	r3, r3, #4
 800cad2:	1a9b      	subs	r3, r3, r2
 800cad4:	009b      	lsls	r3, r3, #2
 800cad6:	440b      	add	r3, r1
 800cad8:	333c      	adds	r3, #60	; 0x3c
 800cada:	78ba      	ldrb	r2, [r7, #2]
 800cadc:	701a      	strb	r2, [r3, #0]
 800cade:	e009      	b.n	800caf4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cae0:	78fa      	ldrb	r2, [r7, #3]
 800cae2:	68f9      	ldr	r1, [r7, #12]
 800cae4:	4613      	mov	r3, r2
 800cae6:	011b      	lsls	r3, r3, #4
 800cae8:	1a9b      	subs	r3, r3, r2
 800caea:	009b      	lsls	r3, r3, #2
 800caec:	440b      	add	r3, r1
 800caee:	333d      	adds	r3, #61	; 0x3d
 800caf0:	78ba      	ldrb	r2, [r7, #2]
 800caf2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800caf4:	2300      	movs	r3, #0
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3714      	adds	r7, #20
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr

0800cb02 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b082      	sub	sp, #8
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f7f5 ff42 	bl	8002994 <HAL_Delay>
}
 800cb10:	bf00      	nop
 800cb12:	3708      	adds	r7, #8
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}

0800cb18 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b085      	sub	sp, #20
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	4603      	mov	r3, r0
 800cb20:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb22:	2300      	movs	r3, #0
 800cb24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cb26:	79fb      	ldrb	r3, [r7, #7]
 800cb28:	2b03      	cmp	r3, #3
 800cb2a:	d817      	bhi.n	800cb5c <USBH_Get_USB_Status+0x44>
 800cb2c:	a201      	add	r2, pc, #4	; (adr r2, 800cb34 <USBH_Get_USB_Status+0x1c>)
 800cb2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb32:	bf00      	nop
 800cb34:	0800cb45 	.word	0x0800cb45
 800cb38:	0800cb4b 	.word	0x0800cb4b
 800cb3c:	0800cb51 	.word	0x0800cb51
 800cb40:	0800cb57 	.word	0x0800cb57
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cb44:	2300      	movs	r3, #0
 800cb46:	73fb      	strb	r3, [r7, #15]
    break;
 800cb48:	e00b      	b.n	800cb62 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cb4a:	2302      	movs	r3, #2
 800cb4c:	73fb      	strb	r3, [r7, #15]
    break;
 800cb4e:	e008      	b.n	800cb62 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cb50:	2301      	movs	r3, #1
 800cb52:	73fb      	strb	r3, [r7, #15]
    break;
 800cb54:	e005      	b.n	800cb62 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cb56:	2302      	movs	r3, #2
 800cb58:	73fb      	strb	r3, [r7, #15]
    break;
 800cb5a:	e002      	b.n	800cb62 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cb5c:	2302      	movs	r3, #2
 800cb5e:	73fb      	strb	r3, [r7, #15]
    break;
 800cb60:	bf00      	nop
  }
  return usb_status;
 800cb62:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3714      	adds	r7, #20
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6e:	4770      	bx	lr

0800cb70 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	4603      	mov	r3, r0
 800cb78:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800cb7a:	79fb      	ldrb	r3, [r7, #7]
 800cb7c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800cb7e:	79fb      	ldrb	r3, [r7, #7]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d102      	bne.n	800cb8a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800cb84:	2300      	movs	r3, #0
 800cb86:	73fb      	strb	r3, [r7, #15]
 800cb88:	e001      	b.n	800cb8e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800cb8e:	7bfb      	ldrb	r3, [r7, #15]
 800cb90:	461a      	mov	r2, r3
 800cb92:	2101      	movs	r1, #1
 800cb94:	4803      	ldr	r0, [pc, #12]	; (800cba4 <MX_DriverVbusFS+0x34>)
 800cb96:	f7f6 fd4b 	bl	8003630 <HAL_GPIO_WritePin>
}
 800cb9a:	bf00      	nop
 800cb9c:	3710      	adds	r7, #16
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	bf00      	nop
 800cba4:	40020800 	.word	0x40020800

0800cba8 <atof>:
 800cba8:	2100      	movs	r1, #0
 800cbaa:	f000 becf 	b.w	800d94c <strtod>
	...

0800cbb0 <malloc>:
 800cbb0:	4b02      	ldr	r3, [pc, #8]	; (800cbbc <malloc+0xc>)
 800cbb2:	4601      	mov	r1, r0
 800cbb4:	6818      	ldr	r0, [r3, #0]
 800cbb6:	f000 b82b 	b.w	800cc10 <_malloc_r>
 800cbba:	bf00      	nop
 800cbbc:	20000204 	.word	0x20000204

0800cbc0 <free>:
 800cbc0:	4b02      	ldr	r3, [pc, #8]	; (800cbcc <free+0xc>)
 800cbc2:	4601      	mov	r1, r0
 800cbc4:	6818      	ldr	r0, [r3, #0]
 800cbc6:	f002 bda5 	b.w	800f714 <_free_r>
 800cbca:	bf00      	nop
 800cbcc:	20000204 	.word	0x20000204

0800cbd0 <sbrk_aligned>:
 800cbd0:	b570      	push	{r4, r5, r6, lr}
 800cbd2:	4e0e      	ldr	r6, [pc, #56]	; (800cc0c <sbrk_aligned+0x3c>)
 800cbd4:	460c      	mov	r4, r1
 800cbd6:	6831      	ldr	r1, [r6, #0]
 800cbd8:	4605      	mov	r5, r0
 800cbda:	b911      	cbnz	r1, 800cbe2 <sbrk_aligned+0x12>
 800cbdc:	f001 feb0 	bl	800e940 <_sbrk_r>
 800cbe0:	6030      	str	r0, [r6, #0]
 800cbe2:	4621      	mov	r1, r4
 800cbe4:	4628      	mov	r0, r5
 800cbe6:	f001 feab 	bl	800e940 <_sbrk_r>
 800cbea:	1c43      	adds	r3, r0, #1
 800cbec:	d00a      	beq.n	800cc04 <sbrk_aligned+0x34>
 800cbee:	1cc4      	adds	r4, r0, #3
 800cbf0:	f024 0403 	bic.w	r4, r4, #3
 800cbf4:	42a0      	cmp	r0, r4
 800cbf6:	d007      	beq.n	800cc08 <sbrk_aligned+0x38>
 800cbf8:	1a21      	subs	r1, r4, r0
 800cbfa:	4628      	mov	r0, r5
 800cbfc:	f001 fea0 	bl	800e940 <_sbrk_r>
 800cc00:	3001      	adds	r0, #1
 800cc02:	d101      	bne.n	800cc08 <sbrk_aligned+0x38>
 800cc04:	f04f 34ff 	mov.w	r4, #4294967295
 800cc08:	4620      	mov	r0, r4
 800cc0a:	bd70      	pop	{r4, r5, r6, pc}
 800cc0c:	20000d94 	.word	0x20000d94

0800cc10 <_malloc_r>:
 800cc10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc14:	1ccd      	adds	r5, r1, #3
 800cc16:	f025 0503 	bic.w	r5, r5, #3
 800cc1a:	3508      	adds	r5, #8
 800cc1c:	2d0c      	cmp	r5, #12
 800cc1e:	bf38      	it	cc
 800cc20:	250c      	movcc	r5, #12
 800cc22:	2d00      	cmp	r5, #0
 800cc24:	4607      	mov	r7, r0
 800cc26:	db01      	blt.n	800cc2c <_malloc_r+0x1c>
 800cc28:	42a9      	cmp	r1, r5
 800cc2a:	d905      	bls.n	800cc38 <_malloc_r+0x28>
 800cc2c:	230c      	movs	r3, #12
 800cc2e:	603b      	str	r3, [r7, #0]
 800cc30:	2600      	movs	r6, #0
 800cc32:	4630      	mov	r0, r6
 800cc34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cd0c <_malloc_r+0xfc>
 800cc3c:	f000 f868 	bl	800cd10 <__malloc_lock>
 800cc40:	f8d8 3000 	ldr.w	r3, [r8]
 800cc44:	461c      	mov	r4, r3
 800cc46:	bb5c      	cbnz	r4, 800cca0 <_malloc_r+0x90>
 800cc48:	4629      	mov	r1, r5
 800cc4a:	4638      	mov	r0, r7
 800cc4c:	f7ff ffc0 	bl	800cbd0 <sbrk_aligned>
 800cc50:	1c43      	adds	r3, r0, #1
 800cc52:	4604      	mov	r4, r0
 800cc54:	d155      	bne.n	800cd02 <_malloc_r+0xf2>
 800cc56:	f8d8 4000 	ldr.w	r4, [r8]
 800cc5a:	4626      	mov	r6, r4
 800cc5c:	2e00      	cmp	r6, #0
 800cc5e:	d145      	bne.n	800ccec <_malloc_r+0xdc>
 800cc60:	2c00      	cmp	r4, #0
 800cc62:	d048      	beq.n	800ccf6 <_malloc_r+0xe6>
 800cc64:	6823      	ldr	r3, [r4, #0]
 800cc66:	4631      	mov	r1, r6
 800cc68:	4638      	mov	r0, r7
 800cc6a:	eb04 0903 	add.w	r9, r4, r3
 800cc6e:	f001 fe67 	bl	800e940 <_sbrk_r>
 800cc72:	4581      	cmp	r9, r0
 800cc74:	d13f      	bne.n	800ccf6 <_malloc_r+0xe6>
 800cc76:	6821      	ldr	r1, [r4, #0]
 800cc78:	1a6d      	subs	r5, r5, r1
 800cc7a:	4629      	mov	r1, r5
 800cc7c:	4638      	mov	r0, r7
 800cc7e:	f7ff ffa7 	bl	800cbd0 <sbrk_aligned>
 800cc82:	3001      	adds	r0, #1
 800cc84:	d037      	beq.n	800ccf6 <_malloc_r+0xe6>
 800cc86:	6823      	ldr	r3, [r4, #0]
 800cc88:	442b      	add	r3, r5
 800cc8a:	6023      	str	r3, [r4, #0]
 800cc8c:	f8d8 3000 	ldr.w	r3, [r8]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d038      	beq.n	800cd06 <_malloc_r+0xf6>
 800cc94:	685a      	ldr	r2, [r3, #4]
 800cc96:	42a2      	cmp	r2, r4
 800cc98:	d12b      	bne.n	800ccf2 <_malloc_r+0xe2>
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	605a      	str	r2, [r3, #4]
 800cc9e:	e00f      	b.n	800ccc0 <_malloc_r+0xb0>
 800cca0:	6822      	ldr	r2, [r4, #0]
 800cca2:	1b52      	subs	r2, r2, r5
 800cca4:	d41f      	bmi.n	800cce6 <_malloc_r+0xd6>
 800cca6:	2a0b      	cmp	r2, #11
 800cca8:	d917      	bls.n	800ccda <_malloc_r+0xca>
 800ccaa:	1961      	adds	r1, r4, r5
 800ccac:	42a3      	cmp	r3, r4
 800ccae:	6025      	str	r5, [r4, #0]
 800ccb0:	bf18      	it	ne
 800ccb2:	6059      	strne	r1, [r3, #4]
 800ccb4:	6863      	ldr	r3, [r4, #4]
 800ccb6:	bf08      	it	eq
 800ccb8:	f8c8 1000 	streq.w	r1, [r8]
 800ccbc:	5162      	str	r2, [r4, r5]
 800ccbe:	604b      	str	r3, [r1, #4]
 800ccc0:	4638      	mov	r0, r7
 800ccc2:	f104 060b 	add.w	r6, r4, #11
 800ccc6:	f000 f829 	bl	800cd1c <__malloc_unlock>
 800ccca:	f026 0607 	bic.w	r6, r6, #7
 800ccce:	1d23      	adds	r3, r4, #4
 800ccd0:	1af2      	subs	r2, r6, r3
 800ccd2:	d0ae      	beq.n	800cc32 <_malloc_r+0x22>
 800ccd4:	1b9b      	subs	r3, r3, r6
 800ccd6:	50a3      	str	r3, [r4, r2]
 800ccd8:	e7ab      	b.n	800cc32 <_malloc_r+0x22>
 800ccda:	42a3      	cmp	r3, r4
 800ccdc:	6862      	ldr	r2, [r4, #4]
 800ccde:	d1dd      	bne.n	800cc9c <_malloc_r+0x8c>
 800cce0:	f8c8 2000 	str.w	r2, [r8]
 800cce4:	e7ec      	b.n	800ccc0 <_malloc_r+0xb0>
 800cce6:	4623      	mov	r3, r4
 800cce8:	6864      	ldr	r4, [r4, #4]
 800ccea:	e7ac      	b.n	800cc46 <_malloc_r+0x36>
 800ccec:	4634      	mov	r4, r6
 800ccee:	6876      	ldr	r6, [r6, #4]
 800ccf0:	e7b4      	b.n	800cc5c <_malloc_r+0x4c>
 800ccf2:	4613      	mov	r3, r2
 800ccf4:	e7cc      	b.n	800cc90 <_malloc_r+0x80>
 800ccf6:	230c      	movs	r3, #12
 800ccf8:	603b      	str	r3, [r7, #0]
 800ccfa:	4638      	mov	r0, r7
 800ccfc:	f000 f80e 	bl	800cd1c <__malloc_unlock>
 800cd00:	e797      	b.n	800cc32 <_malloc_r+0x22>
 800cd02:	6025      	str	r5, [r4, #0]
 800cd04:	e7dc      	b.n	800ccc0 <_malloc_r+0xb0>
 800cd06:	605b      	str	r3, [r3, #4]
 800cd08:	deff      	udf	#255	; 0xff
 800cd0a:	bf00      	nop
 800cd0c:	20000d90 	.word	0x20000d90

0800cd10 <__malloc_lock>:
 800cd10:	4801      	ldr	r0, [pc, #4]	; (800cd18 <__malloc_lock+0x8>)
 800cd12:	f001 be62 	b.w	800e9da <__retarget_lock_acquire_recursive>
 800cd16:	bf00      	nop
 800cd18:	20000ed8 	.word	0x20000ed8

0800cd1c <__malloc_unlock>:
 800cd1c:	4801      	ldr	r0, [pc, #4]	; (800cd24 <__malloc_unlock+0x8>)
 800cd1e:	f001 be5d 	b.w	800e9dc <__retarget_lock_release_recursive>
 800cd22:	bf00      	nop
 800cd24:	20000ed8 	.word	0x20000ed8

0800cd28 <sulp>:
 800cd28:	b570      	push	{r4, r5, r6, lr}
 800cd2a:	4604      	mov	r4, r0
 800cd2c:	460d      	mov	r5, r1
 800cd2e:	ec45 4b10 	vmov	d0, r4, r5
 800cd32:	4616      	mov	r6, r2
 800cd34:	f003 fc10 	bl	8010558 <__ulp>
 800cd38:	ec51 0b10 	vmov	r0, r1, d0
 800cd3c:	b17e      	cbz	r6, 800cd5e <sulp+0x36>
 800cd3e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cd42:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	dd09      	ble.n	800cd5e <sulp+0x36>
 800cd4a:	051b      	lsls	r3, r3, #20
 800cd4c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cd50:	2400      	movs	r4, #0
 800cd52:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cd56:	4622      	mov	r2, r4
 800cd58:	462b      	mov	r3, r5
 800cd5a:	f7f3 fc4d 	bl	80005f8 <__aeabi_dmul>
 800cd5e:	bd70      	pop	{r4, r5, r6, pc}

0800cd60 <_strtod_l>:
 800cd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd64:	ed2d 8b02 	vpush	{d8}
 800cd68:	b09b      	sub	sp, #108	; 0x6c
 800cd6a:	4604      	mov	r4, r0
 800cd6c:	9213      	str	r2, [sp, #76]	; 0x4c
 800cd6e:	2200      	movs	r2, #0
 800cd70:	9216      	str	r2, [sp, #88]	; 0x58
 800cd72:	460d      	mov	r5, r1
 800cd74:	f04f 0800 	mov.w	r8, #0
 800cd78:	f04f 0900 	mov.w	r9, #0
 800cd7c:	460a      	mov	r2, r1
 800cd7e:	9215      	str	r2, [sp, #84]	; 0x54
 800cd80:	7811      	ldrb	r1, [r2, #0]
 800cd82:	292b      	cmp	r1, #43	; 0x2b
 800cd84:	d04c      	beq.n	800ce20 <_strtod_l+0xc0>
 800cd86:	d83a      	bhi.n	800cdfe <_strtod_l+0x9e>
 800cd88:	290d      	cmp	r1, #13
 800cd8a:	d834      	bhi.n	800cdf6 <_strtod_l+0x96>
 800cd8c:	2908      	cmp	r1, #8
 800cd8e:	d834      	bhi.n	800cdfa <_strtod_l+0x9a>
 800cd90:	2900      	cmp	r1, #0
 800cd92:	d03d      	beq.n	800ce10 <_strtod_l+0xb0>
 800cd94:	2200      	movs	r2, #0
 800cd96:	920a      	str	r2, [sp, #40]	; 0x28
 800cd98:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800cd9a:	7832      	ldrb	r2, [r6, #0]
 800cd9c:	2a30      	cmp	r2, #48	; 0x30
 800cd9e:	f040 80b4 	bne.w	800cf0a <_strtod_l+0x1aa>
 800cda2:	7872      	ldrb	r2, [r6, #1]
 800cda4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800cda8:	2a58      	cmp	r2, #88	; 0x58
 800cdaa:	d170      	bne.n	800ce8e <_strtod_l+0x12e>
 800cdac:	9302      	str	r3, [sp, #8]
 800cdae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdb0:	9301      	str	r3, [sp, #4]
 800cdb2:	ab16      	add	r3, sp, #88	; 0x58
 800cdb4:	9300      	str	r3, [sp, #0]
 800cdb6:	4a8e      	ldr	r2, [pc, #568]	; (800cff0 <_strtod_l+0x290>)
 800cdb8:	ab17      	add	r3, sp, #92	; 0x5c
 800cdba:	a915      	add	r1, sp, #84	; 0x54
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	f002 fd5d 	bl	800f87c <__gethex>
 800cdc2:	f010 070f 	ands.w	r7, r0, #15
 800cdc6:	4605      	mov	r5, r0
 800cdc8:	d005      	beq.n	800cdd6 <_strtod_l+0x76>
 800cdca:	2f06      	cmp	r7, #6
 800cdcc:	d12a      	bne.n	800ce24 <_strtod_l+0xc4>
 800cdce:	3601      	adds	r6, #1
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	9615      	str	r6, [sp, #84]	; 0x54
 800cdd4:	930a      	str	r3, [sp, #40]	; 0x28
 800cdd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	f040 857f 	bne.w	800d8dc <_strtod_l+0xb7c>
 800cdde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cde0:	b1db      	cbz	r3, 800ce1a <_strtod_l+0xba>
 800cde2:	4642      	mov	r2, r8
 800cde4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cde8:	ec43 2b10 	vmov	d0, r2, r3
 800cdec:	b01b      	add	sp, #108	; 0x6c
 800cdee:	ecbd 8b02 	vpop	{d8}
 800cdf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdf6:	2920      	cmp	r1, #32
 800cdf8:	d1cc      	bne.n	800cd94 <_strtod_l+0x34>
 800cdfa:	3201      	adds	r2, #1
 800cdfc:	e7bf      	b.n	800cd7e <_strtod_l+0x1e>
 800cdfe:	292d      	cmp	r1, #45	; 0x2d
 800ce00:	d1c8      	bne.n	800cd94 <_strtod_l+0x34>
 800ce02:	2101      	movs	r1, #1
 800ce04:	910a      	str	r1, [sp, #40]	; 0x28
 800ce06:	1c51      	adds	r1, r2, #1
 800ce08:	9115      	str	r1, [sp, #84]	; 0x54
 800ce0a:	7852      	ldrb	r2, [r2, #1]
 800ce0c:	2a00      	cmp	r2, #0
 800ce0e:	d1c3      	bne.n	800cd98 <_strtod_l+0x38>
 800ce10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ce12:	9515      	str	r5, [sp, #84]	; 0x54
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	f040 855f 	bne.w	800d8d8 <_strtod_l+0xb78>
 800ce1a:	4642      	mov	r2, r8
 800ce1c:	464b      	mov	r3, r9
 800ce1e:	e7e3      	b.n	800cde8 <_strtod_l+0x88>
 800ce20:	2100      	movs	r1, #0
 800ce22:	e7ef      	b.n	800ce04 <_strtod_l+0xa4>
 800ce24:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ce26:	b13a      	cbz	r2, 800ce38 <_strtod_l+0xd8>
 800ce28:	2135      	movs	r1, #53	; 0x35
 800ce2a:	a818      	add	r0, sp, #96	; 0x60
 800ce2c:	f003 fc91 	bl	8010752 <__copybits>
 800ce30:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ce32:	4620      	mov	r0, r4
 800ce34:	f003 f864 	bl	800ff00 <_Bfree>
 800ce38:	3f01      	subs	r7, #1
 800ce3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ce3c:	2f04      	cmp	r7, #4
 800ce3e:	d806      	bhi.n	800ce4e <_strtod_l+0xee>
 800ce40:	e8df f007 	tbb	[pc, r7]
 800ce44:	201d0314 	.word	0x201d0314
 800ce48:	14          	.byte	0x14
 800ce49:	00          	.byte	0x00
 800ce4a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800ce4e:	05e9      	lsls	r1, r5, #23
 800ce50:	bf48      	it	mi
 800ce52:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ce56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ce5a:	0d1b      	lsrs	r3, r3, #20
 800ce5c:	051b      	lsls	r3, r3, #20
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d1b9      	bne.n	800cdd6 <_strtod_l+0x76>
 800ce62:	f001 fd8f 	bl	800e984 <__errno>
 800ce66:	2322      	movs	r3, #34	; 0x22
 800ce68:	6003      	str	r3, [r0, #0]
 800ce6a:	e7b4      	b.n	800cdd6 <_strtod_l+0x76>
 800ce6c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800ce70:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ce74:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ce78:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ce7c:	e7e7      	b.n	800ce4e <_strtod_l+0xee>
 800ce7e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800cff8 <_strtod_l+0x298>
 800ce82:	e7e4      	b.n	800ce4e <_strtod_l+0xee>
 800ce84:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ce88:	f04f 38ff 	mov.w	r8, #4294967295
 800ce8c:	e7df      	b.n	800ce4e <_strtod_l+0xee>
 800ce8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce90:	1c5a      	adds	r2, r3, #1
 800ce92:	9215      	str	r2, [sp, #84]	; 0x54
 800ce94:	785b      	ldrb	r3, [r3, #1]
 800ce96:	2b30      	cmp	r3, #48	; 0x30
 800ce98:	d0f9      	beq.n	800ce8e <_strtod_l+0x12e>
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d09b      	beq.n	800cdd6 <_strtod_l+0x76>
 800ce9e:	2301      	movs	r3, #1
 800cea0:	f04f 0a00 	mov.w	sl, #0
 800cea4:	9304      	str	r3, [sp, #16]
 800cea6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cea8:	930b      	str	r3, [sp, #44]	; 0x2c
 800ceaa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ceae:	46d3      	mov	fp, sl
 800ceb0:	220a      	movs	r2, #10
 800ceb2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800ceb4:	7806      	ldrb	r6, [r0, #0]
 800ceb6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ceba:	b2d9      	uxtb	r1, r3
 800cebc:	2909      	cmp	r1, #9
 800cebe:	d926      	bls.n	800cf0e <_strtod_l+0x1ae>
 800cec0:	494c      	ldr	r1, [pc, #304]	; (800cff4 <_strtod_l+0x294>)
 800cec2:	2201      	movs	r2, #1
 800cec4:	f001 fcf1 	bl	800e8aa <strncmp>
 800cec8:	2800      	cmp	r0, #0
 800ceca:	d030      	beq.n	800cf2e <_strtod_l+0x1ce>
 800cecc:	2000      	movs	r0, #0
 800cece:	4632      	mov	r2, r6
 800ced0:	9005      	str	r0, [sp, #20]
 800ced2:	465e      	mov	r6, fp
 800ced4:	4603      	mov	r3, r0
 800ced6:	2a65      	cmp	r2, #101	; 0x65
 800ced8:	d001      	beq.n	800cede <_strtod_l+0x17e>
 800ceda:	2a45      	cmp	r2, #69	; 0x45
 800cedc:	d113      	bne.n	800cf06 <_strtod_l+0x1a6>
 800cede:	b91e      	cbnz	r6, 800cee8 <_strtod_l+0x188>
 800cee0:	9a04      	ldr	r2, [sp, #16]
 800cee2:	4302      	orrs	r2, r0
 800cee4:	d094      	beq.n	800ce10 <_strtod_l+0xb0>
 800cee6:	2600      	movs	r6, #0
 800cee8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ceea:	1c6a      	adds	r2, r5, #1
 800ceec:	9215      	str	r2, [sp, #84]	; 0x54
 800ceee:	786a      	ldrb	r2, [r5, #1]
 800cef0:	2a2b      	cmp	r2, #43	; 0x2b
 800cef2:	d074      	beq.n	800cfde <_strtod_l+0x27e>
 800cef4:	2a2d      	cmp	r2, #45	; 0x2d
 800cef6:	d078      	beq.n	800cfea <_strtod_l+0x28a>
 800cef8:	f04f 0c00 	mov.w	ip, #0
 800cefc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800cf00:	2909      	cmp	r1, #9
 800cf02:	d97f      	bls.n	800d004 <_strtod_l+0x2a4>
 800cf04:	9515      	str	r5, [sp, #84]	; 0x54
 800cf06:	2700      	movs	r7, #0
 800cf08:	e09e      	b.n	800d048 <_strtod_l+0x2e8>
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	e7c8      	b.n	800cea0 <_strtod_l+0x140>
 800cf0e:	f1bb 0f08 	cmp.w	fp, #8
 800cf12:	bfd8      	it	le
 800cf14:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800cf16:	f100 0001 	add.w	r0, r0, #1
 800cf1a:	bfda      	itte	le
 800cf1c:	fb02 3301 	mlale	r3, r2, r1, r3
 800cf20:	9309      	strle	r3, [sp, #36]	; 0x24
 800cf22:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800cf26:	f10b 0b01 	add.w	fp, fp, #1
 800cf2a:	9015      	str	r0, [sp, #84]	; 0x54
 800cf2c:	e7c1      	b.n	800ceb2 <_strtod_l+0x152>
 800cf2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf30:	1c5a      	adds	r2, r3, #1
 800cf32:	9215      	str	r2, [sp, #84]	; 0x54
 800cf34:	785a      	ldrb	r2, [r3, #1]
 800cf36:	f1bb 0f00 	cmp.w	fp, #0
 800cf3a:	d037      	beq.n	800cfac <_strtod_l+0x24c>
 800cf3c:	9005      	str	r0, [sp, #20]
 800cf3e:	465e      	mov	r6, fp
 800cf40:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800cf44:	2b09      	cmp	r3, #9
 800cf46:	d912      	bls.n	800cf6e <_strtod_l+0x20e>
 800cf48:	2301      	movs	r3, #1
 800cf4a:	e7c4      	b.n	800ced6 <_strtod_l+0x176>
 800cf4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf4e:	1c5a      	adds	r2, r3, #1
 800cf50:	9215      	str	r2, [sp, #84]	; 0x54
 800cf52:	785a      	ldrb	r2, [r3, #1]
 800cf54:	3001      	adds	r0, #1
 800cf56:	2a30      	cmp	r2, #48	; 0x30
 800cf58:	d0f8      	beq.n	800cf4c <_strtod_l+0x1ec>
 800cf5a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800cf5e:	2b08      	cmp	r3, #8
 800cf60:	f200 84c1 	bhi.w	800d8e6 <_strtod_l+0xb86>
 800cf64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf66:	9005      	str	r0, [sp, #20]
 800cf68:	2000      	movs	r0, #0
 800cf6a:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf6c:	4606      	mov	r6, r0
 800cf6e:	3a30      	subs	r2, #48	; 0x30
 800cf70:	f100 0301 	add.w	r3, r0, #1
 800cf74:	d014      	beq.n	800cfa0 <_strtod_l+0x240>
 800cf76:	9905      	ldr	r1, [sp, #20]
 800cf78:	4419      	add	r1, r3
 800cf7a:	9105      	str	r1, [sp, #20]
 800cf7c:	4633      	mov	r3, r6
 800cf7e:	eb00 0c06 	add.w	ip, r0, r6
 800cf82:	210a      	movs	r1, #10
 800cf84:	4563      	cmp	r3, ip
 800cf86:	d113      	bne.n	800cfb0 <_strtod_l+0x250>
 800cf88:	1833      	adds	r3, r6, r0
 800cf8a:	2b08      	cmp	r3, #8
 800cf8c:	f106 0601 	add.w	r6, r6, #1
 800cf90:	4406      	add	r6, r0
 800cf92:	dc1a      	bgt.n	800cfca <_strtod_l+0x26a>
 800cf94:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf96:	230a      	movs	r3, #10
 800cf98:	fb03 2301 	mla	r3, r3, r1, r2
 800cf9c:	9309      	str	r3, [sp, #36]	; 0x24
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cfa2:	1c51      	adds	r1, r2, #1
 800cfa4:	9115      	str	r1, [sp, #84]	; 0x54
 800cfa6:	7852      	ldrb	r2, [r2, #1]
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	e7c9      	b.n	800cf40 <_strtod_l+0x1e0>
 800cfac:	4658      	mov	r0, fp
 800cfae:	e7d2      	b.n	800cf56 <_strtod_l+0x1f6>
 800cfb0:	2b08      	cmp	r3, #8
 800cfb2:	f103 0301 	add.w	r3, r3, #1
 800cfb6:	dc03      	bgt.n	800cfc0 <_strtod_l+0x260>
 800cfb8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cfba:	434f      	muls	r7, r1
 800cfbc:	9709      	str	r7, [sp, #36]	; 0x24
 800cfbe:	e7e1      	b.n	800cf84 <_strtod_l+0x224>
 800cfc0:	2b10      	cmp	r3, #16
 800cfc2:	bfd8      	it	le
 800cfc4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800cfc8:	e7dc      	b.n	800cf84 <_strtod_l+0x224>
 800cfca:	2e10      	cmp	r6, #16
 800cfcc:	bfdc      	itt	le
 800cfce:	230a      	movle	r3, #10
 800cfd0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800cfd4:	e7e3      	b.n	800cf9e <_strtod_l+0x23e>
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	9305      	str	r3, [sp, #20]
 800cfda:	2301      	movs	r3, #1
 800cfdc:	e780      	b.n	800cee0 <_strtod_l+0x180>
 800cfde:	f04f 0c00 	mov.w	ip, #0
 800cfe2:	1caa      	adds	r2, r5, #2
 800cfe4:	9215      	str	r2, [sp, #84]	; 0x54
 800cfe6:	78aa      	ldrb	r2, [r5, #2]
 800cfe8:	e788      	b.n	800cefc <_strtod_l+0x19c>
 800cfea:	f04f 0c01 	mov.w	ip, #1
 800cfee:	e7f8      	b.n	800cfe2 <_strtod_l+0x282>
 800cff0:	08013a60 	.word	0x08013a60
 800cff4:	08013a5c 	.word	0x08013a5c
 800cff8:	7ff00000 	.word	0x7ff00000
 800cffc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cffe:	1c51      	adds	r1, r2, #1
 800d000:	9115      	str	r1, [sp, #84]	; 0x54
 800d002:	7852      	ldrb	r2, [r2, #1]
 800d004:	2a30      	cmp	r2, #48	; 0x30
 800d006:	d0f9      	beq.n	800cffc <_strtod_l+0x29c>
 800d008:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d00c:	2908      	cmp	r1, #8
 800d00e:	f63f af7a 	bhi.w	800cf06 <_strtod_l+0x1a6>
 800d012:	3a30      	subs	r2, #48	; 0x30
 800d014:	9208      	str	r2, [sp, #32]
 800d016:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d018:	920c      	str	r2, [sp, #48]	; 0x30
 800d01a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d01c:	1c57      	adds	r7, r2, #1
 800d01e:	9715      	str	r7, [sp, #84]	; 0x54
 800d020:	7852      	ldrb	r2, [r2, #1]
 800d022:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d026:	f1be 0f09 	cmp.w	lr, #9
 800d02a:	d938      	bls.n	800d09e <_strtod_l+0x33e>
 800d02c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d02e:	1a7f      	subs	r7, r7, r1
 800d030:	2f08      	cmp	r7, #8
 800d032:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800d036:	dc03      	bgt.n	800d040 <_strtod_l+0x2e0>
 800d038:	9908      	ldr	r1, [sp, #32]
 800d03a:	428f      	cmp	r7, r1
 800d03c:	bfa8      	it	ge
 800d03e:	460f      	movge	r7, r1
 800d040:	f1bc 0f00 	cmp.w	ip, #0
 800d044:	d000      	beq.n	800d048 <_strtod_l+0x2e8>
 800d046:	427f      	negs	r7, r7
 800d048:	2e00      	cmp	r6, #0
 800d04a:	d14f      	bne.n	800d0ec <_strtod_l+0x38c>
 800d04c:	9904      	ldr	r1, [sp, #16]
 800d04e:	4301      	orrs	r1, r0
 800d050:	f47f aec1 	bne.w	800cdd6 <_strtod_l+0x76>
 800d054:	2b00      	cmp	r3, #0
 800d056:	f47f aedb 	bne.w	800ce10 <_strtod_l+0xb0>
 800d05a:	2a69      	cmp	r2, #105	; 0x69
 800d05c:	d029      	beq.n	800d0b2 <_strtod_l+0x352>
 800d05e:	dc26      	bgt.n	800d0ae <_strtod_l+0x34e>
 800d060:	2a49      	cmp	r2, #73	; 0x49
 800d062:	d026      	beq.n	800d0b2 <_strtod_l+0x352>
 800d064:	2a4e      	cmp	r2, #78	; 0x4e
 800d066:	f47f aed3 	bne.w	800ce10 <_strtod_l+0xb0>
 800d06a:	499b      	ldr	r1, [pc, #620]	; (800d2d8 <_strtod_l+0x578>)
 800d06c:	a815      	add	r0, sp, #84	; 0x54
 800d06e:	f002 fe45 	bl	800fcfc <__match>
 800d072:	2800      	cmp	r0, #0
 800d074:	f43f aecc 	beq.w	800ce10 <_strtod_l+0xb0>
 800d078:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	2b28      	cmp	r3, #40	; 0x28
 800d07e:	d12f      	bne.n	800d0e0 <_strtod_l+0x380>
 800d080:	4996      	ldr	r1, [pc, #600]	; (800d2dc <_strtod_l+0x57c>)
 800d082:	aa18      	add	r2, sp, #96	; 0x60
 800d084:	a815      	add	r0, sp, #84	; 0x54
 800d086:	f002 fe4d 	bl	800fd24 <__hexnan>
 800d08a:	2805      	cmp	r0, #5
 800d08c:	d128      	bne.n	800d0e0 <_strtod_l+0x380>
 800d08e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d090:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d094:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800d098:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800d09c:	e69b      	b.n	800cdd6 <_strtod_l+0x76>
 800d09e:	9f08      	ldr	r7, [sp, #32]
 800d0a0:	210a      	movs	r1, #10
 800d0a2:	fb01 2107 	mla	r1, r1, r7, r2
 800d0a6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800d0aa:	9208      	str	r2, [sp, #32]
 800d0ac:	e7b5      	b.n	800d01a <_strtod_l+0x2ba>
 800d0ae:	2a6e      	cmp	r2, #110	; 0x6e
 800d0b0:	e7d9      	b.n	800d066 <_strtod_l+0x306>
 800d0b2:	498b      	ldr	r1, [pc, #556]	; (800d2e0 <_strtod_l+0x580>)
 800d0b4:	a815      	add	r0, sp, #84	; 0x54
 800d0b6:	f002 fe21 	bl	800fcfc <__match>
 800d0ba:	2800      	cmp	r0, #0
 800d0bc:	f43f aea8 	beq.w	800ce10 <_strtod_l+0xb0>
 800d0c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d0c2:	4988      	ldr	r1, [pc, #544]	; (800d2e4 <_strtod_l+0x584>)
 800d0c4:	3b01      	subs	r3, #1
 800d0c6:	a815      	add	r0, sp, #84	; 0x54
 800d0c8:	9315      	str	r3, [sp, #84]	; 0x54
 800d0ca:	f002 fe17 	bl	800fcfc <__match>
 800d0ce:	b910      	cbnz	r0, 800d0d6 <_strtod_l+0x376>
 800d0d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	9315      	str	r3, [sp, #84]	; 0x54
 800d0d6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800d2f4 <_strtod_l+0x594>
 800d0da:	f04f 0800 	mov.w	r8, #0
 800d0de:	e67a      	b.n	800cdd6 <_strtod_l+0x76>
 800d0e0:	4881      	ldr	r0, [pc, #516]	; (800d2e8 <_strtod_l+0x588>)
 800d0e2:	f001 fc8d 	bl	800ea00 <nan>
 800d0e6:	ec59 8b10 	vmov	r8, r9, d0
 800d0ea:	e674      	b.n	800cdd6 <_strtod_l+0x76>
 800d0ec:	9b05      	ldr	r3, [sp, #20]
 800d0ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0f0:	1afb      	subs	r3, r7, r3
 800d0f2:	f1bb 0f00 	cmp.w	fp, #0
 800d0f6:	bf08      	it	eq
 800d0f8:	46b3      	moveq	fp, r6
 800d0fa:	2e10      	cmp	r6, #16
 800d0fc:	9308      	str	r3, [sp, #32]
 800d0fe:	4635      	mov	r5, r6
 800d100:	bfa8      	it	ge
 800d102:	2510      	movge	r5, #16
 800d104:	f7f3 f9fe 	bl	8000504 <__aeabi_ui2d>
 800d108:	2e09      	cmp	r6, #9
 800d10a:	4680      	mov	r8, r0
 800d10c:	4689      	mov	r9, r1
 800d10e:	dd13      	ble.n	800d138 <_strtod_l+0x3d8>
 800d110:	4b76      	ldr	r3, [pc, #472]	; (800d2ec <_strtod_l+0x58c>)
 800d112:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d116:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d11a:	f7f3 fa6d 	bl	80005f8 <__aeabi_dmul>
 800d11e:	4680      	mov	r8, r0
 800d120:	4650      	mov	r0, sl
 800d122:	4689      	mov	r9, r1
 800d124:	f7f3 f9ee 	bl	8000504 <__aeabi_ui2d>
 800d128:	4602      	mov	r2, r0
 800d12a:	460b      	mov	r3, r1
 800d12c:	4640      	mov	r0, r8
 800d12e:	4649      	mov	r1, r9
 800d130:	f7f3 f8ac 	bl	800028c <__adddf3>
 800d134:	4680      	mov	r8, r0
 800d136:	4689      	mov	r9, r1
 800d138:	2e0f      	cmp	r6, #15
 800d13a:	dc38      	bgt.n	800d1ae <_strtod_l+0x44e>
 800d13c:	9b08      	ldr	r3, [sp, #32]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	f43f ae49 	beq.w	800cdd6 <_strtod_l+0x76>
 800d144:	dd24      	ble.n	800d190 <_strtod_l+0x430>
 800d146:	2b16      	cmp	r3, #22
 800d148:	dc0b      	bgt.n	800d162 <_strtod_l+0x402>
 800d14a:	4968      	ldr	r1, [pc, #416]	; (800d2ec <_strtod_l+0x58c>)
 800d14c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d150:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d154:	4642      	mov	r2, r8
 800d156:	464b      	mov	r3, r9
 800d158:	f7f3 fa4e 	bl	80005f8 <__aeabi_dmul>
 800d15c:	4680      	mov	r8, r0
 800d15e:	4689      	mov	r9, r1
 800d160:	e639      	b.n	800cdd6 <_strtod_l+0x76>
 800d162:	9a08      	ldr	r2, [sp, #32]
 800d164:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800d168:	4293      	cmp	r3, r2
 800d16a:	db20      	blt.n	800d1ae <_strtod_l+0x44e>
 800d16c:	4c5f      	ldr	r4, [pc, #380]	; (800d2ec <_strtod_l+0x58c>)
 800d16e:	f1c6 060f 	rsb	r6, r6, #15
 800d172:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800d176:	4642      	mov	r2, r8
 800d178:	464b      	mov	r3, r9
 800d17a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d17e:	f7f3 fa3b 	bl	80005f8 <__aeabi_dmul>
 800d182:	9b08      	ldr	r3, [sp, #32]
 800d184:	1b9e      	subs	r6, r3, r6
 800d186:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800d18a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d18e:	e7e3      	b.n	800d158 <_strtod_l+0x3f8>
 800d190:	9b08      	ldr	r3, [sp, #32]
 800d192:	3316      	adds	r3, #22
 800d194:	db0b      	blt.n	800d1ae <_strtod_l+0x44e>
 800d196:	9b05      	ldr	r3, [sp, #20]
 800d198:	1bdf      	subs	r7, r3, r7
 800d19a:	4b54      	ldr	r3, [pc, #336]	; (800d2ec <_strtod_l+0x58c>)
 800d19c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d1a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1a4:	4640      	mov	r0, r8
 800d1a6:	4649      	mov	r1, r9
 800d1a8:	f7f3 fb50 	bl	800084c <__aeabi_ddiv>
 800d1ac:	e7d6      	b.n	800d15c <_strtod_l+0x3fc>
 800d1ae:	9b08      	ldr	r3, [sp, #32]
 800d1b0:	1b75      	subs	r5, r6, r5
 800d1b2:	441d      	add	r5, r3
 800d1b4:	2d00      	cmp	r5, #0
 800d1b6:	dd70      	ble.n	800d29a <_strtod_l+0x53a>
 800d1b8:	f015 030f 	ands.w	r3, r5, #15
 800d1bc:	d00a      	beq.n	800d1d4 <_strtod_l+0x474>
 800d1be:	494b      	ldr	r1, [pc, #300]	; (800d2ec <_strtod_l+0x58c>)
 800d1c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d1c4:	4642      	mov	r2, r8
 800d1c6:	464b      	mov	r3, r9
 800d1c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1cc:	f7f3 fa14 	bl	80005f8 <__aeabi_dmul>
 800d1d0:	4680      	mov	r8, r0
 800d1d2:	4689      	mov	r9, r1
 800d1d4:	f035 050f 	bics.w	r5, r5, #15
 800d1d8:	d04d      	beq.n	800d276 <_strtod_l+0x516>
 800d1da:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800d1de:	dd22      	ble.n	800d226 <_strtod_l+0x4c6>
 800d1e0:	2500      	movs	r5, #0
 800d1e2:	46ab      	mov	fp, r5
 800d1e4:	9509      	str	r5, [sp, #36]	; 0x24
 800d1e6:	9505      	str	r5, [sp, #20]
 800d1e8:	2322      	movs	r3, #34	; 0x22
 800d1ea:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800d2f4 <_strtod_l+0x594>
 800d1ee:	6023      	str	r3, [r4, #0]
 800d1f0:	f04f 0800 	mov.w	r8, #0
 800d1f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	f43f aded 	beq.w	800cdd6 <_strtod_l+0x76>
 800d1fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d1fe:	4620      	mov	r0, r4
 800d200:	f002 fe7e 	bl	800ff00 <_Bfree>
 800d204:	9905      	ldr	r1, [sp, #20]
 800d206:	4620      	mov	r0, r4
 800d208:	f002 fe7a 	bl	800ff00 <_Bfree>
 800d20c:	4659      	mov	r1, fp
 800d20e:	4620      	mov	r0, r4
 800d210:	f002 fe76 	bl	800ff00 <_Bfree>
 800d214:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d216:	4620      	mov	r0, r4
 800d218:	f002 fe72 	bl	800ff00 <_Bfree>
 800d21c:	4629      	mov	r1, r5
 800d21e:	4620      	mov	r0, r4
 800d220:	f002 fe6e 	bl	800ff00 <_Bfree>
 800d224:	e5d7      	b.n	800cdd6 <_strtod_l+0x76>
 800d226:	4b32      	ldr	r3, [pc, #200]	; (800d2f0 <_strtod_l+0x590>)
 800d228:	9304      	str	r3, [sp, #16]
 800d22a:	2300      	movs	r3, #0
 800d22c:	112d      	asrs	r5, r5, #4
 800d22e:	4640      	mov	r0, r8
 800d230:	4649      	mov	r1, r9
 800d232:	469a      	mov	sl, r3
 800d234:	2d01      	cmp	r5, #1
 800d236:	dc21      	bgt.n	800d27c <_strtod_l+0x51c>
 800d238:	b10b      	cbz	r3, 800d23e <_strtod_l+0x4de>
 800d23a:	4680      	mov	r8, r0
 800d23c:	4689      	mov	r9, r1
 800d23e:	492c      	ldr	r1, [pc, #176]	; (800d2f0 <_strtod_l+0x590>)
 800d240:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800d244:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d248:	4642      	mov	r2, r8
 800d24a:	464b      	mov	r3, r9
 800d24c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d250:	f7f3 f9d2 	bl	80005f8 <__aeabi_dmul>
 800d254:	4b27      	ldr	r3, [pc, #156]	; (800d2f4 <_strtod_l+0x594>)
 800d256:	460a      	mov	r2, r1
 800d258:	400b      	ands	r3, r1
 800d25a:	4927      	ldr	r1, [pc, #156]	; (800d2f8 <_strtod_l+0x598>)
 800d25c:	428b      	cmp	r3, r1
 800d25e:	4680      	mov	r8, r0
 800d260:	d8be      	bhi.n	800d1e0 <_strtod_l+0x480>
 800d262:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d266:	428b      	cmp	r3, r1
 800d268:	bf86      	itte	hi
 800d26a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800d2fc <_strtod_l+0x59c>
 800d26e:	f04f 38ff 	movhi.w	r8, #4294967295
 800d272:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800d276:	2300      	movs	r3, #0
 800d278:	9304      	str	r3, [sp, #16]
 800d27a:	e07b      	b.n	800d374 <_strtod_l+0x614>
 800d27c:	07ea      	lsls	r2, r5, #31
 800d27e:	d505      	bpl.n	800d28c <_strtod_l+0x52c>
 800d280:	9b04      	ldr	r3, [sp, #16]
 800d282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d286:	f7f3 f9b7 	bl	80005f8 <__aeabi_dmul>
 800d28a:	2301      	movs	r3, #1
 800d28c:	9a04      	ldr	r2, [sp, #16]
 800d28e:	3208      	adds	r2, #8
 800d290:	f10a 0a01 	add.w	sl, sl, #1
 800d294:	106d      	asrs	r5, r5, #1
 800d296:	9204      	str	r2, [sp, #16]
 800d298:	e7cc      	b.n	800d234 <_strtod_l+0x4d4>
 800d29a:	d0ec      	beq.n	800d276 <_strtod_l+0x516>
 800d29c:	426d      	negs	r5, r5
 800d29e:	f015 020f 	ands.w	r2, r5, #15
 800d2a2:	d00a      	beq.n	800d2ba <_strtod_l+0x55a>
 800d2a4:	4b11      	ldr	r3, [pc, #68]	; (800d2ec <_strtod_l+0x58c>)
 800d2a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d2aa:	4640      	mov	r0, r8
 800d2ac:	4649      	mov	r1, r9
 800d2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b2:	f7f3 facb 	bl	800084c <__aeabi_ddiv>
 800d2b6:	4680      	mov	r8, r0
 800d2b8:	4689      	mov	r9, r1
 800d2ba:	112d      	asrs	r5, r5, #4
 800d2bc:	d0db      	beq.n	800d276 <_strtod_l+0x516>
 800d2be:	2d1f      	cmp	r5, #31
 800d2c0:	dd1e      	ble.n	800d300 <_strtod_l+0x5a0>
 800d2c2:	2500      	movs	r5, #0
 800d2c4:	46ab      	mov	fp, r5
 800d2c6:	9509      	str	r5, [sp, #36]	; 0x24
 800d2c8:	9505      	str	r5, [sp, #20]
 800d2ca:	2322      	movs	r3, #34	; 0x22
 800d2cc:	f04f 0800 	mov.w	r8, #0
 800d2d0:	f04f 0900 	mov.w	r9, #0
 800d2d4:	6023      	str	r3, [r4, #0]
 800d2d6:	e78d      	b.n	800d1f4 <_strtod_l+0x494>
 800d2d8:	08013abd 	.word	0x08013abd
 800d2dc:	08013a74 	.word	0x08013a74
 800d2e0:	08013ab5 	.word	0x08013ab5
 800d2e4:	08013af4 	.word	0x08013af4
 800d2e8:	08013e81 	.word	0x08013e81
 800d2ec:	08013c60 	.word	0x08013c60
 800d2f0:	08013c38 	.word	0x08013c38
 800d2f4:	7ff00000 	.word	0x7ff00000
 800d2f8:	7ca00000 	.word	0x7ca00000
 800d2fc:	7fefffff 	.word	0x7fefffff
 800d300:	f015 0310 	ands.w	r3, r5, #16
 800d304:	bf18      	it	ne
 800d306:	236a      	movne	r3, #106	; 0x6a
 800d308:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800d6ac <_strtod_l+0x94c>
 800d30c:	9304      	str	r3, [sp, #16]
 800d30e:	4640      	mov	r0, r8
 800d310:	4649      	mov	r1, r9
 800d312:	2300      	movs	r3, #0
 800d314:	07ea      	lsls	r2, r5, #31
 800d316:	d504      	bpl.n	800d322 <_strtod_l+0x5c2>
 800d318:	e9da 2300 	ldrd	r2, r3, [sl]
 800d31c:	f7f3 f96c 	bl	80005f8 <__aeabi_dmul>
 800d320:	2301      	movs	r3, #1
 800d322:	106d      	asrs	r5, r5, #1
 800d324:	f10a 0a08 	add.w	sl, sl, #8
 800d328:	d1f4      	bne.n	800d314 <_strtod_l+0x5b4>
 800d32a:	b10b      	cbz	r3, 800d330 <_strtod_l+0x5d0>
 800d32c:	4680      	mov	r8, r0
 800d32e:	4689      	mov	r9, r1
 800d330:	9b04      	ldr	r3, [sp, #16]
 800d332:	b1bb      	cbz	r3, 800d364 <_strtod_l+0x604>
 800d334:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800d338:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	4649      	mov	r1, r9
 800d340:	dd10      	ble.n	800d364 <_strtod_l+0x604>
 800d342:	2b1f      	cmp	r3, #31
 800d344:	f340 811e 	ble.w	800d584 <_strtod_l+0x824>
 800d348:	2b34      	cmp	r3, #52	; 0x34
 800d34a:	bfde      	ittt	le
 800d34c:	f04f 33ff 	movle.w	r3, #4294967295
 800d350:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d354:	4093      	lslle	r3, r2
 800d356:	f04f 0800 	mov.w	r8, #0
 800d35a:	bfcc      	ite	gt
 800d35c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800d360:	ea03 0901 	andle.w	r9, r3, r1
 800d364:	2200      	movs	r2, #0
 800d366:	2300      	movs	r3, #0
 800d368:	4640      	mov	r0, r8
 800d36a:	4649      	mov	r1, r9
 800d36c:	f7f3 fbac 	bl	8000ac8 <__aeabi_dcmpeq>
 800d370:	2800      	cmp	r0, #0
 800d372:	d1a6      	bne.n	800d2c2 <_strtod_l+0x562>
 800d374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d376:	9300      	str	r3, [sp, #0]
 800d378:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d37a:	4633      	mov	r3, r6
 800d37c:	465a      	mov	r2, fp
 800d37e:	4620      	mov	r0, r4
 800d380:	f002 fe26 	bl	800ffd0 <__s2b>
 800d384:	9009      	str	r0, [sp, #36]	; 0x24
 800d386:	2800      	cmp	r0, #0
 800d388:	f43f af2a 	beq.w	800d1e0 <_strtod_l+0x480>
 800d38c:	9a08      	ldr	r2, [sp, #32]
 800d38e:	9b05      	ldr	r3, [sp, #20]
 800d390:	2a00      	cmp	r2, #0
 800d392:	eba3 0307 	sub.w	r3, r3, r7
 800d396:	bfa8      	it	ge
 800d398:	2300      	movge	r3, #0
 800d39a:	930c      	str	r3, [sp, #48]	; 0x30
 800d39c:	2500      	movs	r5, #0
 800d39e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d3a2:	9312      	str	r3, [sp, #72]	; 0x48
 800d3a4:	46ab      	mov	fp, r5
 800d3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3a8:	4620      	mov	r0, r4
 800d3aa:	6859      	ldr	r1, [r3, #4]
 800d3ac:	f002 fd68 	bl	800fe80 <_Balloc>
 800d3b0:	9005      	str	r0, [sp, #20]
 800d3b2:	2800      	cmp	r0, #0
 800d3b4:	f43f af18 	beq.w	800d1e8 <_strtod_l+0x488>
 800d3b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3ba:	691a      	ldr	r2, [r3, #16]
 800d3bc:	3202      	adds	r2, #2
 800d3be:	f103 010c 	add.w	r1, r3, #12
 800d3c2:	0092      	lsls	r2, r2, #2
 800d3c4:	300c      	adds	r0, #12
 800d3c6:	f001 fb0a 	bl	800e9de <memcpy>
 800d3ca:	ec49 8b10 	vmov	d0, r8, r9
 800d3ce:	aa18      	add	r2, sp, #96	; 0x60
 800d3d0:	a917      	add	r1, sp, #92	; 0x5c
 800d3d2:	4620      	mov	r0, r4
 800d3d4:	f003 f930 	bl	8010638 <__d2b>
 800d3d8:	ec49 8b18 	vmov	d8, r8, r9
 800d3dc:	9016      	str	r0, [sp, #88]	; 0x58
 800d3de:	2800      	cmp	r0, #0
 800d3e0:	f43f af02 	beq.w	800d1e8 <_strtod_l+0x488>
 800d3e4:	2101      	movs	r1, #1
 800d3e6:	4620      	mov	r0, r4
 800d3e8:	f002 fe8a 	bl	8010100 <__i2b>
 800d3ec:	4683      	mov	fp, r0
 800d3ee:	2800      	cmp	r0, #0
 800d3f0:	f43f aefa 	beq.w	800d1e8 <_strtod_l+0x488>
 800d3f4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d3f6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d3f8:	2e00      	cmp	r6, #0
 800d3fa:	bfab      	itete	ge
 800d3fc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800d3fe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800d400:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d402:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800d406:	bfac      	ite	ge
 800d408:	eb06 0a03 	addge.w	sl, r6, r3
 800d40c:	1b9f      	sublt	r7, r3, r6
 800d40e:	9b04      	ldr	r3, [sp, #16]
 800d410:	1af6      	subs	r6, r6, r3
 800d412:	4416      	add	r6, r2
 800d414:	4ba0      	ldr	r3, [pc, #640]	; (800d698 <_strtod_l+0x938>)
 800d416:	3e01      	subs	r6, #1
 800d418:	429e      	cmp	r6, r3
 800d41a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d41e:	f280 80c4 	bge.w	800d5aa <_strtod_l+0x84a>
 800d422:	1b9b      	subs	r3, r3, r6
 800d424:	2b1f      	cmp	r3, #31
 800d426:	eba2 0203 	sub.w	r2, r2, r3
 800d42a:	f04f 0101 	mov.w	r1, #1
 800d42e:	f300 80b0 	bgt.w	800d592 <_strtod_l+0x832>
 800d432:	fa01 f303 	lsl.w	r3, r1, r3
 800d436:	930e      	str	r3, [sp, #56]	; 0x38
 800d438:	2300      	movs	r3, #0
 800d43a:	930d      	str	r3, [sp, #52]	; 0x34
 800d43c:	eb0a 0602 	add.w	r6, sl, r2
 800d440:	9b04      	ldr	r3, [sp, #16]
 800d442:	45b2      	cmp	sl, r6
 800d444:	4417      	add	r7, r2
 800d446:	441f      	add	r7, r3
 800d448:	4653      	mov	r3, sl
 800d44a:	bfa8      	it	ge
 800d44c:	4633      	movge	r3, r6
 800d44e:	42bb      	cmp	r3, r7
 800d450:	bfa8      	it	ge
 800d452:	463b      	movge	r3, r7
 800d454:	2b00      	cmp	r3, #0
 800d456:	bfc2      	ittt	gt
 800d458:	1af6      	subgt	r6, r6, r3
 800d45a:	1aff      	subgt	r7, r7, r3
 800d45c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800d460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d462:	2b00      	cmp	r3, #0
 800d464:	dd17      	ble.n	800d496 <_strtod_l+0x736>
 800d466:	4659      	mov	r1, fp
 800d468:	461a      	mov	r2, r3
 800d46a:	4620      	mov	r0, r4
 800d46c:	f002 ff08 	bl	8010280 <__pow5mult>
 800d470:	4683      	mov	fp, r0
 800d472:	2800      	cmp	r0, #0
 800d474:	f43f aeb8 	beq.w	800d1e8 <_strtod_l+0x488>
 800d478:	4601      	mov	r1, r0
 800d47a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d47c:	4620      	mov	r0, r4
 800d47e:	f002 fe55 	bl	801012c <__multiply>
 800d482:	900b      	str	r0, [sp, #44]	; 0x2c
 800d484:	2800      	cmp	r0, #0
 800d486:	f43f aeaf 	beq.w	800d1e8 <_strtod_l+0x488>
 800d48a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d48c:	4620      	mov	r0, r4
 800d48e:	f002 fd37 	bl	800ff00 <_Bfree>
 800d492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d494:	9316      	str	r3, [sp, #88]	; 0x58
 800d496:	2e00      	cmp	r6, #0
 800d498:	f300 808c 	bgt.w	800d5b4 <_strtod_l+0x854>
 800d49c:	9b08      	ldr	r3, [sp, #32]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	dd08      	ble.n	800d4b4 <_strtod_l+0x754>
 800d4a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d4a4:	9905      	ldr	r1, [sp, #20]
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	f002 feea 	bl	8010280 <__pow5mult>
 800d4ac:	9005      	str	r0, [sp, #20]
 800d4ae:	2800      	cmp	r0, #0
 800d4b0:	f43f ae9a 	beq.w	800d1e8 <_strtod_l+0x488>
 800d4b4:	2f00      	cmp	r7, #0
 800d4b6:	dd08      	ble.n	800d4ca <_strtod_l+0x76a>
 800d4b8:	9905      	ldr	r1, [sp, #20]
 800d4ba:	463a      	mov	r2, r7
 800d4bc:	4620      	mov	r0, r4
 800d4be:	f002 ff39 	bl	8010334 <__lshift>
 800d4c2:	9005      	str	r0, [sp, #20]
 800d4c4:	2800      	cmp	r0, #0
 800d4c6:	f43f ae8f 	beq.w	800d1e8 <_strtod_l+0x488>
 800d4ca:	f1ba 0f00 	cmp.w	sl, #0
 800d4ce:	dd08      	ble.n	800d4e2 <_strtod_l+0x782>
 800d4d0:	4659      	mov	r1, fp
 800d4d2:	4652      	mov	r2, sl
 800d4d4:	4620      	mov	r0, r4
 800d4d6:	f002 ff2d 	bl	8010334 <__lshift>
 800d4da:	4683      	mov	fp, r0
 800d4dc:	2800      	cmp	r0, #0
 800d4de:	f43f ae83 	beq.w	800d1e8 <_strtod_l+0x488>
 800d4e2:	9a05      	ldr	r2, [sp, #20]
 800d4e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d4e6:	4620      	mov	r0, r4
 800d4e8:	f002 ffac 	bl	8010444 <__mdiff>
 800d4ec:	4605      	mov	r5, r0
 800d4ee:	2800      	cmp	r0, #0
 800d4f0:	f43f ae7a 	beq.w	800d1e8 <_strtod_l+0x488>
 800d4f4:	68c3      	ldr	r3, [r0, #12]
 800d4f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	60c3      	str	r3, [r0, #12]
 800d4fc:	4659      	mov	r1, fp
 800d4fe:	f002 ff85 	bl	801040c <__mcmp>
 800d502:	2800      	cmp	r0, #0
 800d504:	da60      	bge.n	800d5c8 <_strtod_l+0x868>
 800d506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d508:	ea53 0308 	orrs.w	r3, r3, r8
 800d50c:	f040 8084 	bne.w	800d618 <_strtod_l+0x8b8>
 800d510:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d514:	2b00      	cmp	r3, #0
 800d516:	d17f      	bne.n	800d618 <_strtod_l+0x8b8>
 800d518:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d51c:	0d1b      	lsrs	r3, r3, #20
 800d51e:	051b      	lsls	r3, r3, #20
 800d520:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d524:	d978      	bls.n	800d618 <_strtod_l+0x8b8>
 800d526:	696b      	ldr	r3, [r5, #20]
 800d528:	b913      	cbnz	r3, 800d530 <_strtod_l+0x7d0>
 800d52a:	692b      	ldr	r3, [r5, #16]
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	dd73      	ble.n	800d618 <_strtod_l+0x8b8>
 800d530:	4629      	mov	r1, r5
 800d532:	2201      	movs	r2, #1
 800d534:	4620      	mov	r0, r4
 800d536:	f002 fefd 	bl	8010334 <__lshift>
 800d53a:	4659      	mov	r1, fp
 800d53c:	4605      	mov	r5, r0
 800d53e:	f002 ff65 	bl	801040c <__mcmp>
 800d542:	2800      	cmp	r0, #0
 800d544:	dd68      	ble.n	800d618 <_strtod_l+0x8b8>
 800d546:	9904      	ldr	r1, [sp, #16]
 800d548:	4a54      	ldr	r2, [pc, #336]	; (800d69c <_strtod_l+0x93c>)
 800d54a:	464b      	mov	r3, r9
 800d54c:	2900      	cmp	r1, #0
 800d54e:	f000 8084 	beq.w	800d65a <_strtod_l+0x8fa>
 800d552:	ea02 0109 	and.w	r1, r2, r9
 800d556:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d55a:	dc7e      	bgt.n	800d65a <_strtod_l+0x8fa>
 800d55c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d560:	f77f aeb3 	ble.w	800d2ca <_strtod_l+0x56a>
 800d564:	4b4e      	ldr	r3, [pc, #312]	; (800d6a0 <_strtod_l+0x940>)
 800d566:	4640      	mov	r0, r8
 800d568:	4649      	mov	r1, r9
 800d56a:	2200      	movs	r2, #0
 800d56c:	f7f3 f844 	bl	80005f8 <__aeabi_dmul>
 800d570:	4b4a      	ldr	r3, [pc, #296]	; (800d69c <_strtod_l+0x93c>)
 800d572:	400b      	ands	r3, r1
 800d574:	4680      	mov	r8, r0
 800d576:	4689      	mov	r9, r1
 800d578:	2b00      	cmp	r3, #0
 800d57a:	f47f ae3f 	bne.w	800d1fc <_strtod_l+0x49c>
 800d57e:	2322      	movs	r3, #34	; 0x22
 800d580:	6023      	str	r3, [r4, #0]
 800d582:	e63b      	b.n	800d1fc <_strtod_l+0x49c>
 800d584:	f04f 32ff 	mov.w	r2, #4294967295
 800d588:	fa02 f303 	lsl.w	r3, r2, r3
 800d58c:	ea03 0808 	and.w	r8, r3, r8
 800d590:	e6e8      	b.n	800d364 <_strtod_l+0x604>
 800d592:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d596:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d59a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d59e:	36e2      	adds	r6, #226	; 0xe2
 800d5a0:	fa01 f306 	lsl.w	r3, r1, r6
 800d5a4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800d5a8:	e748      	b.n	800d43c <_strtod_l+0x6dc>
 800d5aa:	2100      	movs	r1, #0
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800d5b2:	e743      	b.n	800d43c <_strtod_l+0x6dc>
 800d5b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d5b6:	4632      	mov	r2, r6
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	f002 febb 	bl	8010334 <__lshift>
 800d5be:	9016      	str	r0, [sp, #88]	; 0x58
 800d5c0:	2800      	cmp	r0, #0
 800d5c2:	f47f af6b 	bne.w	800d49c <_strtod_l+0x73c>
 800d5c6:	e60f      	b.n	800d1e8 <_strtod_l+0x488>
 800d5c8:	46ca      	mov	sl, r9
 800d5ca:	d171      	bne.n	800d6b0 <_strtod_l+0x950>
 800d5cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d5ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d5d2:	b352      	cbz	r2, 800d62a <_strtod_l+0x8ca>
 800d5d4:	4a33      	ldr	r2, [pc, #204]	; (800d6a4 <_strtod_l+0x944>)
 800d5d6:	4293      	cmp	r3, r2
 800d5d8:	d12a      	bne.n	800d630 <_strtod_l+0x8d0>
 800d5da:	9b04      	ldr	r3, [sp, #16]
 800d5dc:	4641      	mov	r1, r8
 800d5de:	b1fb      	cbz	r3, 800d620 <_strtod_l+0x8c0>
 800d5e0:	4b2e      	ldr	r3, [pc, #184]	; (800d69c <_strtod_l+0x93c>)
 800d5e2:	ea09 0303 	and.w	r3, r9, r3
 800d5e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d5ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d5ee:	d81a      	bhi.n	800d626 <_strtod_l+0x8c6>
 800d5f0:	0d1b      	lsrs	r3, r3, #20
 800d5f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d5f6:	fa02 f303 	lsl.w	r3, r2, r3
 800d5fa:	4299      	cmp	r1, r3
 800d5fc:	d118      	bne.n	800d630 <_strtod_l+0x8d0>
 800d5fe:	4b2a      	ldr	r3, [pc, #168]	; (800d6a8 <_strtod_l+0x948>)
 800d600:	459a      	cmp	sl, r3
 800d602:	d102      	bne.n	800d60a <_strtod_l+0x8aa>
 800d604:	3101      	adds	r1, #1
 800d606:	f43f adef 	beq.w	800d1e8 <_strtod_l+0x488>
 800d60a:	4b24      	ldr	r3, [pc, #144]	; (800d69c <_strtod_l+0x93c>)
 800d60c:	ea0a 0303 	and.w	r3, sl, r3
 800d610:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800d614:	f04f 0800 	mov.w	r8, #0
 800d618:	9b04      	ldr	r3, [sp, #16]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d1a2      	bne.n	800d564 <_strtod_l+0x804>
 800d61e:	e5ed      	b.n	800d1fc <_strtod_l+0x49c>
 800d620:	f04f 33ff 	mov.w	r3, #4294967295
 800d624:	e7e9      	b.n	800d5fa <_strtod_l+0x89a>
 800d626:	4613      	mov	r3, r2
 800d628:	e7e7      	b.n	800d5fa <_strtod_l+0x89a>
 800d62a:	ea53 0308 	orrs.w	r3, r3, r8
 800d62e:	d08a      	beq.n	800d546 <_strtod_l+0x7e6>
 800d630:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d632:	b1e3      	cbz	r3, 800d66e <_strtod_l+0x90e>
 800d634:	ea13 0f0a 	tst.w	r3, sl
 800d638:	d0ee      	beq.n	800d618 <_strtod_l+0x8b8>
 800d63a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d63c:	9a04      	ldr	r2, [sp, #16]
 800d63e:	4640      	mov	r0, r8
 800d640:	4649      	mov	r1, r9
 800d642:	b1c3      	cbz	r3, 800d676 <_strtod_l+0x916>
 800d644:	f7ff fb70 	bl	800cd28 <sulp>
 800d648:	4602      	mov	r2, r0
 800d64a:	460b      	mov	r3, r1
 800d64c:	ec51 0b18 	vmov	r0, r1, d8
 800d650:	f7f2 fe1c 	bl	800028c <__adddf3>
 800d654:	4680      	mov	r8, r0
 800d656:	4689      	mov	r9, r1
 800d658:	e7de      	b.n	800d618 <_strtod_l+0x8b8>
 800d65a:	4013      	ands	r3, r2
 800d65c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d660:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800d664:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800d668:	f04f 38ff 	mov.w	r8, #4294967295
 800d66c:	e7d4      	b.n	800d618 <_strtod_l+0x8b8>
 800d66e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d670:	ea13 0f08 	tst.w	r3, r8
 800d674:	e7e0      	b.n	800d638 <_strtod_l+0x8d8>
 800d676:	f7ff fb57 	bl	800cd28 <sulp>
 800d67a:	4602      	mov	r2, r0
 800d67c:	460b      	mov	r3, r1
 800d67e:	ec51 0b18 	vmov	r0, r1, d8
 800d682:	f7f2 fe01 	bl	8000288 <__aeabi_dsub>
 800d686:	2200      	movs	r2, #0
 800d688:	2300      	movs	r3, #0
 800d68a:	4680      	mov	r8, r0
 800d68c:	4689      	mov	r9, r1
 800d68e:	f7f3 fa1b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d692:	2800      	cmp	r0, #0
 800d694:	d0c0      	beq.n	800d618 <_strtod_l+0x8b8>
 800d696:	e618      	b.n	800d2ca <_strtod_l+0x56a>
 800d698:	fffffc02 	.word	0xfffffc02
 800d69c:	7ff00000 	.word	0x7ff00000
 800d6a0:	39500000 	.word	0x39500000
 800d6a4:	000fffff 	.word	0x000fffff
 800d6a8:	7fefffff 	.word	0x7fefffff
 800d6ac:	08013a88 	.word	0x08013a88
 800d6b0:	4659      	mov	r1, fp
 800d6b2:	4628      	mov	r0, r5
 800d6b4:	f003 f81a 	bl	80106ec <__ratio>
 800d6b8:	ec57 6b10 	vmov	r6, r7, d0
 800d6bc:	ee10 0a10 	vmov	r0, s0
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d6c6:	4639      	mov	r1, r7
 800d6c8:	f7f3 fa12 	bl	8000af0 <__aeabi_dcmple>
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	d071      	beq.n	800d7b4 <_strtod_l+0xa54>
 800d6d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d17c      	bne.n	800d7d0 <_strtod_l+0xa70>
 800d6d6:	f1b8 0f00 	cmp.w	r8, #0
 800d6da:	d15a      	bne.n	800d792 <_strtod_l+0xa32>
 800d6dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d15d      	bne.n	800d7a0 <_strtod_l+0xa40>
 800d6e4:	4b90      	ldr	r3, [pc, #576]	; (800d928 <_strtod_l+0xbc8>)
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	4630      	mov	r0, r6
 800d6ea:	4639      	mov	r1, r7
 800d6ec:	f7f3 f9f6 	bl	8000adc <__aeabi_dcmplt>
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	d15c      	bne.n	800d7ae <_strtod_l+0xa4e>
 800d6f4:	4630      	mov	r0, r6
 800d6f6:	4639      	mov	r1, r7
 800d6f8:	4b8c      	ldr	r3, [pc, #560]	; (800d92c <_strtod_l+0xbcc>)
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	f7f2 ff7c 	bl	80005f8 <__aeabi_dmul>
 800d700:	4606      	mov	r6, r0
 800d702:	460f      	mov	r7, r1
 800d704:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800d708:	9606      	str	r6, [sp, #24]
 800d70a:	9307      	str	r3, [sp, #28]
 800d70c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d710:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d714:	4b86      	ldr	r3, [pc, #536]	; (800d930 <_strtod_l+0xbd0>)
 800d716:	ea0a 0303 	and.w	r3, sl, r3
 800d71a:	930d      	str	r3, [sp, #52]	; 0x34
 800d71c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d71e:	4b85      	ldr	r3, [pc, #532]	; (800d934 <_strtod_l+0xbd4>)
 800d720:	429a      	cmp	r2, r3
 800d722:	f040 8090 	bne.w	800d846 <_strtod_l+0xae6>
 800d726:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800d72a:	ec49 8b10 	vmov	d0, r8, r9
 800d72e:	f002 ff13 	bl	8010558 <__ulp>
 800d732:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d736:	ec51 0b10 	vmov	r0, r1, d0
 800d73a:	f7f2 ff5d 	bl	80005f8 <__aeabi_dmul>
 800d73e:	4642      	mov	r2, r8
 800d740:	464b      	mov	r3, r9
 800d742:	f7f2 fda3 	bl	800028c <__adddf3>
 800d746:	460b      	mov	r3, r1
 800d748:	4979      	ldr	r1, [pc, #484]	; (800d930 <_strtod_l+0xbd0>)
 800d74a:	4a7b      	ldr	r2, [pc, #492]	; (800d938 <_strtod_l+0xbd8>)
 800d74c:	4019      	ands	r1, r3
 800d74e:	4291      	cmp	r1, r2
 800d750:	4680      	mov	r8, r0
 800d752:	d944      	bls.n	800d7de <_strtod_l+0xa7e>
 800d754:	ee18 2a90 	vmov	r2, s17
 800d758:	4b78      	ldr	r3, [pc, #480]	; (800d93c <_strtod_l+0xbdc>)
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d104      	bne.n	800d768 <_strtod_l+0xa08>
 800d75e:	ee18 3a10 	vmov	r3, s16
 800d762:	3301      	adds	r3, #1
 800d764:	f43f ad40 	beq.w	800d1e8 <_strtod_l+0x488>
 800d768:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800d93c <_strtod_l+0xbdc>
 800d76c:	f04f 38ff 	mov.w	r8, #4294967295
 800d770:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d772:	4620      	mov	r0, r4
 800d774:	f002 fbc4 	bl	800ff00 <_Bfree>
 800d778:	9905      	ldr	r1, [sp, #20]
 800d77a:	4620      	mov	r0, r4
 800d77c:	f002 fbc0 	bl	800ff00 <_Bfree>
 800d780:	4659      	mov	r1, fp
 800d782:	4620      	mov	r0, r4
 800d784:	f002 fbbc 	bl	800ff00 <_Bfree>
 800d788:	4629      	mov	r1, r5
 800d78a:	4620      	mov	r0, r4
 800d78c:	f002 fbb8 	bl	800ff00 <_Bfree>
 800d790:	e609      	b.n	800d3a6 <_strtod_l+0x646>
 800d792:	f1b8 0f01 	cmp.w	r8, #1
 800d796:	d103      	bne.n	800d7a0 <_strtod_l+0xa40>
 800d798:	f1b9 0f00 	cmp.w	r9, #0
 800d79c:	f43f ad95 	beq.w	800d2ca <_strtod_l+0x56a>
 800d7a0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800d8f8 <_strtod_l+0xb98>
 800d7a4:	4f60      	ldr	r7, [pc, #384]	; (800d928 <_strtod_l+0xbc8>)
 800d7a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d7aa:	2600      	movs	r6, #0
 800d7ac:	e7ae      	b.n	800d70c <_strtod_l+0x9ac>
 800d7ae:	4f5f      	ldr	r7, [pc, #380]	; (800d92c <_strtod_l+0xbcc>)
 800d7b0:	2600      	movs	r6, #0
 800d7b2:	e7a7      	b.n	800d704 <_strtod_l+0x9a4>
 800d7b4:	4b5d      	ldr	r3, [pc, #372]	; (800d92c <_strtod_l+0xbcc>)
 800d7b6:	4630      	mov	r0, r6
 800d7b8:	4639      	mov	r1, r7
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	f7f2 ff1c 	bl	80005f8 <__aeabi_dmul>
 800d7c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7c2:	4606      	mov	r6, r0
 800d7c4:	460f      	mov	r7, r1
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d09c      	beq.n	800d704 <_strtod_l+0x9a4>
 800d7ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d7ce:	e79d      	b.n	800d70c <_strtod_l+0x9ac>
 800d7d0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800d900 <_strtod_l+0xba0>
 800d7d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d7d8:	ec57 6b17 	vmov	r6, r7, d7
 800d7dc:	e796      	b.n	800d70c <_strtod_l+0x9ac>
 800d7de:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800d7e2:	9b04      	ldr	r3, [sp, #16]
 800d7e4:	46ca      	mov	sl, r9
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d1c2      	bne.n	800d770 <_strtod_l+0xa10>
 800d7ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d7ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d7f0:	0d1b      	lsrs	r3, r3, #20
 800d7f2:	051b      	lsls	r3, r3, #20
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d1bb      	bne.n	800d770 <_strtod_l+0xa10>
 800d7f8:	4630      	mov	r0, r6
 800d7fa:	4639      	mov	r1, r7
 800d7fc:	f7f3 fa5c 	bl	8000cb8 <__aeabi_d2lz>
 800d800:	f7f2 fecc 	bl	800059c <__aeabi_l2d>
 800d804:	4602      	mov	r2, r0
 800d806:	460b      	mov	r3, r1
 800d808:	4630      	mov	r0, r6
 800d80a:	4639      	mov	r1, r7
 800d80c:	f7f2 fd3c 	bl	8000288 <__aeabi_dsub>
 800d810:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d812:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d816:	ea43 0308 	orr.w	r3, r3, r8
 800d81a:	4313      	orrs	r3, r2
 800d81c:	4606      	mov	r6, r0
 800d81e:	460f      	mov	r7, r1
 800d820:	d054      	beq.n	800d8cc <_strtod_l+0xb6c>
 800d822:	a339      	add	r3, pc, #228	; (adr r3, 800d908 <_strtod_l+0xba8>)
 800d824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d828:	f7f3 f958 	bl	8000adc <__aeabi_dcmplt>
 800d82c:	2800      	cmp	r0, #0
 800d82e:	f47f ace5 	bne.w	800d1fc <_strtod_l+0x49c>
 800d832:	a337      	add	r3, pc, #220	; (adr r3, 800d910 <_strtod_l+0xbb0>)
 800d834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d838:	4630      	mov	r0, r6
 800d83a:	4639      	mov	r1, r7
 800d83c:	f7f3 f96c 	bl	8000b18 <__aeabi_dcmpgt>
 800d840:	2800      	cmp	r0, #0
 800d842:	d095      	beq.n	800d770 <_strtod_l+0xa10>
 800d844:	e4da      	b.n	800d1fc <_strtod_l+0x49c>
 800d846:	9b04      	ldr	r3, [sp, #16]
 800d848:	b333      	cbz	r3, 800d898 <_strtod_l+0xb38>
 800d84a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d84c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d850:	d822      	bhi.n	800d898 <_strtod_l+0xb38>
 800d852:	a331      	add	r3, pc, #196	; (adr r3, 800d918 <_strtod_l+0xbb8>)
 800d854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d858:	4630      	mov	r0, r6
 800d85a:	4639      	mov	r1, r7
 800d85c:	f7f3 f948 	bl	8000af0 <__aeabi_dcmple>
 800d860:	b1a0      	cbz	r0, 800d88c <_strtod_l+0xb2c>
 800d862:	4639      	mov	r1, r7
 800d864:	4630      	mov	r0, r6
 800d866:	f7f3 f99f 	bl	8000ba8 <__aeabi_d2uiz>
 800d86a:	2801      	cmp	r0, #1
 800d86c:	bf38      	it	cc
 800d86e:	2001      	movcc	r0, #1
 800d870:	f7f2 fe48 	bl	8000504 <__aeabi_ui2d>
 800d874:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d876:	4606      	mov	r6, r0
 800d878:	460f      	mov	r7, r1
 800d87a:	bb23      	cbnz	r3, 800d8c6 <_strtod_l+0xb66>
 800d87c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d880:	9010      	str	r0, [sp, #64]	; 0x40
 800d882:	9311      	str	r3, [sp, #68]	; 0x44
 800d884:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d888:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d88c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d88e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d890:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d894:	1a9b      	subs	r3, r3, r2
 800d896:	930f      	str	r3, [sp, #60]	; 0x3c
 800d898:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d89c:	eeb0 0a48 	vmov.f32	s0, s16
 800d8a0:	eef0 0a68 	vmov.f32	s1, s17
 800d8a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d8a8:	f002 fe56 	bl	8010558 <__ulp>
 800d8ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d8b0:	ec53 2b10 	vmov	r2, r3, d0
 800d8b4:	f7f2 fea0 	bl	80005f8 <__aeabi_dmul>
 800d8b8:	ec53 2b18 	vmov	r2, r3, d8
 800d8bc:	f7f2 fce6 	bl	800028c <__adddf3>
 800d8c0:	4680      	mov	r8, r0
 800d8c2:	4689      	mov	r9, r1
 800d8c4:	e78d      	b.n	800d7e2 <_strtod_l+0xa82>
 800d8c6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800d8ca:	e7db      	b.n	800d884 <_strtod_l+0xb24>
 800d8cc:	a314      	add	r3, pc, #80	; (adr r3, 800d920 <_strtod_l+0xbc0>)
 800d8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d2:	f7f3 f903 	bl	8000adc <__aeabi_dcmplt>
 800d8d6:	e7b3      	b.n	800d840 <_strtod_l+0xae0>
 800d8d8:	2300      	movs	r3, #0
 800d8da:	930a      	str	r3, [sp, #40]	; 0x28
 800d8dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d8de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d8e0:	6013      	str	r3, [r2, #0]
 800d8e2:	f7ff ba7c 	b.w	800cdde <_strtod_l+0x7e>
 800d8e6:	2a65      	cmp	r2, #101	; 0x65
 800d8e8:	f43f ab75 	beq.w	800cfd6 <_strtod_l+0x276>
 800d8ec:	2a45      	cmp	r2, #69	; 0x45
 800d8ee:	f43f ab72 	beq.w	800cfd6 <_strtod_l+0x276>
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	f7ff bbaa 	b.w	800d04c <_strtod_l+0x2ec>
 800d8f8:	00000000 	.word	0x00000000
 800d8fc:	bff00000 	.word	0xbff00000
 800d900:	00000000 	.word	0x00000000
 800d904:	3ff00000 	.word	0x3ff00000
 800d908:	94a03595 	.word	0x94a03595
 800d90c:	3fdfffff 	.word	0x3fdfffff
 800d910:	35afe535 	.word	0x35afe535
 800d914:	3fe00000 	.word	0x3fe00000
 800d918:	ffc00000 	.word	0xffc00000
 800d91c:	41dfffff 	.word	0x41dfffff
 800d920:	94a03595 	.word	0x94a03595
 800d924:	3fcfffff 	.word	0x3fcfffff
 800d928:	3ff00000 	.word	0x3ff00000
 800d92c:	3fe00000 	.word	0x3fe00000
 800d930:	7ff00000 	.word	0x7ff00000
 800d934:	7fe00000 	.word	0x7fe00000
 800d938:	7c9fffff 	.word	0x7c9fffff
 800d93c:	7fefffff 	.word	0x7fefffff

0800d940 <_strtod_r>:
 800d940:	4b01      	ldr	r3, [pc, #4]	; (800d948 <_strtod_r+0x8>)
 800d942:	f7ff ba0d 	b.w	800cd60 <_strtod_l>
 800d946:	bf00      	nop
 800d948:	2000004c 	.word	0x2000004c

0800d94c <strtod>:
 800d94c:	460a      	mov	r2, r1
 800d94e:	4601      	mov	r1, r0
 800d950:	4802      	ldr	r0, [pc, #8]	; (800d95c <strtod+0x10>)
 800d952:	4b03      	ldr	r3, [pc, #12]	; (800d960 <strtod+0x14>)
 800d954:	6800      	ldr	r0, [r0, #0]
 800d956:	f7ff ba03 	b.w	800cd60 <_strtod_l>
 800d95a:	bf00      	nop
 800d95c:	20000204 	.word	0x20000204
 800d960:	2000004c 	.word	0x2000004c

0800d964 <__cvt>:
 800d964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d968:	ec55 4b10 	vmov	r4, r5, d0
 800d96c:	2d00      	cmp	r5, #0
 800d96e:	460e      	mov	r6, r1
 800d970:	4619      	mov	r1, r3
 800d972:	462b      	mov	r3, r5
 800d974:	bfbb      	ittet	lt
 800d976:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d97a:	461d      	movlt	r5, r3
 800d97c:	2300      	movge	r3, #0
 800d97e:	232d      	movlt	r3, #45	; 0x2d
 800d980:	700b      	strb	r3, [r1, #0]
 800d982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d984:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d988:	4691      	mov	r9, r2
 800d98a:	f023 0820 	bic.w	r8, r3, #32
 800d98e:	bfbc      	itt	lt
 800d990:	4622      	movlt	r2, r4
 800d992:	4614      	movlt	r4, r2
 800d994:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d998:	d005      	beq.n	800d9a6 <__cvt+0x42>
 800d99a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d99e:	d100      	bne.n	800d9a2 <__cvt+0x3e>
 800d9a0:	3601      	adds	r6, #1
 800d9a2:	2102      	movs	r1, #2
 800d9a4:	e000      	b.n	800d9a8 <__cvt+0x44>
 800d9a6:	2103      	movs	r1, #3
 800d9a8:	ab03      	add	r3, sp, #12
 800d9aa:	9301      	str	r3, [sp, #4]
 800d9ac:	ab02      	add	r3, sp, #8
 800d9ae:	9300      	str	r3, [sp, #0]
 800d9b0:	ec45 4b10 	vmov	d0, r4, r5
 800d9b4:	4653      	mov	r3, sl
 800d9b6:	4632      	mov	r2, r6
 800d9b8:	f001 f8ba 	bl	800eb30 <_dtoa_r>
 800d9bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d9c0:	4607      	mov	r7, r0
 800d9c2:	d102      	bne.n	800d9ca <__cvt+0x66>
 800d9c4:	f019 0f01 	tst.w	r9, #1
 800d9c8:	d022      	beq.n	800da10 <__cvt+0xac>
 800d9ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d9ce:	eb07 0906 	add.w	r9, r7, r6
 800d9d2:	d110      	bne.n	800d9f6 <__cvt+0x92>
 800d9d4:	783b      	ldrb	r3, [r7, #0]
 800d9d6:	2b30      	cmp	r3, #48	; 0x30
 800d9d8:	d10a      	bne.n	800d9f0 <__cvt+0x8c>
 800d9da:	2200      	movs	r2, #0
 800d9dc:	2300      	movs	r3, #0
 800d9de:	4620      	mov	r0, r4
 800d9e0:	4629      	mov	r1, r5
 800d9e2:	f7f3 f871 	bl	8000ac8 <__aeabi_dcmpeq>
 800d9e6:	b918      	cbnz	r0, 800d9f0 <__cvt+0x8c>
 800d9e8:	f1c6 0601 	rsb	r6, r6, #1
 800d9ec:	f8ca 6000 	str.w	r6, [sl]
 800d9f0:	f8da 3000 	ldr.w	r3, [sl]
 800d9f4:	4499      	add	r9, r3
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	4620      	mov	r0, r4
 800d9fc:	4629      	mov	r1, r5
 800d9fe:	f7f3 f863 	bl	8000ac8 <__aeabi_dcmpeq>
 800da02:	b108      	cbz	r0, 800da08 <__cvt+0xa4>
 800da04:	f8cd 900c 	str.w	r9, [sp, #12]
 800da08:	2230      	movs	r2, #48	; 0x30
 800da0a:	9b03      	ldr	r3, [sp, #12]
 800da0c:	454b      	cmp	r3, r9
 800da0e:	d307      	bcc.n	800da20 <__cvt+0xbc>
 800da10:	9b03      	ldr	r3, [sp, #12]
 800da12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800da14:	1bdb      	subs	r3, r3, r7
 800da16:	4638      	mov	r0, r7
 800da18:	6013      	str	r3, [r2, #0]
 800da1a:	b004      	add	sp, #16
 800da1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da20:	1c59      	adds	r1, r3, #1
 800da22:	9103      	str	r1, [sp, #12]
 800da24:	701a      	strb	r2, [r3, #0]
 800da26:	e7f0      	b.n	800da0a <__cvt+0xa6>

0800da28 <__exponent>:
 800da28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da2a:	4603      	mov	r3, r0
 800da2c:	2900      	cmp	r1, #0
 800da2e:	bfb8      	it	lt
 800da30:	4249      	neglt	r1, r1
 800da32:	f803 2b02 	strb.w	r2, [r3], #2
 800da36:	bfb4      	ite	lt
 800da38:	222d      	movlt	r2, #45	; 0x2d
 800da3a:	222b      	movge	r2, #43	; 0x2b
 800da3c:	2909      	cmp	r1, #9
 800da3e:	7042      	strb	r2, [r0, #1]
 800da40:	dd2a      	ble.n	800da98 <__exponent+0x70>
 800da42:	f10d 0207 	add.w	r2, sp, #7
 800da46:	4617      	mov	r7, r2
 800da48:	260a      	movs	r6, #10
 800da4a:	4694      	mov	ip, r2
 800da4c:	fb91 f5f6 	sdiv	r5, r1, r6
 800da50:	fb06 1415 	mls	r4, r6, r5, r1
 800da54:	3430      	adds	r4, #48	; 0x30
 800da56:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800da5a:	460c      	mov	r4, r1
 800da5c:	2c63      	cmp	r4, #99	; 0x63
 800da5e:	f102 32ff 	add.w	r2, r2, #4294967295
 800da62:	4629      	mov	r1, r5
 800da64:	dcf1      	bgt.n	800da4a <__exponent+0x22>
 800da66:	3130      	adds	r1, #48	; 0x30
 800da68:	f1ac 0402 	sub.w	r4, ip, #2
 800da6c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800da70:	1c41      	adds	r1, r0, #1
 800da72:	4622      	mov	r2, r4
 800da74:	42ba      	cmp	r2, r7
 800da76:	d30a      	bcc.n	800da8e <__exponent+0x66>
 800da78:	f10d 0209 	add.w	r2, sp, #9
 800da7c:	eba2 020c 	sub.w	r2, r2, ip
 800da80:	42bc      	cmp	r4, r7
 800da82:	bf88      	it	hi
 800da84:	2200      	movhi	r2, #0
 800da86:	4413      	add	r3, r2
 800da88:	1a18      	subs	r0, r3, r0
 800da8a:	b003      	add	sp, #12
 800da8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da8e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800da92:	f801 5f01 	strb.w	r5, [r1, #1]!
 800da96:	e7ed      	b.n	800da74 <__exponent+0x4c>
 800da98:	2330      	movs	r3, #48	; 0x30
 800da9a:	3130      	adds	r1, #48	; 0x30
 800da9c:	7083      	strb	r3, [r0, #2]
 800da9e:	70c1      	strb	r1, [r0, #3]
 800daa0:	1d03      	adds	r3, r0, #4
 800daa2:	e7f1      	b.n	800da88 <__exponent+0x60>

0800daa4 <_printf_float>:
 800daa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daa8:	ed2d 8b02 	vpush	{d8}
 800daac:	b08d      	sub	sp, #52	; 0x34
 800daae:	460c      	mov	r4, r1
 800dab0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dab4:	4616      	mov	r6, r2
 800dab6:	461f      	mov	r7, r3
 800dab8:	4605      	mov	r5, r0
 800daba:	f000 ff09 	bl	800e8d0 <_localeconv_r>
 800dabe:	f8d0 a000 	ldr.w	sl, [r0]
 800dac2:	4650      	mov	r0, sl
 800dac4:	f7f2 fbd4 	bl	8000270 <strlen>
 800dac8:	2300      	movs	r3, #0
 800daca:	930a      	str	r3, [sp, #40]	; 0x28
 800dacc:	6823      	ldr	r3, [r4, #0]
 800dace:	9305      	str	r3, [sp, #20]
 800dad0:	f8d8 3000 	ldr.w	r3, [r8]
 800dad4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800dad8:	3307      	adds	r3, #7
 800dada:	f023 0307 	bic.w	r3, r3, #7
 800dade:	f103 0208 	add.w	r2, r3, #8
 800dae2:	f8c8 2000 	str.w	r2, [r8]
 800dae6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800daea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800daee:	9307      	str	r3, [sp, #28]
 800daf0:	f8cd 8018 	str.w	r8, [sp, #24]
 800daf4:	ee08 0a10 	vmov	s16, r0
 800daf8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800dafc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800db00:	4b9e      	ldr	r3, [pc, #632]	; (800dd7c <_printf_float+0x2d8>)
 800db02:	f04f 32ff 	mov.w	r2, #4294967295
 800db06:	f7f3 f811 	bl	8000b2c <__aeabi_dcmpun>
 800db0a:	bb88      	cbnz	r0, 800db70 <_printf_float+0xcc>
 800db0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800db10:	4b9a      	ldr	r3, [pc, #616]	; (800dd7c <_printf_float+0x2d8>)
 800db12:	f04f 32ff 	mov.w	r2, #4294967295
 800db16:	f7f2 ffeb 	bl	8000af0 <__aeabi_dcmple>
 800db1a:	bb48      	cbnz	r0, 800db70 <_printf_float+0xcc>
 800db1c:	2200      	movs	r2, #0
 800db1e:	2300      	movs	r3, #0
 800db20:	4640      	mov	r0, r8
 800db22:	4649      	mov	r1, r9
 800db24:	f7f2 ffda 	bl	8000adc <__aeabi_dcmplt>
 800db28:	b110      	cbz	r0, 800db30 <_printf_float+0x8c>
 800db2a:	232d      	movs	r3, #45	; 0x2d
 800db2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db30:	4a93      	ldr	r2, [pc, #588]	; (800dd80 <_printf_float+0x2dc>)
 800db32:	4b94      	ldr	r3, [pc, #592]	; (800dd84 <_printf_float+0x2e0>)
 800db34:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800db38:	bf94      	ite	ls
 800db3a:	4690      	movls	r8, r2
 800db3c:	4698      	movhi	r8, r3
 800db3e:	2303      	movs	r3, #3
 800db40:	6123      	str	r3, [r4, #16]
 800db42:	9b05      	ldr	r3, [sp, #20]
 800db44:	f023 0304 	bic.w	r3, r3, #4
 800db48:	6023      	str	r3, [r4, #0]
 800db4a:	f04f 0900 	mov.w	r9, #0
 800db4e:	9700      	str	r7, [sp, #0]
 800db50:	4633      	mov	r3, r6
 800db52:	aa0b      	add	r2, sp, #44	; 0x2c
 800db54:	4621      	mov	r1, r4
 800db56:	4628      	mov	r0, r5
 800db58:	f000 f9da 	bl	800df10 <_printf_common>
 800db5c:	3001      	adds	r0, #1
 800db5e:	f040 8090 	bne.w	800dc82 <_printf_float+0x1de>
 800db62:	f04f 30ff 	mov.w	r0, #4294967295
 800db66:	b00d      	add	sp, #52	; 0x34
 800db68:	ecbd 8b02 	vpop	{d8}
 800db6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db70:	4642      	mov	r2, r8
 800db72:	464b      	mov	r3, r9
 800db74:	4640      	mov	r0, r8
 800db76:	4649      	mov	r1, r9
 800db78:	f7f2 ffd8 	bl	8000b2c <__aeabi_dcmpun>
 800db7c:	b140      	cbz	r0, 800db90 <_printf_float+0xec>
 800db7e:	464b      	mov	r3, r9
 800db80:	2b00      	cmp	r3, #0
 800db82:	bfbc      	itt	lt
 800db84:	232d      	movlt	r3, #45	; 0x2d
 800db86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800db8a:	4a7f      	ldr	r2, [pc, #508]	; (800dd88 <_printf_float+0x2e4>)
 800db8c:	4b7f      	ldr	r3, [pc, #508]	; (800dd8c <_printf_float+0x2e8>)
 800db8e:	e7d1      	b.n	800db34 <_printf_float+0x90>
 800db90:	6863      	ldr	r3, [r4, #4]
 800db92:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800db96:	9206      	str	r2, [sp, #24]
 800db98:	1c5a      	adds	r2, r3, #1
 800db9a:	d13f      	bne.n	800dc1c <_printf_float+0x178>
 800db9c:	2306      	movs	r3, #6
 800db9e:	6063      	str	r3, [r4, #4]
 800dba0:	9b05      	ldr	r3, [sp, #20]
 800dba2:	6861      	ldr	r1, [r4, #4]
 800dba4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dba8:	2300      	movs	r3, #0
 800dbaa:	9303      	str	r3, [sp, #12]
 800dbac:	ab0a      	add	r3, sp, #40	; 0x28
 800dbae:	e9cd b301 	strd	fp, r3, [sp, #4]
 800dbb2:	ab09      	add	r3, sp, #36	; 0x24
 800dbb4:	ec49 8b10 	vmov	d0, r8, r9
 800dbb8:	9300      	str	r3, [sp, #0]
 800dbba:	6022      	str	r2, [r4, #0]
 800dbbc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dbc0:	4628      	mov	r0, r5
 800dbc2:	f7ff fecf 	bl	800d964 <__cvt>
 800dbc6:	9b06      	ldr	r3, [sp, #24]
 800dbc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dbca:	2b47      	cmp	r3, #71	; 0x47
 800dbcc:	4680      	mov	r8, r0
 800dbce:	d108      	bne.n	800dbe2 <_printf_float+0x13e>
 800dbd0:	1cc8      	adds	r0, r1, #3
 800dbd2:	db02      	blt.n	800dbda <_printf_float+0x136>
 800dbd4:	6863      	ldr	r3, [r4, #4]
 800dbd6:	4299      	cmp	r1, r3
 800dbd8:	dd41      	ble.n	800dc5e <_printf_float+0x1ba>
 800dbda:	f1ab 0302 	sub.w	r3, fp, #2
 800dbde:	fa5f fb83 	uxtb.w	fp, r3
 800dbe2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dbe6:	d820      	bhi.n	800dc2a <_printf_float+0x186>
 800dbe8:	3901      	subs	r1, #1
 800dbea:	465a      	mov	r2, fp
 800dbec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dbf0:	9109      	str	r1, [sp, #36]	; 0x24
 800dbf2:	f7ff ff19 	bl	800da28 <__exponent>
 800dbf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dbf8:	1813      	adds	r3, r2, r0
 800dbfa:	2a01      	cmp	r2, #1
 800dbfc:	4681      	mov	r9, r0
 800dbfe:	6123      	str	r3, [r4, #16]
 800dc00:	dc02      	bgt.n	800dc08 <_printf_float+0x164>
 800dc02:	6822      	ldr	r2, [r4, #0]
 800dc04:	07d2      	lsls	r2, r2, #31
 800dc06:	d501      	bpl.n	800dc0c <_printf_float+0x168>
 800dc08:	3301      	adds	r3, #1
 800dc0a:	6123      	str	r3, [r4, #16]
 800dc0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d09c      	beq.n	800db4e <_printf_float+0xaa>
 800dc14:	232d      	movs	r3, #45	; 0x2d
 800dc16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc1a:	e798      	b.n	800db4e <_printf_float+0xaa>
 800dc1c:	9a06      	ldr	r2, [sp, #24]
 800dc1e:	2a47      	cmp	r2, #71	; 0x47
 800dc20:	d1be      	bne.n	800dba0 <_printf_float+0xfc>
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d1bc      	bne.n	800dba0 <_printf_float+0xfc>
 800dc26:	2301      	movs	r3, #1
 800dc28:	e7b9      	b.n	800db9e <_printf_float+0xfa>
 800dc2a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800dc2e:	d118      	bne.n	800dc62 <_printf_float+0x1be>
 800dc30:	2900      	cmp	r1, #0
 800dc32:	6863      	ldr	r3, [r4, #4]
 800dc34:	dd0b      	ble.n	800dc4e <_printf_float+0x1aa>
 800dc36:	6121      	str	r1, [r4, #16]
 800dc38:	b913      	cbnz	r3, 800dc40 <_printf_float+0x19c>
 800dc3a:	6822      	ldr	r2, [r4, #0]
 800dc3c:	07d0      	lsls	r0, r2, #31
 800dc3e:	d502      	bpl.n	800dc46 <_printf_float+0x1a2>
 800dc40:	3301      	adds	r3, #1
 800dc42:	440b      	add	r3, r1
 800dc44:	6123      	str	r3, [r4, #16]
 800dc46:	65a1      	str	r1, [r4, #88]	; 0x58
 800dc48:	f04f 0900 	mov.w	r9, #0
 800dc4c:	e7de      	b.n	800dc0c <_printf_float+0x168>
 800dc4e:	b913      	cbnz	r3, 800dc56 <_printf_float+0x1b2>
 800dc50:	6822      	ldr	r2, [r4, #0]
 800dc52:	07d2      	lsls	r2, r2, #31
 800dc54:	d501      	bpl.n	800dc5a <_printf_float+0x1b6>
 800dc56:	3302      	adds	r3, #2
 800dc58:	e7f4      	b.n	800dc44 <_printf_float+0x1a0>
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	e7f2      	b.n	800dc44 <_printf_float+0x1a0>
 800dc5e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800dc62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc64:	4299      	cmp	r1, r3
 800dc66:	db05      	blt.n	800dc74 <_printf_float+0x1d0>
 800dc68:	6823      	ldr	r3, [r4, #0]
 800dc6a:	6121      	str	r1, [r4, #16]
 800dc6c:	07d8      	lsls	r0, r3, #31
 800dc6e:	d5ea      	bpl.n	800dc46 <_printf_float+0x1a2>
 800dc70:	1c4b      	adds	r3, r1, #1
 800dc72:	e7e7      	b.n	800dc44 <_printf_float+0x1a0>
 800dc74:	2900      	cmp	r1, #0
 800dc76:	bfd4      	ite	le
 800dc78:	f1c1 0202 	rsble	r2, r1, #2
 800dc7c:	2201      	movgt	r2, #1
 800dc7e:	4413      	add	r3, r2
 800dc80:	e7e0      	b.n	800dc44 <_printf_float+0x1a0>
 800dc82:	6823      	ldr	r3, [r4, #0]
 800dc84:	055a      	lsls	r2, r3, #21
 800dc86:	d407      	bmi.n	800dc98 <_printf_float+0x1f4>
 800dc88:	6923      	ldr	r3, [r4, #16]
 800dc8a:	4642      	mov	r2, r8
 800dc8c:	4631      	mov	r1, r6
 800dc8e:	4628      	mov	r0, r5
 800dc90:	47b8      	blx	r7
 800dc92:	3001      	adds	r0, #1
 800dc94:	d12c      	bne.n	800dcf0 <_printf_float+0x24c>
 800dc96:	e764      	b.n	800db62 <_printf_float+0xbe>
 800dc98:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dc9c:	f240 80e0 	bls.w	800de60 <_printf_float+0x3bc>
 800dca0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dca4:	2200      	movs	r2, #0
 800dca6:	2300      	movs	r3, #0
 800dca8:	f7f2 ff0e 	bl	8000ac8 <__aeabi_dcmpeq>
 800dcac:	2800      	cmp	r0, #0
 800dcae:	d034      	beq.n	800dd1a <_printf_float+0x276>
 800dcb0:	4a37      	ldr	r2, [pc, #220]	; (800dd90 <_printf_float+0x2ec>)
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	4631      	mov	r1, r6
 800dcb6:	4628      	mov	r0, r5
 800dcb8:	47b8      	blx	r7
 800dcba:	3001      	adds	r0, #1
 800dcbc:	f43f af51 	beq.w	800db62 <_printf_float+0xbe>
 800dcc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dcc4:	429a      	cmp	r2, r3
 800dcc6:	db02      	blt.n	800dcce <_printf_float+0x22a>
 800dcc8:	6823      	ldr	r3, [r4, #0]
 800dcca:	07d8      	lsls	r0, r3, #31
 800dccc:	d510      	bpl.n	800dcf0 <_printf_float+0x24c>
 800dcce:	ee18 3a10 	vmov	r3, s16
 800dcd2:	4652      	mov	r2, sl
 800dcd4:	4631      	mov	r1, r6
 800dcd6:	4628      	mov	r0, r5
 800dcd8:	47b8      	blx	r7
 800dcda:	3001      	adds	r0, #1
 800dcdc:	f43f af41 	beq.w	800db62 <_printf_float+0xbe>
 800dce0:	f04f 0800 	mov.w	r8, #0
 800dce4:	f104 091a 	add.w	r9, r4, #26
 800dce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcea:	3b01      	subs	r3, #1
 800dcec:	4543      	cmp	r3, r8
 800dcee:	dc09      	bgt.n	800dd04 <_printf_float+0x260>
 800dcf0:	6823      	ldr	r3, [r4, #0]
 800dcf2:	079b      	lsls	r3, r3, #30
 800dcf4:	f100 8107 	bmi.w	800df06 <_printf_float+0x462>
 800dcf8:	68e0      	ldr	r0, [r4, #12]
 800dcfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcfc:	4298      	cmp	r0, r3
 800dcfe:	bfb8      	it	lt
 800dd00:	4618      	movlt	r0, r3
 800dd02:	e730      	b.n	800db66 <_printf_float+0xc2>
 800dd04:	2301      	movs	r3, #1
 800dd06:	464a      	mov	r2, r9
 800dd08:	4631      	mov	r1, r6
 800dd0a:	4628      	mov	r0, r5
 800dd0c:	47b8      	blx	r7
 800dd0e:	3001      	adds	r0, #1
 800dd10:	f43f af27 	beq.w	800db62 <_printf_float+0xbe>
 800dd14:	f108 0801 	add.w	r8, r8, #1
 800dd18:	e7e6      	b.n	800dce8 <_printf_float+0x244>
 800dd1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	dc39      	bgt.n	800dd94 <_printf_float+0x2f0>
 800dd20:	4a1b      	ldr	r2, [pc, #108]	; (800dd90 <_printf_float+0x2ec>)
 800dd22:	2301      	movs	r3, #1
 800dd24:	4631      	mov	r1, r6
 800dd26:	4628      	mov	r0, r5
 800dd28:	47b8      	blx	r7
 800dd2a:	3001      	adds	r0, #1
 800dd2c:	f43f af19 	beq.w	800db62 <_printf_float+0xbe>
 800dd30:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800dd34:	4313      	orrs	r3, r2
 800dd36:	d102      	bne.n	800dd3e <_printf_float+0x29a>
 800dd38:	6823      	ldr	r3, [r4, #0]
 800dd3a:	07d9      	lsls	r1, r3, #31
 800dd3c:	d5d8      	bpl.n	800dcf0 <_printf_float+0x24c>
 800dd3e:	ee18 3a10 	vmov	r3, s16
 800dd42:	4652      	mov	r2, sl
 800dd44:	4631      	mov	r1, r6
 800dd46:	4628      	mov	r0, r5
 800dd48:	47b8      	blx	r7
 800dd4a:	3001      	adds	r0, #1
 800dd4c:	f43f af09 	beq.w	800db62 <_printf_float+0xbe>
 800dd50:	f04f 0900 	mov.w	r9, #0
 800dd54:	f104 0a1a 	add.w	sl, r4, #26
 800dd58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd5a:	425b      	negs	r3, r3
 800dd5c:	454b      	cmp	r3, r9
 800dd5e:	dc01      	bgt.n	800dd64 <_printf_float+0x2c0>
 800dd60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd62:	e792      	b.n	800dc8a <_printf_float+0x1e6>
 800dd64:	2301      	movs	r3, #1
 800dd66:	4652      	mov	r2, sl
 800dd68:	4631      	mov	r1, r6
 800dd6a:	4628      	mov	r0, r5
 800dd6c:	47b8      	blx	r7
 800dd6e:	3001      	adds	r0, #1
 800dd70:	f43f aef7 	beq.w	800db62 <_printf_float+0xbe>
 800dd74:	f109 0901 	add.w	r9, r9, #1
 800dd78:	e7ee      	b.n	800dd58 <_printf_float+0x2b4>
 800dd7a:	bf00      	nop
 800dd7c:	7fefffff 	.word	0x7fefffff
 800dd80:	08013ab0 	.word	0x08013ab0
 800dd84:	08013ab4 	.word	0x08013ab4
 800dd88:	08013ab8 	.word	0x08013ab8
 800dd8c:	08013abc 	.word	0x08013abc
 800dd90:	08013ac0 	.word	0x08013ac0
 800dd94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	bfa8      	it	ge
 800dd9c:	461a      	movge	r2, r3
 800dd9e:	2a00      	cmp	r2, #0
 800dda0:	4691      	mov	r9, r2
 800dda2:	dc37      	bgt.n	800de14 <_printf_float+0x370>
 800dda4:	f04f 0b00 	mov.w	fp, #0
 800dda8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ddac:	f104 021a 	add.w	r2, r4, #26
 800ddb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ddb2:	9305      	str	r3, [sp, #20]
 800ddb4:	eba3 0309 	sub.w	r3, r3, r9
 800ddb8:	455b      	cmp	r3, fp
 800ddba:	dc33      	bgt.n	800de24 <_printf_float+0x380>
 800ddbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	db3b      	blt.n	800de3c <_printf_float+0x398>
 800ddc4:	6823      	ldr	r3, [r4, #0]
 800ddc6:	07da      	lsls	r2, r3, #31
 800ddc8:	d438      	bmi.n	800de3c <_printf_float+0x398>
 800ddca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ddce:	eba2 0903 	sub.w	r9, r2, r3
 800ddd2:	9b05      	ldr	r3, [sp, #20]
 800ddd4:	1ad2      	subs	r2, r2, r3
 800ddd6:	4591      	cmp	r9, r2
 800ddd8:	bfa8      	it	ge
 800ddda:	4691      	movge	r9, r2
 800dddc:	f1b9 0f00 	cmp.w	r9, #0
 800dde0:	dc35      	bgt.n	800de4e <_printf_float+0x3aa>
 800dde2:	f04f 0800 	mov.w	r8, #0
 800dde6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ddea:	f104 0a1a 	add.w	sl, r4, #26
 800ddee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ddf2:	1a9b      	subs	r3, r3, r2
 800ddf4:	eba3 0309 	sub.w	r3, r3, r9
 800ddf8:	4543      	cmp	r3, r8
 800ddfa:	f77f af79 	ble.w	800dcf0 <_printf_float+0x24c>
 800ddfe:	2301      	movs	r3, #1
 800de00:	4652      	mov	r2, sl
 800de02:	4631      	mov	r1, r6
 800de04:	4628      	mov	r0, r5
 800de06:	47b8      	blx	r7
 800de08:	3001      	adds	r0, #1
 800de0a:	f43f aeaa 	beq.w	800db62 <_printf_float+0xbe>
 800de0e:	f108 0801 	add.w	r8, r8, #1
 800de12:	e7ec      	b.n	800ddee <_printf_float+0x34a>
 800de14:	4613      	mov	r3, r2
 800de16:	4631      	mov	r1, r6
 800de18:	4642      	mov	r2, r8
 800de1a:	4628      	mov	r0, r5
 800de1c:	47b8      	blx	r7
 800de1e:	3001      	adds	r0, #1
 800de20:	d1c0      	bne.n	800dda4 <_printf_float+0x300>
 800de22:	e69e      	b.n	800db62 <_printf_float+0xbe>
 800de24:	2301      	movs	r3, #1
 800de26:	4631      	mov	r1, r6
 800de28:	4628      	mov	r0, r5
 800de2a:	9205      	str	r2, [sp, #20]
 800de2c:	47b8      	blx	r7
 800de2e:	3001      	adds	r0, #1
 800de30:	f43f ae97 	beq.w	800db62 <_printf_float+0xbe>
 800de34:	9a05      	ldr	r2, [sp, #20]
 800de36:	f10b 0b01 	add.w	fp, fp, #1
 800de3a:	e7b9      	b.n	800ddb0 <_printf_float+0x30c>
 800de3c:	ee18 3a10 	vmov	r3, s16
 800de40:	4652      	mov	r2, sl
 800de42:	4631      	mov	r1, r6
 800de44:	4628      	mov	r0, r5
 800de46:	47b8      	blx	r7
 800de48:	3001      	adds	r0, #1
 800de4a:	d1be      	bne.n	800ddca <_printf_float+0x326>
 800de4c:	e689      	b.n	800db62 <_printf_float+0xbe>
 800de4e:	9a05      	ldr	r2, [sp, #20]
 800de50:	464b      	mov	r3, r9
 800de52:	4442      	add	r2, r8
 800de54:	4631      	mov	r1, r6
 800de56:	4628      	mov	r0, r5
 800de58:	47b8      	blx	r7
 800de5a:	3001      	adds	r0, #1
 800de5c:	d1c1      	bne.n	800dde2 <_printf_float+0x33e>
 800de5e:	e680      	b.n	800db62 <_printf_float+0xbe>
 800de60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de62:	2a01      	cmp	r2, #1
 800de64:	dc01      	bgt.n	800de6a <_printf_float+0x3c6>
 800de66:	07db      	lsls	r3, r3, #31
 800de68:	d53a      	bpl.n	800dee0 <_printf_float+0x43c>
 800de6a:	2301      	movs	r3, #1
 800de6c:	4642      	mov	r2, r8
 800de6e:	4631      	mov	r1, r6
 800de70:	4628      	mov	r0, r5
 800de72:	47b8      	blx	r7
 800de74:	3001      	adds	r0, #1
 800de76:	f43f ae74 	beq.w	800db62 <_printf_float+0xbe>
 800de7a:	ee18 3a10 	vmov	r3, s16
 800de7e:	4652      	mov	r2, sl
 800de80:	4631      	mov	r1, r6
 800de82:	4628      	mov	r0, r5
 800de84:	47b8      	blx	r7
 800de86:	3001      	adds	r0, #1
 800de88:	f43f ae6b 	beq.w	800db62 <_printf_float+0xbe>
 800de8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800de90:	2200      	movs	r2, #0
 800de92:	2300      	movs	r3, #0
 800de94:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800de98:	f7f2 fe16 	bl	8000ac8 <__aeabi_dcmpeq>
 800de9c:	b9d8      	cbnz	r0, 800ded6 <_printf_float+0x432>
 800de9e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800dea2:	f108 0201 	add.w	r2, r8, #1
 800dea6:	4631      	mov	r1, r6
 800dea8:	4628      	mov	r0, r5
 800deaa:	47b8      	blx	r7
 800deac:	3001      	adds	r0, #1
 800deae:	d10e      	bne.n	800dece <_printf_float+0x42a>
 800deb0:	e657      	b.n	800db62 <_printf_float+0xbe>
 800deb2:	2301      	movs	r3, #1
 800deb4:	4652      	mov	r2, sl
 800deb6:	4631      	mov	r1, r6
 800deb8:	4628      	mov	r0, r5
 800deba:	47b8      	blx	r7
 800debc:	3001      	adds	r0, #1
 800debe:	f43f ae50 	beq.w	800db62 <_printf_float+0xbe>
 800dec2:	f108 0801 	add.w	r8, r8, #1
 800dec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dec8:	3b01      	subs	r3, #1
 800deca:	4543      	cmp	r3, r8
 800decc:	dcf1      	bgt.n	800deb2 <_printf_float+0x40e>
 800dece:	464b      	mov	r3, r9
 800ded0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ded4:	e6da      	b.n	800dc8c <_printf_float+0x1e8>
 800ded6:	f04f 0800 	mov.w	r8, #0
 800deda:	f104 0a1a 	add.w	sl, r4, #26
 800dede:	e7f2      	b.n	800dec6 <_printf_float+0x422>
 800dee0:	2301      	movs	r3, #1
 800dee2:	4642      	mov	r2, r8
 800dee4:	e7df      	b.n	800dea6 <_printf_float+0x402>
 800dee6:	2301      	movs	r3, #1
 800dee8:	464a      	mov	r2, r9
 800deea:	4631      	mov	r1, r6
 800deec:	4628      	mov	r0, r5
 800deee:	47b8      	blx	r7
 800def0:	3001      	adds	r0, #1
 800def2:	f43f ae36 	beq.w	800db62 <_printf_float+0xbe>
 800def6:	f108 0801 	add.w	r8, r8, #1
 800defa:	68e3      	ldr	r3, [r4, #12]
 800defc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800defe:	1a5b      	subs	r3, r3, r1
 800df00:	4543      	cmp	r3, r8
 800df02:	dcf0      	bgt.n	800dee6 <_printf_float+0x442>
 800df04:	e6f8      	b.n	800dcf8 <_printf_float+0x254>
 800df06:	f04f 0800 	mov.w	r8, #0
 800df0a:	f104 0919 	add.w	r9, r4, #25
 800df0e:	e7f4      	b.n	800defa <_printf_float+0x456>

0800df10 <_printf_common>:
 800df10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df14:	4616      	mov	r6, r2
 800df16:	4699      	mov	r9, r3
 800df18:	688a      	ldr	r2, [r1, #8]
 800df1a:	690b      	ldr	r3, [r1, #16]
 800df1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800df20:	4293      	cmp	r3, r2
 800df22:	bfb8      	it	lt
 800df24:	4613      	movlt	r3, r2
 800df26:	6033      	str	r3, [r6, #0]
 800df28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800df2c:	4607      	mov	r7, r0
 800df2e:	460c      	mov	r4, r1
 800df30:	b10a      	cbz	r2, 800df36 <_printf_common+0x26>
 800df32:	3301      	adds	r3, #1
 800df34:	6033      	str	r3, [r6, #0]
 800df36:	6823      	ldr	r3, [r4, #0]
 800df38:	0699      	lsls	r1, r3, #26
 800df3a:	bf42      	ittt	mi
 800df3c:	6833      	ldrmi	r3, [r6, #0]
 800df3e:	3302      	addmi	r3, #2
 800df40:	6033      	strmi	r3, [r6, #0]
 800df42:	6825      	ldr	r5, [r4, #0]
 800df44:	f015 0506 	ands.w	r5, r5, #6
 800df48:	d106      	bne.n	800df58 <_printf_common+0x48>
 800df4a:	f104 0a19 	add.w	sl, r4, #25
 800df4e:	68e3      	ldr	r3, [r4, #12]
 800df50:	6832      	ldr	r2, [r6, #0]
 800df52:	1a9b      	subs	r3, r3, r2
 800df54:	42ab      	cmp	r3, r5
 800df56:	dc26      	bgt.n	800dfa6 <_printf_common+0x96>
 800df58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800df5c:	1e13      	subs	r3, r2, #0
 800df5e:	6822      	ldr	r2, [r4, #0]
 800df60:	bf18      	it	ne
 800df62:	2301      	movne	r3, #1
 800df64:	0692      	lsls	r2, r2, #26
 800df66:	d42b      	bmi.n	800dfc0 <_printf_common+0xb0>
 800df68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800df6c:	4649      	mov	r1, r9
 800df6e:	4638      	mov	r0, r7
 800df70:	47c0      	blx	r8
 800df72:	3001      	adds	r0, #1
 800df74:	d01e      	beq.n	800dfb4 <_printf_common+0xa4>
 800df76:	6823      	ldr	r3, [r4, #0]
 800df78:	6922      	ldr	r2, [r4, #16]
 800df7a:	f003 0306 	and.w	r3, r3, #6
 800df7e:	2b04      	cmp	r3, #4
 800df80:	bf02      	ittt	eq
 800df82:	68e5      	ldreq	r5, [r4, #12]
 800df84:	6833      	ldreq	r3, [r6, #0]
 800df86:	1aed      	subeq	r5, r5, r3
 800df88:	68a3      	ldr	r3, [r4, #8]
 800df8a:	bf0c      	ite	eq
 800df8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df90:	2500      	movne	r5, #0
 800df92:	4293      	cmp	r3, r2
 800df94:	bfc4      	itt	gt
 800df96:	1a9b      	subgt	r3, r3, r2
 800df98:	18ed      	addgt	r5, r5, r3
 800df9a:	2600      	movs	r6, #0
 800df9c:	341a      	adds	r4, #26
 800df9e:	42b5      	cmp	r5, r6
 800dfa0:	d11a      	bne.n	800dfd8 <_printf_common+0xc8>
 800dfa2:	2000      	movs	r0, #0
 800dfa4:	e008      	b.n	800dfb8 <_printf_common+0xa8>
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	4652      	mov	r2, sl
 800dfaa:	4649      	mov	r1, r9
 800dfac:	4638      	mov	r0, r7
 800dfae:	47c0      	blx	r8
 800dfb0:	3001      	adds	r0, #1
 800dfb2:	d103      	bne.n	800dfbc <_printf_common+0xac>
 800dfb4:	f04f 30ff 	mov.w	r0, #4294967295
 800dfb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfbc:	3501      	adds	r5, #1
 800dfbe:	e7c6      	b.n	800df4e <_printf_common+0x3e>
 800dfc0:	18e1      	adds	r1, r4, r3
 800dfc2:	1c5a      	adds	r2, r3, #1
 800dfc4:	2030      	movs	r0, #48	; 0x30
 800dfc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dfca:	4422      	add	r2, r4
 800dfcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dfd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dfd4:	3302      	adds	r3, #2
 800dfd6:	e7c7      	b.n	800df68 <_printf_common+0x58>
 800dfd8:	2301      	movs	r3, #1
 800dfda:	4622      	mov	r2, r4
 800dfdc:	4649      	mov	r1, r9
 800dfde:	4638      	mov	r0, r7
 800dfe0:	47c0      	blx	r8
 800dfe2:	3001      	adds	r0, #1
 800dfe4:	d0e6      	beq.n	800dfb4 <_printf_common+0xa4>
 800dfe6:	3601      	adds	r6, #1
 800dfe8:	e7d9      	b.n	800df9e <_printf_common+0x8e>
	...

0800dfec <_printf_i>:
 800dfec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dff0:	7e0f      	ldrb	r7, [r1, #24]
 800dff2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dff4:	2f78      	cmp	r7, #120	; 0x78
 800dff6:	4691      	mov	r9, r2
 800dff8:	4680      	mov	r8, r0
 800dffa:	460c      	mov	r4, r1
 800dffc:	469a      	mov	sl, r3
 800dffe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e002:	d807      	bhi.n	800e014 <_printf_i+0x28>
 800e004:	2f62      	cmp	r7, #98	; 0x62
 800e006:	d80a      	bhi.n	800e01e <_printf_i+0x32>
 800e008:	2f00      	cmp	r7, #0
 800e00a:	f000 80d4 	beq.w	800e1b6 <_printf_i+0x1ca>
 800e00e:	2f58      	cmp	r7, #88	; 0x58
 800e010:	f000 80c0 	beq.w	800e194 <_printf_i+0x1a8>
 800e014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e018:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e01c:	e03a      	b.n	800e094 <_printf_i+0xa8>
 800e01e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e022:	2b15      	cmp	r3, #21
 800e024:	d8f6      	bhi.n	800e014 <_printf_i+0x28>
 800e026:	a101      	add	r1, pc, #4	; (adr r1, 800e02c <_printf_i+0x40>)
 800e028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e02c:	0800e085 	.word	0x0800e085
 800e030:	0800e099 	.word	0x0800e099
 800e034:	0800e015 	.word	0x0800e015
 800e038:	0800e015 	.word	0x0800e015
 800e03c:	0800e015 	.word	0x0800e015
 800e040:	0800e015 	.word	0x0800e015
 800e044:	0800e099 	.word	0x0800e099
 800e048:	0800e015 	.word	0x0800e015
 800e04c:	0800e015 	.word	0x0800e015
 800e050:	0800e015 	.word	0x0800e015
 800e054:	0800e015 	.word	0x0800e015
 800e058:	0800e19d 	.word	0x0800e19d
 800e05c:	0800e0c5 	.word	0x0800e0c5
 800e060:	0800e157 	.word	0x0800e157
 800e064:	0800e015 	.word	0x0800e015
 800e068:	0800e015 	.word	0x0800e015
 800e06c:	0800e1bf 	.word	0x0800e1bf
 800e070:	0800e015 	.word	0x0800e015
 800e074:	0800e0c5 	.word	0x0800e0c5
 800e078:	0800e015 	.word	0x0800e015
 800e07c:	0800e015 	.word	0x0800e015
 800e080:	0800e15f 	.word	0x0800e15f
 800e084:	682b      	ldr	r3, [r5, #0]
 800e086:	1d1a      	adds	r2, r3, #4
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	602a      	str	r2, [r5, #0]
 800e08c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e090:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e094:	2301      	movs	r3, #1
 800e096:	e09f      	b.n	800e1d8 <_printf_i+0x1ec>
 800e098:	6820      	ldr	r0, [r4, #0]
 800e09a:	682b      	ldr	r3, [r5, #0]
 800e09c:	0607      	lsls	r7, r0, #24
 800e09e:	f103 0104 	add.w	r1, r3, #4
 800e0a2:	6029      	str	r1, [r5, #0]
 800e0a4:	d501      	bpl.n	800e0aa <_printf_i+0xbe>
 800e0a6:	681e      	ldr	r6, [r3, #0]
 800e0a8:	e003      	b.n	800e0b2 <_printf_i+0xc6>
 800e0aa:	0646      	lsls	r6, r0, #25
 800e0ac:	d5fb      	bpl.n	800e0a6 <_printf_i+0xba>
 800e0ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e0b2:	2e00      	cmp	r6, #0
 800e0b4:	da03      	bge.n	800e0be <_printf_i+0xd2>
 800e0b6:	232d      	movs	r3, #45	; 0x2d
 800e0b8:	4276      	negs	r6, r6
 800e0ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0be:	485a      	ldr	r0, [pc, #360]	; (800e228 <_printf_i+0x23c>)
 800e0c0:	230a      	movs	r3, #10
 800e0c2:	e012      	b.n	800e0ea <_printf_i+0xfe>
 800e0c4:	682b      	ldr	r3, [r5, #0]
 800e0c6:	6820      	ldr	r0, [r4, #0]
 800e0c8:	1d19      	adds	r1, r3, #4
 800e0ca:	6029      	str	r1, [r5, #0]
 800e0cc:	0605      	lsls	r5, r0, #24
 800e0ce:	d501      	bpl.n	800e0d4 <_printf_i+0xe8>
 800e0d0:	681e      	ldr	r6, [r3, #0]
 800e0d2:	e002      	b.n	800e0da <_printf_i+0xee>
 800e0d4:	0641      	lsls	r1, r0, #25
 800e0d6:	d5fb      	bpl.n	800e0d0 <_printf_i+0xe4>
 800e0d8:	881e      	ldrh	r6, [r3, #0]
 800e0da:	4853      	ldr	r0, [pc, #332]	; (800e228 <_printf_i+0x23c>)
 800e0dc:	2f6f      	cmp	r7, #111	; 0x6f
 800e0de:	bf0c      	ite	eq
 800e0e0:	2308      	moveq	r3, #8
 800e0e2:	230a      	movne	r3, #10
 800e0e4:	2100      	movs	r1, #0
 800e0e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e0ea:	6865      	ldr	r5, [r4, #4]
 800e0ec:	60a5      	str	r5, [r4, #8]
 800e0ee:	2d00      	cmp	r5, #0
 800e0f0:	bfa2      	ittt	ge
 800e0f2:	6821      	ldrge	r1, [r4, #0]
 800e0f4:	f021 0104 	bicge.w	r1, r1, #4
 800e0f8:	6021      	strge	r1, [r4, #0]
 800e0fa:	b90e      	cbnz	r6, 800e100 <_printf_i+0x114>
 800e0fc:	2d00      	cmp	r5, #0
 800e0fe:	d04b      	beq.n	800e198 <_printf_i+0x1ac>
 800e100:	4615      	mov	r5, r2
 800e102:	fbb6 f1f3 	udiv	r1, r6, r3
 800e106:	fb03 6711 	mls	r7, r3, r1, r6
 800e10a:	5dc7      	ldrb	r7, [r0, r7]
 800e10c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e110:	4637      	mov	r7, r6
 800e112:	42bb      	cmp	r3, r7
 800e114:	460e      	mov	r6, r1
 800e116:	d9f4      	bls.n	800e102 <_printf_i+0x116>
 800e118:	2b08      	cmp	r3, #8
 800e11a:	d10b      	bne.n	800e134 <_printf_i+0x148>
 800e11c:	6823      	ldr	r3, [r4, #0]
 800e11e:	07de      	lsls	r6, r3, #31
 800e120:	d508      	bpl.n	800e134 <_printf_i+0x148>
 800e122:	6923      	ldr	r3, [r4, #16]
 800e124:	6861      	ldr	r1, [r4, #4]
 800e126:	4299      	cmp	r1, r3
 800e128:	bfde      	ittt	le
 800e12a:	2330      	movle	r3, #48	; 0x30
 800e12c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e130:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e134:	1b52      	subs	r2, r2, r5
 800e136:	6122      	str	r2, [r4, #16]
 800e138:	f8cd a000 	str.w	sl, [sp]
 800e13c:	464b      	mov	r3, r9
 800e13e:	aa03      	add	r2, sp, #12
 800e140:	4621      	mov	r1, r4
 800e142:	4640      	mov	r0, r8
 800e144:	f7ff fee4 	bl	800df10 <_printf_common>
 800e148:	3001      	adds	r0, #1
 800e14a:	d14a      	bne.n	800e1e2 <_printf_i+0x1f6>
 800e14c:	f04f 30ff 	mov.w	r0, #4294967295
 800e150:	b004      	add	sp, #16
 800e152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e156:	6823      	ldr	r3, [r4, #0]
 800e158:	f043 0320 	orr.w	r3, r3, #32
 800e15c:	6023      	str	r3, [r4, #0]
 800e15e:	4833      	ldr	r0, [pc, #204]	; (800e22c <_printf_i+0x240>)
 800e160:	2778      	movs	r7, #120	; 0x78
 800e162:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e166:	6823      	ldr	r3, [r4, #0]
 800e168:	6829      	ldr	r1, [r5, #0]
 800e16a:	061f      	lsls	r7, r3, #24
 800e16c:	f851 6b04 	ldr.w	r6, [r1], #4
 800e170:	d402      	bmi.n	800e178 <_printf_i+0x18c>
 800e172:	065f      	lsls	r7, r3, #25
 800e174:	bf48      	it	mi
 800e176:	b2b6      	uxthmi	r6, r6
 800e178:	07df      	lsls	r7, r3, #31
 800e17a:	bf48      	it	mi
 800e17c:	f043 0320 	orrmi.w	r3, r3, #32
 800e180:	6029      	str	r1, [r5, #0]
 800e182:	bf48      	it	mi
 800e184:	6023      	strmi	r3, [r4, #0]
 800e186:	b91e      	cbnz	r6, 800e190 <_printf_i+0x1a4>
 800e188:	6823      	ldr	r3, [r4, #0]
 800e18a:	f023 0320 	bic.w	r3, r3, #32
 800e18e:	6023      	str	r3, [r4, #0]
 800e190:	2310      	movs	r3, #16
 800e192:	e7a7      	b.n	800e0e4 <_printf_i+0xf8>
 800e194:	4824      	ldr	r0, [pc, #144]	; (800e228 <_printf_i+0x23c>)
 800e196:	e7e4      	b.n	800e162 <_printf_i+0x176>
 800e198:	4615      	mov	r5, r2
 800e19a:	e7bd      	b.n	800e118 <_printf_i+0x12c>
 800e19c:	682b      	ldr	r3, [r5, #0]
 800e19e:	6826      	ldr	r6, [r4, #0]
 800e1a0:	6961      	ldr	r1, [r4, #20]
 800e1a2:	1d18      	adds	r0, r3, #4
 800e1a4:	6028      	str	r0, [r5, #0]
 800e1a6:	0635      	lsls	r5, r6, #24
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	d501      	bpl.n	800e1b0 <_printf_i+0x1c4>
 800e1ac:	6019      	str	r1, [r3, #0]
 800e1ae:	e002      	b.n	800e1b6 <_printf_i+0x1ca>
 800e1b0:	0670      	lsls	r0, r6, #25
 800e1b2:	d5fb      	bpl.n	800e1ac <_printf_i+0x1c0>
 800e1b4:	8019      	strh	r1, [r3, #0]
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	6123      	str	r3, [r4, #16]
 800e1ba:	4615      	mov	r5, r2
 800e1bc:	e7bc      	b.n	800e138 <_printf_i+0x14c>
 800e1be:	682b      	ldr	r3, [r5, #0]
 800e1c0:	1d1a      	adds	r2, r3, #4
 800e1c2:	602a      	str	r2, [r5, #0]
 800e1c4:	681d      	ldr	r5, [r3, #0]
 800e1c6:	6862      	ldr	r2, [r4, #4]
 800e1c8:	2100      	movs	r1, #0
 800e1ca:	4628      	mov	r0, r5
 800e1cc:	f7f2 f800 	bl	80001d0 <memchr>
 800e1d0:	b108      	cbz	r0, 800e1d6 <_printf_i+0x1ea>
 800e1d2:	1b40      	subs	r0, r0, r5
 800e1d4:	6060      	str	r0, [r4, #4]
 800e1d6:	6863      	ldr	r3, [r4, #4]
 800e1d8:	6123      	str	r3, [r4, #16]
 800e1da:	2300      	movs	r3, #0
 800e1dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1e0:	e7aa      	b.n	800e138 <_printf_i+0x14c>
 800e1e2:	6923      	ldr	r3, [r4, #16]
 800e1e4:	462a      	mov	r2, r5
 800e1e6:	4649      	mov	r1, r9
 800e1e8:	4640      	mov	r0, r8
 800e1ea:	47d0      	blx	sl
 800e1ec:	3001      	adds	r0, #1
 800e1ee:	d0ad      	beq.n	800e14c <_printf_i+0x160>
 800e1f0:	6823      	ldr	r3, [r4, #0]
 800e1f2:	079b      	lsls	r3, r3, #30
 800e1f4:	d413      	bmi.n	800e21e <_printf_i+0x232>
 800e1f6:	68e0      	ldr	r0, [r4, #12]
 800e1f8:	9b03      	ldr	r3, [sp, #12]
 800e1fa:	4298      	cmp	r0, r3
 800e1fc:	bfb8      	it	lt
 800e1fe:	4618      	movlt	r0, r3
 800e200:	e7a6      	b.n	800e150 <_printf_i+0x164>
 800e202:	2301      	movs	r3, #1
 800e204:	4632      	mov	r2, r6
 800e206:	4649      	mov	r1, r9
 800e208:	4640      	mov	r0, r8
 800e20a:	47d0      	blx	sl
 800e20c:	3001      	adds	r0, #1
 800e20e:	d09d      	beq.n	800e14c <_printf_i+0x160>
 800e210:	3501      	adds	r5, #1
 800e212:	68e3      	ldr	r3, [r4, #12]
 800e214:	9903      	ldr	r1, [sp, #12]
 800e216:	1a5b      	subs	r3, r3, r1
 800e218:	42ab      	cmp	r3, r5
 800e21a:	dcf2      	bgt.n	800e202 <_printf_i+0x216>
 800e21c:	e7eb      	b.n	800e1f6 <_printf_i+0x20a>
 800e21e:	2500      	movs	r5, #0
 800e220:	f104 0619 	add.w	r6, r4, #25
 800e224:	e7f5      	b.n	800e212 <_printf_i+0x226>
 800e226:	bf00      	nop
 800e228:	08013ac2 	.word	0x08013ac2
 800e22c:	08013ad3 	.word	0x08013ad3

0800e230 <_scanf_float>:
 800e230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e234:	b087      	sub	sp, #28
 800e236:	4617      	mov	r7, r2
 800e238:	9303      	str	r3, [sp, #12]
 800e23a:	688b      	ldr	r3, [r1, #8]
 800e23c:	1e5a      	subs	r2, r3, #1
 800e23e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e242:	bf83      	ittte	hi
 800e244:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e248:	195b      	addhi	r3, r3, r5
 800e24a:	9302      	strhi	r3, [sp, #8]
 800e24c:	2300      	movls	r3, #0
 800e24e:	bf86      	itte	hi
 800e250:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e254:	608b      	strhi	r3, [r1, #8]
 800e256:	9302      	strls	r3, [sp, #8]
 800e258:	680b      	ldr	r3, [r1, #0]
 800e25a:	468b      	mov	fp, r1
 800e25c:	2500      	movs	r5, #0
 800e25e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e262:	f84b 3b1c 	str.w	r3, [fp], #28
 800e266:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e26a:	4680      	mov	r8, r0
 800e26c:	460c      	mov	r4, r1
 800e26e:	465e      	mov	r6, fp
 800e270:	46aa      	mov	sl, r5
 800e272:	46a9      	mov	r9, r5
 800e274:	9501      	str	r5, [sp, #4]
 800e276:	68a2      	ldr	r2, [r4, #8]
 800e278:	b152      	cbz	r2, 800e290 <_scanf_float+0x60>
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	2b4e      	cmp	r3, #78	; 0x4e
 800e280:	d864      	bhi.n	800e34c <_scanf_float+0x11c>
 800e282:	2b40      	cmp	r3, #64	; 0x40
 800e284:	d83c      	bhi.n	800e300 <_scanf_float+0xd0>
 800e286:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e28a:	b2c8      	uxtb	r0, r1
 800e28c:	280e      	cmp	r0, #14
 800e28e:	d93a      	bls.n	800e306 <_scanf_float+0xd6>
 800e290:	f1b9 0f00 	cmp.w	r9, #0
 800e294:	d003      	beq.n	800e29e <_scanf_float+0x6e>
 800e296:	6823      	ldr	r3, [r4, #0]
 800e298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e29c:	6023      	str	r3, [r4, #0]
 800e29e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e2a2:	f1ba 0f01 	cmp.w	sl, #1
 800e2a6:	f200 8113 	bhi.w	800e4d0 <_scanf_float+0x2a0>
 800e2aa:	455e      	cmp	r6, fp
 800e2ac:	f200 8105 	bhi.w	800e4ba <_scanf_float+0x28a>
 800e2b0:	2501      	movs	r5, #1
 800e2b2:	4628      	mov	r0, r5
 800e2b4:	b007      	add	sp, #28
 800e2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e2be:	2a0d      	cmp	r2, #13
 800e2c0:	d8e6      	bhi.n	800e290 <_scanf_float+0x60>
 800e2c2:	a101      	add	r1, pc, #4	; (adr r1, 800e2c8 <_scanf_float+0x98>)
 800e2c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e2c8:	0800e407 	.word	0x0800e407
 800e2cc:	0800e291 	.word	0x0800e291
 800e2d0:	0800e291 	.word	0x0800e291
 800e2d4:	0800e291 	.word	0x0800e291
 800e2d8:	0800e467 	.word	0x0800e467
 800e2dc:	0800e43f 	.word	0x0800e43f
 800e2e0:	0800e291 	.word	0x0800e291
 800e2e4:	0800e291 	.word	0x0800e291
 800e2e8:	0800e415 	.word	0x0800e415
 800e2ec:	0800e291 	.word	0x0800e291
 800e2f0:	0800e291 	.word	0x0800e291
 800e2f4:	0800e291 	.word	0x0800e291
 800e2f8:	0800e291 	.word	0x0800e291
 800e2fc:	0800e3cd 	.word	0x0800e3cd
 800e300:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e304:	e7db      	b.n	800e2be <_scanf_float+0x8e>
 800e306:	290e      	cmp	r1, #14
 800e308:	d8c2      	bhi.n	800e290 <_scanf_float+0x60>
 800e30a:	a001      	add	r0, pc, #4	; (adr r0, 800e310 <_scanf_float+0xe0>)
 800e30c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e310:	0800e3bf 	.word	0x0800e3bf
 800e314:	0800e291 	.word	0x0800e291
 800e318:	0800e3bf 	.word	0x0800e3bf
 800e31c:	0800e453 	.word	0x0800e453
 800e320:	0800e291 	.word	0x0800e291
 800e324:	0800e36d 	.word	0x0800e36d
 800e328:	0800e3a9 	.word	0x0800e3a9
 800e32c:	0800e3a9 	.word	0x0800e3a9
 800e330:	0800e3a9 	.word	0x0800e3a9
 800e334:	0800e3a9 	.word	0x0800e3a9
 800e338:	0800e3a9 	.word	0x0800e3a9
 800e33c:	0800e3a9 	.word	0x0800e3a9
 800e340:	0800e3a9 	.word	0x0800e3a9
 800e344:	0800e3a9 	.word	0x0800e3a9
 800e348:	0800e3a9 	.word	0x0800e3a9
 800e34c:	2b6e      	cmp	r3, #110	; 0x6e
 800e34e:	d809      	bhi.n	800e364 <_scanf_float+0x134>
 800e350:	2b60      	cmp	r3, #96	; 0x60
 800e352:	d8b2      	bhi.n	800e2ba <_scanf_float+0x8a>
 800e354:	2b54      	cmp	r3, #84	; 0x54
 800e356:	d077      	beq.n	800e448 <_scanf_float+0x218>
 800e358:	2b59      	cmp	r3, #89	; 0x59
 800e35a:	d199      	bne.n	800e290 <_scanf_float+0x60>
 800e35c:	2d07      	cmp	r5, #7
 800e35e:	d197      	bne.n	800e290 <_scanf_float+0x60>
 800e360:	2508      	movs	r5, #8
 800e362:	e029      	b.n	800e3b8 <_scanf_float+0x188>
 800e364:	2b74      	cmp	r3, #116	; 0x74
 800e366:	d06f      	beq.n	800e448 <_scanf_float+0x218>
 800e368:	2b79      	cmp	r3, #121	; 0x79
 800e36a:	e7f6      	b.n	800e35a <_scanf_float+0x12a>
 800e36c:	6821      	ldr	r1, [r4, #0]
 800e36e:	05c8      	lsls	r0, r1, #23
 800e370:	d51a      	bpl.n	800e3a8 <_scanf_float+0x178>
 800e372:	9b02      	ldr	r3, [sp, #8]
 800e374:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e378:	6021      	str	r1, [r4, #0]
 800e37a:	f109 0901 	add.w	r9, r9, #1
 800e37e:	b11b      	cbz	r3, 800e388 <_scanf_float+0x158>
 800e380:	3b01      	subs	r3, #1
 800e382:	3201      	adds	r2, #1
 800e384:	9302      	str	r3, [sp, #8]
 800e386:	60a2      	str	r2, [r4, #8]
 800e388:	68a3      	ldr	r3, [r4, #8]
 800e38a:	3b01      	subs	r3, #1
 800e38c:	60a3      	str	r3, [r4, #8]
 800e38e:	6923      	ldr	r3, [r4, #16]
 800e390:	3301      	adds	r3, #1
 800e392:	6123      	str	r3, [r4, #16]
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	3b01      	subs	r3, #1
 800e398:	2b00      	cmp	r3, #0
 800e39a:	607b      	str	r3, [r7, #4]
 800e39c:	f340 8084 	ble.w	800e4a8 <_scanf_float+0x278>
 800e3a0:	683b      	ldr	r3, [r7, #0]
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	603b      	str	r3, [r7, #0]
 800e3a6:	e766      	b.n	800e276 <_scanf_float+0x46>
 800e3a8:	eb1a 0f05 	cmn.w	sl, r5
 800e3ac:	f47f af70 	bne.w	800e290 <_scanf_float+0x60>
 800e3b0:	6822      	ldr	r2, [r4, #0]
 800e3b2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e3b6:	6022      	str	r2, [r4, #0]
 800e3b8:	f806 3b01 	strb.w	r3, [r6], #1
 800e3bc:	e7e4      	b.n	800e388 <_scanf_float+0x158>
 800e3be:	6822      	ldr	r2, [r4, #0]
 800e3c0:	0610      	lsls	r0, r2, #24
 800e3c2:	f57f af65 	bpl.w	800e290 <_scanf_float+0x60>
 800e3c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e3ca:	e7f4      	b.n	800e3b6 <_scanf_float+0x186>
 800e3cc:	f1ba 0f00 	cmp.w	sl, #0
 800e3d0:	d10e      	bne.n	800e3f0 <_scanf_float+0x1c0>
 800e3d2:	f1b9 0f00 	cmp.w	r9, #0
 800e3d6:	d10e      	bne.n	800e3f6 <_scanf_float+0x1c6>
 800e3d8:	6822      	ldr	r2, [r4, #0]
 800e3da:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e3de:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e3e2:	d108      	bne.n	800e3f6 <_scanf_float+0x1c6>
 800e3e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e3e8:	6022      	str	r2, [r4, #0]
 800e3ea:	f04f 0a01 	mov.w	sl, #1
 800e3ee:	e7e3      	b.n	800e3b8 <_scanf_float+0x188>
 800e3f0:	f1ba 0f02 	cmp.w	sl, #2
 800e3f4:	d055      	beq.n	800e4a2 <_scanf_float+0x272>
 800e3f6:	2d01      	cmp	r5, #1
 800e3f8:	d002      	beq.n	800e400 <_scanf_float+0x1d0>
 800e3fa:	2d04      	cmp	r5, #4
 800e3fc:	f47f af48 	bne.w	800e290 <_scanf_float+0x60>
 800e400:	3501      	adds	r5, #1
 800e402:	b2ed      	uxtb	r5, r5
 800e404:	e7d8      	b.n	800e3b8 <_scanf_float+0x188>
 800e406:	f1ba 0f01 	cmp.w	sl, #1
 800e40a:	f47f af41 	bne.w	800e290 <_scanf_float+0x60>
 800e40e:	f04f 0a02 	mov.w	sl, #2
 800e412:	e7d1      	b.n	800e3b8 <_scanf_float+0x188>
 800e414:	b97d      	cbnz	r5, 800e436 <_scanf_float+0x206>
 800e416:	f1b9 0f00 	cmp.w	r9, #0
 800e41a:	f47f af3c 	bne.w	800e296 <_scanf_float+0x66>
 800e41e:	6822      	ldr	r2, [r4, #0]
 800e420:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e424:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e428:	f47f af39 	bne.w	800e29e <_scanf_float+0x6e>
 800e42c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e430:	6022      	str	r2, [r4, #0]
 800e432:	2501      	movs	r5, #1
 800e434:	e7c0      	b.n	800e3b8 <_scanf_float+0x188>
 800e436:	2d03      	cmp	r5, #3
 800e438:	d0e2      	beq.n	800e400 <_scanf_float+0x1d0>
 800e43a:	2d05      	cmp	r5, #5
 800e43c:	e7de      	b.n	800e3fc <_scanf_float+0x1cc>
 800e43e:	2d02      	cmp	r5, #2
 800e440:	f47f af26 	bne.w	800e290 <_scanf_float+0x60>
 800e444:	2503      	movs	r5, #3
 800e446:	e7b7      	b.n	800e3b8 <_scanf_float+0x188>
 800e448:	2d06      	cmp	r5, #6
 800e44a:	f47f af21 	bne.w	800e290 <_scanf_float+0x60>
 800e44e:	2507      	movs	r5, #7
 800e450:	e7b2      	b.n	800e3b8 <_scanf_float+0x188>
 800e452:	6822      	ldr	r2, [r4, #0]
 800e454:	0591      	lsls	r1, r2, #22
 800e456:	f57f af1b 	bpl.w	800e290 <_scanf_float+0x60>
 800e45a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e45e:	6022      	str	r2, [r4, #0]
 800e460:	f8cd 9004 	str.w	r9, [sp, #4]
 800e464:	e7a8      	b.n	800e3b8 <_scanf_float+0x188>
 800e466:	6822      	ldr	r2, [r4, #0]
 800e468:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e46c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e470:	d006      	beq.n	800e480 <_scanf_float+0x250>
 800e472:	0550      	lsls	r0, r2, #21
 800e474:	f57f af0c 	bpl.w	800e290 <_scanf_float+0x60>
 800e478:	f1b9 0f00 	cmp.w	r9, #0
 800e47c:	f43f af0f 	beq.w	800e29e <_scanf_float+0x6e>
 800e480:	0591      	lsls	r1, r2, #22
 800e482:	bf58      	it	pl
 800e484:	9901      	ldrpl	r1, [sp, #4]
 800e486:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e48a:	bf58      	it	pl
 800e48c:	eba9 0101 	subpl.w	r1, r9, r1
 800e490:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e494:	bf58      	it	pl
 800e496:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e49a:	6022      	str	r2, [r4, #0]
 800e49c:	f04f 0900 	mov.w	r9, #0
 800e4a0:	e78a      	b.n	800e3b8 <_scanf_float+0x188>
 800e4a2:	f04f 0a03 	mov.w	sl, #3
 800e4a6:	e787      	b.n	800e3b8 <_scanf_float+0x188>
 800e4a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e4ac:	4639      	mov	r1, r7
 800e4ae:	4640      	mov	r0, r8
 800e4b0:	4798      	blx	r3
 800e4b2:	2800      	cmp	r0, #0
 800e4b4:	f43f aedf 	beq.w	800e276 <_scanf_float+0x46>
 800e4b8:	e6ea      	b.n	800e290 <_scanf_float+0x60>
 800e4ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e4be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e4c2:	463a      	mov	r2, r7
 800e4c4:	4640      	mov	r0, r8
 800e4c6:	4798      	blx	r3
 800e4c8:	6923      	ldr	r3, [r4, #16]
 800e4ca:	3b01      	subs	r3, #1
 800e4cc:	6123      	str	r3, [r4, #16]
 800e4ce:	e6ec      	b.n	800e2aa <_scanf_float+0x7a>
 800e4d0:	1e6b      	subs	r3, r5, #1
 800e4d2:	2b06      	cmp	r3, #6
 800e4d4:	d825      	bhi.n	800e522 <_scanf_float+0x2f2>
 800e4d6:	2d02      	cmp	r5, #2
 800e4d8:	d836      	bhi.n	800e548 <_scanf_float+0x318>
 800e4da:	455e      	cmp	r6, fp
 800e4dc:	f67f aee8 	bls.w	800e2b0 <_scanf_float+0x80>
 800e4e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e4e4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e4e8:	463a      	mov	r2, r7
 800e4ea:	4640      	mov	r0, r8
 800e4ec:	4798      	blx	r3
 800e4ee:	6923      	ldr	r3, [r4, #16]
 800e4f0:	3b01      	subs	r3, #1
 800e4f2:	6123      	str	r3, [r4, #16]
 800e4f4:	e7f1      	b.n	800e4da <_scanf_float+0x2aa>
 800e4f6:	9802      	ldr	r0, [sp, #8]
 800e4f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e4fc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e500:	9002      	str	r0, [sp, #8]
 800e502:	463a      	mov	r2, r7
 800e504:	4640      	mov	r0, r8
 800e506:	4798      	blx	r3
 800e508:	6923      	ldr	r3, [r4, #16]
 800e50a:	3b01      	subs	r3, #1
 800e50c:	6123      	str	r3, [r4, #16]
 800e50e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e512:	fa5f fa8a 	uxtb.w	sl, sl
 800e516:	f1ba 0f02 	cmp.w	sl, #2
 800e51a:	d1ec      	bne.n	800e4f6 <_scanf_float+0x2c6>
 800e51c:	3d03      	subs	r5, #3
 800e51e:	b2ed      	uxtb	r5, r5
 800e520:	1b76      	subs	r6, r6, r5
 800e522:	6823      	ldr	r3, [r4, #0]
 800e524:	05da      	lsls	r2, r3, #23
 800e526:	d52f      	bpl.n	800e588 <_scanf_float+0x358>
 800e528:	055b      	lsls	r3, r3, #21
 800e52a:	d510      	bpl.n	800e54e <_scanf_float+0x31e>
 800e52c:	455e      	cmp	r6, fp
 800e52e:	f67f aebf 	bls.w	800e2b0 <_scanf_float+0x80>
 800e532:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e536:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e53a:	463a      	mov	r2, r7
 800e53c:	4640      	mov	r0, r8
 800e53e:	4798      	blx	r3
 800e540:	6923      	ldr	r3, [r4, #16]
 800e542:	3b01      	subs	r3, #1
 800e544:	6123      	str	r3, [r4, #16]
 800e546:	e7f1      	b.n	800e52c <_scanf_float+0x2fc>
 800e548:	46aa      	mov	sl, r5
 800e54a:	9602      	str	r6, [sp, #8]
 800e54c:	e7df      	b.n	800e50e <_scanf_float+0x2de>
 800e54e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e552:	6923      	ldr	r3, [r4, #16]
 800e554:	2965      	cmp	r1, #101	; 0x65
 800e556:	f103 33ff 	add.w	r3, r3, #4294967295
 800e55a:	f106 35ff 	add.w	r5, r6, #4294967295
 800e55e:	6123      	str	r3, [r4, #16]
 800e560:	d00c      	beq.n	800e57c <_scanf_float+0x34c>
 800e562:	2945      	cmp	r1, #69	; 0x45
 800e564:	d00a      	beq.n	800e57c <_scanf_float+0x34c>
 800e566:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e56a:	463a      	mov	r2, r7
 800e56c:	4640      	mov	r0, r8
 800e56e:	4798      	blx	r3
 800e570:	6923      	ldr	r3, [r4, #16]
 800e572:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e576:	3b01      	subs	r3, #1
 800e578:	1eb5      	subs	r5, r6, #2
 800e57a:	6123      	str	r3, [r4, #16]
 800e57c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e580:	463a      	mov	r2, r7
 800e582:	4640      	mov	r0, r8
 800e584:	4798      	blx	r3
 800e586:	462e      	mov	r6, r5
 800e588:	6825      	ldr	r5, [r4, #0]
 800e58a:	f015 0510 	ands.w	r5, r5, #16
 800e58e:	d158      	bne.n	800e642 <_scanf_float+0x412>
 800e590:	7035      	strb	r5, [r6, #0]
 800e592:	6823      	ldr	r3, [r4, #0]
 800e594:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e59c:	d11c      	bne.n	800e5d8 <_scanf_float+0x3a8>
 800e59e:	9b01      	ldr	r3, [sp, #4]
 800e5a0:	454b      	cmp	r3, r9
 800e5a2:	eba3 0209 	sub.w	r2, r3, r9
 800e5a6:	d124      	bne.n	800e5f2 <_scanf_float+0x3c2>
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	4659      	mov	r1, fp
 800e5ac:	4640      	mov	r0, r8
 800e5ae:	f7ff f9c7 	bl	800d940 <_strtod_r>
 800e5b2:	9b03      	ldr	r3, [sp, #12]
 800e5b4:	6821      	ldr	r1, [r4, #0]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	f011 0f02 	tst.w	r1, #2
 800e5bc:	ec57 6b10 	vmov	r6, r7, d0
 800e5c0:	f103 0204 	add.w	r2, r3, #4
 800e5c4:	d020      	beq.n	800e608 <_scanf_float+0x3d8>
 800e5c6:	9903      	ldr	r1, [sp, #12]
 800e5c8:	600a      	str	r2, [r1, #0]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	e9c3 6700 	strd	r6, r7, [r3]
 800e5d0:	68e3      	ldr	r3, [r4, #12]
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	60e3      	str	r3, [r4, #12]
 800e5d6:	e66c      	b.n	800e2b2 <_scanf_float+0x82>
 800e5d8:	9b04      	ldr	r3, [sp, #16]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d0e4      	beq.n	800e5a8 <_scanf_float+0x378>
 800e5de:	9905      	ldr	r1, [sp, #20]
 800e5e0:	230a      	movs	r3, #10
 800e5e2:	462a      	mov	r2, r5
 800e5e4:	3101      	adds	r1, #1
 800e5e6:	4640      	mov	r0, r8
 800e5e8:	f002 f97a 	bl	80108e0 <_strtol_r>
 800e5ec:	9b04      	ldr	r3, [sp, #16]
 800e5ee:	9e05      	ldr	r6, [sp, #20]
 800e5f0:	1ac2      	subs	r2, r0, r3
 800e5f2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e5f6:	429e      	cmp	r6, r3
 800e5f8:	bf28      	it	cs
 800e5fa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e5fe:	4912      	ldr	r1, [pc, #72]	; (800e648 <_scanf_float+0x418>)
 800e600:	4630      	mov	r0, r6
 800e602:	f000 f8e7 	bl	800e7d4 <siprintf>
 800e606:	e7cf      	b.n	800e5a8 <_scanf_float+0x378>
 800e608:	f011 0f04 	tst.w	r1, #4
 800e60c:	9903      	ldr	r1, [sp, #12]
 800e60e:	600a      	str	r2, [r1, #0]
 800e610:	d1db      	bne.n	800e5ca <_scanf_float+0x39a>
 800e612:	f8d3 8000 	ldr.w	r8, [r3]
 800e616:	ee10 2a10 	vmov	r2, s0
 800e61a:	ee10 0a10 	vmov	r0, s0
 800e61e:	463b      	mov	r3, r7
 800e620:	4639      	mov	r1, r7
 800e622:	f7f2 fa83 	bl	8000b2c <__aeabi_dcmpun>
 800e626:	b128      	cbz	r0, 800e634 <_scanf_float+0x404>
 800e628:	4808      	ldr	r0, [pc, #32]	; (800e64c <_scanf_float+0x41c>)
 800e62a:	f000 f9f1 	bl	800ea10 <nanf>
 800e62e:	ed88 0a00 	vstr	s0, [r8]
 800e632:	e7cd      	b.n	800e5d0 <_scanf_float+0x3a0>
 800e634:	4630      	mov	r0, r6
 800e636:	4639      	mov	r1, r7
 800e638:	f7f2 fad6 	bl	8000be8 <__aeabi_d2f>
 800e63c:	f8c8 0000 	str.w	r0, [r8]
 800e640:	e7c6      	b.n	800e5d0 <_scanf_float+0x3a0>
 800e642:	2500      	movs	r5, #0
 800e644:	e635      	b.n	800e2b2 <_scanf_float+0x82>
 800e646:	bf00      	nop
 800e648:	08013ae4 	.word	0x08013ae4
 800e64c:	08013e81 	.word	0x08013e81

0800e650 <std>:
 800e650:	2300      	movs	r3, #0
 800e652:	b510      	push	{r4, lr}
 800e654:	4604      	mov	r4, r0
 800e656:	e9c0 3300 	strd	r3, r3, [r0]
 800e65a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e65e:	6083      	str	r3, [r0, #8]
 800e660:	8181      	strh	r1, [r0, #12]
 800e662:	6643      	str	r3, [r0, #100]	; 0x64
 800e664:	81c2      	strh	r2, [r0, #14]
 800e666:	6183      	str	r3, [r0, #24]
 800e668:	4619      	mov	r1, r3
 800e66a:	2208      	movs	r2, #8
 800e66c:	305c      	adds	r0, #92	; 0x5c
 800e66e:	f000 f914 	bl	800e89a <memset>
 800e672:	4b0d      	ldr	r3, [pc, #52]	; (800e6a8 <std+0x58>)
 800e674:	6263      	str	r3, [r4, #36]	; 0x24
 800e676:	4b0d      	ldr	r3, [pc, #52]	; (800e6ac <std+0x5c>)
 800e678:	62a3      	str	r3, [r4, #40]	; 0x28
 800e67a:	4b0d      	ldr	r3, [pc, #52]	; (800e6b0 <std+0x60>)
 800e67c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e67e:	4b0d      	ldr	r3, [pc, #52]	; (800e6b4 <std+0x64>)
 800e680:	6323      	str	r3, [r4, #48]	; 0x30
 800e682:	4b0d      	ldr	r3, [pc, #52]	; (800e6b8 <std+0x68>)
 800e684:	6224      	str	r4, [r4, #32]
 800e686:	429c      	cmp	r4, r3
 800e688:	d006      	beq.n	800e698 <std+0x48>
 800e68a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e68e:	4294      	cmp	r4, r2
 800e690:	d002      	beq.n	800e698 <std+0x48>
 800e692:	33d0      	adds	r3, #208	; 0xd0
 800e694:	429c      	cmp	r4, r3
 800e696:	d105      	bne.n	800e6a4 <std+0x54>
 800e698:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e69c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6a0:	f000 b99a 	b.w	800e9d8 <__retarget_lock_init_recursive>
 800e6a4:	bd10      	pop	{r4, pc}
 800e6a6:	bf00      	nop
 800e6a8:	0800e815 	.word	0x0800e815
 800e6ac:	0800e837 	.word	0x0800e837
 800e6b0:	0800e86f 	.word	0x0800e86f
 800e6b4:	0800e893 	.word	0x0800e893
 800e6b8:	20000d98 	.word	0x20000d98

0800e6bc <stdio_exit_handler>:
 800e6bc:	4a02      	ldr	r2, [pc, #8]	; (800e6c8 <stdio_exit_handler+0xc>)
 800e6be:	4903      	ldr	r1, [pc, #12]	; (800e6cc <stdio_exit_handler+0x10>)
 800e6c0:	4803      	ldr	r0, [pc, #12]	; (800e6d0 <stdio_exit_handler+0x14>)
 800e6c2:	f000 b869 	b.w	800e798 <_fwalk_sglue>
 800e6c6:	bf00      	nop
 800e6c8:	20000040 	.word	0x20000040
 800e6cc:	08010cbd 	.word	0x08010cbd
 800e6d0:	200001b8 	.word	0x200001b8

0800e6d4 <cleanup_stdio>:
 800e6d4:	6841      	ldr	r1, [r0, #4]
 800e6d6:	4b0c      	ldr	r3, [pc, #48]	; (800e708 <cleanup_stdio+0x34>)
 800e6d8:	4299      	cmp	r1, r3
 800e6da:	b510      	push	{r4, lr}
 800e6dc:	4604      	mov	r4, r0
 800e6de:	d001      	beq.n	800e6e4 <cleanup_stdio+0x10>
 800e6e0:	f002 faec 	bl	8010cbc <_fflush_r>
 800e6e4:	68a1      	ldr	r1, [r4, #8]
 800e6e6:	4b09      	ldr	r3, [pc, #36]	; (800e70c <cleanup_stdio+0x38>)
 800e6e8:	4299      	cmp	r1, r3
 800e6ea:	d002      	beq.n	800e6f2 <cleanup_stdio+0x1e>
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	f002 fae5 	bl	8010cbc <_fflush_r>
 800e6f2:	68e1      	ldr	r1, [r4, #12]
 800e6f4:	4b06      	ldr	r3, [pc, #24]	; (800e710 <cleanup_stdio+0x3c>)
 800e6f6:	4299      	cmp	r1, r3
 800e6f8:	d004      	beq.n	800e704 <cleanup_stdio+0x30>
 800e6fa:	4620      	mov	r0, r4
 800e6fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e700:	f002 badc 	b.w	8010cbc <_fflush_r>
 800e704:	bd10      	pop	{r4, pc}
 800e706:	bf00      	nop
 800e708:	20000d98 	.word	0x20000d98
 800e70c:	20000e00 	.word	0x20000e00
 800e710:	20000e68 	.word	0x20000e68

0800e714 <global_stdio_init.part.0>:
 800e714:	b510      	push	{r4, lr}
 800e716:	4b0b      	ldr	r3, [pc, #44]	; (800e744 <global_stdio_init.part.0+0x30>)
 800e718:	4c0b      	ldr	r4, [pc, #44]	; (800e748 <global_stdio_init.part.0+0x34>)
 800e71a:	4a0c      	ldr	r2, [pc, #48]	; (800e74c <global_stdio_init.part.0+0x38>)
 800e71c:	601a      	str	r2, [r3, #0]
 800e71e:	4620      	mov	r0, r4
 800e720:	2200      	movs	r2, #0
 800e722:	2104      	movs	r1, #4
 800e724:	f7ff ff94 	bl	800e650 <std>
 800e728:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e72c:	2201      	movs	r2, #1
 800e72e:	2109      	movs	r1, #9
 800e730:	f7ff ff8e 	bl	800e650 <std>
 800e734:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e738:	2202      	movs	r2, #2
 800e73a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e73e:	2112      	movs	r1, #18
 800e740:	f7ff bf86 	b.w	800e650 <std>
 800e744:	20000ed0 	.word	0x20000ed0
 800e748:	20000d98 	.word	0x20000d98
 800e74c:	0800e6bd 	.word	0x0800e6bd

0800e750 <__sfp_lock_acquire>:
 800e750:	4801      	ldr	r0, [pc, #4]	; (800e758 <__sfp_lock_acquire+0x8>)
 800e752:	f000 b942 	b.w	800e9da <__retarget_lock_acquire_recursive>
 800e756:	bf00      	nop
 800e758:	20000ed9 	.word	0x20000ed9

0800e75c <__sfp_lock_release>:
 800e75c:	4801      	ldr	r0, [pc, #4]	; (800e764 <__sfp_lock_release+0x8>)
 800e75e:	f000 b93d 	b.w	800e9dc <__retarget_lock_release_recursive>
 800e762:	bf00      	nop
 800e764:	20000ed9 	.word	0x20000ed9

0800e768 <__sinit>:
 800e768:	b510      	push	{r4, lr}
 800e76a:	4604      	mov	r4, r0
 800e76c:	f7ff fff0 	bl	800e750 <__sfp_lock_acquire>
 800e770:	6a23      	ldr	r3, [r4, #32]
 800e772:	b11b      	cbz	r3, 800e77c <__sinit+0x14>
 800e774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e778:	f7ff bff0 	b.w	800e75c <__sfp_lock_release>
 800e77c:	4b04      	ldr	r3, [pc, #16]	; (800e790 <__sinit+0x28>)
 800e77e:	6223      	str	r3, [r4, #32]
 800e780:	4b04      	ldr	r3, [pc, #16]	; (800e794 <__sinit+0x2c>)
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d1f5      	bne.n	800e774 <__sinit+0xc>
 800e788:	f7ff ffc4 	bl	800e714 <global_stdio_init.part.0>
 800e78c:	e7f2      	b.n	800e774 <__sinit+0xc>
 800e78e:	bf00      	nop
 800e790:	0800e6d5 	.word	0x0800e6d5
 800e794:	20000ed0 	.word	0x20000ed0

0800e798 <_fwalk_sglue>:
 800e798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e79c:	4607      	mov	r7, r0
 800e79e:	4688      	mov	r8, r1
 800e7a0:	4614      	mov	r4, r2
 800e7a2:	2600      	movs	r6, #0
 800e7a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e7a8:	f1b9 0901 	subs.w	r9, r9, #1
 800e7ac:	d505      	bpl.n	800e7ba <_fwalk_sglue+0x22>
 800e7ae:	6824      	ldr	r4, [r4, #0]
 800e7b0:	2c00      	cmp	r4, #0
 800e7b2:	d1f7      	bne.n	800e7a4 <_fwalk_sglue+0xc>
 800e7b4:	4630      	mov	r0, r6
 800e7b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7ba:	89ab      	ldrh	r3, [r5, #12]
 800e7bc:	2b01      	cmp	r3, #1
 800e7be:	d907      	bls.n	800e7d0 <_fwalk_sglue+0x38>
 800e7c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e7c4:	3301      	adds	r3, #1
 800e7c6:	d003      	beq.n	800e7d0 <_fwalk_sglue+0x38>
 800e7c8:	4629      	mov	r1, r5
 800e7ca:	4638      	mov	r0, r7
 800e7cc:	47c0      	blx	r8
 800e7ce:	4306      	orrs	r6, r0
 800e7d0:	3568      	adds	r5, #104	; 0x68
 800e7d2:	e7e9      	b.n	800e7a8 <_fwalk_sglue+0x10>

0800e7d4 <siprintf>:
 800e7d4:	b40e      	push	{r1, r2, r3}
 800e7d6:	b500      	push	{lr}
 800e7d8:	b09c      	sub	sp, #112	; 0x70
 800e7da:	ab1d      	add	r3, sp, #116	; 0x74
 800e7dc:	9002      	str	r0, [sp, #8]
 800e7de:	9006      	str	r0, [sp, #24]
 800e7e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e7e4:	4809      	ldr	r0, [pc, #36]	; (800e80c <siprintf+0x38>)
 800e7e6:	9107      	str	r1, [sp, #28]
 800e7e8:	9104      	str	r1, [sp, #16]
 800e7ea:	4909      	ldr	r1, [pc, #36]	; (800e810 <siprintf+0x3c>)
 800e7ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7f0:	9105      	str	r1, [sp, #20]
 800e7f2:	6800      	ldr	r0, [r0, #0]
 800e7f4:	9301      	str	r3, [sp, #4]
 800e7f6:	a902      	add	r1, sp, #8
 800e7f8:	f002 f8dc 	bl	80109b4 <_svfiprintf_r>
 800e7fc:	9b02      	ldr	r3, [sp, #8]
 800e7fe:	2200      	movs	r2, #0
 800e800:	701a      	strb	r2, [r3, #0]
 800e802:	b01c      	add	sp, #112	; 0x70
 800e804:	f85d eb04 	ldr.w	lr, [sp], #4
 800e808:	b003      	add	sp, #12
 800e80a:	4770      	bx	lr
 800e80c:	20000204 	.word	0x20000204
 800e810:	ffff0208 	.word	0xffff0208

0800e814 <__sread>:
 800e814:	b510      	push	{r4, lr}
 800e816:	460c      	mov	r4, r1
 800e818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e81c:	f000 f87e 	bl	800e91c <_read_r>
 800e820:	2800      	cmp	r0, #0
 800e822:	bfab      	itete	ge
 800e824:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e826:	89a3      	ldrhlt	r3, [r4, #12]
 800e828:	181b      	addge	r3, r3, r0
 800e82a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e82e:	bfac      	ite	ge
 800e830:	6563      	strge	r3, [r4, #84]	; 0x54
 800e832:	81a3      	strhlt	r3, [r4, #12]
 800e834:	bd10      	pop	{r4, pc}

0800e836 <__swrite>:
 800e836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e83a:	461f      	mov	r7, r3
 800e83c:	898b      	ldrh	r3, [r1, #12]
 800e83e:	05db      	lsls	r3, r3, #23
 800e840:	4605      	mov	r5, r0
 800e842:	460c      	mov	r4, r1
 800e844:	4616      	mov	r6, r2
 800e846:	d505      	bpl.n	800e854 <__swrite+0x1e>
 800e848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e84c:	2302      	movs	r3, #2
 800e84e:	2200      	movs	r2, #0
 800e850:	f000 f852 	bl	800e8f8 <_lseek_r>
 800e854:	89a3      	ldrh	r3, [r4, #12]
 800e856:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e85a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e85e:	81a3      	strh	r3, [r4, #12]
 800e860:	4632      	mov	r2, r6
 800e862:	463b      	mov	r3, r7
 800e864:	4628      	mov	r0, r5
 800e866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e86a:	f000 b879 	b.w	800e960 <_write_r>

0800e86e <__sseek>:
 800e86e:	b510      	push	{r4, lr}
 800e870:	460c      	mov	r4, r1
 800e872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e876:	f000 f83f 	bl	800e8f8 <_lseek_r>
 800e87a:	1c43      	adds	r3, r0, #1
 800e87c:	89a3      	ldrh	r3, [r4, #12]
 800e87e:	bf15      	itete	ne
 800e880:	6560      	strne	r0, [r4, #84]	; 0x54
 800e882:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e886:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e88a:	81a3      	strheq	r3, [r4, #12]
 800e88c:	bf18      	it	ne
 800e88e:	81a3      	strhne	r3, [r4, #12]
 800e890:	bd10      	pop	{r4, pc}

0800e892 <__sclose>:
 800e892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e896:	f000 b81f 	b.w	800e8d8 <_close_r>

0800e89a <memset>:
 800e89a:	4402      	add	r2, r0
 800e89c:	4603      	mov	r3, r0
 800e89e:	4293      	cmp	r3, r2
 800e8a0:	d100      	bne.n	800e8a4 <memset+0xa>
 800e8a2:	4770      	bx	lr
 800e8a4:	f803 1b01 	strb.w	r1, [r3], #1
 800e8a8:	e7f9      	b.n	800e89e <memset+0x4>

0800e8aa <strncmp>:
 800e8aa:	b510      	push	{r4, lr}
 800e8ac:	b16a      	cbz	r2, 800e8ca <strncmp+0x20>
 800e8ae:	3901      	subs	r1, #1
 800e8b0:	1884      	adds	r4, r0, r2
 800e8b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8b6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	d103      	bne.n	800e8c6 <strncmp+0x1c>
 800e8be:	42a0      	cmp	r0, r4
 800e8c0:	d001      	beq.n	800e8c6 <strncmp+0x1c>
 800e8c2:	2a00      	cmp	r2, #0
 800e8c4:	d1f5      	bne.n	800e8b2 <strncmp+0x8>
 800e8c6:	1ad0      	subs	r0, r2, r3
 800e8c8:	bd10      	pop	{r4, pc}
 800e8ca:	4610      	mov	r0, r2
 800e8cc:	e7fc      	b.n	800e8c8 <strncmp+0x1e>
	...

0800e8d0 <_localeconv_r>:
 800e8d0:	4800      	ldr	r0, [pc, #0]	; (800e8d4 <_localeconv_r+0x4>)
 800e8d2:	4770      	bx	lr
 800e8d4:	2000013c 	.word	0x2000013c

0800e8d8 <_close_r>:
 800e8d8:	b538      	push	{r3, r4, r5, lr}
 800e8da:	4d06      	ldr	r5, [pc, #24]	; (800e8f4 <_close_r+0x1c>)
 800e8dc:	2300      	movs	r3, #0
 800e8de:	4604      	mov	r4, r0
 800e8e0:	4608      	mov	r0, r1
 800e8e2:	602b      	str	r3, [r5, #0]
 800e8e4:	f7f3 ff3d 	bl	8002762 <_close>
 800e8e8:	1c43      	adds	r3, r0, #1
 800e8ea:	d102      	bne.n	800e8f2 <_close_r+0x1a>
 800e8ec:	682b      	ldr	r3, [r5, #0]
 800e8ee:	b103      	cbz	r3, 800e8f2 <_close_r+0x1a>
 800e8f0:	6023      	str	r3, [r4, #0]
 800e8f2:	bd38      	pop	{r3, r4, r5, pc}
 800e8f4:	20000ed4 	.word	0x20000ed4

0800e8f8 <_lseek_r>:
 800e8f8:	b538      	push	{r3, r4, r5, lr}
 800e8fa:	4d07      	ldr	r5, [pc, #28]	; (800e918 <_lseek_r+0x20>)
 800e8fc:	4604      	mov	r4, r0
 800e8fe:	4608      	mov	r0, r1
 800e900:	4611      	mov	r1, r2
 800e902:	2200      	movs	r2, #0
 800e904:	602a      	str	r2, [r5, #0]
 800e906:	461a      	mov	r2, r3
 800e908:	f7f3 ff52 	bl	80027b0 <_lseek>
 800e90c:	1c43      	adds	r3, r0, #1
 800e90e:	d102      	bne.n	800e916 <_lseek_r+0x1e>
 800e910:	682b      	ldr	r3, [r5, #0]
 800e912:	b103      	cbz	r3, 800e916 <_lseek_r+0x1e>
 800e914:	6023      	str	r3, [r4, #0]
 800e916:	bd38      	pop	{r3, r4, r5, pc}
 800e918:	20000ed4 	.word	0x20000ed4

0800e91c <_read_r>:
 800e91c:	b538      	push	{r3, r4, r5, lr}
 800e91e:	4d07      	ldr	r5, [pc, #28]	; (800e93c <_read_r+0x20>)
 800e920:	4604      	mov	r4, r0
 800e922:	4608      	mov	r0, r1
 800e924:	4611      	mov	r1, r2
 800e926:	2200      	movs	r2, #0
 800e928:	602a      	str	r2, [r5, #0]
 800e92a:	461a      	mov	r2, r3
 800e92c:	f7f3 fee0 	bl	80026f0 <_read>
 800e930:	1c43      	adds	r3, r0, #1
 800e932:	d102      	bne.n	800e93a <_read_r+0x1e>
 800e934:	682b      	ldr	r3, [r5, #0]
 800e936:	b103      	cbz	r3, 800e93a <_read_r+0x1e>
 800e938:	6023      	str	r3, [r4, #0]
 800e93a:	bd38      	pop	{r3, r4, r5, pc}
 800e93c:	20000ed4 	.word	0x20000ed4

0800e940 <_sbrk_r>:
 800e940:	b538      	push	{r3, r4, r5, lr}
 800e942:	4d06      	ldr	r5, [pc, #24]	; (800e95c <_sbrk_r+0x1c>)
 800e944:	2300      	movs	r3, #0
 800e946:	4604      	mov	r4, r0
 800e948:	4608      	mov	r0, r1
 800e94a:	602b      	str	r3, [r5, #0]
 800e94c:	f7f3 ff3e 	bl	80027cc <_sbrk>
 800e950:	1c43      	adds	r3, r0, #1
 800e952:	d102      	bne.n	800e95a <_sbrk_r+0x1a>
 800e954:	682b      	ldr	r3, [r5, #0]
 800e956:	b103      	cbz	r3, 800e95a <_sbrk_r+0x1a>
 800e958:	6023      	str	r3, [r4, #0]
 800e95a:	bd38      	pop	{r3, r4, r5, pc}
 800e95c:	20000ed4 	.word	0x20000ed4

0800e960 <_write_r>:
 800e960:	b538      	push	{r3, r4, r5, lr}
 800e962:	4d07      	ldr	r5, [pc, #28]	; (800e980 <_write_r+0x20>)
 800e964:	4604      	mov	r4, r0
 800e966:	4608      	mov	r0, r1
 800e968:	4611      	mov	r1, r2
 800e96a:	2200      	movs	r2, #0
 800e96c:	602a      	str	r2, [r5, #0]
 800e96e:	461a      	mov	r2, r3
 800e970:	f7f3 fedb 	bl	800272a <_write>
 800e974:	1c43      	adds	r3, r0, #1
 800e976:	d102      	bne.n	800e97e <_write_r+0x1e>
 800e978:	682b      	ldr	r3, [r5, #0]
 800e97a:	b103      	cbz	r3, 800e97e <_write_r+0x1e>
 800e97c:	6023      	str	r3, [r4, #0]
 800e97e:	bd38      	pop	{r3, r4, r5, pc}
 800e980:	20000ed4 	.word	0x20000ed4

0800e984 <__errno>:
 800e984:	4b01      	ldr	r3, [pc, #4]	; (800e98c <__errno+0x8>)
 800e986:	6818      	ldr	r0, [r3, #0]
 800e988:	4770      	bx	lr
 800e98a:	bf00      	nop
 800e98c:	20000204 	.word	0x20000204

0800e990 <__libc_init_array>:
 800e990:	b570      	push	{r4, r5, r6, lr}
 800e992:	4d0d      	ldr	r5, [pc, #52]	; (800e9c8 <__libc_init_array+0x38>)
 800e994:	4c0d      	ldr	r4, [pc, #52]	; (800e9cc <__libc_init_array+0x3c>)
 800e996:	1b64      	subs	r4, r4, r5
 800e998:	10a4      	asrs	r4, r4, #2
 800e99a:	2600      	movs	r6, #0
 800e99c:	42a6      	cmp	r6, r4
 800e99e:	d109      	bne.n	800e9b4 <__libc_init_array+0x24>
 800e9a0:	4d0b      	ldr	r5, [pc, #44]	; (800e9d0 <__libc_init_array+0x40>)
 800e9a2:	4c0c      	ldr	r4, [pc, #48]	; (800e9d4 <__libc_init_array+0x44>)
 800e9a4:	f005 f810 	bl	80139c8 <_init>
 800e9a8:	1b64      	subs	r4, r4, r5
 800e9aa:	10a4      	asrs	r4, r4, #2
 800e9ac:	2600      	movs	r6, #0
 800e9ae:	42a6      	cmp	r6, r4
 800e9b0:	d105      	bne.n	800e9be <__libc_init_array+0x2e>
 800e9b2:	bd70      	pop	{r4, r5, r6, pc}
 800e9b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9b8:	4798      	blx	r3
 800e9ba:	3601      	adds	r6, #1
 800e9bc:	e7ee      	b.n	800e99c <__libc_init_array+0xc>
 800e9be:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9c2:	4798      	blx	r3
 800e9c4:	3601      	adds	r6, #1
 800e9c6:	e7f2      	b.n	800e9ae <__libc_init_array+0x1e>
 800e9c8:	08014118 	.word	0x08014118
 800e9cc:	08014118 	.word	0x08014118
 800e9d0:	08014118 	.word	0x08014118
 800e9d4:	0801411c 	.word	0x0801411c

0800e9d8 <__retarget_lock_init_recursive>:
 800e9d8:	4770      	bx	lr

0800e9da <__retarget_lock_acquire_recursive>:
 800e9da:	4770      	bx	lr

0800e9dc <__retarget_lock_release_recursive>:
 800e9dc:	4770      	bx	lr

0800e9de <memcpy>:
 800e9de:	440a      	add	r2, r1
 800e9e0:	4291      	cmp	r1, r2
 800e9e2:	f100 33ff 	add.w	r3, r0, #4294967295
 800e9e6:	d100      	bne.n	800e9ea <memcpy+0xc>
 800e9e8:	4770      	bx	lr
 800e9ea:	b510      	push	{r4, lr}
 800e9ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e9f4:	4291      	cmp	r1, r2
 800e9f6:	d1f9      	bne.n	800e9ec <memcpy+0xe>
 800e9f8:	bd10      	pop	{r4, pc}
 800e9fa:	0000      	movs	r0, r0
 800e9fc:	0000      	movs	r0, r0
	...

0800ea00 <nan>:
 800ea00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ea08 <nan+0x8>
 800ea04:	4770      	bx	lr
 800ea06:	bf00      	nop
 800ea08:	00000000 	.word	0x00000000
 800ea0c:	7ff80000 	.word	0x7ff80000

0800ea10 <nanf>:
 800ea10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ea18 <nanf+0x8>
 800ea14:	4770      	bx	lr
 800ea16:	bf00      	nop
 800ea18:	7fc00000 	.word	0x7fc00000

0800ea1c <quorem>:
 800ea1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea20:	6903      	ldr	r3, [r0, #16]
 800ea22:	690c      	ldr	r4, [r1, #16]
 800ea24:	42a3      	cmp	r3, r4
 800ea26:	4607      	mov	r7, r0
 800ea28:	db7e      	blt.n	800eb28 <quorem+0x10c>
 800ea2a:	3c01      	subs	r4, #1
 800ea2c:	f101 0814 	add.w	r8, r1, #20
 800ea30:	f100 0514 	add.w	r5, r0, #20
 800ea34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ea38:	9301      	str	r3, [sp, #4]
 800ea3a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ea3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ea42:	3301      	adds	r3, #1
 800ea44:	429a      	cmp	r2, r3
 800ea46:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ea4a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ea4e:	fbb2 f6f3 	udiv	r6, r2, r3
 800ea52:	d331      	bcc.n	800eab8 <quorem+0x9c>
 800ea54:	f04f 0e00 	mov.w	lr, #0
 800ea58:	4640      	mov	r0, r8
 800ea5a:	46ac      	mov	ip, r5
 800ea5c:	46f2      	mov	sl, lr
 800ea5e:	f850 2b04 	ldr.w	r2, [r0], #4
 800ea62:	b293      	uxth	r3, r2
 800ea64:	fb06 e303 	mla	r3, r6, r3, lr
 800ea68:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ea6c:	0c1a      	lsrs	r2, r3, #16
 800ea6e:	b29b      	uxth	r3, r3
 800ea70:	ebaa 0303 	sub.w	r3, sl, r3
 800ea74:	f8dc a000 	ldr.w	sl, [ip]
 800ea78:	fa13 f38a 	uxtah	r3, r3, sl
 800ea7c:	fb06 220e 	mla	r2, r6, lr, r2
 800ea80:	9300      	str	r3, [sp, #0]
 800ea82:	9b00      	ldr	r3, [sp, #0]
 800ea84:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ea88:	b292      	uxth	r2, r2
 800ea8a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ea8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ea92:	f8bd 3000 	ldrh.w	r3, [sp]
 800ea96:	4581      	cmp	r9, r0
 800ea98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ea9c:	f84c 3b04 	str.w	r3, [ip], #4
 800eaa0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800eaa4:	d2db      	bcs.n	800ea5e <quorem+0x42>
 800eaa6:	f855 300b 	ldr.w	r3, [r5, fp]
 800eaaa:	b92b      	cbnz	r3, 800eab8 <quorem+0x9c>
 800eaac:	9b01      	ldr	r3, [sp, #4]
 800eaae:	3b04      	subs	r3, #4
 800eab0:	429d      	cmp	r5, r3
 800eab2:	461a      	mov	r2, r3
 800eab4:	d32c      	bcc.n	800eb10 <quorem+0xf4>
 800eab6:	613c      	str	r4, [r7, #16]
 800eab8:	4638      	mov	r0, r7
 800eaba:	f001 fca7 	bl	801040c <__mcmp>
 800eabe:	2800      	cmp	r0, #0
 800eac0:	db22      	blt.n	800eb08 <quorem+0xec>
 800eac2:	3601      	adds	r6, #1
 800eac4:	4629      	mov	r1, r5
 800eac6:	2000      	movs	r0, #0
 800eac8:	f858 2b04 	ldr.w	r2, [r8], #4
 800eacc:	f8d1 c000 	ldr.w	ip, [r1]
 800ead0:	b293      	uxth	r3, r2
 800ead2:	1ac3      	subs	r3, r0, r3
 800ead4:	0c12      	lsrs	r2, r2, #16
 800ead6:	fa13 f38c 	uxtah	r3, r3, ip
 800eada:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800eade:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eae2:	b29b      	uxth	r3, r3
 800eae4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eae8:	45c1      	cmp	r9, r8
 800eaea:	f841 3b04 	str.w	r3, [r1], #4
 800eaee:	ea4f 4022 	mov.w	r0, r2, asr #16
 800eaf2:	d2e9      	bcs.n	800eac8 <quorem+0xac>
 800eaf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eaf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eafc:	b922      	cbnz	r2, 800eb08 <quorem+0xec>
 800eafe:	3b04      	subs	r3, #4
 800eb00:	429d      	cmp	r5, r3
 800eb02:	461a      	mov	r2, r3
 800eb04:	d30a      	bcc.n	800eb1c <quorem+0x100>
 800eb06:	613c      	str	r4, [r7, #16]
 800eb08:	4630      	mov	r0, r6
 800eb0a:	b003      	add	sp, #12
 800eb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb10:	6812      	ldr	r2, [r2, #0]
 800eb12:	3b04      	subs	r3, #4
 800eb14:	2a00      	cmp	r2, #0
 800eb16:	d1ce      	bne.n	800eab6 <quorem+0x9a>
 800eb18:	3c01      	subs	r4, #1
 800eb1a:	e7c9      	b.n	800eab0 <quorem+0x94>
 800eb1c:	6812      	ldr	r2, [r2, #0]
 800eb1e:	3b04      	subs	r3, #4
 800eb20:	2a00      	cmp	r2, #0
 800eb22:	d1f0      	bne.n	800eb06 <quorem+0xea>
 800eb24:	3c01      	subs	r4, #1
 800eb26:	e7eb      	b.n	800eb00 <quorem+0xe4>
 800eb28:	2000      	movs	r0, #0
 800eb2a:	e7ee      	b.n	800eb0a <quorem+0xee>
 800eb2c:	0000      	movs	r0, r0
	...

0800eb30 <_dtoa_r>:
 800eb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb34:	ed2d 8b04 	vpush	{d8-d9}
 800eb38:	69c5      	ldr	r5, [r0, #28]
 800eb3a:	b093      	sub	sp, #76	; 0x4c
 800eb3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800eb40:	ec57 6b10 	vmov	r6, r7, d0
 800eb44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800eb48:	9107      	str	r1, [sp, #28]
 800eb4a:	4604      	mov	r4, r0
 800eb4c:	920a      	str	r2, [sp, #40]	; 0x28
 800eb4e:	930d      	str	r3, [sp, #52]	; 0x34
 800eb50:	b975      	cbnz	r5, 800eb70 <_dtoa_r+0x40>
 800eb52:	2010      	movs	r0, #16
 800eb54:	f7fe f82c 	bl	800cbb0 <malloc>
 800eb58:	4602      	mov	r2, r0
 800eb5a:	61e0      	str	r0, [r4, #28]
 800eb5c:	b920      	cbnz	r0, 800eb68 <_dtoa_r+0x38>
 800eb5e:	4bae      	ldr	r3, [pc, #696]	; (800ee18 <_dtoa_r+0x2e8>)
 800eb60:	21ef      	movs	r1, #239	; 0xef
 800eb62:	48ae      	ldr	r0, [pc, #696]	; (800ee1c <_dtoa_r+0x2ec>)
 800eb64:	f002 f8ec 	bl	8010d40 <__assert_func>
 800eb68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800eb6c:	6005      	str	r5, [r0, #0]
 800eb6e:	60c5      	str	r5, [r0, #12]
 800eb70:	69e3      	ldr	r3, [r4, #28]
 800eb72:	6819      	ldr	r1, [r3, #0]
 800eb74:	b151      	cbz	r1, 800eb8c <_dtoa_r+0x5c>
 800eb76:	685a      	ldr	r2, [r3, #4]
 800eb78:	604a      	str	r2, [r1, #4]
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	4093      	lsls	r3, r2
 800eb7e:	608b      	str	r3, [r1, #8]
 800eb80:	4620      	mov	r0, r4
 800eb82:	f001 f9bd 	bl	800ff00 <_Bfree>
 800eb86:	69e3      	ldr	r3, [r4, #28]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	601a      	str	r2, [r3, #0]
 800eb8c:	1e3b      	subs	r3, r7, #0
 800eb8e:	bfbb      	ittet	lt
 800eb90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800eb94:	9303      	strlt	r3, [sp, #12]
 800eb96:	2300      	movge	r3, #0
 800eb98:	2201      	movlt	r2, #1
 800eb9a:	bfac      	ite	ge
 800eb9c:	f8c8 3000 	strge.w	r3, [r8]
 800eba0:	f8c8 2000 	strlt.w	r2, [r8]
 800eba4:	4b9e      	ldr	r3, [pc, #632]	; (800ee20 <_dtoa_r+0x2f0>)
 800eba6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ebaa:	ea33 0308 	bics.w	r3, r3, r8
 800ebae:	d11b      	bne.n	800ebe8 <_dtoa_r+0xb8>
 800ebb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ebb2:	f242 730f 	movw	r3, #9999	; 0x270f
 800ebb6:	6013      	str	r3, [r2, #0]
 800ebb8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ebbc:	4333      	orrs	r3, r6
 800ebbe:	f000 8593 	beq.w	800f6e8 <_dtoa_r+0xbb8>
 800ebc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ebc4:	b963      	cbnz	r3, 800ebe0 <_dtoa_r+0xb0>
 800ebc6:	4b97      	ldr	r3, [pc, #604]	; (800ee24 <_dtoa_r+0x2f4>)
 800ebc8:	e027      	b.n	800ec1a <_dtoa_r+0xea>
 800ebca:	4b97      	ldr	r3, [pc, #604]	; (800ee28 <_dtoa_r+0x2f8>)
 800ebcc:	9300      	str	r3, [sp, #0]
 800ebce:	3308      	adds	r3, #8
 800ebd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ebd2:	6013      	str	r3, [r2, #0]
 800ebd4:	9800      	ldr	r0, [sp, #0]
 800ebd6:	b013      	add	sp, #76	; 0x4c
 800ebd8:	ecbd 8b04 	vpop	{d8-d9}
 800ebdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebe0:	4b90      	ldr	r3, [pc, #576]	; (800ee24 <_dtoa_r+0x2f4>)
 800ebe2:	9300      	str	r3, [sp, #0]
 800ebe4:	3303      	adds	r3, #3
 800ebe6:	e7f3      	b.n	800ebd0 <_dtoa_r+0xa0>
 800ebe8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ebec:	2200      	movs	r2, #0
 800ebee:	ec51 0b17 	vmov	r0, r1, d7
 800ebf2:	eeb0 8a47 	vmov.f32	s16, s14
 800ebf6:	eef0 8a67 	vmov.f32	s17, s15
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	f7f1 ff64 	bl	8000ac8 <__aeabi_dcmpeq>
 800ec00:	4681      	mov	r9, r0
 800ec02:	b160      	cbz	r0, 800ec1e <_dtoa_r+0xee>
 800ec04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ec06:	2301      	movs	r3, #1
 800ec08:	6013      	str	r3, [r2, #0]
 800ec0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	f000 8568 	beq.w	800f6e2 <_dtoa_r+0xbb2>
 800ec12:	4b86      	ldr	r3, [pc, #536]	; (800ee2c <_dtoa_r+0x2fc>)
 800ec14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ec16:	6013      	str	r3, [r2, #0]
 800ec18:	3b01      	subs	r3, #1
 800ec1a:	9300      	str	r3, [sp, #0]
 800ec1c:	e7da      	b.n	800ebd4 <_dtoa_r+0xa4>
 800ec1e:	aa10      	add	r2, sp, #64	; 0x40
 800ec20:	a911      	add	r1, sp, #68	; 0x44
 800ec22:	4620      	mov	r0, r4
 800ec24:	eeb0 0a48 	vmov.f32	s0, s16
 800ec28:	eef0 0a68 	vmov.f32	s1, s17
 800ec2c:	f001 fd04 	bl	8010638 <__d2b>
 800ec30:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ec34:	4682      	mov	sl, r0
 800ec36:	2d00      	cmp	r5, #0
 800ec38:	d07f      	beq.n	800ed3a <_dtoa_r+0x20a>
 800ec3a:	ee18 3a90 	vmov	r3, s17
 800ec3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec42:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ec46:	ec51 0b18 	vmov	r0, r1, d8
 800ec4a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ec4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ec52:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ec56:	4619      	mov	r1, r3
 800ec58:	2200      	movs	r2, #0
 800ec5a:	4b75      	ldr	r3, [pc, #468]	; (800ee30 <_dtoa_r+0x300>)
 800ec5c:	f7f1 fb14 	bl	8000288 <__aeabi_dsub>
 800ec60:	a367      	add	r3, pc, #412	; (adr r3, 800ee00 <_dtoa_r+0x2d0>)
 800ec62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec66:	f7f1 fcc7 	bl	80005f8 <__aeabi_dmul>
 800ec6a:	a367      	add	r3, pc, #412	; (adr r3, 800ee08 <_dtoa_r+0x2d8>)
 800ec6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec70:	f7f1 fb0c 	bl	800028c <__adddf3>
 800ec74:	4606      	mov	r6, r0
 800ec76:	4628      	mov	r0, r5
 800ec78:	460f      	mov	r7, r1
 800ec7a:	f7f1 fc53 	bl	8000524 <__aeabi_i2d>
 800ec7e:	a364      	add	r3, pc, #400	; (adr r3, 800ee10 <_dtoa_r+0x2e0>)
 800ec80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec84:	f7f1 fcb8 	bl	80005f8 <__aeabi_dmul>
 800ec88:	4602      	mov	r2, r0
 800ec8a:	460b      	mov	r3, r1
 800ec8c:	4630      	mov	r0, r6
 800ec8e:	4639      	mov	r1, r7
 800ec90:	f7f1 fafc 	bl	800028c <__adddf3>
 800ec94:	4606      	mov	r6, r0
 800ec96:	460f      	mov	r7, r1
 800ec98:	f7f1 ff5e 	bl	8000b58 <__aeabi_d2iz>
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	4683      	mov	fp, r0
 800eca0:	2300      	movs	r3, #0
 800eca2:	4630      	mov	r0, r6
 800eca4:	4639      	mov	r1, r7
 800eca6:	f7f1 ff19 	bl	8000adc <__aeabi_dcmplt>
 800ecaa:	b148      	cbz	r0, 800ecc0 <_dtoa_r+0x190>
 800ecac:	4658      	mov	r0, fp
 800ecae:	f7f1 fc39 	bl	8000524 <__aeabi_i2d>
 800ecb2:	4632      	mov	r2, r6
 800ecb4:	463b      	mov	r3, r7
 800ecb6:	f7f1 ff07 	bl	8000ac8 <__aeabi_dcmpeq>
 800ecba:	b908      	cbnz	r0, 800ecc0 <_dtoa_r+0x190>
 800ecbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ecc0:	f1bb 0f16 	cmp.w	fp, #22
 800ecc4:	d857      	bhi.n	800ed76 <_dtoa_r+0x246>
 800ecc6:	4b5b      	ldr	r3, [pc, #364]	; (800ee34 <_dtoa_r+0x304>)
 800ecc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800eccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd0:	ec51 0b18 	vmov	r0, r1, d8
 800ecd4:	f7f1 ff02 	bl	8000adc <__aeabi_dcmplt>
 800ecd8:	2800      	cmp	r0, #0
 800ecda:	d04e      	beq.n	800ed7a <_dtoa_r+0x24a>
 800ecdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ece0:	2300      	movs	r3, #0
 800ece2:	930c      	str	r3, [sp, #48]	; 0x30
 800ece4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ece6:	1b5b      	subs	r3, r3, r5
 800ece8:	1e5a      	subs	r2, r3, #1
 800ecea:	bf45      	ittet	mi
 800ecec:	f1c3 0301 	rsbmi	r3, r3, #1
 800ecf0:	9305      	strmi	r3, [sp, #20]
 800ecf2:	2300      	movpl	r3, #0
 800ecf4:	2300      	movmi	r3, #0
 800ecf6:	9206      	str	r2, [sp, #24]
 800ecf8:	bf54      	ite	pl
 800ecfa:	9305      	strpl	r3, [sp, #20]
 800ecfc:	9306      	strmi	r3, [sp, #24]
 800ecfe:	f1bb 0f00 	cmp.w	fp, #0
 800ed02:	db3c      	blt.n	800ed7e <_dtoa_r+0x24e>
 800ed04:	9b06      	ldr	r3, [sp, #24]
 800ed06:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ed0a:	445b      	add	r3, fp
 800ed0c:	9306      	str	r3, [sp, #24]
 800ed0e:	2300      	movs	r3, #0
 800ed10:	9308      	str	r3, [sp, #32]
 800ed12:	9b07      	ldr	r3, [sp, #28]
 800ed14:	2b09      	cmp	r3, #9
 800ed16:	d868      	bhi.n	800edea <_dtoa_r+0x2ba>
 800ed18:	2b05      	cmp	r3, #5
 800ed1a:	bfc4      	itt	gt
 800ed1c:	3b04      	subgt	r3, #4
 800ed1e:	9307      	strgt	r3, [sp, #28]
 800ed20:	9b07      	ldr	r3, [sp, #28]
 800ed22:	f1a3 0302 	sub.w	r3, r3, #2
 800ed26:	bfcc      	ite	gt
 800ed28:	2500      	movgt	r5, #0
 800ed2a:	2501      	movle	r5, #1
 800ed2c:	2b03      	cmp	r3, #3
 800ed2e:	f200 8085 	bhi.w	800ee3c <_dtoa_r+0x30c>
 800ed32:	e8df f003 	tbb	[pc, r3]
 800ed36:	3b2e      	.short	0x3b2e
 800ed38:	5839      	.short	0x5839
 800ed3a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ed3e:	441d      	add	r5, r3
 800ed40:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ed44:	2b20      	cmp	r3, #32
 800ed46:	bfc1      	itttt	gt
 800ed48:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ed4c:	fa08 f803 	lslgt.w	r8, r8, r3
 800ed50:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ed54:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ed58:	bfd6      	itet	le
 800ed5a:	f1c3 0320 	rsble	r3, r3, #32
 800ed5e:	ea48 0003 	orrgt.w	r0, r8, r3
 800ed62:	fa06 f003 	lslle.w	r0, r6, r3
 800ed66:	f7f1 fbcd 	bl	8000504 <__aeabi_ui2d>
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ed70:	3d01      	subs	r5, #1
 800ed72:	920e      	str	r2, [sp, #56]	; 0x38
 800ed74:	e76f      	b.n	800ec56 <_dtoa_r+0x126>
 800ed76:	2301      	movs	r3, #1
 800ed78:	e7b3      	b.n	800ece2 <_dtoa_r+0x1b2>
 800ed7a:	900c      	str	r0, [sp, #48]	; 0x30
 800ed7c:	e7b2      	b.n	800ece4 <_dtoa_r+0x1b4>
 800ed7e:	9b05      	ldr	r3, [sp, #20]
 800ed80:	eba3 030b 	sub.w	r3, r3, fp
 800ed84:	9305      	str	r3, [sp, #20]
 800ed86:	f1cb 0300 	rsb	r3, fp, #0
 800ed8a:	9308      	str	r3, [sp, #32]
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed90:	e7bf      	b.n	800ed12 <_dtoa_r+0x1e2>
 800ed92:	2300      	movs	r3, #0
 800ed94:	9309      	str	r3, [sp, #36]	; 0x24
 800ed96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	dc52      	bgt.n	800ee42 <_dtoa_r+0x312>
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	9301      	str	r3, [sp, #4]
 800eda0:	9304      	str	r3, [sp, #16]
 800eda2:	461a      	mov	r2, r3
 800eda4:	920a      	str	r2, [sp, #40]	; 0x28
 800eda6:	e00b      	b.n	800edc0 <_dtoa_r+0x290>
 800eda8:	2301      	movs	r3, #1
 800edaa:	e7f3      	b.n	800ed94 <_dtoa_r+0x264>
 800edac:	2300      	movs	r3, #0
 800edae:	9309      	str	r3, [sp, #36]	; 0x24
 800edb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edb2:	445b      	add	r3, fp
 800edb4:	9301      	str	r3, [sp, #4]
 800edb6:	3301      	adds	r3, #1
 800edb8:	2b01      	cmp	r3, #1
 800edba:	9304      	str	r3, [sp, #16]
 800edbc:	bfb8      	it	lt
 800edbe:	2301      	movlt	r3, #1
 800edc0:	69e0      	ldr	r0, [r4, #28]
 800edc2:	2100      	movs	r1, #0
 800edc4:	2204      	movs	r2, #4
 800edc6:	f102 0614 	add.w	r6, r2, #20
 800edca:	429e      	cmp	r6, r3
 800edcc:	d93d      	bls.n	800ee4a <_dtoa_r+0x31a>
 800edce:	6041      	str	r1, [r0, #4]
 800edd0:	4620      	mov	r0, r4
 800edd2:	f001 f855 	bl	800fe80 <_Balloc>
 800edd6:	9000      	str	r0, [sp, #0]
 800edd8:	2800      	cmp	r0, #0
 800edda:	d139      	bne.n	800ee50 <_dtoa_r+0x320>
 800eddc:	4b16      	ldr	r3, [pc, #88]	; (800ee38 <_dtoa_r+0x308>)
 800edde:	4602      	mov	r2, r0
 800ede0:	f240 11af 	movw	r1, #431	; 0x1af
 800ede4:	e6bd      	b.n	800eb62 <_dtoa_r+0x32>
 800ede6:	2301      	movs	r3, #1
 800ede8:	e7e1      	b.n	800edae <_dtoa_r+0x27e>
 800edea:	2501      	movs	r5, #1
 800edec:	2300      	movs	r3, #0
 800edee:	9307      	str	r3, [sp, #28]
 800edf0:	9509      	str	r5, [sp, #36]	; 0x24
 800edf2:	f04f 33ff 	mov.w	r3, #4294967295
 800edf6:	9301      	str	r3, [sp, #4]
 800edf8:	9304      	str	r3, [sp, #16]
 800edfa:	2200      	movs	r2, #0
 800edfc:	2312      	movs	r3, #18
 800edfe:	e7d1      	b.n	800eda4 <_dtoa_r+0x274>
 800ee00:	636f4361 	.word	0x636f4361
 800ee04:	3fd287a7 	.word	0x3fd287a7
 800ee08:	8b60c8b3 	.word	0x8b60c8b3
 800ee0c:	3fc68a28 	.word	0x3fc68a28
 800ee10:	509f79fb 	.word	0x509f79fb
 800ee14:	3fd34413 	.word	0x3fd34413
 800ee18:	08013afe 	.word	0x08013afe
 800ee1c:	08013b15 	.word	0x08013b15
 800ee20:	7ff00000 	.word	0x7ff00000
 800ee24:	08013afa 	.word	0x08013afa
 800ee28:	08013af1 	.word	0x08013af1
 800ee2c:	08013ac1 	.word	0x08013ac1
 800ee30:	3ff80000 	.word	0x3ff80000
 800ee34:	08013c60 	.word	0x08013c60
 800ee38:	08013b6d 	.word	0x08013b6d
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ee40:	e7d7      	b.n	800edf2 <_dtoa_r+0x2c2>
 800ee42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee44:	9301      	str	r3, [sp, #4]
 800ee46:	9304      	str	r3, [sp, #16]
 800ee48:	e7ba      	b.n	800edc0 <_dtoa_r+0x290>
 800ee4a:	3101      	adds	r1, #1
 800ee4c:	0052      	lsls	r2, r2, #1
 800ee4e:	e7ba      	b.n	800edc6 <_dtoa_r+0x296>
 800ee50:	69e3      	ldr	r3, [r4, #28]
 800ee52:	9a00      	ldr	r2, [sp, #0]
 800ee54:	601a      	str	r2, [r3, #0]
 800ee56:	9b04      	ldr	r3, [sp, #16]
 800ee58:	2b0e      	cmp	r3, #14
 800ee5a:	f200 80a8 	bhi.w	800efae <_dtoa_r+0x47e>
 800ee5e:	2d00      	cmp	r5, #0
 800ee60:	f000 80a5 	beq.w	800efae <_dtoa_r+0x47e>
 800ee64:	f1bb 0f00 	cmp.w	fp, #0
 800ee68:	dd38      	ble.n	800eedc <_dtoa_r+0x3ac>
 800ee6a:	4bc0      	ldr	r3, [pc, #768]	; (800f16c <_dtoa_r+0x63c>)
 800ee6c:	f00b 020f 	and.w	r2, fp, #15
 800ee70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee74:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ee78:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ee7c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ee80:	d019      	beq.n	800eeb6 <_dtoa_r+0x386>
 800ee82:	4bbb      	ldr	r3, [pc, #748]	; (800f170 <_dtoa_r+0x640>)
 800ee84:	ec51 0b18 	vmov	r0, r1, d8
 800ee88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ee8c:	f7f1 fcde 	bl	800084c <__aeabi_ddiv>
 800ee90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee94:	f008 080f 	and.w	r8, r8, #15
 800ee98:	2503      	movs	r5, #3
 800ee9a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800f170 <_dtoa_r+0x640>
 800ee9e:	f1b8 0f00 	cmp.w	r8, #0
 800eea2:	d10a      	bne.n	800eeba <_dtoa_r+0x38a>
 800eea4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eea8:	4632      	mov	r2, r6
 800eeaa:	463b      	mov	r3, r7
 800eeac:	f7f1 fcce 	bl	800084c <__aeabi_ddiv>
 800eeb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eeb4:	e02b      	b.n	800ef0e <_dtoa_r+0x3de>
 800eeb6:	2502      	movs	r5, #2
 800eeb8:	e7ef      	b.n	800ee9a <_dtoa_r+0x36a>
 800eeba:	f018 0f01 	tst.w	r8, #1
 800eebe:	d008      	beq.n	800eed2 <_dtoa_r+0x3a2>
 800eec0:	4630      	mov	r0, r6
 800eec2:	4639      	mov	r1, r7
 800eec4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800eec8:	f7f1 fb96 	bl	80005f8 <__aeabi_dmul>
 800eecc:	3501      	adds	r5, #1
 800eece:	4606      	mov	r6, r0
 800eed0:	460f      	mov	r7, r1
 800eed2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800eed6:	f109 0908 	add.w	r9, r9, #8
 800eeda:	e7e0      	b.n	800ee9e <_dtoa_r+0x36e>
 800eedc:	f000 809f 	beq.w	800f01e <_dtoa_r+0x4ee>
 800eee0:	f1cb 0600 	rsb	r6, fp, #0
 800eee4:	4ba1      	ldr	r3, [pc, #644]	; (800f16c <_dtoa_r+0x63c>)
 800eee6:	4fa2      	ldr	r7, [pc, #648]	; (800f170 <_dtoa_r+0x640>)
 800eee8:	f006 020f 	and.w	r2, r6, #15
 800eeec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef4:	ec51 0b18 	vmov	r0, r1, d8
 800eef8:	f7f1 fb7e 	bl	80005f8 <__aeabi_dmul>
 800eefc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef00:	1136      	asrs	r6, r6, #4
 800ef02:	2300      	movs	r3, #0
 800ef04:	2502      	movs	r5, #2
 800ef06:	2e00      	cmp	r6, #0
 800ef08:	d17e      	bne.n	800f008 <_dtoa_r+0x4d8>
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d1d0      	bne.n	800eeb0 <_dtoa_r+0x380>
 800ef0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef10:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	f000 8084 	beq.w	800f022 <_dtoa_r+0x4f2>
 800ef1a:	4b96      	ldr	r3, [pc, #600]	; (800f174 <_dtoa_r+0x644>)
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	4640      	mov	r0, r8
 800ef20:	4649      	mov	r1, r9
 800ef22:	f7f1 fddb 	bl	8000adc <__aeabi_dcmplt>
 800ef26:	2800      	cmp	r0, #0
 800ef28:	d07b      	beq.n	800f022 <_dtoa_r+0x4f2>
 800ef2a:	9b04      	ldr	r3, [sp, #16]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d078      	beq.n	800f022 <_dtoa_r+0x4f2>
 800ef30:	9b01      	ldr	r3, [sp, #4]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	dd39      	ble.n	800efaa <_dtoa_r+0x47a>
 800ef36:	4b90      	ldr	r3, [pc, #576]	; (800f178 <_dtoa_r+0x648>)
 800ef38:	2200      	movs	r2, #0
 800ef3a:	4640      	mov	r0, r8
 800ef3c:	4649      	mov	r1, r9
 800ef3e:	f7f1 fb5b 	bl	80005f8 <__aeabi_dmul>
 800ef42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef46:	9e01      	ldr	r6, [sp, #4]
 800ef48:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ef4c:	3501      	adds	r5, #1
 800ef4e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ef52:	4628      	mov	r0, r5
 800ef54:	f7f1 fae6 	bl	8000524 <__aeabi_i2d>
 800ef58:	4642      	mov	r2, r8
 800ef5a:	464b      	mov	r3, r9
 800ef5c:	f7f1 fb4c 	bl	80005f8 <__aeabi_dmul>
 800ef60:	4b86      	ldr	r3, [pc, #536]	; (800f17c <_dtoa_r+0x64c>)
 800ef62:	2200      	movs	r2, #0
 800ef64:	f7f1 f992 	bl	800028c <__adddf3>
 800ef68:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ef6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef70:	9303      	str	r3, [sp, #12]
 800ef72:	2e00      	cmp	r6, #0
 800ef74:	d158      	bne.n	800f028 <_dtoa_r+0x4f8>
 800ef76:	4b82      	ldr	r3, [pc, #520]	; (800f180 <_dtoa_r+0x650>)
 800ef78:	2200      	movs	r2, #0
 800ef7a:	4640      	mov	r0, r8
 800ef7c:	4649      	mov	r1, r9
 800ef7e:	f7f1 f983 	bl	8000288 <__aeabi_dsub>
 800ef82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef86:	4680      	mov	r8, r0
 800ef88:	4689      	mov	r9, r1
 800ef8a:	f7f1 fdc5 	bl	8000b18 <__aeabi_dcmpgt>
 800ef8e:	2800      	cmp	r0, #0
 800ef90:	f040 8296 	bne.w	800f4c0 <_dtoa_r+0x990>
 800ef94:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ef98:	4640      	mov	r0, r8
 800ef9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef9e:	4649      	mov	r1, r9
 800efa0:	f7f1 fd9c 	bl	8000adc <__aeabi_dcmplt>
 800efa4:	2800      	cmp	r0, #0
 800efa6:	f040 8289 	bne.w	800f4bc <_dtoa_r+0x98c>
 800efaa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800efae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	f2c0 814e 	blt.w	800f252 <_dtoa_r+0x722>
 800efb6:	f1bb 0f0e 	cmp.w	fp, #14
 800efba:	f300 814a 	bgt.w	800f252 <_dtoa_r+0x722>
 800efbe:	4b6b      	ldr	r3, [pc, #428]	; (800f16c <_dtoa_r+0x63c>)
 800efc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800efc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800efc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efca:	2b00      	cmp	r3, #0
 800efcc:	f280 80dc 	bge.w	800f188 <_dtoa_r+0x658>
 800efd0:	9b04      	ldr	r3, [sp, #16]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	f300 80d8 	bgt.w	800f188 <_dtoa_r+0x658>
 800efd8:	f040 826f 	bne.w	800f4ba <_dtoa_r+0x98a>
 800efdc:	4b68      	ldr	r3, [pc, #416]	; (800f180 <_dtoa_r+0x650>)
 800efde:	2200      	movs	r2, #0
 800efe0:	4640      	mov	r0, r8
 800efe2:	4649      	mov	r1, r9
 800efe4:	f7f1 fb08 	bl	80005f8 <__aeabi_dmul>
 800efe8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800efec:	f7f1 fd8a 	bl	8000b04 <__aeabi_dcmpge>
 800eff0:	9e04      	ldr	r6, [sp, #16]
 800eff2:	4637      	mov	r7, r6
 800eff4:	2800      	cmp	r0, #0
 800eff6:	f040 8245 	bne.w	800f484 <_dtoa_r+0x954>
 800effa:	9d00      	ldr	r5, [sp, #0]
 800effc:	2331      	movs	r3, #49	; 0x31
 800effe:	f805 3b01 	strb.w	r3, [r5], #1
 800f002:	f10b 0b01 	add.w	fp, fp, #1
 800f006:	e241      	b.n	800f48c <_dtoa_r+0x95c>
 800f008:	07f2      	lsls	r2, r6, #31
 800f00a:	d505      	bpl.n	800f018 <_dtoa_r+0x4e8>
 800f00c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f010:	f7f1 faf2 	bl	80005f8 <__aeabi_dmul>
 800f014:	3501      	adds	r5, #1
 800f016:	2301      	movs	r3, #1
 800f018:	1076      	asrs	r6, r6, #1
 800f01a:	3708      	adds	r7, #8
 800f01c:	e773      	b.n	800ef06 <_dtoa_r+0x3d6>
 800f01e:	2502      	movs	r5, #2
 800f020:	e775      	b.n	800ef0e <_dtoa_r+0x3de>
 800f022:	9e04      	ldr	r6, [sp, #16]
 800f024:	465f      	mov	r7, fp
 800f026:	e792      	b.n	800ef4e <_dtoa_r+0x41e>
 800f028:	9900      	ldr	r1, [sp, #0]
 800f02a:	4b50      	ldr	r3, [pc, #320]	; (800f16c <_dtoa_r+0x63c>)
 800f02c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f030:	4431      	add	r1, r6
 800f032:	9102      	str	r1, [sp, #8]
 800f034:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f036:	eeb0 9a47 	vmov.f32	s18, s14
 800f03a:	eef0 9a67 	vmov.f32	s19, s15
 800f03e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f042:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f046:	2900      	cmp	r1, #0
 800f048:	d044      	beq.n	800f0d4 <_dtoa_r+0x5a4>
 800f04a:	494e      	ldr	r1, [pc, #312]	; (800f184 <_dtoa_r+0x654>)
 800f04c:	2000      	movs	r0, #0
 800f04e:	f7f1 fbfd 	bl	800084c <__aeabi_ddiv>
 800f052:	ec53 2b19 	vmov	r2, r3, d9
 800f056:	f7f1 f917 	bl	8000288 <__aeabi_dsub>
 800f05a:	9d00      	ldr	r5, [sp, #0]
 800f05c:	ec41 0b19 	vmov	d9, r0, r1
 800f060:	4649      	mov	r1, r9
 800f062:	4640      	mov	r0, r8
 800f064:	f7f1 fd78 	bl	8000b58 <__aeabi_d2iz>
 800f068:	4606      	mov	r6, r0
 800f06a:	f7f1 fa5b 	bl	8000524 <__aeabi_i2d>
 800f06e:	4602      	mov	r2, r0
 800f070:	460b      	mov	r3, r1
 800f072:	4640      	mov	r0, r8
 800f074:	4649      	mov	r1, r9
 800f076:	f7f1 f907 	bl	8000288 <__aeabi_dsub>
 800f07a:	3630      	adds	r6, #48	; 0x30
 800f07c:	f805 6b01 	strb.w	r6, [r5], #1
 800f080:	ec53 2b19 	vmov	r2, r3, d9
 800f084:	4680      	mov	r8, r0
 800f086:	4689      	mov	r9, r1
 800f088:	f7f1 fd28 	bl	8000adc <__aeabi_dcmplt>
 800f08c:	2800      	cmp	r0, #0
 800f08e:	d164      	bne.n	800f15a <_dtoa_r+0x62a>
 800f090:	4642      	mov	r2, r8
 800f092:	464b      	mov	r3, r9
 800f094:	4937      	ldr	r1, [pc, #220]	; (800f174 <_dtoa_r+0x644>)
 800f096:	2000      	movs	r0, #0
 800f098:	f7f1 f8f6 	bl	8000288 <__aeabi_dsub>
 800f09c:	ec53 2b19 	vmov	r2, r3, d9
 800f0a0:	f7f1 fd1c 	bl	8000adc <__aeabi_dcmplt>
 800f0a4:	2800      	cmp	r0, #0
 800f0a6:	f040 80b6 	bne.w	800f216 <_dtoa_r+0x6e6>
 800f0aa:	9b02      	ldr	r3, [sp, #8]
 800f0ac:	429d      	cmp	r5, r3
 800f0ae:	f43f af7c 	beq.w	800efaa <_dtoa_r+0x47a>
 800f0b2:	4b31      	ldr	r3, [pc, #196]	; (800f178 <_dtoa_r+0x648>)
 800f0b4:	ec51 0b19 	vmov	r0, r1, d9
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	f7f1 fa9d 	bl	80005f8 <__aeabi_dmul>
 800f0be:	4b2e      	ldr	r3, [pc, #184]	; (800f178 <_dtoa_r+0x648>)
 800f0c0:	ec41 0b19 	vmov	d9, r0, r1
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	4640      	mov	r0, r8
 800f0c8:	4649      	mov	r1, r9
 800f0ca:	f7f1 fa95 	bl	80005f8 <__aeabi_dmul>
 800f0ce:	4680      	mov	r8, r0
 800f0d0:	4689      	mov	r9, r1
 800f0d2:	e7c5      	b.n	800f060 <_dtoa_r+0x530>
 800f0d4:	ec51 0b17 	vmov	r0, r1, d7
 800f0d8:	f7f1 fa8e 	bl	80005f8 <__aeabi_dmul>
 800f0dc:	9b02      	ldr	r3, [sp, #8]
 800f0de:	9d00      	ldr	r5, [sp, #0]
 800f0e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800f0e2:	ec41 0b19 	vmov	d9, r0, r1
 800f0e6:	4649      	mov	r1, r9
 800f0e8:	4640      	mov	r0, r8
 800f0ea:	f7f1 fd35 	bl	8000b58 <__aeabi_d2iz>
 800f0ee:	4606      	mov	r6, r0
 800f0f0:	f7f1 fa18 	bl	8000524 <__aeabi_i2d>
 800f0f4:	3630      	adds	r6, #48	; 0x30
 800f0f6:	4602      	mov	r2, r0
 800f0f8:	460b      	mov	r3, r1
 800f0fa:	4640      	mov	r0, r8
 800f0fc:	4649      	mov	r1, r9
 800f0fe:	f7f1 f8c3 	bl	8000288 <__aeabi_dsub>
 800f102:	f805 6b01 	strb.w	r6, [r5], #1
 800f106:	9b02      	ldr	r3, [sp, #8]
 800f108:	429d      	cmp	r5, r3
 800f10a:	4680      	mov	r8, r0
 800f10c:	4689      	mov	r9, r1
 800f10e:	f04f 0200 	mov.w	r2, #0
 800f112:	d124      	bne.n	800f15e <_dtoa_r+0x62e>
 800f114:	4b1b      	ldr	r3, [pc, #108]	; (800f184 <_dtoa_r+0x654>)
 800f116:	ec51 0b19 	vmov	r0, r1, d9
 800f11a:	f7f1 f8b7 	bl	800028c <__adddf3>
 800f11e:	4602      	mov	r2, r0
 800f120:	460b      	mov	r3, r1
 800f122:	4640      	mov	r0, r8
 800f124:	4649      	mov	r1, r9
 800f126:	f7f1 fcf7 	bl	8000b18 <__aeabi_dcmpgt>
 800f12a:	2800      	cmp	r0, #0
 800f12c:	d173      	bne.n	800f216 <_dtoa_r+0x6e6>
 800f12e:	ec53 2b19 	vmov	r2, r3, d9
 800f132:	4914      	ldr	r1, [pc, #80]	; (800f184 <_dtoa_r+0x654>)
 800f134:	2000      	movs	r0, #0
 800f136:	f7f1 f8a7 	bl	8000288 <__aeabi_dsub>
 800f13a:	4602      	mov	r2, r0
 800f13c:	460b      	mov	r3, r1
 800f13e:	4640      	mov	r0, r8
 800f140:	4649      	mov	r1, r9
 800f142:	f7f1 fccb 	bl	8000adc <__aeabi_dcmplt>
 800f146:	2800      	cmp	r0, #0
 800f148:	f43f af2f 	beq.w	800efaa <_dtoa_r+0x47a>
 800f14c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f14e:	1e6b      	subs	r3, r5, #1
 800f150:	930f      	str	r3, [sp, #60]	; 0x3c
 800f152:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f156:	2b30      	cmp	r3, #48	; 0x30
 800f158:	d0f8      	beq.n	800f14c <_dtoa_r+0x61c>
 800f15a:	46bb      	mov	fp, r7
 800f15c:	e04a      	b.n	800f1f4 <_dtoa_r+0x6c4>
 800f15e:	4b06      	ldr	r3, [pc, #24]	; (800f178 <_dtoa_r+0x648>)
 800f160:	f7f1 fa4a 	bl	80005f8 <__aeabi_dmul>
 800f164:	4680      	mov	r8, r0
 800f166:	4689      	mov	r9, r1
 800f168:	e7bd      	b.n	800f0e6 <_dtoa_r+0x5b6>
 800f16a:	bf00      	nop
 800f16c:	08013c60 	.word	0x08013c60
 800f170:	08013c38 	.word	0x08013c38
 800f174:	3ff00000 	.word	0x3ff00000
 800f178:	40240000 	.word	0x40240000
 800f17c:	401c0000 	.word	0x401c0000
 800f180:	40140000 	.word	0x40140000
 800f184:	3fe00000 	.word	0x3fe00000
 800f188:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f18c:	9d00      	ldr	r5, [sp, #0]
 800f18e:	4642      	mov	r2, r8
 800f190:	464b      	mov	r3, r9
 800f192:	4630      	mov	r0, r6
 800f194:	4639      	mov	r1, r7
 800f196:	f7f1 fb59 	bl	800084c <__aeabi_ddiv>
 800f19a:	f7f1 fcdd 	bl	8000b58 <__aeabi_d2iz>
 800f19e:	9001      	str	r0, [sp, #4]
 800f1a0:	f7f1 f9c0 	bl	8000524 <__aeabi_i2d>
 800f1a4:	4642      	mov	r2, r8
 800f1a6:	464b      	mov	r3, r9
 800f1a8:	f7f1 fa26 	bl	80005f8 <__aeabi_dmul>
 800f1ac:	4602      	mov	r2, r0
 800f1ae:	460b      	mov	r3, r1
 800f1b0:	4630      	mov	r0, r6
 800f1b2:	4639      	mov	r1, r7
 800f1b4:	f7f1 f868 	bl	8000288 <__aeabi_dsub>
 800f1b8:	9e01      	ldr	r6, [sp, #4]
 800f1ba:	9f04      	ldr	r7, [sp, #16]
 800f1bc:	3630      	adds	r6, #48	; 0x30
 800f1be:	f805 6b01 	strb.w	r6, [r5], #1
 800f1c2:	9e00      	ldr	r6, [sp, #0]
 800f1c4:	1bae      	subs	r6, r5, r6
 800f1c6:	42b7      	cmp	r7, r6
 800f1c8:	4602      	mov	r2, r0
 800f1ca:	460b      	mov	r3, r1
 800f1cc:	d134      	bne.n	800f238 <_dtoa_r+0x708>
 800f1ce:	f7f1 f85d 	bl	800028c <__adddf3>
 800f1d2:	4642      	mov	r2, r8
 800f1d4:	464b      	mov	r3, r9
 800f1d6:	4606      	mov	r6, r0
 800f1d8:	460f      	mov	r7, r1
 800f1da:	f7f1 fc9d 	bl	8000b18 <__aeabi_dcmpgt>
 800f1de:	b9c8      	cbnz	r0, 800f214 <_dtoa_r+0x6e4>
 800f1e0:	4642      	mov	r2, r8
 800f1e2:	464b      	mov	r3, r9
 800f1e4:	4630      	mov	r0, r6
 800f1e6:	4639      	mov	r1, r7
 800f1e8:	f7f1 fc6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800f1ec:	b110      	cbz	r0, 800f1f4 <_dtoa_r+0x6c4>
 800f1ee:	9b01      	ldr	r3, [sp, #4]
 800f1f0:	07db      	lsls	r3, r3, #31
 800f1f2:	d40f      	bmi.n	800f214 <_dtoa_r+0x6e4>
 800f1f4:	4651      	mov	r1, sl
 800f1f6:	4620      	mov	r0, r4
 800f1f8:	f000 fe82 	bl	800ff00 <_Bfree>
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f200:	702b      	strb	r3, [r5, #0]
 800f202:	f10b 0301 	add.w	r3, fp, #1
 800f206:	6013      	str	r3, [r2, #0]
 800f208:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	f43f ace2 	beq.w	800ebd4 <_dtoa_r+0xa4>
 800f210:	601d      	str	r5, [r3, #0]
 800f212:	e4df      	b.n	800ebd4 <_dtoa_r+0xa4>
 800f214:	465f      	mov	r7, fp
 800f216:	462b      	mov	r3, r5
 800f218:	461d      	mov	r5, r3
 800f21a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f21e:	2a39      	cmp	r2, #57	; 0x39
 800f220:	d106      	bne.n	800f230 <_dtoa_r+0x700>
 800f222:	9a00      	ldr	r2, [sp, #0]
 800f224:	429a      	cmp	r2, r3
 800f226:	d1f7      	bne.n	800f218 <_dtoa_r+0x6e8>
 800f228:	9900      	ldr	r1, [sp, #0]
 800f22a:	2230      	movs	r2, #48	; 0x30
 800f22c:	3701      	adds	r7, #1
 800f22e:	700a      	strb	r2, [r1, #0]
 800f230:	781a      	ldrb	r2, [r3, #0]
 800f232:	3201      	adds	r2, #1
 800f234:	701a      	strb	r2, [r3, #0]
 800f236:	e790      	b.n	800f15a <_dtoa_r+0x62a>
 800f238:	4ba3      	ldr	r3, [pc, #652]	; (800f4c8 <_dtoa_r+0x998>)
 800f23a:	2200      	movs	r2, #0
 800f23c:	f7f1 f9dc 	bl	80005f8 <__aeabi_dmul>
 800f240:	2200      	movs	r2, #0
 800f242:	2300      	movs	r3, #0
 800f244:	4606      	mov	r6, r0
 800f246:	460f      	mov	r7, r1
 800f248:	f7f1 fc3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800f24c:	2800      	cmp	r0, #0
 800f24e:	d09e      	beq.n	800f18e <_dtoa_r+0x65e>
 800f250:	e7d0      	b.n	800f1f4 <_dtoa_r+0x6c4>
 800f252:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f254:	2a00      	cmp	r2, #0
 800f256:	f000 80ca 	beq.w	800f3ee <_dtoa_r+0x8be>
 800f25a:	9a07      	ldr	r2, [sp, #28]
 800f25c:	2a01      	cmp	r2, #1
 800f25e:	f300 80ad 	bgt.w	800f3bc <_dtoa_r+0x88c>
 800f262:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f264:	2a00      	cmp	r2, #0
 800f266:	f000 80a5 	beq.w	800f3b4 <_dtoa_r+0x884>
 800f26a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f26e:	9e08      	ldr	r6, [sp, #32]
 800f270:	9d05      	ldr	r5, [sp, #20]
 800f272:	9a05      	ldr	r2, [sp, #20]
 800f274:	441a      	add	r2, r3
 800f276:	9205      	str	r2, [sp, #20]
 800f278:	9a06      	ldr	r2, [sp, #24]
 800f27a:	2101      	movs	r1, #1
 800f27c:	441a      	add	r2, r3
 800f27e:	4620      	mov	r0, r4
 800f280:	9206      	str	r2, [sp, #24]
 800f282:	f000 ff3d 	bl	8010100 <__i2b>
 800f286:	4607      	mov	r7, r0
 800f288:	b165      	cbz	r5, 800f2a4 <_dtoa_r+0x774>
 800f28a:	9b06      	ldr	r3, [sp, #24]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	dd09      	ble.n	800f2a4 <_dtoa_r+0x774>
 800f290:	42ab      	cmp	r3, r5
 800f292:	9a05      	ldr	r2, [sp, #20]
 800f294:	bfa8      	it	ge
 800f296:	462b      	movge	r3, r5
 800f298:	1ad2      	subs	r2, r2, r3
 800f29a:	9205      	str	r2, [sp, #20]
 800f29c:	9a06      	ldr	r2, [sp, #24]
 800f29e:	1aed      	subs	r5, r5, r3
 800f2a0:	1ad3      	subs	r3, r2, r3
 800f2a2:	9306      	str	r3, [sp, #24]
 800f2a4:	9b08      	ldr	r3, [sp, #32]
 800f2a6:	b1f3      	cbz	r3, 800f2e6 <_dtoa_r+0x7b6>
 800f2a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	f000 80a3 	beq.w	800f3f6 <_dtoa_r+0x8c6>
 800f2b0:	2e00      	cmp	r6, #0
 800f2b2:	dd10      	ble.n	800f2d6 <_dtoa_r+0x7a6>
 800f2b4:	4639      	mov	r1, r7
 800f2b6:	4632      	mov	r2, r6
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	f000 ffe1 	bl	8010280 <__pow5mult>
 800f2be:	4652      	mov	r2, sl
 800f2c0:	4601      	mov	r1, r0
 800f2c2:	4607      	mov	r7, r0
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	f000 ff31 	bl	801012c <__multiply>
 800f2ca:	4651      	mov	r1, sl
 800f2cc:	4680      	mov	r8, r0
 800f2ce:	4620      	mov	r0, r4
 800f2d0:	f000 fe16 	bl	800ff00 <_Bfree>
 800f2d4:	46c2      	mov	sl, r8
 800f2d6:	9b08      	ldr	r3, [sp, #32]
 800f2d8:	1b9a      	subs	r2, r3, r6
 800f2da:	d004      	beq.n	800f2e6 <_dtoa_r+0x7b6>
 800f2dc:	4651      	mov	r1, sl
 800f2de:	4620      	mov	r0, r4
 800f2e0:	f000 ffce 	bl	8010280 <__pow5mult>
 800f2e4:	4682      	mov	sl, r0
 800f2e6:	2101      	movs	r1, #1
 800f2e8:	4620      	mov	r0, r4
 800f2ea:	f000 ff09 	bl	8010100 <__i2b>
 800f2ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	4606      	mov	r6, r0
 800f2f4:	f340 8081 	ble.w	800f3fa <_dtoa_r+0x8ca>
 800f2f8:	461a      	mov	r2, r3
 800f2fa:	4601      	mov	r1, r0
 800f2fc:	4620      	mov	r0, r4
 800f2fe:	f000 ffbf 	bl	8010280 <__pow5mult>
 800f302:	9b07      	ldr	r3, [sp, #28]
 800f304:	2b01      	cmp	r3, #1
 800f306:	4606      	mov	r6, r0
 800f308:	dd7a      	ble.n	800f400 <_dtoa_r+0x8d0>
 800f30a:	f04f 0800 	mov.w	r8, #0
 800f30e:	6933      	ldr	r3, [r6, #16]
 800f310:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f314:	6918      	ldr	r0, [r3, #16]
 800f316:	f000 fea5 	bl	8010064 <__hi0bits>
 800f31a:	f1c0 0020 	rsb	r0, r0, #32
 800f31e:	9b06      	ldr	r3, [sp, #24]
 800f320:	4418      	add	r0, r3
 800f322:	f010 001f 	ands.w	r0, r0, #31
 800f326:	f000 8094 	beq.w	800f452 <_dtoa_r+0x922>
 800f32a:	f1c0 0320 	rsb	r3, r0, #32
 800f32e:	2b04      	cmp	r3, #4
 800f330:	f340 8085 	ble.w	800f43e <_dtoa_r+0x90e>
 800f334:	9b05      	ldr	r3, [sp, #20]
 800f336:	f1c0 001c 	rsb	r0, r0, #28
 800f33a:	4403      	add	r3, r0
 800f33c:	9305      	str	r3, [sp, #20]
 800f33e:	9b06      	ldr	r3, [sp, #24]
 800f340:	4403      	add	r3, r0
 800f342:	4405      	add	r5, r0
 800f344:	9306      	str	r3, [sp, #24]
 800f346:	9b05      	ldr	r3, [sp, #20]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	dd05      	ble.n	800f358 <_dtoa_r+0x828>
 800f34c:	4651      	mov	r1, sl
 800f34e:	461a      	mov	r2, r3
 800f350:	4620      	mov	r0, r4
 800f352:	f000 ffef 	bl	8010334 <__lshift>
 800f356:	4682      	mov	sl, r0
 800f358:	9b06      	ldr	r3, [sp, #24]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	dd05      	ble.n	800f36a <_dtoa_r+0x83a>
 800f35e:	4631      	mov	r1, r6
 800f360:	461a      	mov	r2, r3
 800f362:	4620      	mov	r0, r4
 800f364:	f000 ffe6 	bl	8010334 <__lshift>
 800f368:	4606      	mov	r6, r0
 800f36a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d072      	beq.n	800f456 <_dtoa_r+0x926>
 800f370:	4631      	mov	r1, r6
 800f372:	4650      	mov	r0, sl
 800f374:	f001 f84a 	bl	801040c <__mcmp>
 800f378:	2800      	cmp	r0, #0
 800f37a:	da6c      	bge.n	800f456 <_dtoa_r+0x926>
 800f37c:	2300      	movs	r3, #0
 800f37e:	4651      	mov	r1, sl
 800f380:	220a      	movs	r2, #10
 800f382:	4620      	mov	r0, r4
 800f384:	f000 fdde 	bl	800ff44 <__multadd>
 800f388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f38a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f38e:	4682      	mov	sl, r0
 800f390:	2b00      	cmp	r3, #0
 800f392:	f000 81b0 	beq.w	800f6f6 <_dtoa_r+0xbc6>
 800f396:	2300      	movs	r3, #0
 800f398:	4639      	mov	r1, r7
 800f39a:	220a      	movs	r2, #10
 800f39c:	4620      	mov	r0, r4
 800f39e:	f000 fdd1 	bl	800ff44 <__multadd>
 800f3a2:	9b01      	ldr	r3, [sp, #4]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	4607      	mov	r7, r0
 800f3a8:	f300 8096 	bgt.w	800f4d8 <_dtoa_r+0x9a8>
 800f3ac:	9b07      	ldr	r3, [sp, #28]
 800f3ae:	2b02      	cmp	r3, #2
 800f3b0:	dc59      	bgt.n	800f466 <_dtoa_r+0x936>
 800f3b2:	e091      	b.n	800f4d8 <_dtoa_r+0x9a8>
 800f3b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f3b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f3ba:	e758      	b.n	800f26e <_dtoa_r+0x73e>
 800f3bc:	9b04      	ldr	r3, [sp, #16]
 800f3be:	1e5e      	subs	r6, r3, #1
 800f3c0:	9b08      	ldr	r3, [sp, #32]
 800f3c2:	42b3      	cmp	r3, r6
 800f3c4:	bfbf      	itttt	lt
 800f3c6:	9b08      	ldrlt	r3, [sp, #32]
 800f3c8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f3ca:	9608      	strlt	r6, [sp, #32]
 800f3cc:	1af3      	sublt	r3, r6, r3
 800f3ce:	bfb4      	ite	lt
 800f3d0:	18d2      	addlt	r2, r2, r3
 800f3d2:	1b9e      	subge	r6, r3, r6
 800f3d4:	9b04      	ldr	r3, [sp, #16]
 800f3d6:	bfbc      	itt	lt
 800f3d8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f3da:	2600      	movlt	r6, #0
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	bfb7      	itett	lt
 800f3e0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f3e4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f3e8:	1a9d      	sublt	r5, r3, r2
 800f3ea:	2300      	movlt	r3, #0
 800f3ec:	e741      	b.n	800f272 <_dtoa_r+0x742>
 800f3ee:	9e08      	ldr	r6, [sp, #32]
 800f3f0:	9d05      	ldr	r5, [sp, #20]
 800f3f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f3f4:	e748      	b.n	800f288 <_dtoa_r+0x758>
 800f3f6:	9a08      	ldr	r2, [sp, #32]
 800f3f8:	e770      	b.n	800f2dc <_dtoa_r+0x7ac>
 800f3fa:	9b07      	ldr	r3, [sp, #28]
 800f3fc:	2b01      	cmp	r3, #1
 800f3fe:	dc19      	bgt.n	800f434 <_dtoa_r+0x904>
 800f400:	9b02      	ldr	r3, [sp, #8]
 800f402:	b9bb      	cbnz	r3, 800f434 <_dtoa_r+0x904>
 800f404:	9b03      	ldr	r3, [sp, #12]
 800f406:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f40a:	b99b      	cbnz	r3, 800f434 <_dtoa_r+0x904>
 800f40c:	9b03      	ldr	r3, [sp, #12]
 800f40e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f412:	0d1b      	lsrs	r3, r3, #20
 800f414:	051b      	lsls	r3, r3, #20
 800f416:	b183      	cbz	r3, 800f43a <_dtoa_r+0x90a>
 800f418:	9b05      	ldr	r3, [sp, #20]
 800f41a:	3301      	adds	r3, #1
 800f41c:	9305      	str	r3, [sp, #20]
 800f41e:	9b06      	ldr	r3, [sp, #24]
 800f420:	3301      	adds	r3, #1
 800f422:	9306      	str	r3, [sp, #24]
 800f424:	f04f 0801 	mov.w	r8, #1
 800f428:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	f47f af6f 	bne.w	800f30e <_dtoa_r+0x7de>
 800f430:	2001      	movs	r0, #1
 800f432:	e774      	b.n	800f31e <_dtoa_r+0x7ee>
 800f434:	f04f 0800 	mov.w	r8, #0
 800f438:	e7f6      	b.n	800f428 <_dtoa_r+0x8f8>
 800f43a:	4698      	mov	r8, r3
 800f43c:	e7f4      	b.n	800f428 <_dtoa_r+0x8f8>
 800f43e:	d082      	beq.n	800f346 <_dtoa_r+0x816>
 800f440:	9a05      	ldr	r2, [sp, #20]
 800f442:	331c      	adds	r3, #28
 800f444:	441a      	add	r2, r3
 800f446:	9205      	str	r2, [sp, #20]
 800f448:	9a06      	ldr	r2, [sp, #24]
 800f44a:	441a      	add	r2, r3
 800f44c:	441d      	add	r5, r3
 800f44e:	9206      	str	r2, [sp, #24]
 800f450:	e779      	b.n	800f346 <_dtoa_r+0x816>
 800f452:	4603      	mov	r3, r0
 800f454:	e7f4      	b.n	800f440 <_dtoa_r+0x910>
 800f456:	9b04      	ldr	r3, [sp, #16]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	dc37      	bgt.n	800f4cc <_dtoa_r+0x99c>
 800f45c:	9b07      	ldr	r3, [sp, #28]
 800f45e:	2b02      	cmp	r3, #2
 800f460:	dd34      	ble.n	800f4cc <_dtoa_r+0x99c>
 800f462:	9b04      	ldr	r3, [sp, #16]
 800f464:	9301      	str	r3, [sp, #4]
 800f466:	9b01      	ldr	r3, [sp, #4]
 800f468:	b963      	cbnz	r3, 800f484 <_dtoa_r+0x954>
 800f46a:	4631      	mov	r1, r6
 800f46c:	2205      	movs	r2, #5
 800f46e:	4620      	mov	r0, r4
 800f470:	f000 fd68 	bl	800ff44 <__multadd>
 800f474:	4601      	mov	r1, r0
 800f476:	4606      	mov	r6, r0
 800f478:	4650      	mov	r0, sl
 800f47a:	f000 ffc7 	bl	801040c <__mcmp>
 800f47e:	2800      	cmp	r0, #0
 800f480:	f73f adbb 	bgt.w	800effa <_dtoa_r+0x4ca>
 800f484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f486:	9d00      	ldr	r5, [sp, #0]
 800f488:	ea6f 0b03 	mvn.w	fp, r3
 800f48c:	f04f 0800 	mov.w	r8, #0
 800f490:	4631      	mov	r1, r6
 800f492:	4620      	mov	r0, r4
 800f494:	f000 fd34 	bl	800ff00 <_Bfree>
 800f498:	2f00      	cmp	r7, #0
 800f49a:	f43f aeab 	beq.w	800f1f4 <_dtoa_r+0x6c4>
 800f49e:	f1b8 0f00 	cmp.w	r8, #0
 800f4a2:	d005      	beq.n	800f4b0 <_dtoa_r+0x980>
 800f4a4:	45b8      	cmp	r8, r7
 800f4a6:	d003      	beq.n	800f4b0 <_dtoa_r+0x980>
 800f4a8:	4641      	mov	r1, r8
 800f4aa:	4620      	mov	r0, r4
 800f4ac:	f000 fd28 	bl	800ff00 <_Bfree>
 800f4b0:	4639      	mov	r1, r7
 800f4b2:	4620      	mov	r0, r4
 800f4b4:	f000 fd24 	bl	800ff00 <_Bfree>
 800f4b8:	e69c      	b.n	800f1f4 <_dtoa_r+0x6c4>
 800f4ba:	2600      	movs	r6, #0
 800f4bc:	4637      	mov	r7, r6
 800f4be:	e7e1      	b.n	800f484 <_dtoa_r+0x954>
 800f4c0:	46bb      	mov	fp, r7
 800f4c2:	4637      	mov	r7, r6
 800f4c4:	e599      	b.n	800effa <_dtoa_r+0x4ca>
 800f4c6:	bf00      	nop
 800f4c8:	40240000 	.word	0x40240000
 800f4cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	f000 80c8 	beq.w	800f664 <_dtoa_r+0xb34>
 800f4d4:	9b04      	ldr	r3, [sp, #16]
 800f4d6:	9301      	str	r3, [sp, #4]
 800f4d8:	2d00      	cmp	r5, #0
 800f4da:	dd05      	ble.n	800f4e8 <_dtoa_r+0x9b8>
 800f4dc:	4639      	mov	r1, r7
 800f4de:	462a      	mov	r2, r5
 800f4e0:	4620      	mov	r0, r4
 800f4e2:	f000 ff27 	bl	8010334 <__lshift>
 800f4e6:	4607      	mov	r7, r0
 800f4e8:	f1b8 0f00 	cmp.w	r8, #0
 800f4ec:	d05b      	beq.n	800f5a6 <_dtoa_r+0xa76>
 800f4ee:	6879      	ldr	r1, [r7, #4]
 800f4f0:	4620      	mov	r0, r4
 800f4f2:	f000 fcc5 	bl	800fe80 <_Balloc>
 800f4f6:	4605      	mov	r5, r0
 800f4f8:	b928      	cbnz	r0, 800f506 <_dtoa_r+0x9d6>
 800f4fa:	4b83      	ldr	r3, [pc, #524]	; (800f708 <_dtoa_r+0xbd8>)
 800f4fc:	4602      	mov	r2, r0
 800f4fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f502:	f7ff bb2e 	b.w	800eb62 <_dtoa_r+0x32>
 800f506:	693a      	ldr	r2, [r7, #16]
 800f508:	3202      	adds	r2, #2
 800f50a:	0092      	lsls	r2, r2, #2
 800f50c:	f107 010c 	add.w	r1, r7, #12
 800f510:	300c      	adds	r0, #12
 800f512:	f7ff fa64 	bl	800e9de <memcpy>
 800f516:	2201      	movs	r2, #1
 800f518:	4629      	mov	r1, r5
 800f51a:	4620      	mov	r0, r4
 800f51c:	f000 ff0a 	bl	8010334 <__lshift>
 800f520:	9b00      	ldr	r3, [sp, #0]
 800f522:	3301      	adds	r3, #1
 800f524:	9304      	str	r3, [sp, #16]
 800f526:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f52a:	4413      	add	r3, r2
 800f52c:	9308      	str	r3, [sp, #32]
 800f52e:	9b02      	ldr	r3, [sp, #8]
 800f530:	f003 0301 	and.w	r3, r3, #1
 800f534:	46b8      	mov	r8, r7
 800f536:	9306      	str	r3, [sp, #24]
 800f538:	4607      	mov	r7, r0
 800f53a:	9b04      	ldr	r3, [sp, #16]
 800f53c:	4631      	mov	r1, r6
 800f53e:	3b01      	subs	r3, #1
 800f540:	4650      	mov	r0, sl
 800f542:	9301      	str	r3, [sp, #4]
 800f544:	f7ff fa6a 	bl	800ea1c <quorem>
 800f548:	4641      	mov	r1, r8
 800f54a:	9002      	str	r0, [sp, #8]
 800f54c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f550:	4650      	mov	r0, sl
 800f552:	f000 ff5b 	bl	801040c <__mcmp>
 800f556:	463a      	mov	r2, r7
 800f558:	9005      	str	r0, [sp, #20]
 800f55a:	4631      	mov	r1, r6
 800f55c:	4620      	mov	r0, r4
 800f55e:	f000 ff71 	bl	8010444 <__mdiff>
 800f562:	68c2      	ldr	r2, [r0, #12]
 800f564:	4605      	mov	r5, r0
 800f566:	bb02      	cbnz	r2, 800f5aa <_dtoa_r+0xa7a>
 800f568:	4601      	mov	r1, r0
 800f56a:	4650      	mov	r0, sl
 800f56c:	f000 ff4e 	bl	801040c <__mcmp>
 800f570:	4602      	mov	r2, r0
 800f572:	4629      	mov	r1, r5
 800f574:	4620      	mov	r0, r4
 800f576:	9209      	str	r2, [sp, #36]	; 0x24
 800f578:	f000 fcc2 	bl	800ff00 <_Bfree>
 800f57c:	9b07      	ldr	r3, [sp, #28]
 800f57e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f580:	9d04      	ldr	r5, [sp, #16]
 800f582:	ea43 0102 	orr.w	r1, r3, r2
 800f586:	9b06      	ldr	r3, [sp, #24]
 800f588:	4319      	orrs	r1, r3
 800f58a:	d110      	bne.n	800f5ae <_dtoa_r+0xa7e>
 800f58c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f590:	d029      	beq.n	800f5e6 <_dtoa_r+0xab6>
 800f592:	9b05      	ldr	r3, [sp, #20]
 800f594:	2b00      	cmp	r3, #0
 800f596:	dd02      	ble.n	800f59e <_dtoa_r+0xa6e>
 800f598:	9b02      	ldr	r3, [sp, #8]
 800f59a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f59e:	9b01      	ldr	r3, [sp, #4]
 800f5a0:	f883 9000 	strb.w	r9, [r3]
 800f5a4:	e774      	b.n	800f490 <_dtoa_r+0x960>
 800f5a6:	4638      	mov	r0, r7
 800f5a8:	e7ba      	b.n	800f520 <_dtoa_r+0x9f0>
 800f5aa:	2201      	movs	r2, #1
 800f5ac:	e7e1      	b.n	800f572 <_dtoa_r+0xa42>
 800f5ae:	9b05      	ldr	r3, [sp, #20]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	db04      	blt.n	800f5be <_dtoa_r+0xa8e>
 800f5b4:	9907      	ldr	r1, [sp, #28]
 800f5b6:	430b      	orrs	r3, r1
 800f5b8:	9906      	ldr	r1, [sp, #24]
 800f5ba:	430b      	orrs	r3, r1
 800f5bc:	d120      	bne.n	800f600 <_dtoa_r+0xad0>
 800f5be:	2a00      	cmp	r2, #0
 800f5c0:	dded      	ble.n	800f59e <_dtoa_r+0xa6e>
 800f5c2:	4651      	mov	r1, sl
 800f5c4:	2201      	movs	r2, #1
 800f5c6:	4620      	mov	r0, r4
 800f5c8:	f000 feb4 	bl	8010334 <__lshift>
 800f5cc:	4631      	mov	r1, r6
 800f5ce:	4682      	mov	sl, r0
 800f5d0:	f000 ff1c 	bl	801040c <__mcmp>
 800f5d4:	2800      	cmp	r0, #0
 800f5d6:	dc03      	bgt.n	800f5e0 <_dtoa_r+0xab0>
 800f5d8:	d1e1      	bne.n	800f59e <_dtoa_r+0xa6e>
 800f5da:	f019 0f01 	tst.w	r9, #1
 800f5de:	d0de      	beq.n	800f59e <_dtoa_r+0xa6e>
 800f5e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f5e4:	d1d8      	bne.n	800f598 <_dtoa_r+0xa68>
 800f5e6:	9a01      	ldr	r2, [sp, #4]
 800f5e8:	2339      	movs	r3, #57	; 0x39
 800f5ea:	7013      	strb	r3, [r2, #0]
 800f5ec:	462b      	mov	r3, r5
 800f5ee:	461d      	mov	r5, r3
 800f5f0:	3b01      	subs	r3, #1
 800f5f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f5f6:	2a39      	cmp	r2, #57	; 0x39
 800f5f8:	d06c      	beq.n	800f6d4 <_dtoa_r+0xba4>
 800f5fa:	3201      	adds	r2, #1
 800f5fc:	701a      	strb	r2, [r3, #0]
 800f5fe:	e747      	b.n	800f490 <_dtoa_r+0x960>
 800f600:	2a00      	cmp	r2, #0
 800f602:	dd07      	ble.n	800f614 <_dtoa_r+0xae4>
 800f604:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f608:	d0ed      	beq.n	800f5e6 <_dtoa_r+0xab6>
 800f60a:	9a01      	ldr	r2, [sp, #4]
 800f60c:	f109 0301 	add.w	r3, r9, #1
 800f610:	7013      	strb	r3, [r2, #0]
 800f612:	e73d      	b.n	800f490 <_dtoa_r+0x960>
 800f614:	9b04      	ldr	r3, [sp, #16]
 800f616:	9a08      	ldr	r2, [sp, #32]
 800f618:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f61c:	4293      	cmp	r3, r2
 800f61e:	d043      	beq.n	800f6a8 <_dtoa_r+0xb78>
 800f620:	4651      	mov	r1, sl
 800f622:	2300      	movs	r3, #0
 800f624:	220a      	movs	r2, #10
 800f626:	4620      	mov	r0, r4
 800f628:	f000 fc8c 	bl	800ff44 <__multadd>
 800f62c:	45b8      	cmp	r8, r7
 800f62e:	4682      	mov	sl, r0
 800f630:	f04f 0300 	mov.w	r3, #0
 800f634:	f04f 020a 	mov.w	r2, #10
 800f638:	4641      	mov	r1, r8
 800f63a:	4620      	mov	r0, r4
 800f63c:	d107      	bne.n	800f64e <_dtoa_r+0xb1e>
 800f63e:	f000 fc81 	bl	800ff44 <__multadd>
 800f642:	4680      	mov	r8, r0
 800f644:	4607      	mov	r7, r0
 800f646:	9b04      	ldr	r3, [sp, #16]
 800f648:	3301      	adds	r3, #1
 800f64a:	9304      	str	r3, [sp, #16]
 800f64c:	e775      	b.n	800f53a <_dtoa_r+0xa0a>
 800f64e:	f000 fc79 	bl	800ff44 <__multadd>
 800f652:	4639      	mov	r1, r7
 800f654:	4680      	mov	r8, r0
 800f656:	2300      	movs	r3, #0
 800f658:	220a      	movs	r2, #10
 800f65a:	4620      	mov	r0, r4
 800f65c:	f000 fc72 	bl	800ff44 <__multadd>
 800f660:	4607      	mov	r7, r0
 800f662:	e7f0      	b.n	800f646 <_dtoa_r+0xb16>
 800f664:	9b04      	ldr	r3, [sp, #16]
 800f666:	9301      	str	r3, [sp, #4]
 800f668:	9d00      	ldr	r5, [sp, #0]
 800f66a:	4631      	mov	r1, r6
 800f66c:	4650      	mov	r0, sl
 800f66e:	f7ff f9d5 	bl	800ea1c <quorem>
 800f672:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f676:	9b00      	ldr	r3, [sp, #0]
 800f678:	f805 9b01 	strb.w	r9, [r5], #1
 800f67c:	1aea      	subs	r2, r5, r3
 800f67e:	9b01      	ldr	r3, [sp, #4]
 800f680:	4293      	cmp	r3, r2
 800f682:	dd07      	ble.n	800f694 <_dtoa_r+0xb64>
 800f684:	4651      	mov	r1, sl
 800f686:	2300      	movs	r3, #0
 800f688:	220a      	movs	r2, #10
 800f68a:	4620      	mov	r0, r4
 800f68c:	f000 fc5a 	bl	800ff44 <__multadd>
 800f690:	4682      	mov	sl, r0
 800f692:	e7ea      	b.n	800f66a <_dtoa_r+0xb3a>
 800f694:	9b01      	ldr	r3, [sp, #4]
 800f696:	2b00      	cmp	r3, #0
 800f698:	bfc8      	it	gt
 800f69a:	461d      	movgt	r5, r3
 800f69c:	9b00      	ldr	r3, [sp, #0]
 800f69e:	bfd8      	it	le
 800f6a0:	2501      	movle	r5, #1
 800f6a2:	441d      	add	r5, r3
 800f6a4:	f04f 0800 	mov.w	r8, #0
 800f6a8:	4651      	mov	r1, sl
 800f6aa:	2201      	movs	r2, #1
 800f6ac:	4620      	mov	r0, r4
 800f6ae:	f000 fe41 	bl	8010334 <__lshift>
 800f6b2:	4631      	mov	r1, r6
 800f6b4:	4682      	mov	sl, r0
 800f6b6:	f000 fea9 	bl	801040c <__mcmp>
 800f6ba:	2800      	cmp	r0, #0
 800f6bc:	dc96      	bgt.n	800f5ec <_dtoa_r+0xabc>
 800f6be:	d102      	bne.n	800f6c6 <_dtoa_r+0xb96>
 800f6c0:	f019 0f01 	tst.w	r9, #1
 800f6c4:	d192      	bne.n	800f5ec <_dtoa_r+0xabc>
 800f6c6:	462b      	mov	r3, r5
 800f6c8:	461d      	mov	r5, r3
 800f6ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f6ce:	2a30      	cmp	r2, #48	; 0x30
 800f6d0:	d0fa      	beq.n	800f6c8 <_dtoa_r+0xb98>
 800f6d2:	e6dd      	b.n	800f490 <_dtoa_r+0x960>
 800f6d4:	9a00      	ldr	r2, [sp, #0]
 800f6d6:	429a      	cmp	r2, r3
 800f6d8:	d189      	bne.n	800f5ee <_dtoa_r+0xabe>
 800f6da:	f10b 0b01 	add.w	fp, fp, #1
 800f6de:	2331      	movs	r3, #49	; 0x31
 800f6e0:	e796      	b.n	800f610 <_dtoa_r+0xae0>
 800f6e2:	4b0a      	ldr	r3, [pc, #40]	; (800f70c <_dtoa_r+0xbdc>)
 800f6e4:	f7ff ba99 	b.w	800ec1a <_dtoa_r+0xea>
 800f6e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	f47f aa6d 	bne.w	800ebca <_dtoa_r+0x9a>
 800f6f0:	4b07      	ldr	r3, [pc, #28]	; (800f710 <_dtoa_r+0xbe0>)
 800f6f2:	f7ff ba92 	b.w	800ec1a <_dtoa_r+0xea>
 800f6f6:	9b01      	ldr	r3, [sp, #4]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	dcb5      	bgt.n	800f668 <_dtoa_r+0xb38>
 800f6fc:	9b07      	ldr	r3, [sp, #28]
 800f6fe:	2b02      	cmp	r3, #2
 800f700:	f73f aeb1 	bgt.w	800f466 <_dtoa_r+0x936>
 800f704:	e7b0      	b.n	800f668 <_dtoa_r+0xb38>
 800f706:	bf00      	nop
 800f708:	08013b6d 	.word	0x08013b6d
 800f70c:	08013ac0 	.word	0x08013ac0
 800f710:	08013af1 	.word	0x08013af1

0800f714 <_free_r>:
 800f714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f716:	2900      	cmp	r1, #0
 800f718:	d044      	beq.n	800f7a4 <_free_r+0x90>
 800f71a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f71e:	9001      	str	r0, [sp, #4]
 800f720:	2b00      	cmp	r3, #0
 800f722:	f1a1 0404 	sub.w	r4, r1, #4
 800f726:	bfb8      	it	lt
 800f728:	18e4      	addlt	r4, r4, r3
 800f72a:	f7fd faf1 	bl	800cd10 <__malloc_lock>
 800f72e:	4a1e      	ldr	r2, [pc, #120]	; (800f7a8 <_free_r+0x94>)
 800f730:	9801      	ldr	r0, [sp, #4]
 800f732:	6813      	ldr	r3, [r2, #0]
 800f734:	b933      	cbnz	r3, 800f744 <_free_r+0x30>
 800f736:	6063      	str	r3, [r4, #4]
 800f738:	6014      	str	r4, [r2, #0]
 800f73a:	b003      	add	sp, #12
 800f73c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f740:	f7fd baec 	b.w	800cd1c <__malloc_unlock>
 800f744:	42a3      	cmp	r3, r4
 800f746:	d908      	bls.n	800f75a <_free_r+0x46>
 800f748:	6825      	ldr	r5, [r4, #0]
 800f74a:	1961      	adds	r1, r4, r5
 800f74c:	428b      	cmp	r3, r1
 800f74e:	bf01      	itttt	eq
 800f750:	6819      	ldreq	r1, [r3, #0]
 800f752:	685b      	ldreq	r3, [r3, #4]
 800f754:	1949      	addeq	r1, r1, r5
 800f756:	6021      	streq	r1, [r4, #0]
 800f758:	e7ed      	b.n	800f736 <_free_r+0x22>
 800f75a:	461a      	mov	r2, r3
 800f75c:	685b      	ldr	r3, [r3, #4]
 800f75e:	b10b      	cbz	r3, 800f764 <_free_r+0x50>
 800f760:	42a3      	cmp	r3, r4
 800f762:	d9fa      	bls.n	800f75a <_free_r+0x46>
 800f764:	6811      	ldr	r1, [r2, #0]
 800f766:	1855      	adds	r5, r2, r1
 800f768:	42a5      	cmp	r5, r4
 800f76a:	d10b      	bne.n	800f784 <_free_r+0x70>
 800f76c:	6824      	ldr	r4, [r4, #0]
 800f76e:	4421      	add	r1, r4
 800f770:	1854      	adds	r4, r2, r1
 800f772:	42a3      	cmp	r3, r4
 800f774:	6011      	str	r1, [r2, #0]
 800f776:	d1e0      	bne.n	800f73a <_free_r+0x26>
 800f778:	681c      	ldr	r4, [r3, #0]
 800f77a:	685b      	ldr	r3, [r3, #4]
 800f77c:	6053      	str	r3, [r2, #4]
 800f77e:	440c      	add	r4, r1
 800f780:	6014      	str	r4, [r2, #0]
 800f782:	e7da      	b.n	800f73a <_free_r+0x26>
 800f784:	d902      	bls.n	800f78c <_free_r+0x78>
 800f786:	230c      	movs	r3, #12
 800f788:	6003      	str	r3, [r0, #0]
 800f78a:	e7d6      	b.n	800f73a <_free_r+0x26>
 800f78c:	6825      	ldr	r5, [r4, #0]
 800f78e:	1961      	adds	r1, r4, r5
 800f790:	428b      	cmp	r3, r1
 800f792:	bf04      	itt	eq
 800f794:	6819      	ldreq	r1, [r3, #0]
 800f796:	685b      	ldreq	r3, [r3, #4]
 800f798:	6063      	str	r3, [r4, #4]
 800f79a:	bf04      	itt	eq
 800f79c:	1949      	addeq	r1, r1, r5
 800f79e:	6021      	streq	r1, [r4, #0]
 800f7a0:	6054      	str	r4, [r2, #4]
 800f7a2:	e7ca      	b.n	800f73a <_free_r+0x26>
 800f7a4:	b003      	add	sp, #12
 800f7a6:	bd30      	pop	{r4, r5, pc}
 800f7a8:	20000d90 	.word	0x20000d90

0800f7ac <rshift>:
 800f7ac:	6903      	ldr	r3, [r0, #16]
 800f7ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f7b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f7b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f7ba:	f100 0414 	add.w	r4, r0, #20
 800f7be:	dd45      	ble.n	800f84c <rshift+0xa0>
 800f7c0:	f011 011f 	ands.w	r1, r1, #31
 800f7c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f7c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f7cc:	d10c      	bne.n	800f7e8 <rshift+0x3c>
 800f7ce:	f100 0710 	add.w	r7, r0, #16
 800f7d2:	4629      	mov	r1, r5
 800f7d4:	42b1      	cmp	r1, r6
 800f7d6:	d334      	bcc.n	800f842 <rshift+0x96>
 800f7d8:	1a9b      	subs	r3, r3, r2
 800f7da:	009b      	lsls	r3, r3, #2
 800f7dc:	1eea      	subs	r2, r5, #3
 800f7de:	4296      	cmp	r6, r2
 800f7e0:	bf38      	it	cc
 800f7e2:	2300      	movcc	r3, #0
 800f7e4:	4423      	add	r3, r4
 800f7e6:	e015      	b.n	800f814 <rshift+0x68>
 800f7e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f7ec:	f1c1 0820 	rsb	r8, r1, #32
 800f7f0:	40cf      	lsrs	r7, r1
 800f7f2:	f105 0e04 	add.w	lr, r5, #4
 800f7f6:	46a1      	mov	r9, r4
 800f7f8:	4576      	cmp	r6, lr
 800f7fa:	46f4      	mov	ip, lr
 800f7fc:	d815      	bhi.n	800f82a <rshift+0x7e>
 800f7fe:	1a9a      	subs	r2, r3, r2
 800f800:	0092      	lsls	r2, r2, #2
 800f802:	3a04      	subs	r2, #4
 800f804:	3501      	adds	r5, #1
 800f806:	42ae      	cmp	r6, r5
 800f808:	bf38      	it	cc
 800f80a:	2200      	movcc	r2, #0
 800f80c:	18a3      	adds	r3, r4, r2
 800f80e:	50a7      	str	r7, [r4, r2]
 800f810:	b107      	cbz	r7, 800f814 <rshift+0x68>
 800f812:	3304      	adds	r3, #4
 800f814:	1b1a      	subs	r2, r3, r4
 800f816:	42a3      	cmp	r3, r4
 800f818:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f81c:	bf08      	it	eq
 800f81e:	2300      	moveq	r3, #0
 800f820:	6102      	str	r2, [r0, #16]
 800f822:	bf08      	it	eq
 800f824:	6143      	streq	r3, [r0, #20]
 800f826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f82a:	f8dc c000 	ldr.w	ip, [ip]
 800f82e:	fa0c fc08 	lsl.w	ip, ip, r8
 800f832:	ea4c 0707 	orr.w	r7, ip, r7
 800f836:	f849 7b04 	str.w	r7, [r9], #4
 800f83a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f83e:	40cf      	lsrs	r7, r1
 800f840:	e7da      	b.n	800f7f8 <rshift+0x4c>
 800f842:	f851 cb04 	ldr.w	ip, [r1], #4
 800f846:	f847 cf04 	str.w	ip, [r7, #4]!
 800f84a:	e7c3      	b.n	800f7d4 <rshift+0x28>
 800f84c:	4623      	mov	r3, r4
 800f84e:	e7e1      	b.n	800f814 <rshift+0x68>

0800f850 <__hexdig_fun>:
 800f850:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f854:	2b09      	cmp	r3, #9
 800f856:	d802      	bhi.n	800f85e <__hexdig_fun+0xe>
 800f858:	3820      	subs	r0, #32
 800f85a:	b2c0      	uxtb	r0, r0
 800f85c:	4770      	bx	lr
 800f85e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f862:	2b05      	cmp	r3, #5
 800f864:	d801      	bhi.n	800f86a <__hexdig_fun+0x1a>
 800f866:	3847      	subs	r0, #71	; 0x47
 800f868:	e7f7      	b.n	800f85a <__hexdig_fun+0xa>
 800f86a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f86e:	2b05      	cmp	r3, #5
 800f870:	d801      	bhi.n	800f876 <__hexdig_fun+0x26>
 800f872:	3827      	subs	r0, #39	; 0x27
 800f874:	e7f1      	b.n	800f85a <__hexdig_fun+0xa>
 800f876:	2000      	movs	r0, #0
 800f878:	4770      	bx	lr
	...

0800f87c <__gethex>:
 800f87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f880:	4617      	mov	r7, r2
 800f882:	680a      	ldr	r2, [r1, #0]
 800f884:	b085      	sub	sp, #20
 800f886:	f102 0b02 	add.w	fp, r2, #2
 800f88a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f88e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f892:	4681      	mov	r9, r0
 800f894:	468a      	mov	sl, r1
 800f896:	9302      	str	r3, [sp, #8]
 800f898:	32fe      	adds	r2, #254	; 0xfe
 800f89a:	eb02 030b 	add.w	r3, r2, fp
 800f89e:	46d8      	mov	r8, fp
 800f8a0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800f8a4:	9301      	str	r3, [sp, #4]
 800f8a6:	2830      	cmp	r0, #48	; 0x30
 800f8a8:	d0f7      	beq.n	800f89a <__gethex+0x1e>
 800f8aa:	f7ff ffd1 	bl	800f850 <__hexdig_fun>
 800f8ae:	4604      	mov	r4, r0
 800f8b0:	2800      	cmp	r0, #0
 800f8b2:	d138      	bne.n	800f926 <__gethex+0xaa>
 800f8b4:	49a7      	ldr	r1, [pc, #668]	; (800fb54 <__gethex+0x2d8>)
 800f8b6:	2201      	movs	r2, #1
 800f8b8:	4640      	mov	r0, r8
 800f8ba:	f7fe fff6 	bl	800e8aa <strncmp>
 800f8be:	4606      	mov	r6, r0
 800f8c0:	2800      	cmp	r0, #0
 800f8c2:	d169      	bne.n	800f998 <__gethex+0x11c>
 800f8c4:	f898 0001 	ldrb.w	r0, [r8, #1]
 800f8c8:	465d      	mov	r5, fp
 800f8ca:	f7ff ffc1 	bl	800f850 <__hexdig_fun>
 800f8ce:	2800      	cmp	r0, #0
 800f8d0:	d064      	beq.n	800f99c <__gethex+0x120>
 800f8d2:	465a      	mov	r2, fp
 800f8d4:	7810      	ldrb	r0, [r2, #0]
 800f8d6:	2830      	cmp	r0, #48	; 0x30
 800f8d8:	4690      	mov	r8, r2
 800f8da:	f102 0201 	add.w	r2, r2, #1
 800f8de:	d0f9      	beq.n	800f8d4 <__gethex+0x58>
 800f8e0:	f7ff ffb6 	bl	800f850 <__hexdig_fun>
 800f8e4:	2301      	movs	r3, #1
 800f8e6:	fab0 f480 	clz	r4, r0
 800f8ea:	0964      	lsrs	r4, r4, #5
 800f8ec:	465e      	mov	r6, fp
 800f8ee:	9301      	str	r3, [sp, #4]
 800f8f0:	4642      	mov	r2, r8
 800f8f2:	4615      	mov	r5, r2
 800f8f4:	3201      	adds	r2, #1
 800f8f6:	7828      	ldrb	r0, [r5, #0]
 800f8f8:	f7ff ffaa 	bl	800f850 <__hexdig_fun>
 800f8fc:	2800      	cmp	r0, #0
 800f8fe:	d1f8      	bne.n	800f8f2 <__gethex+0x76>
 800f900:	4994      	ldr	r1, [pc, #592]	; (800fb54 <__gethex+0x2d8>)
 800f902:	2201      	movs	r2, #1
 800f904:	4628      	mov	r0, r5
 800f906:	f7fe ffd0 	bl	800e8aa <strncmp>
 800f90a:	b978      	cbnz	r0, 800f92c <__gethex+0xb0>
 800f90c:	b946      	cbnz	r6, 800f920 <__gethex+0xa4>
 800f90e:	1c6e      	adds	r6, r5, #1
 800f910:	4632      	mov	r2, r6
 800f912:	4615      	mov	r5, r2
 800f914:	3201      	adds	r2, #1
 800f916:	7828      	ldrb	r0, [r5, #0]
 800f918:	f7ff ff9a 	bl	800f850 <__hexdig_fun>
 800f91c:	2800      	cmp	r0, #0
 800f91e:	d1f8      	bne.n	800f912 <__gethex+0x96>
 800f920:	1b73      	subs	r3, r6, r5
 800f922:	009e      	lsls	r6, r3, #2
 800f924:	e004      	b.n	800f930 <__gethex+0xb4>
 800f926:	2400      	movs	r4, #0
 800f928:	4626      	mov	r6, r4
 800f92a:	e7e1      	b.n	800f8f0 <__gethex+0x74>
 800f92c:	2e00      	cmp	r6, #0
 800f92e:	d1f7      	bne.n	800f920 <__gethex+0xa4>
 800f930:	782b      	ldrb	r3, [r5, #0]
 800f932:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f936:	2b50      	cmp	r3, #80	; 0x50
 800f938:	d13d      	bne.n	800f9b6 <__gethex+0x13a>
 800f93a:	786b      	ldrb	r3, [r5, #1]
 800f93c:	2b2b      	cmp	r3, #43	; 0x2b
 800f93e:	d02f      	beq.n	800f9a0 <__gethex+0x124>
 800f940:	2b2d      	cmp	r3, #45	; 0x2d
 800f942:	d031      	beq.n	800f9a8 <__gethex+0x12c>
 800f944:	1c69      	adds	r1, r5, #1
 800f946:	f04f 0b00 	mov.w	fp, #0
 800f94a:	7808      	ldrb	r0, [r1, #0]
 800f94c:	f7ff ff80 	bl	800f850 <__hexdig_fun>
 800f950:	1e42      	subs	r2, r0, #1
 800f952:	b2d2      	uxtb	r2, r2
 800f954:	2a18      	cmp	r2, #24
 800f956:	d82e      	bhi.n	800f9b6 <__gethex+0x13a>
 800f958:	f1a0 0210 	sub.w	r2, r0, #16
 800f95c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f960:	f7ff ff76 	bl	800f850 <__hexdig_fun>
 800f964:	f100 3cff 	add.w	ip, r0, #4294967295
 800f968:	fa5f fc8c 	uxtb.w	ip, ip
 800f96c:	f1bc 0f18 	cmp.w	ip, #24
 800f970:	d91d      	bls.n	800f9ae <__gethex+0x132>
 800f972:	f1bb 0f00 	cmp.w	fp, #0
 800f976:	d000      	beq.n	800f97a <__gethex+0xfe>
 800f978:	4252      	negs	r2, r2
 800f97a:	4416      	add	r6, r2
 800f97c:	f8ca 1000 	str.w	r1, [sl]
 800f980:	b1dc      	cbz	r4, 800f9ba <__gethex+0x13e>
 800f982:	9b01      	ldr	r3, [sp, #4]
 800f984:	2b00      	cmp	r3, #0
 800f986:	bf14      	ite	ne
 800f988:	f04f 0800 	movne.w	r8, #0
 800f98c:	f04f 0806 	moveq.w	r8, #6
 800f990:	4640      	mov	r0, r8
 800f992:	b005      	add	sp, #20
 800f994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f998:	4645      	mov	r5, r8
 800f99a:	4626      	mov	r6, r4
 800f99c:	2401      	movs	r4, #1
 800f99e:	e7c7      	b.n	800f930 <__gethex+0xb4>
 800f9a0:	f04f 0b00 	mov.w	fp, #0
 800f9a4:	1ca9      	adds	r1, r5, #2
 800f9a6:	e7d0      	b.n	800f94a <__gethex+0xce>
 800f9a8:	f04f 0b01 	mov.w	fp, #1
 800f9ac:	e7fa      	b.n	800f9a4 <__gethex+0x128>
 800f9ae:	230a      	movs	r3, #10
 800f9b0:	fb03 0002 	mla	r0, r3, r2, r0
 800f9b4:	e7d0      	b.n	800f958 <__gethex+0xdc>
 800f9b6:	4629      	mov	r1, r5
 800f9b8:	e7e0      	b.n	800f97c <__gethex+0x100>
 800f9ba:	eba5 0308 	sub.w	r3, r5, r8
 800f9be:	3b01      	subs	r3, #1
 800f9c0:	4621      	mov	r1, r4
 800f9c2:	2b07      	cmp	r3, #7
 800f9c4:	dc0a      	bgt.n	800f9dc <__gethex+0x160>
 800f9c6:	4648      	mov	r0, r9
 800f9c8:	f000 fa5a 	bl	800fe80 <_Balloc>
 800f9cc:	4604      	mov	r4, r0
 800f9ce:	b940      	cbnz	r0, 800f9e2 <__gethex+0x166>
 800f9d0:	4b61      	ldr	r3, [pc, #388]	; (800fb58 <__gethex+0x2dc>)
 800f9d2:	4602      	mov	r2, r0
 800f9d4:	21e4      	movs	r1, #228	; 0xe4
 800f9d6:	4861      	ldr	r0, [pc, #388]	; (800fb5c <__gethex+0x2e0>)
 800f9d8:	f001 f9b2 	bl	8010d40 <__assert_func>
 800f9dc:	3101      	adds	r1, #1
 800f9de:	105b      	asrs	r3, r3, #1
 800f9e0:	e7ef      	b.n	800f9c2 <__gethex+0x146>
 800f9e2:	f100 0a14 	add.w	sl, r0, #20
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	495a      	ldr	r1, [pc, #360]	; (800fb54 <__gethex+0x2d8>)
 800f9ea:	f8cd a004 	str.w	sl, [sp, #4]
 800f9ee:	469b      	mov	fp, r3
 800f9f0:	45a8      	cmp	r8, r5
 800f9f2:	d342      	bcc.n	800fa7a <__gethex+0x1fe>
 800f9f4:	9801      	ldr	r0, [sp, #4]
 800f9f6:	f840 bb04 	str.w	fp, [r0], #4
 800f9fa:	eba0 000a 	sub.w	r0, r0, sl
 800f9fe:	1080      	asrs	r0, r0, #2
 800fa00:	6120      	str	r0, [r4, #16]
 800fa02:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800fa06:	4658      	mov	r0, fp
 800fa08:	f000 fb2c 	bl	8010064 <__hi0bits>
 800fa0c:	683d      	ldr	r5, [r7, #0]
 800fa0e:	eba8 0000 	sub.w	r0, r8, r0
 800fa12:	42a8      	cmp	r0, r5
 800fa14:	dd59      	ble.n	800faca <__gethex+0x24e>
 800fa16:	eba0 0805 	sub.w	r8, r0, r5
 800fa1a:	4641      	mov	r1, r8
 800fa1c:	4620      	mov	r0, r4
 800fa1e:	f000 febb 	bl	8010798 <__any_on>
 800fa22:	4683      	mov	fp, r0
 800fa24:	b1b8      	cbz	r0, 800fa56 <__gethex+0x1da>
 800fa26:	f108 33ff 	add.w	r3, r8, #4294967295
 800fa2a:	1159      	asrs	r1, r3, #5
 800fa2c:	f003 021f 	and.w	r2, r3, #31
 800fa30:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fa34:	f04f 0b01 	mov.w	fp, #1
 800fa38:	fa0b f202 	lsl.w	r2, fp, r2
 800fa3c:	420a      	tst	r2, r1
 800fa3e:	d00a      	beq.n	800fa56 <__gethex+0x1da>
 800fa40:	455b      	cmp	r3, fp
 800fa42:	dd06      	ble.n	800fa52 <__gethex+0x1d6>
 800fa44:	f1a8 0102 	sub.w	r1, r8, #2
 800fa48:	4620      	mov	r0, r4
 800fa4a:	f000 fea5 	bl	8010798 <__any_on>
 800fa4e:	2800      	cmp	r0, #0
 800fa50:	d138      	bne.n	800fac4 <__gethex+0x248>
 800fa52:	f04f 0b02 	mov.w	fp, #2
 800fa56:	4641      	mov	r1, r8
 800fa58:	4620      	mov	r0, r4
 800fa5a:	f7ff fea7 	bl	800f7ac <rshift>
 800fa5e:	4446      	add	r6, r8
 800fa60:	68bb      	ldr	r3, [r7, #8]
 800fa62:	42b3      	cmp	r3, r6
 800fa64:	da41      	bge.n	800faea <__gethex+0x26e>
 800fa66:	4621      	mov	r1, r4
 800fa68:	4648      	mov	r0, r9
 800fa6a:	f000 fa49 	bl	800ff00 <_Bfree>
 800fa6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fa70:	2300      	movs	r3, #0
 800fa72:	6013      	str	r3, [r2, #0]
 800fa74:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800fa78:	e78a      	b.n	800f990 <__gethex+0x114>
 800fa7a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800fa7e:	2a2e      	cmp	r2, #46	; 0x2e
 800fa80:	d014      	beq.n	800faac <__gethex+0x230>
 800fa82:	2b20      	cmp	r3, #32
 800fa84:	d106      	bne.n	800fa94 <__gethex+0x218>
 800fa86:	9b01      	ldr	r3, [sp, #4]
 800fa88:	f843 bb04 	str.w	fp, [r3], #4
 800fa8c:	f04f 0b00 	mov.w	fp, #0
 800fa90:	9301      	str	r3, [sp, #4]
 800fa92:	465b      	mov	r3, fp
 800fa94:	7828      	ldrb	r0, [r5, #0]
 800fa96:	9303      	str	r3, [sp, #12]
 800fa98:	f7ff feda 	bl	800f850 <__hexdig_fun>
 800fa9c:	9b03      	ldr	r3, [sp, #12]
 800fa9e:	f000 000f 	and.w	r0, r0, #15
 800faa2:	4098      	lsls	r0, r3
 800faa4:	ea4b 0b00 	orr.w	fp, fp, r0
 800faa8:	3304      	adds	r3, #4
 800faaa:	e7a1      	b.n	800f9f0 <__gethex+0x174>
 800faac:	45a8      	cmp	r8, r5
 800faae:	d8e8      	bhi.n	800fa82 <__gethex+0x206>
 800fab0:	2201      	movs	r2, #1
 800fab2:	4628      	mov	r0, r5
 800fab4:	9303      	str	r3, [sp, #12]
 800fab6:	f7fe fef8 	bl	800e8aa <strncmp>
 800faba:	4926      	ldr	r1, [pc, #152]	; (800fb54 <__gethex+0x2d8>)
 800fabc:	9b03      	ldr	r3, [sp, #12]
 800fabe:	2800      	cmp	r0, #0
 800fac0:	d1df      	bne.n	800fa82 <__gethex+0x206>
 800fac2:	e795      	b.n	800f9f0 <__gethex+0x174>
 800fac4:	f04f 0b03 	mov.w	fp, #3
 800fac8:	e7c5      	b.n	800fa56 <__gethex+0x1da>
 800faca:	da0b      	bge.n	800fae4 <__gethex+0x268>
 800facc:	eba5 0800 	sub.w	r8, r5, r0
 800fad0:	4621      	mov	r1, r4
 800fad2:	4642      	mov	r2, r8
 800fad4:	4648      	mov	r0, r9
 800fad6:	f000 fc2d 	bl	8010334 <__lshift>
 800fada:	eba6 0608 	sub.w	r6, r6, r8
 800fade:	4604      	mov	r4, r0
 800fae0:	f100 0a14 	add.w	sl, r0, #20
 800fae4:	f04f 0b00 	mov.w	fp, #0
 800fae8:	e7ba      	b.n	800fa60 <__gethex+0x1e4>
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	42b3      	cmp	r3, r6
 800faee:	dd73      	ble.n	800fbd8 <__gethex+0x35c>
 800faf0:	1b9e      	subs	r6, r3, r6
 800faf2:	42b5      	cmp	r5, r6
 800faf4:	dc34      	bgt.n	800fb60 <__gethex+0x2e4>
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	2b02      	cmp	r3, #2
 800fafa:	d023      	beq.n	800fb44 <__gethex+0x2c8>
 800fafc:	2b03      	cmp	r3, #3
 800fafe:	d025      	beq.n	800fb4c <__gethex+0x2d0>
 800fb00:	2b01      	cmp	r3, #1
 800fb02:	d115      	bne.n	800fb30 <__gethex+0x2b4>
 800fb04:	42b5      	cmp	r5, r6
 800fb06:	d113      	bne.n	800fb30 <__gethex+0x2b4>
 800fb08:	2d01      	cmp	r5, #1
 800fb0a:	d10b      	bne.n	800fb24 <__gethex+0x2a8>
 800fb0c:	9a02      	ldr	r2, [sp, #8]
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6013      	str	r3, [r2, #0]
 800fb12:	2301      	movs	r3, #1
 800fb14:	6123      	str	r3, [r4, #16]
 800fb16:	f8ca 3000 	str.w	r3, [sl]
 800fb1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb1c:	f04f 0862 	mov.w	r8, #98	; 0x62
 800fb20:	601c      	str	r4, [r3, #0]
 800fb22:	e735      	b.n	800f990 <__gethex+0x114>
 800fb24:	1e69      	subs	r1, r5, #1
 800fb26:	4620      	mov	r0, r4
 800fb28:	f000 fe36 	bl	8010798 <__any_on>
 800fb2c:	2800      	cmp	r0, #0
 800fb2e:	d1ed      	bne.n	800fb0c <__gethex+0x290>
 800fb30:	4621      	mov	r1, r4
 800fb32:	4648      	mov	r0, r9
 800fb34:	f000 f9e4 	bl	800ff00 <_Bfree>
 800fb38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	6013      	str	r3, [r2, #0]
 800fb3e:	f04f 0850 	mov.w	r8, #80	; 0x50
 800fb42:	e725      	b.n	800f990 <__gethex+0x114>
 800fb44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d1f2      	bne.n	800fb30 <__gethex+0x2b4>
 800fb4a:	e7df      	b.n	800fb0c <__gethex+0x290>
 800fb4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d1dc      	bne.n	800fb0c <__gethex+0x290>
 800fb52:	e7ed      	b.n	800fb30 <__gethex+0x2b4>
 800fb54:	08013a5c 	.word	0x08013a5c
 800fb58:	08013b6d 	.word	0x08013b6d
 800fb5c:	08013b7e 	.word	0x08013b7e
 800fb60:	f106 38ff 	add.w	r8, r6, #4294967295
 800fb64:	f1bb 0f00 	cmp.w	fp, #0
 800fb68:	d133      	bne.n	800fbd2 <__gethex+0x356>
 800fb6a:	f1b8 0f00 	cmp.w	r8, #0
 800fb6e:	d004      	beq.n	800fb7a <__gethex+0x2fe>
 800fb70:	4641      	mov	r1, r8
 800fb72:	4620      	mov	r0, r4
 800fb74:	f000 fe10 	bl	8010798 <__any_on>
 800fb78:	4683      	mov	fp, r0
 800fb7a:	ea4f 1268 	mov.w	r2, r8, asr #5
 800fb7e:	2301      	movs	r3, #1
 800fb80:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fb84:	f008 081f 	and.w	r8, r8, #31
 800fb88:	fa03 f308 	lsl.w	r3, r3, r8
 800fb8c:	4213      	tst	r3, r2
 800fb8e:	4631      	mov	r1, r6
 800fb90:	4620      	mov	r0, r4
 800fb92:	bf18      	it	ne
 800fb94:	f04b 0b02 	orrne.w	fp, fp, #2
 800fb98:	1bad      	subs	r5, r5, r6
 800fb9a:	f7ff fe07 	bl	800f7ac <rshift>
 800fb9e:	687e      	ldr	r6, [r7, #4]
 800fba0:	f04f 0802 	mov.w	r8, #2
 800fba4:	f1bb 0f00 	cmp.w	fp, #0
 800fba8:	d04a      	beq.n	800fc40 <__gethex+0x3c4>
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	2b02      	cmp	r3, #2
 800fbae:	d016      	beq.n	800fbde <__gethex+0x362>
 800fbb0:	2b03      	cmp	r3, #3
 800fbb2:	d018      	beq.n	800fbe6 <__gethex+0x36a>
 800fbb4:	2b01      	cmp	r3, #1
 800fbb6:	d109      	bne.n	800fbcc <__gethex+0x350>
 800fbb8:	f01b 0f02 	tst.w	fp, #2
 800fbbc:	d006      	beq.n	800fbcc <__gethex+0x350>
 800fbbe:	f8da 3000 	ldr.w	r3, [sl]
 800fbc2:	ea4b 0b03 	orr.w	fp, fp, r3
 800fbc6:	f01b 0f01 	tst.w	fp, #1
 800fbca:	d10f      	bne.n	800fbec <__gethex+0x370>
 800fbcc:	f048 0810 	orr.w	r8, r8, #16
 800fbd0:	e036      	b.n	800fc40 <__gethex+0x3c4>
 800fbd2:	f04f 0b01 	mov.w	fp, #1
 800fbd6:	e7d0      	b.n	800fb7a <__gethex+0x2fe>
 800fbd8:	f04f 0801 	mov.w	r8, #1
 800fbdc:	e7e2      	b.n	800fba4 <__gethex+0x328>
 800fbde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fbe0:	f1c3 0301 	rsb	r3, r3, #1
 800fbe4:	930f      	str	r3, [sp, #60]	; 0x3c
 800fbe6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d0ef      	beq.n	800fbcc <__gethex+0x350>
 800fbec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fbf0:	f104 0214 	add.w	r2, r4, #20
 800fbf4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800fbf8:	9301      	str	r3, [sp, #4]
 800fbfa:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800fbfe:	2300      	movs	r3, #0
 800fc00:	4694      	mov	ip, r2
 800fc02:	f852 1b04 	ldr.w	r1, [r2], #4
 800fc06:	f1b1 3fff 	cmp.w	r1, #4294967295
 800fc0a:	d01e      	beq.n	800fc4a <__gethex+0x3ce>
 800fc0c:	3101      	adds	r1, #1
 800fc0e:	f8cc 1000 	str.w	r1, [ip]
 800fc12:	f1b8 0f02 	cmp.w	r8, #2
 800fc16:	f104 0214 	add.w	r2, r4, #20
 800fc1a:	d13d      	bne.n	800fc98 <__gethex+0x41c>
 800fc1c:	683b      	ldr	r3, [r7, #0]
 800fc1e:	3b01      	subs	r3, #1
 800fc20:	42ab      	cmp	r3, r5
 800fc22:	d10b      	bne.n	800fc3c <__gethex+0x3c0>
 800fc24:	1169      	asrs	r1, r5, #5
 800fc26:	2301      	movs	r3, #1
 800fc28:	f005 051f 	and.w	r5, r5, #31
 800fc2c:	fa03 f505 	lsl.w	r5, r3, r5
 800fc30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fc34:	421d      	tst	r5, r3
 800fc36:	bf18      	it	ne
 800fc38:	f04f 0801 	movne.w	r8, #1
 800fc3c:	f048 0820 	orr.w	r8, r8, #32
 800fc40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc42:	601c      	str	r4, [r3, #0]
 800fc44:	9b02      	ldr	r3, [sp, #8]
 800fc46:	601e      	str	r6, [r3, #0]
 800fc48:	e6a2      	b.n	800f990 <__gethex+0x114>
 800fc4a:	4290      	cmp	r0, r2
 800fc4c:	f842 3c04 	str.w	r3, [r2, #-4]
 800fc50:	d8d6      	bhi.n	800fc00 <__gethex+0x384>
 800fc52:	68a2      	ldr	r2, [r4, #8]
 800fc54:	4593      	cmp	fp, r2
 800fc56:	db17      	blt.n	800fc88 <__gethex+0x40c>
 800fc58:	6861      	ldr	r1, [r4, #4]
 800fc5a:	4648      	mov	r0, r9
 800fc5c:	3101      	adds	r1, #1
 800fc5e:	f000 f90f 	bl	800fe80 <_Balloc>
 800fc62:	4682      	mov	sl, r0
 800fc64:	b918      	cbnz	r0, 800fc6e <__gethex+0x3f2>
 800fc66:	4b1b      	ldr	r3, [pc, #108]	; (800fcd4 <__gethex+0x458>)
 800fc68:	4602      	mov	r2, r0
 800fc6a:	2184      	movs	r1, #132	; 0x84
 800fc6c:	e6b3      	b.n	800f9d6 <__gethex+0x15a>
 800fc6e:	6922      	ldr	r2, [r4, #16]
 800fc70:	3202      	adds	r2, #2
 800fc72:	f104 010c 	add.w	r1, r4, #12
 800fc76:	0092      	lsls	r2, r2, #2
 800fc78:	300c      	adds	r0, #12
 800fc7a:	f7fe feb0 	bl	800e9de <memcpy>
 800fc7e:	4621      	mov	r1, r4
 800fc80:	4648      	mov	r0, r9
 800fc82:	f000 f93d 	bl	800ff00 <_Bfree>
 800fc86:	4654      	mov	r4, sl
 800fc88:	6922      	ldr	r2, [r4, #16]
 800fc8a:	1c51      	adds	r1, r2, #1
 800fc8c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800fc90:	6121      	str	r1, [r4, #16]
 800fc92:	2101      	movs	r1, #1
 800fc94:	6151      	str	r1, [r2, #20]
 800fc96:	e7bc      	b.n	800fc12 <__gethex+0x396>
 800fc98:	6921      	ldr	r1, [r4, #16]
 800fc9a:	4559      	cmp	r1, fp
 800fc9c:	dd0b      	ble.n	800fcb6 <__gethex+0x43a>
 800fc9e:	2101      	movs	r1, #1
 800fca0:	4620      	mov	r0, r4
 800fca2:	f7ff fd83 	bl	800f7ac <rshift>
 800fca6:	68bb      	ldr	r3, [r7, #8]
 800fca8:	3601      	adds	r6, #1
 800fcaa:	42b3      	cmp	r3, r6
 800fcac:	f6ff aedb 	blt.w	800fa66 <__gethex+0x1ea>
 800fcb0:	f04f 0801 	mov.w	r8, #1
 800fcb4:	e7c2      	b.n	800fc3c <__gethex+0x3c0>
 800fcb6:	f015 051f 	ands.w	r5, r5, #31
 800fcba:	d0f9      	beq.n	800fcb0 <__gethex+0x434>
 800fcbc:	9b01      	ldr	r3, [sp, #4]
 800fcbe:	441a      	add	r2, r3
 800fcc0:	f1c5 0520 	rsb	r5, r5, #32
 800fcc4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800fcc8:	f000 f9cc 	bl	8010064 <__hi0bits>
 800fccc:	42a8      	cmp	r0, r5
 800fcce:	dbe6      	blt.n	800fc9e <__gethex+0x422>
 800fcd0:	e7ee      	b.n	800fcb0 <__gethex+0x434>
 800fcd2:	bf00      	nop
 800fcd4:	08013b6d 	.word	0x08013b6d

0800fcd8 <L_shift>:
 800fcd8:	f1c2 0208 	rsb	r2, r2, #8
 800fcdc:	0092      	lsls	r2, r2, #2
 800fcde:	b570      	push	{r4, r5, r6, lr}
 800fce0:	f1c2 0620 	rsb	r6, r2, #32
 800fce4:	6843      	ldr	r3, [r0, #4]
 800fce6:	6804      	ldr	r4, [r0, #0]
 800fce8:	fa03 f506 	lsl.w	r5, r3, r6
 800fcec:	432c      	orrs	r4, r5
 800fcee:	40d3      	lsrs	r3, r2
 800fcf0:	6004      	str	r4, [r0, #0]
 800fcf2:	f840 3f04 	str.w	r3, [r0, #4]!
 800fcf6:	4288      	cmp	r0, r1
 800fcf8:	d3f4      	bcc.n	800fce4 <L_shift+0xc>
 800fcfa:	bd70      	pop	{r4, r5, r6, pc}

0800fcfc <__match>:
 800fcfc:	b530      	push	{r4, r5, lr}
 800fcfe:	6803      	ldr	r3, [r0, #0]
 800fd00:	3301      	adds	r3, #1
 800fd02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd06:	b914      	cbnz	r4, 800fd0e <__match+0x12>
 800fd08:	6003      	str	r3, [r0, #0]
 800fd0a:	2001      	movs	r0, #1
 800fd0c:	bd30      	pop	{r4, r5, pc}
 800fd0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd12:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fd16:	2d19      	cmp	r5, #25
 800fd18:	bf98      	it	ls
 800fd1a:	3220      	addls	r2, #32
 800fd1c:	42a2      	cmp	r2, r4
 800fd1e:	d0f0      	beq.n	800fd02 <__match+0x6>
 800fd20:	2000      	movs	r0, #0
 800fd22:	e7f3      	b.n	800fd0c <__match+0x10>

0800fd24 <__hexnan>:
 800fd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd28:	680b      	ldr	r3, [r1, #0]
 800fd2a:	6801      	ldr	r1, [r0, #0]
 800fd2c:	115e      	asrs	r6, r3, #5
 800fd2e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fd32:	f013 031f 	ands.w	r3, r3, #31
 800fd36:	b087      	sub	sp, #28
 800fd38:	bf18      	it	ne
 800fd3a:	3604      	addne	r6, #4
 800fd3c:	2500      	movs	r5, #0
 800fd3e:	1f37      	subs	r7, r6, #4
 800fd40:	4682      	mov	sl, r0
 800fd42:	4690      	mov	r8, r2
 800fd44:	9301      	str	r3, [sp, #4]
 800fd46:	f846 5c04 	str.w	r5, [r6, #-4]
 800fd4a:	46b9      	mov	r9, r7
 800fd4c:	463c      	mov	r4, r7
 800fd4e:	9502      	str	r5, [sp, #8]
 800fd50:	46ab      	mov	fp, r5
 800fd52:	784a      	ldrb	r2, [r1, #1]
 800fd54:	1c4b      	adds	r3, r1, #1
 800fd56:	9303      	str	r3, [sp, #12]
 800fd58:	b342      	cbz	r2, 800fdac <__hexnan+0x88>
 800fd5a:	4610      	mov	r0, r2
 800fd5c:	9105      	str	r1, [sp, #20]
 800fd5e:	9204      	str	r2, [sp, #16]
 800fd60:	f7ff fd76 	bl	800f850 <__hexdig_fun>
 800fd64:	2800      	cmp	r0, #0
 800fd66:	d14f      	bne.n	800fe08 <__hexnan+0xe4>
 800fd68:	9a04      	ldr	r2, [sp, #16]
 800fd6a:	9905      	ldr	r1, [sp, #20]
 800fd6c:	2a20      	cmp	r2, #32
 800fd6e:	d818      	bhi.n	800fda2 <__hexnan+0x7e>
 800fd70:	9b02      	ldr	r3, [sp, #8]
 800fd72:	459b      	cmp	fp, r3
 800fd74:	dd13      	ble.n	800fd9e <__hexnan+0x7a>
 800fd76:	454c      	cmp	r4, r9
 800fd78:	d206      	bcs.n	800fd88 <__hexnan+0x64>
 800fd7a:	2d07      	cmp	r5, #7
 800fd7c:	dc04      	bgt.n	800fd88 <__hexnan+0x64>
 800fd7e:	462a      	mov	r2, r5
 800fd80:	4649      	mov	r1, r9
 800fd82:	4620      	mov	r0, r4
 800fd84:	f7ff ffa8 	bl	800fcd8 <L_shift>
 800fd88:	4544      	cmp	r4, r8
 800fd8a:	d950      	bls.n	800fe2e <__hexnan+0x10a>
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	f1a4 0904 	sub.w	r9, r4, #4
 800fd92:	f844 3c04 	str.w	r3, [r4, #-4]
 800fd96:	f8cd b008 	str.w	fp, [sp, #8]
 800fd9a:	464c      	mov	r4, r9
 800fd9c:	461d      	mov	r5, r3
 800fd9e:	9903      	ldr	r1, [sp, #12]
 800fda0:	e7d7      	b.n	800fd52 <__hexnan+0x2e>
 800fda2:	2a29      	cmp	r2, #41	; 0x29
 800fda4:	d155      	bne.n	800fe52 <__hexnan+0x12e>
 800fda6:	3102      	adds	r1, #2
 800fda8:	f8ca 1000 	str.w	r1, [sl]
 800fdac:	f1bb 0f00 	cmp.w	fp, #0
 800fdb0:	d04f      	beq.n	800fe52 <__hexnan+0x12e>
 800fdb2:	454c      	cmp	r4, r9
 800fdb4:	d206      	bcs.n	800fdc4 <__hexnan+0xa0>
 800fdb6:	2d07      	cmp	r5, #7
 800fdb8:	dc04      	bgt.n	800fdc4 <__hexnan+0xa0>
 800fdba:	462a      	mov	r2, r5
 800fdbc:	4649      	mov	r1, r9
 800fdbe:	4620      	mov	r0, r4
 800fdc0:	f7ff ff8a 	bl	800fcd8 <L_shift>
 800fdc4:	4544      	cmp	r4, r8
 800fdc6:	d934      	bls.n	800fe32 <__hexnan+0x10e>
 800fdc8:	f1a8 0204 	sub.w	r2, r8, #4
 800fdcc:	4623      	mov	r3, r4
 800fdce:	f853 1b04 	ldr.w	r1, [r3], #4
 800fdd2:	f842 1f04 	str.w	r1, [r2, #4]!
 800fdd6:	429f      	cmp	r7, r3
 800fdd8:	d2f9      	bcs.n	800fdce <__hexnan+0xaa>
 800fdda:	1b3b      	subs	r3, r7, r4
 800fddc:	f023 0303 	bic.w	r3, r3, #3
 800fde0:	3304      	adds	r3, #4
 800fde2:	3e03      	subs	r6, #3
 800fde4:	3401      	adds	r4, #1
 800fde6:	42a6      	cmp	r6, r4
 800fde8:	bf38      	it	cc
 800fdea:	2304      	movcc	r3, #4
 800fdec:	4443      	add	r3, r8
 800fdee:	2200      	movs	r2, #0
 800fdf0:	f843 2b04 	str.w	r2, [r3], #4
 800fdf4:	429f      	cmp	r7, r3
 800fdf6:	d2fb      	bcs.n	800fdf0 <__hexnan+0xcc>
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	b91b      	cbnz	r3, 800fe04 <__hexnan+0xe0>
 800fdfc:	4547      	cmp	r7, r8
 800fdfe:	d126      	bne.n	800fe4e <__hexnan+0x12a>
 800fe00:	2301      	movs	r3, #1
 800fe02:	603b      	str	r3, [r7, #0]
 800fe04:	2005      	movs	r0, #5
 800fe06:	e025      	b.n	800fe54 <__hexnan+0x130>
 800fe08:	3501      	adds	r5, #1
 800fe0a:	2d08      	cmp	r5, #8
 800fe0c:	f10b 0b01 	add.w	fp, fp, #1
 800fe10:	dd06      	ble.n	800fe20 <__hexnan+0xfc>
 800fe12:	4544      	cmp	r4, r8
 800fe14:	d9c3      	bls.n	800fd9e <__hexnan+0x7a>
 800fe16:	2300      	movs	r3, #0
 800fe18:	f844 3c04 	str.w	r3, [r4, #-4]
 800fe1c:	2501      	movs	r5, #1
 800fe1e:	3c04      	subs	r4, #4
 800fe20:	6822      	ldr	r2, [r4, #0]
 800fe22:	f000 000f 	and.w	r0, r0, #15
 800fe26:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fe2a:	6020      	str	r0, [r4, #0]
 800fe2c:	e7b7      	b.n	800fd9e <__hexnan+0x7a>
 800fe2e:	2508      	movs	r5, #8
 800fe30:	e7b5      	b.n	800fd9e <__hexnan+0x7a>
 800fe32:	9b01      	ldr	r3, [sp, #4]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d0df      	beq.n	800fdf8 <__hexnan+0xd4>
 800fe38:	f1c3 0320 	rsb	r3, r3, #32
 800fe3c:	f04f 32ff 	mov.w	r2, #4294967295
 800fe40:	40da      	lsrs	r2, r3
 800fe42:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800fe46:	4013      	ands	r3, r2
 800fe48:	f846 3c04 	str.w	r3, [r6, #-4]
 800fe4c:	e7d4      	b.n	800fdf8 <__hexnan+0xd4>
 800fe4e:	3f04      	subs	r7, #4
 800fe50:	e7d2      	b.n	800fdf8 <__hexnan+0xd4>
 800fe52:	2004      	movs	r0, #4
 800fe54:	b007      	add	sp, #28
 800fe56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fe5a <__ascii_mbtowc>:
 800fe5a:	b082      	sub	sp, #8
 800fe5c:	b901      	cbnz	r1, 800fe60 <__ascii_mbtowc+0x6>
 800fe5e:	a901      	add	r1, sp, #4
 800fe60:	b142      	cbz	r2, 800fe74 <__ascii_mbtowc+0x1a>
 800fe62:	b14b      	cbz	r3, 800fe78 <__ascii_mbtowc+0x1e>
 800fe64:	7813      	ldrb	r3, [r2, #0]
 800fe66:	600b      	str	r3, [r1, #0]
 800fe68:	7812      	ldrb	r2, [r2, #0]
 800fe6a:	1e10      	subs	r0, r2, #0
 800fe6c:	bf18      	it	ne
 800fe6e:	2001      	movne	r0, #1
 800fe70:	b002      	add	sp, #8
 800fe72:	4770      	bx	lr
 800fe74:	4610      	mov	r0, r2
 800fe76:	e7fb      	b.n	800fe70 <__ascii_mbtowc+0x16>
 800fe78:	f06f 0001 	mvn.w	r0, #1
 800fe7c:	e7f8      	b.n	800fe70 <__ascii_mbtowc+0x16>
	...

0800fe80 <_Balloc>:
 800fe80:	b570      	push	{r4, r5, r6, lr}
 800fe82:	69c6      	ldr	r6, [r0, #28]
 800fe84:	4604      	mov	r4, r0
 800fe86:	460d      	mov	r5, r1
 800fe88:	b976      	cbnz	r6, 800fea8 <_Balloc+0x28>
 800fe8a:	2010      	movs	r0, #16
 800fe8c:	f7fc fe90 	bl	800cbb0 <malloc>
 800fe90:	4602      	mov	r2, r0
 800fe92:	61e0      	str	r0, [r4, #28]
 800fe94:	b920      	cbnz	r0, 800fea0 <_Balloc+0x20>
 800fe96:	4b18      	ldr	r3, [pc, #96]	; (800fef8 <_Balloc+0x78>)
 800fe98:	4818      	ldr	r0, [pc, #96]	; (800fefc <_Balloc+0x7c>)
 800fe9a:	216b      	movs	r1, #107	; 0x6b
 800fe9c:	f000 ff50 	bl	8010d40 <__assert_func>
 800fea0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fea4:	6006      	str	r6, [r0, #0]
 800fea6:	60c6      	str	r6, [r0, #12]
 800fea8:	69e6      	ldr	r6, [r4, #28]
 800feaa:	68f3      	ldr	r3, [r6, #12]
 800feac:	b183      	cbz	r3, 800fed0 <_Balloc+0x50>
 800feae:	69e3      	ldr	r3, [r4, #28]
 800feb0:	68db      	ldr	r3, [r3, #12]
 800feb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800feb6:	b9b8      	cbnz	r0, 800fee8 <_Balloc+0x68>
 800feb8:	2101      	movs	r1, #1
 800feba:	fa01 f605 	lsl.w	r6, r1, r5
 800febe:	1d72      	adds	r2, r6, #5
 800fec0:	0092      	lsls	r2, r2, #2
 800fec2:	4620      	mov	r0, r4
 800fec4:	f000 ff5a 	bl	8010d7c <_calloc_r>
 800fec8:	b160      	cbz	r0, 800fee4 <_Balloc+0x64>
 800feca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fece:	e00e      	b.n	800feee <_Balloc+0x6e>
 800fed0:	2221      	movs	r2, #33	; 0x21
 800fed2:	2104      	movs	r1, #4
 800fed4:	4620      	mov	r0, r4
 800fed6:	f000 ff51 	bl	8010d7c <_calloc_r>
 800feda:	69e3      	ldr	r3, [r4, #28]
 800fedc:	60f0      	str	r0, [r6, #12]
 800fede:	68db      	ldr	r3, [r3, #12]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d1e4      	bne.n	800feae <_Balloc+0x2e>
 800fee4:	2000      	movs	r0, #0
 800fee6:	bd70      	pop	{r4, r5, r6, pc}
 800fee8:	6802      	ldr	r2, [r0, #0]
 800feea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800feee:	2300      	movs	r3, #0
 800fef0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fef4:	e7f7      	b.n	800fee6 <_Balloc+0x66>
 800fef6:	bf00      	nop
 800fef8:	08013afe 	.word	0x08013afe
 800fefc:	08013bde 	.word	0x08013bde

0800ff00 <_Bfree>:
 800ff00:	b570      	push	{r4, r5, r6, lr}
 800ff02:	69c6      	ldr	r6, [r0, #28]
 800ff04:	4605      	mov	r5, r0
 800ff06:	460c      	mov	r4, r1
 800ff08:	b976      	cbnz	r6, 800ff28 <_Bfree+0x28>
 800ff0a:	2010      	movs	r0, #16
 800ff0c:	f7fc fe50 	bl	800cbb0 <malloc>
 800ff10:	4602      	mov	r2, r0
 800ff12:	61e8      	str	r0, [r5, #28]
 800ff14:	b920      	cbnz	r0, 800ff20 <_Bfree+0x20>
 800ff16:	4b09      	ldr	r3, [pc, #36]	; (800ff3c <_Bfree+0x3c>)
 800ff18:	4809      	ldr	r0, [pc, #36]	; (800ff40 <_Bfree+0x40>)
 800ff1a:	218f      	movs	r1, #143	; 0x8f
 800ff1c:	f000 ff10 	bl	8010d40 <__assert_func>
 800ff20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ff24:	6006      	str	r6, [r0, #0]
 800ff26:	60c6      	str	r6, [r0, #12]
 800ff28:	b13c      	cbz	r4, 800ff3a <_Bfree+0x3a>
 800ff2a:	69eb      	ldr	r3, [r5, #28]
 800ff2c:	6862      	ldr	r2, [r4, #4]
 800ff2e:	68db      	ldr	r3, [r3, #12]
 800ff30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ff34:	6021      	str	r1, [r4, #0]
 800ff36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ff3a:	bd70      	pop	{r4, r5, r6, pc}
 800ff3c:	08013afe 	.word	0x08013afe
 800ff40:	08013bde 	.word	0x08013bde

0800ff44 <__multadd>:
 800ff44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff48:	690d      	ldr	r5, [r1, #16]
 800ff4a:	4607      	mov	r7, r0
 800ff4c:	460c      	mov	r4, r1
 800ff4e:	461e      	mov	r6, r3
 800ff50:	f101 0c14 	add.w	ip, r1, #20
 800ff54:	2000      	movs	r0, #0
 800ff56:	f8dc 3000 	ldr.w	r3, [ip]
 800ff5a:	b299      	uxth	r1, r3
 800ff5c:	fb02 6101 	mla	r1, r2, r1, r6
 800ff60:	0c1e      	lsrs	r6, r3, #16
 800ff62:	0c0b      	lsrs	r3, r1, #16
 800ff64:	fb02 3306 	mla	r3, r2, r6, r3
 800ff68:	b289      	uxth	r1, r1
 800ff6a:	3001      	adds	r0, #1
 800ff6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ff70:	4285      	cmp	r5, r0
 800ff72:	f84c 1b04 	str.w	r1, [ip], #4
 800ff76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ff7a:	dcec      	bgt.n	800ff56 <__multadd+0x12>
 800ff7c:	b30e      	cbz	r6, 800ffc2 <__multadd+0x7e>
 800ff7e:	68a3      	ldr	r3, [r4, #8]
 800ff80:	42ab      	cmp	r3, r5
 800ff82:	dc19      	bgt.n	800ffb8 <__multadd+0x74>
 800ff84:	6861      	ldr	r1, [r4, #4]
 800ff86:	4638      	mov	r0, r7
 800ff88:	3101      	adds	r1, #1
 800ff8a:	f7ff ff79 	bl	800fe80 <_Balloc>
 800ff8e:	4680      	mov	r8, r0
 800ff90:	b928      	cbnz	r0, 800ff9e <__multadd+0x5a>
 800ff92:	4602      	mov	r2, r0
 800ff94:	4b0c      	ldr	r3, [pc, #48]	; (800ffc8 <__multadd+0x84>)
 800ff96:	480d      	ldr	r0, [pc, #52]	; (800ffcc <__multadd+0x88>)
 800ff98:	21ba      	movs	r1, #186	; 0xba
 800ff9a:	f000 fed1 	bl	8010d40 <__assert_func>
 800ff9e:	6922      	ldr	r2, [r4, #16]
 800ffa0:	3202      	adds	r2, #2
 800ffa2:	f104 010c 	add.w	r1, r4, #12
 800ffa6:	0092      	lsls	r2, r2, #2
 800ffa8:	300c      	adds	r0, #12
 800ffaa:	f7fe fd18 	bl	800e9de <memcpy>
 800ffae:	4621      	mov	r1, r4
 800ffb0:	4638      	mov	r0, r7
 800ffb2:	f7ff ffa5 	bl	800ff00 <_Bfree>
 800ffb6:	4644      	mov	r4, r8
 800ffb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ffbc:	3501      	adds	r5, #1
 800ffbe:	615e      	str	r6, [r3, #20]
 800ffc0:	6125      	str	r5, [r4, #16]
 800ffc2:	4620      	mov	r0, r4
 800ffc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffc8:	08013b6d 	.word	0x08013b6d
 800ffcc:	08013bde 	.word	0x08013bde

0800ffd0 <__s2b>:
 800ffd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffd4:	460c      	mov	r4, r1
 800ffd6:	4615      	mov	r5, r2
 800ffd8:	461f      	mov	r7, r3
 800ffda:	2209      	movs	r2, #9
 800ffdc:	3308      	adds	r3, #8
 800ffde:	4606      	mov	r6, r0
 800ffe0:	fb93 f3f2 	sdiv	r3, r3, r2
 800ffe4:	2100      	movs	r1, #0
 800ffe6:	2201      	movs	r2, #1
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	db09      	blt.n	8010000 <__s2b+0x30>
 800ffec:	4630      	mov	r0, r6
 800ffee:	f7ff ff47 	bl	800fe80 <_Balloc>
 800fff2:	b940      	cbnz	r0, 8010006 <__s2b+0x36>
 800fff4:	4602      	mov	r2, r0
 800fff6:	4b19      	ldr	r3, [pc, #100]	; (801005c <__s2b+0x8c>)
 800fff8:	4819      	ldr	r0, [pc, #100]	; (8010060 <__s2b+0x90>)
 800fffa:	21d3      	movs	r1, #211	; 0xd3
 800fffc:	f000 fea0 	bl	8010d40 <__assert_func>
 8010000:	0052      	lsls	r2, r2, #1
 8010002:	3101      	adds	r1, #1
 8010004:	e7f0      	b.n	800ffe8 <__s2b+0x18>
 8010006:	9b08      	ldr	r3, [sp, #32]
 8010008:	6143      	str	r3, [r0, #20]
 801000a:	2d09      	cmp	r5, #9
 801000c:	f04f 0301 	mov.w	r3, #1
 8010010:	6103      	str	r3, [r0, #16]
 8010012:	dd16      	ble.n	8010042 <__s2b+0x72>
 8010014:	f104 0909 	add.w	r9, r4, #9
 8010018:	46c8      	mov	r8, r9
 801001a:	442c      	add	r4, r5
 801001c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010020:	4601      	mov	r1, r0
 8010022:	3b30      	subs	r3, #48	; 0x30
 8010024:	220a      	movs	r2, #10
 8010026:	4630      	mov	r0, r6
 8010028:	f7ff ff8c 	bl	800ff44 <__multadd>
 801002c:	45a0      	cmp	r8, r4
 801002e:	d1f5      	bne.n	801001c <__s2b+0x4c>
 8010030:	f1a5 0408 	sub.w	r4, r5, #8
 8010034:	444c      	add	r4, r9
 8010036:	1b2d      	subs	r5, r5, r4
 8010038:	1963      	adds	r3, r4, r5
 801003a:	42bb      	cmp	r3, r7
 801003c:	db04      	blt.n	8010048 <__s2b+0x78>
 801003e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010042:	340a      	adds	r4, #10
 8010044:	2509      	movs	r5, #9
 8010046:	e7f6      	b.n	8010036 <__s2b+0x66>
 8010048:	f814 3b01 	ldrb.w	r3, [r4], #1
 801004c:	4601      	mov	r1, r0
 801004e:	3b30      	subs	r3, #48	; 0x30
 8010050:	220a      	movs	r2, #10
 8010052:	4630      	mov	r0, r6
 8010054:	f7ff ff76 	bl	800ff44 <__multadd>
 8010058:	e7ee      	b.n	8010038 <__s2b+0x68>
 801005a:	bf00      	nop
 801005c:	08013b6d 	.word	0x08013b6d
 8010060:	08013bde 	.word	0x08013bde

08010064 <__hi0bits>:
 8010064:	0c03      	lsrs	r3, r0, #16
 8010066:	041b      	lsls	r3, r3, #16
 8010068:	b9d3      	cbnz	r3, 80100a0 <__hi0bits+0x3c>
 801006a:	0400      	lsls	r0, r0, #16
 801006c:	2310      	movs	r3, #16
 801006e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010072:	bf04      	itt	eq
 8010074:	0200      	lsleq	r0, r0, #8
 8010076:	3308      	addeq	r3, #8
 8010078:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801007c:	bf04      	itt	eq
 801007e:	0100      	lsleq	r0, r0, #4
 8010080:	3304      	addeq	r3, #4
 8010082:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010086:	bf04      	itt	eq
 8010088:	0080      	lsleq	r0, r0, #2
 801008a:	3302      	addeq	r3, #2
 801008c:	2800      	cmp	r0, #0
 801008e:	db05      	blt.n	801009c <__hi0bits+0x38>
 8010090:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010094:	f103 0301 	add.w	r3, r3, #1
 8010098:	bf08      	it	eq
 801009a:	2320      	moveq	r3, #32
 801009c:	4618      	mov	r0, r3
 801009e:	4770      	bx	lr
 80100a0:	2300      	movs	r3, #0
 80100a2:	e7e4      	b.n	801006e <__hi0bits+0xa>

080100a4 <__lo0bits>:
 80100a4:	6803      	ldr	r3, [r0, #0]
 80100a6:	f013 0207 	ands.w	r2, r3, #7
 80100aa:	d00c      	beq.n	80100c6 <__lo0bits+0x22>
 80100ac:	07d9      	lsls	r1, r3, #31
 80100ae:	d422      	bmi.n	80100f6 <__lo0bits+0x52>
 80100b0:	079a      	lsls	r2, r3, #30
 80100b2:	bf49      	itett	mi
 80100b4:	085b      	lsrmi	r3, r3, #1
 80100b6:	089b      	lsrpl	r3, r3, #2
 80100b8:	6003      	strmi	r3, [r0, #0]
 80100ba:	2201      	movmi	r2, #1
 80100bc:	bf5c      	itt	pl
 80100be:	6003      	strpl	r3, [r0, #0]
 80100c0:	2202      	movpl	r2, #2
 80100c2:	4610      	mov	r0, r2
 80100c4:	4770      	bx	lr
 80100c6:	b299      	uxth	r1, r3
 80100c8:	b909      	cbnz	r1, 80100ce <__lo0bits+0x2a>
 80100ca:	0c1b      	lsrs	r3, r3, #16
 80100cc:	2210      	movs	r2, #16
 80100ce:	b2d9      	uxtb	r1, r3
 80100d0:	b909      	cbnz	r1, 80100d6 <__lo0bits+0x32>
 80100d2:	3208      	adds	r2, #8
 80100d4:	0a1b      	lsrs	r3, r3, #8
 80100d6:	0719      	lsls	r1, r3, #28
 80100d8:	bf04      	itt	eq
 80100da:	091b      	lsreq	r3, r3, #4
 80100dc:	3204      	addeq	r2, #4
 80100de:	0799      	lsls	r1, r3, #30
 80100e0:	bf04      	itt	eq
 80100e2:	089b      	lsreq	r3, r3, #2
 80100e4:	3202      	addeq	r2, #2
 80100e6:	07d9      	lsls	r1, r3, #31
 80100e8:	d403      	bmi.n	80100f2 <__lo0bits+0x4e>
 80100ea:	085b      	lsrs	r3, r3, #1
 80100ec:	f102 0201 	add.w	r2, r2, #1
 80100f0:	d003      	beq.n	80100fa <__lo0bits+0x56>
 80100f2:	6003      	str	r3, [r0, #0]
 80100f4:	e7e5      	b.n	80100c2 <__lo0bits+0x1e>
 80100f6:	2200      	movs	r2, #0
 80100f8:	e7e3      	b.n	80100c2 <__lo0bits+0x1e>
 80100fa:	2220      	movs	r2, #32
 80100fc:	e7e1      	b.n	80100c2 <__lo0bits+0x1e>
	...

08010100 <__i2b>:
 8010100:	b510      	push	{r4, lr}
 8010102:	460c      	mov	r4, r1
 8010104:	2101      	movs	r1, #1
 8010106:	f7ff febb 	bl	800fe80 <_Balloc>
 801010a:	4602      	mov	r2, r0
 801010c:	b928      	cbnz	r0, 801011a <__i2b+0x1a>
 801010e:	4b05      	ldr	r3, [pc, #20]	; (8010124 <__i2b+0x24>)
 8010110:	4805      	ldr	r0, [pc, #20]	; (8010128 <__i2b+0x28>)
 8010112:	f240 1145 	movw	r1, #325	; 0x145
 8010116:	f000 fe13 	bl	8010d40 <__assert_func>
 801011a:	2301      	movs	r3, #1
 801011c:	6144      	str	r4, [r0, #20]
 801011e:	6103      	str	r3, [r0, #16]
 8010120:	bd10      	pop	{r4, pc}
 8010122:	bf00      	nop
 8010124:	08013b6d 	.word	0x08013b6d
 8010128:	08013bde 	.word	0x08013bde

0801012c <__multiply>:
 801012c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010130:	4691      	mov	r9, r2
 8010132:	690a      	ldr	r2, [r1, #16]
 8010134:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010138:	429a      	cmp	r2, r3
 801013a:	bfb8      	it	lt
 801013c:	460b      	movlt	r3, r1
 801013e:	460c      	mov	r4, r1
 8010140:	bfbc      	itt	lt
 8010142:	464c      	movlt	r4, r9
 8010144:	4699      	movlt	r9, r3
 8010146:	6927      	ldr	r7, [r4, #16]
 8010148:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801014c:	68a3      	ldr	r3, [r4, #8]
 801014e:	6861      	ldr	r1, [r4, #4]
 8010150:	eb07 060a 	add.w	r6, r7, sl
 8010154:	42b3      	cmp	r3, r6
 8010156:	b085      	sub	sp, #20
 8010158:	bfb8      	it	lt
 801015a:	3101      	addlt	r1, #1
 801015c:	f7ff fe90 	bl	800fe80 <_Balloc>
 8010160:	b930      	cbnz	r0, 8010170 <__multiply+0x44>
 8010162:	4602      	mov	r2, r0
 8010164:	4b44      	ldr	r3, [pc, #272]	; (8010278 <__multiply+0x14c>)
 8010166:	4845      	ldr	r0, [pc, #276]	; (801027c <__multiply+0x150>)
 8010168:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801016c:	f000 fde8 	bl	8010d40 <__assert_func>
 8010170:	f100 0514 	add.w	r5, r0, #20
 8010174:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010178:	462b      	mov	r3, r5
 801017a:	2200      	movs	r2, #0
 801017c:	4543      	cmp	r3, r8
 801017e:	d321      	bcc.n	80101c4 <__multiply+0x98>
 8010180:	f104 0314 	add.w	r3, r4, #20
 8010184:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010188:	f109 0314 	add.w	r3, r9, #20
 801018c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010190:	9202      	str	r2, [sp, #8]
 8010192:	1b3a      	subs	r2, r7, r4
 8010194:	3a15      	subs	r2, #21
 8010196:	f022 0203 	bic.w	r2, r2, #3
 801019a:	3204      	adds	r2, #4
 801019c:	f104 0115 	add.w	r1, r4, #21
 80101a0:	428f      	cmp	r7, r1
 80101a2:	bf38      	it	cc
 80101a4:	2204      	movcc	r2, #4
 80101a6:	9201      	str	r2, [sp, #4]
 80101a8:	9a02      	ldr	r2, [sp, #8]
 80101aa:	9303      	str	r3, [sp, #12]
 80101ac:	429a      	cmp	r2, r3
 80101ae:	d80c      	bhi.n	80101ca <__multiply+0x9e>
 80101b0:	2e00      	cmp	r6, #0
 80101b2:	dd03      	ble.n	80101bc <__multiply+0x90>
 80101b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d05b      	beq.n	8010274 <__multiply+0x148>
 80101bc:	6106      	str	r6, [r0, #16]
 80101be:	b005      	add	sp, #20
 80101c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101c4:	f843 2b04 	str.w	r2, [r3], #4
 80101c8:	e7d8      	b.n	801017c <__multiply+0x50>
 80101ca:	f8b3 a000 	ldrh.w	sl, [r3]
 80101ce:	f1ba 0f00 	cmp.w	sl, #0
 80101d2:	d024      	beq.n	801021e <__multiply+0xf2>
 80101d4:	f104 0e14 	add.w	lr, r4, #20
 80101d8:	46a9      	mov	r9, r5
 80101da:	f04f 0c00 	mov.w	ip, #0
 80101de:	f85e 2b04 	ldr.w	r2, [lr], #4
 80101e2:	f8d9 1000 	ldr.w	r1, [r9]
 80101e6:	fa1f fb82 	uxth.w	fp, r2
 80101ea:	b289      	uxth	r1, r1
 80101ec:	fb0a 110b 	mla	r1, sl, fp, r1
 80101f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80101f4:	f8d9 2000 	ldr.w	r2, [r9]
 80101f8:	4461      	add	r1, ip
 80101fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80101fe:	fb0a c20b 	mla	r2, sl, fp, ip
 8010202:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010206:	b289      	uxth	r1, r1
 8010208:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801020c:	4577      	cmp	r7, lr
 801020e:	f849 1b04 	str.w	r1, [r9], #4
 8010212:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010216:	d8e2      	bhi.n	80101de <__multiply+0xb2>
 8010218:	9a01      	ldr	r2, [sp, #4]
 801021a:	f845 c002 	str.w	ip, [r5, r2]
 801021e:	9a03      	ldr	r2, [sp, #12]
 8010220:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010224:	3304      	adds	r3, #4
 8010226:	f1b9 0f00 	cmp.w	r9, #0
 801022a:	d021      	beq.n	8010270 <__multiply+0x144>
 801022c:	6829      	ldr	r1, [r5, #0]
 801022e:	f104 0c14 	add.w	ip, r4, #20
 8010232:	46ae      	mov	lr, r5
 8010234:	f04f 0a00 	mov.w	sl, #0
 8010238:	f8bc b000 	ldrh.w	fp, [ip]
 801023c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010240:	fb09 220b 	mla	r2, r9, fp, r2
 8010244:	4452      	add	r2, sl
 8010246:	b289      	uxth	r1, r1
 8010248:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801024c:	f84e 1b04 	str.w	r1, [lr], #4
 8010250:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010254:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010258:	f8be 1000 	ldrh.w	r1, [lr]
 801025c:	fb09 110a 	mla	r1, r9, sl, r1
 8010260:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010264:	4567      	cmp	r7, ip
 8010266:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801026a:	d8e5      	bhi.n	8010238 <__multiply+0x10c>
 801026c:	9a01      	ldr	r2, [sp, #4]
 801026e:	50a9      	str	r1, [r5, r2]
 8010270:	3504      	adds	r5, #4
 8010272:	e799      	b.n	80101a8 <__multiply+0x7c>
 8010274:	3e01      	subs	r6, #1
 8010276:	e79b      	b.n	80101b0 <__multiply+0x84>
 8010278:	08013b6d 	.word	0x08013b6d
 801027c:	08013bde 	.word	0x08013bde

08010280 <__pow5mult>:
 8010280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010284:	4615      	mov	r5, r2
 8010286:	f012 0203 	ands.w	r2, r2, #3
 801028a:	4606      	mov	r6, r0
 801028c:	460f      	mov	r7, r1
 801028e:	d007      	beq.n	80102a0 <__pow5mult+0x20>
 8010290:	4c25      	ldr	r4, [pc, #148]	; (8010328 <__pow5mult+0xa8>)
 8010292:	3a01      	subs	r2, #1
 8010294:	2300      	movs	r3, #0
 8010296:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801029a:	f7ff fe53 	bl	800ff44 <__multadd>
 801029e:	4607      	mov	r7, r0
 80102a0:	10ad      	asrs	r5, r5, #2
 80102a2:	d03d      	beq.n	8010320 <__pow5mult+0xa0>
 80102a4:	69f4      	ldr	r4, [r6, #28]
 80102a6:	b97c      	cbnz	r4, 80102c8 <__pow5mult+0x48>
 80102a8:	2010      	movs	r0, #16
 80102aa:	f7fc fc81 	bl	800cbb0 <malloc>
 80102ae:	4602      	mov	r2, r0
 80102b0:	61f0      	str	r0, [r6, #28]
 80102b2:	b928      	cbnz	r0, 80102c0 <__pow5mult+0x40>
 80102b4:	4b1d      	ldr	r3, [pc, #116]	; (801032c <__pow5mult+0xac>)
 80102b6:	481e      	ldr	r0, [pc, #120]	; (8010330 <__pow5mult+0xb0>)
 80102b8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80102bc:	f000 fd40 	bl	8010d40 <__assert_func>
 80102c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80102c4:	6004      	str	r4, [r0, #0]
 80102c6:	60c4      	str	r4, [r0, #12]
 80102c8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80102cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80102d0:	b94c      	cbnz	r4, 80102e6 <__pow5mult+0x66>
 80102d2:	f240 2171 	movw	r1, #625	; 0x271
 80102d6:	4630      	mov	r0, r6
 80102d8:	f7ff ff12 	bl	8010100 <__i2b>
 80102dc:	2300      	movs	r3, #0
 80102de:	f8c8 0008 	str.w	r0, [r8, #8]
 80102e2:	4604      	mov	r4, r0
 80102e4:	6003      	str	r3, [r0, #0]
 80102e6:	f04f 0900 	mov.w	r9, #0
 80102ea:	07eb      	lsls	r3, r5, #31
 80102ec:	d50a      	bpl.n	8010304 <__pow5mult+0x84>
 80102ee:	4639      	mov	r1, r7
 80102f0:	4622      	mov	r2, r4
 80102f2:	4630      	mov	r0, r6
 80102f4:	f7ff ff1a 	bl	801012c <__multiply>
 80102f8:	4639      	mov	r1, r7
 80102fa:	4680      	mov	r8, r0
 80102fc:	4630      	mov	r0, r6
 80102fe:	f7ff fdff 	bl	800ff00 <_Bfree>
 8010302:	4647      	mov	r7, r8
 8010304:	106d      	asrs	r5, r5, #1
 8010306:	d00b      	beq.n	8010320 <__pow5mult+0xa0>
 8010308:	6820      	ldr	r0, [r4, #0]
 801030a:	b938      	cbnz	r0, 801031c <__pow5mult+0x9c>
 801030c:	4622      	mov	r2, r4
 801030e:	4621      	mov	r1, r4
 8010310:	4630      	mov	r0, r6
 8010312:	f7ff ff0b 	bl	801012c <__multiply>
 8010316:	6020      	str	r0, [r4, #0]
 8010318:	f8c0 9000 	str.w	r9, [r0]
 801031c:	4604      	mov	r4, r0
 801031e:	e7e4      	b.n	80102ea <__pow5mult+0x6a>
 8010320:	4638      	mov	r0, r7
 8010322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010326:	bf00      	nop
 8010328:	08013d28 	.word	0x08013d28
 801032c:	08013afe 	.word	0x08013afe
 8010330:	08013bde 	.word	0x08013bde

08010334 <__lshift>:
 8010334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010338:	460c      	mov	r4, r1
 801033a:	6849      	ldr	r1, [r1, #4]
 801033c:	6923      	ldr	r3, [r4, #16]
 801033e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010342:	68a3      	ldr	r3, [r4, #8]
 8010344:	4607      	mov	r7, r0
 8010346:	4691      	mov	r9, r2
 8010348:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801034c:	f108 0601 	add.w	r6, r8, #1
 8010350:	42b3      	cmp	r3, r6
 8010352:	db0b      	blt.n	801036c <__lshift+0x38>
 8010354:	4638      	mov	r0, r7
 8010356:	f7ff fd93 	bl	800fe80 <_Balloc>
 801035a:	4605      	mov	r5, r0
 801035c:	b948      	cbnz	r0, 8010372 <__lshift+0x3e>
 801035e:	4602      	mov	r2, r0
 8010360:	4b28      	ldr	r3, [pc, #160]	; (8010404 <__lshift+0xd0>)
 8010362:	4829      	ldr	r0, [pc, #164]	; (8010408 <__lshift+0xd4>)
 8010364:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010368:	f000 fcea 	bl	8010d40 <__assert_func>
 801036c:	3101      	adds	r1, #1
 801036e:	005b      	lsls	r3, r3, #1
 8010370:	e7ee      	b.n	8010350 <__lshift+0x1c>
 8010372:	2300      	movs	r3, #0
 8010374:	f100 0114 	add.w	r1, r0, #20
 8010378:	f100 0210 	add.w	r2, r0, #16
 801037c:	4618      	mov	r0, r3
 801037e:	4553      	cmp	r3, sl
 8010380:	db33      	blt.n	80103ea <__lshift+0xb6>
 8010382:	6920      	ldr	r0, [r4, #16]
 8010384:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010388:	f104 0314 	add.w	r3, r4, #20
 801038c:	f019 091f 	ands.w	r9, r9, #31
 8010390:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010394:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010398:	d02b      	beq.n	80103f2 <__lshift+0xbe>
 801039a:	f1c9 0e20 	rsb	lr, r9, #32
 801039e:	468a      	mov	sl, r1
 80103a0:	2200      	movs	r2, #0
 80103a2:	6818      	ldr	r0, [r3, #0]
 80103a4:	fa00 f009 	lsl.w	r0, r0, r9
 80103a8:	4310      	orrs	r0, r2
 80103aa:	f84a 0b04 	str.w	r0, [sl], #4
 80103ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80103b2:	459c      	cmp	ip, r3
 80103b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80103b8:	d8f3      	bhi.n	80103a2 <__lshift+0x6e>
 80103ba:	ebac 0304 	sub.w	r3, ip, r4
 80103be:	3b15      	subs	r3, #21
 80103c0:	f023 0303 	bic.w	r3, r3, #3
 80103c4:	3304      	adds	r3, #4
 80103c6:	f104 0015 	add.w	r0, r4, #21
 80103ca:	4584      	cmp	ip, r0
 80103cc:	bf38      	it	cc
 80103ce:	2304      	movcc	r3, #4
 80103d0:	50ca      	str	r2, [r1, r3]
 80103d2:	b10a      	cbz	r2, 80103d8 <__lshift+0xa4>
 80103d4:	f108 0602 	add.w	r6, r8, #2
 80103d8:	3e01      	subs	r6, #1
 80103da:	4638      	mov	r0, r7
 80103dc:	612e      	str	r6, [r5, #16]
 80103de:	4621      	mov	r1, r4
 80103e0:	f7ff fd8e 	bl	800ff00 <_Bfree>
 80103e4:	4628      	mov	r0, r5
 80103e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80103ee:	3301      	adds	r3, #1
 80103f0:	e7c5      	b.n	801037e <__lshift+0x4a>
 80103f2:	3904      	subs	r1, #4
 80103f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80103f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80103fc:	459c      	cmp	ip, r3
 80103fe:	d8f9      	bhi.n	80103f4 <__lshift+0xc0>
 8010400:	e7ea      	b.n	80103d8 <__lshift+0xa4>
 8010402:	bf00      	nop
 8010404:	08013b6d 	.word	0x08013b6d
 8010408:	08013bde 	.word	0x08013bde

0801040c <__mcmp>:
 801040c:	b530      	push	{r4, r5, lr}
 801040e:	6902      	ldr	r2, [r0, #16]
 8010410:	690c      	ldr	r4, [r1, #16]
 8010412:	1b12      	subs	r2, r2, r4
 8010414:	d10e      	bne.n	8010434 <__mcmp+0x28>
 8010416:	f100 0314 	add.w	r3, r0, #20
 801041a:	3114      	adds	r1, #20
 801041c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010420:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010424:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010428:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801042c:	42a5      	cmp	r5, r4
 801042e:	d003      	beq.n	8010438 <__mcmp+0x2c>
 8010430:	d305      	bcc.n	801043e <__mcmp+0x32>
 8010432:	2201      	movs	r2, #1
 8010434:	4610      	mov	r0, r2
 8010436:	bd30      	pop	{r4, r5, pc}
 8010438:	4283      	cmp	r3, r0
 801043a:	d3f3      	bcc.n	8010424 <__mcmp+0x18>
 801043c:	e7fa      	b.n	8010434 <__mcmp+0x28>
 801043e:	f04f 32ff 	mov.w	r2, #4294967295
 8010442:	e7f7      	b.n	8010434 <__mcmp+0x28>

08010444 <__mdiff>:
 8010444:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010448:	460c      	mov	r4, r1
 801044a:	4606      	mov	r6, r0
 801044c:	4611      	mov	r1, r2
 801044e:	4620      	mov	r0, r4
 8010450:	4690      	mov	r8, r2
 8010452:	f7ff ffdb 	bl	801040c <__mcmp>
 8010456:	1e05      	subs	r5, r0, #0
 8010458:	d110      	bne.n	801047c <__mdiff+0x38>
 801045a:	4629      	mov	r1, r5
 801045c:	4630      	mov	r0, r6
 801045e:	f7ff fd0f 	bl	800fe80 <_Balloc>
 8010462:	b930      	cbnz	r0, 8010472 <__mdiff+0x2e>
 8010464:	4b3a      	ldr	r3, [pc, #232]	; (8010550 <__mdiff+0x10c>)
 8010466:	4602      	mov	r2, r0
 8010468:	f240 2137 	movw	r1, #567	; 0x237
 801046c:	4839      	ldr	r0, [pc, #228]	; (8010554 <__mdiff+0x110>)
 801046e:	f000 fc67 	bl	8010d40 <__assert_func>
 8010472:	2301      	movs	r3, #1
 8010474:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010478:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801047c:	bfa4      	itt	ge
 801047e:	4643      	movge	r3, r8
 8010480:	46a0      	movge	r8, r4
 8010482:	4630      	mov	r0, r6
 8010484:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010488:	bfa6      	itte	ge
 801048a:	461c      	movge	r4, r3
 801048c:	2500      	movge	r5, #0
 801048e:	2501      	movlt	r5, #1
 8010490:	f7ff fcf6 	bl	800fe80 <_Balloc>
 8010494:	b920      	cbnz	r0, 80104a0 <__mdiff+0x5c>
 8010496:	4b2e      	ldr	r3, [pc, #184]	; (8010550 <__mdiff+0x10c>)
 8010498:	4602      	mov	r2, r0
 801049a:	f240 2145 	movw	r1, #581	; 0x245
 801049e:	e7e5      	b.n	801046c <__mdiff+0x28>
 80104a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80104a4:	6926      	ldr	r6, [r4, #16]
 80104a6:	60c5      	str	r5, [r0, #12]
 80104a8:	f104 0914 	add.w	r9, r4, #20
 80104ac:	f108 0514 	add.w	r5, r8, #20
 80104b0:	f100 0e14 	add.w	lr, r0, #20
 80104b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80104b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80104bc:	f108 0210 	add.w	r2, r8, #16
 80104c0:	46f2      	mov	sl, lr
 80104c2:	2100      	movs	r1, #0
 80104c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80104c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80104cc:	fa11 f88b 	uxtah	r8, r1, fp
 80104d0:	b299      	uxth	r1, r3
 80104d2:	0c1b      	lsrs	r3, r3, #16
 80104d4:	eba8 0801 	sub.w	r8, r8, r1
 80104d8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80104dc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80104e0:	fa1f f888 	uxth.w	r8, r8
 80104e4:	1419      	asrs	r1, r3, #16
 80104e6:	454e      	cmp	r6, r9
 80104e8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80104ec:	f84a 3b04 	str.w	r3, [sl], #4
 80104f0:	d8e8      	bhi.n	80104c4 <__mdiff+0x80>
 80104f2:	1b33      	subs	r3, r6, r4
 80104f4:	3b15      	subs	r3, #21
 80104f6:	f023 0303 	bic.w	r3, r3, #3
 80104fa:	3304      	adds	r3, #4
 80104fc:	3415      	adds	r4, #21
 80104fe:	42a6      	cmp	r6, r4
 8010500:	bf38      	it	cc
 8010502:	2304      	movcc	r3, #4
 8010504:	441d      	add	r5, r3
 8010506:	4473      	add	r3, lr
 8010508:	469e      	mov	lr, r3
 801050a:	462e      	mov	r6, r5
 801050c:	4566      	cmp	r6, ip
 801050e:	d30e      	bcc.n	801052e <__mdiff+0xea>
 8010510:	f10c 0203 	add.w	r2, ip, #3
 8010514:	1b52      	subs	r2, r2, r5
 8010516:	f022 0203 	bic.w	r2, r2, #3
 801051a:	3d03      	subs	r5, #3
 801051c:	45ac      	cmp	ip, r5
 801051e:	bf38      	it	cc
 8010520:	2200      	movcc	r2, #0
 8010522:	4413      	add	r3, r2
 8010524:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010528:	b17a      	cbz	r2, 801054a <__mdiff+0x106>
 801052a:	6107      	str	r7, [r0, #16]
 801052c:	e7a4      	b.n	8010478 <__mdiff+0x34>
 801052e:	f856 8b04 	ldr.w	r8, [r6], #4
 8010532:	fa11 f288 	uxtah	r2, r1, r8
 8010536:	1414      	asrs	r4, r2, #16
 8010538:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801053c:	b292      	uxth	r2, r2
 801053e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010542:	f84e 2b04 	str.w	r2, [lr], #4
 8010546:	1421      	asrs	r1, r4, #16
 8010548:	e7e0      	b.n	801050c <__mdiff+0xc8>
 801054a:	3f01      	subs	r7, #1
 801054c:	e7ea      	b.n	8010524 <__mdiff+0xe0>
 801054e:	bf00      	nop
 8010550:	08013b6d 	.word	0x08013b6d
 8010554:	08013bde 	.word	0x08013bde

08010558 <__ulp>:
 8010558:	b082      	sub	sp, #8
 801055a:	ed8d 0b00 	vstr	d0, [sp]
 801055e:	9a01      	ldr	r2, [sp, #4]
 8010560:	4b0f      	ldr	r3, [pc, #60]	; (80105a0 <__ulp+0x48>)
 8010562:	4013      	ands	r3, r2
 8010564:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8010568:	2b00      	cmp	r3, #0
 801056a:	dc08      	bgt.n	801057e <__ulp+0x26>
 801056c:	425b      	negs	r3, r3
 801056e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8010572:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010576:	da04      	bge.n	8010582 <__ulp+0x2a>
 8010578:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801057c:	4113      	asrs	r3, r2
 801057e:	2200      	movs	r2, #0
 8010580:	e008      	b.n	8010594 <__ulp+0x3c>
 8010582:	f1a2 0314 	sub.w	r3, r2, #20
 8010586:	2b1e      	cmp	r3, #30
 8010588:	bfda      	itte	le
 801058a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801058e:	40da      	lsrle	r2, r3
 8010590:	2201      	movgt	r2, #1
 8010592:	2300      	movs	r3, #0
 8010594:	4619      	mov	r1, r3
 8010596:	4610      	mov	r0, r2
 8010598:	ec41 0b10 	vmov	d0, r0, r1
 801059c:	b002      	add	sp, #8
 801059e:	4770      	bx	lr
 80105a0:	7ff00000 	.word	0x7ff00000

080105a4 <__b2d>:
 80105a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105a8:	6906      	ldr	r6, [r0, #16]
 80105aa:	f100 0814 	add.w	r8, r0, #20
 80105ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80105b2:	1f37      	subs	r7, r6, #4
 80105b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80105b8:	4610      	mov	r0, r2
 80105ba:	f7ff fd53 	bl	8010064 <__hi0bits>
 80105be:	f1c0 0320 	rsb	r3, r0, #32
 80105c2:	280a      	cmp	r0, #10
 80105c4:	600b      	str	r3, [r1, #0]
 80105c6:	491b      	ldr	r1, [pc, #108]	; (8010634 <__b2d+0x90>)
 80105c8:	dc15      	bgt.n	80105f6 <__b2d+0x52>
 80105ca:	f1c0 0c0b 	rsb	ip, r0, #11
 80105ce:	fa22 f30c 	lsr.w	r3, r2, ip
 80105d2:	45b8      	cmp	r8, r7
 80105d4:	ea43 0501 	orr.w	r5, r3, r1
 80105d8:	bf34      	ite	cc
 80105da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80105de:	2300      	movcs	r3, #0
 80105e0:	3015      	adds	r0, #21
 80105e2:	fa02 f000 	lsl.w	r0, r2, r0
 80105e6:	fa23 f30c 	lsr.w	r3, r3, ip
 80105ea:	4303      	orrs	r3, r0
 80105ec:	461c      	mov	r4, r3
 80105ee:	ec45 4b10 	vmov	d0, r4, r5
 80105f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105f6:	45b8      	cmp	r8, r7
 80105f8:	bf3a      	itte	cc
 80105fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80105fe:	f1a6 0708 	subcc.w	r7, r6, #8
 8010602:	2300      	movcs	r3, #0
 8010604:	380b      	subs	r0, #11
 8010606:	d012      	beq.n	801062e <__b2d+0x8a>
 8010608:	f1c0 0120 	rsb	r1, r0, #32
 801060c:	fa23 f401 	lsr.w	r4, r3, r1
 8010610:	4082      	lsls	r2, r0
 8010612:	4322      	orrs	r2, r4
 8010614:	4547      	cmp	r7, r8
 8010616:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801061a:	bf8c      	ite	hi
 801061c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010620:	2200      	movls	r2, #0
 8010622:	4083      	lsls	r3, r0
 8010624:	40ca      	lsrs	r2, r1
 8010626:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801062a:	4313      	orrs	r3, r2
 801062c:	e7de      	b.n	80105ec <__b2d+0x48>
 801062e:	ea42 0501 	orr.w	r5, r2, r1
 8010632:	e7db      	b.n	80105ec <__b2d+0x48>
 8010634:	3ff00000 	.word	0x3ff00000

08010638 <__d2b>:
 8010638:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801063c:	460f      	mov	r7, r1
 801063e:	2101      	movs	r1, #1
 8010640:	ec59 8b10 	vmov	r8, r9, d0
 8010644:	4616      	mov	r6, r2
 8010646:	f7ff fc1b 	bl	800fe80 <_Balloc>
 801064a:	4604      	mov	r4, r0
 801064c:	b930      	cbnz	r0, 801065c <__d2b+0x24>
 801064e:	4602      	mov	r2, r0
 8010650:	4b24      	ldr	r3, [pc, #144]	; (80106e4 <__d2b+0xac>)
 8010652:	4825      	ldr	r0, [pc, #148]	; (80106e8 <__d2b+0xb0>)
 8010654:	f240 310f 	movw	r1, #783	; 0x30f
 8010658:	f000 fb72 	bl	8010d40 <__assert_func>
 801065c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010660:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010664:	bb2d      	cbnz	r5, 80106b2 <__d2b+0x7a>
 8010666:	9301      	str	r3, [sp, #4]
 8010668:	f1b8 0300 	subs.w	r3, r8, #0
 801066c:	d026      	beq.n	80106bc <__d2b+0x84>
 801066e:	4668      	mov	r0, sp
 8010670:	9300      	str	r3, [sp, #0]
 8010672:	f7ff fd17 	bl	80100a4 <__lo0bits>
 8010676:	e9dd 1200 	ldrd	r1, r2, [sp]
 801067a:	b1e8      	cbz	r0, 80106b8 <__d2b+0x80>
 801067c:	f1c0 0320 	rsb	r3, r0, #32
 8010680:	fa02 f303 	lsl.w	r3, r2, r3
 8010684:	430b      	orrs	r3, r1
 8010686:	40c2      	lsrs	r2, r0
 8010688:	6163      	str	r3, [r4, #20]
 801068a:	9201      	str	r2, [sp, #4]
 801068c:	9b01      	ldr	r3, [sp, #4]
 801068e:	61a3      	str	r3, [r4, #24]
 8010690:	2b00      	cmp	r3, #0
 8010692:	bf14      	ite	ne
 8010694:	2202      	movne	r2, #2
 8010696:	2201      	moveq	r2, #1
 8010698:	6122      	str	r2, [r4, #16]
 801069a:	b1bd      	cbz	r5, 80106cc <__d2b+0x94>
 801069c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80106a0:	4405      	add	r5, r0
 80106a2:	603d      	str	r5, [r7, #0]
 80106a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80106a8:	6030      	str	r0, [r6, #0]
 80106aa:	4620      	mov	r0, r4
 80106ac:	b003      	add	sp, #12
 80106ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80106b6:	e7d6      	b.n	8010666 <__d2b+0x2e>
 80106b8:	6161      	str	r1, [r4, #20]
 80106ba:	e7e7      	b.n	801068c <__d2b+0x54>
 80106bc:	a801      	add	r0, sp, #4
 80106be:	f7ff fcf1 	bl	80100a4 <__lo0bits>
 80106c2:	9b01      	ldr	r3, [sp, #4]
 80106c4:	6163      	str	r3, [r4, #20]
 80106c6:	3020      	adds	r0, #32
 80106c8:	2201      	movs	r2, #1
 80106ca:	e7e5      	b.n	8010698 <__d2b+0x60>
 80106cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80106d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80106d4:	6038      	str	r0, [r7, #0]
 80106d6:	6918      	ldr	r0, [r3, #16]
 80106d8:	f7ff fcc4 	bl	8010064 <__hi0bits>
 80106dc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80106e0:	e7e2      	b.n	80106a8 <__d2b+0x70>
 80106e2:	bf00      	nop
 80106e4:	08013b6d 	.word	0x08013b6d
 80106e8:	08013bde 	.word	0x08013bde

080106ec <__ratio>:
 80106ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106f0:	4688      	mov	r8, r1
 80106f2:	4669      	mov	r1, sp
 80106f4:	4681      	mov	r9, r0
 80106f6:	f7ff ff55 	bl	80105a4 <__b2d>
 80106fa:	a901      	add	r1, sp, #4
 80106fc:	4640      	mov	r0, r8
 80106fe:	ec55 4b10 	vmov	r4, r5, d0
 8010702:	f7ff ff4f 	bl	80105a4 <__b2d>
 8010706:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801070a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801070e:	eba3 0c02 	sub.w	ip, r3, r2
 8010712:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010716:	1a9b      	subs	r3, r3, r2
 8010718:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801071c:	ec51 0b10 	vmov	r0, r1, d0
 8010720:	2b00      	cmp	r3, #0
 8010722:	bfd6      	itet	le
 8010724:	460a      	movle	r2, r1
 8010726:	462a      	movgt	r2, r5
 8010728:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801072c:	468b      	mov	fp, r1
 801072e:	462f      	mov	r7, r5
 8010730:	bfd4      	ite	le
 8010732:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010736:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801073a:	4620      	mov	r0, r4
 801073c:	ee10 2a10 	vmov	r2, s0
 8010740:	465b      	mov	r3, fp
 8010742:	4639      	mov	r1, r7
 8010744:	f7f0 f882 	bl	800084c <__aeabi_ddiv>
 8010748:	ec41 0b10 	vmov	d0, r0, r1
 801074c:	b003      	add	sp, #12
 801074e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010752 <__copybits>:
 8010752:	3901      	subs	r1, #1
 8010754:	b570      	push	{r4, r5, r6, lr}
 8010756:	1149      	asrs	r1, r1, #5
 8010758:	6914      	ldr	r4, [r2, #16]
 801075a:	3101      	adds	r1, #1
 801075c:	f102 0314 	add.w	r3, r2, #20
 8010760:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010764:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010768:	1f05      	subs	r5, r0, #4
 801076a:	42a3      	cmp	r3, r4
 801076c:	d30c      	bcc.n	8010788 <__copybits+0x36>
 801076e:	1aa3      	subs	r3, r4, r2
 8010770:	3b11      	subs	r3, #17
 8010772:	f023 0303 	bic.w	r3, r3, #3
 8010776:	3211      	adds	r2, #17
 8010778:	42a2      	cmp	r2, r4
 801077a:	bf88      	it	hi
 801077c:	2300      	movhi	r3, #0
 801077e:	4418      	add	r0, r3
 8010780:	2300      	movs	r3, #0
 8010782:	4288      	cmp	r0, r1
 8010784:	d305      	bcc.n	8010792 <__copybits+0x40>
 8010786:	bd70      	pop	{r4, r5, r6, pc}
 8010788:	f853 6b04 	ldr.w	r6, [r3], #4
 801078c:	f845 6f04 	str.w	r6, [r5, #4]!
 8010790:	e7eb      	b.n	801076a <__copybits+0x18>
 8010792:	f840 3b04 	str.w	r3, [r0], #4
 8010796:	e7f4      	b.n	8010782 <__copybits+0x30>

08010798 <__any_on>:
 8010798:	f100 0214 	add.w	r2, r0, #20
 801079c:	6900      	ldr	r0, [r0, #16]
 801079e:	114b      	asrs	r3, r1, #5
 80107a0:	4298      	cmp	r0, r3
 80107a2:	b510      	push	{r4, lr}
 80107a4:	db11      	blt.n	80107ca <__any_on+0x32>
 80107a6:	dd0a      	ble.n	80107be <__any_on+0x26>
 80107a8:	f011 011f 	ands.w	r1, r1, #31
 80107ac:	d007      	beq.n	80107be <__any_on+0x26>
 80107ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80107b2:	fa24 f001 	lsr.w	r0, r4, r1
 80107b6:	fa00 f101 	lsl.w	r1, r0, r1
 80107ba:	428c      	cmp	r4, r1
 80107bc:	d10b      	bne.n	80107d6 <__any_on+0x3e>
 80107be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80107c2:	4293      	cmp	r3, r2
 80107c4:	d803      	bhi.n	80107ce <__any_on+0x36>
 80107c6:	2000      	movs	r0, #0
 80107c8:	bd10      	pop	{r4, pc}
 80107ca:	4603      	mov	r3, r0
 80107cc:	e7f7      	b.n	80107be <__any_on+0x26>
 80107ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80107d2:	2900      	cmp	r1, #0
 80107d4:	d0f5      	beq.n	80107c2 <__any_on+0x2a>
 80107d6:	2001      	movs	r0, #1
 80107d8:	e7f6      	b.n	80107c8 <__any_on+0x30>
	...

080107dc <_strtol_l.constprop.0>:
 80107dc:	2b01      	cmp	r3, #1
 80107de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107e2:	d001      	beq.n	80107e8 <_strtol_l.constprop.0+0xc>
 80107e4:	2b24      	cmp	r3, #36	; 0x24
 80107e6:	d906      	bls.n	80107f6 <_strtol_l.constprop.0+0x1a>
 80107e8:	f7fe f8cc 	bl	800e984 <__errno>
 80107ec:	2316      	movs	r3, #22
 80107ee:	6003      	str	r3, [r0, #0]
 80107f0:	2000      	movs	r0, #0
 80107f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80108dc <_strtol_l.constprop.0+0x100>
 80107fa:	460d      	mov	r5, r1
 80107fc:	462e      	mov	r6, r5
 80107fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010802:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8010806:	f017 0708 	ands.w	r7, r7, #8
 801080a:	d1f7      	bne.n	80107fc <_strtol_l.constprop.0+0x20>
 801080c:	2c2d      	cmp	r4, #45	; 0x2d
 801080e:	d132      	bne.n	8010876 <_strtol_l.constprop.0+0x9a>
 8010810:	782c      	ldrb	r4, [r5, #0]
 8010812:	2701      	movs	r7, #1
 8010814:	1cb5      	adds	r5, r6, #2
 8010816:	2b00      	cmp	r3, #0
 8010818:	d05b      	beq.n	80108d2 <_strtol_l.constprop.0+0xf6>
 801081a:	2b10      	cmp	r3, #16
 801081c:	d109      	bne.n	8010832 <_strtol_l.constprop.0+0x56>
 801081e:	2c30      	cmp	r4, #48	; 0x30
 8010820:	d107      	bne.n	8010832 <_strtol_l.constprop.0+0x56>
 8010822:	782c      	ldrb	r4, [r5, #0]
 8010824:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010828:	2c58      	cmp	r4, #88	; 0x58
 801082a:	d14d      	bne.n	80108c8 <_strtol_l.constprop.0+0xec>
 801082c:	786c      	ldrb	r4, [r5, #1]
 801082e:	2310      	movs	r3, #16
 8010830:	3502      	adds	r5, #2
 8010832:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010836:	f108 38ff 	add.w	r8, r8, #4294967295
 801083a:	f04f 0e00 	mov.w	lr, #0
 801083e:	fbb8 f9f3 	udiv	r9, r8, r3
 8010842:	4676      	mov	r6, lr
 8010844:	fb03 8a19 	mls	sl, r3, r9, r8
 8010848:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801084c:	f1bc 0f09 	cmp.w	ip, #9
 8010850:	d816      	bhi.n	8010880 <_strtol_l.constprop.0+0xa4>
 8010852:	4664      	mov	r4, ip
 8010854:	42a3      	cmp	r3, r4
 8010856:	dd24      	ble.n	80108a2 <_strtol_l.constprop.0+0xc6>
 8010858:	f1be 3fff 	cmp.w	lr, #4294967295
 801085c:	d008      	beq.n	8010870 <_strtol_l.constprop.0+0x94>
 801085e:	45b1      	cmp	r9, r6
 8010860:	d31c      	bcc.n	801089c <_strtol_l.constprop.0+0xc0>
 8010862:	d101      	bne.n	8010868 <_strtol_l.constprop.0+0x8c>
 8010864:	45a2      	cmp	sl, r4
 8010866:	db19      	blt.n	801089c <_strtol_l.constprop.0+0xc0>
 8010868:	fb06 4603 	mla	r6, r6, r3, r4
 801086c:	f04f 0e01 	mov.w	lr, #1
 8010870:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010874:	e7e8      	b.n	8010848 <_strtol_l.constprop.0+0x6c>
 8010876:	2c2b      	cmp	r4, #43	; 0x2b
 8010878:	bf04      	itt	eq
 801087a:	782c      	ldrbeq	r4, [r5, #0]
 801087c:	1cb5      	addeq	r5, r6, #2
 801087e:	e7ca      	b.n	8010816 <_strtol_l.constprop.0+0x3a>
 8010880:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010884:	f1bc 0f19 	cmp.w	ip, #25
 8010888:	d801      	bhi.n	801088e <_strtol_l.constprop.0+0xb2>
 801088a:	3c37      	subs	r4, #55	; 0x37
 801088c:	e7e2      	b.n	8010854 <_strtol_l.constprop.0+0x78>
 801088e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010892:	f1bc 0f19 	cmp.w	ip, #25
 8010896:	d804      	bhi.n	80108a2 <_strtol_l.constprop.0+0xc6>
 8010898:	3c57      	subs	r4, #87	; 0x57
 801089a:	e7db      	b.n	8010854 <_strtol_l.constprop.0+0x78>
 801089c:	f04f 3eff 	mov.w	lr, #4294967295
 80108a0:	e7e6      	b.n	8010870 <_strtol_l.constprop.0+0x94>
 80108a2:	f1be 3fff 	cmp.w	lr, #4294967295
 80108a6:	d105      	bne.n	80108b4 <_strtol_l.constprop.0+0xd8>
 80108a8:	2322      	movs	r3, #34	; 0x22
 80108aa:	6003      	str	r3, [r0, #0]
 80108ac:	4646      	mov	r6, r8
 80108ae:	b942      	cbnz	r2, 80108c2 <_strtol_l.constprop.0+0xe6>
 80108b0:	4630      	mov	r0, r6
 80108b2:	e79e      	b.n	80107f2 <_strtol_l.constprop.0+0x16>
 80108b4:	b107      	cbz	r7, 80108b8 <_strtol_l.constprop.0+0xdc>
 80108b6:	4276      	negs	r6, r6
 80108b8:	2a00      	cmp	r2, #0
 80108ba:	d0f9      	beq.n	80108b0 <_strtol_l.constprop.0+0xd4>
 80108bc:	f1be 0f00 	cmp.w	lr, #0
 80108c0:	d000      	beq.n	80108c4 <_strtol_l.constprop.0+0xe8>
 80108c2:	1e69      	subs	r1, r5, #1
 80108c4:	6011      	str	r1, [r2, #0]
 80108c6:	e7f3      	b.n	80108b0 <_strtol_l.constprop.0+0xd4>
 80108c8:	2430      	movs	r4, #48	; 0x30
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d1b1      	bne.n	8010832 <_strtol_l.constprop.0+0x56>
 80108ce:	2308      	movs	r3, #8
 80108d0:	e7af      	b.n	8010832 <_strtol_l.constprop.0+0x56>
 80108d2:	2c30      	cmp	r4, #48	; 0x30
 80108d4:	d0a5      	beq.n	8010822 <_strtol_l.constprop.0+0x46>
 80108d6:	230a      	movs	r3, #10
 80108d8:	e7ab      	b.n	8010832 <_strtol_l.constprop.0+0x56>
 80108da:	bf00      	nop
 80108dc:	08013d35 	.word	0x08013d35

080108e0 <_strtol_r>:
 80108e0:	f7ff bf7c 	b.w	80107dc <_strtol_l.constprop.0>

080108e4 <__ascii_wctomb>:
 80108e4:	b149      	cbz	r1, 80108fa <__ascii_wctomb+0x16>
 80108e6:	2aff      	cmp	r2, #255	; 0xff
 80108e8:	bf85      	ittet	hi
 80108ea:	238a      	movhi	r3, #138	; 0x8a
 80108ec:	6003      	strhi	r3, [r0, #0]
 80108ee:	700a      	strbls	r2, [r1, #0]
 80108f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80108f4:	bf98      	it	ls
 80108f6:	2001      	movls	r0, #1
 80108f8:	4770      	bx	lr
 80108fa:	4608      	mov	r0, r1
 80108fc:	4770      	bx	lr

080108fe <__ssputs_r>:
 80108fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010902:	688e      	ldr	r6, [r1, #8]
 8010904:	461f      	mov	r7, r3
 8010906:	42be      	cmp	r6, r7
 8010908:	680b      	ldr	r3, [r1, #0]
 801090a:	4682      	mov	sl, r0
 801090c:	460c      	mov	r4, r1
 801090e:	4690      	mov	r8, r2
 8010910:	d82c      	bhi.n	801096c <__ssputs_r+0x6e>
 8010912:	898a      	ldrh	r2, [r1, #12]
 8010914:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010918:	d026      	beq.n	8010968 <__ssputs_r+0x6a>
 801091a:	6965      	ldr	r5, [r4, #20]
 801091c:	6909      	ldr	r1, [r1, #16]
 801091e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010922:	eba3 0901 	sub.w	r9, r3, r1
 8010926:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801092a:	1c7b      	adds	r3, r7, #1
 801092c:	444b      	add	r3, r9
 801092e:	106d      	asrs	r5, r5, #1
 8010930:	429d      	cmp	r5, r3
 8010932:	bf38      	it	cc
 8010934:	461d      	movcc	r5, r3
 8010936:	0553      	lsls	r3, r2, #21
 8010938:	d527      	bpl.n	801098a <__ssputs_r+0x8c>
 801093a:	4629      	mov	r1, r5
 801093c:	f7fc f968 	bl	800cc10 <_malloc_r>
 8010940:	4606      	mov	r6, r0
 8010942:	b360      	cbz	r0, 801099e <__ssputs_r+0xa0>
 8010944:	6921      	ldr	r1, [r4, #16]
 8010946:	464a      	mov	r2, r9
 8010948:	f7fe f849 	bl	800e9de <memcpy>
 801094c:	89a3      	ldrh	r3, [r4, #12]
 801094e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010956:	81a3      	strh	r3, [r4, #12]
 8010958:	6126      	str	r6, [r4, #16]
 801095a:	6165      	str	r5, [r4, #20]
 801095c:	444e      	add	r6, r9
 801095e:	eba5 0509 	sub.w	r5, r5, r9
 8010962:	6026      	str	r6, [r4, #0]
 8010964:	60a5      	str	r5, [r4, #8]
 8010966:	463e      	mov	r6, r7
 8010968:	42be      	cmp	r6, r7
 801096a:	d900      	bls.n	801096e <__ssputs_r+0x70>
 801096c:	463e      	mov	r6, r7
 801096e:	6820      	ldr	r0, [r4, #0]
 8010970:	4632      	mov	r2, r6
 8010972:	4641      	mov	r1, r8
 8010974:	f000 f9ca 	bl	8010d0c <memmove>
 8010978:	68a3      	ldr	r3, [r4, #8]
 801097a:	1b9b      	subs	r3, r3, r6
 801097c:	60a3      	str	r3, [r4, #8]
 801097e:	6823      	ldr	r3, [r4, #0]
 8010980:	4433      	add	r3, r6
 8010982:	6023      	str	r3, [r4, #0]
 8010984:	2000      	movs	r0, #0
 8010986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801098a:	462a      	mov	r2, r5
 801098c:	f000 fa0c 	bl	8010da8 <_realloc_r>
 8010990:	4606      	mov	r6, r0
 8010992:	2800      	cmp	r0, #0
 8010994:	d1e0      	bne.n	8010958 <__ssputs_r+0x5a>
 8010996:	6921      	ldr	r1, [r4, #16]
 8010998:	4650      	mov	r0, sl
 801099a:	f7fe febb 	bl	800f714 <_free_r>
 801099e:	230c      	movs	r3, #12
 80109a0:	f8ca 3000 	str.w	r3, [sl]
 80109a4:	89a3      	ldrh	r3, [r4, #12]
 80109a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109aa:	81a3      	strh	r3, [r4, #12]
 80109ac:	f04f 30ff 	mov.w	r0, #4294967295
 80109b0:	e7e9      	b.n	8010986 <__ssputs_r+0x88>
	...

080109b4 <_svfiprintf_r>:
 80109b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109b8:	4698      	mov	r8, r3
 80109ba:	898b      	ldrh	r3, [r1, #12]
 80109bc:	061b      	lsls	r3, r3, #24
 80109be:	b09d      	sub	sp, #116	; 0x74
 80109c0:	4607      	mov	r7, r0
 80109c2:	460d      	mov	r5, r1
 80109c4:	4614      	mov	r4, r2
 80109c6:	d50e      	bpl.n	80109e6 <_svfiprintf_r+0x32>
 80109c8:	690b      	ldr	r3, [r1, #16]
 80109ca:	b963      	cbnz	r3, 80109e6 <_svfiprintf_r+0x32>
 80109cc:	2140      	movs	r1, #64	; 0x40
 80109ce:	f7fc f91f 	bl	800cc10 <_malloc_r>
 80109d2:	6028      	str	r0, [r5, #0]
 80109d4:	6128      	str	r0, [r5, #16]
 80109d6:	b920      	cbnz	r0, 80109e2 <_svfiprintf_r+0x2e>
 80109d8:	230c      	movs	r3, #12
 80109da:	603b      	str	r3, [r7, #0]
 80109dc:	f04f 30ff 	mov.w	r0, #4294967295
 80109e0:	e0d0      	b.n	8010b84 <_svfiprintf_r+0x1d0>
 80109e2:	2340      	movs	r3, #64	; 0x40
 80109e4:	616b      	str	r3, [r5, #20]
 80109e6:	2300      	movs	r3, #0
 80109e8:	9309      	str	r3, [sp, #36]	; 0x24
 80109ea:	2320      	movs	r3, #32
 80109ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80109f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80109f4:	2330      	movs	r3, #48	; 0x30
 80109f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010b9c <_svfiprintf_r+0x1e8>
 80109fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80109fe:	f04f 0901 	mov.w	r9, #1
 8010a02:	4623      	mov	r3, r4
 8010a04:	469a      	mov	sl, r3
 8010a06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a0a:	b10a      	cbz	r2, 8010a10 <_svfiprintf_r+0x5c>
 8010a0c:	2a25      	cmp	r2, #37	; 0x25
 8010a0e:	d1f9      	bne.n	8010a04 <_svfiprintf_r+0x50>
 8010a10:	ebba 0b04 	subs.w	fp, sl, r4
 8010a14:	d00b      	beq.n	8010a2e <_svfiprintf_r+0x7a>
 8010a16:	465b      	mov	r3, fp
 8010a18:	4622      	mov	r2, r4
 8010a1a:	4629      	mov	r1, r5
 8010a1c:	4638      	mov	r0, r7
 8010a1e:	f7ff ff6e 	bl	80108fe <__ssputs_r>
 8010a22:	3001      	adds	r0, #1
 8010a24:	f000 80a9 	beq.w	8010b7a <_svfiprintf_r+0x1c6>
 8010a28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a2a:	445a      	add	r2, fp
 8010a2c:	9209      	str	r2, [sp, #36]	; 0x24
 8010a2e:	f89a 3000 	ldrb.w	r3, [sl]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	f000 80a1 	beq.w	8010b7a <_svfiprintf_r+0x1c6>
 8010a38:	2300      	movs	r3, #0
 8010a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8010a3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a42:	f10a 0a01 	add.w	sl, sl, #1
 8010a46:	9304      	str	r3, [sp, #16]
 8010a48:	9307      	str	r3, [sp, #28]
 8010a4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010a4e:	931a      	str	r3, [sp, #104]	; 0x68
 8010a50:	4654      	mov	r4, sl
 8010a52:	2205      	movs	r2, #5
 8010a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a58:	4850      	ldr	r0, [pc, #320]	; (8010b9c <_svfiprintf_r+0x1e8>)
 8010a5a:	f7ef fbb9 	bl	80001d0 <memchr>
 8010a5e:	9a04      	ldr	r2, [sp, #16]
 8010a60:	b9d8      	cbnz	r0, 8010a9a <_svfiprintf_r+0xe6>
 8010a62:	06d0      	lsls	r0, r2, #27
 8010a64:	bf44      	itt	mi
 8010a66:	2320      	movmi	r3, #32
 8010a68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a6c:	0711      	lsls	r1, r2, #28
 8010a6e:	bf44      	itt	mi
 8010a70:	232b      	movmi	r3, #43	; 0x2b
 8010a72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a76:	f89a 3000 	ldrb.w	r3, [sl]
 8010a7a:	2b2a      	cmp	r3, #42	; 0x2a
 8010a7c:	d015      	beq.n	8010aaa <_svfiprintf_r+0xf6>
 8010a7e:	9a07      	ldr	r2, [sp, #28]
 8010a80:	4654      	mov	r4, sl
 8010a82:	2000      	movs	r0, #0
 8010a84:	f04f 0c0a 	mov.w	ip, #10
 8010a88:	4621      	mov	r1, r4
 8010a8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a8e:	3b30      	subs	r3, #48	; 0x30
 8010a90:	2b09      	cmp	r3, #9
 8010a92:	d94d      	bls.n	8010b30 <_svfiprintf_r+0x17c>
 8010a94:	b1b0      	cbz	r0, 8010ac4 <_svfiprintf_r+0x110>
 8010a96:	9207      	str	r2, [sp, #28]
 8010a98:	e014      	b.n	8010ac4 <_svfiprintf_r+0x110>
 8010a9a:	eba0 0308 	sub.w	r3, r0, r8
 8010a9e:	fa09 f303 	lsl.w	r3, r9, r3
 8010aa2:	4313      	orrs	r3, r2
 8010aa4:	9304      	str	r3, [sp, #16]
 8010aa6:	46a2      	mov	sl, r4
 8010aa8:	e7d2      	b.n	8010a50 <_svfiprintf_r+0x9c>
 8010aaa:	9b03      	ldr	r3, [sp, #12]
 8010aac:	1d19      	adds	r1, r3, #4
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	9103      	str	r1, [sp, #12]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	bfbb      	ittet	lt
 8010ab6:	425b      	neglt	r3, r3
 8010ab8:	f042 0202 	orrlt.w	r2, r2, #2
 8010abc:	9307      	strge	r3, [sp, #28]
 8010abe:	9307      	strlt	r3, [sp, #28]
 8010ac0:	bfb8      	it	lt
 8010ac2:	9204      	strlt	r2, [sp, #16]
 8010ac4:	7823      	ldrb	r3, [r4, #0]
 8010ac6:	2b2e      	cmp	r3, #46	; 0x2e
 8010ac8:	d10c      	bne.n	8010ae4 <_svfiprintf_r+0x130>
 8010aca:	7863      	ldrb	r3, [r4, #1]
 8010acc:	2b2a      	cmp	r3, #42	; 0x2a
 8010ace:	d134      	bne.n	8010b3a <_svfiprintf_r+0x186>
 8010ad0:	9b03      	ldr	r3, [sp, #12]
 8010ad2:	1d1a      	adds	r2, r3, #4
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	9203      	str	r2, [sp, #12]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	bfb8      	it	lt
 8010adc:	f04f 33ff 	movlt.w	r3, #4294967295
 8010ae0:	3402      	adds	r4, #2
 8010ae2:	9305      	str	r3, [sp, #20]
 8010ae4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010bac <_svfiprintf_r+0x1f8>
 8010ae8:	7821      	ldrb	r1, [r4, #0]
 8010aea:	2203      	movs	r2, #3
 8010aec:	4650      	mov	r0, sl
 8010aee:	f7ef fb6f 	bl	80001d0 <memchr>
 8010af2:	b138      	cbz	r0, 8010b04 <_svfiprintf_r+0x150>
 8010af4:	9b04      	ldr	r3, [sp, #16]
 8010af6:	eba0 000a 	sub.w	r0, r0, sl
 8010afa:	2240      	movs	r2, #64	; 0x40
 8010afc:	4082      	lsls	r2, r0
 8010afe:	4313      	orrs	r3, r2
 8010b00:	3401      	adds	r4, #1
 8010b02:	9304      	str	r3, [sp, #16]
 8010b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b08:	4825      	ldr	r0, [pc, #148]	; (8010ba0 <_svfiprintf_r+0x1ec>)
 8010b0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010b0e:	2206      	movs	r2, #6
 8010b10:	f7ef fb5e 	bl	80001d0 <memchr>
 8010b14:	2800      	cmp	r0, #0
 8010b16:	d038      	beq.n	8010b8a <_svfiprintf_r+0x1d6>
 8010b18:	4b22      	ldr	r3, [pc, #136]	; (8010ba4 <_svfiprintf_r+0x1f0>)
 8010b1a:	bb1b      	cbnz	r3, 8010b64 <_svfiprintf_r+0x1b0>
 8010b1c:	9b03      	ldr	r3, [sp, #12]
 8010b1e:	3307      	adds	r3, #7
 8010b20:	f023 0307 	bic.w	r3, r3, #7
 8010b24:	3308      	adds	r3, #8
 8010b26:	9303      	str	r3, [sp, #12]
 8010b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b2a:	4433      	add	r3, r6
 8010b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8010b2e:	e768      	b.n	8010a02 <_svfiprintf_r+0x4e>
 8010b30:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b34:	460c      	mov	r4, r1
 8010b36:	2001      	movs	r0, #1
 8010b38:	e7a6      	b.n	8010a88 <_svfiprintf_r+0xd4>
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	3401      	adds	r4, #1
 8010b3e:	9305      	str	r3, [sp, #20]
 8010b40:	4619      	mov	r1, r3
 8010b42:	f04f 0c0a 	mov.w	ip, #10
 8010b46:	4620      	mov	r0, r4
 8010b48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b4c:	3a30      	subs	r2, #48	; 0x30
 8010b4e:	2a09      	cmp	r2, #9
 8010b50:	d903      	bls.n	8010b5a <_svfiprintf_r+0x1a6>
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d0c6      	beq.n	8010ae4 <_svfiprintf_r+0x130>
 8010b56:	9105      	str	r1, [sp, #20]
 8010b58:	e7c4      	b.n	8010ae4 <_svfiprintf_r+0x130>
 8010b5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b5e:	4604      	mov	r4, r0
 8010b60:	2301      	movs	r3, #1
 8010b62:	e7f0      	b.n	8010b46 <_svfiprintf_r+0x192>
 8010b64:	ab03      	add	r3, sp, #12
 8010b66:	9300      	str	r3, [sp, #0]
 8010b68:	462a      	mov	r2, r5
 8010b6a:	4b0f      	ldr	r3, [pc, #60]	; (8010ba8 <_svfiprintf_r+0x1f4>)
 8010b6c:	a904      	add	r1, sp, #16
 8010b6e:	4638      	mov	r0, r7
 8010b70:	f7fc ff98 	bl	800daa4 <_printf_float>
 8010b74:	1c42      	adds	r2, r0, #1
 8010b76:	4606      	mov	r6, r0
 8010b78:	d1d6      	bne.n	8010b28 <_svfiprintf_r+0x174>
 8010b7a:	89ab      	ldrh	r3, [r5, #12]
 8010b7c:	065b      	lsls	r3, r3, #25
 8010b7e:	f53f af2d 	bmi.w	80109dc <_svfiprintf_r+0x28>
 8010b82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010b84:	b01d      	add	sp, #116	; 0x74
 8010b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b8a:	ab03      	add	r3, sp, #12
 8010b8c:	9300      	str	r3, [sp, #0]
 8010b8e:	462a      	mov	r2, r5
 8010b90:	4b05      	ldr	r3, [pc, #20]	; (8010ba8 <_svfiprintf_r+0x1f4>)
 8010b92:	a904      	add	r1, sp, #16
 8010b94:	4638      	mov	r0, r7
 8010b96:	f7fd fa29 	bl	800dfec <_printf_i>
 8010b9a:	e7eb      	b.n	8010b74 <_svfiprintf_r+0x1c0>
 8010b9c:	08013e35 	.word	0x08013e35
 8010ba0:	08013e3f 	.word	0x08013e3f
 8010ba4:	0800daa5 	.word	0x0800daa5
 8010ba8:	080108ff 	.word	0x080108ff
 8010bac:	08013e3b 	.word	0x08013e3b

08010bb0 <__sflush_r>:
 8010bb0:	898a      	ldrh	r2, [r1, #12]
 8010bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bb6:	4605      	mov	r5, r0
 8010bb8:	0710      	lsls	r0, r2, #28
 8010bba:	460c      	mov	r4, r1
 8010bbc:	d458      	bmi.n	8010c70 <__sflush_r+0xc0>
 8010bbe:	684b      	ldr	r3, [r1, #4]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	dc05      	bgt.n	8010bd0 <__sflush_r+0x20>
 8010bc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	dc02      	bgt.n	8010bd0 <__sflush_r+0x20>
 8010bca:	2000      	movs	r0, #0
 8010bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010bd2:	2e00      	cmp	r6, #0
 8010bd4:	d0f9      	beq.n	8010bca <__sflush_r+0x1a>
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010bdc:	682f      	ldr	r7, [r5, #0]
 8010bde:	6a21      	ldr	r1, [r4, #32]
 8010be0:	602b      	str	r3, [r5, #0]
 8010be2:	d032      	beq.n	8010c4a <__sflush_r+0x9a>
 8010be4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010be6:	89a3      	ldrh	r3, [r4, #12]
 8010be8:	075a      	lsls	r2, r3, #29
 8010bea:	d505      	bpl.n	8010bf8 <__sflush_r+0x48>
 8010bec:	6863      	ldr	r3, [r4, #4]
 8010bee:	1ac0      	subs	r0, r0, r3
 8010bf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010bf2:	b10b      	cbz	r3, 8010bf8 <__sflush_r+0x48>
 8010bf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010bf6:	1ac0      	subs	r0, r0, r3
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	4602      	mov	r2, r0
 8010bfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010bfe:	6a21      	ldr	r1, [r4, #32]
 8010c00:	4628      	mov	r0, r5
 8010c02:	47b0      	blx	r6
 8010c04:	1c43      	adds	r3, r0, #1
 8010c06:	89a3      	ldrh	r3, [r4, #12]
 8010c08:	d106      	bne.n	8010c18 <__sflush_r+0x68>
 8010c0a:	6829      	ldr	r1, [r5, #0]
 8010c0c:	291d      	cmp	r1, #29
 8010c0e:	d82b      	bhi.n	8010c68 <__sflush_r+0xb8>
 8010c10:	4a29      	ldr	r2, [pc, #164]	; (8010cb8 <__sflush_r+0x108>)
 8010c12:	410a      	asrs	r2, r1
 8010c14:	07d6      	lsls	r6, r2, #31
 8010c16:	d427      	bmi.n	8010c68 <__sflush_r+0xb8>
 8010c18:	2200      	movs	r2, #0
 8010c1a:	6062      	str	r2, [r4, #4]
 8010c1c:	04d9      	lsls	r1, r3, #19
 8010c1e:	6922      	ldr	r2, [r4, #16]
 8010c20:	6022      	str	r2, [r4, #0]
 8010c22:	d504      	bpl.n	8010c2e <__sflush_r+0x7e>
 8010c24:	1c42      	adds	r2, r0, #1
 8010c26:	d101      	bne.n	8010c2c <__sflush_r+0x7c>
 8010c28:	682b      	ldr	r3, [r5, #0]
 8010c2a:	b903      	cbnz	r3, 8010c2e <__sflush_r+0x7e>
 8010c2c:	6560      	str	r0, [r4, #84]	; 0x54
 8010c2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c30:	602f      	str	r7, [r5, #0]
 8010c32:	2900      	cmp	r1, #0
 8010c34:	d0c9      	beq.n	8010bca <__sflush_r+0x1a>
 8010c36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010c3a:	4299      	cmp	r1, r3
 8010c3c:	d002      	beq.n	8010c44 <__sflush_r+0x94>
 8010c3e:	4628      	mov	r0, r5
 8010c40:	f7fe fd68 	bl	800f714 <_free_r>
 8010c44:	2000      	movs	r0, #0
 8010c46:	6360      	str	r0, [r4, #52]	; 0x34
 8010c48:	e7c0      	b.n	8010bcc <__sflush_r+0x1c>
 8010c4a:	2301      	movs	r3, #1
 8010c4c:	4628      	mov	r0, r5
 8010c4e:	47b0      	blx	r6
 8010c50:	1c41      	adds	r1, r0, #1
 8010c52:	d1c8      	bne.n	8010be6 <__sflush_r+0x36>
 8010c54:	682b      	ldr	r3, [r5, #0]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d0c5      	beq.n	8010be6 <__sflush_r+0x36>
 8010c5a:	2b1d      	cmp	r3, #29
 8010c5c:	d001      	beq.n	8010c62 <__sflush_r+0xb2>
 8010c5e:	2b16      	cmp	r3, #22
 8010c60:	d101      	bne.n	8010c66 <__sflush_r+0xb6>
 8010c62:	602f      	str	r7, [r5, #0]
 8010c64:	e7b1      	b.n	8010bca <__sflush_r+0x1a>
 8010c66:	89a3      	ldrh	r3, [r4, #12]
 8010c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c6c:	81a3      	strh	r3, [r4, #12]
 8010c6e:	e7ad      	b.n	8010bcc <__sflush_r+0x1c>
 8010c70:	690f      	ldr	r7, [r1, #16]
 8010c72:	2f00      	cmp	r7, #0
 8010c74:	d0a9      	beq.n	8010bca <__sflush_r+0x1a>
 8010c76:	0793      	lsls	r3, r2, #30
 8010c78:	680e      	ldr	r6, [r1, #0]
 8010c7a:	bf08      	it	eq
 8010c7c:	694b      	ldreq	r3, [r1, #20]
 8010c7e:	600f      	str	r7, [r1, #0]
 8010c80:	bf18      	it	ne
 8010c82:	2300      	movne	r3, #0
 8010c84:	eba6 0807 	sub.w	r8, r6, r7
 8010c88:	608b      	str	r3, [r1, #8]
 8010c8a:	f1b8 0f00 	cmp.w	r8, #0
 8010c8e:	dd9c      	ble.n	8010bca <__sflush_r+0x1a>
 8010c90:	6a21      	ldr	r1, [r4, #32]
 8010c92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010c94:	4643      	mov	r3, r8
 8010c96:	463a      	mov	r2, r7
 8010c98:	4628      	mov	r0, r5
 8010c9a:	47b0      	blx	r6
 8010c9c:	2800      	cmp	r0, #0
 8010c9e:	dc06      	bgt.n	8010cae <__sflush_r+0xfe>
 8010ca0:	89a3      	ldrh	r3, [r4, #12]
 8010ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ca6:	81a3      	strh	r3, [r4, #12]
 8010ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8010cac:	e78e      	b.n	8010bcc <__sflush_r+0x1c>
 8010cae:	4407      	add	r7, r0
 8010cb0:	eba8 0800 	sub.w	r8, r8, r0
 8010cb4:	e7e9      	b.n	8010c8a <__sflush_r+0xda>
 8010cb6:	bf00      	nop
 8010cb8:	dfbffffe 	.word	0xdfbffffe

08010cbc <_fflush_r>:
 8010cbc:	b538      	push	{r3, r4, r5, lr}
 8010cbe:	690b      	ldr	r3, [r1, #16]
 8010cc0:	4605      	mov	r5, r0
 8010cc2:	460c      	mov	r4, r1
 8010cc4:	b913      	cbnz	r3, 8010ccc <_fflush_r+0x10>
 8010cc6:	2500      	movs	r5, #0
 8010cc8:	4628      	mov	r0, r5
 8010cca:	bd38      	pop	{r3, r4, r5, pc}
 8010ccc:	b118      	cbz	r0, 8010cd6 <_fflush_r+0x1a>
 8010cce:	6a03      	ldr	r3, [r0, #32]
 8010cd0:	b90b      	cbnz	r3, 8010cd6 <_fflush_r+0x1a>
 8010cd2:	f7fd fd49 	bl	800e768 <__sinit>
 8010cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d0f3      	beq.n	8010cc6 <_fflush_r+0xa>
 8010cde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010ce0:	07d0      	lsls	r0, r2, #31
 8010ce2:	d404      	bmi.n	8010cee <_fflush_r+0x32>
 8010ce4:	0599      	lsls	r1, r3, #22
 8010ce6:	d402      	bmi.n	8010cee <_fflush_r+0x32>
 8010ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010cea:	f7fd fe76 	bl	800e9da <__retarget_lock_acquire_recursive>
 8010cee:	4628      	mov	r0, r5
 8010cf0:	4621      	mov	r1, r4
 8010cf2:	f7ff ff5d 	bl	8010bb0 <__sflush_r>
 8010cf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010cf8:	07da      	lsls	r2, r3, #31
 8010cfa:	4605      	mov	r5, r0
 8010cfc:	d4e4      	bmi.n	8010cc8 <_fflush_r+0xc>
 8010cfe:	89a3      	ldrh	r3, [r4, #12]
 8010d00:	059b      	lsls	r3, r3, #22
 8010d02:	d4e1      	bmi.n	8010cc8 <_fflush_r+0xc>
 8010d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d06:	f7fd fe69 	bl	800e9dc <__retarget_lock_release_recursive>
 8010d0a:	e7dd      	b.n	8010cc8 <_fflush_r+0xc>

08010d0c <memmove>:
 8010d0c:	4288      	cmp	r0, r1
 8010d0e:	b510      	push	{r4, lr}
 8010d10:	eb01 0402 	add.w	r4, r1, r2
 8010d14:	d902      	bls.n	8010d1c <memmove+0x10>
 8010d16:	4284      	cmp	r4, r0
 8010d18:	4623      	mov	r3, r4
 8010d1a:	d807      	bhi.n	8010d2c <memmove+0x20>
 8010d1c:	1e43      	subs	r3, r0, #1
 8010d1e:	42a1      	cmp	r1, r4
 8010d20:	d008      	beq.n	8010d34 <memmove+0x28>
 8010d22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010d2a:	e7f8      	b.n	8010d1e <memmove+0x12>
 8010d2c:	4402      	add	r2, r0
 8010d2e:	4601      	mov	r1, r0
 8010d30:	428a      	cmp	r2, r1
 8010d32:	d100      	bne.n	8010d36 <memmove+0x2a>
 8010d34:	bd10      	pop	{r4, pc}
 8010d36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010d3e:	e7f7      	b.n	8010d30 <memmove+0x24>

08010d40 <__assert_func>:
 8010d40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d42:	4614      	mov	r4, r2
 8010d44:	461a      	mov	r2, r3
 8010d46:	4b09      	ldr	r3, [pc, #36]	; (8010d6c <__assert_func+0x2c>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	4605      	mov	r5, r0
 8010d4c:	68d8      	ldr	r0, [r3, #12]
 8010d4e:	b14c      	cbz	r4, 8010d64 <__assert_func+0x24>
 8010d50:	4b07      	ldr	r3, [pc, #28]	; (8010d70 <__assert_func+0x30>)
 8010d52:	9100      	str	r1, [sp, #0]
 8010d54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d58:	4906      	ldr	r1, [pc, #24]	; (8010d74 <__assert_func+0x34>)
 8010d5a:	462b      	mov	r3, r5
 8010d5c:	f000 f854 	bl	8010e08 <fiprintf>
 8010d60:	f000 f864 	bl	8010e2c <abort>
 8010d64:	4b04      	ldr	r3, [pc, #16]	; (8010d78 <__assert_func+0x38>)
 8010d66:	461c      	mov	r4, r3
 8010d68:	e7f3      	b.n	8010d52 <__assert_func+0x12>
 8010d6a:	bf00      	nop
 8010d6c:	20000204 	.word	0x20000204
 8010d70:	08013e46 	.word	0x08013e46
 8010d74:	08013e53 	.word	0x08013e53
 8010d78:	08013e81 	.word	0x08013e81

08010d7c <_calloc_r>:
 8010d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d7e:	fba1 2402 	umull	r2, r4, r1, r2
 8010d82:	b94c      	cbnz	r4, 8010d98 <_calloc_r+0x1c>
 8010d84:	4611      	mov	r1, r2
 8010d86:	9201      	str	r2, [sp, #4]
 8010d88:	f7fb ff42 	bl	800cc10 <_malloc_r>
 8010d8c:	9a01      	ldr	r2, [sp, #4]
 8010d8e:	4605      	mov	r5, r0
 8010d90:	b930      	cbnz	r0, 8010da0 <_calloc_r+0x24>
 8010d92:	4628      	mov	r0, r5
 8010d94:	b003      	add	sp, #12
 8010d96:	bd30      	pop	{r4, r5, pc}
 8010d98:	220c      	movs	r2, #12
 8010d9a:	6002      	str	r2, [r0, #0]
 8010d9c:	2500      	movs	r5, #0
 8010d9e:	e7f8      	b.n	8010d92 <_calloc_r+0x16>
 8010da0:	4621      	mov	r1, r4
 8010da2:	f7fd fd7a 	bl	800e89a <memset>
 8010da6:	e7f4      	b.n	8010d92 <_calloc_r+0x16>

08010da8 <_realloc_r>:
 8010da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dac:	4680      	mov	r8, r0
 8010dae:	4614      	mov	r4, r2
 8010db0:	460e      	mov	r6, r1
 8010db2:	b921      	cbnz	r1, 8010dbe <_realloc_r+0x16>
 8010db4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010db8:	4611      	mov	r1, r2
 8010dba:	f7fb bf29 	b.w	800cc10 <_malloc_r>
 8010dbe:	b92a      	cbnz	r2, 8010dcc <_realloc_r+0x24>
 8010dc0:	f7fe fca8 	bl	800f714 <_free_r>
 8010dc4:	4625      	mov	r5, r4
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dcc:	f000 f835 	bl	8010e3a <_malloc_usable_size_r>
 8010dd0:	4284      	cmp	r4, r0
 8010dd2:	4607      	mov	r7, r0
 8010dd4:	d802      	bhi.n	8010ddc <_realloc_r+0x34>
 8010dd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010dda:	d812      	bhi.n	8010e02 <_realloc_r+0x5a>
 8010ddc:	4621      	mov	r1, r4
 8010dde:	4640      	mov	r0, r8
 8010de0:	f7fb ff16 	bl	800cc10 <_malloc_r>
 8010de4:	4605      	mov	r5, r0
 8010de6:	2800      	cmp	r0, #0
 8010de8:	d0ed      	beq.n	8010dc6 <_realloc_r+0x1e>
 8010dea:	42bc      	cmp	r4, r7
 8010dec:	4622      	mov	r2, r4
 8010dee:	4631      	mov	r1, r6
 8010df0:	bf28      	it	cs
 8010df2:	463a      	movcs	r2, r7
 8010df4:	f7fd fdf3 	bl	800e9de <memcpy>
 8010df8:	4631      	mov	r1, r6
 8010dfa:	4640      	mov	r0, r8
 8010dfc:	f7fe fc8a 	bl	800f714 <_free_r>
 8010e00:	e7e1      	b.n	8010dc6 <_realloc_r+0x1e>
 8010e02:	4635      	mov	r5, r6
 8010e04:	e7df      	b.n	8010dc6 <_realloc_r+0x1e>
	...

08010e08 <fiprintf>:
 8010e08:	b40e      	push	{r1, r2, r3}
 8010e0a:	b503      	push	{r0, r1, lr}
 8010e0c:	4601      	mov	r1, r0
 8010e0e:	ab03      	add	r3, sp, #12
 8010e10:	4805      	ldr	r0, [pc, #20]	; (8010e28 <fiprintf+0x20>)
 8010e12:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e16:	6800      	ldr	r0, [r0, #0]
 8010e18:	9301      	str	r3, [sp, #4]
 8010e1a:	f000 f83f 	bl	8010e9c <_vfiprintf_r>
 8010e1e:	b002      	add	sp, #8
 8010e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e24:	b003      	add	sp, #12
 8010e26:	4770      	bx	lr
 8010e28:	20000204 	.word	0x20000204

08010e2c <abort>:
 8010e2c:	b508      	push	{r3, lr}
 8010e2e:	2006      	movs	r0, #6
 8010e30:	f000 fa0c 	bl	801124c <raise>
 8010e34:	2001      	movs	r0, #1
 8010e36:	f7f1 fc51 	bl	80026dc <_exit>

08010e3a <_malloc_usable_size_r>:
 8010e3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e3e:	1f18      	subs	r0, r3, #4
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	bfbc      	itt	lt
 8010e44:	580b      	ldrlt	r3, [r1, r0]
 8010e46:	18c0      	addlt	r0, r0, r3
 8010e48:	4770      	bx	lr

08010e4a <__sfputc_r>:
 8010e4a:	6893      	ldr	r3, [r2, #8]
 8010e4c:	3b01      	subs	r3, #1
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	b410      	push	{r4}
 8010e52:	6093      	str	r3, [r2, #8]
 8010e54:	da08      	bge.n	8010e68 <__sfputc_r+0x1e>
 8010e56:	6994      	ldr	r4, [r2, #24]
 8010e58:	42a3      	cmp	r3, r4
 8010e5a:	db01      	blt.n	8010e60 <__sfputc_r+0x16>
 8010e5c:	290a      	cmp	r1, #10
 8010e5e:	d103      	bne.n	8010e68 <__sfputc_r+0x1e>
 8010e60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e64:	f000 b934 	b.w	80110d0 <__swbuf_r>
 8010e68:	6813      	ldr	r3, [r2, #0]
 8010e6a:	1c58      	adds	r0, r3, #1
 8010e6c:	6010      	str	r0, [r2, #0]
 8010e6e:	7019      	strb	r1, [r3, #0]
 8010e70:	4608      	mov	r0, r1
 8010e72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e76:	4770      	bx	lr

08010e78 <__sfputs_r>:
 8010e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e7a:	4606      	mov	r6, r0
 8010e7c:	460f      	mov	r7, r1
 8010e7e:	4614      	mov	r4, r2
 8010e80:	18d5      	adds	r5, r2, r3
 8010e82:	42ac      	cmp	r4, r5
 8010e84:	d101      	bne.n	8010e8a <__sfputs_r+0x12>
 8010e86:	2000      	movs	r0, #0
 8010e88:	e007      	b.n	8010e9a <__sfputs_r+0x22>
 8010e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e8e:	463a      	mov	r2, r7
 8010e90:	4630      	mov	r0, r6
 8010e92:	f7ff ffda 	bl	8010e4a <__sfputc_r>
 8010e96:	1c43      	adds	r3, r0, #1
 8010e98:	d1f3      	bne.n	8010e82 <__sfputs_r+0xa>
 8010e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010e9c <_vfiprintf_r>:
 8010e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ea0:	460d      	mov	r5, r1
 8010ea2:	b09d      	sub	sp, #116	; 0x74
 8010ea4:	4614      	mov	r4, r2
 8010ea6:	4698      	mov	r8, r3
 8010ea8:	4606      	mov	r6, r0
 8010eaa:	b118      	cbz	r0, 8010eb4 <_vfiprintf_r+0x18>
 8010eac:	6a03      	ldr	r3, [r0, #32]
 8010eae:	b90b      	cbnz	r3, 8010eb4 <_vfiprintf_r+0x18>
 8010eb0:	f7fd fc5a 	bl	800e768 <__sinit>
 8010eb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010eb6:	07d9      	lsls	r1, r3, #31
 8010eb8:	d405      	bmi.n	8010ec6 <_vfiprintf_r+0x2a>
 8010eba:	89ab      	ldrh	r3, [r5, #12]
 8010ebc:	059a      	lsls	r2, r3, #22
 8010ebe:	d402      	bmi.n	8010ec6 <_vfiprintf_r+0x2a>
 8010ec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ec2:	f7fd fd8a 	bl	800e9da <__retarget_lock_acquire_recursive>
 8010ec6:	89ab      	ldrh	r3, [r5, #12]
 8010ec8:	071b      	lsls	r3, r3, #28
 8010eca:	d501      	bpl.n	8010ed0 <_vfiprintf_r+0x34>
 8010ecc:	692b      	ldr	r3, [r5, #16]
 8010ece:	b99b      	cbnz	r3, 8010ef8 <_vfiprintf_r+0x5c>
 8010ed0:	4629      	mov	r1, r5
 8010ed2:	4630      	mov	r0, r6
 8010ed4:	f000 f93a 	bl	801114c <__swsetup_r>
 8010ed8:	b170      	cbz	r0, 8010ef8 <_vfiprintf_r+0x5c>
 8010eda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010edc:	07dc      	lsls	r4, r3, #31
 8010ede:	d504      	bpl.n	8010eea <_vfiprintf_r+0x4e>
 8010ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ee4:	b01d      	add	sp, #116	; 0x74
 8010ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eea:	89ab      	ldrh	r3, [r5, #12]
 8010eec:	0598      	lsls	r0, r3, #22
 8010eee:	d4f7      	bmi.n	8010ee0 <_vfiprintf_r+0x44>
 8010ef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ef2:	f7fd fd73 	bl	800e9dc <__retarget_lock_release_recursive>
 8010ef6:	e7f3      	b.n	8010ee0 <_vfiprintf_r+0x44>
 8010ef8:	2300      	movs	r3, #0
 8010efa:	9309      	str	r3, [sp, #36]	; 0x24
 8010efc:	2320      	movs	r3, #32
 8010efe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010f02:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f06:	2330      	movs	r3, #48	; 0x30
 8010f08:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80110bc <_vfiprintf_r+0x220>
 8010f0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010f10:	f04f 0901 	mov.w	r9, #1
 8010f14:	4623      	mov	r3, r4
 8010f16:	469a      	mov	sl, r3
 8010f18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f1c:	b10a      	cbz	r2, 8010f22 <_vfiprintf_r+0x86>
 8010f1e:	2a25      	cmp	r2, #37	; 0x25
 8010f20:	d1f9      	bne.n	8010f16 <_vfiprintf_r+0x7a>
 8010f22:	ebba 0b04 	subs.w	fp, sl, r4
 8010f26:	d00b      	beq.n	8010f40 <_vfiprintf_r+0xa4>
 8010f28:	465b      	mov	r3, fp
 8010f2a:	4622      	mov	r2, r4
 8010f2c:	4629      	mov	r1, r5
 8010f2e:	4630      	mov	r0, r6
 8010f30:	f7ff ffa2 	bl	8010e78 <__sfputs_r>
 8010f34:	3001      	adds	r0, #1
 8010f36:	f000 80a9 	beq.w	801108c <_vfiprintf_r+0x1f0>
 8010f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f3c:	445a      	add	r2, fp
 8010f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8010f40:	f89a 3000 	ldrb.w	r3, [sl]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	f000 80a1 	beq.w	801108c <_vfiprintf_r+0x1f0>
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8010f50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f54:	f10a 0a01 	add.w	sl, sl, #1
 8010f58:	9304      	str	r3, [sp, #16]
 8010f5a:	9307      	str	r3, [sp, #28]
 8010f5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010f60:	931a      	str	r3, [sp, #104]	; 0x68
 8010f62:	4654      	mov	r4, sl
 8010f64:	2205      	movs	r2, #5
 8010f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f6a:	4854      	ldr	r0, [pc, #336]	; (80110bc <_vfiprintf_r+0x220>)
 8010f6c:	f7ef f930 	bl	80001d0 <memchr>
 8010f70:	9a04      	ldr	r2, [sp, #16]
 8010f72:	b9d8      	cbnz	r0, 8010fac <_vfiprintf_r+0x110>
 8010f74:	06d1      	lsls	r1, r2, #27
 8010f76:	bf44      	itt	mi
 8010f78:	2320      	movmi	r3, #32
 8010f7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f7e:	0713      	lsls	r3, r2, #28
 8010f80:	bf44      	itt	mi
 8010f82:	232b      	movmi	r3, #43	; 0x2b
 8010f84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f88:	f89a 3000 	ldrb.w	r3, [sl]
 8010f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8010f8e:	d015      	beq.n	8010fbc <_vfiprintf_r+0x120>
 8010f90:	9a07      	ldr	r2, [sp, #28]
 8010f92:	4654      	mov	r4, sl
 8010f94:	2000      	movs	r0, #0
 8010f96:	f04f 0c0a 	mov.w	ip, #10
 8010f9a:	4621      	mov	r1, r4
 8010f9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010fa0:	3b30      	subs	r3, #48	; 0x30
 8010fa2:	2b09      	cmp	r3, #9
 8010fa4:	d94d      	bls.n	8011042 <_vfiprintf_r+0x1a6>
 8010fa6:	b1b0      	cbz	r0, 8010fd6 <_vfiprintf_r+0x13a>
 8010fa8:	9207      	str	r2, [sp, #28]
 8010faa:	e014      	b.n	8010fd6 <_vfiprintf_r+0x13a>
 8010fac:	eba0 0308 	sub.w	r3, r0, r8
 8010fb0:	fa09 f303 	lsl.w	r3, r9, r3
 8010fb4:	4313      	orrs	r3, r2
 8010fb6:	9304      	str	r3, [sp, #16]
 8010fb8:	46a2      	mov	sl, r4
 8010fba:	e7d2      	b.n	8010f62 <_vfiprintf_r+0xc6>
 8010fbc:	9b03      	ldr	r3, [sp, #12]
 8010fbe:	1d19      	adds	r1, r3, #4
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	9103      	str	r1, [sp, #12]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	bfbb      	ittet	lt
 8010fc8:	425b      	neglt	r3, r3
 8010fca:	f042 0202 	orrlt.w	r2, r2, #2
 8010fce:	9307      	strge	r3, [sp, #28]
 8010fd0:	9307      	strlt	r3, [sp, #28]
 8010fd2:	bfb8      	it	lt
 8010fd4:	9204      	strlt	r2, [sp, #16]
 8010fd6:	7823      	ldrb	r3, [r4, #0]
 8010fd8:	2b2e      	cmp	r3, #46	; 0x2e
 8010fda:	d10c      	bne.n	8010ff6 <_vfiprintf_r+0x15a>
 8010fdc:	7863      	ldrb	r3, [r4, #1]
 8010fde:	2b2a      	cmp	r3, #42	; 0x2a
 8010fe0:	d134      	bne.n	801104c <_vfiprintf_r+0x1b0>
 8010fe2:	9b03      	ldr	r3, [sp, #12]
 8010fe4:	1d1a      	adds	r2, r3, #4
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	9203      	str	r2, [sp, #12]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	bfb8      	it	lt
 8010fee:	f04f 33ff 	movlt.w	r3, #4294967295
 8010ff2:	3402      	adds	r4, #2
 8010ff4:	9305      	str	r3, [sp, #20]
 8010ff6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80110cc <_vfiprintf_r+0x230>
 8010ffa:	7821      	ldrb	r1, [r4, #0]
 8010ffc:	2203      	movs	r2, #3
 8010ffe:	4650      	mov	r0, sl
 8011000:	f7ef f8e6 	bl	80001d0 <memchr>
 8011004:	b138      	cbz	r0, 8011016 <_vfiprintf_r+0x17a>
 8011006:	9b04      	ldr	r3, [sp, #16]
 8011008:	eba0 000a 	sub.w	r0, r0, sl
 801100c:	2240      	movs	r2, #64	; 0x40
 801100e:	4082      	lsls	r2, r0
 8011010:	4313      	orrs	r3, r2
 8011012:	3401      	adds	r4, #1
 8011014:	9304      	str	r3, [sp, #16]
 8011016:	f814 1b01 	ldrb.w	r1, [r4], #1
 801101a:	4829      	ldr	r0, [pc, #164]	; (80110c0 <_vfiprintf_r+0x224>)
 801101c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011020:	2206      	movs	r2, #6
 8011022:	f7ef f8d5 	bl	80001d0 <memchr>
 8011026:	2800      	cmp	r0, #0
 8011028:	d03f      	beq.n	80110aa <_vfiprintf_r+0x20e>
 801102a:	4b26      	ldr	r3, [pc, #152]	; (80110c4 <_vfiprintf_r+0x228>)
 801102c:	bb1b      	cbnz	r3, 8011076 <_vfiprintf_r+0x1da>
 801102e:	9b03      	ldr	r3, [sp, #12]
 8011030:	3307      	adds	r3, #7
 8011032:	f023 0307 	bic.w	r3, r3, #7
 8011036:	3308      	adds	r3, #8
 8011038:	9303      	str	r3, [sp, #12]
 801103a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801103c:	443b      	add	r3, r7
 801103e:	9309      	str	r3, [sp, #36]	; 0x24
 8011040:	e768      	b.n	8010f14 <_vfiprintf_r+0x78>
 8011042:	fb0c 3202 	mla	r2, ip, r2, r3
 8011046:	460c      	mov	r4, r1
 8011048:	2001      	movs	r0, #1
 801104a:	e7a6      	b.n	8010f9a <_vfiprintf_r+0xfe>
 801104c:	2300      	movs	r3, #0
 801104e:	3401      	adds	r4, #1
 8011050:	9305      	str	r3, [sp, #20]
 8011052:	4619      	mov	r1, r3
 8011054:	f04f 0c0a 	mov.w	ip, #10
 8011058:	4620      	mov	r0, r4
 801105a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801105e:	3a30      	subs	r2, #48	; 0x30
 8011060:	2a09      	cmp	r2, #9
 8011062:	d903      	bls.n	801106c <_vfiprintf_r+0x1d0>
 8011064:	2b00      	cmp	r3, #0
 8011066:	d0c6      	beq.n	8010ff6 <_vfiprintf_r+0x15a>
 8011068:	9105      	str	r1, [sp, #20]
 801106a:	e7c4      	b.n	8010ff6 <_vfiprintf_r+0x15a>
 801106c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011070:	4604      	mov	r4, r0
 8011072:	2301      	movs	r3, #1
 8011074:	e7f0      	b.n	8011058 <_vfiprintf_r+0x1bc>
 8011076:	ab03      	add	r3, sp, #12
 8011078:	9300      	str	r3, [sp, #0]
 801107a:	462a      	mov	r2, r5
 801107c:	4b12      	ldr	r3, [pc, #72]	; (80110c8 <_vfiprintf_r+0x22c>)
 801107e:	a904      	add	r1, sp, #16
 8011080:	4630      	mov	r0, r6
 8011082:	f7fc fd0f 	bl	800daa4 <_printf_float>
 8011086:	4607      	mov	r7, r0
 8011088:	1c78      	adds	r0, r7, #1
 801108a:	d1d6      	bne.n	801103a <_vfiprintf_r+0x19e>
 801108c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801108e:	07d9      	lsls	r1, r3, #31
 8011090:	d405      	bmi.n	801109e <_vfiprintf_r+0x202>
 8011092:	89ab      	ldrh	r3, [r5, #12]
 8011094:	059a      	lsls	r2, r3, #22
 8011096:	d402      	bmi.n	801109e <_vfiprintf_r+0x202>
 8011098:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801109a:	f7fd fc9f 	bl	800e9dc <__retarget_lock_release_recursive>
 801109e:	89ab      	ldrh	r3, [r5, #12]
 80110a0:	065b      	lsls	r3, r3, #25
 80110a2:	f53f af1d 	bmi.w	8010ee0 <_vfiprintf_r+0x44>
 80110a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80110a8:	e71c      	b.n	8010ee4 <_vfiprintf_r+0x48>
 80110aa:	ab03      	add	r3, sp, #12
 80110ac:	9300      	str	r3, [sp, #0]
 80110ae:	462a      	mov	r2, r5
 80110b0:	4b05      	ldr	r3, [pc, #20]	; (80110c8 <_vfiprintf_r+0x22c>)
 80110b2:	a904      	add	r1, sp, #16
 80110b4:	4630      	mov	r0, r6
 80110b6:	f7fc ff99 	bl	800dfec <_printf_i>
 80110ba:	e7e4      	b.n	8011086 <_vfiprintf_r+0x1ea>
 80110bc:	08013e35 	.word	0x08013e35
 80110c0:	08013e3f 	.word	0x08013e3f
 80110c4:	0800daa5 	.word	0x0800daa5
 80110c8:	08010e79 	.word	0x08010e79
 80110cc:	08013e3b 	.word	0x08013e3b

080110d0 <__swbuf_r>:
 80110d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110d2:	460e      	mov	r6, r1
 80110d4:	4614      	mov	r4, r2
 80110d6:	4605      	mov	r5, r0
 80110d8:	b118      	cbz	r0, 80110e2 <__swbuf_r+0x12>
 80110da:	6a03      	ldr	r3, [r0, #32]
 80110dc:	b90b      	cbnz	r3, 80110e2 <__swbuf_r+0x12>
 80110de:	f7fd fb43 	bl	800e768 <__sinit>
 80110e2:	69a3      	ldr	r3, [r4, #24]
 80110e4:	60a3      	str	r3, [r4, #8]
 80110e6:	89a3      	ldrh	r3, [r4, #12]
 80110e8:	071a      	lsls	r2, r3, #28
 80110ea:	d525      	bpl.n	8011138 <__swbuf_r+0x68>
 80110ec:	6923      	ldr	r3, [r4, #16]
 80110ee:	b31b      	cbz	r3, 8011138 <__swbuf_r+0x68>
 80110f0:	6823      	ldr	r3, [r4, #0]
 80110f2:	6922      	ldr	r2, [r4, #16]
 80110f4:	1a98      	subs	r0, r3, r2
 80110f6:	6963      	ldr	r3, [r4, #20]
 80110f8:	b2f6      	uxtb	r6, r6
 80110fa:	4283      	cmp	r3, r0
 80110fc:	4637      	mov	r7, r6
 80110fe:	dc04      	bgt.n	801110a <__swbuf_r+0x3a>
 8011100:	4621      	mov	r1, r4
 8011102:	4628      	mov	r0, r5
 8011104:	f7ff fdda 	bl	8010cbc <_fflush_r>
 8011108:	b9e0      	cbnz	r0, 8011144 <__swbuf_r+0x74>
 801110a:	68a3      	ldr	r3, [r4, #8]
 801110c:	3b01      	subs	r3, #1
 801110e:	60a3      	str	r3, [r4, #8]
 8011110:	6823      	ldr	r3, [r4, #0]
 8011112:	1c5a      	adds	r2, r3, #1
 8011114:	6022      	str	r2, [r4, #0]
 8011116:	701e      	strb	r6, [r3, #0]
 8011118:	6962      	ldr	r2, [r4, #20]
 801111a:	1c43      	adds	r3, r0, #1
 801111c:	429a      	cmp	r2, r3
 801111e:	d004      	beq.n	801112a <__swbuf_r+0x5a>
 8011120:	89a3      	ldrh	r3, [r4, #12]
 8011122:	07db      	lsls	r3, r3, #31
 8011124:	d506      	bpl.n	8011134 <__swbuf_r+0x64>
 8011126:	2e0a      	cmp	r6, #10
 8011128:	d104      	bne.n	8011134 <__swbuf_r+0x64>
 801112a:	4621      	mov	r1, r4
 801112c:	4628      	mov	r0, r5
 801112e:	f7ff fdc5 	bl	8010cbc <_fflush_r>
 8011132:	b938      	cbnz	r0, 8011144 <__swbuf_r+0x74>
 8011134:	4638      	mov	r0, r7
 8011136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011138:	4621      	mov	r1, r4
 801113a:	4628      	mov	r0, r5
 801113c:	f000 f806 	bl	801114c <__swsetup_r>
 8011140:	2800      	cmp	r0, #0
 8011142:	d0d5      	beq.n	80110f0 <__swbuf_r+0x20>
 8011144:	f04f 37ff 	mov.w	r7, #4294967295
 8011148:	e7f4      	b.n	8011134 <__swbuf_r+0x64>
	...

0801114c <__swsetup_r>:
 801114c:	b538      	push	{r3, r4, r5, lr}
 801114e:	4b2a      	ldr	r3, [pc, #168]	; (80111f8 <__swsetup_r+0xac>)
 8011150:	4605      	mov	r5, r0
 8011152:	6818      	ldr	r0, [r3, #0]
 8011154:	460c      	mov	r4, r1
 8011156:	b118      	cbz	r0, 8011160 <__swsetup_r+0x14>
 8011158:	6a03      	ldr	r3, [r0, #32]
 801115a:	b90b      	cbnz	r3, 8011160 <__swsetup_r+0x14>
 801115c:	f7fd fb04 	bl	800e768 <__sinit>
 8011160:	89a3      	ldrh	r3, [r4, #12]
 8011162:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011166:	0718      	lsls	r0, r3, #28
 8011168:	d422      	bmi.n	80111b0 <__swsetup_r+0x64>
 801116a:	06d9      	lsls	r1, r3, #27
 801116c:	d407      	bmi.n	801117e <__swsetup_r+0x32>
 801116e:	2309      	movs	r3, #9
 8011170:	602b      	str	r3, [r5, #0]
 8011172:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011176:	81a3      	strh	r3, [r4, #12]
 8011178:	f04f 30ff 	mov.w	r0, #4294967295
 801117c:	e034      	b.n	80111e8 <__swsetup_r+0x9c>
 801117e:	0758      	lsls	r0, r3, #29
 8011180:	d512      	bpl.n	80111a8 <__swsetup_r+0x5c>
 8011182:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011184:	b141      	cbz	r1, 8011198 <__swsetup_r+0x4c>
 8011186:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801118a:	4299      	cmp	r1, r3
 801118c:	d002      	beq.n	8011194 <__swsetup_r+0x48>
 801118e:	4628      	mov	r0, r5
 8011190:	f7fe fac0 	bl	800f714 <_free_r>
 8011194:	2300      	movs	r3, #0
 8011196:	6363      	str	r3, [r4, #52]	; 0x34
 8011198:	89a3      	ldrh	r3, [r4, #12]
 801119a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801119e:	81a3      	strh	r3, [r4, #12]
 80111a0:	2300      	movs	r3, #0
 80111a2:	6063      	str	r3, [r4, #4]
 80111a4:	6923      	ldr	r3, [r4, #16]
 80111a6:	6023      	str	r3, [r4, #0]
 80111a8:	89a3      	ldrh	r3, [r4, #12]
 80111aa:	f043 0308 	orr.w	r3, r3, #8
 80111ae:	81a3      	strh	r3, [r4, #12]
 80111b0:	6923      	ldr	r3, [r4, #16]
 80111b2:	b94b      	cbnz	r3, 80111c8 <__swsetup_r+0x7c>
 80111b4:	89a3      	ldrh	r3, [r4, #12]
 80111b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80111ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80111be:	d003      	beq.n	80111c8 <__swsetup_r+0x7c>
 80111c0:	4621      	mov	r1, r4
 80111c2:	4628      	mov	r0, r5
 80111c4:	f000 f884 	bl	80112d0 <__smakebuf_r>
 80111c8:	89a0      	ldrh	r0, [r4, #12]
 80111ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80111ce:	f010 0301 	ands.w	r3, r0, #1
 80111d2:	d00a      	beq.n	80111ea <__swsetup_r+0x9e>
 80111d4:	2300      	movs	r3, #0
 80111d6:	60a3      	str	r3, [r4, #8]
 80111d8:	6963      	ldr	r3, [r4, #20]
 80111da:	425b      	negs	r3, r3
 80111dc:	61a3      	str	r3, [r4, #24]
 80111de:	6923      	ldr	r3, [r4, #16]
 80111e0:	b943      	cbnz	r3, 80111f4 <__swsetup_r+0xa8>
 80111e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80111e6:	d1c4      	bne.n	8011172 <__swsetup_r+0x26>
 80111e8:	bd38      	pop	{r3, r4, r5, pc}
 80111ea:	0781      	lsls	r1, r0, #30
 80111ec:	bf58      	it	pl
 80111ee:	6963      	ldrpl	r3, [r4, #20]
 80111f0:	60a3      	str	r3, [r4, #8]
 80111f2:	e7f4      	b.n	80111de <__swsetup_r+0x92>
 80111f4:	2000      	movs	r0, #0
 80111f6:	e7f7      	b.n	80111e8 <__swsetup_r+0x9c>
 80111f8:	20000204 	.word	0x20000204

080111fc <_raise_r>:
 80111fc:	291f      	cmp	r1, #31
 80111fe:	b538      	push	{r3, r4, r5, lr}
 8011200:	4604      	mov	r4, r0
 8011202:	460d      	mov	r5, r1
 8011204:	d904      	bls.n	8011210 <_raise_r+0x14>
 8011206:	2316      	movs	r3, #22
 8011208:	6003      	str	r3, [r0, #0]
 801120a:	f04f 30ff 	mov.w	r0, #4294967295
 801120e:	bd38      	pop	{r3, r4, r5, pc}
 8011210:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011212:	b112      	cbz	r2, 801121a <_raise_r+0x1e>
 8011214:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011218:	b94b      	cbnz	r3, 801122e <_raise_r+0x32>
 801121a:	4620      	mov	r0, r4
 801121c:	f000 f830 	bl	8011280 <_getpid_r>
 8011220:	462a      	mov	r2, r5
 8011222:	4601      	mov	r1, r0
 8011224:	4620      	mov	r0, r4
 8011226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801122a:	f000 b817 	b.w	801125c <_kill_r>
 801122e:	2b01      	cmp	r3, #1
 8011230:	d00a      	beq.n	8011248 <_raise_r+0x4c>
 8011232:	1c59      	adds	r1, r3, #1
 8011234:	d103      	bne.n	801123e <_raise_r+0x42>
 8011236:	2316      	movs	r3, #22
 8011238:	6003      	str	r3, [r0, #0]
 801123a:	2001      	movs	r0, #1
 801123c:	e7e7      	b.n	801120e <_raise_r+0x12>
 801123e:	2400      	movs	r4, #0
 8011240:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011244:	4628      	mov	r0, r5
 8011246:	4798      	blx	r3
 8011248:	2000      	movs	r0, #0
 801124a:	e7e0      	b.n	801120e <_raise_r+0x12>

0801124c <raise>:
 801124c:	4b02      	ldr	r3, [pc, #8]	; (8011258 <raise+0xc>)
 801124e:	4601      	mov	r1, r0
 8011250:	6818      	ldr	r0, [r3, #0]
 8011252:	f7ff bfd3 	b.w	80111fc <_raise_r>
 8011256:	bf00      	nop
 8011258:	20000204 	.word	0x20000204

0801125c <_kill_r>:
 801125c:	b538      	push	{r3, r4, r5, lr}
 801125e:	4d07      	ldr	r5, [pc, #28]	; (801127c <_kill_r+0x20>)
 8011260:	2300      	movs	r3, #0
 8011262:	4604      	mov	r4, r0
 8011264:	4608      	mov	r0, r1
 8011266:	4611      	mov	r1, r2
 8011268:	602b      	str	r3, [r5, #0]
 801126a:	f7f1 fa27 	bl	80026bc <_kill>
 801126e:	1c43      	adds	r3, r0, #1
 8011270:	d102      	bne.n	8011278 <_kill_r+0x1c>
 8011272:	682b      	ldr	r3, [r5, #0]
 8011274:	b103      	cbz	r3, 8011278 <_kill_r+0x1c>
 8011276:	6023      	str	r3, [r4, #0]
 8011278:	bd38      	pop	{r3, r4, r5, pc}
 801127a:	bf00      	nop
 801127c:	20000ed4 	.word	0x20000ed4

08011280 <_getpid_r>:
 8011280:	f7f1 ba14 	b.w	80026ac <_getpid>

08011284 <__swhatbuf_r>:
 8011284:	b570      	push	{r4, r5, r6, lr}
 8011286:	460c      	mov	r4, r1
 8011288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801128c:	2900      	cmp	r1, #0
 801128e:	b096      	sub	sp, #88	; 0x58
 8011290:	4615      	mov	r5, r2
 8011292:	461e      	mov	r6, r3
 8011294:	da0d      	bge.n	80112b2 <__swhatbuf_r+0x2e>
 8011296:	89a3      	ldrh	r3, [r4, #12]
 8011298:	f013 0f80 	tst.w	r3, #128	; 0x80
 801129c:	f04f 0100 	mov.w	r1, #0
 80112a0:	bf0c      	ite	eq
 80112a2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80112a6:	2340      	movne	r3, #64	; 0x40
 80112a8:	2000      	movs	r0, #0
 80112aa:	6031      	str	r1, [r6, #0]
 80112ac:	602b      	str	r3, [r5, #0]
 80112ae:	b016      	add	sp, #88	; 0x58
 80112b0:	bd70      	pop	{r4, r5, r6, pc}
 80112b2:	466a      	mov	r2, sp
 80112b4:	f000 f848 	bl	8011348 <_fstat_r>
 80112b8:	2800      	cmp	r0, #0
 80112ba:	dbec      	blt.n	8011296 <__swhatbuf_r+0x12>
 80112bc:	9901      	ldr	r1, [sp, #4]
 80112be:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80112c2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80112c6:	4259      	negs	r1, r3
 80112c8:	4159      	adcs	r1, r3
 80112ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80112ce:	e7eb      	b.n	80112a8 <__swhatbuf_r+0x24>

080112d0 <__smakebuf_r>:
 80112d0:	898b      	ldrh	r3, [r1, #12]
 80112d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80112d4:	079d      	lsls	r5, r3, #30
 80112d6:	4606      	mov	r6, r0
 80112d8:	460c      	mov	r4, r1
 80112da:	d507      	bpl.n	80112ec <__smakebuf_r+0x1c>
 80112dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80112e0:	6023      	str	r3, [r4, #0]
 80112e2:	6123      	str	r3, [r4, #16]
 80112e4:	2301      	movs	r3, #1
 80112e6:	6163      	str	r3, [r4, #20]
 80112e8:	b002      	add	sp, #8
 80112ea:	bd70      	pop	{r4, r5, r6, pc}
 80112ec:	ab01      	add	r3, sp, #4
 80112ee:	466a      	mov	r2, sp
 80112f0:	f7ff ffc8 	bl	8011284 <__swhatbuf_r>
 80112f4:	9900      	ldr	r1, [sp, #0]
 80112f6:	4605      	mov	r5, r0
 80112f8:	4630      	mov	r0, r6
 80112fa:	f7fb fc89 	bl	800cc10 <_malloc_r>
 80112fe:	b948      	cbnz	r0, 8011314 <__smakebuf_r+0x44>
 8011300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011304:	059a      	lsls	r2, r3, #22
 8011306:	d4ef      	bmi.n	80112e8 <__smakebuf_r+0x18>
 8011308:	f023 0303 	bic.w	r3, r3, #3
 801130c:	f043 0302 	orr.w	r3, r3, #2
 8011310:	81a3      	strh	r3, [r4, #12]
 8011312:	e7e3      	b.n	80112dc <__smakebuf_r+0xc>
 8011314:	89a3      	ldrh	r3, [r4, #12]
 8011316:	6020      	str	r0, [r4, #0]
 8011318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801131c:	81a3      	strh	r3, [r4, #12]
 801131e:	9b00      	ldr	r3, [sp, #0]
 8011320:	6163      	str	r3, [r4, #20]
 8011322:	9b01      	ldr	r3, [sp, #4]
 8011324:	6120      	str	r0, [r4, #16]
 8011326:	b15b      	cbz	r3, 8011340 <__smakebuf_r+0x70>
 8011328:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801132c:	4630      	mov	r0, r6
 801132e:	f000 f81d 	bl	801136c <_isatty_r>
 8011332:	b128      	cbz	r0, 8011340 <__smakebuf_r+0x70>
 8011334:	89a3      	ldrh	r3, [r4, #12]
 8011336:	f023 0303 	bic.w	r3, r3, #3
 801133a:	f043 0301 	orr.w	r3, r3, #1
 801133e:	81a3      	strh	r3, [r4, #12]
 8011340:	89a3      	ldrh	r3, [r4, #12]
 8011342:	431d      	orrs	r5, r3
 8011344:	81a5      	strh	r5, [r4, #12]
 8011346:	e7cf      	b.n	80112e8 <__smakebuf_r+0x18>

08011348 <_fstat_r>:
 8011348:	b538      	push	{r3, r4, r5, lr}
 801134a:	4d07      	ldr	r5, [pc, #28]	; (8011368 <_fstat_r+0x20>)
 801134c:	2300      	movs	r3, #0
 801134e:	4604      	mov	r4, r0
 8011350:	4608      	mov	r0, r1
 8011352:	4611      	mov	r1, r2
 8011354:	602b      	str	r3, [r5, #0]
 8011356:	f7f1 fa10 	bl	800277a <_fstat>
 801135a:	1c43      	adds	r3, r0, #1
 801135c:	d102      	bne.n	8011364 <_fstat_r+0x1c>
 801135e:	682b      	ldr	r3, [r5, #0]
 8011360:	b103      	cbz	r3, 8011364 <_fstat_r+0x1c>
 8011362:	6023      	str	r3, [r4, #0]
 8011364:	bd38      	pop	{r3, r4, r5, pc}
 8011366:	bf00      	nop
 8011368:	20000ed4 	.word	0x20000ed4

0801136c <_isatty_r>:
 801136c:	b538      	push	{r3, r4, r5, lr}
 801136e:	4d06      	ldr	r5, [pc, #24]	; (8011388 <_isatty_r+0x1c>)
 8011370:	2300      	movs	r3, #0
 8011372:	4604      	mov	r4, r0
 8011374:	4608      	mov	r0, r1
 8011376:	602b      	str	r3, [r5, #0]
 8011378:	f7f1 fa0f 	bl	800279a <_isatty>
 801137c:	1c43      	adds	r3, r0, #1
 801137e:	d102      	bne.n	8011386 <_isatty_r+0x1a>
 8011380:	682b      	ldr	r3, [r5, #0]
 8011382:	b103      	cbz	r3, 8011386 <_isatty_r+0x1a>
 8011384:	6023      	str	r3, [r4, #0]
 8011386:	bd38      	pop	{r3, r4, r5, pc}
 8011388:	20000ed4 	.word	0x20000ed4

0801138c <atan2>:
 801138c:	f000 bbe8 	b.w	8011b60 <__ieee754_atan2>

08011390 <fmod>:
 8011390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011392:	ed2d 8b02 	vpush	{d8}
 8011396:	ec57 6b10 	vmov	r6, r7, d0
 801139a:	ec55 4b11 	vmov	r4, r5, d1
 801139e:	f000 fca5 	bl	8011cec <__ieee754_fmod>
 80113a2:	4622      	mov	r2, r4
 80113a4:	462b      	mov	r3, r5
 80113a6:	4630      	mov	r0, r6
 80113a8:	4639      	mov	r1, r7
 80113aa:	eeb0 8a40 	vmov.f32	s16, s0
 80113ae:	eef0 8a60 	vmov.f32	s17, s1
 80113b2:	f7ef fbbb 	bl	8000b2c <__aeabi_dcmpun>
 80113b6:	b990      	cbnz	r0, 80113de <fmod+0x4e>
 80113b8:	2200      	movs	r2, #0
 80113ba:	2300      	movs	r3, #0
 80113bc:	4620      	mov	r0, r4
 80113be:	4629      	mov	r1, r5
 80113c0:	f7ef fb82 	bl	8000ac8 <__aeabi_dcmpeq>
 80113c4:	b158      	cbz	r0, 80113de <fmod+0x4e>
 80113c6:	f7fd fadd 	bl	800e984 <__errno>
 80113ca:	2321      	movs	r3, #33	; 0x21
 80113cc:	6003      	str	r3, [r0, #0]
 80113ce:	2200      	movs	r2, #0
 80113d0:	2300      	movs	r3, #0
 80113d2:	4610      	mov	r0, r2
 80113d4:	4619      	mov	r1, r3
 80113d6:	f7ef fa39 	bl	800084c <__aeabi_ddiv>
 80113da:	ec41 0b18 	vmov	d8, r0, r1
 80113de:	eeb0 0a48 	vmov.f32	s0, s16
 80113e2:	eef0 0a68 	vmov.f32	s1, s17
 80113e6:	ecbd 8b02 	vpop	{d8}
 80113ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080113ec <pow>:
 80113ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ee:	ed2d 8b02 	vpush	{d8}
 80113f2:	eeb0 8a40 	vmov.f32	s16, s0
 80113f6:	eef0 8a60 	vmov.f32	s17, s1
 80113fa:	ec55 4b11 	vmov	r4, r5, d1
 80113fe:	f000 fd83 	bl	8011f08 <__ieee754_pow>
 8011402:	4622      	mov	r2, r4
 8011404:	462b      	mov	r3, r5
 8011406:	4620      	mov	r0, r4
 8011408:	4629      	mov	r1, r5
 801140a:	ec57 6b10 	vmov	r6, r7, d0
 801140e:	f7ef fb8d 	bl	8000b2c <__aeabi_dcmpun>
 8011412:	2800      	cmp	r0, #0
 8011414:	d13b      	bne.n	801148e <pow+0xa2>
 8011416:	ec51 0b18 	vmov	r0, r1, d8
 801141a:	2200      	movs	r2, #0
 801141c:	2300      	movs	r3, #0
 801141e:	f7ef fb53 	bl	8000ac8 <__aeabi_dcmpeq>
 8011422:	b1b8      	cbz	r0, 8011454 <pow+0x68>
 8011424:	2200      	movs	r2, #0
 8011426:	2300      	movs	r3, #0
 8011428:	4620      	mov	r0, r4
 801142a:	4629      	mov	r1, r5
 801142c:	f7ef fb4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8011430:	2800      	cmp	r0, #0
 8011432:	d146      	bne.n	80114c2 <pow+0xd6>
 8011434:	ec45 4b10 	vmov	d0, r4, r5
 8011438:	f000 f922 	bl	8011680 <finite>
 801143c:	b338      	cbz	r0, 801148e <pow+0xa2>
 801143e:	2200      	movs	r2, #0
 8011440:	2300      	movs	r3, #0
 8011442:	4620      	mov	r0, r4
 8011444:	4629      	mov	r1, r5
 8011446:	f7ef fb49 	bl	8000adc <__aeabi_dcmplt>
 801144a:	b300      	cbz	r0, 801148e <pow+0xa2>
 801144c:	f7fd fa9a 	bl	800e984 <__errno>
 8011450:	2322      	movs	r3, #34	; 0x22
 8011452:	e01b      	b.n	801148c <pow+0xa0>
 8011454:	ec47 6b10 	vmov	d0, r6, r7
 8011458:	f000 f912 	bl	8011680 <finite>
 801145c:	b9e0      	cbnz	r0, 8011498 <pow+0xac>
 801145e:	eeb0 0a48 	vmov.f32	s0, s16
 8011462:	eef0 0a68 	vmov.f32	s1, s17
 8011466:	f000 f90b 	bl	8011680 <finite>
 801146a:	b1a8      	cbz	r0, 8011498 <pow+0xac>
 801146c:	ec45 4b10 	vmov	d0, r4, r5
 8011470:	f000 f906 	bl	8011680 <finite>
 8011474:	b180      	cbz	r0, 8011498 <pow+0xac>
 8011476:	4632      	mov	r2, r6
 8011478:	463b      	mov	r3, r7
 801147a:	4630      	mov	r0, r6
 801147c:	4639      	mov	r1, r7
 801147e:	f7ef fb55 	bl	8000b2c <__aeabi_dcmpun>
 8011482:	2800      	cmp	r0, #0
 8011484:	d0e2      	beq.n	801144c <pow+0x60>
 8011486:	f7fd fa7d 	bl	800e984 <__errno>
 801148a:	2321      	movs	r3, #33	; 0x21
 801148c:	6003      	str	r3, [r0, #0]
 801148e:	ecbd 8b02 	vpop	{d8}
 8011492:	ec47 6b10 	vmov	d0, r6, r7
 8011496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011498:	2200      	movs	r2, #0
 801149a:	2300      	movs	r3, #0
 801149c:	4630      	mov	r0, r6
 801149e:	4639      	mov	r1, r7
 80114a0:	f7ef fb12 	bl	8000ac8 <__aeabi_dcmpeq>
 80114a4:	2800      	cmp	r0, #0
 80114a6:	d0f2      	beq.n	801148e <pow+0xa2>
 80114a8:	eeb0 0a48 	vmov.f32	s0, s16
 80114ac:	eef0 0a68 	vmov.f32	s1, s17
 80114b0:	f000 f8e6 	bl	8011680 <finite>
 80114b4:	2800      	cmp	r0, #0
 80114b6:	d0ea      	beq.n	801148e <pow+0xa2>
 80114b8:	ec45 4b10 	vmov	d0, r4, r5
 80114bc:	f000 f8e0 	bl	8011680 <finite>
 80114c0:	e7c3      	b.n	801144a <pow+0x5e>
 80114c2:	4f01      	ldr	r7, [pc, #4]	; (80114c8 <pow+0xdc>)
 80114c4:	2600      	movs	r6, #0
 80114c6:	e7e2      	b.n	801148e <pow+0xa2>
 80114c8:	3ff00000 	.word	0x3ff00000

080114cc <sqrt>:
 80114cc:	b538      	push	{r3, r4, r5, lr}
 80114ce:	ed2d 8b02 	vpush	{d8}
 80114d2:	ec55 4b10 	vmov	r4, r5, d0
 80114d6:	f000 f8df 	bl	8011698 <__ieee754_sqrt>
 80114da:	4622      	mov	r2, r4
 80114dc:	462b      	mov	r3, r5
 80114de:	4620      	mov	r0, r4
 80114e0:	4629      	mov	r1, r5
 80114e2:	eeb0 8a40 	vmov.f32	s16, s0
 80114e6:	eef0 8a60 	vmov.f32	s17, s1
 80114ea:	f7ef fb1f 	bl	8000b2c <__aeabi_dcmpun>
 80114ee:	b990      	cbnz	r0, 8011516 <sqrt+0x4a>
 80114f0:	2200      	movs	r2, #0
 80114f2:	2300      	movs	r3, #0
 80114f4:	4620      	mov	r0, r4
 80114f6:	4629      	mov	r1, r5
 80114f8:	f7ef faf0 	bl	8000adc <__aeabi_dcmplt>
 80114fc:	b158      	cbz	r0, 8011516 <sqrt+0x4a>
 80114fe:	f7fd fa41 	bl	800e984 <__errno>
 8011502:	2321      	movs	r3, #33	; 0x21
 8011504:	6003      	str	r3, [r0, #0]
 8011506:	2200      	movs	r2, #0
 8011508:	2300      	movs	r3, #0
 801150a:	4610      	mov	r0, r2
 801150c:	4619      	mov	r1, r3
 801150e:	f7ef f99d 	bl	800084c <__aeabi_ddiv>
 8011512:	ec41 0b18 	vmov	d8, r0, r1
 8011516:	eeb0 0a48 	vmov.f32	s0, s16
 801151a:	eef0 0a68 	vmov.f32	s1, s17
 801151e:	ecbd 8b02 	vpop	{d8}
 8011522:	bd38      	pop	{r3, r4, r5, pc}
 8011524:	0000      	movs	r0, r0
	...

08011528 <cos>:
 8011528:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801152a:	ec53 2b10 	vmov	r2, r3, d0
 801152e:	4826      	ldr	r0, [pc, #152]	; (80115c8 <cos+0xa0>)
 8011530:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011534:	4281      	cmp	r1, r0
 8011536:	dc06      	bgt.n	8011546 <cos+0x1e>
 8011538:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80115c0 <cos+0x98>
 801153c:	b005      	add	sp, #20
 801153e:	f85d eb04 	ldr.w	lr, [sp], #4
 8011542:	f000 b985 	b.w	8011850 <__kernel_cos>
 8011546:	4821      	ldr	r0, [pc, #132]	; (80115cc <cos+0xa4>)
 8011548:	4281      	cmp	r1, r0
 801154a:	dd09      	ble.n	8011560 <cos+0x38>
 801154c:	ee10 0a10 	vmov	r0, s0
 8011550:	4619      	mov	r1, r3
 8011552:	f7ee fe99 	bl	8000288 <__aeabi_dsub>
 8011556:	ec41 0b10 	vmov	d0, r0, r1
 801155a:	b005      	add	sp, #20
 801155c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011560:	4668      	mov	r0, sp
 8011562:	f001 f9fd 	bl	8012960 <__ieee754_rem_pio2>
 8011566:	f000 0003 	and.w	r0, r0, #3
 801156a:	2801      	cmp	r0, #1
 801156c:	d00b      	beq.n	8011586 <cos+0x5e>
 801156e:	2802      	cmp	r0, #2
 8011570:	d016      	beq.n	80115a0 <cos+0x78>
 8011572:	b9e0      	cbnz	r0, 80115ae <cos+0x86>
 8011574:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011578:	ed9d 0b00 	vldr	d0, [sp]
 801157c:	f000 f968 	bl	8011850 <__kernel_cos>
 8011580:	ec51 0b10 	vmov	r0, r1, d0
 8011584:	e7e7      	b.n	8011556 <cos+0x2e>
 8011586:	ed9d 1b02 	vldr	d1, [sp, #8]
 801158a:	ed9d 0b00 	vldr	d0, [sp]
 801158e:	f000 fa27 	bl	80119e0 <__kernel_sin>
 8011592:	ec53 2b10 	vmov	r2, r3, d0
 8011596:	ee10 0a10 	vmov	r0, s0
 801159a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801159e:	e7da      	b.n	8011556 <cos+0x2e>
 80115a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80115a4:	ed9d 0b00 	vldr	d0, [sp]
 80115a8:	f000 f952 	bl	8011850 <__kernel_cos>
 80115ac:	e7f1      	b.n	8011592 <cos+0x6a>
 80115ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80115b2:	ed9d 0b00 	vldr	d0, [sp]
 80115b6:	2001      	movs	r0, #1
 80115b8:	f000 fa12 	bl	80119e0 <__kernel_sin>
 80115bc:	e7e0      	b.n	8011580 <cos+0x58>
 80115be:	bf00      	nop
	...
 80115c8:	3fe921fb 	.word	0x3fe921fb
 80115cc:	7fefffff 	.word	0x7fefffff

080115d0 <sin>:
 80115d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80115d2:	ec53 2b10 	vmov	r2, r3, d0
 80115d6:	4828      	ldr	r0, [pc, #160]	; (8011678 <sin+0xa8>)
 80115d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80115dc:	4281      	cmp	r1, r0
 80115de:	dc07      	bgt.n	80115f0 <sin+0x20>
 80115e0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8011670 <sin+0xa0>
 80115e4:	2000      	movs	r0, #0
 80115e6:	b005      	add	sp, #20
 80115e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80115ec:	f000 b9f8 	b.w	80119e0 <__kernel_sin>
 80115f0:	4822      	ldr	r0, [pc, #136]	; (801167c <sin+0xac>)
 80115f2:	4281      	cmp	r1, r0
 80115f4:	dd09      	ble.n	801160a <sin+0x3a>
 80115f6:	ee10 0a10 	vmov	r0, s0
 80115fa:	4619      	mov	r1, r3
 80115fc:	f7ee fe44 	bl	8000288 <__aeabi_dsub>
 8011600:	ec41 0b10 	vmov	d0, r0, r1
 8011604:	b005      	add	sp, #20
 8011606:	f85d fb04 	ldr.w	pc, [sp], #4
 801160a:	4668      	mov	r0, sp
 801160c:	f001 f9a8 	bl	8012960 <__ieee754_rem_pio2>
 8011610:	f000 0003 	and.w	r0, r0, #3
 8011614:	2801      	cmp	r0, #1
 8011616:	d00c      	beq.n	8011632 <sin+0x62>
 8011618:	2802      	cmp	r0, #2
 801161a:	d011      	beq.n	8011640 <sin+0x70>
 801161c:	b9f0      	cbnz	r0, 801165c <sin+0x8c>
 801161e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011622:	ed9d 0b00 	vldr	d0, [sp]
 8011626:	2001      	movs	r0, #1
 8011628:	f000 f9da 	bl	80119e0 <__kernel_sin>
 801162c:	ec51 0b10 	vmov	r0, r1, d0
 8011630:	e7e6      	b.n	8011600 <sin+0x30>
 8011632:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011636:	ed9d 0b00 	vldr	d0, [sp]
 801163a:	f000 f909 	bl	8011850 <__kernel_cos>
 801163e:	e7f5      	b.n	801162c <sin+0x5c>
 8011640:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011644:	ed9d 0b00 	vldr	d0, [sp]
 8011648:	2001      	movs	r0, #1
 801164a:	f000 f9c9 	bl	80119e0 <__kernel_sin>
 801164e:	ec53 2b10 	vmov	r2, r3, d0
 8011652:	ee10 0a10 	vmov	r0, s0
 8011656:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801165a:	e7d1      	b.n	8011600 <sin+0x30>
 801165c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011660:	ed9d 0b00 	vldr	d0, [sp]
 8011664:	f000 f8f4 	bl	8011850 <__kernel_cos>
 8011668:	e7f1      	b.n	801164e <sin+0x7e>
 801166a:	bf00      	nop
 801166c:	f3af 8000 	nop.w
	...
 8011678:	3fe921fb 	.word	0x3fe921fb
 801167c:	7fefffff 	.word	0x7fefffff

08011680 <finite>:
 8011680:	b082      	sub	sp, #8
 8011682:	ed8d 0b00 	vstr	d0, [sp]
 8011686:	9801      	ldr	r0, [sp, #4]
 8011688:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801168c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011690:	0fc0      	lsrs	r0, r0, #31
 8011692:	b002      	add	sp, #8
 8011694:	4770      	bx	lr
	...

08011698 <__ieee754_sqrt>:
 8011698:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801169c:	ec55 4b10 	vmov	r4, r5, d0
 80116a0:	4e67      	ldr	r6, [pc, #412]	; (8011840 <__ieee754_sqrt+0x1a8>)
 80116a2:	43ae      	bics	r6, r5
 80116a4:	ee10 0a10 	vmov	r0, s0
 80116a8:	ee10 2a10 	vmov	r2, s0
 80116ac:	4629      	mov	r1, r5
 80116ae:	462b      	mov	r3, r5
 80116b0:	d10d      	bne.n	80116ce <__ieee754_sqrt+0x36>
 80116b2:	f7ee ffa1 	bl	80005f8 <__aeabi_dmul>
 80116b6:	4602      	mov	r2, r0
 80116b8:	460b      	mov	r3, r1
 80116ba:	4620      	mov	r0, r4
 80116bc:	4629      	mov	r1, r5
 80116be:	f7ee fde5 	bl	800028c <__adddf3>
 80116c2:	4604      	mov	r4, r0
 80116c4:	460d      	mov	r5, r1
 80116c6:	ec45 4b10 	vmov	d0, r4, r5
 80116ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116ce:	2d00      	cmp	r5, #0
 80116d0:	dc0b      	bgt.n	80116ea <__ieee754_sqrt+0x52>
 80116d2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80116d6:	4326      	orrs	r6, r4
 80116d8:	d0f5      	beq.n	80116c6 <__ieee754_sqrt+0x2e>
 80116da:	b135      	cbz	r5, 80116ea <__ieee754_sqrt+0x52>
 80116dc:	f7ee fdd4 	bl	8000288 <__aeabi_dsub>
 80116e0:	4602      	mov	r2, r0
 80116e2:	460b      	mov	r3, r1
 80116e4:	f7ef f8b2 	bl	800084c <__aeabi_ddiv>
 80116e8:	e7eb      	b.n	80116c2 <__ieee754_sqrt+0x2a>
 80116ea:	1509      	asrs	r1, r1, #20
 80116ec:	f000 808d 	beq.w	801180a <__ieee754_sqrt+0x172>
 80116f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80116f4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80116f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80116fc:	07c9      	lsls	r1, r1, #31
 80116fe:	bf5c      	itt	pl
 8011700:	005b      	lslpl	r3, r3, #1
 8011702:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8011706:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801170a:	bf58      	it	pl
 801170c:	0052      	lslpl	r2, r2, #1
 801170e:	2500      	movs	r5, #0
 8011710:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011714:	1076      	asrs	r6, r6, #1
 8011716:	0052      	lsls	r2, r2, #1
 8011718:	f04f 0e16 	mov.w	lr, #22
 801171c:	46ac      	mov	ip, r5
 801171e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011722:	eb0c 0001 	add.w	r0, ip, r1
 8011726:	4298      	cmp	r0, r3
 8011728:	bfde      	ittt	le
 801172a:	1a1b      	suble	r3, r3, r0
 801172c:	eb00 0c01 	addle.w	ip, r0, r1
 8011730:	186d      	addle	r5, r5, r1
 8011732:	005b      	lsls	r3, r3, #1
 8011734:	f1be 0e01 	subs.w	lr, lr, #1
 8011738:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801173c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011740:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011744:	d1ed      	bne.n	8011722 <__ieee754_sqrt+0x8a>
 8011746:	4674      	mov	r4, lr
 8011748:	2720      	movs	r7, #32
 801174a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801174e:	4563      	cmp	r3, ip
 8011750:	eb01 000e 	add.w	r0, r1, lr
 8011754:	dc02      	bgt.n	801175c <__ieee754_sqrt+0xc4>
 8011756:	d113      	bne.n	8011780 <__ieee754_sqrt+0xe8>
 8011758:	4290      	cmp	r0, r2
 801175a:	d811      	bhi.n	8011780 <__ieee754_sqrt+0xe8>
 801175c:	2800      	cmp	r0, #0
 801175e:	eb00 0e01 	add.w	lr, r0, r1
 8011762:	da57      	bge.n	8011814 <__ieee754_sqrt+0x17c>
 8011764:	f1be 0f00 	cmp.w	lr, #0
 8011768:	db54      	blt.n	8011814 <__ieee754_sqrt+0x17c>
 801176a:	f10c 0801 	add.w	r8, ip, #1
 801176e:	eba3 030c 	sub.w	r3, r3, ip
 8011772:	4290      	cmp	r0, r2
 8011774:	bf88      	it	hi
 8011776:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801177a:	1a12      	subs	r2, r2, r0
 801177c:	440c      	add	r4, r1
 801177e:	46c4      	mov	ip, r8
 8011780:	005b      	lsls	r3, r3, #1
 8011782:	3f01      	subs	r7, #1
 8011784:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011788:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801178c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011790:	d1dd      	bne.n	801174e <__ieee754_sqrt+0xb6>
 8011792:	4313      	orrs	r3, r2
 8011794:	d01b      	beq.n	80117ce <__ieee754_sqrt+0x136>
 8011796:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8011844 <__ieee754_sqrt+0x1ac>
 801179a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8011848 <__ieee754_sqrt+0x1b0>
 801179e:	e9da 0100 	ldrd	r0, r1, [sl]
 80117a2:	e9db 2300 	ldrd	r2, r3, [fp]
 80117a6:	f7ee fd6f 	bl	8000288 <__aeabi_dsub>
 80117aa:	e9da 8900 	ldrd	r8, r9, [sl]
 80117ae:	4602      	mov	r2, r0
 80117b0:	460b      	mov	r3, r1
 80117b2:	4640      	mov	r0, r8
 80117b4:	4649      	mov	r1, r9
 80117b6:	f7ef f99b 	bl	8000af0 <__aeabi_dcmple>
 80117ba:	b140      	cbz	r0, 80117ce <__ieee754_sqrt+0x136>
 80117bc:	f1b4 3fff 	cmp.w	r4, #4294967295
 80117c0:	e9da 0100 	ldrd	r0, r1, [sl]
 80117c4:	e9db 2300 	ldrd	r2, r3, [fp]
 80117c8:	d126      	bne.n	8011818 <__ieee754_sqrt+0x180>
 80117ca:	3501      	adds	r5, #1
 80117cc:	463c      	mov	r4, r7
 80117ce:	106a      	asrs	r2, r5, #1
 80117d0:	0863      	lsrs	r3, r4, #1
 80117d2:	07e9      	lsls	r1, r5, #31
 80117d4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80117d8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80117dc:	bf48      	it	mi
 80117de:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80117e2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80117e6:	461c      	mov	r4, r3
 80117e8:	e76d      	b.n	80116c6 <__ieee754_sqrt+0x2e>
 80117ea:	0ad3      	lsrs	r3, r2, #11
 80117ec:	3815      	subs	r0, #21
 80117ee:	0552      	lsls	r2, r2, #21
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d0fa      	beq.n	80117ea <__ieee754_sqrt+0x152>
 80117f4:	02dc      	lsls	r4, r3, #11
 80117f6:	d50a      	bpl.n	801180e <__ieee754_sqrt+0x176>
 80117f8:	f1c1 0420 	rsb	r4, r1, #32
 80117fc:	fa22 f404 	lsr.w	r4, r2, r4
 8011800:	1e4d      	subs	r5, r1, #1
 8011802:	408a      	lsls	r2, r1
 8011804:	4323      	orrs	r3, r4
 8011806:	1b41      	subs	r1, r0, r5
 8011808:	e772      	b.n	80116f0 <__ieee754_sqrt+0x58>
 801180a:	4608      	mov	r0, r1
 801180c:	e7f0      	b.n	80117f0 <__ieee754_sqrt+0x158>
 801180e:	005b      	lsls	r3, r3, #1
 8011810:	3101      	adds	r1, #1
 8011812:	e7ef      	b.n	80117f4 <__ieee754_sqrt+0x15c>
 8011814:	46e0      	mov	r8, ip
 8011816:	e7aa      	b.n	801176e <__ieee754_sqrt+0xd6>
 8011818:	f7ee fd38 	bl	800028c <__adddf3>
 801181c:	e9da 8900 	ldrd	r8, r9, [sl]
 8011820:	4602      	mov	r2, r0
 8011822:	460b      	mov	r3, r1
 8011824:	4640      	mov	r0, r8
 8011826:	4649      	mov	r1, r9
 8011828:	f7ef f958 	bl	8000adc <__aeabi_dcmplt>
 801182c:	b120      	cbz	r0, 8011838 <__ieee754_sqrt+0x1a0>
 801182e:	1ca0      	adds	r0, r4, #2
 8011830:	bf08      	it	eq
 8011832:	3501      	addeq	r5, #1
 8011834:	3402      	adds	r4, #2
 8011836:	e7ca      	b.n	80117ce <__ieee754_sqrt+0x136>
 8011838:	3401      	adds	r4, #1
 801183a:	f024 0401 	bic.w	r4, r4, #1
 801183e:	e7c6      	b.n	80117ce <__ieee754_sqrt+0x136>
 8011840:	7ff00000 	.word	0x7ff00000
 8011844:	20000208 	.word	0x20000208
 8011848:	20000210 	.word	0x20000210
 801184c:	00000000 	.word	0x00000000

08011850 <__kernel_cos>:
 8011850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011854:	ec57 6b10 	vmov	r6, r7, d0
 8011858:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801185c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8011860:	ed8d 1b00 	vstr	d1, [sp]
 8011864:	da07      	bge.n	8011876 <__kernel_cos+0x26>
 8011866:	ee10 0a10 	vmov	r0, s0
 801186a:	4639      	mov	r1, r7
 801186c:	f7ef f974 	bl	8000b58 <__aeabi_d2iz>
 8011870:	2800      	cmp	r0, #0
 8011872:	f000 8088 	beq.w	8011986 <__kernel_cos+0x136>
 8011876:	4632      	mov	r2, r6
 8011878:	463b      	mov	r3, r7
 801187a:	4630      	mov	r0, r6
 801187c:	4639      	mov	r1, r7
 801187e:	f7ee febb 	bl	80005f8 <__aeabi_dmul>
 8011882:	4b51      	ldr	r3, [pc, #324]	; (80119c8 <__kernel_cos+0x178>)
 8011884:	2200      	movs	r2, #0
 8011886:	4604      	mov	r4, r0
 8011888:	460d      	mov	r5, r1
 801188a:	f7ee feb5 	bl	80005f8 <__aeabi_dmul>
 801188e:	a340      	add	r3, pc, #256	; (adr r3, 8011990 <__kernel_cos+0x140>)
 8011890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011894:	4682      	mov	sl, r0
 8011896:	468b      	mov	fp, r1
 8011898:	4620      	mov	r0, r4
 801189a:	4629      	mov	r1, r5
 801189c:	f7ee feac 	bl	80005f8 <__aeabi_dmul>
 80118a0:	a33d      	add	r3, pc, #244	; (adr r3, 8011998 <__kernel_cos+0x148>)
 80118a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a6:	f7ee fcf1 	bl	800028c <__adddf3>
 80118aa:	4622      	mov	r2, r4
 80118ac:	462b      	mov	r3, r5
 80118ae:	f7ee fea3 	bl	80005f8 <__aeabi_dmul>
 80118b2:	a33b      	add	r3, pc, #236	; (adr r3, 80119a0 <__kernel_cos+0x150>)
 80118b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b8:	f7ee fce6 	bl	8000288 <__aeabi_dsub>
 80118bc:	4622      	mov	r2, r4
 80118be:	462b      	mov	r3, r5
 80118c0:	f7ee fe9a 	bl	80005f8 <__aeabi_dmul>
 80118c4:	a338      	add	r3, pc, #224	; (adr r3, 80119a8 <__kernel_cos+0x158>)
 80118c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ca:	f7ee fcdf 	bl	800028c <__adddf3>
 80118ce:	4622      	mov	r2, r4
 80118d0:	462b      	mov	r3, r5
 80118d2:	f7ee fe91 	bl	80005f8 <__aeabi_dmul>
 80118d6:	a336      	add	r3, pc, #216	; (adr r3, 80119b0 <__kernel_cos+0x160>)
 80118d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118dc:	f7ee fcd4 	bl	8000288 <__aeabi_dsub>
 80118e0:	4622      	mov	r2, r4
 80118e2:	462b      	mov	r3, r5
 80118e4:	f7ee fe88 	bl	80005f8 <__aeabi_dmul>
 80118e8:	a333      	add	r3, pc, #204	; (adr r3, 80119b8 <__kernel_cos+0x168>)
 80118ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ee:	f7ee fccd 	bl	800028c <__adddf3>
 80118f2:	4622      	mov	r2, r4
 80118f4:	462b      	mov	r3, r5
 80118f6:	f7ee fe7f 	bl	80005f8 <__aeabi_dmul>
 80118fa:	4622      	mov	r2, r4
 80118fc:	462b      	mov	r3, r5
 80118fe:	f7ee fe7b 	bl	80005f8 <__aeabi_dmul>
 8011902:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011906:	4604      	mov	r4, r0
 8011908:	460d      	mov	r5, r1
 801190a:	4630      	mov	r0, r6
 801190c:	4639      	mov	r1, r7
 801190e:	f7ee fe73 	bl	80005f8 <__aeabi_dmul>
 8011912:	460b      	mov	r3, r1
 8011914:	4602      	mov	r2, r0
 8011916:	4629      	mov	r1, r5
 8011918:	4620      	mov	r0, r4
 801191a:	f7ee fcb5 	bl	8000288 <__aeabi_dsub>
 801191e:	4b2b      	ldr	r3, [pc, #172]	; (80119cc <__kernel_cos+0x17c>)
 8011920:	4598      	cmp	r8, r3
 8011922:	4606      	mov	r6, r0
 8011924:	460f      	mov	r7, r1
 8011926:	dc10      	bgt.n	801194a <__kernel_cos+0xfa>
 8011928:	4602      	mov	r2, r0
 801192a:	460b      	mov	r3, r1
 801192c:	4650      	mov	r0, sl
 801192e:	4659      	mov	r1, fp
 8011930:	f7ee fcaa 	bl	8000288 <__aeabi_dsub>
 8011934:	460b      	mov	r3, r1
 8011936:	4926      	ldr	r1, [pc, #152]	; (80119d0 <__kernel_cos+0x180>)
 8011938:	4602      	mov	r2, r0
 801193a:	2000      	movs	r0, #0
 801193c:	f7ee fca4 	bl	8000288 <__aeabi_dsub>
 8011940:	ec41 0b10 	vmov	d0, r0, r1
 8011944:	b003      	add	sp, #12
 8011946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801194a:	4b22      	ldr	r3, [pc, #136]	; (80119d4 <__kernel_cos+0x184>)
 801194c:	4920      	ldr	r1, [pc, #128]	; (80119d0 <__kernel_cos+0x180>)
 801194e:	4598      	cmp	r8, r3
 8011950:	bfcc      	ite	gt
 8011952:	4d21      	ldrgt	r5, [pc, #132]	; (80119d8 <__kernel_cos+0x188>)
 8011954:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8011958:	2400      	movs	r4, #0
 801195a:	4622      	mov	r2, r4
 801195c:	462b      	mov	r3, r5
 801195e:	2000      	movs	r0, #0
 8011960:	f7ee fc92 	bl	8000288 <__aeabi_dsub>
 8011964:	4622      	mov	r2, r4
 8011966:	4680      	mov	r8, r0
 8011968:	4689      	mov	r9, r1
 801196a:	462b      	mov	r3, r5
 801196c:	4650      	mov	r0, sl
 801196e:	4659      	mov	r1, fp
 8011970:	f7ee fc8a 	bl	8000288 <__aeabi_dsub>
 8011974:	4632      	mov	r2, r6
 8011976:	463b      	mov	r3, r7
 8011978:	f7ee fc86 	bl	8000288 <__aeabi_dsub>
 801197c:	4602      	mov	r2, r0
 801197e:	460b      	mov	r3, r1
 8011980:	4640      	mov	r0, r8
 8011982:	4649      	mov	r1, r9
 8011984:	e7da      	b.n	801193c <__kernel_cos+0xec>
 8011986:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80119c0 <__kernel_cos+0x170>
 801198a:	e7db      	b.n	8011944 <__kernel_cos+0xf4>
 801198c:	f3af 8000 	nop.w
 8011990:	be8838d4 	.word	0xbe8838d4
 8011994:	bda8fae9 	.word	0xbda8fae9
 8011998:	bdb4b1c4 	.word	0xbdb4b1c4
 801199c:	3e21ee9e 	.word	0x3e21ee9e
 80119a0:	809c52ad 	.word	0x809c52ad
 80119a4:	3e927e4f 	.word	0x3e927e4f
 80119a8:	19cb1590 	.word	0x19cb1590
 80119ac:	3efa01a0 	.word	0x3efa01a0
 80119b0:	16c15177 	.word	0x16c15177
 80119b4:	3f56c16c 	.word	0x3f56c16c
 80119b8:	5555554c 	.word	0x5555554c
 80119bc:	3fa55555 	.word	0x3fa55555
 80119c0:	00000000 	.word	0x00000000
 80119c4:	3ff00000 	.word	0x3ff00000
 80119c8:	3fe00000 	.word	0x3fe00000
 80119cc:	3fd33332 	.word	0x3fd33332
 80119d0:	3ff00000 	.word	0x3ff00000
 80119d4:	3fe90000 	.word	0x3fe90000
 80119d8:	3fd20000 	.word	0x3fd20000
 80119dc:	00000000 	.word	0x00000000

080119e0 <__kernel_sin>:
 80119e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119e4:	ed2d 8b04 	vpush	{d8-d9}
 80119e8:	eeb0 8a41 	vmov.f32	s16, s2
 80119ec:	eef0 8a61 	vmov.f32	s17, s3
 80119f0:	ec55 4b10 	vmov	r4, r5, d0
 80119f4:	b083      	sub	sp, #12
 80119f6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80119fa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80119fe:	9001      	str	r0, [sp, #4]
 8011a00:	da06      	bge.n	8011a10 <__kernel_sin+0x30>
 8011a02:	ee10 0a10 	vmov	r0, s0
 8011a06:	4629      	mov	r1, r5
 8011a08:	f7ef f8a6 	bl	8000b58 <__aeabi_d2iz>
 8011a0c:	2800      	cmp	r0, #0
 8011a0e:	d051      	beq.n	8011ab4 <__kernel_sin+0xd4>
 8011a10:	4622      	mov	r2, r4
 8011a12:	462b      	mov	r3, r5
 8011a14:	4620      	mov	r0, r4
 8011a16:	4629      	mov	r1, r5
 8011a18:	f7ee fdee 	bl	80005f8 <__aeabi_dmul>
 8011a1c:	4682      	mov	sl, r0
 8011a1e:	468b      	mov	fp, r1
 8011a20:	4602      	mov	r2, r0
 8011a22:	460b      	mov	r3, r1
 8011a24:	4620      	mov	r0, r4
 8011a26:	4629      	mov	r1, r5
 8011a28:	f7ee fde6 	bl	80005f8 <__aeabi_dmul>
 8011a2c:	a341      	add	r3, pc, #260	; (adr r3, 8011b34 <__kernel_sin+0x154>)
 8011a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a32:	4680      	mov	r8, r0
 8011a34:	4689      	mov	r9, r1
 8011a36:	4650      	mov	r0, sl
 8011a38:	4659      	mov	r1, fp
 8011a3a:	f7ee fddd 	bl	80005f8 <__aeabi_dmul>
 8011a3e:	a33f      	add	r3, pc, #252	; (adr r3, 8011b3c <__kernel_sin+0x15c>)
 8011a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a44:	f7ee fc20 	bl	8000288 <__aeabi_dsub>
 8011a48:	4652      	mov	r2, sl
 8011a4a:	465b      	mov	r3, fp
 8011a4c:	f7ee fdd4 	bl	80005f8 <__aeabi_dmul>
 8011a50:	a33c      	add	r3, pc, #240	; (adr r3, 8011b44 <__kernel_sin+0x164>)
 8011a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a56:	f7ee fc19 	bl	800028c <__adddf3>
 8011a5a:	4652      	mov	r2, sl
 8011a5c:	465b      	mov	r3, fp
 8011a5e:	f7ee fdcb 	bl	80005f8 <__aeabi_dmul>
 8011a62:	a33a      	add	r3, pc, #232	; (adr r3, 8011b4c <__kernel_sin+0x16c>)
 8011a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a68:	f7ee fc0e 	bl	8000288 <__aeabi_dsub>
 8011a6c:	4652      	mov	r2, sl
 8011a6e:	465b      	mov	r3, fp
 8011a70:	f7ee fdc2 	bl	80005f8 <__aeabi_dmul>
 8011a74:	a337      	add	r3, pc, #220	; (adr r3, 8011b54 <__kernel_sin+0x174>)
 8011a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a7a:	f7ee fc07 	bl	800028c <__adddf3>
 8011a7e:	9b01      	ldr	r3, [sp, #4]
 8011a80:	4606      	mov	r6, r0
 8011a82:	460f      	mov	r7, r1
 8011a84:	b9eb      	cbnz	r3, 8011ac2 <__kernel_sin+0xe2>
 8011a86:	4602      	mov	r2, r0
 8011a88:	460b      	mov	r3, r1
 8011a8a:	4650      	mov	r0, sl
 8011a8c:	4659      	mov	r1, fp
 8011a8e:	f7ee fdb3 	bl	80005f8 <__aeabi_dmul>
 8011a92:	a325      	add	r3, pc, #148	; (adr r3, 8011b28 <__kernel_sin+0x148>)
 8011a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a98:	f7ee fbf6 	bl	8000288 <__aeabi_dsub>
 8011a9c:	4642      	mov	r2, r8
 8011a9e:	464b      	mov	r3, r9
 8011aa0:	f7ee fdaa 	bl	80005f8 <__aeabi_dmul>
 8011aa4:	4602      	mov	r2, r0
 8011aa6:	460b      	mov	r3, r1
 8011aa8:	4620      	mov	r0, r4
 8011aaa:	4629      	mov	r1, r5
 8011aac:	f7ee fbee 	bl	800028c <__adddf3>
 8011ab0:	4604      	mov	r4, r0
 8011ab2:	460d      	mov	r5, r1
 8011ab4:	ec45 4b10 	vmov	d0, r4, r5
 8011ab8:	b003      	add	sp, #12
 8011aba:	ecbd 8b04 	vpop	{d8-d9}
 8011abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ac2:	4b1b      	ldr	r3, [pc, #108]	; (8011b30 <__kernel_sin+0x150>)
 8011ac4:	ec51 0b18 	vmov	r0, r1, d8
 8011ac8:	2200      	movs	r2, #0
 8011aca:	f7ee fd95 	bl	80005f8 <__aeabi_dmul>
 8011ace:	4632      	mov	r2, r6
 8011ad0:	ec41 0b19 	vmov	d9, r0, r1
 8011ad4:	463b      	mov	r3, r7
 8011ad6:	4640      	mov	r0, r8
 8011ad8:	4649      	mov	r1, r9
 8011ada:	f7ee fd8d 	bl	80005f8 <__aeabi_dmul>
 8011ade:	4602      	mov	r2, r0
 8011ae0:	460b      	mov	r3, r1
 8011ae2:	ec51 0b19 	vmov	r0, r1, d9
 8011ae6:	f7ee fbcf 	bl	8000288 <__aeabi_dsub>
 8011aea:	4652      	mov	r2, sl
 8011aec:	465b      	mov	r3, fp
 8011aee:	f7ee fd83 	bl	80005f8 <__aeabi_dmul>
 8011af2:	ec53 2b18 	vmov	r2, r3, d8
 8011af6:	f7ee fbc7 	bl	8000288 <__aeabi_dsub>
 8011afa:	a30b      	add	r3, pc, #44	; (adr r3, 8011b28 <__kernel_sin+0x148>)
 8011afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b00:	4606      	mov	r6, r0
 8011b02:	460f      	mov	r7, r1
 8011b04:	4640      	mov	r0, r8
 8011b06:	4649      	mov	r1, r9
 8011b08:	f7ee fd76 	bl	80005f8 <__aeabi_dmul>
 8011b0c:	4602      	mov	r2, r0
 8011b0e:	460b      	mov	r3, r1
 8011b10:	4630      	mov	r0, r6
 8011b12:	4639      	mov	r1, r7
 8011b14:	f7ee fbba 	bl	800028c <__adddf3>
 8011b18:	4602      	mov	r2, r0
 8011b1a:	460b      	mov	r3, r1
 8011b1c:	4620      	mov	r0, r4
 8011b1e:	4629      	mov	r1, r5
 8011b20:	f7ee fbb2 	bl	8000288 <__aeabi_dsub>
 8011b24:	e7c4      	b.n	8011ab0 <__kernel_sin+0xd0>
 8011b26:	bf00      	nop
 8011b28:	55555549 	.word	0x55555549
 8011b2c:	3fc55555 	.word	0x3fc55555
 8011b30:	3fe00000 	.word	0x3fe00000
 8011b34:	5acfd57c 	.word	0x5acfd57c
 8011b38:	3de5d93a 	.word	0x3de5d93a
 8011b3c:	8a2b9ceb 	.word	0x8a2b9ceb
 8011b40:	3e5ae5e6 	.word	0x3e5ae5e6
 8011b44:	57b1fe7d 	.word	0x57b1fe7d
 8011b48:	3ec71de3 	.word	0x3ec71de3
 8011b4c:	19c161d5 	.word	0x19c161d5
 8011b50:	3f2a01a0 	.word	0x3f2a01a0
 8011b54:	1110f8a6 	.word	0x1110f8a6
 8011b58:	3f811111 	.word	0x3f811111
 8011b5c:	00000000 	.word	0x00000000

08011b60 <__ieee754_atan2>:
 8011b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b64:	ec57 6b11 	vmov	r6, r7, d1
 8011b68:	4273      	negs	r3, r6
 8011b6a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8011ce8 <__ieee754_atan2+0x188>
 8011b6e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8011b72:	4333      	orrs	r3, r6
 8011b74:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011b78:	4543      	cmp	r3, r8
 8011b7a:	ec51 0b10 	vmov	r0, r1, d0
 8011b7e:	ee11 5a10 	vmov	r5, s2
 8011b82:	d80a      	bhi.n	8011b9a <__ieee754_atan2+0x3a>
 8011b84:	4244      	negs	r4, r0
 8011b86:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011b8a:	4304      	orrs	r4, r0
 8011b8c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8011b90:	4544      	cmp	r4, r8
 8011b92:	ee10 9a10 	vmov	r9, s0
 8011b96:	468e      	mov	lr, r1
 8011b98:	d907      	bls.n	8011baa <__ieee754_atan2+0x4a>
 8011b9a:	4632      	mov	r2, r6
 8011b9c:	463b      	mov	r3, r7
 8011b9e:	f7ee fb75 	bl	800028c <__adddf3>
 8011ba2:	ec41 0b10 	vmov	d0, r0, r1
 8011ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011baa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8011bae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011bb2:	4334      	orrs	r4, r6
 8011bb4:	d103      	bne.n	8011bbe <__ieee754_atan2+0x5e>
 8011bb6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bba:	f001 b8d9 	b.w	8012d70 <atan>
 8011bbe:	17bc      	asrs	r4, r7, #30
 8011bc0:	f004 0402 	and.w	r4, r4, #2
 8011bc4:	ea53 0909 	orrs.w	r9, r3, r9
 8011bc8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8011bcc:	d107      	bne.n	8011bde <__ieee754_atan2+0x7e>
 8011bce:	2c02      	cmp	r4, #2
 8011bd0:	d05f      	beq.n	8011c92 <__ieee754_atan2+0x132>
 8011bd2:	2c03      	cmp	r4, #3
 8011bd4:	d1e5      	bne.n	8011ba2 <__ieee754_atan2+0x42>
 8011bd6:	a140      	add	r1, pc, #256	; (adr r1, 8011cd8 <__ieee754_atan2+0x178>)
 8011bd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011bdc:	e7e1      	b.n	8011ba2 <__ieee754_atan2+0x42>
 8011bde:	4315      	orrs	r5, r2
 8011be0:	d106      	bne.n	8011bf0 <__ieee754_atan2+0x90>
 8011be2:	f1be 0f00 	cmp.w	lr, #0
 8011be6:	da5f      	bge.n	8011ca8 <__ieee754_atan2+0x148>
 8011be8:	a13d      	add	r1, pc, #244	; (adr r1, 8011ce0 <__ieee754_atan2+0x180>)
 8011bea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011bee:	e7d8      	b.n	8011ba2 <__ieee754_atan2+0x42>
 8011bf0:	4542      	cmp	r2, r8
 8011bf2:	d10f      	bne.n	8011c14 <__ieee754_atan2+0xb4>
 8011bf4:	4293      	cmp	r3, r2
 8011bf6:	f104 34ff 	add.w	r4, r4, #4294967295
 8011bfa:	d107      	bne.n	8011c0c <__ieee754_atan2+0xac>
 8011bfc:	2c02      	cmp	r4, #2
 8011bfe:	d84c      	bhi.n	8011c9a <__ieee754_atan2+0x13a>
 8011c00:	4b33      	ldr	r3, [pc, #204]	; (8011cd0 <__ieee754_atan2+0x170>)
 8011c02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011c06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011c0a:	e7ca      	b.n	8011ba2 <__ieee754_atan2+0x42>
 8011c0c:	2c02      	cmp	r4, #2
 8011c0e:	d848      	bhi.n	8011ca2 <__ieee754_atan2+0x142>
 8011c10:	4b30      	ldr	r3, [pc, #192]	; (8011cd4 <__ieee754_atan2+0x174>)
 8011c12:	e7f6      	b.n	8011c02 <__ieee754_atan2+0xa2>
 8011c14:	4543      	cmp	r3, r8
 8011c16:	d0e4      	beq.n	8011be2 <__ieee754_atan2+0x82>
 8011c18:	1a9b      	subs	r3, r3, r2
 8011c1a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8011c1e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011c22:	da1e      	bge.n	8011c62 <__ieee754_atan2+0x102>
 8011c24:	2f00      	cmp	r7, #0
 8011c26:	da01      	bge.n	8011c2c <__ieee754_atan2+0xcc>
 8011c28:	323c      	adds	r2, #60	; 0x3c
 8011c2a:	db1e      	blt.n	8011c6a <__ieee754_atan2+0x10a>
 8011c2c:	4632      	mov	r2, r6
 8011c2e:	463b      	mov	r3, r7
 8011c30:	f7ee fe0c 	bl	800084c <__aeabi_ddiv>
 8011c34:	ec41 0b10 	vmov	d0, r0, r1
 8011c38:	f001 fa3a 	bl	80130b0 <fabs>
 8011c3c:	f001 f898 	bl	8012d70 <atan>
 8011c40:	ec51 0b10 	vmov	r0, r1, d0
 8011c44:	2c01      	cmp	r4, #1
 8011c46:	d013      	beq.n	8011c70 <__ieee754_atan2+0x110>
 8011c48:	2c02      	cmp	r4, #2
 8011c4a:	d015      	beq.n	8011c78 <__ieee754_atan2+0x118>
 8011c4c:	2c00      	cmp	r4, #0
 8011c4e:	d0a8      	beq.n	8011ba2 <__ieee754_atan2+0x42>
 8011c50:	a317      	add	r3, pc, #92	; (adr r3, 8011cb0 <__ieee754_atan2+0x150>)
 8011c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c56:	f7ee fb17 	bl	8000288 <__aeabi_dsub>
 8011c5a:	a317      	add	r3, pc, #92	; (adr r3, 8011cb8 <__ieee754_atan2+0x158>)
 8011c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c60:	e014      	b.n	8011c8c <__ieee754_atan2+0x12c>
 8011c62:	a117      	add	r1, pc, #92	; (adr r1, 8011cc0 <__ieee754_atan2+0x160>)
 8011c64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c68:	e7ec      	b.n	8011c44 <__ieee754_atan2+0xe4>
 8011c6a:	2000      	movs	r0, #0
 8011c6c:	2100      	movs	r1, #0
 8011c6e:	e7e9      	b.n	8011c44 <__ieee754_atan2+0xe4>
 8011c70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011c74:	4619      	mov	r1, r3
 8011c76:	e794      	b.n	8011ba2 <__ieee754_atan2+0x42>
 8011c78:	a30d      	add	r3, pc, #52	; (adr r3, 8011cb0 <__ieee754_atan2+0x150>)
 8011c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c7e:	f7ee fb03 	bl	8000288 <__aeabi_dsub>
 8011c82:	4602      	mov	r2, r0
 8011c84:	460b      	mov	r3, r1
 8011c86:	a10c      	add	r1, pc, #48	; (adr r1, 8011cb8 <__ieee754_atan2+0x158>)
 8011c88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c8c:	f7ee fafc 	bl	8000288 <__aeabi_dsub>
 8011c90:	e787      	b.n	8011ba2 <__ieee754_atan2+0x42>
 8011c92:	a109      	add	r1, pc, #36	; (adr r1, 8011cb8 <__ieee754_atan2+0x158>)
 8011c94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c98:	e783      	b.n	8011ba2 <__ieee754_atan2+0x42>
 8011c9a:	a10b      	add	r1, pc, #44	; (adr r1, 8011cc8 <__ieee754_atan2+0x168>)
 8011c9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ca0:	e77f      	b.n	8011ba2 <__ieee754_atan2+0x42>
 8011ca2:	2000      	movs	r0, #0
 8011ca4:	2100      	movs	r1, #0
 8011ca6:	e77c      	b.n	8011ba2 <__ieee754_atan2+0x42>
 8011ca8:	a105      	add	r1, pc, #20	; (adr r1, 8011cc0 <__ieee754_atan2+0x160>)
 8011caa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011cae:	e778      	b.n	8011ba2 <__ieee754_atan2+0x42>
 8011cb0:	33145c07 	.word	0x33145c07
 8011cb4:	3ca1a626 	.word	0x3ca1a626
 8011cb8:	54442d18 	.word	0x54442d18
 8011cbc:	400921fb 	.word	0x400921fb
 8011cc0:	54442d18 	.word	0x54442d18
 8011cc4:	3ff921fb 	.word	0x3ff921fb
 8011cc8:	54442d18 	.word	0x54442d18
 8011ccc:	3fe921fb 	.word	0x3fe921fb
 8011cd0:	08013e88 	.word	0x08013e88
 8011cd4:	08013ea0 	.word	0x08013ea0
 8011cd8:	54442d18 	.word	0x54442d18
 8011cdc:	c00921fb 	.word	0xc00921fb
 8011ce0:	54442d18 	.word	0x54442d18
 8011ce4:	bff921fb 	.word	0xbff921fb
 8011ce8:	7ff00000 	.word	0x7ff00000

08011cec <__ieee754_fmod>:
 8011cec:	ec53 2b11 	vmov	r2, r3, d1
 8011cf0:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8011cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cf8:	ea5c 0402 	orrs.w	r4, ip, r2
 8011cfc:	ec51 0b10 	vmov	r0, r1, d0
 8011d00:	ee11 7a10 	vmov	r7, s2
 8011d04:	ee11 ea10 	vmov	lr, s2
 8011d08:	461e      	mov	r6, r3
 8011d0a:	d00c      	beq.n	8011d26 <__ieee754_fmod+0x3a>
 8011d0c:	4c78      	ldr	r4, [pc, #480]	; (8011ef0 <__ieee754_fmod+0x204>)
 8011d0e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8011d12:	45a0      	cmp	r8, r4
 8011d14:	4689      	mov	r9, r1
 8011d16:	dc06      	bgt.n	8011d26 <__ieee754_fmod+0x3a>
 8011d18:	4254      	negs	r4, r2
 8011d1a:	4d76      	ldr	r5, [pc, #472]	; (8011ef4 <__ieee754_fmod+0x208>)
 8011d1c:	4314      	orrs	r4, r2
 8011d1e:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8011d22:	42ac      	cmp	r4, r5
 8011d24:	d909      	bls.n	8011d3a <__ieee754_fmod+0x4e>
 8011d26:	f7ee fc67 	bl	80005f8 <__aeabi_dmul>
 8011d2a:	4602      	mov	r2, r0
 8011d2c:	460b      	mov	r3, r1
 8011d2e:	f7ee fd8d 	bl	800084c <__aeabi_ddiv>
 8011d32:	ec41 0b10 	vmov	d0, r0, r1
 8011d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d3a:	45e0      	cmp	r8, ip
 8011d3c:	ee10 aa10 	vmov	sl, s0
 8011d40:	ee10 4a10 	vmov	r4, s0
 8011d44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8011d48:	dc09      	bgt.n	8011d5e <__ieee754_fmod+0x72>
 8011d4a:	dbf2      	blt.n	8011d32 <__ieee754_fmod+0x46>
 8011d4c:	4290      	cmp	r0, r2
 8011d4e:	d3f0      	bcc.n	8011d32 <__ieee754_fmod+0x46>
 8011d50:	d105      	bne.n	8011d5e <__ieee754_fmod+0x72>
 8011d52:	4b69      	ldr	r3, [pc, #420]	; (8011ef8 <__ieee754_fmod+0x20c>)
 8011d54:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8011d58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011d5c:	e7e9      	b.n	8011d32 <__ieee754_fmod+0x46>
 8011d5e:	4a65      	ldr	r2, [pc, #404]	; (8011ef4 <__ieee754_fmod+0x208>)
 8011d60:	ea19 0f02 	tst.w	r9, r2
 8011d64:	d148      	bne.n	8011df8 <__ieee754_fmod+0x10c>
 8011d66:	f1b8 0f00 	cmp.w	r8, #0
 8011d6a:	d13d      	bne.n	8011de8 <__ieee754_fmod+0xfc>
 8011d6c:	4963      	ldr	r1, [pc, #396]	; (8011efc <__ieee754_fmod+0x210>)
 8011d6e:	4653      	mov	r3, sl
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	dc36      	bgt.n	8011de2 <__ieee754_fmod+0xf6>
 8011d74:	4216      	tst	r6, r2
 8011d76:	d14f      	bne.n	8011e18 <__ieee754_fmod+0x12c>
 8011d78:	f1bc 0f00 	cmp.w	ip, #0
 8011d7c:	d144      	bne.n	8011e08 <__ieee754_fmod+0x11c>
 8011d7e:	4a5f      	ldr	r2, [pc, #380]	; (8011efc <__ieee754_fmod+0x210>)
 8011d80:	463b      	mov	r3, r7
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	dc3d      	bgt.n	8011e02 <__ieee754_fmod+0x116>
 8011d86:	485e      	ldr	r0, [pc, #376]	; (8011f00 <__ieee754_fmod+0x214>)
 8011d88:	4281      	cmp	r1, r0
 8011d8a:	db4a      	blt.n	8011e22 <__ieee754_fmod+0x136>
 8011d8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011d90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011d94:	485a      	ldr	r0, [pc, #360]	; (8011f00 <__ieee754_fmod+0x214>)
 8011d96:	4282      	cmp	r2, r0
 8011d98:	db57      	blt.n	8011e4a <__ieee754_fmod+0x15e>
 8011d9a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8011d9e:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8011da2:	1a89      	subs	r1, r1, r2
 8011da4:	1b98      	subs	r0, r3, r6
 8011da6:	eba4 070e 	sub.w	r7, r4, lr
 8011daa:	2900      	cmp	r1, #0
 8011dac:	d162      	bne.n	8011e74 <__ieee754_fmod+0x188>
 8011dae:	4574      	cmp	r4, lr
 8011db0:	bf38      	it	cc
 8011db2:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8011db6:	2800      	cmp	r0, #0
 8011db8:	bfa4      	itt	ge
 8011dba:	463c      	movge	r4, r7
 8011dbc:	4603      	movge	r3, r0
 8011dbe:	ea53 0104 	orrs.w	r1, r3, r4
 8011dc2:	d0c6      	beq.n	8011d52 <__ieee754_fmod+0x66>
 8011dc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011dc8:	db69      	blt.n	8011e9e <__ieee754_fmod+0x1b2>
 8011dca:	494d      	ldr	r1, [pc, #308]	; (8011f00 <__ieee754_fmod+0x214>)
 8011dcc:	428a      	cmp	r2, r1
 8011dce:	db6c      	blt.n	8011eaa <__ieee754_fmod+0x1be>
 8011dd0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011dd4:	432b      	orrs	r3, r5
 8011dd6:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8011dda:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011dde:	4620      	mov	r0, r4
 8011de0:	e7a7      	b.n	8011d32 <__ieee754_fmod+0x46>
 8011de2:	3901      	subs	r1, #1
 8011de4:	005b      	lsls	r3, r3, #1
 8011de6:	e7c3      	b.n	8011d70 <__ieee754_fmod+0x84>
 8011de8:	4945      	ldr	r1, [pc, #276]	; (8011f00 <__ieee754_fmod+0x214>)
 8011dea:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	ddc0      	ble.n	8011d74 <__ieee754_fmod+0x88>
 8011df2:	3901      	subs	r1, #1
 8011df4:	005b      	lsls	r3, r3, #1
 8011df6:	e7fa      	b.n	8011dee <__ieee754_fmod+0x102>
 8011df8:	ea4f 5128 	mov.w	r1, r8, asr #20
 8011dfc:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011e00:	e7b8      	b.n	8011d74 <__ieee754_fmod+0x88>
 8011e02:	3a01      	subs	r2, #1
 8011e04:	005b      	lsls	r3, r3, #1
 8011e06:	e7bc      	b.n	8011d82 <__ieee754_fmod+0x96>
 8011e08:	4a3d      	ldr	r2, [pc, #244]	; (8011f00 <__ieee754_fmod+0x214>)
 8011e0a:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	ddb9      	ble.n	8011d86 <__ieee754_fmod+0x9a>
 8011e12:	3a01      	subs	r2, #1
 8011e14:	005b      	lsls	r3, r3, #1
 8011e16:	e7fa      	b.n	8011e0e <__ieee754_fmod+0x122>
 8011e18:	ea4f 522c 	mov.w	r2, ip, asr #20
 8011e1c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011e20:	e7b1      	b.n	8011d86 <__ieee754_fmod+0x9a>
 8011e22:	1a40      	subs	r0, r0, r1
 8011e24:	281f      	cmp	r0, #31
 8011e26:	dc0a      	bgt.n	8011e3e <__ieee754_fmod+0x152>
 8011e28:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8011e2c:	fa08 f800 	lsl.w	r8, r8, r0
 8011e30:	fa2a f303 	lsr.w	r3, sl, r3
 8011e34:	ea43 0308 	orr.w	r3, r3, r8
 8011e38:	fa0a f400 	lsl.w	r4, sl, r0
 8011e3c:	e7aa      	b.n	8011d94 <__ieee754_fmod+0xa8>
 8011e3e:	4b31      	ldr	r3, [pc, #196]	; (8011f04 <__ieee754_fmod+0x218>)
 8011e40:	1a5b      	subs	r3, r3, r1
 8011e42:	fa0a f303 	lsl.w	r3, sl, r3
 8011e46:	2400      	movs	r4, #0
 8011e48:	e7a4      	b.n	8011d94 <__ieee754_fmod+0xa8>
 8011e4a:	1a80      	subs	r0, r0, r2
 8011e4c:	281f      	cmp	r0, #31
 8011e4e:	dc0a      	bgt.n	8011e66 <__ieee754_fmod+0x17a>
 8011e50:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8011e54:	fa0c fc00 	lsl.w	ip, ip, r0
 8011e58:	fa27 f606 	lsr.w	r6, r7, r6
 8011e5c:	ea46 060c 	orr.w	r6, r6, ip
 8011e60:	fa07 fe00 	lsl.w	lr, r7, r0
 8011e64:	e79d      	b.n	8011da2 <__ieee754_fmod+0xb6>
 8011e66:	4e27      	ldr	r6, [pc, #156]	; (8011f04 <__ieee754_fmod+0x218>)
 8011e68:	1ab6      	subs	r6, r6, r2
 8011e6a:	fa07 f606 	lsl.w	r6, r7, r6
 8011e6e:	f04f 0e00 	mov.w	lr, #0
 8011e72:	e796      	b.n	8011da2 <__ieee754_fmod+0xb6>
 8011e74:	4574      	cmp	r4, lr
 8011e76:	bf38      	it	cc
 8011e78:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8011e7c:	2800      	cmp	r0, #0
 8011e7e:	da05      	bge.n	8011e8c <__ieee754_fmod+0x1a0>
 8011e80:	0fe0      	lsrs	r0, r4, #31
 8011e82:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8011e86:	0064      	lsls	r4, r4, #1
 8011e88:	3901      	subs	r1, #1
 8011e8a:	e78b      	b.n	8011da4 <__ieee754_fmod+0xb8>
 8011e8c:	ea50 0307 	orrs.w	r3, r0, r7
 8011e90:	f43f af5f 	beq.w	8011d52 <__ieee754_fmod+0x66>
 8011e94:	0ffb      	lsrs	r3, r7, #31
 8011e96:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8011e9a:	007c      	lsls	r4, r7, #1
 8011e9c:	e7f4      	b.n	8011e88 <__ieee754_fmod+0x19c>
 8011e9e:	0fe1      	lsrs	r1, r4, #31
 8011ea0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8011ea4:	0064      	lsls	r4, r4, #1
 8011ea6:	3a01      	subs	r2, #1
 8011ea8:	e78c      	b.n	8011dc4 <__ieee754_fmod+0xd8>
 8011eaa:	1a89      	subs	r1, r1, r2
 8011eac:	2914      	cmp	r1, #20
 8011eae:	dc0a      	bgt.n	8011ec6 <__ieee754_fmod+0x1da>
 8011eb0:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8011eb4:	fa03 f202 	lsl.w	r2, r3, r2
 8011eb8:	40cc      	lsrs	r4, r1
 8011eba:	4322      	orrs	r2, r4
 8011ebc:	410b      	asrs	r3, r1
 8011ebe:	ea43 0105 	orr.w	r1, r3, r5
 8011ec2:	4610      	mov	r0, r2
 8011ec4:	e735      	b.n	8011d32 <__ieee754_fmod+0x46>
 8011ec6:	291f      	cmp	r1, #31
 8011ec8:	dc07      	bgt.n	8011eda <__ieee754_fmod+0x1ee>
 8011eca:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8011ece:	40cc      	lsrs	r4, r1
 8011ed0:	fa03 f202 	lsl.w	r2, r3, r2
 8011ed4:	4322      	orrs	r2, r4
 8011ed6:	462b      	mov	r3, r5
 8011ed8:	e7f1      	b.n	8011ebe <__ieee754_fmod+0x1d2>
 8011eda:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8011ede:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011ee2:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8011ee6:	32e2      	adds	r2, #226	; 0xe2
 8011ee8:	fa43 f202 	asr.w	r2, r3, r2
 8011eec:	e7f3      	b.n	8011ed6 <__ieee754_fmod+0x1ea>
 8011eee:	bf00      	nop
 8011ef0:	7fefffff 	.word	0x7fefffff
 8011ef4:	7ff00000 	.word	0x7ff00000
 8011ef8:	08013eb8 	.word	0x08013eb8
 8011efc:	fffffbed 	.word	0xfffffbed
 8011f00:	fffffc02 	.word	0xfffffc02
 8011f04:	fffffbe2 	.word	0xfffffbe2

08011f08 <__ieee754_pow>:
 8011f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f0c:	ed2d 8b06 	vpush	{d8-d10}
 8011f10:	b089      	sub	sp, #36	; 0x24
 8011f12:	ed8d 1b00 	vstr	d1, [sp]
 8011f16:	e9dd 2900 	ldrd	r2, r9, [sp]
 8011f1a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011f1e:	ea58 0102 	orrs.w	r1, r8, r2
 8011f22:	ec57 6b10 	vmov	r6, r7, d0
 8011f26:	d115      	bne.n	8011f54 <__ieee754_pow+0x4c>
 8011f28:	19b3      	adds	r3, r6, r6
 8011f2a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8011f2e:	4152      	adcs	r2, r2
 8011f30:	4299      	cmp	r1, r3
 8011f32:	4b89      	ldr	r3, [pc, #548]	; (8012158 <__ieee754_pow+0x250>)
 8011f34:	4193      	sbcs	r3, r2
 8011f36:	f080 84d1 	bcs.w	80128dc <__ieee754_pow+0x9d4>
 8011f3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011f3e:	4630      	mov	r0, r6
 8011f40:	4639      	mov	r1, r7
 8011f42:	f7ee f9a3 	bl	800028c <__adddf3>
 8011f46:	ec41 0b10 	vmov	d0, r0, r1
 8011f4a:	b009      	add	sp, #36	; 0x24
 8011f4c:	ecbd 8b06 	vpop	{d8-d10}
 8011f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f54:	4b81      	ldr	r3, [pc, #516]	; (801215c <__ieee754_pow+0x254>)
 8011f56:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011f5a:	429c      	cmp	r4, r3
 8011f5c:	ee10 aa10 	vmov	sl, s0
 8011f60:	463d      	mov	r5, r7
 8011f62:	dc06      	bgt.n	8011f72 <__ieee754_pow+0x6a>
 8011f64:	d101      	bne.n	8011f6a <__ieee754_pow+0x62>
 8011f66:	2e00      	cmp	r6, #0
 8011f68:	d1e7      	bne.n	8011f3a <__ieee754_pow+0x32>
 8011f6a:	4598      	cmp	r8, r3
 8011f6c:	dc01      	bgt.n	8011f72 <__ieee754_pow+0x6a>
 8011f6e:	d10f      	bne.n	8011f90 <__ieee754_pow+0x88>
 8011f70:	b172      	cbz	r2, 8011f90 <__ieee754_pow+0x88>
 8011f72:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8011f76:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8011f7a:	ea55 050a 	orrs.w	r5, r5, sl
 8011f7e:	d1dc      	bne.n	8011f3a <__ieee754_pow+0x32>
 8011f80:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011f84:	18db      	adds	r3, r3, r3
 8011f86:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8011f8a:	4152      	adcs	r2, r2
 8011f8c:	429d      	cmp	r5, r3
 8011f8e:	e7d0      	b.n	8011f32 <__ieee754_pow+0x2a>
 8011f90:	2d00      	cmp	r5, #0
 8011f92:	da3b      	bge.n	801200c <__ieee754_pow+0x104>
 8011f94:	4b72      	ldr	r3, [pc, #456]	; (8012160 <__ieee754_pow+0x258>)
 8011f96:	4598      	cmp	r8, r3
 8011f98:	dc51      	bgt.n	801203e <__ieee754_pow+0x136>
 8011f9a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8011f9e:	4598      	cmp	r8, r3
 8011fa0:	f340 84ab 	ble.w	80128fa <__ieee754_pow+0x9f2>
 8011fa4:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011fa8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011fac:	2b14      	cmp	r3, #20
 8011fae:	dd0f      	ble.n	8011fd0 <__ieee754_pow+0xc8>
 8011fb0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011fb4:	fa22 f103 	lsr.w	r1, r2, r3
 8011fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8011fbc:	4293      	cmp	r3, r2
 8011fbe:	f040 849c 	bne.w	80128fa <__ieee754_pow+0x9f2>
 8011fc2:	f001 0101 	and.w	r1, r1, #1
 8011fc6:	f1c1 0302 	rsb	r3, r1, #2
 8011fca:	9304      	str	r3, [sp, #16]
 8011fcc:	b182      	cbz	r2, 8011ff0 <__ieee754_pow+0xe8>
 8011fce:	e05f      	b.n	8012090 <__ieee754_pow+0x188>
 8011fd0:	2a00      	cmp	r2, #0
 8011fd2:	d15b      	bne.n	801208c <__ieee754_pow+0x184>
 8011fd4:	f1c3 0314 	rsb	r3, r3, #20
 8011fd8:	fa48 f103 	asr.w	r1, r8, r3
 8011fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8011fe0:	4543      	cmp	r3, r8
 8011fe2:	f040 8487 	bne.w	80128f4 <__ieee754_pow+0x9ec>
 8011fe6:	f001 0101 	and.w	r1, r1, #1
 8011fea:	f1c1 0302 	rsb	r3, r1, #2
 8011fee:	9304      	str	r3, [sp, #16]
 8011ff0:	4b5c      	ldr	r3, [pc, #368]	; (8012164 <__ieee754_pow+0x25c>)
 8011ff2:	4598      	cmp	r8, r3
 8011ff4:	d132      	bne.n	801205c <__ieee754_pow+0x154>
 8011ff6:	f1b9 0f00 	cmp.w	r9, #0
 8011ffa:	f280 8477 	bge.w	80128ec <__ieee754_pow+0x9e4>
 8011ffe:	4959      	ldr	r1, [pc, #356]	; (8012164 <__ieee754_pow+0x25c>)
 8012000:	4632      	mov	r2, r6
 8012002:	463b      	mov	r3, r7
 8012004:	2000      	movs	r0, #0
 8012006:	f7ee fc21 	bl	800084c <__aeabi_ddiv>
 801200a:	e79c      	b.n	8011f46 <__ieee754_pow+0x3e>
 801200c:	2300      	movs	r3, #0
 801200e:	9304      	str	r3, [sp, #16]
 8012010:	2a00      	cmp	r2, #0
 8012012:	d13d      	bne.n	8012090 <__ieee754_pow+0x188>
 8012014:	4b51      	ldr	r3, [pc, #324]	; (801215c <__ieee754_pow+0x254>)
 8012016:	4598      	cmp	r8, r3
 8012018:	d1ea      	bne.n	8011ff0 <__ieee754_pow+0xe8>
 801201a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801201e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8012022:	ea53 030a 	orrs.w	r3, r3, sl
 8012026:	f000 8459 	beq.w	80128dc <__ieee754_pow+0x9d4>
 801202a:	4b4f      	ldr	r3, [pc, #316]	; (8012168 <__ieee754_pow+0x260>)
 801202c:	429c      	cmp	r4, r3
 801202e:	dd08      	ble.n	8012042 <__ieee754_pow+0x13a>
 8012030:	f1b9 0f00 	cmp.w	r9, #0
 8012034:	f2c0 8456 	blt.w	80128e4 <__ieee754_pow+0x9dc>
 8012038:	e9dd 0100 	ldrd	r0, r1, [sp]
 801203c:	e783      	b.n	8011f46 <__ieee754_pow+0x3e>
 801203e:	2302      	movs	r3, #2
 8012040:	e7e5      	b.n	801200e <__ieee754_pow+0x106>
 8012042:	f1b9 0f00 	cmp.w	r9, #0
 8012046:	f04f 0000 	mov.w	r0, #0
 801204a:	f04f 0100 	mov.w	r1, #0
 801204e:	f6bf af7a 	bge.w	8011f46 <__ieee754_pow+0x3e>
 8012052:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012056:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801205a:	e774      	b.n	8011f46 <__ieee754_pow+0x3e>
 801205c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8012060:	d106      	bne.n	8012070 <__ieee754_pow+0x168>
 8012062:	4632      	mov	r2, r6
 8012064:	463b      	mov	r3, r7
 8012066:	4630      	mov	r0, r6
 8012068:	4639      	mov	r1, r7
 801206a:	f7ee fac5 	bl	80005f8 <__aeabi_dmul>
 801206e:	e76a      	b.n	8011f46 <__ieee754_pow+0x3e>
 8012070:	4b3e      	ldr	r3, [pc, #248]	; (801216c <__ieee754_pow+0x264>)
 8012072:	4599      	cmp	r9, r3
 8012074:	d10c      	bne.n	8012090 <__ieee754_pow+0x188>
 8012076:	2d00      	cmp	r5, #0
 8012078:	db0a      	blt.n	8012090 <__ieee754_pow+0x188>
 801207a:	ec47 6b10 	vmov	d0, r6, r7
 801207e:	b009      	add	sp, #36	; 0x24
 8012080:	ecbd 8b06 	vpop	{d8-d10}
 8012084:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012088:	f7ff bb06 	b.w	8011698 <__ieee754_sqrt>
 801208c:	2300      	movs	r3, #0
 801208e:	9304      	str	r3, [sp, #16]
 8012090:	ec47 6b10 	vmov	d0, r6, r7
 8012094:	f001 f80c 	bl	80130b0 <fabs>
 8012098:	ec51 0b10 	vmov	r0, r1, d0
 801209c:	f1ba 0f00 	cmp.w	sl, #0
 80120a0:	d129      	bne.n	80120f6 <__ieee754_pow+0x1ee>
 80120a2:	b124      	cbz	r4, 80120ae <__ieee754_pow+0x1a6>
 80120a4:	4b2f      	ldr	r3, [pc, #188]	; (8012164 <__ieee754_pow+0x25c>)
 80120a6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80120aa:	429a      	cmp	r2, r3
 80120ac:	d123      	bne.n	80120f6 <__ieee754_pow+0x1ee>
 80120ae:	f1b9 0f00 	cmp.w	r9, #0
 80120b2:	da05      	bge.n	80120c0 <__ieee754_pow+0x1b8>
 80120b4:	4602      	mov	r2, r0
 80120b6:	460b      	mov	r3, r1
 80120b8:	2000      	movs	r0, #0
 80120ba:	492a      	ldr	r1, [pc, #168]	; (8012164 <__ieee754_pow+0x25c>)
 80120bc:	f7ee fbc6 	bl	800084c <__aeabi_ddiv>
 80120c0:	2d00      	cmp	r5, #0
 80120c2:	f6bf af40 	bge.w	8011f46 <__ieee754_pow+0x3e>
 80120c6:	9b04      	ldr	r3, [sp, #16]
 80120c8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80120cc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80120d0:	431c      	orrs	r4, r3
 80120d2:	d108      	bne.n	80120e6 <__ieee754_pow+0x1de>
 80120d4:	4602      	mov	r2, r0
 80120d6:	460b      	mov	r3, r1
 80120d8:	4610      	mov	r0, r2
 80120da:	4619      	mov	r1, r3
 80120dc:	f7ee f8d4 	bl	8000288 <__aeabi_dsub>
 80120e0:	4602      	mov	r2, r0
 80120e2:	460b      	mov	r3, r1
 80120e4:	e78f      	b.n	8012006 <__ieee754_pow+0xfe>
 80120e6:	9b04      	ldr	r3, [sp, #16]
 80120e8:	2b01      	cmp	r3, #1
 80120ea:	f47f af2c 	bne.w	8011f46 <__ieee754_pow+0x3e>
 80120ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80120f2:	4619      	mov	r1, r3
 80120f4:	e727      	b.n	8011f46 <__ieee754_pow+0x3e>
 80120f6:	0feb      	lsrs	r3, r5, #31
 80120f8:	3b01      	subs	r3, #1
 80120fa:	9306      	str	r3, [sp, #24]
 80120fc:	9a06      	ldr	r2, [sp, #24]
 80120fe:	9b04      	ldr	r3, [sp, #16]
 8012100:	4313      	orrs	r3, r2
 8012102:	d102      	bne.n	801210a <__ieee754_pow+0x202>
 8012104:	4632      	mov	r2, r6
 8012106:	463b      	mov	r3, r7
 8012108:	e7e6      	b.n	80120d8 <__ieee754_pow+0x1d0>
 801210a:	4b19      	ldr	r3, [pc, #100]	; (8012170 <__ieee754_pow+0x268>)
 801210c:	4598      	cmp	r8, r3
 801210e:	f340 80fb 	ble.w	8012308 <__ieee754_pow+0x400>
 8012112:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8012116:	4598      	cmp	r8, r3
 8012118:	4b13      	ldr	r3, [pc, #76]	; (8012168 <__ieee754_pow+0x260>)
 801211a:	dd0c      	ble.n	8012136 <__ieee754_pow+0x22e>
 801211c:	429c      	cmp	r4, r3
 801211e:	dc0f      	bgt.n	8012140 <__ieee754_pow+0x238>
 8012120:	f1b9 0f00 	cmp.w	r9, #0
 8012124:	da0f      	bge.n	8012146 <__ieee754_pow+0x23e>
 8012126:	2000      	movs	r0, #0
 8012128:	b009      	add	sp, #36	; 0x24
 801212a:	ecbd 8b06 	vpop	{d8-d10}
 801212e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012132:	f001 b86e 	b.w	8013212 <__math_oflow>
 8012136:	429c      	cmp	r4, r3
 8012138:	dbf2      	blt.n	8012120 <__ieee754_pow+0x218>
 801213a:	4b0a      	ldr	r3, [pc, #40]	; (8012164 <__ieee754_pow+0x25c>)
 801213c:	429c      	cmp	r4, r3
 801213e:	dd19      	ble.n	8012174 <__ieee754_pow+0x26c>
 8012140:	f1b9 0f00 	cmp.w	r9, #0
 8012144:	dcef      	bgt.n	8012126 <__ieee754_pow+0x21e>
 8012146:	2000      	movs	r0, #0
 8012148:	b009      	add	sp, #36	; 0x24
 801214a:	ecbd 8b06 	vpop	{d8-d10}
 801214e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012152:	f001 b855 	b.w	8013200 <__math_uflow>
 8012156:	bf00      	nop
 8012158:	fff00000 	.word	0xfff00000
 801215c:	7ff00000 	.word	0x7ff00000
 8012160:	433fffff 	.word	0x433fffff
 8012164:	3ff00000 	.word	0x3ff00000
 8012168:	3fefffff 	.word	0x3fefffff
 801216c:	3fe00000 	.word	0x3fe00000
 8012170:	41e00000 	.word	0x41e00000
 8012174:	4b60      	ldr	r3, [pc, #384]	; (80122f8 <__ieee754_pow+0x3f0>)
 8012176:	2200      	movs	r2, #0
 8012178:	f7ee f886 	bl	8000288 <__aeabi_dsub>
 801217c:	a354      	add	r3, pc, #336	; (adr r3, 80122d0 <__ieee754_pow+0x3c8>)
 801217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012182:	4604      	mov	r4, r0
 8012184:	460d      	mov	r5, r1
 8012186:	f7ee fa37 	bl	80005f8 <__aeabi_dmul>
 801218a:	a353      	add	r3, pc, #332	; (adr r3, 80122d8 <__ieee754_pow+0x3d0>)
 801218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012190:	4606      	mov	r6, r0
 8012192:	460f      	mov	r7, r1
 8012194:	4620      	mov	r0, r4
 8012196:	4629      	mov	r1, r5
 8012198:	f7ee fa2e 	bl	80005f8 <__aeabi_dmul>
 801219c:	4b57      	ldr	r3, [pc, #348]	; (80122fc <__ieee754_pow+0x3f4>)
 801219e:	4682      	mov	sl, r0
 80121a0:	468b      	mov	fp, r1
 80121a2:	2200      	movs	r2, #0
 80121a4:	4620      	mov	r0, r4
 80121a6:	4629      	mov	r1, r5
 80121a8:	f7ee fa26 	bl	80005f8 <__aeabi_dmul>
 80121ac:	4602      	mov	r2, r0
 80121ae:	460b      	mov	r3, r1
 80121b0:	a14b      	add	r1, pc, #300	; (adr r1, 80122e0 <__ieee754_pow+0x3d8>)
 80121b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80121b6:	f7ee f867 	bl	8000288 <__aeabi_dsub>
 80121ba:	4622      	mov	r2, r4
 80121bc:	462b      	mov	r3, r5
 80121be:	f7ee fa1b 	bl	80005f8 <__aeabi_dmul>
 80121c2:	4602      	mov	r2, r0
 80121c4:	460b      	mov	r3, r1
 80121c6:	2000      	movs	r0, #0
 80121c8:	494d      	ldr	r1, [pc, #308]	; (8012300 <__ieee754_pow+0x3f8>)
 80121ca:	f7ee f85d 	bl	8000288 <__aeabi_dsub>
 80121ce:	4622      	mov	r2, r4
 80121d0:	4680      	mov	r8, r0
 80121d2:	4689      	mov	r9, r1
 80121d4:	462b      	mov	r3, r5
 80121d6:	4620      	mov	r0, r4
 80121d8:	4629      	mov	r1, r5
 80121da:	f7ee fa0d 	bl	80005f8 <__aeabi_dmul>
 80121de:	4602      	mov	r2, r0
 80121e0:	460b      	mov	r3, r1
 80121e2:	4640      	mov	r0, r8
 80121e4:	4649      	mov	r1, r9
 80121e6:	f7ee fa07 	bl	80005f8 <__aeabi_dmul>
 80121ea:	a33f      	add	r3, pc, #252	; (adr r3, 80122e8 <__ieee754_pow+0x3e0>)
 80121ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121f0:	f7ee fa02 	bl	80005f8 <__aeabi_dmul>
 80121f4:	4602      	mov	r2, r0
 80121f6:	460b      	mov	r3, r1
 80121f8:	4650      	mov	r0, sl
 80121fa:	4659      	mov	r1, fp
 80121fc:	f7ee f844 	bl	8000288 <__aeabi_dsub>
 8012200:	4602      	mov	r2, r0
 8012202:	460b      	mov	r3, r1
 8012204:	4680      	mov	r8, r0
 8012206:	4689      	mov	r9, r1
 8012208:	4630      	mov	r0, r6
 801220a:	4639      	mov	r1, r7
 801220c:	f7ee f83e 	bl	800028c <__adddf3>
 8012210:	2000      	movs	r0, #0
 8012212:	4632      	mov	r2, r6
 8012214:	463b      	mov	r3, r7
 8012216:	4604      	mov	r4, r0
 8012218:	460d      	mov	r5, r1
 801221a:	f7ee f835 	bl	8000288 <__aeabi_dsub>
 801221e:	4602      	mov	r2, r0
 8012220:	460b      	mov	r3, r1
 8012222:	4640      	mov	r0, r8
 8012224:	4649      	mov	r1, r9
 8012226:	f7ee f82f 	bl	8000288 <__aeabi_dsub>
 801222a:	9b04      	ldr	r3, [sp, #16]
 801222c:	9a06      	ldr	r2, [sp, #24]
 801222e:	3b01      	subs	r3, #1
 8012230:	4313      	orrs	r3, r2
 8012232:	4682      	mov	sl, r0
 8012234:	468b      	mov	fp, r1
 8012236:	f040 81e7 	bne.w	8012608 <__ieee754_pow+0x700>
 801223a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80122f0 <__ieee754_pow+0x3e8>
 801223e:	eeb0 8a47 	vmov.f32	s16, s14
 8012242:	eef0 8a67 	vmov.f32	s17, s15
 8012246:	e9dd 6700 	ldrd	r6, r7, [sp]
 801224a:	2600      	movs	r6, #0
 801224c:	4632      	mov	r2, r6
 801224e:	463b      	mov	r3, r7
 8012250:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012254:	f7ee f818 	bl	8000288 <__aeabi_dsub>
 8012258:	4622      	mov	r2, r4
 801225a:	462b      	mov	r3, r5
 801225c:	f7ee f9cc 	bl	80005f8 <__aeabi_dmul>
 8012260:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012264:	4680      	mov	r8, r0
 8012266:	4689      	mov	r9, r1
 8012268:	4650      	mov	r0, sl
 801226a:	4659      	mov	r1, fp
 801226c:	f7ee f9c4 	bl	80005f8 <__aeabi_dmul>
 8012270:	4602      	mov	r2, r0
 8012272:	460b      	mov	r3, r1
 8012274:	4640      	mov	r0, r8
 8012276:	4649      	mov	r1, r9
 8012278:	f7ee f808 	bl	800028c <__adddf3>
 801227c:	4632      	mov	r2, r6
 801227e:	463b      	mov	r3, r7
 8012280:	4680      	mov	r8, r0
 8012282:	4689      	mov	r9, r1
 8012284:	4620      	mov	r0, r4
 8012286:	4629      	mov	r1, r5
 8012288:	f7ee f9b6 	bl	80005f8 <__aeabi_dmul>
 801228c:	460b      	mov	r3, r1
 801228e:	4604      	mov	r4, r0
 8012290:	460d      	mov	r5, r1
 8012292:	4602      	mov	r2, r0
 8012294:	4649      	mov	r1, r9
 8012296:	4640      	mov	r0, r8
 8012298:	f7ed fff8 	bl	800028c <__adddf3>
 801229c:	4b19      	ldr	r3, [pc, #100]	; (8012304 <__ieee754_pow+0x3fc>)
 801229e:	4299      	cmp	r1, r3
 80122a0:	ec45 4b19 	vmov	d9, r4, r5
 80122a4:	4606      	mov	r6, r0
 80122a6:	460f      	mov	r7, r1
 80122a8:	468b      	mov	fp, r1
 80122aa:	f340 82f0 	ble.w	801288e <__ieee754_pow+0x986>
 80122ae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80122b2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80122b6:	4303      	orrs	r3, r0
 80122b8:	f000 81e4 	beq.w	8012684 <__ieee754_pow+0x77c>
 80122bc:	ec51 0b18 	vmov	r0, r1, d8
 80122c0:	2200      	movs	r2, #0
 80122c2:	2300      	movs	r3, #0
 80122c4:	f7ee fc0a 	bl	8000adc <__aeabi_dcmplt>
 80122c8:	3800      	subs	r0, #0
 80122ca:	bf18      	it	ne
 80122cc:	2001      	movne	r0, #1
 80122ce:	e72b      	b.n	8012128 <__ieee754_pow+0x220>
 80122d0:	60000000 	.word	0x60000000
 80122d4:	3ff71547 	.word	0x3ff71547
 80122d8:	f85ddf44 	.word	0xf85ddf44
 80122dc:	3e54ae0b 	.word	0x3e54ae0b
 80122e0:	55555555 	.word	0x55555555
 80122e4:	3fd55555 	.word	0x3fd55555
 80122e8:	652b82fe 	.word	0x652b82fe
 80122ec:	3ff71547 	.word	0x3ff71547
 80122f0:	00000000 	.word	0x00000000
 80122f4:	bff00000 	.word	0xbff00000
 80122f8:	3ff00000 	.word	0x3ff00000
 80122fc:	3fd00000 	.word	0x3fd00000
 8012300:	3fe00000 	.word	0x3fe00000
 8012304:	408fffff 	.word	0x408fffff
 8012308:	4bd5      	ldr	r3, [pc, #852]	; (8012660 <__ieee754_pow+0x758>)
 801230a:	402b      	ands	r3, r5
 801230c:	2200      	movs	r2, #0
 801230e:	b92b      	cbnz	r3, 801231c <__ieee754_pow+0x414>
 8012310:	4bd4      	ldr	r3, [pc, #848]	; (8012664 <__ieee754_pow+0x75c>)
 8012312:	f7ee f971 	bl	80005f8 <__aeabi_dmul>
 8012316:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801231a:	460c      	mov	r4, r1
 801231c:	1523      	asrs	r3, r4, #20
 801231e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012322:	4413      	add	r3, r2
 8012324:	9305      	str	r3, [sp, #20]
 8012326:	4bd0      	ldr	r3, [pc, #832]	; (8012668 <__ieee754_pow+0x760>)
 8012328:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801232c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012330:	429c      	cmp	r4, r3
 8012332:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012336:	dd08      	ble.n	801234a <__ieee754_pow+0x442>
 8012338:	4bcc      	ldr	r3, [pc, #816]	; (801266c <__ieee754_pow+0x764>)
 801233a:	429c      	cmp	r4, r3
 801233c:	f340 8162 	ble.w	8012604 <__ieee754_pow+0x6fc>
 8012340:	9b05      	ldr	r3, [sp, #20]
 8012342:	3301      	adds	r3, #1
 8012344:	9305      	str	r3, [sp, #20]
 8012346:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801234a:	2400      	movs	r4, #0
 801234c:	00e3      	lsls	r3, r4, #3
 801234e:	9307      	str	r3, [sp, #28]
 8012350:	4bc7      	ldr	r3, [pc, #796]	; (8012670 <__ieee754_pow+0x768>)
 8012352:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012356:	ed93 7b00 	vldr	d7, [r3]
 801235a:	4629      	mov	r1, r5
 801235c:	ec53 2b17 	vmov	r2, r3, d7
 8012360:	eeb0 9a47 	vmov.f32	s18, s14
 8012364:	eef0 9a67 	vmov.f32	s19, s15
 8012368:	4682      	mov	sl, r0
 801236a:	f7ed ff8d 	bl	8000288 <__aeabi_dsub>
 801236e:	4652      	mov	r2, sl
 8012370:	4606      	mov	r6, r0
 8012372:	460f      	mov	r7, r1
 8012374:	462b      	mov	r3, r5
 8012376:	ec51 0b19 	vmov	r0, r1, d9
 801237a:	f7ed ff87 	bl	800028c <__adddf3>
 801237e:	4602      	mov	r2, r0
 8012380:	460b      	mov	r3, r1
 8012382:	2000      	movs	r0, #0
 8012384:	49bb      	ldr	r1, [pc, #748]	; (8012674 <__ieee754_pow+0x76c>)
 8012386:	f7ee fa61 	bl	800084c <__aeabi_ddiv>
 801238a:	ec41 0b1a 	vmov	d10, r0, r1
 801238e:	4602      	mov	r2, r0
 8012390:	460b      	mov	r3, r1
 8012392:	4630      	mov	r0, r6
 8012394:	4639      	mov	r1, r7
 8012396:	f7ee f92f 	bl	80005f8 <__aeabi_dmul>
 801239a:	2300      	movs	r3, #0
 801239c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123a0:	9302      	str	r3, [sp, #8]
 80123a2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80123a6:	46ab      	mov	fp, r5
 80123a8:	106d      	asrs	r5, r5, #1
 80123aa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80123ae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80123b2:	ec41 0b18 	vmov	d8, r0, r1
 80123b6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80123ba:	2200      	movs	r2, #0
 80123bc:	4640      	mov	r0, r8
 80123be:	4649      	mov	r1, r9
 80123c0:	4614      	mov	r4, r2
 80123c2:	461d      	mov	r5, r3
 80123c4:	f7ee f918 	bl	80005f8 <__aeabi_dmul>
 80123c8:	4602      	mov	r2, r0
 80123ca:	460b      	mov	r3, r1
 80123cc:	4630      	mov	r0, r6
 80123ce:	4639      	mov	r1, r7
 80123d0:	f7ed ff5a 	bl	8000288 <__aeabi_dsub>
 80123d4:	ec53 2b19 	vmov	r2, r3, d9
 80123d8:	4606      	mov	r6, r0
 80123da:	460f      	mov	r7, r1
 80123dc:	4620      	mov	r0, r4
 80123de:	4629      	mov	r1, r5
 80123e0:	f7ed ff52 	bl	8000288 <__aeabi_dsub>
 80123e4:	4602      	mov	r2, r0
 80123e6:	460b      	mov	r3, r1
 80123e8:	4650      	mov	r0, sl
 80123ea:	4659      	mov	r1, fp
 80123ec:	f7ed ff4c 	bl	8000288 <__aeabi_dsub>
 80123f0:	4642      	mov	r2, r8
 80123f2:	464b      	mov	r3, r9
 80123f4:	f7ee f900 	bl	80005f8 <__aeabi_dmul>
 80123f8:	4602      	mov	r2, r0
 80123fa:	460b      	mov	r3, r1
 80123fc:	4630      	mov	r0, r6
 80123fe:	4639      	mov	r1, r7
 8012400:	f7ed ff42 	bl	8000288 <__aeabi_dsub>
 8012404:	ec53 2b1a 	vmov	r2, r3, d10
 8012408:	f7ee f8f6 	bl	80005f8 <__aeabi_dmul>
 801240c:	ec53 2b18 	vmov	r2, r3, d8
 8012410:	ec41 0b19 	vmov	d9, r0, r1
 8012414:	ec51 0b18 	vmov	r0, r1, d8
 8012418:	f7ee f8ee 	bl	80005f8 <__aeabi_dmul>
 801241c:	a37c      	add	r3, pc, #496	; (adr r3, 8012610 <__ieee754_pow+0x708>)
 801241e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012422:	4604      	mov	r4, r0
 8012424:	460d      	mov	r5, r1
 8012426:	f7ee f8e7 	bl	80005f8 <__aeabi_dmul>
 801242a:	a37b      	add	r3, pc, #492	; (adr r3, 8012618 <__ieee754_pow+0x710>)
 801242c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012430:	f7ed ff2c 	bl	800028c <__adddf3>
 8012434:	4622      	mov	r2, r4
 8012436:	462b      	mov	r3, r5
 8012438:	f7ee f8de 	bl	80005f8 <__aeabi_dmul>
 801243c:	a378      	add	r3, pc, #480	; (adr r3, 8012620 <__ieee754_pow+0x718>)
 801243e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012442:	f7ed ff23 	bl	800028c <__adddf3>
 8012446:	4622      	mov	r2, r4
 8012448:	462b      	mov	r3, r5
 801244a:	f7ee f8d5 	bl	80005f8 <__aeabi_dmul>
 801244e:	a376      	add	r3, pc, #472	; (adr r3, 8012628 <__ieee754_pow+0x720>)
 8012450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012454:	f7ed ff1a 	bl	800028c <__adddf3>
 8012458:	4622      	mov	r2, r4
 801245a:	462b      	mov	r3, r5
 801245c:	f7ee f8cc 	bl	80005f8 <__aeabi_dmul>
 8012460:	a373      	add	r3, pc, #460	; (adr r3, 8012630 <__ieee754_pow+0x728>)
 8012462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012466:	f7ed ff11 	bl	800028c <__adddf3>
 801246a:	4622      	mov	r2, r4
 801246c:	462b      	mov	r3, r5
 801246e:	f7ee f8c3 	bl	80005f8 <__aeabi_dmul>
 8012472:	a371      	add	r3, pc, #452	; (adr r3, 8012638 <__ieee754_pow+0x730>)
 8012474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012478:	f7ed ff08 	bl	800028c <__adddf3>
 801247c:	4622      	mov	r2, r4
 801247e:	4606      	mov	r6, r0
 8012480:	460f      	mov	r7, r1
 8012482:	462b      	mov	r3, r5
 8012484:	4620      	mov	r0, r4
 8012486:	4629      	mov	r1, r5
 8012488:	f7ee f8b6 	bl	80005f8 <__aeabi_dmul>
 801248c:	4602      	mov	r2, r0
 801248e:	460b      	mov	r3, r1
 8012490:	4630      	mov	r0, r6
 8012492:	4639      	mov	r1, r7
 8012494:	f7ee f8b0 	bl	80005f8 <__aeabi_dmul>
 8012498:	4642      	mov	r2, r8
 801249a:	4604      	mov	r4, r0
 801249c:	460d      	mov	r5, r1
 801249e:	464b      	mov	r3, r9
 80124a0:	ec51 0b18 	vmov	r0, r1, d8
 80124a4:	f7ed fef2 	bl	800028c <__adddf3>
 80124a8:	ec53 2b19 	vmov	r2, r3, d9
 80124ac:	f7ee f8a4 	bl	80005f8 <__aeabi_dmul>
 80124b0:	4622      	mov	r2, r4
 80124b2:	462b      	mov	r3, r5
 80124b4:	f7ed feea 	bl	800028c <__adddf3>
 80124b8:	4642      	mov	r2, r8
 80124ba:	4682      	mov	sl, r0
 80124bc:	468b      	mov	fp, r1
 80124be:	464b      	mov	r3, r9
 80124c0:	4640      	mov	r0, r8
 80124c2:	4649      	mov	r1, r9
 80124c4:	f7ee f898 	bl	80005f8 <__aeabi_dmul>
 80124c8:	4b6b      	ldr	r3, [pc, #428]	; (8012678 <__ieee754_pow+0x770>)
 80124ca:	2200      	movs	r2, #0
 80124cc:	4606      	mov	r6, r0
 80124ce:	460f      	mov	r7, r1
 80124d0:	f7ed fedc 	bl	800028c <__adddf3>
 80124d4:	4652      	mov	r2, sl
 80124d6:	465b      	mov	r3, fp
 80124d8:	f7ed fed8 	bl	800028c <__adddf3>
 80124dc:	2000      	movs	r0, #0
 80124de:	4604      	mov	r4, r0
 80124e0:	460d      	mov	r5, r1
 80124e2:	4602      	mov	r2, r0
 80124e4:	460b      	mov	r3, r1
 80124e6:	4640      	mov	r0, r8
 80124e8:	4649      	mov	r1, r9
 80124ea:	f7ee f885 	bl	80005f8 <__aeabi_dmul>
 80124ee:	4b62      	ldr	r3, [pc, #392]	; (8012678 <__ieee754_pow+0x770>)
 80124f0:	4680      	mov	r8, r0
 80124f2:	4689      	mov	r9, r1
 80124f4:	2200      	movs	r2, #0
 80124f6:	4620      	mov	r0, r4
 80124f8:	4629      	mov	r1, r5
 80124fa:	f7ed fec5 	bl	8000288 <__aeabi_dsub>
 80124fe:	4632      	mov	r2, r6
 8012500:	463b      	mov	r3, r7
 8012502:	f7ed fec1 	bl	8000288 <__aeabi_dsub>
 8012506:	4602      	mov	r2, r0
 8012508:	460b      	mov	r3, r1
 801250a:	4650      	mov	r0, sl
 801250c:	4659      	mov	r1, fp
 801250e:	f7ed febb 	bl	8000288 <__aeabi_dsub>
 8012512:	ec53 2b18 	vmov	r2, r3, d8
 8012516:	f7ee f86f 	bl	80005f8 <__aeabi_dmul>
 801251a:	4622      	mov	r2, r4
 801251c:	4606      	mov	r6, r0
 801251e:	460f      	mov	r7, r1
 8012520:	462b      	mov	r3, r5
 8012522:	ec51 0b19 	vmov	r0, r1, d9
 8012526:	f7ee f867 	bl	80005f8 <__aeabi_dmul>
 801252a:	4602      	mov	r2, r0
 801252c:	460b      	mov	r3, r1
 801252e:	4630      	mov	r0, r6
 8012530:	4639      	mov	r1, r7
 8012532:	f7ed feab 	bl	800028c <__adddf3>
 8012536:	4606      	mov	r6, r0
 8012538:	460f      	mov	r7, r1
 801253a:	4602      	mov	r2, r0
 801253c:	460b      	mov	r3, r1
 801253e:	4640      	mov	r0, r8
 8012540:	4649      	mov	r1, r9
 8012542:	f7ed fea3 	bl	800028c <__adddf3>
 8012546:	a33e      	add	r3, pc, #248	; (adr r3, 8012640 <__ieee754_pow+0x738>)
 8012548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801254c:	2000      	movs	r0, #0
 801254e:	4604      	mov	r4, r0
 8012550:	460d      	mov	r5, r1
 8012552:	f7ee f851 	bl	80005f8 <__aeabi_dmul>
 8012556:	4642      	mov	r2, r8
 8012558:	ec41 0b18 	vmov	d8, r0, r1
 801255c:	464b      	mov	r3, r9
 801255e:	4620      	mov	r0, r4
 8012560:	4629      	mov	r1, r5
 8012562:	f7ed fe91 	bl	8000288 <__aeabi_dsub>
 8012566:	4602      	mov	r2, r0
 8012568:	460b      	mov	r3, r1
 801256a:	4630      	mov	r0, r6
 801256c:	4639      	mov	r1, r7
 801256e:	f7ed fe8b 	bl	8000288 <__aeabi_dsub>
 8012572:	a335      	add	r3, pc, #212	; (adr r3, 8012648 <__ieee754_pow+0x740>)
 8012574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012578:	f7ee f83e 	bl	80005f8 <__aeabi_dmul>
 801257c:	a334      	add	r3, pc, #208	; (adr r3, 8012650 <__ieee754_pow+0x748>)
 801257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012582:	4606      	mov	r6, r0
 8012584:	460f      	mov	r7, r1
 8012586:	4620      	mov	r0, r4
 8012588:	4629      	mov	r1, r5
 801258a:	f7ee f835 	bl	80005f8 <__aeabi_dmul>
 801258e:	4602      	mov	r2, r0
 8012590:	460b      	mov	r3, r1
 8012592:	4630      	mov	r0, r6
 8012594:	4639      	mov	r1, r7
 8012596:	f7ed fe79 	bl	800028c <__adddf3>
 801259a:	9a07      	ldr	r2, [sp, #28]
 801259c:	4b37      	ldr	r3, [pc, #220]	; (801267c <__ieee754_pow+0x774>)
 801259e:	4413      	add	r3, r2
 80125a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125a4:	f7ed fe72 	bl	800028c <__adddf3>
 80125a8:	4682      	mov	sl, r0
 80125aa:	9805      	ldr	r0, [sp, #20]
 80125ac:	468b      	mov	fp, r1
 80125ae:	f7ed ffb9 	bl	8000524 <__aeabi_i2d>
 80125b2:	9a07      	ldr	r2, [sp, #28]
 80125b4:	4b32      	ldr	r3, [pc, #200]	; (8012680 <__ieee754_pow+0x778>)
 80125b6:	4413      	add	r3, r2
 80125b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80125bc:	4606      	mov	r6, r0
 80125be:	460f      	mov	r7, r1
 80125c0:	4652      	mov	r2, sl
 80125c2:	465b      	mov	r3, fp
 80125c4:	ec51 0b18 	vmov	r0, r1, d8
 80125c8:	f7ed fe60 	bl	800028c <__adddf3>
 80125cc:	4642      	mov	r2, r8
 80125ce:	464b      	mov	r3, r9
 80125d0:	f7ed fe5c 	bl	800028c <__adddf3>
 80125d4:	4632      	mov	r2, r6
 80125d6:	463b      	mov	r3, r7
 80125d8:	f7ed fe58 	bl	800028c <__adddf3>
 80125dc:	2000      	movs	r0, #0
 80125de:	4632      	mov	r2, r6
 80125e0:	463b      	mov	r3, r7
 80125e2:	4604      	mov	r4, r0
 80125e4:	460d      	mov	r5, r1
 80125e6:	f7ed fe4f 	bl	8000288 <__aeabi_dsub>
 80125ea:	4642      	mov	r2, r8
 80125ec:	464b      	mov	r3, r9
 80125ee:	f7ed fe4b 	bl	8000288 <__aeabi_dsub>
 80125f2:	ec53 2b18 	vmov	r2, r3, d8
 80125f6:	f7ed fe47 	bl	8000288 <__aeabi_dsub>
 80125fa:	4602      	mov	r2, r0
 80125fc:	460b      	mov	r3, r1
 80125fe:	4650      	mov	r0, sl
 8012600:	4659      	mov	r1, fp
 8012602:	e610      	b.n	8012226 <__ieee754_pow+0x31e>
 8012604:	2401      	movs	r4, #1
 8012606:	e6a1      	b.n	801234c <__ieee754_pow+0x444>
 8012608:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8012658 <__ieee754_pow+0x750>
 801260c:	e617      	b.n	801223e <__ieee754_pow+0x336>
 801260e:	bf00      	nop
 8012610:	4a454eef 	.word	0x4a454eef
 8012614:	3fca7e28 	.word	0x3fca7e28
 8012618:	93c9db65 	.word	0x93c9db65
 801261c:	3fcd864a 	.word	0x3fcd864a
 8012620:	a91d4101 	.word	0xa91d4101
 8012624:	3fd17460 	.word	0x3fd17460
 8012628:	518f264d 	.word	0x518f264d
 801262c:	3fd55555 	.word	0x3fd55555
 8012630:	db6fabff 	.word	0xdb6fabff
 8012634:	3fdb6db6 	.word	0x3fdb6db6
 8012638:	33333303 	.word	0x33333303
 801263c:	3fe33333 	.word	0x3fe33333
 8012640:	e0000000 	.word	0xe0000000
 8012644:	3feec709 	.word	0x3feec709
 8012648:	dc3a03fd 	.word	0xdc3a03fd
 801264c:	3feec709 	.word	0x3feec709
 8012650:	145b01f5 	.word	0x145b01f5
 8012654:	be3e2fe0 	.word	0xbe3e2fe0
 8012658:	00000000 	.word	0x00000000
 801265c:	3ff00000 	.word	0x3ff00000
 8012660:	7ff00000 	.word	0x7ff00000
 8012664:	43400000 	.word	0x43400000
 8012668:	0003988e 	.word	0x0003988e
 801266c:	000bb679 	.word	0x000bb679
 8012670:	08013ec8 	.word	0x08013ec8
 8012674:	3ff00000 	.word	0x3ff00000
 8012678:	40080000 	.word	0x40080000
 801267c:	08013ee8 	.word	0x08013ee8
 8012680:	08013ed8 	.word	0x08013ed8
 8012684:	a3b3      	add	r3, pc, #716	; (adr r3, 8012954 <__ieee754_pow+0xa4c>)
 8012686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801268a:	4640      	mov	r0, r8
 801268c:	4649      	mov	r1, r9
 801268e:	f7ed fdfd 	bl	800028c <__adddf3>
 8012692:	4622      	mov	r2, r4
 8012694:	ec41 0b1a 	vmov	d10, r0, r1
 8012698:	462b      	mov	r3, r5
 801269a:	4630      	mov	r0, r6
 801269c:	4639      	mov	r1, r7
 801269e:	f7ed fdf3 	bl	8000288 <__aeabi_dsub>
 80126a2:	4602      	mov	r2, r0
 80126a4:	460b      	mov	r3, r1
 80126a6:	ec51 0b1a 	vmov	r0, r1, d10
 80126aa:	f7ee fa35 	bl	8000b18 <__aeabi_dcmpgt>
 80126ae:	2800      	cmp	r0, #0
 80126b0:	f47f ae04 	bne.w	80122bc <__ieee754_pow+0x3b4>
 80126b4:	4aa2      	ldr	r2, [pc, #648]	; (8012940 <__ieee754_pow+0xa38>)
 80126b6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80126ba:	4293      	cmp	r3, r2
 80126bc:	f340 8107 	ble.w	80128ce <__ieee754_pow+0x9c6>
 80126c0:	151b      	asrs	r3, r3, #20
 80126c2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80126c6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80126ca:	fa4a fa03 	asr.w	sl, sl, r3
 80126ce:	44da      	add	sl, fp
 80126d0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80126d4:	489b      	ldr	r0, [pc, #620]	; (8012944 <__ieee754_pow+0xa3c>)
 80126d6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80126da:	4108      	asrs	r0, r1
 80126dc:	ea00 030a 	and.w	r3, r0, sl
 80126e0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80126e4:	f1c1 0114 	rsb	r1, r1, #20
 80126e8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80126ec:	fa4a fa01 	asr.w	sl, sl, r1
 80126f0:	f1bb 0f00 	cmp.w	fp, #0
 80126f4:	f04f 0200 	mov.w	r2, #0
 80126f8:	4620      	mov	r0, r4
 80126fa:	4629      	mov	r1, r5
 80126fc:	bfb8      	it	lt
 80126fe:	f1ca 0a00 	rsblt	sl, sl, #0
 8012702:	f7ed fdc1 	bl	8000288 <__aeabi_dsub>
 8012706:	ec41 0b19 	vmov	d9, r0, r1
 801270a:	4642      	mov	r2, r8
 801270c:	464b      	mov	r3, r9
 801270e:	ec51 0b19 	vmov	r0, r1, d9
 8012712:	f7ed fdbb 	bl	800028c <__adddf3>
 8012716:	a37a      	add	r3, pc, #488	; (adr r3, 8012900 <__ieee754_pow+0x9f8>)
 8012718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801271c:	2000      	movs	r0, #0
 801271e:	4604      	mov	r4, r0
 8012720:	460d      	mov	r5, r1
 8012722:	f7ed ff69 	bl	80005f8 <__aeabi_dmul>
 8012726:	ec53 2b19 	vmov	r2, r3, d9
 801272a:	4606      	mov	r6, r0
 801272c:	460f      	mov	r7, r1
 801272e:	4620      	mov	r0, r4
 8012730:	4629      	mov	r1, r5
 8012732:	f7ed fda9 	bl	8000288 <__aeabi_dsub>
 8012736:	4602      	mov	r2, r0
 8012738:	460b      	mov	r3, r1
 801273a:	4640      	mov	r0, r8
 801273c:	4649      	mov	r1, r9
 801273e:	f7ed fda3 	bl	8000288 <__aeabi_dsub>
 8012742:	a371      	add	r3, pc, #452	; (adr r3, 8012908 <__ieee754_pow+0xa00>)
 8012744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012748:	f7ed ff56 	bl	80005f8 <__aeabi_dmul>
 801274c:	a370      	add	r3, pc, #448	; (adr r3, 8012910 <__ieee754_pow+0xa08>)
 801274e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012752:	4680      	mov	r8, r0
 8012754:	4689      	mov	r9, r1
 8012756:	4620      	mov	r0, r4
 8012758:	4629      	mov	r1, r5
 801275a:	f7ed ff4d 	bl	80005f8 <__aeabi_dmul>
 801275e:	4602      	mov	r2, r0
 8012760:	460b      	mov	r3, r1
 8012762:	4640      	mov	r0, r8
 8012764:	4649      	mov	r1, r9
 8012766:	f7ed fd91 	bl	800028c <__adddf3>
 801276a:	4604      	mov	r4, r0
 801276c:	460d      	mov	r5, r1
 801276e:	4602      	mov	r2, r0
 8012770:	460b      	mov	r3, r1
 8012772:	4630      	mov	r0, r6
 8012774:	4639      	mov	r1, r7
 8012776:	f7ed fd89 	bl	800028c <__adddf3>
 801277a:	4632      	mov	r2, r6
 801277c:	463b      	mov	r3, r7
 801277e:	4680      	mov	r8, r0
 8012780:	4689      	mov	r9, r1
 8012782:	f7ed fd81 	bl	8000288 <__aeabi_dsub>
 8012786:	4602      	mov	r2, r0
 8012788:	460b      	mov	r3, r1
 801278a:	4620      	mov	r0, r4
 801278c:	4629      	mov	r1, r5
 801278e:	f7ed fd7b 	bl	8000288 <__aeabi_dsub>
 8012792:	4642      	mov	r2, r8
 8012794:	4606      	mov	r6, r0
 8012796:	460f      	mov	r7, r1
 8012798:	464b      	mov	r3, r9
 801279a:	4640      	mov	r0, r8
 801279c:	4649      	mov	r1, r9
 801279e:	f7ed ff2b 	bl	80005f8 <__aeabi_dmul>
 80127a2:	a35d      	add	r3, pc, #372	; (adr r3, 8012918 <__ieee754_pow+0xa10>)
 80127a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127a8:	4604      	mov	r4, r0
 80127aa:	460d      	mov	r5, r1
 80127ac:	f7ed ff24 	bl	80005f8 <__aeabi_dmul>
 80127b0:	a35b      	add	r3, pc, #364	; (adr r3, 8012920 <__ieee754_pow+0xa18>)
 80127b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127b6:	f7ed fd67 	bl	8000288 <__aeabi_dsub>
 80127ba:	4622      	mov	r2, r4
 80127bc:	462b      	mov	r3, r5
 80127be:	f7ed ff1b 	bl	80005f8 <__aeabi_dmul>
 80127c2:	a359      	add	r3, pc, #356	; (adr r3, 8012928 <__ieee754_pow+0xa20>)
 80127c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127c8:	f7ed fd60 	bl	800028c <__adddf3>
 80127cc:	4622      	mov	r2, r4
 80127ce:	462b      	mov	r3, r5
 80127d0:	f7ed ff12 	bl	80005f8 <__aeabi_dmul>
 80127d4:	a356      	add	r3, pc, #344	; (adr r3, 8012930 <__ieee754_pow+0xa28>)
 80127d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127da:	f7ed fd55 	bl	8000288 <__aeabi_dsub>
 80127de:	4622      	mov	r2, r4
 80127e0:	462b      	mov	r3, r5
 80127e2:	f7ed ff09 	bl	80005f8 <__aeabi_dmul>
 80127e6:	a354      	add	r3, pc, #336	; (adr r3, 8012938 <__ieee754_pow+0xa30>)
 80127e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ec:	f7ed fd4e 	bl	800028c <__adddf3>
 80127f0:	4622      	mov	r2, r4
 80127f2:	462b      	mov	r3, r5
 80127f4:	f7ed ff00 	bl	80005f8 <__aeabi_dmul>
 80127f8:	4602      	mov	r2, r0
 80127fa:	460b      	mov	r3, r1
 80127fc:	4640      	mov	r0, r8
 80127fe:	4649      	mov	r1, r9
 8012800:	f7ed fd42 	bl	8000288 <__aeabi_dsub>
 8012804:	4604      	mov	r4, r0
 8012806:	460d      	mov	r5, r1
 8012808:	4602      	mov	r2, r0
 801280a:	460b      	mov	r3, r1
 801280c:	4640      	mov	r0, r8
 801280e:	4649      	mov	r1, r9
 8012810:	f7ed fef2 	bl	80005f8 <__aeabi_dmul>
 8012814:	2200      	movs	r2, #0
 8012816:	ec41 0b19 	vmov	d9, r0, r1
 801281a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801281e:	4620      	mov	r0, r4
 8012820:	4629      	mov	r1, r5
 8012822:	f7ed fd31 	bl	8000288 <__aeabi_dsub>
 8012826:	4602      	mov	r2, r0
 8012828:	460b      	mov	r3, r1
 801282a:	ec51 0b19 	vmov	r0, r1, d9
 801282e:	f7ee f80d 	bl	800084c <__aeabi_ddiv>
 8012832:	4632      	mov	r2, r6
 8012834:	4604      	mov	r4, r0
 8012836:	460d      	mov	r5, r1
 8012838:	463b      	mov	r3, r7
 801283a:	4640      	mov	r0, r8
 801283c:	4649      	mov	r1, r9
 801283e:	f7ed fedb 	bl	80005f8 <__aeabi_dmul>
 8012842:	4632      	mov	r2, r6
 8012844:	463b      	mov	r3, r7
 8012846:	f7ed fd21 	bl	800028c <__adddf3>
 801284a:	4602      	mov	r2, r0
 801284c:	460b      	mov	r3, r1
 801284e:	4620      	mov	r0, r4
 8012850:	4629      	mov	r1, r5
 8012852:	f7ed fd19 	bl	8000288 <__aeabi_dsub>
 8012856:	4642      	mov	r2, r8
 8012858:	464b      	mov	r3, r9
 801285a:	f7ed fd15 	bl	8000288 <__aeabi_dsub>
 801285e:	460b      	mov	r3, r1
 8012860:	4602      	mov	r2, r0
 8012862:	4939      	ldr	r1, [pc, #228]	; (8012948 <__ieee754_pow+0xa40>)
 8012864:	2000      	movs	r0, #0
 8012866:	f7ed fd0f 	bl	8000288 <__aeabi_dsub>
 801286a:	ec41 0b10 	vmov	d0, r0, r1
 801286e:	ee10 3a90 	vmov	r3, s1
 8012872:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801287a:	da2b      	bge.n	80128d4 <__ieee754_pow+0x9cc>
 801287c:	4650      	mov	r0, sl
 801287e:	f000 fc23 	bl	80130c8 <scalbn>
 8012882:	ec51 0b10 	vmov	r0, r1, d0
 8012886:	ec53 2b18 	vmov	r2, r3, d8
 801288a:	f7ff bbee 	b.w	801206a <__ieee754_pow+0x162>
 801288e:	4b2f      	ldr	r3, [pc, #188]	; (801294c <__ieee754_pow+0xa44>)
 8012890:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012894:	429e      	cmp	r6, r3
 8012896:	f77f af0d 	ble.w	80126b4 <__ieee754_pow+0x7ac>
 801289a:	4b2d      	ldr	r3, [pc, #180]	; (8012950 <__ieee754_pow+0xa48>)
 801289c:	440b      	add	r3, r1
 801289e:	4303      	orrs	r3, r0
 80128a0:	d009      	beq.n	80128b6 <__ieee754_pow+0x9ae>
 80128a2:	ec51 0b18 	vmov	r0, r1, d8
 80128a6:	2200      	movs	r2, #0
 80128a8:	2300      	movs	r3, #0
 80128aa:	f7ee f917 	bl	8000adc <__aeabi_dcmplt>
 80128ae:	3800      	subs	r0, #0
 80128b0:	bf18      	it	ne
 80128b2:	2001      	movne	r0, #1
 80128b4:	e448      	b.n	8012148 <__ieee754_pow+0x240>
 80128b6:	4622      	mov	r2, r4
 80128b8:	462b      	mov	r3, r5
 80128ba:	f7ed fce5 	bl	8000288 <__aeabi_dsub>
 80128be:	4642      	mov	r2, r8
 80128c0:	464b      	mov	r3, r9
 80128c2:	f7ee f91f 	bl	8000b04 <__aeabi_dcmpge>
 80128c6:	2800      	cmp	r0, #0
 80128c8:	f43f aef4 	beq.w	80126b4 <__ieee754_pow+0x7ac>
 80128cc:	e7e9      	b.n	80128a2 <__ieee754_pow+0x99a>
 80128ce:	f04f 0a00 	mov.w	sl, #0
 80128d2:	e71a      	b.n	801270a <__ieee754_pow+0x802>
 80128d4:	ec51 0b10 	vmov	r0, r1, d0
 80128d8:	4619      	mov	r1, r3
 80128da:	e7d4      	b.n	8012886 <__ieee754_pow+0x97e>
 80128dc:	491a      	ldr	r1, [pc, #104]	; (8012948 <__ieee754_pow+0xa40>)
 80128de:	2000      	movs	r0, #0
 80128e0:	f7ff bb31 	b.w	8011f46 <__ieee754_pow+0x3e>
 80128e4:	2000      	movs	r0, #0
 80128e6:	2100      	movs	r1, #0
 80128e8:	f7ff bb2d 	b.w	8011f46 <__ieee754_pow+0x3e>
 80128ec:	4630      	mov	r0, r6
 80128ee:	4639      	mov	r1, r7
 80128f0:	f7ff bb29 	b.w	8011f46 <__ieee754_pow+0x3e>
 80128f4:	9204      	str	r2, [sp, #16]
 80128f6:	f7ff bb7b 	b.w	8011ff0 <__ieee754_pow+0xe8>
 80128fa:	2300      	movs	r3, #0
 80128fc:	f7ff bb65 	b.w	8011fca <__ieee754_pow+0xc2>
 8012900:	00000000 	.word	0x00000000
 8012904:	3fe62e43 	.word	0x3fe62e43
 8012908:	fefa39ef 	.word	0xfefa39ef
 801290c:	3fe62e42 	.word	0x3fe62e42
 8012910:	0ca86c39 	.word	0x0ca86c39
 8012914:	be205c61 	.word	0xbe205c61
 8012918:	72bea4d0 	.word	0x72bea4d0
 801291c:	3e663769 	.word	0x3e663769
 8012920:	c5d26bf1 	.word	0xc5d26bf1
 8012924:	3ebbbd41 	.word	0x3ebbbd41
 8012928:	af25de2c 	.word	0xaf25de2c
 801292c:	3f11566a 	.word	0x3f11566a
 8012930:	16bebd93 	.word	0x16bebd93
 8012934:	3f66c16c 	.word	0x3f66c16c
 8012938:	5555553e 	.word	0x5555553e
 801293c:	3fc55555 	.word	0x3fc55555
 8012940:	3fe00000 	.word	0x3fe00000
 8012944:	fff00000 	.word	0xfff00000
 8012948:	3ff00000 	.word	0x3ff00000
 801294c:	4090cbff 	.word	0x4090cbff
 8012950:	3f6f3400 	.word	0x3f6f3400
 8012954:	652b82fe 	.word	0x652b82fe
 8012958:	3c971547 	.word	0x3c971547
 801295c:	00000000 	.word	0x00000000

08012960 <__ieee754_rem_pio2>:
 8012960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012964:	ed2d 8b02 	vpush	{d8}
 8012968:	ec55 4b10 	vmov	r4, r5, d0
 801296c:	4bca      	ldr	r3, [pc, #808]	; (8012c98 <__ieee754_rem_pio2+0x338>)
 801296e:	b08b      	sub	sp, #44	; 0x2c
 8012970:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8012974:	4598      	cmp	r8, r3
 8012976:	4682      	mov	sl, r0
 8012978:	9502      	str	r5, [sp, #8]
 801297a:	dc08      	bgt.n	801298e <__ieee754_rem_pio2+0x2e>
 801297c:	2200      	movs	r2, #0
 801297e:	2300      	movs	r3, #0
 8012980:	ed80 0b00 	vstr	d0, [r0]
 8012984:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012988:	f04f 0b00 	mov.w	fp, #0
 801298c:	e028      	b.n	80129e0 <__ieee754_rem_pio2+0x80>
 801298e:	4bc3      	ldr	r3, [pc, #780]	; (8012c9c <__ieee754_rem_pio2+0x33c>)
 8012990:	4598      	cmp	r8, r3
 8012992:	dc78      	bgt.n	8012a86 <__ieee754_rem_pio2+0x126>
 8012994:	9b02      	ldr	r3, [sp, #8]
 8012996:	4ec2      	ldr	r6, [pc, #776]	; (8012ca0 <__ieee754_rem_pio2+0x340>)
 8012998:	2b00      	cmp	r3, #0
 801299a:	ee10 0a10 	vmov	r0, s0
 801299e:	a3b0      	add	r3, pc, #704	; (adr r3, 8012c60 <__ieee754_rem_pio2+0x300>)
 80129a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129a4:	4629      	mov	r1, r5
 80129a6:	dd39      	ble.n	8012a1c <__ieee754_rem_pio2+0xbc>
 80129a8:	f7ed fc6e 	bl	8000288 <__aeabi_dsub>
 80129ac:	45b0      	cmp	r8, r6
 80129ae:	4604      	mov	r4, r0
 80129b0:	460d      	mov	r5, r1
 80129b2:	d01b      	beq.n	80129ec <__ieee754_rem_pio2+0x8c>
 80129b4:	a3ac      	add	r3, pc, #688	; (adr r3, 8012c68 <__ieee754_rem_pio2+0x308>)
 80129b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ba:	f7ed fc65 	bl	8000288 <__aeabi_dsub>
 80129be:	4602      	mov	r2, r0
 80129c0:	460b      	mov	r3, r1
 80129c2:	e9ca 2300 	strd	r2, r3, [sl]
 80129c6:	4620      	mov	r0, r4
 80129c8:	4629      	mov	r1, r5
 80129ca:	f7ed fc5d 	bl	8000288 <__aeabi_dsub>
 80129ce:	a3a6      	add	r3, pc, #664	; (adr r3, 8012c68 <__ieee754_rem_pio2+0x308>)
 80129d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129d4:	f7ed fc58 	bl	8000288 <__aeabi_dsub>
 80129d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80129dc:	f04f 0b01 	mov.w	fp, #1
 80129e0:	4658      	mov	r0, fp
 80129e2:	b00b      	add	sp, #44	; 0x2c
 80129e4:	ecbd 8b02 	vpop	{d8}
 80129e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129ec:	a3a0      	add	r3, pc, #640	; (adr r3, 8012c70 <__ieee754_rem_pio2+0x310>)
 80129ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129f2:	f7ed fc49 	bl	8000288 <__aeabi_dsub>
 80129f6:	a3a0      	add	r3, pc, #640	; (adr r3, 8012c78 <__ieee754_rem_pio2+0x318>)
 80129f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129fc:	4604      	mov	r4, r0
 80129fe:	460d      	mov	r5, r1
 8012a00:	f7ed fc42 	bl	8000288 <__aeabi_dsub>
 8012a04:	4602      	mov	r2, r0
 8012a06:	460b      	mov	r3, r1
 8012a08:	e9ca 2300 	strd	r2, r3, [sl]
 8012a0c:	4620      	mov	r0, r4
 8012a0e:	4629      	mov	r1, r5
 8012a10:	f7ed fc3a 	bl	8000288 <__aeabi_dsub>
 8012a14:	a398      	add	r3, pc, #608	; (adr r3, 8012c78 <__ieee754_rem_pio2+0x318>)
 8012a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a1a:	e7db      	b.n	80129d4 <__ieee754_rem_pio2+0x74>
 8012a1c:	f7ed fc36 	bl	800028c <__adddf3>
 8012a20:	45b0      	cmp	r8, r6
 8012a22:	4604      	mov	r4, r0
 8012a24:	460d      	mov	r5, r1
 8012a26:	d016      	beq.n	8012a56 <__ieee754_rem_pio2+0xf6>
 8012a28:	a38f      	add	r3, pc, #572	; (adr r3, 8012c68 <__ieee754_rem_pio2+0x308>)
 8012a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a2e:	f7ed fc2d 	bl	800028c <__adddf3>
 8012a32:	4602      	mov	r2, r0
 8012a34:	460b      	mov	r3, r1
 8012a36:	e9ca 2300 	strd	r2, r3, [sl]
 8012a3a:	4620      	mov	r0, r4
 8012a3c:	4629      	mov	r1, r5
 8012a3e:	f7ed fc23 	bl	8000288 <__aeabi_dsub>
 8012a42:	a389      	add	r3, pc, #548	; (adr r3, 8012c68 <__ieee754_rem_pio2+0x308>)
 8012a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a48:	f7ed fc20 	bl	800028c <__adddf3>
 8012a4c:	f04f 3bff 	mov.w	fp, #4294967295
 8012a50:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012a54:	e7c4      	b.n	80129e0 <__ieee754_rem_pio2+0x80>
 8012a56:	a386      	add	r3, pc, #536	; (adr r3, 8012c70 <__ieee754_rem_pio2+0x310>)
 8012a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a5c:	f7ed fc16 	bl	800028c <__adddf3>
 8012a60:	a385      	add	r3, pc, #532	; (adr r3, 8012c78 <__ieee754_rem_pio2+0x318>)
 8012a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a66:	4604      	mov	r4, r0
 8012a68:	460d      	mov	r5, r1
 8012a6a:	f7ed fc0f 	bl	800028c <__adddf3>
 8012a6e:	4602      	mov	r2, r0
 8012a70:	460b      	mov	r3, r1
 8012a72:	e9ca 2300 	strd	r2, r3, [sl]
 8012a76:	4620      	mov	r0, r4
 8012a78:	4629      	mov	r1, r5
 8012a7a:	f7ed fc05 	bl	8000288 <__aeabi_dsub>
 8012a7e:	a37e      	add	r3, pc, #504	; (adr r3, 8012c78 <__ieee754_rem_pio2+0x318>)
 8012a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a84:	e7e0      	b.n	8012a48 <__ieee754_rem_pio2+0xe8>
 8012a86:	4b87      	ldr	r3, [pc, #540]	; (8012ca4 <__ieee754_rem_pio2+0x344>)
 8012a88:	4598      	cmp	r8, r3
 8012a8a:	f300 80d8 	bgt.w	8012c3e <__ieee754_rem_pio2+0x2de>
 8012a8e:	f000 fb0f 	bl	80130b0 <fabs>
 8012a92:	ec55 4b10 	vmov	r4, r5, d0
 8012a96:	ee10 0a10 	vmov	r0, s0
 8012a9a:	a379      	add	r3, pc, #484	; (adr r3, 8012c80 <__ieee754_rem_pio2+0x320>)
 8012a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aa0:	4629      	mov	r1, r5
 8012aa2:	f7ed fda9 	bl	80005f8 <__aeabi_dmul>
 8012aa6:	4b80      	ldr	r3, [pc, #512]	; (8012ca8 <__ieee754_rem_pio2+0x348>)
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	f7ed fbef 	bl	800028c <__adddf3>
 8012aae:	f7ee f853 	bl	8000b58 <__aeabi_d2iz>
 8012ab2:	4683      	mov	fp, r0
 8012ab4:	f7ed fd36 	bl	8000524 <__aeabi_i2d>
 8012ab8:	4602      	mov	r2, r0
 8012aba:	460b      	mov	r3, r1
 8012abc:	ec43 2b18 	vmov	d8, r2, r3
 8012ac0:	a367      	add	r3, pc, #412	; (adr r3, 8012c60 <__ieee754_rem_pio2+0x300>)
 8012ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ac6:	f7ed fd97 	bl	80005f8 <__aeabi_dmul>
 8012aca:	4602      	mov	r2, r0
 8012acc:	460b      	mov	r3, r1
 8012ace:	4620      	mov	r0, r4
 8012ad0:	4629      	mov	r1, r5
 8012ad2:	f7ed fbd9 	bl	8000288 <__aeabi_dsub>
 8012ad6:	a364      	add	r3, pc, #400	; (adr r3, 8012c68 <__ieee754_rem_pio2+0x308>)
 8012ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012adc:	4606      	mov	r6, r0
 8012ade:	460f      	mov	r7, r1
 8012ae0:	ec51 0b18 	vmov	r0, r1, d8
 8012ae4:	f7ed fd88 	bl	80005f8 <__aeabi_dmul>
 8012ae8:	f1bb 0f1f 	cmp.w	fp, #31
 8012aec:	4604      	mov	r4, r0
 8012aee:	460d      	mov	r5, r1
 8012af0:	dc0d      	bgt.n	8012b0e <__ieee754_rem_pio2+0x1ae>
 8012af2:	4b6e      	ldr	r3, [pc, #440]	; (8012cac <__ieee754_rem_pio2+0x34c>)
 8012af4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8012af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012afc:	4543      	cmp	r3, r8
 8012afe:	d006      	beq.n	8012b0e <__ieee754_rem_pio2+0x1ae>
 8012b00:	4622      	mov	r2, r4
 8012b02:	462b      	mov	r3, r5
 8012b04:	4630      	mov	r0, r6
 8012b06:	4639      	mov	r1, r7
 8012b08:	f7ed fbbe 	bl	8000288 <__aeabi_dsub>
 8012b0c:	e00e      	b.n	8012b2c <__ieee754_rem_pio2+0x1cc>
 8012b0e:	462b      	mov	r3, r5
 8012b10:	4622      	mov	r2, r4
 8012b12:	4630      	mov	r0, r6
 8012b14:	4639      	mov	r1, r7
 8012b16:	f7ed fbb7 	bl	8000288 <__aeabi_dsub>
 8012b1a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012b1e:	9303      	str	r3, [sp, #12]
 8012b20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012b24:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8012b28:	2b10      	cmp	r3, #16
 8012b2a:	dc02      	bgt.n	8012b32 <__ieee754_rem_pio2+0x1d2>
 8012b2c:	e9ca 0100 	strd	r0, r1, [sl]
 8012b30:	e039      	b.n	8012ba6 <__ieee754_rem_pio2+0x246>
 8012b32:	a34f      	add	r3, pc, #316	; (adr r3, 8012c70 <__ieee754_rem_pio2+0x310>)
 8012b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b38:	ec51 0b18 	vmov	r0, r1, d8
 8012b3c:	f7ed fd5c 	bl	80005f8 <__aeabi_dmul>
 8012b40:	4604      	mov	r4, r0
 8012b42:	460d      	mov	r5, r1
 8012b44:	4602      	mov	r2, r0
 8012b46:	460b      	mov	r3, r1
 8012b48:	4630      	mov	r0, r6
 8012b4a:	4639      	mov	r1, r7
 8012b4c:	f7ed fb9c 	bl	8000288 <__aeabi_dsub>
 8012b50:	4602      	mov	r2, r0
 8012b52:	460b      	mov	r3, r1
 8012b54:	4680      	mov	r8, r0
 8012b56:	4689      	mov	r9, r1
 8012b58:	4630      	mov	r0, r6
 8012b5a:	4639      	mov	r1, r7
 8012b5c:	f7ed fb94 	bl	8000288 <__aeabi_dsub>
 8012b60:	4622      	mov	r2, r4
 8012b62:	462b      	mov	r3, r5
 8012b64:	f7ed fb90 	bl	8000288 <__aeabi_dsub>
 8012b68:	a343      	add	r3, pc, #268	; (adr r3, 8012c78 <__ieee754_rem_pio2+0x318>)
 8012b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b6e:	4604      	mov	r4, r0
 8012b70:	460d      	mov	r5, r1
 8012b72:	ec51 0b18 	vmov	r0, r1, d8
 8012b76:	f7ed fd3f 	bl	80005f8 <__aeabi_dmul>
 8012b7a:	4622      	mov	r2, r4
 8012b7c:	462b      	mov	r3, r5
 8012b7e:	f7ed fb83 	bl	8000288 <__aeabi_dsub>
 8012b82:	4602      	mov	r2, r0
 8012b84:	460b      	mov	r3, r1
 8012b86:	4604      	mov	r4, r0
 8012b88:	460d      	mov	r5, r1
 8012b8a:	4640      	mov	r0, r8
 8012b8c:	4649      	mov	r1, r9
 8012b8e:	f7ed fb7b 	bl	8000288 <__aeabi_dsub>
 8012b92:	9a03      	ldr	r2, [sp, #12]
 8012b94:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012b98:	1ad3      	subs	r3, r2, r3
 8012b9a:	2b31      	cmp	r3, #49	; 0x31
 8012b9c:	dc24      	bgt.n	8012be8 <__ieee754_rem_pio2+0x288>
 8012b9e:	e9ca 0100 	strd	r0, r1, [sl]
 8012ba2:	4646      	mov	r6, r8
 8012ba4:	464f      	mov	r7, r9
 8012ba6:	e9da 8900 	ldrd	r8, r9, [sl]
 8012baa:	4630      	mov	r0, r6
 8012bac:	4642      	mov	r2, r8
 8012bae:	464b      	mov	r3, r9
 8012bb0:	4639      	mov	r1, r7
 8012bb2:	f7ed fb69 	bl	8000288 <__aeabi_dsub>
 8012bb6:	462b      	mov	r3, r5
 8012bb8:	4622      	mov	r2, r4
 8012bba:	f7ed fb65 	bl	8000288 <__aeabi_dsub>
 8012bbe:	9b02      	ldr	r3, [sp, #8]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012bc6:	f6bf af0b 	bge.w	80129e0 <__ieee754_rem_pio2+0x80>
 8012bca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012bce:	f8ca 3004 	str.w	r3, [sl, #4]
 8012bd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012bd6:	f8ca 8000 	str.w	r8, [sl]
 8012bda:	f8ca 0008 	str.w	r0, [sl, #8]
 8012bde:	f8ca 300c 	str.w	r3, [sl, #12]
 8012be2:	f1cb 0b00 	rsb	fp, fp, #0
 8012be6:	e6fb      	b.n	80129e0 <__ieee754_rem_pio2+0x80>
 8012be8:	a327      	add	r3, pc, #156	; (adr r3, 8012c88 <__ieee754_rem_pio2+0x328>)
 8012bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bee:	ec51 0b18 	vmov	r0, r1, d8
 8012bf2:	f7ed fd01 	bl	80005f8 <__aeabi_dmul>
 8012bf6:	4604      	mov	r4, r0
 8012bf8:	460d      	mov	r5, r1
 8012bfa:	4602      	mov	r2, r0
 8012bfc:	460b      	mov	r3, r1
 8012bfe:	4640      	mov	r0, r8
 8012c00:	4649      	mov	r1, r9
 8012c02:	f7ed fb41 	bl	8000288 <__aeabi_dsub>
 8012c06:	4602      	mov	r2, r0
 8012c08:	460b      	mov	r3, r1
 8012c0a:	4606      	mov	r6, r0
 8012c0c:	460f      	mov	r7, r1
 8012c0e:	4640      	mov	r0, r8
 8012c10:	4649      	mov	r1, r9
 8012c12:	f7ed fb39 	bl	8000288 <__aeabi_dsub>
 8012c16:	4622      	mov	r2, r4
 8012c18:	462b      	mov	r3, r5
 8012c1a:	f7ed fb35 	bl	8000288 <__aeabi_dsub>
 8012c1e:	a31c      	add	r3, pc, #112	; (adr r3, 8012c90 <__ieee754_rem_pio2+0x330>)
 8012c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c24:	4604      	mov	r4, r0
 8012c26:	460d      	mov	r5, r1
 8012c28:	ec51 0b18 	vmov	r0, r1, d8
 8012c2c:	f7ed fce4 	bl	80005f8 <__aeabi_dmul>
 8012c30:	4622      	mov	r2, r4
 8012c32:	462b      	mov	r3, r5
 8012c34:	f7ed fb28 	bl	8000288 <__aeabi_dsub>
 8012c38:	4604      	mov	r4, r0
 8012c3a:	460d      	mov	r5, r1
 8012c3c:	e760      	b.n	8012b00 <__ieee754_rem_pio2+0x1a0>
 8012c3e:	4b1c      	ldr	r3, [pc, #112]	; (8012cb0 <__ieee754_rem_pio2+0x350>)
 8012c40:	4598      	cmp	r8, r3
 8012c42:	dd37      	ble.n	8012cb4 <__ieee754_rem_pio2+0x354>
 8012c44:	ee10 2a10 	vmov	r2, s0
 8012c48:	462b      	mov	r3, r5
 8012c4a:	4620      	mov	r0, r4
 8012c4c:	4629      	mov	r1, r5
 8012c4e:	f7ed fb1b 	bl	8000288 <__aeabi_dsub>
 8012c52:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012c56:	e9ca 0100 	strd	r0, r1, [sl]
 8012c5a:	e695      	b.n	8012988 <__ieee754_rem_pio2+0x28>
 8012c5c:	f3af 8000 	nop.w
 8012c60:	54400000 	.word	0x54400000
 8012c64:	3ff921fb 	.word	0x3ff921fb
 8012c68:	1a626331 	.word	0x1a626331
 8012c6c:	3dd0b461 	.word	0x3dd0b461
 8012c70:	1a600000 	.word	0x1a600000
 8012c74:	3dd0b461 	.word	0x3dd0b461
 8012c78:	2e037073 	.word	0x2e037073
 8012c7c:	3ba3198a 	.word	0x3ba3198a
 8012c80:	6dc9c883 	.word	0x6dc9c883
 8012c84:	3fe45f30 	.word	0x3fe45f30
 8012c88:	2e000000 	.word	0x2e000000
 8012c8c:	3ba3198a 	.word	0x3ba3198a
 8012c90:	252049c1 	.word	0x252049c1
 8012c94:	397b839a 	.word	0x397b839a
 8012c98:	3fe921fb 	.word	0x3fe921fb
 8012c9c:	4002d97b 	.word	0x4002d97b
 8012ca0:	3ff921fb 	.word	0x3ff921fb
 8012ca4:	413921fb 	.word	0x413921fb
 8012ca8:	3fe00000 	.word	0x3fe00000
 8012cac:	08013ef8 	.word	0x08013ef8
 8012cb0:	7fefffff 	.word	0x7fefffff
 8012cb4:	ea4f 5628 	mov.w	r6, r8, asr #20
 8012cb8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8012cbc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8012cc0:	4620      	mov	r0, r4
 8012cc2:	460d      	mov	r5, r1
 8012cc4:	f7ed ff48 	bl	8000b58 <__aeabi_d2iz>
 8012cc8:	f7ed fc2c 	bl	8000524 <__aeabi_i2d>
 8012ccc:	4602      	mov	r2, r0
 8012cce:	460b      	mov	r3, r1
 8012cd0:	4620      	mov	r0, r4
 8012cd2:	4629      	mov	r1, r5
 8012cd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012cd8:	f7ed fad6 	bl	8000288 <__aeabi_dsub>
 8012cdc:	4b21      	ldr	r3, [pc, #132]	; (8012d64 <__ieee754_rem_pio2+0x404>)
 8012cde:	2200      	movs	r2, #0
 8012ce0:	f7ed fc8a 	bl	80005f8 <__aeabi_dmul>
 8012ce4:	460d      	mov	r5, r1
 8012ce6:	4604      	mov	r4, r0
 8012ce8:	f7ed ff36 	bl	8000b58 <__aeabi_d2iz>
 8012cec:	f7ed fc1a 	bl	8000524 <__aeabi_i2d>
 8012cf0:	4602      	mov	r2, r0
 8012cf2:	460b      	mov	r3, r1
 8012cf4:	4620      	mov	r0, r4
 8012cf6:	4629      	mov	r1, r5
 8012cf8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012cfc:	f7ed fac4 	bl	8000288 <__aeabi_dsub>
 8012d00:	4b18      	ldr	r3, [pc, #96]	; (8012d64 <__ieee754_rem_pio2+0x404>)
 8012d02:	2200      	movs	r2, #0
 8012d04:	f7ed fc78 	bl	80005f8 <__aeabi_dmul>
 8012d08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012d0c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8012d10:	2703      	movs	r7, #3
 8012d12:	2400      	movs	r4, #0
 8012d14:	2500      	movs	r5, #0
 8012d16:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8012d1a:	4622      	mov	r2, r4
 8012d1c:	462b      	mov	r3, r5
 8012d1e:	46b9      	mov	r9, r7
 8012d20:	3f01      	subs	r7, #1
 8012d22:	f7ed fed1 	bl	8000ac8 <__aeabi_dcmpeq>
 8012d26:	2800      	cmp	r0, #0
 8012d28:	d1f5      	bne.n	8012d16 <__ieee754_rem_pio2+0x3b6>
 8012d2a:	4b0f      	ldr	r3, [pc, #60]	; (8012d68 <__ieee754_rem_pio2+0x408>)
 8012d2c:	9301      	str	r3, [sp, #4]
 8012d2e:	2302      	movs	r3, #2
 8012d30:	9300      	str	r3, [sp, #0]
 8012d32:	4632      	mov	r2, r6
 8012d34:	464b      	mov	r3, r9
 8012d36:	4651      	mov	r1, sl
 8012d38:	a804      	add	r0, sp, #16
 8012d3a:	f000 fa75 	bl	8013228 <__kernel_rem_pio2>
 8012d3e:	9b02      	ldr	r3, [sp, #8]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	4683      	mov	fp, r0
 8012d44:	f6bf ae4c 	bge.w	80129e0 <__ieee754_rem_pio2+0x80>
 8012d48:	e9da 2100 	ldrd	r2, r1, [sl]
 8012d4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012d50:	e9ca 2300 	strd	r2, r3, [sl]
 8012d54:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8012d58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012d5c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8012d60:	e73f      	b.n	8012be2 <__ieee754_rem_pio2+0x282>
 8012d62:	bf00      	nop
 8012d64:	41700000 	.word	0x41700000
 8012d68:	08013f78 	.word	0x08013f78
 8012d6c:	00000000 	.word	0x00000000

08012d70 <atan>:
 8012d70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d74:	ec55 4b10 	vmov	r4, r5, d0
 8012d78:	4bc3      	ldr	r3, [pc, #780]	; (8013088 <atan+0x318>)
 8012d7a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012d7e:	429e      	cmp	r6, r3
 8012d80:	46ab      	mov	fp, r5
 8012d82:	dd18      	ble.n	8012db6 <atan+0x46>
 8012d84:	4bc1      	ldr	r3, [pc, #772]	; (801308c <atan+0x31c>)
 8012d86:	429e      	cmp	r6, r3
 8012d88:	dc01      	bgt.n	8012d8e <atan+0x1e>
 8012d8a:	d109      	bne.n	8012da0 <atan+0x30>
 8012d8c:	b144      	cbz	r4, 8012da0 <atan+0x30>
 8012d8e:	4622      	mov	r2, r4
 8012d90:	462b      	mov	r3, r5
 8012d92:	4620      	mov	r0, r4
 8012d94:	4629      	mov	r1, r5
 8012d96:	f7ed fa79 	bl	800028c <__adddf3>
 8012d9a:	4604      	mov	r4, r0
 8012d9c:	460d      	mov	r5, r1
 8012d9e:	e006      	b.n	8012dae <atan+0x3e>
 8012da0:	f1bb 0f00 	cmp.w	fp, #0
 8012da4:	f300 8131 	bgt.w	801300a <atan+0x29a>
 8012da8:	a59b      	add	r5, pc, #620	; (adr r5, 8013018 <atan+0x2a8>)
 8012daa:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012dae:	ec45 4b10 	vmov	d0, r4, r5
 8012db2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012db6:	4bb6      	ldr	r3, [pc, #728]	; (8013090 <atan+0x320>)
 8012db8:	429e      	cmp	r6, r3
 8012dba:	dc14      	bgt.n	8012de6 <atan+0x76>
 8012dbc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012dc0:	429e      	cmp	r6, r3
 8012dc2:	dc0d      	bgt.n	8012de0 <atan+0x70>
 8012dc4:	a396      	add	r3, pc, #600	; (adr r3, 8013020 <atan+0x2b0>)
 8012dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dca:	ee10 0a10 	vmov	r0, s0
 8012dce:	4629      	mov	r1, r5
 8012dd0:	f7ed fa5c 	bl	800028c <__adddf3>
 8012dd4:	4baf      	ldr	r3, [pc, #700]	; (8013094 <atan+0x324>)
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	f7ed fe9e 	bl	8000b18 <__aeabi_dcmpgt>
 8012ddc:	2800      	cmp	r0, #0
 8012dde:	d1e6      	bne.n	8012dae <atan+0x3e>
 8012de0:	f04f 3aff 	mov.w	sl, #4294967295
 8012de4:	e02b      	b.n	8012e3e <atan+0xce>
 8012de6:	f000 f963 	bl	80130b0 <fabs>
 8012dea:	4bab      	ldr	r3, [pc, #684]	; (8013098 <atan+0x328>)
 8012dec:	429e      	cmp	r6, r3
 8012dee:	ec55 4b10 	vmov	r4, r5, d0
 8012df2:	f300 80bf 	bgt.w	8012f74 <atan+0x204>
 8012df6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012dfa:	429e      	cmp	r6, r3
 8012dfc:	f300 80a0 	bgt.w	8012f40 <atan+0x1d0>
 8012e00:	ee10 2a10 	vmov	r2, s0
 8012e04:	ee10 0a10 	vmov	r0, s0
 8012e08:	462b      	mov	r3, r5
 8012e0a:	4629      	mov	r1, r5
 8012e0c:	f7ed fa3e 	bl	800028c <__adddf3>
 8012e10:	4ba0      	ldr	r3, [pc, #640]	; (8013094 <atan+0x324>)
 8012e12:	2200      	movs	r2, #0
 8012e14:	f7ed fa38 	bl	8000288 <__aeabi_dsub>
 8012e18:	2200      	movs	r2, #0
 8012e1a:	4606      	mov	r6, r0
 8012e1c:	460f      	mov	r7, r1
 8012e1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012e22:	4620      	mov	r0, r4
 8012e24:	4629      	mov	r1, r5
 8012e26:	f7ed fa31 	bl	800028c <__adddf3>
 8012e2a:	4602      	mov	r2, r0
 8012e2c:	460b      	mov	r3, r1
 8012e2e:	4630      	mov	r0, r6
 8012e30:	4639      	mov	r1, r7
 8012e32:	f7ed fd0b 	bl	800084c <__aeabi_ddiv>
 8012e36:	f04f 0a00 	mov.w	sl, #0
 8012e3a:	4604      	mov	r4, r0
 8012e3c:	460d      	mov	r5, r1
 8012e3e:	4622      	mov	r2, r4
 8012e40:	462b      	mov	r3, r5
 8012e42:	4620      	mov	r0, r4
 8012e44:	4629      	mov	r1, r5
 8012e46:	f7ed fbd7 	bl	80005f8 <__aeabi_dmul>
 8012e4a:	4602      	mov	r2, r0
 8012e4c:	460b      	mov	r3, r1
 8012e4e:	4680      	mov	r8, r0
 8012e50:	4689      	mov	r9, r1
 8012e52:	f7ed fbd1 	bl	80005f8 <__aeabi_dmul>
 8012e56:	a374      	add	r3, pc, #464	; (adr r3, 8013028 <atan+0x2b8>)
 8012e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e5c:	4606      	mov	r6, r0
 8012e5e:	460f      	mov	r7, r1
 8012e60:	f7ed fbca 	bl	80005f8 <__aeabi_dmul>
 8012e64:	a372      	add	r3, pc, #456	; (adr r3, 8013030 <atan+0x2c0>)
 8012e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e6a:	f7ed fa0f 	bl	800028c <__adddf3>
 8012e6e:	4632      	mov	r2, r6
 8012e70:	463b      	mov	r3, r7
 8012e72:	f7ed fbc1 	bl	80005f8 <__aeabi_dmul>
 8012e76:	a370      	add	r3, pc, #448	; (adr r3, 8013038 <atan+0x2c8>)
 8012e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e7c:	f7ed fa06 	bl	800028c <__adddf3>
 8012e80:	4632      	mov	r2, r6
 8012e82:	463b      	mov	r3, r7
 8012e84:	f7ed fbb8 	bl	80005f8 <__aeabi_dmul>
 8012e88:	a36d      	add	r3, pc, #436	; (adr r3, 8013040 <atan+0x2d0>)
 8012e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e8e:	f7ed f9fd 	bl	800028c <__adddf3>
 8012e92:	4632      	mov	r2, r6
 8012e94:	463b      	mov	r3, r7
 8012e96:	f7ed fbaf 	bl	80005f8 <__aeabi_dmul>
 8012e9a:	a36b      	add	r3, pc, #428	; (adr r3, 8013048 <atan+0x2d8>)
 8012e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ea0:	f7ed f9f4 	bl	800028c <__adddf3>
 8012ea4:	4632      	mov	r2, r6
 8012ea6:	463b      	mov	r3, r7
 8012ea8:	f7ed fba6 	bl	80005f8 <__aeabi_dmul>
 8012eac:	a368      	add	r3, pc, #416	; (adr r3, 8013050 <atan+0x2e0>)
 8012eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eb2:	f7ed f9eb 	bl	800028c <__adddf3>
 8012eb6:	4642      	mov	r2, r8
 8012eb8:	464b      	mov	r3, r9
 8012eba:	f7ed fb9d 	bl	80005f8 <__aeabi_dmul>
 8012ebe:	a366      	add	r3, pc, #408	; (adr r3, 8013058 <atan+0x2e8>)
 8012ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ec4:	4680      	mov	r8, r0
 8012ec6:	4689      	mov	r9, r1
 8012ec8:	4630      	mov	r0, r6
 8012eca:	4639      	mov	r1, r7
 8012ecc:	f7ed fb94 	bl	80005f8 <__aeabi_dmul>
 8012ed0:	a363      	add	r3, pc, #396	; (adr r3, 8013060 <atan+0x2f0>)
 8012ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ed6:	f7ed f9d7 	bl	8000288 <__aeabi_dsub>
 8012eda:	4632      	mov	r2, r6
 8012edc:	463b      	mov	r3, r7
 8012ede:	f7ed fb8b 	bl	80005f8 <__aeabi_dmul>
 8012ee2:	a361      	add	r3, pc, #388	; (adr r3, 8013068 <atan+0x2f8>)
 8012ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee8:	f7ed f9ce 	bl	8000288 <__aeabi_dsub>
 8012eec:	4632      	mov	r2, r6
 8012eee:	463b      	mov	r3, r7
 8012ef0:	f7ed fb82 	bl	80005f8 <__aeabi_dmul>
 8012ef4:	a35e      	add	r3, pc, #376	; (adr r3, 8013070 <atan+0x300>)
 8012ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012efa:	f7ed f9c5 	bl	8000288 <__aeabi_dsub>
 8012efe:	4632      	mov	r2, r6
 8012f00:	463b      	mov	r3, r7
 8012f02:	f7ed fb79 	bl	80005f8 <__aeabi_dmul>
 8012f06:	a35c      	add	r3, pc, #368	; (adr r3, 8013078 <atan+0x308>)
 8012f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f0c:	f7ed f9bc 	bl	8000288 <__aeabi_dsub>
 8012f10:	4632      	mov	r2, r6
 8012f12:	463b      	mov	r3, r7
 8012f14:	f7ed fb70 	bl	80005f8 <__aeabi_dmul>
 8012f18:	4602      	mov	r2, r0
 8012f1a:	460b      	mov	r3, r1
 8012f1c:	4640      	mov	r0, r8
 8012f1e:	4649      	mov	r1, r9
 8012f20:	f7ed f9b4 	bl	800028c <__adddf3>
 8012f24:	4622      	mov	r2, r4
 8012f26:	462b      	mov	r3, r5
 8012f28:	f7ed fb66 	bl	80005f8 <__aeabi_dmul>
 8012f2c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8012f30:	4602      	mov	r2, r0
 8012f32:	460b      	mov	r3, r1
 8012f34:	d14b      	bne.n	8012fce <atan+0x25e>
 8012f36:	4620      	mov	r0, r4
 8012f38:	4629      	mov	r1, r5
 8012f3a:	f7ed f9a5 	bl	8000288 <__aeabi_dsub>
 8012f3e:	e72c      	b.n	8012d9a <atan+0x2a>
 8012f40:	ee10 0a10 	vmov	r0, s0
 8012f44:	4b53      	ldr	r3, [pc, #332]	; (8013094 <atan+0x324>)
 8012f46:	2200      	movs	r2, #0
 8012f48:	4629      	mov	r1, r5
 8012f4a:	f7ed f99d 	bl	8000288 <__aeabi_dsub>
 8012f4e:	4b51      	ldr	r3, [pc, #324]	; (8013094 <atan+0x324>)
 8012f50:	4606      	mov	r6, r0
 8012f52:	460f      	mov	r7, r1
 8012f54:	2200      	movs	r2, #0
 8012f56:	4620      	mov	r0, r4
 8012f58:	4629      	mov	r1, r5
 8012f5a:	f7ed f997 	bl	800028c <__adddf3>
 8012f5e:	4602      	mov	r2, r0
 8012f60:	460b      	mov	r3, r1
 8012f62:	4630      	mov	r0, r6
 8012f64:	4639      	mov	r1, r7
 8012f66:	f7ed fc71 	bl	800084c <__aeabi_ddiv>
 8012f6a:	f04f 0a01 	mov.w	sl, #1
 8012f6e:	4604      	mov	r4, r0
 8012f70:	460d      	mov	r5, r1
 8012f72:	e764      	b.n	8012e3e <atan+0xce>
 8012f74:	4b49      	ldr	r3, [pc, #292]	; (801309c <atan+0x32c>)
 8012f76:	429e      	cmp	r6, r3
 8012f78:	da1d      	bge.n	8012fb6 <atan+0x246>
 8012f7a:	ee10 0a10 	vmov	r0, s0
 8012f7e:	4b48      	ldr	r3, [pc, #288]	; (80130a0 <atan+0x330>)
 8012f80:	2200      	movs	r2, #0
 8012f82:	4629      	mov	r1, r5
 8012f84:	f7ed f980 	bl	8000288 <__aeabi_dsub>
 8012f88:	4b45      	ldr	r3, [pc, #276]	; (80130a0 <atan+0x330>)
 8012f8a:	4606      	mov	r6, r0
 8012f8c:	460f      	mov	r7, r1
 8012f8e:	2200      	movs	r2, #0
 8012f90:	4620      	mov	r0, r4
 8012f92:	4629      	mov	r1, r5
 8012f94:	f7ed fb30 	bl	80005f8 <__aeabi_dmul>
 8012f98:	4b3e      	ldr	r3, [pc, #248]	; (8013094 <atan+0x324>)
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	f7ed f976 	bl	800028c <__adddf3>
 8012fa0:	4602      	mov	r2, r0
 8012fa2:	460b      	mov	r3, r1
 8012fa4:	4630      	mov	r0, r6
 8012fa6:	4639      	mov	r1, r7
 8012fa8:	f7ed fc50 	bl	800084c <__aeabi_ddiv>
 8012fac:	f04f 0a02 	mov.w	sl, #2
 8012fb0:	4604      	mov	r4, r0
 8012fb2:	460d      	mov	r5, r1
 8012fb4:	e743      	b.n	8012e3e <atan+0xce>
 8012fb6:	462b      	mov	r3, r5
 8012fb8:	ee10 2a10 	vmov	r2, s0
 8012fbc:	4939      	ldr	r1, [pc, #228]	; (80130a4 <atan+0x334>)
 8012fbe:	2000      	movs	r0, #0
 8012fc0:	f7ed fc44 	bl	800084c <__aeabi_ddiv>
 8012fc4:	f04f 0a03 	mov.w	sl, #3
 8012fc8:	4604      	mov	r4, r0
 8012fca:	460d      	mov	r5, r1
 8012fcc:	e737      	b.n	8012e3e <atan+0xce>
 8012fce:	4b36      	ldr	r3, [pc, #216]	; (80130a8 <atan+0x338>)
 8012fd0:	4e36      	ldr	r6, [pc, #216]	; (80130ac <atan+0x33c>)
 8012fd2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fda:	f7ed f955 	bl	8000288 <__aeabi_dsub>
 8012fde:	4622      	mov	r2, r4
 8012fe0:	462b      	mov	r3, r5
 8012fe2:	f7ed f951 	bl	8000288 <__aeabi_dsub>
 8012fe6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8012fea:	4602      	mov	r2, r0
 8012fec:	460b      	mov	r3, r1
 8012fee:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012ff2:	f7ed f949 	bl	8000288 <__aeabi_dsub>
 8012ff6:	f1bb 0f00 	cmp.w	fp, #0
 8012ffa:	4604      	mov	r4, r0
 8012ffc:	460d      	mov	r5, r1
 8012ffe:	f6bf aed6 	bge.w	8012dae <atan+0x3e>
 8013002:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013006:	461d      	mov	r5, r3
 8013008:	e6d1      	b.n	8012dae <atan+0x3e>
 801300a:	a51d      	add	r5, pc, #116	; (adr r5, 8013080 <atan+0x310>)
 801300c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013010:	e6cd      	b.n	8012dae <atan+0x3e>
 8013012:	bf00      	nop
 8013014:	f3af 8000 	nop.w
 8013018:	54442d18 	.word	0x54442d18
 801301c:	bff921fb 	.word	0xbff921fb
 8013020:	8800759c 	.word	0x8800759c
 8013024:	7e37e43c 	.word	0x7e37e43c
 8013028:	e322da11 	.word	0xe322da11
 801302c:	3f90ad3a 	.word	0x3f90ad3a
 8013030:	24760deb 	.word	0x24760deb
 8013034:	3fa97b4b 	.word	0x3fa97b4b
 8013038:	a0d03d51 	.word	0xa0d03d51
 801303c:	3fb10d66 	.word	0x3fb10d66
 8013040:	c54c206e 	.word	0xc54c206e
 8013044:	3fb745cd 	.word	0x3fb745cd
 8013048:	920083ff 	.word	0x920083ff
 801304c:	3fc24924 	.word	0x3fc24924
 8013050:	5555550d 	.word	0x5555550d
 8013054:	3fd55555 	.word	0x3fd55555
 8013058:	2c6a6c2f 	.word	0x2c6a6c2f
 801305c:	bfa2b444 	.word	0xbfa2b444
 8013060:	52defd9a 	.word	0x52defd9a
 8013064:	3fadde2d 	.word	0x3fadde2d
 8013068:	af749a6d 	.word	0xaf749a6d
 801306c:	3fb3b0f2 	.word	0x3fb3b0f2
 8013070:	fe231671 	.word	0xfe231671
 8013074:	3fbc71c6 	.word	0x3fbc71c6
 8013078:	9998ebc4 	.word	0x9998ebc4
 801307c:	3fc99999 	.word	0x3fc99999
 8013080:	54442d18 	.word	0x54442d18
 8013084:	3ff921fb 	.word	0x3ff921fb
 8013088:	440fffff 	.word	0x440fffff
 801308c:	7ff00000 	.word	0x7ff00000
 8013090:	3fdbffff 	.word	0x3fdbffff
 8013094:	3ff00000 	.word	0x3ff00000
 8013098:	3ff2ffff 	.word	0x3ff2ffff
 801309c:	40038000 	.word	0x40038000
 80130a0:	3ff80000 	.word	0x3ff80000
 80130a4:	bff00000 	.word	0xbff00000
 80130a8:	080140a0 	.word	0x080140a0
 80130ac:	08014080 	.word	0x08014080

080130b0 <fabs>:
 80130b0:	ec51 0b10 	vmov	r0, r1, d0
 80130b4:	ee10 2a10 	vmov	r2, s0
 80130b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80130bc:	ec43 2b10 	vmov	d0, r2, r3
 80130c0:	4770      	bx	lr
 80130c2:	0000      	movs	r0, r0
 80130c4:	0000      	movs	r0, r0
	...

080130c8 <scalbn>:
 80130c8:	b570      	push	{r4, r5, r6, lr}
 80130ca:	ec55 4b10 	vmov	r4, r5, d0
 80130ce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80130d2:	4606      	mov	r6, r0
 80130d4:	462b      	mov	r3, r5
 80130d6:	b999      	cbnz	r1, 8013100 <scalbn+0x38>
 80130d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80130dc:	4323      	orrs	r3, r4
 80130de:	d03f      	beq.n	8013160 <scalbn+0x98>
 80130e0:	4b35      	ldr	r3, [pc, #212]	; (80131b8 <scalbn+0xf0>)
 80130e2:	4629      	mov	r1, r5
 80130e4:	ee10 0a10 	vmov	r0, s0
 80130e8:	2200      	movs	r2, #0
 80130ea:	f7ed fa85 	bl	80005f8 <__aeabi_dmul>
 80130ee:	4b33      	ldr	r3, [pc, #204]	; (80131bc <scalbn+0xf4>)
 80130f0:	429e      	cmp	r6, r3
 80130f2:	4604      	mov	r4, r0
 80130f4:	460d      	mov	r5, r1
 80130f6:	da10      	bge.n	801311a <scalbn+0x52>
 80130f8:	a327      	add	r3, pc, #156	; (adr r3, 8013198 <scalbn+0xd0>)
 80130fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130fe:	e01f      	b.n	8013140 <scalbn+0x78>
 8013100:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8013104:	4291      	cmp	r1, r2
 8013106:	d10c      	bne.n	8013122 <scalbn+0x5a>
 8013108:	ee10 2a10 	vmov	r2, s0
 801310c:	4620      	mov	r0, r4
 801310e:	4629      	mov	r1, r5
 8013110:	f7ed f8bc 	bl	800028c <__adddf3>
 8013114:	4604      	mov	r4, r0
 8013116:	460d      	mov	r5, r1
 8013118:	e022      	b.n	8013160 <scalbn+0x98>
 801311a:	460b      	mov	r3, r1
 801311c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013120:	3936      	subs	r1, #54	; 0x36
 8013122:	f24c 3250 	movw	r2, #50000	; 0xc350
 8013126:	4296      	cmp	r6, r2
 8013128:	dd0d      	ble.n	8013146 <scalbn+0x7e>
 801312a:	2d00      	cmp	r5, #0
 801312c:	a11c      	add	r1, pc, #112	; (adr r1, 80131a0 <scalbn+0xd8>)
 801312e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013132:	da02      	bge.n	801313a <scalbn+0x72>
 8013134:	a11c      	add	r1, pc, #112	; (adr r1, 80131a8 <scalbn+0xe0>)
 8013136:	e9d1 0100 	ldrd	r0, r1, [r1]
 801313a:	a319      	add	r3, pc, #100	; (adr r3, 80131a0 <scalbn+0xd8>)
 801313c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013140:	f7ed fa5a 	bl	80005f8 <__aeabi_dmul>
 8013144:	e7e6      	b.n	8013114 <scalbn+0x4c>
 8013146:	1872      	adds	r2, r6, r1
 8013148:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801314c:	428a      	cmp	r2, r1
 801314e:	dcec      	bgt.n	801312a <scalbn+0x62>
 8013150:	2a00      	cmp	r2, #0
 8013152:	dd08      	ble.n	8013166 <scalbn+0x9e>
 8013154:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013158:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801315c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013160:	ec45 4b10 	vmov	d0, r4, r5
 8013164:	bd70      	pop	{r4, r5, r6, pc}
 8013166:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801316a:	da08      	bge.n	801317e <scalbn+0xb6>
 801316c:	2d00      	cmp	r5, #0
 801316e:	a10a      	add	r1, pc, #40	; (adr r1, 8013198 <scalbn+0xd0>)
 8013170:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013174:	dac0      	bge.n	80130f8 <scalbn+0x30>
 8013176:	a10e      	add	r1, pc, #56	; (adr r1, 80131b0 <scalbn+0xe8>)
 8013178:	e9d1 0100 	ldrd	r0, r1, [r1]
 801317c:	e7bc      	b.n	80130f8 <scalbn+0x30>
 801317e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013182:	3236      	adds	r2, #54	; 0x36
 8013184:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013188:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801318c:	4620      	mov	r0, r4
 801318e:	4b0c      	ldr	r3, [pc, #48]	; (80131c0 <scalbn+0xf8>)
 8013190:	2200      	movs	r2, #0
 8013192:	e7d5      	b.n	8013140 <scalbn+0x78>
 8013194:	f3af 8000 	nop.w
 8013198:	c2f8f359 	.word	0xc2f8f359
 801319c:	01a56e1f 	.word	0x01a56e1f
 80131a0:	8800759c 	.word	0x8800759c
 80131a4:	7e37e43c 	.word	0x7e37e43c
 80131a8:	8800759c 	.word	0x8800759c
 80131ac:	fe37e43c 	.word	0xfe37e43c
 80131b0:	c2f8f359 	.word	0xc2f8f359
 80131b4:	81a56e1f 	.word	0x81a56e1f
 80131b8:	43500000 	.word	0x43500000
 80131bc:	ffff3cb0 	.word	0xffff3cb0
 80131c0:	3c900000 	.word	0x3c900000

080131c4 <with_errno>:
 80131c4:	b570      	push	{r4, r5, r6, lr}
 80131c6:	4604      	mov	r4, r0
 80131c8:	460d      	mov	r5, r1
 80131ca:	4616      	mov	r6, r2
 80131cc:	f7fb fbda 	bl	800e984 <__errno>
 80131d0:	4629      	mov	r1, r5
 80131d2:	6006      	str	r6, [r0, #0]
 80131d4:	4620      	mov	r0, r4
 80131d6:	bd70      	pop	{r4, r5, r6, pc}

080131d8 <xflow>:
 80131d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80131da:	4614      	mov	r4, r2
 80131dc:	461d      	mov	r5, r3
 80131de:	b108      	cbz	r0, 80131e4 <xflow+0xc>
 80131e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80131e4:	e9cd 2300 	strd	r2, r3, [sp]
 80131e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80131ec:	4620      	mov	r0, r4
 80131ee:	4629      	mov	r1, r5
 80131f0:	f7ed fa02 	bl	80005f8 <__aeabi_dmul>
 80131f4:	2222      	movs	r2, #34	; 0x22
 80131f6:	b003      	add	sp, #12
 80131f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80131fc:	f7ff bfe2 	b.w	80131c4 <with_errno>

08013200 <__math_uflow>:
 8013200:	b508      	push	{r3, lr}
 8013202:	2200      	movs	r2, #0
 8013204:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013208:	f7ff ffe6 	bl	80131d8 <xflow>
 801320c:	ec41 0b10 	vmov	d0, r0, r1
 8013210:	bd08      	pop	{r3, pc}

08013212 <__math_oflow>:
 8013212:	b508      	push	{r3, lr}
 8013214:	2200      	movs	r2, #0
 8013216:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801321a:	f7ff ffdd 	bl	80131d8 <xflow>
 801321e:	ec41 0b10 	vmov	d0, r0, r1
 8013222:	bd08      	pop	{r3, pc}
 8013224:	0000      	movs	r0, r0
	...

08013228 <__kernel_rem_pio2>:
 8013228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801322c:	ed2d 8b02 	vpush	{d8}
 8013230:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8013234:	f112 0f14 	cmn.w	r2, #20
 8013238:	9306      	str	r3, [sp, #24]
 801323a:	9104      	str	r1, [sp, #16]
 801323c:	4bc2      	ldr	r3, [pc, #776]	; (8013548 <__kernel_rem_pio2+0x320>)
 801323e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8013240:	9009      	str	r0, [sp, #36]	; 0x24
 8013242:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013246:	9300      	str	r3, [sp, #0]
 8013248:	9b06      	ldr	r3, [sp, #24]
 801324a:	f103 33ff 	add.w	r3, r3, #4294967295
 801324e:	bfa8      	it	ge
 8013250:	1ed4      	subge	r4, r2, #3
 8013252:	9305      	str	r3, [sp, #20]
 8013254:	bfb2      	itee	lt
 8013256:	2400      	movlt	r4, #0
 8013258:	2318      	movge	r3, #24
 801325a:	fb94 f4f3 	sdivge	r4, r4, r3
 801325e:	f06f 0317 	mvn.w	r3, #23
 8013262:	fb04 3303 	mla	r3, r4, r3, r3
 8013266:	eb03 0a02 	add.w	sl, r3, r2
 801326a:	9b00      	ldr	r3, [sp, #0]
 801326c:	9a05      	ldr	r2, [sp, #20]
 801326e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8013538 <__kernel_rem_pio2+0x310>
 8013272:	eb03 0802 	add.w	r8, r3, r2
 8013276:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8013278:	1aa7      	subs	r7, r4, r2
 801327a:	ae20      	add	r6, sp, #128	; 0x80
 801327c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013280:	2500      	movs	r5, #0
 8013282:	4545      	cmp	r5, r8
 8013284:	dd13      	ble.n	80132ae <__kernel_rem_pio2+0x86>
 8013286:	9b06      	ldr	r3, [sp, #24]
 8013288:	aa20      	add	r2, sp, #128	; 0x80
 801328a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801328e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8013292:	f04f 0800 	mov.w	r8, #0
 8013296:	9b00      	ldr	r3, [sp, #0]
 8013298:	4598      	cmp	r8, r3
 801329a:	dc31      	bgt.n	8013300 <__kernel_rem_pio2+0xd8>
 801329c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8013538 <__kernel_rem_pio2+0x310>
 80132a0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80132a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80132a8:	462f      	mov	r7, r5
 80132aa:	2600      	movs	r6, #0
 80132ac:	e01b      	b.n	80132e6 <__kernel_rem_pio2+0xbe>
 80132ae:	42ef      	cmn	r7, r5
 80132b0:	d407      	bmi.n	80132c2 <__kernel_rem_pio2+0x9a>
 80132b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80132b6:	f7ed f935 	bl	8000524 <__aeabi_i2d>
 80132ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 80132be:	3501      	adds	r5, #1
 80132c0:	e7df      	b.n	8013282 <__kernel_rem_pio2+0x5a>
 80132c2:	ec51 0b18 	vmov	r0, r1, d8
 80132c6:	e7f8      	b.n	80132ba <__kernel_rem_pio2+0x92>
 80132c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80132cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80132d0:	f7ed f992 	bl	80005f8 <__aeabi_dmul>
 80132d4:	4602      	mov	r2, r0
 80132d6:	460b      	mov	r3, r1
 80132d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80132dc:	f7ec ffd6 	bl	800028c <__adddf3>
 80132e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132e4:	3601      	adds	r6, #1
 80132e6:	9b05      	ldr	r3, [sp, #20]
 80132e8:	429e      	cmp	r6, r3
 80132ea:	f1a7 0708 	sub.w	r7, r7, #8
 80132ee:	ddeb      	ble.n	80132c8 <__kernel_rem_pio2+0xa0>
 80132f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80132f4:	f108 0801 	add.w	r8, r8, #1
 80132f8:	ecab 7b02 	vstmia	fp!, {d7}
 80132fc:	3508      	adds	r5, #8
 80132fe:	e7ca      	b.n	8013296 <__kernel_rem_pio2+0x6e>
 8013300:	9b00      	ldr	r3, [sp, #0]
 8013302:	aa0c      	add	r2, sp, #48	; 0x30
 8013304:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013308:	930b      	str	r3, [sp, #44]	; 0x2c
 801330a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801330c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013310:	9c00      	ldr	r4, [sp, #0]
 8013312:	930a      	str	r3, [sp, #40]	; 0x28
 8013314:	00e3      	lsls	r3, r4, #3
 8013316:	9308      	str	r3, [sp, #32]
 8013318:	ab98      	add	r3, sp, #608	; 0x260
 801331a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801331e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8013322:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8013326:	ab70      	add	r3, sp, #448	; 0x1c0
 8013328:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801332c:	46c3      	mov	fp, r8
 801332e:	46a1      	mov	r9, r4
 8013330:	f1b9 0f00 	cmp.w	r9, #0
 8013334:	f1a5 0508 	sub.w	r5, r5, #8
 8013338:	dc77      	bgt.n	801342a <__kernel_rem_pio2+0x202>
 801333a:	ec47 6b10 	vmov	d0, r6, r7
 801333e:	4650      	mov	r0, sl
 8013340:	f7ff fec2 	bl	80130c8 <scalbn>
 8013344:	ec57 6b10 	vmov	r6, r7, d0
 8013348:	2200      	movs	r2, #0
 801334a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801334e:	ee10 0a10 	vmov	r0, s0
 8013352:	4639      	mov	r1, r7
 8013354:	f7ed f950 	bl	80005f8 <__aeabi_dmul>
 8013358:	ec41 0b10 	vmov	d0, r0, r1
 801335c:	f000 fab4 	bl	80138c8 <floor>
 8013360:	4b7a      	ldr	r3, [pc, #488]	; (801354c <__kernel_rem_pio2+0x324>)
 8013362:	ec51 0b10 	vmov	r0, r1, d0
 8013366:	2200      	movs	r2, #0
 8013368:	f7ed f946 	bl	80005f8 <__aeabi_dmul>
 801336c:	4602      	mov	r2, r0
 801336e:	460b      	mov	r3, r1
 8013370:	4630      	mov	r0, r6
 8013372:	4639      	mov	r1, r7
 8013374:	f7ec ff88 	bl	8000288 <__aeabi_dsub>
 8013378:	460f      	mov	r7, r1
 801337a:	4606      	mov	r6, r0
 801337c:	f7ed fbec 	bl	8000b58 <__aeabi_d2iz>
 8013380:	9002      	str	r0, [sp, #8]
 8013382:	f7ed f8cf 	bl	8000524 <__aeabi_i2d>
 8013386:	4602      	mov	r2, r0
 8013388:	460b      	mov	r3, r1
 801338a:	4630      	mov	r0, r6
 801338c:	4639      	mov	r1, r7
 801338e:	f7ec ff7b 	bl	8000288 <__aeabi_dsub>
 8013392:	f1ba 0f00 	cmp.w	sl, #0
 8013396:	4606      	mov	r6, r0
 8013398:	460f      	mov	r7, r1
 801339a:	dd6d      	ble.n	8013478 <__kernel_rem_pio2+0x250>
 801339c:	1e61      	subs	r1, r4, #1
 801339e:	ab0c      	add	r3, sp, #48	; 0x30
 80133a0:	9d02      	ldr	r5, [sp, #8]
 80133a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80133a6:	f1ca 0018 	rsb	r0, sl, #24
 80133aa:	fa43 f200 	asr.w	r2, r3, r0
 80133ae:	4415      	add	r5, r2
 80133b0:	4082      	lsls	r2, r0
 80133b2:	1a9b      	subs	r3, r3, r2
 80133b4:	aa0c      	add	r2, sp, #48	; 0x30
 80133b6:	9502      	str	r5, [sp, #8]
 80133b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80133bc:	f1ca 0217 	rsb	r2, sl, #23
 80133c0:	fa43 fb02 	asr.w	fp, r3, r2
 80133c4:	f1bb 0f00 	cmp.w	fp, #0
 80133c8:	dd65      	ble.n	8013496 <__kernel_rem_pio2+0x26e>
 80133ca:	9b02      	ldr	r3, [sp, #8]
 80133cc:	2200      	movs	r2, #0
 80133ce:	3301      	adds	r3, #1
 80133d0:	9302      	str	r3, [sp, #8]
 80133d2:	4615      	mov	r5, r2
 80133d4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80133d8:	4294      	cmp	r4, r2
 80133da:	f300 809f 	bgt.w	801351c <__kernel_rem_pio2+0x2f4>
 80133de:	f1ba 0f00 	cmp.w	sl, #0
 80133e2:	dd07      	ble.n	80133f4 <__kernel_rem_pio2+0x1cc>
 80133e4:	f1ba 0f01 	cmp.w	sl, #1
 80133e8:	f000 80c1 	beq.w	801356e <__kernel_rem_pio2+0x346>
 80133ec:	f1ba 0f02 	cmp.w	sl, #2
 80133f0:	f000 80c7 	beq.w	8013582 <__kernel_rem_pio2+0x35a>
 80133f4:	f1bb 0f02 	cmp.w	fp, #2
 80133f8:	d14d      	bne.n	8013496 <__kernel_rem_pio2+0x26e>
 80133fa:	4632      	mov	r2, r6
 80133fc:	463b      	mov	r3, r7
 80133fe:	4954      	ldr	r1, [pc, #336]	; (8013550 <__kernel_rem_pio2+0x328>)
 8013400:	2000      	movs	r0, #0
 8013402:	f7ec ff41 	bl	8000288 <__aeabi_dsub>
 8013406:	4606      	mov	r6, r0
 8013408:	460f      	mov	r7, r1
 801340a:	2d00      	cmp	r5, #0
 801340c:	d043      	beq.n	8013496 <__kernel_rem_pio2+0x26e>
 801340e:	4650      	mov	r0, sl
 8013410:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8013540 <__kernel_rem_pio2+0x318>
 8013414:	f7ff fe58 	bl	80130c8 <scalbn>
 8013418:	4630      	mov	r0, r6
 801341a:	4639      	mov	r1, r7
 801341c:	ec53 2b10 	vmov	r2, r3, d0
 8013420:	f7ec ff32 	bl	8000288 <__aeabi_dsub>
 8013424:	4606      	mov	r6, r0
 8013426:	460f      	mov	r7, r1
 8013428:	e035      	b.n	8013496 <__kernel_rem_pio2+0x26e>
 801342a:	4b4a      	ldr	r3, [pc, #296]	; (8013554 <__kernel_rem_pio2+0x32c>)
 801342c:	2200      	movs	r2, #0
 801342e:	4630      	mov	r0, r6
 8013430:	4639      	mov	r1, r7
 8013432:	f7ed f8e1 	bl	80005f8 <__aeabi_dmul>
 8013436:	f7ed fb8f 	bl	8000b58 <__aeabi_d2iz>
 801343a:	f7ed f873 	bl	8000524 <__aeabi_i2d>
 801343e:	4602      	mov	r2, r0
 8013440:	460b      	mov	r3, r1
 8013442:	ec43 2b18 	vmov	d8, r2, r3
 8013446:	4b44      	ldr	r3, [pc, #272]	; (8013558 <__kernel_rem_pio2+0x330>)
 8013448:	2200      	movs	r2, #0
 801344a:	f7ed f8d5 	bl	80005f8 <__aeabi_dmul>
 801344e:	4602      	mov	r2, r0
 8013450:	460b      	mov	r3, r1
 8013452:	4630      	mov	r0, r6
 8013454:	4639      	mov	r1, r7
 8013456:	f7ec ff17 	bl	8000288 <__aeabi_dsub>
 801345a:	f7ed fb7d 	bl	8000b58 <__aeabi_d2iz>
 801345e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013462:	f84b 0b04 	str.w	r0, [fp], #4
 8013466:	ec51 0b18 	vmov	r0, r1, d8
 801346a:	f7ec ff0f 	bl	800028c <__adddf3>
 801346e:	f109 39ff 	add.w	r9, r9, #4294967295
 8013472:	4606      	mov	r6, r0
 8013474:	460f      	mov	r7, r1
 8013476:	e75b      	b.n	8013330 <__kernel_rem_pio2+0x108>
 8013478:	d106      	bne.n	8013488 <__kernel_rem_pio2+0x260>
 801347a:	1e63      	subs	r3, r4, #1
 801347c:	aa0c      	add	r2, sp, #48	; 0x30
 801347e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013482:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8013486:	e79d      	b.n	80133c4 <__kernel_rem_pio2+0x19c>
 8013488:	4b34      	ldr	r3, [pc, #208]	; (801355c <__kernel_rem_pio2+0x334>)
 801348a:	2200      	movs	r2, #0
 801348c:	f7ed fb3a 	bl	8000b04 <__aeabi_dcmpge>
 8013490:	2800      	cmp	r0, #0
 8013492:	d140      	bne.n	8013516 <__kernel_rem_pio2+0x2ee>
 8013494:	4683      	mov	fp, r0
 8013496:	2200      	movs	r2, #0
 8013498:	2300      	movs	r3, #0
 801349a:	4630      	mov	r0, r6
 801349c:	4639      	mov	r1, r7
 801349e:	f7ed fb13 	bl	8000ac8 <__aeabi_dcmpeq>
 80134a2:	2800      	cmp	r0, #0
 80134a4:	f000 80c1 	beq.w	801362a <__kernel_rem_pio2+0x402>
 80134a8:	1e65      	subs	r5, r4, #1
 80134aa:	462b      	mov	r3, r5
 80134ac:	2200      	movs	r2, #0
 80134ae:	9900      	ldr	r1, [sp, #0]
 80134b0:	428b      	cmp	r3, r1
 80134b2:	da6d      	bge.n	8013590 <__kernel_rem_pio2+0x368>
 80134b4:	2a00      	cmp	r2, #0
 80134b6:	f000 808a 	beq.w	80135ce <__kernel_rem_pio2+0x3a6>
 80134ba:	ab0c      	add	r3, sp, #48	; 0x30
 80134bc:	f1aa 0a18 	sub.w	sl, sl, #24
 80134c0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	f000 80ae 	beq.w	8013626 <__kernel_rem_pio2+0x3fe>
 80134ca:	4650      	mov	r0, sl
 80134cc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8013540 <__kernel_rem_pio2+0x318>
 80134d0:	f7ff fdfa 	bl	80130c8 <scalbn>
 80134d4:	1c6b      	adds	r3, r5, #1
 80134d6:	00da      	lsls	r2, r3, #3
 80134d8:	9205      	str	r2, [sp, #20]
 80134da:	ec57 6b10 	vmov	r6, r7, d0
 80134de:	aa70      	add	r2, sp, #448	; 0x1c0
 80134e0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8013554 <__kernel_rem_pio2+0x32c>
 80134e4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80134e8:	462c      	mov	r4, r5
 80134ea:	f04f 0800 	mov.w	r8, #0
 80134ee:	2c00      	cmp	r4, #0
 80134f0:	f280 80d4 	bge.w	801369c <__kernel_rem_pio2+0x474>
 80134f4:	462c      	mov	r4, r5
 80134f6:	2c00      	cmp	r4, #0
 80134f8:	f2c0 8102 	blt.w	8013700 <__kernel_rem_pio2+0x4d8>
 80134fc:	4b18      	ldr	r3, [pc, #96]	; (8013560 <__kernel_rem_pio2+0x338>)
 80134fe:	461e      	mov	r6, r3
 8013500:	ab70      	add	r3, sp, #448	; 0x1c0
 8013502:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8013506:	1b2b      	subs	r3, r5, r4
 8013508:	f04f 0900 	mov.w	r9, #0
 801350c:	f04f 0a00 	mov.w	sl, #0
 8013510:	2700      	movs	r7, #0
 8013512:	9306      	str	r3, [sp, #24]
 8013514:	e0e6      	b.n	80136e4 <__kernel_rem_pio2+0x4bc>
 8013516:	f04f 0b02 	mov.w	fp, #2
 801351a:	e756      	b.n	80133ca <__kernel_rem_pio2+0x1a2>
 801351c:	f8d8 3000 	ldr.w	r3, [r8]
 8013520:	bb05      	cbnz	r5, 8013564 <__kernel_rem_pio2+0x33c>
 8013522:	b123      	cbz	r3, 801352e <__kernel_rem_pio2+0x306>
 8013524:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8013528:	f8c8 3000 	str.w	r3, [r8]
 801352c:	2301      	movs	r3, #1
 801352e:	3201      	adds	r2, #1
 8013530:	f108 0804 	add.w	r8, r8, #4
 8013534:	461d      	mov	r5, r3
 8013536:	e74f      	b.n	80133d8 <__kernel_rem_pio2+0x1b0>
	...
 8013544:	3ff00000 	.word	0x3ff00000
 8013548:	08014100 	.word	0x08014100
 801354c:	40200000 	.word	0x40200000
 8013550:	3ff00000 	.word	0x3ff00000
 8013554:	3e700000 	.word	0x3e700000
 8013558:	41700000 	.word	0x41700000
 801355c:	3fe00000 	.word	0x3fe00000
 8013560:	080140c0 	.word	0x080140c0
 8013564:	1acb      	subs	r3, r1, r3
 8013566:	f8c8 3000 	str.w	r3, [r8]
 801356a:	462b      	mov	r3, r5
 801356c:	e7df      	b.n	801352e <__kernel_rem_pio2+0x306>
 801356e:	1e62      	subs	r2, r4, #1
 8013570:	ab0c      	add	r3, sp, #48	; 0x30
 8013572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013576:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801357a:	a90c      	add	r1, sp, #48	; 0x30
 801357c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013580:	e738      	b.n	80133f4 <__kernel_rem_pio2+0x1cc>
 8013582:	1e62      	subs	r2, r4, #1
 8013584:	ab0c      	add	r3, sp, #48	; 0x30
 8013586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801358a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801358e:	e7f4      	b.n	801357a <__kernel_rem_pio2+0x352>
 8013590:	a90c      	add	r1, sp, #48	; 0x30
 8013592:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013596:	3b01      	subs	r3, #1
 8013598:	430a      	orrs	r2, r1
 801359a:	e788      	b.n	80134ae <__kernel_rem_pio2+0x286>
 801359c:	3301      	adds	r3, #1
 801359e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80135a2:	2900      	cmp	r1, #0
 80135a4:	d0fa      	beq.n	801359c <__kernel_rem_pio2+0x374>
 80135a6:	9a08      	ldr	r2, [sp, #32]
 80135a8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80135ac:	446a      	add	r2, sp
 80135ae:	3a98      	subs	r2, #152	; 0x98
 80135b0:	9208      	str	r2, [sp, #32]
 80135b2:	9a06      	ldr	r2, [sp, #24]
 80135b4:	a920      	add	r1, sp, #128	; 0x80
 80135b6:	18a2      	adds	r2, r4, r2
 80135b8:	18e3      	adds	r3, r4, r3
 80135ba:	f104 0801 	add.w	r8, r4, #1
 80135be:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80135c2:	9302      	str	r3, [sp, #8]
 80135c4:	9b02      	ldr	r3, [sp, #8]
 80135c6:	4543      	cmp	r3, r8
 80135c8:	da04      	bge.n	80135d4 <__kernel_rem_pio2+0x3ac>
 80135ca:	461c      	mov	r4, r3
 80135cc:	e6a2      	b.n	8013314 <__kernel_rem_pio2+0xec>
 80135ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80135d0:	2301      	movs	r3, #1
 80135d2:	e7e4      	b.n	801359e <__kernel_rem_pio2+0x376>
 80135d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135d6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80135da:	f7ec ffa3 	bl	8000524 <__aeabi_i2d>
 80135de:	e8e5 0102 	strd	r0, r1, [r5], #8
 80135e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135e4:	46ab      	mov	fp, r5
 80135e6:	461c      	mov	r4, r3
 80135e8:	f04f 0900 	mov.w	r9, #0
 80135ec:	2600      	movs	r6, #0
 80135ee:	2700      	movs	r7, #0
 80135f0:	9b05      	ldr	r3, [sp, #20]
 80135f2:	4599      	cmp	r9, r3
 80135f4:	dd06      	ble.n	8013604 <__kernel_rem_pio2+0x3dc>
 80135f6:	9b08      	ldr	r3, [sp, #32]
 80135f8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80135fc:	f108 0801 	add.w	r8, r8, #1
 8013600:	9308      	str	r3, [sp, #32]
 8013602:	e7df      	b.n	80135c4 <__kernel_rem_pio2+0x39c>
 8013604:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8013608:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801360c:	f7ec fff4 	bl	80005f8 <__aeabi_dmul>
 8013610:	4602      	mov	r2, r0
 8013612:	460b      	mov	r3, r1
 8013614:	4630      	mov	r0, r6
 8013616:	4639      	mov	r1, r7
 8013618:	f7ec fe38 	bl	800028c <__adddf3>
 801361c:	f109 0901 	add.w	r9, r9, #1
 8013620:	4606      	mov	r6, r0
 8013622:	460f      	mov	r7, r1
 8013624:	e7e4      	b.n	80135f0 <__kernel_rem_pio2+0x3c8>
 8013626:	3d01      	subs	r5, #1
 8013628:	e747      	b.n	80134ba <__kernel_rem_pio2+0x292>
 801362a:	ec47 6b10 	vmov	d0, r6, r7
 801362e:	f1ca 0000 	rsb	r0, sl, #0
 8013632:	f7ff fd49 	bl	80130c8 <scalbn>
 8013636:	ec57 6b10 	vmov	r6, r7, d0
 801363a:	4ba0      	ldr	r3, [pc, #640]	; (80138bc <__kernel_rem_pio2+0x694>)
 801363c:	ee10 0a10 	vmov	r0, s0
 8013640:	2200      	movs	r2, #0
 8013642:	4639      	mov	r1, r7
 8013644:	f7ed fa5e 	bl	8000b04 <__aeabi_dcmpge>
 8013648:	b1f8      	cbz	r0, 801368a <__kernel_rem_pio2+0x462>
 801364a:	4b9d      	ldr	r3, [pc, #628]	; (80138c0 <__kernel_rem_pio2+0x698>)
 801364c:	2200      	movs	r2, #0
 801364e:	4630      	mov	r0, r6
 8013650:	4639      	mov	r1, r7
 8013652:	f7ec ffd1 	bl	80005f8 <__aeabi_dmul>
 8013656:	f7ed fa7f 	bl	8000b58 <__aeabi_d2iz>
 801365a:	4680      	mov	r8, r0
 801365c:	f7ec ff62 	bl	8000524 <__aeabi_i2d>
 8013660:	4b96      	ldr	r3, [pc, #600]	; (80138bc <__kernel_rem_pio2+0x694>)
 8013662:	2200      	movs	r2, #0
 8013664:	f7ec ffc8 	bl	80005f8 <__aeabi_dmul>
 8013668:	460b      	mov	r3, r1
 801366a:	4602      	mov	r2, r0
 801366c:	4639      	mov	r1, r7
 801366e:	4630      	mov	r0, r6
 8013670:	f7ec fe0a 	bl	8000288 <__aeabi_dsub>
 8013674:	f7ed fa70 	bl	8000b58 <__aeabi_d2iz>
 8013678:	1c65      	adds	r5, r4, #1
 801367a:	ab0c      	add	r3, sp, #48	; 0x30
 801367c:	f10a 0a18 	add.w	sl, sl, #24
 8013680:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013684:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8013688:	e71f      	b.n	80134ca <__kernel_rem_pio2+0x2a2>
 801368a:	4630      	mov	r0, r6
 801368c:	4639      	mov	r1, r7
 801368e:	f7ed fa63 	bl	8000b58 <__aeabi_d2iz>
 8013692:	ab0c      	add	r3, sp, #48	; 0x30
 8013694:	4625      	mov	r5, r4
 8013696:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801369a:	e716      	b.n	80134ca <__kernel_rem_pio2+0x2a2>
 801369c:	ab0c      	add	r3, sp, #48	; 0x30
 801369e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80136a2:	f7ec ff3f 	bl	8000524 <__aeabi_i2d>
 80136a6:	4632      	mov	r2, r6
 80136a8:	463b      	mov	r3, r7
 80136aa:	f7ec ffa5 	bl	80005f8 <__aeabi_dmul>
 80136ae:	4642      	mov	r2, r8
 80136b0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80136b4:	464b      	mov	r3, r9
 80136b6:	4630      	mov	r0, r6
 80136b8:	4639      	mov	r1, r7
 80136ba:	f7ec ff9d 	bl	80005f8 <__aeabi_dmul>
 80136be:	3c01      	subs	r4, #1
 80136c0:	4606      	mov	r6, r0
 80136c2:	460f      	mov	r7, r1
 80136c4:	e713      	b.n	80134ee <__kernel_rem_pio2+0x2c6>
 80136c6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80136ca:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80136ce:	f7ec ff93 	bl	80005f8 <__aeabi_dmul>
 80136d2:	4602      	mov	r2, r0
 80136d4:	460b      	mov	r3, r1
 80136d6:	4648      	mov	r0, r9
 80136d8:	4651      	mov	r1, sl
 80136da:	f7ec fdd7 	bl	800028c <__adddf3>
 80136de:	3701      	adds	r7, #1
 80136e0:	4681      	mov	r9, r0
 80136e2:	468a      	mov	sl, r1
 80136e4:	9b00      	ldr	r3, [sp, #0]
 80136e6:	429f      	cmp	r7, r3
 80136e8:	dc02      	bgt.n	80136f0 <__kernel_rem_pio2+0x4c8>
 80136ea:	9b06      	ldr	r3, [sp, #24]
 80136ec:	429f      	cmp	r7, r3
 80136ee:	ddea      	ble.n	80136c6 <__kernel_rem_pio2+0x49e>
 80136f0:	9a06      	ldr	r2, [sp, #24]
 80136f2:	ab48      	add	r3, sp, #288	; 0x120
 80136f4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80136f8:	e9c6 9a00 	strd	r9, sl, [r6]
 80136fc:	3c01      	subs	r4, #1
 80136fe:	e6fa      	b.n	80134f6 <__kernel_rem_pio2+0x2ce>
 8013700:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013702:	2b02      	cmp	r3, #2
 8013704:	dc0b      	bgt.n	801371e <__kernel_rem_pio2+0x4f6>
 8013706:	2b00      	cmp	r3, #0
 8013708:	dc39      	bgt.n	801377e <__kernel_rem_pio2+0x556>
 801370a:	d05d      	beq.n	80137c8 <__kernel_rem_pio2+0x5a0>
 801370c:	9b02      	ldr	r3, [sp, #8]
 801370e:	f003 0007 	and.w	r0, r3, #7
 8013712:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8013716:	ecbd 8b02 	vpop	{d8}
 801371a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801371e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013720:	2b03      	cmp	r3, #3
 8013722:	d1f3      	bne.n	801370c <__kernel_rem_pio2+0x4e4>
 8013724:	9b05      	ldr	r3, [sp, #20]
 8013726:	9500      	str	r5, [sp, #0]
 8013728:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801372c:	eb0d 0403 	add.w	r4, sp, r3
 8013730:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8013734:	46a2      	mov	sl, r4
 8013736:	9b00      	ldr	r3, [sp, #0]
 8013738:	2b00      	cmp	r3, #0
 801373a:	f1aa 0a08 	sub.w	sl, sl, #8
 801373e:	dc69      	bgt.n	8013814 <__kernel_rem_pio2+0x5ec>
 8013740:	46aa      	mov	sl, r5
 8013742:	f1ba 0f01 	cmp.w	sl, #1
 8013746:	f1a4 0408 	sub.w	r4, r4, #8
 801374a:	f300 8083 	bgt.w	8013854 <__kernel_rem_pio2+0x62c>
 801374e:	9c05      	ldr	r4, [sp, #20]
 8013750:	ab48      	add	r3, sp, #288	; 0x120
 8013752:	441c      	add	r4, r3
 8013754:	2000      	movs	r0, #0
 8013756:	2100      	movs	r1, #0
 8013758:	2d01      	cmp	r5, #1
 801375a:	f300 809a 	bgt.w	8013892 <__kernel_rem_pio2+0x66a>
 801375e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8013762:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8013766:	f1bb 0f00 	cmp.w	fp, #0
 801376a:	f040 8098 	bne.w	801389e <__kernel_rem_pio2+0x676>
 801376e:	9b04      	ldr	r3, [sp, #16]
 8013770:	e9c3 7800 	strd	r7, r8, [r3]
 8013774:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8013778:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801377c:	e7c6      	b.n	801370c <__kernel_rem_pio2+0x4e4>
 801377e:	9e05      	ldr	r6, [sp, #20]
 8013780:	ab48      	add	r3, sp, #288	; 0x120
 8013782:	441e      	add	r6, r3
 8013784:	462c      	mov	r4, r5
 8013786:	2000      	movs	r0, #0
 8013788:	2100      	movs	r1, #0
 801378a:	2c00      	cmp	r4, #0
 801378c:	da33      	bge.n	80137f6 <__kernel_rem_pio2+0x5ce>
 801378e:	f1bb 0f00 	cmp.w	fp, #0
 8013792:	d036      	beq.n	8013802 <__kernel_rem_pio2+0x5da>
 8013794:	4602      	mov	r2, r0
 8013796:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801379a:	9c04      	ldr	r4, [sp, #16]
 801379c:	e9c4 2300 	strd	r2, r3, [r4]
 80137a0:	4602      	mov	r2, r0
 80137a2:	460b      	mov	r3, r1
 80137a4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80137a8:	f7ec fd6e 	bl	8000288 <__aeabi_dsub>
 80137ac:	ae4a      	add	r6, sp, #296	; 0x128
 80137ae:	2401      	movs	r4, #1
 80137b0:	42a5      	cmp	r5, r4
 80137b2:	da29      	bge.n	8013808 <__kernel_rem_pio2+0x5e0>
 80137b4:	f1bb 0f00 	cmp.w	fp, #0
 80137b8:	d002      	beq.n	80137c0 <__kernel_rem_pio2+0x598>
 80137ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80137be:	4619      	mov	r1, r3
 80137c0:	9b04      	ldr	r3, [sp, #16]
 80137c2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80137c6:	e7a1      	b.n	801370c <__kernel_rem_pio2+0x4e4>
 80137c8:	9c05      	ldr	r4, [sp, #20]
 80137ca:	ab48      	add	r3, sp, #288	; 0x120
 80137cc:	441c      	add	r4, r3
 80137ce:	2000      	movs	r0, #0
 80137d0:	2100      	movs	r1, #0
 80137d2:	2d00      	cmp	r5, #0
 80137d4:	da09      	bge.n	80137ea <__kernel_rem_pio2+0x5c2>
 80137d6:	f1bb 0f00 	cmp.w	fp, #0
 80137da:	d002      	beq.n	80137e2 <__kernel_rem_pio2+0x5ba>
 80137dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80137e0:	4619      	mov	r1, r3
 80137e2:	9b04      	ldr	r3, [sp, #16]
 80137e4:	e9c3 0100 	strd	r0, r1, [r3]
 80137e8:	e790      	b.n	801370c <__kernel_rem_pio2+0x4e4>
 80137ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80137ee:	f7ec fd4d 	bl	800028c <__adddf3>
 80137f2:	3d01      	subs	r5, #1
 80137f4:	e7ed      	b.n	80137d2 <__kernel_rem_pio2+0x5aa>
 80137f6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80137fa:	f7ec fd47 	bl	800028c <__adddf3>
 80137fe:	3c01      	subs	r4, #1
 8013800:	e7c3      	b.n	801378a <__kernel_rem_pio2+0x562>
 8013802:	4602      	mov	r2, r0
 8013804:	460b      	mov	r3, r1
 8013806:	e7c8      	b.n	801379a <__kernel_rem_pio2+0x572>
 8013808:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801380c:	f7ec fd3e 	bl	800028c <__adddf3>
 8013810:	3401      	adds	r4, #1
 8013812:	e7cd      	b.n	80137b0 <__kernel_rem_pio2+0x588>
 8013814:	e9da 8900 	ldrd	r8, r9, [sl]
 8013818:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801381c:	9b00      	ldr	r3, [sp, #0]
 801381e:	3b01      	subs	r3, #1
 8013820:	9300      	str	r3, [sp, #0]
 8013822:	4632      	mov	r2, r6
 8013824:	463b      	mov	r3, r7
 8013826:	4640      	mov	r0, r8
 8013828:	4649      	mov	r1, r9
 801382a:	f7ec fd2f 	bl	800028c <__adddf3>
 801382e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013832:	4602      	mov	r2, r0
 8013834:	460b      	mov	r3, r1
 8013836:	4640      	mov	r0, r8
 8013838:	4649      	mov	r1, r9
 801383a:	f7ec fd25 	bl	8000288 <__aeabi_dsub>
 801383e:	4632      	mov	r2, r6
 8013840:	463b      	mov	r3, r7
 8013842:	f7ec fd23 	bl	800028c <__adddf3>
 8013846:	ed9d 7b06 	vldr	d7, [sp, #24]
 801384a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801384e:	ed8a 7b00 	vstr	d7, [sl]
 8013852:	e770      	b.n	8013736 <__kernel_rem_pio2+0x50e>
 8013854:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013858:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801385c:	4640      	mov	r0, r8
 801385e:	4632      	mov	r2, r6
 8013860:	463b      	mov	r3, r7
 8013862:	4649      	mov	r1, r9
 8013864:	f7ec fd12 	bl	800028c <__adddf3>
 8013868:	e9cd 0100 	strd	r0, r1, [sp]
 801386c:	4602      	mov	r2, r0
 801386e:	460b      	mov	r3, r1
 8013870:	4640      	mov	r0, r8
 8013872:	4649      	mov	r1, r9
 8013874:	f7ec fd08 	bl	8000288 <__aeabi_dsub>
 8013878:	4632      	mov	r2, r6
 801387a:	463b      	mov	r3, r7
 801387c:	f7ec fd06 	bl	800028c <__adddf3>
 8013880:	ed9d 7b00 	vldr	d7, [sp]
 8013884:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013888:	ed84 7b00 	vstr	d7, [r4]
 801388c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013890:	e757      	b.n	8013742 <__kernel_rem_pio2+0x51a>
 8013892:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013896:	f7ec fcf9 	bl	800028c <__adddf3>
 801389a:	3d01      	subs	r5, #1
 801389c:	e75c      	b.n	8013758 <__kernel_rem_pio2+0x530>
 801389e:	9b04      	ldr	r3, [sp, #16]
 80138a0:	9a04      	ldr	r2, [sp, #16]
 80138a2:	601f      	str	r7, [r3, #0]
 80138a4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80138a8:	605c      	str	r4, [r3, #4]
 80138aa:	609d      	str	r5, [r3, #8]
 80138ac:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80138b0:	60d3      	str	r3, [r2, #12]
 80138b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80138b6:	6110      	str	r0, [r2, #16]
 80138b8:	6153      	str	r3, [r2, #20]
 80138ba:	e727      	b.n	801370c <__kernel_rem_pio2+0x4e4>
 80138bc:	41700000 	.word	0x41700000
 80138c0:	3e700000 	.word	0x3e700000
 80138c4:	00000000 	.word	0x00000000

080138c8 <floor>:
 80138c8:	ec51 0b10 	vmov	r0, r1, d0
 80138cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80138d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138d4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80138d8:	2e13      	cmp	r6, #19
 80138da:	ee10 5a10 	vmov	r5, s0
 80138de:	ee10 8a10 	vmov	r8, s0
 80138e2:	460c      	mov	r4, r1
 80138e4:	dc31      	bgt.n	801394a <floor+0x82>
 80138e6:	2e00      	cmp	r6, #0
 80138e8:	da14      	bge.n	8013914 <floor+0x4c>
 80138ea:	a333      	add	r3, pc, #204	; (adr r3, 80139b8 <floor+0xf0>)
 80138ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138f0:	f7ec fccc 	bl	800028c <__adddf3>
 80138f4:	2200      	movs	r2, #0
 80138f6:	2300      	movs	r3, #0
 80138f8:	f7ed f90e 	bl	8000b18 <__aeabi_dcmpgt>
 80138fc:	b138      	cbz	r0, 801390e <floor+0x46>
 80138fe:	2c00      	cmp	r4, #0
 8013900:	da53      	bge.n	80139aa <floor+0xe2>
 8013902:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8013906:	4325      	orrs	r5, r4
 8013908:	d052      	beq.n	80139b0 <floor+0xe8>
 801390a:	4c2d      	ldr	r4, [pc, #180]	; (80139c0 <floor+0xf8>)
 801390c:	2500      	movs	r5, #0
 801390e:	4621      	mov	r1, r4
 8013910:	4628      	mov	r0, r5
 8013912:	e024      	b.n	801395e <floor+0x96>
 8013914:	4f2b      	ldr	r7, [pc, #172]	; (80139c4 <floor+0xfc>)
 8013916:	4137      	asrs	r7, r6
 8013918:	ea01 0307 	and.w	r3, r1, r7
 801391c:	4303      	orrs	r3, r0
 801391e:	d01e      	beq.n	801395e <floor+0x96>
 8013920:	a325      	add	r3, pc, #148	; (adr r3, 80139b8 <floor+0xf0>)
 8013922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013926:	f7ec fcb1 	bl	800028c <__adddf3>
 801392a:	2200      	movs	r2, #0
 801392c:	2300      	movs	r3, #0
 801392e:	f7ed f8f3 	bl	8000b18 <__aeabi_dcmpgt>
 8013932:	2800      	cmp	r0, #0
 8013934:	d0eb      	beq.n	801390e <floor+0x46>
 8013936:	2c00      	cmp	r4, #0
 8013938:	bfbe      	ittt	lt
 801393a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801393e:	4133      	asrlt	r3, r6
 8013940:	18e4      	addlt	r4, r4, r3
 8013942:	ea24 0407 	bic.w	r4, r4, r7
 8013946:	2500      	movs	r5, #0
 8013948:	e7e1      	b.n	801390e <floor+0x46>
 801394a:	2e33      	cmp	r6, #51	; 0x33
 801394c:	dd0b      	ble.n	8013966 <floor+0x9e>
 801394e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013952:	d104      	bne.n	801395e <floor+0x96>
 8013954:	ee10 2a10 	vmov	r2, s0
 8013958:	460b      	mov	r3, r1
 801395a:	f7ec fc97 	bl	800028c <__adddf3>
 801395e:	ec41 0b10 	vmov	d0, r0, r1
 8013962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013966:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801396a:	f04f 37ff 	mov.w	r7, #4294967295
 801396e:	40df      	lsrs	r7, r3
 8013970:	4238      	tst	r0, r7
 8013972:	d0f4      	beq.n	801395e <floor+0x96>
 8013974:	a310      	add	r3, pc, #64	; (adr r3, 80139b8 <floor+0xf0>)
 8013976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801397a:	f7ec fc87 	bl	800028c <__adddf3>
 801397e:	2200      	movs	r2, #0
 8013980:	2300      	movs	r3, #0
 8013982:	f7ed f8c9 	bl	8000b18 <__aeabi_dcmpgt>
 8013986:	2800      	cmp	r0, #0
 8013988:	d0c1      	beq.n	801390e <floor+0x46>
 801398a:	2c00      	cmp	r4, #0
 801398c:	da0a      	bge.n	80139a4 <floor+0xdc>
 801398e:	2e14      	cmp	r6, #20
 8013990:	d101      	bne.n	8013996 <floor+0xce>
 8013992:	3401      	adds	r4, #1
 8013994:	e006      	b.n	80139a4 <floor+0xdc>
 8013996:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801399a:	2301      	movs	r3, #1
 801399c:	40b3      	lsls	r3, r6
 801399e:	441d      	add	r5, r3
 80139a0:	45a8      	cmp	r8, r5
 80139a2:	d8f6      	bhi.n	8013992 <floor+0xca>
 80139a4:	ea25 0507 	bic.w	r5, r5, r7
 80139a8:	e7b1      	b.n	801390e <floor+0x46>
 80139aa:	2500      	movs	r5, #0
 80139ac:	462c      	mov	r4, r5
 80139ae:	e7ae      	b.n	801390e <floor+0x46>
 80139b0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80139b4:	e7ab      	b.n	801390e <floor+0x46>
 80139b6:	bf00      	nop
 80139b8:	8800759c 	.word	0x8800759c
 80139bc:	7e37e43c 	.word	0x7e37e43c
 80139c0:	bff00000 	.word	0xbff00000
 80139c4:	000fffff 	.word	0x000fffff

080139c8 <_init>:
 80139c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139ca:	bf00      	nop
 80139cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139ce:	bc08      	pop	{r3}
 80139d0:	469e      	mov	lr, r3
 80139d2:	4770      	bx	lr

080139d4 <_fini>:
 80139d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139d6:	bf00      	nop
 80139d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139da:	bc08      	pop	{r3}
 80139dc:	469e      	mov	lr, r3
 80139de:	4770      	bx	lr
