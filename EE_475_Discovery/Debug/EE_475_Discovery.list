
EE_475_Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011cec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08011e80  08011e80  00021e80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801231c  0801231c  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  0801231c  0801231c  0002231c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012324  08012324  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012324  08012324  00022324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012328  08012328  00022328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0801232c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f8  2**0
                  CONTENTS
 10 .bss          00000fd8  200001f8  200001f8  000301f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200011d0  200011d0  000301f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e643  00000000  00000000  0003026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000464a  00000000  00000000  0004e8ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a38  00000000  00000000  00052ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000146a  00000000  00000000  00054930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002637c  00000000  00000000  00055d9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022377  00000000  00000000  0007c116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d8ca3  00000000  00000000  0009e48d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000085d8  00000000  00000000  00177130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  0017f708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011e64 	.word	0x08011e64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08011e64 	.word	0x08011e64

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	if (huart == &huart3) {
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a1d      	ldr	r2, [pc, #116]	; (8001070 <HAL_UART_RxCpltCallback+0x80>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d133      	bne.n	8001068 <HAL_UART_RxCpltCallback+0x78>
		memcpy(GPS_Buf, UART3_Rx_buf+1, GPS_BUF_N-1);
 8001000:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <HAL_UART_RxCpltCallback+0x84>)
 8001002:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001006:	4619      	mov	r1, r3
 8001008:	481b      	ldr	r0, [pc, #108]	; (8001078 <HAL_UART_RxCpltCallback+0x88>)
 800100a:	f00e fa4a 	bl	800f4a2 <memcpy>
		GPS_Buf[GPS_BUF_N-1] = '\0';
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <HAL_UART_RxCpltCallback+0x88>)
 8001010:	2200      	movs	r2, #0
 8001012:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff

		// DEBUG
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	2202      	movs	r2, #2
 800101c:	4917      	ldr	r1, [pc, #92]	; (800107c <HAL_UART_RxCpltCallback+0x8c>)
 800101e:	4818      	ldr	r0, [pc, #96]	; (8001080 <HAL_UART_RxCpltCallback+0x90>)
 8001020:	f007 fc42 	bl	80088a8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) GPS_Buf, strlen((char*) GPS_Buf), HAL_MAX_DELAY);
 8001024:	4814      	ldr	r0, [pc, #80]	; (8001078 <HAL_UART_RxCpltCallback+0x88>)
 8001026:	f7ff f923 	bl	8000270 <strlen>
 800102a:	4603      	mov	r3, r0
 800102c:	b29a      	uxth	r2, r3
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	4911      	ldr	r1, [pc, #68]	; (8001078 <HAL_UART_RxCpltCallback+0x88>)
 8001034:	4812      	ldr	r0, [pc, #72]	; (8001080 <HAL_UART_RxCpltCallback+0x90>)
 8001036:	f007 fc37 	bl	80088a8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	2202      	movs	r2, #2
 8001040:	490e      	ldr	r1, [pc, #56]	; (800107c <HAL_UART_RxCpltCallback+0x8c>)
 8001042:	480f      	ldr	r0, [pc, #60]	; (8001080 <HAL_UART_RxCpltCallback+0x90>)
 8001044:	f007 fc30 	bl	80088a8 <HAL_UART_Transmit>
		// DEBUG

		char* Data_Buffer_ptr = strnstr((char*) GPS_Buf, "GPGGA", 5);
 8001048:	2205      	movs	r2, #5
 800104a:	490e      	ldr	r1, [pc, #56]	; (8001084 <HAL_UART_RxCpltCallback+0x94>)
 800104c:	480a      	ldr	r0, [pc, #40]	; (8001078 <HAL_UART_RxCpltCallback+0x88>)
 800104e:	f00e f95e 	bl	800f30e <strnstr>
 8001052:	60f8      	str	r0, [r7, #12]
		if (Data_Buffer_ptr == 0) return;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d005      	beq.n	8001066 <HAL_UART_RxCpltCallback+0x76>

		parse_GPS(Data_Buffer_ptr, GPS_Buf+GPS_BUF_N);
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <HAL_UART_RxCpltCallback+0x98>)
 800105c:	4619      	mov	r1, r3
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f000 f814 	bl	800108c <parse_GPS>
 8001064:	e000      	b.n	8001068 <HAL_UART_RxCpltCallback+0x78>
		if (Data_Buffer_ptr == 0) return;
 8001066:	bf00      	nop
//			Time = t;
//			Latitude = lat;
//			Longitude = lon;
//		}
	}
}
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000398 	.word	0x20000398
 8001074:	2000065d 	.word	0x2000065d
 8001078:	20000440 	.word	0x20000440
 800107c:	08011e80 	.word	0x08011e80
 8001080:	20000350 	.word	0x20000350
 8001084:	08011e84 	.word	0x08011e84
 8001088:	20000640 	.word	0x20000640

0800108c <parse_GPS>:

int parse_GPS(char* start, char* end) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
	// GPGGA,035140.00,4739.22314,N,12218.23740,W,2,08,1.14,49.3,M,-18.8,M,,0000*55
	// 0     1         2          3 4           5
	int i = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
	char* items[6];
	char* ptr = start;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	623b      	str	r3, [r7, #32]
	items[i++] = ptr;
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	1c5a      	adds	r2, r3, #1
 80010a2:	627a      	str	r2, [r7, #36]	; 0x24
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	3328      	adds	r3, #40	; 0x28
 80010a8:	443b      	add	r3, r7
 80010aa:	6a3a      	ldr	r2, [r7, #32]
 80010ac:	f843 2c20 	str.w	r2, [r3, #-32]

	while (ptr < end) {
 80010b0:	e016      	b.n	80010e0 <parse_GPS+0x54>
		if (*ptr == ',') {
 80010b2:	6a3b      	ldr	r3, [r7, #32]
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b2c      	cmp	r3, #44	; 0x2c
 80010b8:	d10f      	bne.n	80010da <parse_GPS+0x4e>
			*ptr = '\0';
 80010ba:	6a3b      	ldr	r3, [r7, #32]
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
			if (i < 6) items[i++] = ptr+1;
 80010c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c2:	2b05      	cmp	r3, #5
 80010c4:	dc11      	bgt.n	80010ea <parse_GPS+0x5e>
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	1c5a      	adds	r2, r3, #1
 80010ca:	627a      	str	r2, [r7, #36]	; 0x24
 80010cc:	6a3a      	ldr	r2, [r7, #32]
 80010ce:	3201      	adds	r2, #1
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	3328      	adds	r3, #40	; 0x28
 80010d4:	443b      	add	r3, r7
 80010d6:	f843 2c20 	str.w	r2, [r3, #-32]
			else break;
		}
		ptr++;
 80010da:	6a3b      	ldr	r3, [r7, #32]
 80010dc:	3301      	adds	r3, #1
 80010de:	623b      	str	r3, [r7, #32]
	while (ptr < end) {
 80010e0:	6a3a      	ldr	r2, [r7, #32]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d3e4      	bcc.n	80010b2 <parse_GPS+0x26>
 80010e8:	e000      	b.n	80010ec <parse_GPS+0x60>
			else break;
 80010ea:	bf00      	nop
	}

	Time = atof(items[1]);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f00c fa7a 	bl	800d5e8 <atof>
 80010f4:	ee07 0a90 	vmov	s15, r0
 80010f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <parse_GPS+0xbc>)
 80010fe:	edc3 7a00 	vstr	s15, [r3]
	if (*items[3] == 'N') {
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b4e      	cmp	r3, #78	; 0x4e
 8001108:	d10a      	bne.n	8001120 <parse_GPS+0x94>
		Latitude = atof(items[2]);
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4618      	mov	r0, r3
 800110e:	f00c fa6b 	bl	800d5e8 <atof>
 8001112:	ee07 0a90 	vmov	s15, r0
 8001116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <parse_GPS+0xc0>)
 800111c:	edc3 7a00 	vstr	s15, [r3]
	}
	if (*items[5] == 'W') {
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b57      	cmp	r3, #87	; 0x57
 8001126:	d10a      	bne.n	800113e <parse_GPS+0xb2>
		Longitude = atof(items[4]);
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	4618      	mov	r0, r3
 800112c:	f00c fa5c 	bl	800d5e8 <atof>
 8001130:	ee07 0a90 	vmov	s15, r0
 8001134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <parse_GPS+0xc4>)
 800113a:	edc3 7a00 	vstr	s15, [r3]
	}

	return 0;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3728      	adds	r7, #40	; 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000640 	.word	0x20000640
 800114c:	20000644 	.word	0x20000644
 8001150:	20000648 	.word	0x20000648

08001154 <format_data>:

void format_data(float Time, float Lat, float Long) {
 8001154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001158:	b08a      	sub	sp, #40	; 0x28
 800115a:	af06      	add	r7, sp, #24
 800115c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001160:	edc7 0a02 	vstr	s1, [r7, #8]
 8001164:	ed87 1a01 	vstr	s2, [r7, #4]
	Hours = (int)Time / 10000;
 8001168:	edd7 7a03 	vldr	s15, [r7, #12]
 800116c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001170:	ee17 1a90 	vmov	r1, s15
 8001174:	4b30      	ldr	r3, [pc, #192]	; (8001238 <format_data+0xe4>)
 8001176:	fb83 2301 	smull	r2, r3, r3, r1
 800117a:	131a      	asrs	r2, r3, #12
 800117c:	17cb      	asrs	r3, r1, #31
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	4a2e      	ldr	r2, [pc, #184]	; (800123c <format_data+0xe8>)
 8001182:	6013      	str	r3, [r2, #0]
	Min = (int)(Time - (Hours * 10000)) / 100;
 8001184:	4b2d      	ldr	r3, [pc, #180]	; (800123c <format_data+0xe8>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f242 7210 	movw	r2, #10000	; 0x2710
 800118c:	fb02 f303 	mul.w	r3, r2, r3
 8001190:	ee07 3a90 	vmov	s15, r3
 8001194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001198:	ed97 7a03 	vldr	s14, [r7, #12]
 800119c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a4:	ee17 1a90 	vmov	r1, s15
 80011a8:	4b25      	ldr	r3, [pc, #148]	; (8001240 <format_data+0xec>)
 80011aa:	fb83 2301 	smull	r2, r3, r3, r1
 80011ae:	115a      	asrs	r2, r3, #5
 80011b0:	17cb      	asrs	r3, r1, #31
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	4a23      	ldr	r2, [pc, #140]	; (8001244 <format_data+0xf0>)
 80011b6:	6013      	str	r3, [r2, #0]
	Sec = (int)(Time - ((Hours * 10000) + (Min * 100)));
 80011b8:	4b20      	ldr	r3, [pc, #128]	; (800123c <format_data+0xe8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80011c0:	fb03 f202 	mul.w	r2, r3, r2
 80011c4:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <format_data+0xf0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2164      	movs	r1, #100	; 0x64
 80011ca:	fb01 f303 	mul.w	r3, r1, r3
 80011ce:	4413      	add	r3, r2
 80011d0:	ee07 3a90 	vmov	s15, r3
 80011d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80011dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e4:	ee17 2a90 	vmov	r2, s15
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <format_data+0xf4>)
 80011ea:	601a      	str	r2, [r3, #0]
	sprintf((char*) UART2_Tx_buf, "Time=%d:%d:%d Latitude=%f, Longitude=%f\r\n",
 80011ec:	4b13      	ldr	r3, [pc, #76]	; (800123c <format_data+0xe8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f1a3 0808 	sub.w	r8, r3, #8
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <format_data+0xf0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	603b      	str	r3, [r7, #0]
 80011fa:	4b13      	ldr	r3, [pc, #76]	; (8001248 <format_data+0xf4>)
 80011fc:	681e      	ldr	r6, [r3, #0]
 80011fe:	68b8      	ldr	r0, [r7, #8]
 8001200:	f7ff f9a2 	bl	8000548 <__aeabi_f2d>
 8001204:	4604      	mov	r4, r0
 8001206:	460d      	mov	r5, r1
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff f99d 	bl	8000548 <__aeabi_f2d>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001216:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800121a:	9600      	str	r6, [sp, #0]
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	4642      	mov	r2, r8
 8001220:	490a      	ldr	r1, [pc, #40]	; (800124c <format_data+0xf8>)
 8001222:	480b      	ldr	r0, [pc, #44]	; (8001250 <format_data+0xfc>)
 8001224:	f00d fff6 	bl	800f214 <siprintf>
			Hours-8, Min, Sec, Lat, Long);
	printd();
 8001228:	f000 f8a4 	bl	8001374 <printd>
}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001236:	bf00      	nop
 8001238:	68db8bad 	.word	0x68db8bad
 800123c:	20000650 	.word	0x20000650
 8001240:	51eb851f 	.word	0x51eb851f
 8001244:	20000654 	.word	0x20000654
 8001248:	20000658 	.word	0x20000658
 800124c:	08011e8c 	.word	0x08011e8c
 8001250:	2000085c 	.word	0x2000085c

08001254 <read_heading>:

void read_heading() {
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af04      	add	r7, sp, #16
	uint8_t data[2];
	HAL_I2C_Mem_Read(&hi2c1, BNO055_ADDRESS << 1, BNO055_ADDR_HEADING, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	9302      	str	r3, [sp, #8]
 8001260:	2302      	movs	r3, #2
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2301      	movs	r3, #1
 800126a:	221a      	movs	r2, #26
 800126c:	2150      	movs	r1, #80	; 0x50
 800126e:	480c      	ldr	r0, [pc, #48]	; (80012a0 <read_heading+0x4c>)
 8001270:	f004 fafc 	bl	800586c <HAL_I2C_Mem_Read>
	Heading = (float)((int16_t)(data[1] << 8 | data[0])) / 16.0;
 8001274:	797b      	ldrb	r3, [r7, #5]
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	b21a      	sxth	r2, r3
 800127a:	793b      	ldrb	r3, [r7, #4]
 800127c:	b21b      	sxth	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	b21b      	sxth	r3, r3
 8001282:	ee07 3a90 	vmov	s15, r3
 8001286:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800128a:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800128e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <read_heading+0x50>)
 8001294:	edc3 7a00 	vstr	s15, [r3]
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000214 	.word	0x20000214
 80012a4:	2000064c 	.word	0x2000064c

080012a8 <set_steering>:

void set_steering(float direction) {
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	ed87 0a01 	vstr	s0, [r7, #4]
	int pulse = direction*500+1500;
 80012b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001300 <set_steering+0x58>
 80012ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012be:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001304 <set_steering+0x5c>
 80012c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ca:	ee17 3a90 	vmov	r3, s15
 80012ce:	60fb      	str	r3, [r7, #12]
	if (pulse > 2000) pulse = 2000;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012d6:	dd02      	ble.n	80012de <set_steering+0x36>
 80012d8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012dc:	60fb      	str	r3, [r7, #12]
	if (pulse < 1000) pulse = 1000;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012e4:	da02      	bge.n	80012ec <set_steering+0x44>
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <set_steering+0x60>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	43fa0000 	.word	0x43fa0000
 8001304:	44bb8000 	.word	0x44bb8000
 8001308:	20000308 	.word	0x20000308

0800130c <set_speed>:

void set_speed(float speed) {
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	ed87 0a01 	vstr	s0, [r7, #4]
	int pulse = speed*200+1500;
 8001316:	edd7 7a01 	vldr	s15, [r7, #4]
 800131a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001368 <set_speed+0x5c>
 800131e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001322:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800136c <set_speed+0x60>
 8001326:	ee77 7a87 	vadd.f32	s15, s15, s14
 800132a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800132e:	ee17 3a90 	vmov	r3, s15
 8001332:	60fb      	str	r3, [r7, #12]
	if (pulse > 1700) pulse = 1700;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800133a:	4293      	cmp	r3, r2
 800133c:	dd02      	ble.n	8001344 <set_speed+0x38>
 800133e:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8001342:	60fb      	str	r3, [r7, #12]
	if (pulse < 1500) pulse = 1500;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f240 52db 	movw	r2, #1499	; 0x5db
 800134a:	4293      	cmp	r3, r2
 800134c:	dc02      	bgt.n	8001354 <set_speed+0x48>
 800134e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001352:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse);
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <set_speed+0x64>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	43480000 	.word	0x43480000
 800136c:	44bb8000 	.word	0x44bb8000
 8001370:	20000308 	.word	0x20000308

08001374 <printd>:

void printd() {
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, UART2_Tx_buf, strlen((char*) UART2_Tx_buf), HAL_MAX_DELAY);
 8001378:	4806      	ldr	r0, [pc, #24]	; (8001394 <printd+0x20>)
 800137a:	f7fe ff79 	bl	8000270 <strlen>
 800137e:	4603      	mov	r3, r0
 8001380:	b29a      	uxth	r2, r3
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	4903      	ldr	r1, [pc, #12]	; (8001394 <printd+0x20>)
 8001388:	4803      	ldr	r0, [pc, #12]	; (8001398 <printd+0x24>)
 800138a:	f007 fa8d 	bl	80088a8 <HAL_UART_Transmit>
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	2000085c 	.word	0x2000085c
 8001398:	20000350 	.word	0x20000350

0800139c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a2:	f000 ffab 	bl	80022fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a6:	f000 f8c9 	bl	800153c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013aa:	f000 fae9 	bl	8001980 <MX_GPIO_Init>
  MX_DMA_Init();
 80013ae:	f000 fac7 	bl	8001940 <MX_DMA_Init>
  MX_I2C1_Init();
 80013b2:	f000 f92d 	bl	8001610 <MX_I2C1_Init>
  MX_I2S3_Init();
 80013b6:	f000 f959 	bl	800166c <MX_I2S3_Init>
  MX_SPI1_Init();
 80013ba:	f000 f987 	bl	80016cc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80013be:	f00b fe09 	bl	800cfd4 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80013c2:	f000 fa69 	bl	8001898 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80013c6:	f000 f9b7 	bl	8001738 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80013ca:	f000 fa8f 	bl	80018ec <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  int i = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
  float comp_f = 0;
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	60bb      	str	r3, [r7, #8]
  memset(UART3_Rx_buf, 0, GPS_BUF_N);
 80013d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013dc:	2100      	movs	r1, #0
 80013de:	4846      	ldr	r0, [pc, #280]	; (80014f8 <main+0x15c>)
 80013e0:	f00d ff7b 	bl	800f2da <memset>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013e4:	2100      	movs	r1, #0
 80013e6:	4845      	ldr	r0, [pc, #276]	; (80014fc <main+0x160>)
 80013e8:	f006 fbd2 	bl	8007b90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80013ec:	2104      	movs	r1, #4
 80013ee:	4843      	ldr	r0, [pc, #268]	; (80014fc <main+0x160>)
 80013f0:	f006 fbce 	bl	8007b90 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_DMA(&huart3, UART3_Rx_buf, GPS_BUF_N);
 80013f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013f8:	493f      	ldr	r1, [pc, #252]	; (80014f8 <main+0x15c>)
 80013fa:	4841      	ldr	r0, [pc, #260]	; (8001500 <main+0x164>)
 80013fc:	f007 fadf 	bl	80089be <HAL_UART_Receive_DMA>
  uint8_t mode = BNO055_MODE_COMPASS;
 8001400:	2309      	movs	r3, #9
 8001402:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Mem_Write(&hi2c1, BNO055_ADDRESS << 1, BNO055_ADDR_OPRMODE, I2C_MEMADD_SIZE_8BIT, &mode, 1, HAL_MAX_DELAY);
 8001404:	f04f 33ff 	mov.w	r3, #4294967295
 8001408:	9302      	str	r3, [sp, #8]
 800140a:	2301      	movs	r3, #1
 800140c:	9301      	str	r3, [sp, #4]
 800140e:	1cfb      	adds	r3, r7, #3
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2301      	movs	r3, #1
 8001414:	223d      	movs	r2, #61	; 0x3d
 8001416:	2150      	movs	r1, #80	; 0x50
 8001418:	483a      	ldr	r0, [pc, #232]	; (8001504 <main+0x168>)
 800141a:	f004 f92d 	bl	8005678 <HAL_I2C_Mem_Write>
  HAL_UART_Transmit(&huart2, (uint8_t*) "Hello!\r\n", 8, HAL_MAX_DELAY);
 800141e:	f04f 33ff 	mov.w	r3, #4294967295
 8001422:	2208      	movs	r2, #8
 8001424:	4938      	ldr	r1, [pc, #224]	; (8001508 <main+0x16c>)
 8001426:	4839      	ldr	r0, [pc, #228]	; (800150c <main+0x170>)
 8001428:	f007 fa3e 	bl	80088a8 <HAL_UART_Transmit>
  set_speed(0);
 800142c:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8001510 <main+0x174>
 8001430:	f7ff ff6c 	bl	800130c <set_speed>
  HAL_Delay(2000);
 8001434:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001438:	f000 ffd2 	bl	80023e0 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800143c:	f00b fdf0 	bl	800d020 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (i % 10 == 0) format_data(Time, Latitude, Longitude);
 8001440:	68f9      	ldr	r1, [r7, #12]
 8001442:	4b34      	ldr	r3, [pc, #208]	; (8001514 <main+0x178>)
 8001444:	fb83 2301 	smull	r2, r3, r3, r1
 8001448:	109a      	asrs	r2, r3, #2
 800144a:	17cb      	asrs	r3, r1, #31
 800144c:	1ad2      	subs	r2, r2, r3
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	1aca      	subs	r2, r1, r3
 8001458:	2a00      	cmp	r2, #0
 800145a:	d110      	bne.n	800147e <main+0xe2>
 800145c:	4b2e      	ldr	r3, [pc, #184]	; (8001518 <main+0x17c>)
 800145e:	edd3 7a00 	vldr	s15, [r3]
 8001462:	4b2e      	ldr	r3, [pc, #184]	; (800151c <main+0x180>)
 8001464:	ed93 7a00 	vldr	s14, [r3]
 8001468:	4b2d      	ldr	r3, [pc, #180]	; (8001520 <main+0x184>)
 800146a:	edd3 6a00 	vldr	s13, [r3]
 800146e:	eeb0 1a66 	vmov.f32	s2, s13
 8001472:	eef0 0a47 	vmov.f32	s1, s14
 8001476:	eeb0 0a67 	vmov.f32	s0, s15
 800147a:	f7ff fe6b 	bl	8001154 <format_data>
    read_heading();
 800147e:	f7ff fee9 	bl	8001254 <read_heading>
    sprintf((char*) UART2_Tx_buf, "%f\r\n", Heading);
 8001482:	4b28      	ldr	r3, [pc, #160]	; (8001524 <main+0x188>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f85e 	bl	8000548 <__aeabi_f2d>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4925      	ldr	r1, [pc, #148]	; (8001528 <main+0x18c>)
 8001492:	4826      	ldr	r0, [pc, #152]	; (800152c <main+0x190>)
 8001494:	f00d febe 	bl	800f214 <siprintf>
    printd();
 8001498:	f7ff ff6c 	bl	8001374 <printd>

    float comp = (Heading > 180 ? Heading-360 : Heading)/180.0;
 800149c:	4b21      	ldr	r3, [pc, #132]	; (8001524 <main+0x188>)
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001530 <main+0x194>
 80014a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	dd07      	ble.n	80014c0 <main+0x124>
 80014b0:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <main+0x188>)
 80014b2:	edd3 7a00 	vldr	s15, [r3]
 80014b6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001534 <main+0x198>
 80014ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014be:	e002      	b.n	80014c6 <main+0x12a>
 80014c0:	4b18      	ldr	r3, [pc, #96]	; (8001524 <main+0x188>)
 80014c2:	edd3 7a00 	vldr	s15, [r3]
 80014c6:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001530 <main+0x194>
 80014ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80014ce:	ed87 7a01 	vstr	s14, [r7, #4]
    // comp_f += (comp-comp_f)*.01;
    set_steering(comp*steer_Pk);
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <main+0x19c>)
 80014d4:	ed93 7a00 	vldr	s14, [r3]
 80014d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e0:	eeb0 0a67 	vmov.f32	s0, s15
 80014e4:	f7ff fee0 	bl	80012a8 <set_steering>

    //set_speed(.6); // fast
    //set_speed(.5); // slow
    //set_speed(0); // off
    HAL_Delay(LOOP_DELAY);
 80014e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014ec:	f000 ff78 	bl	80023e0 <HAL_Delay>
    i++;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	3301      	adds	r3, #1
 80014f4:	60fb      	str	r3, [r7, #12]
  {
 80014f6:	e7a1      	b.n	800143c <main+0xa0>
 80014f8:	2000065c 	.word	0x2000065c
 80014fc:	20000308 	.word	0x20000308
 8001500:	20000398 	.word	0x20000398
 8001504:	20000214 	.word	0x20000214
 8001508:	08011eb8 	.word	0x08011eb8
 800150c:	20000350 	.word	0x20000350
 8001510:	00000000 	.word	0x00000000
 8001514:	66666667 	.word	0x66666667
 8001518:	20000640 	.word	0x20000640
 800151c:	20000644 	.word	0x20000644
 8001520:	20000648 	.word	0x20000648
 8001524:	2000064c 	.word	0x2000064c
 8001528:	08011ec4 	.word	0x08011ec4
 800152c:	2000085c 	.word	0x2000085c
 8001530:	43340000 	.word	0x43340000
 8001534:	43b40000 	.word	0x43b40000
 8001538:	20000000 	.word	0x20000000

0800153c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b094      	sub	sp, #80	; 0x50
 8001540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001542:	f107 0320 	add.w	r3, r7, #32
 8001546:	2230      	movs	r2, #48	; 0x30
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f00d fec5 	bl	800f2da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	4b28      	ldr	r3, [pc, #160]	; (8001608 <SystemClock_Config+0xcc>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	4a27      	ldr	r2, [pc, #156]	; (8001608 <SystemClock_Config+0xcc>)
 800156a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156e:	6413      	str	r3, [r2, #64]	; 0x40
 8001570:	4b25      	ldr	r3, [pc, #148]	; (8001608 <SystemClock_Config+0xcc>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800157c:	2300      	movs	r3, #0
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	4b22      	ldr	r3, [pc, #136]	; (800160c <SystemClock_Config+0xd0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a21      	ldr	r2, [pc, #132]	; (800160c <SystemClock_Config+0xd0>)
 8001586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	4b1f      	ldr	r3, [pc, #124]	; (800160c <SystemClock_Config+0xd0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001598:	2301      	movs	r3, #1
 800159a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800159c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a2:	2302      	movs	r3, #2
 80015a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015ac:	2308      	movs	r3, #8
 80015ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015b6:	2302      	movs	r3, #2
 80015b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015ba:	2307      	movs	r3, #7
 80015bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015be:	f107 0320 	add.w	r3, r7, #32
 80015c2:	4618      	mov	r0, r3
 80015c4:	f005 fbd8 	bl	8006d78 <HAL_RCC_OscConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015ce:	f000 fad5 	bl	8001b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d2:	230f      	movs	r3, #15
 80015d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d6:	2302      	movs	r3, #2
 80015d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015ea:	f107 030c 	add.w	r3, r7, #12
 80015ee:	2105      	movs	r1, #5
 80015f0:	4618      	mov	r0, r3
 80015f2:	f005 fe39 	bl	8007268 <HAL_RCC_ClockConfig>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80015fc:	f000 fabe 	bl	8001b7c <Error_Handler>
  }
}
 8001600:	bf00      	nop
 8001602:	3750      	adds	r7, #80	; 0x50
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40023800 	.word	0x40023800
 800160c:	40007000 	.word	0x40007000

08001610 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <MX_I2C1_Init+0x50>)
 8001616:	4a13      	ldr	r2, [pc, #76]	; (8001664 <MX_I2C1_Init+0x54>)
 8001618:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_I2C1_Init+0x50>)
 800161c:	4a12      	ldr	r2, [pc, #72]	; (8001668 <MX_I2C1_Init+0x58>)
 800161e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <MX_I2C1_Init+0x50>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <MX_I2C1_Init+0x50>)
 8001628:	2200      	movs	r2, #0
 800162a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <MX_I2C1_Init+0x50>)
 800162e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001632:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <MX_I2C1_Init+0x50>)
 8001636:	2200      	movs	r2, #0
 8001638:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <MX_I2C1_Init+0x50>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001640:	4b07      	ldr	r3, [pc, #28]	; (8001660 <MX_I2C1_Init+0x50>)
 8001642:	2200      	movs	r2, #0
 8001644:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <MX_I2C1_Init+0x50>)
 8001648:	2200      	movs	r2, #0
 800164a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800164c:	4804      	ldr	r0, [pc, #16]	; (8001660 <MX_I2C1_Init+0x50>)
 800164e:	f003 fecf 	bl	80053f0 <HAL_I2C_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001658:	f000 fa90 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000214 	.word	0x20000214
 8001664:	40005400 	.word	0x40005400
 8001668:	000186a0 	.word	0x000186a0

0800166c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <MX_I2S3_Init+0x54>)
 8001672:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <MX_I2S3_Init+0x58>)
 8001674:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <MX_I2S3_Init+0x54>)
 8001678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800167c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <MX_I2S3_Init+0x54>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001684:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <MX_I2S3_Init+0x54>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800168a:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <MX_I2S3_Init+0x54>)
 800168c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001690:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <MX_I2S3_Init+0x54>)
 8001694:	4a0c      	ldr	r2, [pc, #48]	; (80016c8 <MX_I2S3_Init+0x5c>)
 8001696:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_I2S3_Init+0x54>)
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <MX_I2S3_Init+0x54>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <MX_I2S3_Init+0x54>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <MX_I2S3_Init+0x54>)
 80016ac:	f004 fec4 	bl	8006438 <HAL_I2S_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80016b6:	f000 fa61 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000268 	.word	0x20000268
 80016c4:	40003c00 	.word	0x40003c00
 80016c8:	00017700 	.word	0x00017700

080016cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016d0:	4b17      	ldr	r3, [pc, #92]	; (8001730 <MX_SPI1_Init+0x64>)
 80016d2:	4a18      	ldr	r2, [pc, #96]	; (8001734 <MX_SPI1_Init+0x68>)
 80016d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_SPI1_Init+0x64>)
 80016d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016de:	4b14      	ldr	r3, [pc, #80]	; (8001730 <MX_SPI1_Init+0x64>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <MX_SPI1_Init+0x64>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_SPI1_Init+0x64>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_SPI1_Init+0x64>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_SPI1_Init+0x64>)
 80016f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016fe:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_SPI1_Init+0x64>)
 8001700:	2200      	movs	r2, #0
 8001702:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <MX_SPI1_Init+0x64>)
 8001706:	2200      	movs	r2, #0
 8001708:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_SPI1_Init+0x64>)
 800170c:	2200      	movs	r2, #0
 800170e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <MX_SPI1_Init+0x64>)
 8001712:	2200      	movs	r2, #0
 8001714:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_SPI1_Init+0x64>)
 8001718:	220a      	movs	r2, #10
 800171a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <MX_SPI1_Init+0x64>)
 800171e:	f006 f905 	bl	800792c <HAL_SPI_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001728:	f000 fa28 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	200002b0 	.word	0x200002b0
 8001734:	40013000 	.word	0x40013000

08001738 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b096      	sub	sp, #88	; 0x58
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
 8001764:	611a      	str	r2, [r3, #16]
 8001766:	615a      	str	r2, [r3, #20]
 8001768:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	2220      	movs	r2, #32
 800176e:	2100      	movs	r1, #0
 8001770:	4618      	mov	r0, r3
 8001772:	f00d fdb2 	bl	800f2da <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001776:	4b46      	ldr	r3, [pc, #280]	; (8001890 <MX_TIM1_Init+0x158>)
 8001778:	4a46      	ldr	r2, [pc, #280]	; (8001894 <MX_TIM1_Init+0x15c>)
 800177a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168;
 800177c:	4b44      	ldr	r3, [pc, #272]	; (8001890 <MX_TIM1_Init+0x158>)
 800177e:	22a8      	movs	r2, #168	; 0xa8
 8001780:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001782:	4b43      	ldr	r3, [pc, #268]	; (8001890 <MX_TIM1_Init+0x158>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001788:	4b41      	ldr	r3, [pc, #260]	; (8001890 <MX_TIM1_Init+0x158>)
 800178a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800178e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001790:	4b3f      	ldr	r3, [pc, #252]	; (8001890 <MX_TIM1_Init+0x158>)
 8001792:	2200      	movs	r2, #0
 8001794:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001796:	4b3e      	ldr	r3, [pc, #248]	; (8001890 <MX_TIM1_Init+0x158>)
 8001798:	2200      	movs	r2, #0
 800179a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179c:	4b3c      	ldr	r3, [pc, #240]	; (8001890 <MX_TIM1_Init+0x158>)
 800179e:	2200      	movs	r2, #0
 80017a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017a2:	483b      	ldr	r0, [pc, #236]	; (8001890 <MX_TIM1_Init+0x158>)
 80017a4:	f006 f94b 	bl	8007a3e <HAL_TIM_Base_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80017ae:	f000 f9e5 	bl	8001b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017bc:	4619      	mov	r1, r3
 80017be:	4834      	ldr	r0, [pc, #208]	; (8001890 <MX_TIM1_Init+0x158>)
 80017c0:	f006 fb70 	bl	8007ea4 <HAL_TIM_ConfigClockSource>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80017ca:	f000 f9d7 	bl	8001b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017ce:	4830      	ldr	r0, [pc, #192]	; (8001890 <MX_TIM1_Init+0x158>)
 80017d0:	f006 f984 	bl	8007adc <HAL_TIM_PWM_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80017da:	f000 f9cf 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017ea:	4619      	mov	r1, r3
 80017ec:	4828      	ldr	r0, [pc, #160]	; (8001890 <MX_TIM1_Init+0x158>)
 80017ee:	f006 ff3d 	bl	800866c <HAL_TIMEx_MasterConfigSynchronization>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80017f8:	f000 f9c0 	bl	8001b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017fc:	2360      	movs	r3, #96	; 0x60
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8001800:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001804:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001806:	2300      	movs	r3, #0
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800180a:	2300      	movs	r3, #0
 800180c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800181a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181e:	2200      	movs	r2, #0
 8001820:	4619      	mov	r1, r3
 8001822:	481b      	ldr	r0, [pc, #108]	; (8001890 <MX_TIM1_Init+0x158>)
 8001824:	f006 fa7c 	bl	8007d20 <HAL_TIM_PWM_ConfigChannel>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800182e:	f000 f9a5 	bl	8001b7c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183a:	2204      	movs	r2, #4
 800183c:	4619      	mov	r1, r3
 800183e:	4814      	ldr	r0, [pc, #80]	; (8001890 <MX_TIM1_Init+0x158>)
 8001840:	f006 fa6e 	bl	8007d20 <HAL_TIM_PWM_ConfigChannel>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800184a:	f000 f997 	bl	8001b7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001862:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001866:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	4619      	mov	r1, r3
 8001870:	4807      	ldr	r0, [pc, #28]	; (8001890 <MX_TIM1_Init+0x158>)
 8001872:	f006 ff77 	bl	8008764 <HAL_TIMEx_ConfigBreakDeadTime>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 800187c:	f000 f97e 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001880:	4803      	ldr	r0, [pc, #12]	; (8001890 <MX_TIM1_Init+0x158>)
 8001882:	f000 fadb 	bl	8001e3c <HAL_TIM_MspPostInit>

}
 8001886:	bf00      	nop
 8001888:	3758      	adds	r7, #88	; 0x58
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000308 	.word	0x20000308
 8001894:	40010000 	.word	0x40010000

08001898 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 800189e:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <MX_USART2_UART_Init+0x50>)
 80018a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018be:	220c      	movs	r2, #12
 80018c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c2:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018d0:	f006 ff9a 	bl	8008808 <HAL_UART_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018da:	f000 f94f 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000350 	.word	0x20000350
 80018e8:	40004400 	.word	0x40004400

080018ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_USART3_UART_Init+0x4c>)
 80018f2:	4a12      	ldr	r2, [pc, #72]	; (800193c <MX_USART3_UART_Init+0x50>)
 80018f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <MX_USART3_UART_Init+0x4c>)
 80018f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <MX_USART3_UART_Init+0x4c>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <MX_USART3_UART_Init+0x4c>)
 8001906:	2200      	movs	r2, #0
 8001908:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <MX_USART3_UART_Init+0x4c>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MX_USART3_UART_Init+0x4c>)
 8001912:	220c      	movs	r2, #12
 8001914:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <MX_USART3_UART_Init+0x4c>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <MX_USART3_UART_Init+0x4c>)
 800191e:	2200      	movs	r2, #0
 8001920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001922:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_USART3_UART_Init+0x4c>)
 8001924:	f006 ff70 	bl	8008808 <HAL_UART_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800192e:	f000 f925 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000398 	.word	0x20000398
 800193c:	40004800 	.word	0x40004800

08001940 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <MX_DMA_Init+0x3c>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a0b      	ldr	r2, [pc, #44]	; (800197c <MX_DMA_Init+0x3c>)
 8001950:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <MX_DMA_Init+0x3c>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	2100      	movs	r1, #0
 8001966:	200c      	movs	r0, #12
 8001968:	f000 fe39 	bl	80025de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800196c:	200c      	movs	r0, #12
 800196e:	f000 fe52 	bl	8002616 <HAL_NVIC_EnableIRQ>

}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800

08001980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08c      	sub	sp, #48	; 0x30
 8001984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001986:	f107 031c 	add.w	r3, r7, #28
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
 8001994:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
 800199a:	4b72      	ldr	r3, [pc, #456]	; (8001b64 <MX_GPIO_Init+0x1e4>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a71      	ldr	r2, [pc, #452]	; (8001b64 <MX_GPIO_Init+0x1e4>)
 80019a0:	f043 0310 	orr.w	r3, r3, #16
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b6f      	ldr	r3, [pc, #444]	; (8001b64 <MX_GPIO_Init+0x1e4>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0310 	and.w	r3, r3, #16
 80019ae:	61bb      	str	r3, [r7, #24]
 80019b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	4b6b      	ldr	r3, [pc, #428]	; (8001b64 <MX_GPIO_Init+0x1e4>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a6a      	ldr	r2, [pc, #424]	; (8001b64 <MX_GPIO_Init+0x1e4>)
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b68      	ldr	r3, [pc, #416]	; (8001b64 <MX_GPIO_Init+0x1e4>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	4b64      	ldr	r3, [pc, #400]	; (8001b64 <MX_GPIO_Init+0x1e4>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a63      	ldr	r2, [pc, #396]	; (8001b64 <MX_GPIO_Init+0x1e4>)
 80019d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b61      	ldr	r3, [pc, #388]	; (8001b64 <MX_GPIO_Init+0x1e4>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	4b5d      	ldr	r3, [pc, #372]	; (8001b64 <MX_GPIO_Init+0x1e4>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a5c      	ldr	r2, [pc, #368]	; (8001b64 <MX_GPIO_Init+0x1e4>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b5a      	ldr	r3, [pc, #360]	; (8001b64 <MX_GPIO_Init+0x1e4>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	4b56      	ldr	r3, [pc, #344]	; (8001b64 <MX_GPIO_Init+0x1e4>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a55      	ldr	r2, [pc, #340]	; (8001b64 <MX_GPIO_Init+0x1e4>)
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b53      	ldr	r3, [pc, #332]	; (8001b64 <MX_GPIO_Init+0x1e4>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	4b4f      	ldr	r3, [pc, #316]	; (8001b64 <MX_GPIO_Init+0x1e4>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a4e      	ldr	r2, [pc, #312]	; (8001b64 <MX_GPIO_Init+0x1e4>)
 8001a2c:	f043 0308 	orr.w	r3, r3, #8
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b4c      	ldr	r3, [pc, #304]	; (8001b64 <MX_GPIO_Init+0x1e4>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2108      	movs	r1, #8
 8001a42:	4849      	ldr	r0, [pc, #292]	; (8001b68 <MX_GPIO_Init+0x1e8>)
 8001a44:	f001 fba0 	bl	8003188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	4847      	ldr	r0, [pc, #284]	; (8001b6c <MX_GPIO_Init+0x1ec>)
 8001a4e:	f001 fb9b 	bl	8003188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001a52:	2200      	movs	r2, #0
 8001a54:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001a58:	4845      	ldr	r0, [pc, #276]	; (8001b70 <MX_GPIO_Init+0x1f0>)
 8001a5a:	f001 fb95 	bl	8003188 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001a5e:	2308      	movs	r3, #8
 8001a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a62:	2301      	movs	r3, #1
 8001a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001a6e:	f107 031c 	add.w	r3, r7, #28
 8001a72:	4619      	mov	r1, r3
 8001a74:	483c      	ldr	r0, [pc, #240]	; (8001b68 <MX_GPIO_Init+0x1e8>)
 8001a76:	f001 f9eb 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a8a:	f107 031c 	add.w	r3, r7, #28
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4836      	ldr	r0, [pc, #216]	; (8001b6c <MX_GPIO_Init+0x1ec>)
 8001a92:	f001 f9dd 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001a96:	2308      	movs	r3, #8
 8001a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001aaa:	f107 031c 	add.w	r3, r7, #28
 8001aae:	4619      	mov	r1, r3
 8001ab0:	482e      	ldr	r0, [pc, #184]	; (8001b6c <MX_GPIO_Init+0x1ec>)
 8001ab2:	f001 f9cd 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001aba:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ac4:	f107 031c 	add.w	r3, r7, #28
 8001ac8:	4619      	mov	r1, r3
 8001aca:	482a      	ldr	r0, [pc, #168]	; (8001b74 <MX_GPIO_Init+0x1f4>)
 8001acc:	f001 f9c0 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4825      	ldr	r0, [pc, #148]	; (8001b78 <MX_GPIO_Init+0x1f8>)
 8001ae4:	f001 f9b4 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001ae8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	2302      	movs	r3, #2
 8001af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2300      	movs	r3, #0
 8001af8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001afa:	2305      	movs	r3, #5
 8001afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001afe:	f107 031c 	add.w	r3, r7, #28
 8001b02:	4619      	mov	r1, r3
 8001b04:	481c      	ldr	r0, [pc, #112]	; (8001b78 <MX_GPIO_Init+0x1f8>)
 8001b06:	f001 f9a3 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001b0a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001b0e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b10:	2301      	movs	r3, #1
 8001b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	4619      	mov	r1, r3
 8001b22:	4813      	ldr	r0, [pc, #76]	; (8001b70 <MX_GPIO_Init+0x1f0>)
 8001b24:	f001 f994 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001b28:	2320      	movs	r3, #32
 8001b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b34:	f107 031c 	add.w	r3, r7, #28
 8001b38:	4619      	mov	r1, r3
 8001b3a:	480d      	ldr	r0, [pc, #52]	; (8001b70 <MX_GPIO_Init+0x1f0>)
 8001b3c:	f001 f988 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001b40:	2302      	movs	r3, #2
 8001b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b44:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	4619      	mov	r1, r3
 8001b54:	4804      	ldr	r0, [pc, #16]	; (8001b68 <MX_GPIO_Init+0x1e8>)
 8001b56:	f001 f97b 	bl	8002e50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b5a:	bf00      	nop
 8001b5c:	3730      	adds	r7, #48	; 0x30
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40020800 	.word	0x40020800
 8001b70:	40020c00 	.word	0x40020c00
 8001b74:	40020000 	.word	0x40020000
 8001b78:	40020400 	.word	0x40020400

08001b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b80:	b672      	cpsid	i
}
 8001b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <Error_Handler+0x8>
	...

08001b88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	4a0f      	ldr	r2, [pc, #60]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	603b      	str	r3, [r7, #0]
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	4a08      	ldr	r2, [pc, #32]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bc6:	2007      	movs	r0, #7
 8001bc8:	f000 fcfe 	bl	80025c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40023800 	.word	0x40023800

08001bd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <HAL_I2C_MspInit+0x84>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d12c      	bne.n	8001c54 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <HAL_I2C_MspInit+0x88>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <HAL_I2C_MspInit+0x88>)
 8001c04:	f043 0302 	orr.w	r3, r3, #2
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <HAL_I2C_MspInit+0x88>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001c16:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c1c:	2312      	movs	r3, #18
 8001c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c20:	2301      	movs	r3, #1
 8001c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c28:	2304      	movs	r3, #4
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4619      	mov	r1, r3
 8001c32:	480c      	ldr	r0, [pc, #48]	; (8001c64 <HAL_I2C_MspInit+0x8c>)
 8001c34:	f001 f90c 	bl	8002e50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <HAL_I2C_MspInit+0x88>)
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	4a07      	ldr	r2, [pc, #28]	; (8001c60 <HAL_I2C_MspInit+0x88>)
 8001c42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c46:	6413      	str	r3, [r2, #64]	; 0x40
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_I2C_MspInit+0x88>)
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c54:	bf00      	nop
 8001c56:	3728      	adds	r7, #40	; 0x28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40005400 	.word	0x40005400
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40020400 	.word	0x40020400

08001c68 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08e      	sub	sp, #56	; 0x38
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a31      	ldr	r2, [pc, #196]	; (8001d58 <HAL_I2S_MspInit+0xf0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d15a      	bne.n	8001d4e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001c9c:	23c0      	movs	r3, #192	; 0xc0
 8001c9e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f005 fcfd 	bl	80076a8 <HAL_RCCEx_PeriphCLKConfig>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001cb4:	f7ff ff62 	bl	8001b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001cb8:	2300      	movs	r3, #0
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <HAL_I2S_MspInit+0xf4>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	4a26      	ldr	r2, [pc, #152]	; (8001d5c <HAL_I2S_MspInit+0xf4>)
 8001cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc8:	4b24      	ldr	r3, [pc, #144]	; (8001d5c <HAL_I2S_MspInit+0xf4>)
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <HAL_I2S_MspInit+0xf4>)
 8001cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cdc:	4a1f      	ldr	r2, [pc, #124]	; (8001d5c <HAL_I2S_MspInit+0xf4>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <HAL_I2S_MspInit+0xf4>)
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <HAL_I2S_MspInit+0xf4>)
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf8:	4a18      	ldr	r2, [pc, #96]	; (8001d5c <HAL_I2S_MspInit+0xf4>)
 8001cfa:	f043 0304 	orr.w	r3, r3, #4
 8001cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8001d00:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <HAL_I2S_MspInit+0xf4>)
 8001d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001d0c:	2310      	movs	r3, #16
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d10:	2302      	movs	r3, #2
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d1c:	2306      	movs	r3, #6
 8001d1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d24:	4619      	mov	r1, r3
 8001d26:	480e      	ldr	r0, [pc, #56]	; (8001d60 <HAL_I2S_MspInit+0xf8>)
 8001d28:	f001 f892 	bl	8002e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001d2c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d3e:	2306      	movs	r3, #6
 8001d40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d46:	4619      	mov	r1, r3
 8001d48:	4806      	ldr	r0, [pc, #24]	; (8001d64 <HAL_I2S_MspInit+0xfc>)
 8001d4a:	f001 f881 	bl	8002e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d4e:	bf00      	nop
 8001d50:	3738      	adds	r7, #56	; 0x38
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40003c00 	.word	0x40003c00
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40020000 	.word	0x40020000
 8001d64:	40020800 	.word	0x40020800

08001d68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	; 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a19      	ldr	r2, [pc, #100]	; (8001dec <HAL_SPI_MspInit+0x84>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d12b      	bne.n	8001de2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <HAL_SPI_MspInit+0x88>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	4a17      	ldr	r2, [pc, #92]	; (8001df0 <HAL_SPI_MspInit+0x88>)
 8001d94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d98:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <HAL_SPI_MspInit+0x88>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_SPI_MspInit+0x88>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a10      	ldr	r2, [pc, #64]	; (8001df0 <HAL_SPI_MspInit+0x88>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <HAL_SPI_MspInit+0x88>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001dc2:	23e0      	movs	r3, #224	; 0xe0
 8001dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dd2:	2305      	movs	r3, #5
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4805      	ldr	r0, [pc, #20]	; (8001df4 <HAL_SPI_MspInit+0x8c>)
 8001dde:	f001 f837 	bl	8002e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001de2:	bf00      	nop
 8001de4:	3728      	adds	r7, #40	; 0x28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40013000 	.word	0x40013000
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40020000 	.word	0x40020000

08001df8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0b      	ldr	r2, [pc, #44]	; (8001e34 <HAL_TIM_Base_MspInit+0x3c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d10d      	bne.n	8001e26 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <HAL_TIM_Base_MspInit+0x40>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	4a09      	ldr	r2, [pc, #36]	; (8001e38 <HAL_TIM_Base_MspInit+0x40>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1a:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <HAL_TIM_Base_MspInit+0x40>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e26:	bf00      	nop
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40010000 	.word	0x40010000
 8001e38:	40023800 	.word	0x40023800

08001e3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 030c 	add.w	r3, r7, #12
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <HAL_TIM_MspPostInit+0x68>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d11e      	bne.n	8001e9c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <HAL_TIM_MspPostInit+0x6c>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a10      	ldr	r2, [pc, #64]	; (8001ea8 <HAL_TIM_MspPostInit+0x6c>)
 8001e68:	f043 0310 	orr.w	r3, r3, #16
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <HAL_TIM_MspPostInit+0x6c>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0310 	and.w	r3, r3, #16
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001e7a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001e7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e90:	f107 030c 	add.w	r3, r7, #12
 8001e94:	4619      	mov	r1, r3
 8001e96:	4805      	ldr	r0, [pc, #20]	; (8001eac <HAL_TIM_MspPostInit+0x70>)
 8001e98:	f000 ffda 	bl	8002e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e9c:	bf00      	nop
 8001e9e:	3720      	adds	r7, #32
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40010000 	.word	0x40010000
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40021000 	.word	0x40021000

08001eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08c      	sub	sp, #48	; 0x30
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 031c 	add.w	r3, r7, #28
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a5e      	ldr	r2, [pc, #376]	; (8002048 <HAL_UART_MspInit+0x198>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d12c      	bne.n	8001f2c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61bb      	str	r3, [r7, #24]
 8001ed6:	4b5d      	ldr	r3, [pc, #372]	; (800204c <HAL_UART_MspInit+0x19c>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	4a5c      	ldr	r2, [pc, #368]	; (800204c <HAL_UART_MspInit+0x19c>)
 8001edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee2:	4b5a      	ldr	r3, [pc, #360]	; (800204c <HAL_UART_MspInit+0x19c>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	61bb      	str	r3, [r7, #24]
 8001eec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	4b56      	ldr	r3, [pc, #344]	; (800204c <HAL_UART_MspInit+0x19c>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a55      	ldr	r2, [pc, #340]	; (800204c <HAL_UART_MspInit+0x19c>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b53      	ldr	r3, [pc, #332]	; (800204c <HAL_UART_MspInit+0x19c>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f0a:	230c      	movs	r3, #12
 8001f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f16:	2303      	movs	r3, #3
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f1a:	2307      	movs	r3, #7
 8001f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1e:	f107 031c 	add.w	r3, r7, #28
 8001f22:	4619      	mov	r1, r3
 8001f24:	484a      	ldr	r0, [pc, #296]	; (8002050 <HAL_UART_MspInit+0x1a0>)
 8001f26:	f000 ff93 	bl	8002e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f2a:	e088      	b.n	800203e <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART3)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a48      	ldr	r2, [pc, #288]	; (8002054 <HAL_UART_MspInit+0x1a4>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	f040 8083 	bne.w	800203e <HAL_UART_MspInit+0x18e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f38:	2300      	movs	r3, #0
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	4b43      	ldr	r3, [pc, #268]	; (800204c <HAL_UART_MspInit+0x19c>)
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	4a42      	ldr	r2, [pc, #264]	; (800204c <HAL_UART_MspInit+0x19c>)
 8001f42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f46:	6413      	str	r3, [r2, #64]	; 0x40
 8001f48:	4b40      	ldr	r3, [pc, #256]	; (800204c <HAL_UART_MspInit+0x19c>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f54:	2300      	movs	r3, #0
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	4b3c      	ldr	r3, [pc, #240]	; (800204c <HAL_UART_MspInit+0x19c>)
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5c:	4a3b      	ldr	r2, [pc, #236]	; (800204c <HAL_UART_MspInit+0x19c>)
 8001f5e:	f043 0302 	orr.w	r3, r3, #2
 8001f62:	6313      	str	r3, [r2, #48]	; 0x30
 8001f64:	4b39      	ldr	r3, [pc, #228]	; (800204c <HAL_UART_MspInit+0x19c>)
 8001f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f70:	2300      	movs	r3, #0
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	4b35      	ldr	r3, [pc, #212]	; (800204c <HAL_UART_MspInit+0x19c>)
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	4a34      	ldr	r2, [pc, #208]	; (800204c <HAL_UART_MspInit+0x19c>)
 8001f7a:	f043 0308 	orr.w	r3, r3, #8
 8001f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f80:	4b32      	ldr	r3, [pc, #200]	; (800204c <HAL_UART_MspInit+0x19c>)
 8001f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	2302      	movs	r3, #2
 8001f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f9e:	2307      	movs	r3, #7
 8001fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa2:	f107 031c 	add.w	r3, r7, #28
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	482b      	ldr	r0, [pc, #172]	; (8002058 <HAL_UART_MspInit+0x1a8>)
 8001faa:	f000 ff51 	bl	8002e50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fc0:	2307      	movs	r3, #7
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fc4:	f107 031c 	add.w	r3, r7, #28
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4824      	ldr	r0, [pc, #144]	; (800205c <HAL_UART_MspInit+0x1ac>)
 8001fcc:	f000 ff40 	bl	8002e50 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001fd0:	4b23      	ldr	r3, [pc, #140]	; (8002060 <HAL_UART_MspInit+0x1b0>)
 8001fd2:	4a24      	ldr	r2, [pc, #144]	; (8002064 <HAL_UART_MspInit+0x1b4>)
 8001fd4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001fd6:	4b22      	ldr	r3, [pc, #136]	; (8002060 <HAL_UART_MspInit+0x1b0>)
 8001fd8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fdc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fde:	4b20      	ldr	r3, [pc, #128]	; (8002060 <HAL_UART_MspInit+0x1b0>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fe4:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <HAL_UART_MspInit+0x1b0>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fea:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <HAL_UART_MspInit+0x1b0>)
 8001fec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ff0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ff2:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <HAL_UART_MspInit+0x1b0>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <HAL_UART_MspInit+0x1b0>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001ffe:	4b18      	ldr	r3, [pc, #96]	; (8002060 <HAL_UART_MspInit+0x1b0>)
 8002000:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002004:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002006:	4b16      	ldr	r3, [pc, #88]	; (8002060 <HAL_UART_MspInit+0x1b0>)
 8002008:	2200      	movs	r2, #0
 800200a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800200c:	4b14      	ldr	r3, [pc, #80]	; (8002060 <HAL_UART_MspInit+0x1b0>)
 800200e:	2200      	movs	r2, #0
 8002010:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002012:	4813      	ldr	r0, [pc, #76]	; (8002060 <HAL_UART_MspInit+0x1b0>)
 8002014:	f000 fb1a 	bl	800264c <HAL_DMA_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_UART_MspInit+0x172>
      Error_Handler();
 800201e:	f7ff fdad 	bl	8001b7c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a0e      	ldr	r2, [pc, #56]	; (8002060 <HAL_UART_MspInit+0x1b0>)
 8002026:	63da      	str	r2, [r3, #60]	; 0x3c
 8002028:	4a0d      	ldr	r2, [pc, #52]	; (8002060 <HAL_UART_MspInit+0x1b0>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800202e:	2200      	movs	r2, #0
 8002030:	2100      	movs	r1, #0
 8002032:	2027      	movs	r0, #39	; 0x27
 8002034:	f000 fad3 	bl	80025de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002038:	2027      	movs	r0, #39	; 0x27
 800203a:	f000 faec 	bl	8002616 <HAL_NVIC_EnableIRQ>
}
 800203e:	bf00      	nop
 8002040:	3730      	adds	r7, #48	; 0x30
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40004400 	.word	0x40004400
 800204c:	40023800 	.word	0x40023800
 8002050:	40020000 	.word	0x40020000
 8002054:	40004800 	.word	0x40004800
 8002058:	40020400 	.word	0x40020400
 800205c:	40020c00 	.word	0x40020c00
 8002060:	200003e0 	.word	0x200003e0
 8002064:	40026028 	.word	0x40026028

08002068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800206c:	e7fe      	b.n	800206c <NMI_Handler+0x4>

0800206e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002072:	e7fe      	b.n	8002072 <HardFault_Handler+0x4>

08002074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002078:	e7fe      	b.n	8002078 <MemManage_Handler+0x4>

0800207a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800207e:	e7fe      	b.n	800207e <BusFault_Handler+0x4>

08002080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <UsageFault_Handler+0x4>

08002086 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b4:	f000 f974 	bl	80023a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}

080020bc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80020c0:	4802      	ldr	r0, [pc, #8]	; (80020cc <DMA1_Stream1_IRQHandler+0x10>)
 80020c2:	f000 fc5b 	bl	800297c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200003e0 	.word	0x200003e0

080020d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020d4:	4802      	ldr	r0, [pc, #8]	; (80020e0 <USART3_IRQHandler+0x10>)
 80020d6:	f006 fc97 	bl	8008a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000398 	.word	0x20000398

080020e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <OTG_FS_IRQHandler+0x10>)
 80020ea:	f001 fb47 	bl	800377c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000ca4 	.word	0x20000ca4

080020f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return 1;
 80020fc:	2301      	movs	r3, #1
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <_kill>:

int _kill(int pid, int sig)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002112:	f00d f999 	bl	800f448 <__errno>
 8002116:	4603      	mov	r3, r0
 8002118:	2216      	movs	r2, #22
 800211a:	601a      	str	r2, [r3, #0]
  return -1;
 800211c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <_exit>:

void _exit (int status)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002130:	f04f 31ff 	mov.w	r1, #4294967295
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff ffe7 	bl	8002108 <_kill>
  while (1) {}    /* Make sure we hang here */
 800213a:	e7fe      	b.n	800213a <_exit+0x12>

0800213c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	e00a      	b.n	8002164 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800214e:	f3af 8000 	nop.w
 8002152:	4601      	mov	r1, r0
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	60ba      	str	r2, [r7, #8]
 800215a:	b2ca      	uxtb	r2, r1
 800215c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	3301      	adds	r3, #1
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	429a      	cmp	r2, r3
 800216a:	dbf0      	blt.n	800214e <_read+0x12>
  }

  return len;
 800216c:	687b      	ldr	r3, [r7, #4]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b086      	sub	sp, #24
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	e009      	b.n	800219c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	60ba      	str	r2, [r7, #8]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	3301      	adds	r3, #1
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	dbf1      	blt.n	8002188 <_write+0x12>
  }
  return len;
 80021a4:	687b      	ldr	r3, [r7, #4]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <_close>:

int _close(int file)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021d6:	605a      	str	r2, [r3, #4]
  return 0;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <_isatty>:

int _isatty(int file)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021ee:	2301      	movs	r3, #1
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002220:	4a14      	ldr	r2, [pc, #80]	; (8002274 <_sbrk+0x5c>)
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <_sbrk+0x60>)
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800222c:	4b13      	ldr	r3, [pc, #76]	; (800227c <_sbrk+0x64>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d102      	bne.n	800223a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <_sbrk+0x64>)
 8002236:	4a12      	ldr	r2, [pc, #72]	; (8002280 <_sbrk+0x68>)
 8002238:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <_sbrk+0x64>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	429a      	cmp	r2, r3
 8002246:	d207      	bcs.n	8002258 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002248:	f00d f8fe 	bl	800f448 <__errno>
 800224c:	4603      	mov	r3, r0
 800224e:	220c      	movs	r2, #12
 8002250:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002252:	f04f 33ff 	mov.w	r3, #4294967295
 8002256:	e009      	b.n	800226c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002258:	4b08      	ldr	r3, [pc, #32]	; (800227c <_sbrk+0x64>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800225e:	4b07      	ldr	r3, [pc, #28]	; (800227c <_sbrk+0x64>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	4a05      	ldr	r2, [pc, #20]	; (800227c <_sbrk+0x64>)
 8002268:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800226a:	68fb      	ldr	r3, [r7, #12]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20020000 	.word	0x20020000
 8002278:	00000400 	.word	0x00000400
 800227c:	200008c0 	.word	0x200008c0
 8002280:	200011d0 	.word	0x200011d0

08002284 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <SystemInit+0x20>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	4a05      	ldr	r2, [pc, #20]	; (80022a4 <SystemInit+0x20>)
 8002290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002294:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80022a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80022ac:	f7ff ffea 	bl	8002284 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022b0:	480c      	ldr	r0, [pc, #48]	; (80022e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022b2:	490d      	ldr	r1, [pc, #52]	; (80022e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022b4:	4a0d      	ldr	r2, [pc, #52]	; (80022ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022b8:	e002      	b.n	80022c0 <LoopCopyDataInit>

080022ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022be:	3304      	adds	r3, #4

080022c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c4:	d3f9      	bcc.n	80022ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022c6:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022c8:	4c0a      	ldr	r4, [pc, #40]	; (80022f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022cc:	e001      	b.n	80022d2 <LoopFillZerobss>

080022ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022d0:	3204      	adds	r2, #4

080022d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d4:	d3fb      	bcc.n	80022ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022d6:	f00d f8bd 	bl	800f454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022da:	f7ff f85f 	bl	800139c <main>
  bx  lr    
 80022de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e8:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80022ec:	0801232c 	.word	0x0801232c
  ldr r2, =_sbss
 80022f0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80022f4:	200011d0 	.word	0x200011d0

080022f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022f8:	e7fe      	b.n	80022f8 <ADC_IRQHandler>
	...

080022fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002300:	4b0e      	ldr	r3, [pc, #56]	; (800233c <HAL_Init+0x40>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0d      	ldr	r2, [pc, #52]	; (800233c <HAL_Init+0x40>)
 8002306:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800230a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_Init+0x40>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a0a      	ldr	r2, [pc, #40]	; (800233c <HAL_Init+0x40>)
 8002312:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002316:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <HAL_Init+0x40>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a07      	ldr	r2, [pc, #28]	; (800233c <HAL_Init+0x40>)
 800231e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002322:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002324:	2003      	movs	r0, #3
 8002326:	f000 f94f 	bl	80025c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800232a:	2000      	movs	r0, #0
 800232c:	f000 f808 	bl	8002340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002330:	f7ff fc2a 	bl	8001b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023c00 	.word	0x40023c00

08002340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_InitTick+0x54>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_InitTick+0x58>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	4619      	mov	r1, r3
 8002352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002356:	fbb3 f3f1 	udiv	r3, r3, r1
 800235a:	fbb2 f3f3 	udiv	r3, r2, r3
 800235e:	4618      	mov	r0, r3
 8002360:	f000 f967 	bl	8002632 <HAL_SYSTICK_Config>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e00e      	b.n	800238c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b0f      	cmp	r3, #15
 8002372:	d80a      	bhi.n	800238a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002374:	2200      	movs	r2, #0
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	f04f 30ff 	mov.w	r0, #4294967295
 800237c:	f000 f92f 	bl	80025de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002380:	4a06      	ldr	r2, [pc, #24]	; (800239c <HAL_InitTick+0x5c>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	e000      	b.n	800238c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20000004 	.word	0x20000004
 8002398:	2000000c 	.word	0x2000000c
 800239c:	20000008 	.word	0x20000008

080023a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_IncTick+0x20>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_IncTick+0x24>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <HAL_IncTick+0x24>)
 80023b2:	6013      	str	r3, [r2, #0]
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	2000000c 	.word	0x2000000c
 80023c4:	200008c4 	.word	0x200008c4

080023c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return uwTick;
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <HAL_GetTick+0x14>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	200008c4 	.word	0x200008c4

080023e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023e8:	f7ff ffee 	bl	80023c8 <HAL_GetTick>
 80023ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f8:	d005      	beq.n	8002406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023fa:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <HAL_Delay+0x44>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4413      	add	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002406:	bf00      	nop
 8002408:	f7ff ffde 	bl	80023c8 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	429a      	cmp	r2, r3
 8002416:	d8f7      	bhi.n	8002408 <HAL_Delay+0x28>
  {
  }
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	2000000c 	.word	0x2000000c

08002428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <__NVIC_SetPriorityGrouping+0x44>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002444:	4013      	ands	r3, r2
 8002446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002450:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245a:	4a04      	ldr	r2, [pc, #16]	; (800246c <__NVIC_SetPriorityGrouping+0x44>)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	60d3      	str	r3, [r2, #12]
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002474:	4b04      	ldr	r3, [pc, #16]	; (8002488 <__NVIC_GetPriorityGrouping+0x18>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	0a1b      	lsrs	r3, r3, #8
 800247a:	f003 0307 	and.w	r3, r3, #7
}
 800247e:	4618      	mov	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	2b00      	cmp	r3, #0
 800249c:	db0b      	blt.n	80024b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	f003 021f 	and.w	r2, r3, #31
 80024a4:	4907      	ldr	r1, [pc, #28]	; (80024c4 <__NVIC_EnableIRQ+0x38>)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	2001      	movs	r0, #1
 80024ae:	fa00 f202 	lsl.w	r2, r0, r2
 80024b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	e000e100 	.word	0xe000e100

080024c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	6039      	str	r1, [r7, #0]
 80024d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	db0a      	blt.n	80024f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	490c      	ldr	r1, [pc, #48]	; (8002514 <__NVIC_SetPriority+0x4c>)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	0112      	lsls	r2, r2, #4
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	440b      	add	r3, r1
 80024ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f0:	e00a      	b.n	8002508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4908      	ldr	r1, [pc, #32]	; (8002518 <__NVIC_SetPriority+0x50>)
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	3b04      	subs	r3, #4
 8002500:	0112      	lsls	r2, r2, #4
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	440b      	add	r3, r1
 8002506:	761a      	strb	r2, [r3, #24]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000e100 	.word	0xe000e100
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f1c3 0307 	rsb	r3, r3, #7
 8002536:	2b04      	cmp	r3, #4
 8002538:	bf28      	it	cs
 800253a:	2304      	movcs	r3, #4
 800253c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3304      	adds	r3, #4
 8002542:	2b06      	cmp	r3, #6
 8002544:	d902      	bls.n	800254c <NVIC_EncodePriority+0x30>
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3b03      	subs	r3, #3
 800254a:	e000      	b.n	800254e <NVIC_EncodePriority+0x32>
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002550:	f04f 32ff 	mov.w	r2, #4294967295
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43da      	mvns	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	401a      	ands	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002564:	f04f 31ff 	mov.w	r1, #4294967295
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	43d9      	mvns	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002574:	4313      	orrs	r3, r2
         );
}
 8002576:	4618      	mov	r0, r3
 8002578:	3724      	adds	r7, #36	; 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3b01      	subs	r3, #1
 8002590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002594:	d301      	bcc.n	800259a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002596:	2301      	movs	r3, #1
 8002598:	e00f      	b.n	80025ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800259a:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <SysTick_Config+0x40>)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3b01      	subs	r3, #1
 80025a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025a2:	210f      	movs	r1, #15
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295
 80025a8:	f7ff ff8e 	bl	80024c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <SysTick_Config+0x40>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025b2:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <SysTick_Config+0x40>)
 80025b4:	2207      	movs	r2, #7
 80025b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	e000e010 	.word	0xe000e010

080025c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff ff29 	bl	8002428 <__NVIC_SetPriorityGrouping>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025de:	b580      	push	{r7, lr}
 80025e0:	b086      	sub	sp, #24
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	4603      	mov	r3, r0
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	607a      	str	r2, [r7, #4]
 80025ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f0:	f7ff ff3e 	bl	8002470 <__NVIC_GetPriorityGrouping>
 80025f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	6978      	ldr	r0, [r7, #20]
 80025fc:	f7ff ff8e 	bl	800251c <NVIC_EncodePriority>
 8002600:	4602      	mov	r2, r0
 8002602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002606:	4611      	mov	r1, r2
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff5d 	bl	80024c8 <__NVIC_SetPriority>
}
 800260e:	bf00      	nop
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	4603      	mov	r3, r0
 800261e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff31 	bl	800248c <__NVIC_EnableIRQ>
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff ffa2 	bl	8002584 <SysTick_Config>
 8002640:	4603      	mov	r3, r0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002658:	f7ff feb6 	bl	80023c8 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e099      	b.n	800279c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2202      	movs	r2, #2
 800266c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0201 	bic.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002688:	e00f      	b.n	80026aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800268a:	f7ff fe9d 	bl	80023c8 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b05      	cmp	r3, #5
 8002696:	d908      	bls.n	80026aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2220      	movs	r2, #32
 800269c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2203      	movs	r2, #3
 80026a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e078      	b.n	800279c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1e8      	bne.n	800268a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	4b38      	ldr	r3, [pc, #224]	; (80027a4 <HAL_DMA_Init+0x158>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	2b04      	cmp	r3, #4
 8002702:	d107      	bne.n	8002714 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270c:	4313      	orrs	r3, r2
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f023 0307 	bic.w	r3, r3, #7
 800272a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	4313      	orrs	r3, r2
 8002734:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	2b04      	cmp	r3, #4
 800273c:	d117      	bne.n	800276e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4313      	orrs	r3, r2
 8002746:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00e      	beq.n	800276e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 fb01 	bl	8002d58 <DMA_CheckFifoParam>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d008      	beq.n	800276e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2240      	movs	r2, #64	; 0x40
 8002760:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800276a:	2301      	movs	r3, #1
 800276c:	e016      	b.n	800279c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fab8 	bl	8002cec <DMA_CalcBaseAndBitshift>
 800277c:	4603      	mov	r3, r0
 800277e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002784:	223f      	movs	r2, #63	; 0x3f
 8002786:	409a      	lsls	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	f010803f 	.word	0xf010803f

080027a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_DMA_Start_IT+0x26>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e040      	b.n	8002850 <HAL_DMA_Start_IT+0xa8>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d12f      	bne.n	8002842 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2202      	movs	r2, #2
 80027e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68b9      	ldr	r1, [r7, #8]
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 fa4a 	bl	8002c90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002800:	223f      	movs	r2, #63	; 0x3f
 8002802:	409a      	lsls	r2, r3
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0216 	orr.w	r2, r2, #22
 8002816:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	2b00      	cmp	r3, #0
 800281e:	d007      	beq.n	8002830 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0208 	orr.w	r2, r2, #8
 800282e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	e005      	b.n	800284e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800284a:	2302      	movs	r3, #2
 800284c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800284e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002864:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002866:	f7ff fdaf 	bl	80023c8 <HAL_GetTick>
 800286a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d008      	beq.n	800288a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e052      	b.n	8002930 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0216 	bic.w	r2, r2, #22
 8002898:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695a      	ldr	r2, [r3, #20]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d103      	bne.n	80028ba <HAL_DMA_Abort+0x62>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d007      	beq.n	80028ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0208 	bic.w	r2, r2, #8
 80028c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0201 	bic.w	r2, r2, #1
 80028d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028da:	e013      	b.n	8002904 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028dc:	f7ff fd74 	bl	80023c8 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b05      	cmp	r3, #5
 80028e8:	d90c      	bls.n	8002904 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2220      	movs	r2, #32
 80028ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2203      	movs	r2, #3
 80028f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e015      	b.n	8002930 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1e4      	bne.n	80028dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002916:	223f      	movs	r2, #63	; 0x3f
 8002918:	409a      	lsls	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d004      	beq.n	8002956 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e00c      	b.n	8002970 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2205      	movs	r2, #5
 800295a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0201 	bic.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002988:	4b8e      	ldr	r3, [pc, #568]	; (8002bc4 <HAL_DMA_IRQHandler+0x248>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a8e      	ldr	r2, [pc, #568]	; (8002bc8 <HAL_DMA_IRQHandler+0x24c>)
 800298e:	fba2 2303 	umull	r2, r3, r2, r3
 8002992:	0a9b      	lsrs	r3, r3, #10
 8002994:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a6:	2208      	movs	r2, #8
 80029a8:	409a      	lsls	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d01a      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0204 	bic.w	r2, r2, #4
 80029ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d4:	2208      	movs	r2, #8
 80029d6:	409a      	lsls	r2, r3
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e0:	f043 0201 	orr.w	r2, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ec:	2201      	movs	r2, #1
 80029ee:	409a      	lsls	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d012      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00b      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a16:	f043 0202 	orr.w	r2, r3, #2
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a22:	2204      	movs	r2, #4
 8002a24:	409a      	lsls	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d012      	beq.n	8002a54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00b      	beq.n	8002a54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a40:	2204      	movs	r2, #4
 8002a42:	409a      	lsls	r2, r3
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4c:	f043 0204 	orr.w	r2, r3, #4
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a58:	2210      	movs	r2, #16
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d043      	beq.n	8002aec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d03c      	beq.n	8002aec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a76:	2210      	movs	r2, #16
 8002a78:	409a      	lsls	r2, r3
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d018      	beq.n	8002abe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d108      	bne.n	8002aac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d024      	beq.n	8002aec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	4798      	blx	r3
 8002aaa:	e01f      	b.n	8002aec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01b      	beq.n	8002aec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	4798      	blx	r3
 8002abc:	e016      	b.n	8002aec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d107      	bne.n	8002adc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0208 	bic.w	r2, r2, #8
 8002ada:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af0:	2220      	movs	r2, #32
 8002af2:	409a      	lsls	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 808f 	beq.w	8002c1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 8087 	beq.w	8002c1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b12:	2220      	movs	r2, #32
 8002b14:	409a      	lsls	r2, r3
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b05      	cmp	r3, #5
 8002b24:	d136      	bne.n	8002b94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0216 	bic.w	r2, r2, #22
 8002b34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695a      	ldr	r2, [r3, #20]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d103      	bne.n	8002b56 <HAL_DMA_IRQHandler+0x1da>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d007      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0208 	bic.w	r2, r2, #8
 8002b64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6a:	223f      	movs	r2, #63	; 0x3f
 8002b6c:	409a      	lsls	r2, r3
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d07e      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	4798      	blx	r3
        }
        return;
 8002b92:	e079      	b.n	8002c88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d01d      	beq.n	8002bde <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10d      	bne.n	8002bcc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d031      	beq.n	8002c1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	4798      	blx	r3
 8002bc0:	e02c      	b.n	8002c1c <HAL_DMA_IRQHandler+0x2a0>
 8002bc2:	bf00      	nop
 8002bc4:	20000004 	.word	0x20000004
 8002bc8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d023      	beq.n	8002c1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	4798      	blx	r3
 8002bdc:	e01e      	b.n	8002c1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10f      	bne.n	8002c0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0210 	bic.w	r2, r2, #16
 8002bfa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d032      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d022      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2205      	movs	r2, #5
 8002c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0201 	bic.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d307      	bcc.n	8002c64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f2      	bne.n	8002c48 <HAL_DMA_IRQHandler+0x2cc>
 8002c62:	e000      	b.n	8002c66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d005      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	4798      	blx	r3
 8002c86:	e000      	b.n	8002c8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c88:	bf00      	nop
    }
  }
}
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2b40      	cmp	r3, #64	; 0x40
 8002cbc:	d108      	bne.n	8002cd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002cce:	e007      	b.n	8002ce0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	60da      	str	r2, [r3, #12]
}
 8002ce0:	bf00      	nop
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	3b10      	subs	r3, #16
 8002cfc:	4a14      	ldr	r2, [pc, #80]	; (8002d50 <DMA_CalcBaseAndBitshift+0x64>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	091b      	lsrs	r3, r3, #4
 8002d04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d06:	4a13      	ldr	r2, [pc, #76]	; (8002d54 <DMA_CalcBaseAndBitshift+0x68>)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d909      	bls.n	8002d2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d22:	f023 0303 	bic.w	r3, r3, #3
 8002d26:	1d1a      	adds	r2, r3, #4
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	659a      	str	r2, [r3, #88]	; 0x58
 8002d2c:	e007      	b.n	8002d3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d36:	f023 0303 	bic.w	r3, r3, #3
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	aaaaaaab 	.word	0xaaaaaaab
 8002d54:	08011ee8 	.word	0x08011ee8

08002d58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d60:	2300      	movs	r3, #0
 8002d62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d11f      	bne.n	8002db2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d856      	bhi.n	8002e26 <DMA_CheckFifoParam+0xce>
 8002d78:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <DMA_CheckFifoParam+0x28>)
 8002d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7e:	bf00      	nop
 8002d80:	08002d91 	.word	0x08002d91
 8002d84:	08002da3 	.word	0x08002da3
 8002d88:	08002d91 	.word	0x08002d91
 8002d8c:	08002e27 	.word	0x08002e27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d046      	beq.n	8002e2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002da0:	e043      	b.n	8002e2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002daa:	d140      	bne.n	8002e2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db0:	e03d      	b.n	8002e2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dba:	d121      	bne.n	8002e00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d837      	bhi.n	8002e32 <DMA_CheckFifoParam+0xda>
 8002dc2:	a201      	add	r2, pc, #4	; (adr r2, 8002dc8 <DMA_CheckFifoParam+0x70>)
 8002dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc8:	08002dd9 	.word	0x08002dd9
 8002dcc:	08002ddf 	.word	0x08002ddf
 8002dd0:	08002dd9 	.word	0x08002dd9
 8002dd4:	08002df1 	.word	0x08002df1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
      break;
 8002ddc:	e030      	b.n	8002e40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d025      	beq.n	8002e36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dee:	e022      	b.n	8002e36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002df8:	d11f      	bne.n	8002e3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dfe:	e01c      	b.n	8002e3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d903      	bls.n	8002e0e <DMA_CheckFifoParam+0xb6>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d003      	beq.n	8002e14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e0c:	e018      	b.n	8002e40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	73fb      	strb	r3, [r7, #15]
      break;
 8002e12:	e015      	b.n	8002e40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00e      	beq.n	8002e3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
      break;
 8002e24:	e00b      	b.n	8002e3e <DMA_CheckFifoParam+0xe6>
      break;
 8002e26:	bf00      	nop
 8002e28:	e00a      	b.n	8002e40 <DMA_CheckFifoParam+0xe8>
      break;
 8002e2a:	bf00      	nop
 8002e2c:	e008      	b.n	8002e40 <DMA_CheckFifoParam+0xe8>
      break;
 8002e2e:	bf00      	nop
 8002e30:	e006      	b.n	8002e40 <DMA_CheckFifoParam+0xe8>
      break;
 8002e32:	bf00      	nop
 8002e34:	e004      	b.n	8002e40 <DMA_CheckFifoParam+0xe8>
      break;
 8002e36:	bf00      	nop
 8002e38:	e002      	b.n	8002e40 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e3a:	bf00      	nop
 8002e3c:	e000      	b.n	8002e40 <DMA_CheckFifoParam+0xe8>
      break;
 8002e3e:	bf00      	nop
    }
  } 
  
  return status; 
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop

08002e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b089      	sub	sp, #36	; 0x24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]
 8002e6a:	e16b      	b.n	8003144 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	f040 815a 	bne.w	800313e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d005      	beq.n	8002ea2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d130      	bne.n	8002f04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	2203      	movs	r2, #3
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ed8:	2201      	movs	r2, #1
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	091b      	lsrs	r3, r3, #4
 8002eee:	f003 0201 	and.w	r2, r3, #1
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 0303 	and.w	r3, r3, #3
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d017      	beq.n	8002f40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4013      	ands	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 0303 	and.w	r3, r3, #3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d123      	bne.n	8002f94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	08da      	lsrs	r2, r3, #3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3208      	adds	r2, #8
 8002f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	220f      	movs	r2, #15
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	08da      	lsrs	r2, r3, #3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3208      	adds	r2, #8
 8002f8e:	69b9      	ldr	r1, [r7, #24]
 8002f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 0203 	and.w	r2, r3, #3
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 80b4 	beq.w	800313e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	4b60      	ldr	r3, [pc, #384]	; (800315c <HAL_GPIO_Init+0x30c>)
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	4a5f      	ldr	r2, [pc, #380]	; (800315c <HAL_GPIO_Init+0x30c>)
 8002fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fe6:	4b5d      	ldr	r3, [pc, #372]	; (800315c <HAL_GPIO_Init+0x30c>)
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ff2:	4a5b      	ldr	r2, [pc, #364]	; (8003160 <HAL_GPIO_Init+0x310>)
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	089b      	lsrs	r3, r3, #2
 8002ff8:	3302      	adds	r3, #2
 8002ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	220f      	movs	r2, #15
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4013      	ands	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a52      	ldr	r2, [pc, #328]	; (8003164 <HAL_GPIO_Init+0x314>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d02b      	beq.n	8003076 <HAL_GPIO_Init+0x226>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a51      	ldr	r2, [pc, #324]	; (8003168 <HAL_GPIO_Init+0x318>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d025      	beq.n	8003072 <HAL_GPIO_Init+0x222>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a50      	ldr	r2, [pc, #320]	; (800316c <HAL_GPIO_Init+0x31c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d01f      	beq.n	800306e <HAL_GPIO_Init+0x21e>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a4f      	ldr	r2, [pc, #316]	; (8003170 <HAL_GPIO_Init+0x320>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d019      	beq.n	800306a <HAL_GPIO_Init+0x21a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a4e      	ldr	r2, [pc, #312]	; (8003174 <HAL_GPIO_Init+0x324>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d013      	beq.n	8003066 <HAL_GPIO_Init+0x216>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a4d      	ldr	r2, [pc, #308]	; (8003178 <HAL_GPIO_Init+0x328>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d00d      	beq.n	8003062 <HAL_GPIO_Init+0x212>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a4c      	ldr	r2, [pc, #304]	; (800317c <HAL_GPIO_Init+0x32c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d007      	beq.n	800305e <HAL_GPIO_Init+0x20e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a4b      	ldr	r2, [pc, #300]	; (8003180 <HAL_GPIO_Init+0x330>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d101      	bne.n	800305a <HAL_GPIO_Init+0x20a>
 8003056:	2307      	movs	r3, #7
 8003058:	e00e      	b.n	8003078 <HAL_GPIO_Init+0x228>
 800305a:	2308      	movs	r3, #8
 800305c:	e00c      	b.n	8003078 <HAL_GPIO_Init+0x228>
 800305e:	2306      	movs	r3, #6
 8003060:	e00a      	b.n	8003078 <HAL_GPIO_Init+0x228>
 8003062:	2305      	movs	r3, #5
 8003064:	e008      	b.n	8003078 <HAL_GPIO_Init+0x228>
 8003066:	2304      	movs	r3, #4
 8003068:	e006      	b.n	8003078 <HAL_GPIO_Init+0x228>
 800306a:	2303      	movs	r3, #3
 800306c:	e004      	b.n	8003078 <HAL_GPIO_Init+0x228>
 800306e:	2302      	movs	r3, #2
 8003070:	e002      	b.n	8003078 <HAL_GPIO_Init+0x228>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_GPIO_Init+0x228>
 8003076:	2300      	movs	r3, #0
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	f002 0203 	and.w	r2, r2, #3
 800307e:	0092      	lsls	r2, r2, #2
 8003080:	4093      	lsls	r3, r2
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003088:	4935      	ldr	r1, [pc, #212]	; (8003160 <HAL_GPIO_Init+0x310>)
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	089b      	lsrs	r3, r3, #2
 800308e:	3302      	adds	r3, #2
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003096:	4b3b      	ldr	r3, [pc, #236]	; (8003184 <HAL_GPIO_Init+0x334>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	43db      	mvns	r3, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4013      	ands	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030ba:	4a32      	ldr	r2, [pc, #200]	; (8003184 <HAL_GPIO_Init+0x334>)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030c0:	4b30      	ldr	r3, [pc, #192]	; (8003184 <HAL_GPIO_Init+0x334>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030e4:	4a27      	ldr	r2, [pc, #156]	; (8003184 <HAL_GPIO_Init+0x334>)
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030ea:	4b26      	ldr	r3, [pc, #152]	; (8003184 <HAL_GPIO_Init+0x334>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800310e:	4a1d      	ldr	r2, [pc, #116]	; (8003184 <HAL_GPIO_Init+0x334>)
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003114:	4b1b      	ldr	r3, [pc, #108]	; (8003184 <HAL_GPIO_Init+0x334>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003138:	4a12      	ldr	r2, [pc, #72]	; (8003184 <HAL_GPIO_Init+0x334>)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3301      	adds	r3, #1
 8003142:	61fb      	str	r3, [r7, #28]
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	2b0f      	cmp	r3, #15
 8003148:	f67f ae90 	bls.w	8002e6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800314c:	bf00      	nop
 800314e:	bf00      	nop
 8003150:	3724      	adds	r7, #36	; 0x24
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800
 8003160:	40013800 	.word	0x40013800
 8003164:	40020000 	.word	0x40020000
 8003168:	40020400 	.word	0x40020400
 800316c:	40020800 	.word	0x40020800
 8003170:	40020c00 	.word	0x40020c00
 8003174:	40021000 	.word	0x40021000
 8003178:	40021400 	.word	0x40021400
 800317c:	40021800 	.word	0x40021800
 8003180:	40021c00 	.word	0x40021c00
 8003184:	40013c00 	.word	0x40013c00

08003188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	807b      	strh	r3, [r7, #2]
 8003194:	4613      	mov	r3, r2
 8003196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003198:	787b      	ldrb	r3, [r7, #1]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800319e:	887a      	ldrh	r2, [r7, #2]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031a4:	e003      	b.n	80031ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031a6:	887b      	ldrh	r3, [r7, #2]
 80031a8:	041a      	lsls	r2, r3, #16
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	619a      	str	r2, [r3, #24]
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b086      	sub	sp, #24
 80031be:	af02      	add	r7, sp, #8
 80031c0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e059      	b.n	8003280 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f009 ff52 	bl	800d090 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2203      	movs	r2, #3
 80031f0:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031fa:	d102      	bne.n	8003202 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f006 fd5b 	bl	8009cc2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	7c1a      	ldrb	r2, [r3, #16]
 8003214:	f88d 2000 	strb.w	r2, [sp]
 8003218:	3304      	adds	r3, #4
 800321a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800321c:	f006 fcdc 	bl	8009bd8 <USB_CoreInit>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2202      	movs	r2, #2
 800322a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e026      	b.n	8003280 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2101      	movs	r1, #1
 8003238:	4618      	mov	r0, r3
 800323a:	f006 fd53 	bl	8009ce4 <USB_SetCurrentMode>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e017      	b.n	8003280 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6818      	ldr	r0, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	7c1a      	ldrb	r2, [r3, #16]
 8003258:	f88d 2000 	strb.w	r2, [sp]
 800325c:	3304      	adds	r3, #4
 800325e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003260:	f006 fef6 	bl	800a050 <USB_HostInit>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d005      	beq.n	8003276 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2202      	movs	r2, #2
 800326e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e004      	b.n	8003280 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b08b      	sub	sp, #44	; 0x2c
 800328c:	af04      	add	r7, sp, #16
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	4608      	mov	r0, r1
 8003292:	4611      	mov	r1, r2
 8003294:	461a      	mov	r2, r3
 8003296:	4603      	mov	r3, r0
 8003298:	70fb      	strb	r3, [r7, #3]
 800329a:	460b      	mov	r3, r1
 800329c:	70bb      	strb	r3, [r7, #2]
 800329e:	4613      	mov	r3, r2
 80032a0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80032a2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80032a4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_HCD_HC_Init+0x2c>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e09d      	b.n	80033f0 <HAL_HCD_HC_Init+0x168>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80032bc:	78fa      	ldrb	r2, [r7, #3]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	3319      	adds	r3, #25
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80032d0:	78fa      	ldrb	r2, [r7, #3]
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	3314      	adds	r3, #20
 80032e0:	787a      	ldrb	r2, [r7, #1]
 80032e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	3315      	adds	r3, #21
 80032f4:	78fa      	ldrb	r2, [r7, #3]
 80032f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80032f8:	78fa      	ldrb	r2, [r7, #3]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	3326      	adds	r3, #38	; 0x26
 8003308:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800330c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800330e:	78fa      	ldrb	r2, [r7, #3]
 8003310:	78bb      	ldrb	r3, [r7, #2]
 8003312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003316:	b2d8      	uxtb	r0, r3
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	3316      	adds	r3, #22
 8003326:	4602      	mov	r2, r0
 8003328:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800332a:	78fb      	ldrb	r3, [r7, #3]
 800332c:	4619      	mov	r1, r3
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fbc8 	bl	8003ac4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003334:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003338:	2b00      	cmp	r3, #0
 800333a:	da0a      	bge.n	8003352 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	3317      	adds	r3, #23
 800334c:	2201      	movs	r2, #1
 800334e:	701a      	strb	r2, [r3, #0]
 8003350:	e009      	b.n	8003366 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	3317      	adds	r3, #23
 8003362:	2200      	movs	r2, #0
 8003364:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f006 ffd4 	bl	800a318 <USB_GetHostSpeed>
 8003370:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003372:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003376:	2b01      	cmp	r3, #1
 8003378:	d10b      	bne.n	8003392 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800337a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800337e:	2b01      	cmp	r3, #1
 8003380:	d107      	bne.n	8003392 <HAL_HCD_HC_Init+0x10a>
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d104      	bne.n	8003392 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	2bbc      	cmp	r3, #188	; 0xbc
 800338c:	d901      	bls.n	8003392 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800338e:	23bc      	movs	r3, #188	; 0xbc
 8003390:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	3318      	adds	r3, #24
 80033a2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80033a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80033a8:	78fa      	ldrb	r2, [r7, #3]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	b298      	uxth	r0, r3
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	3328      	adds	r3, #40	; 0x28
 80033bc:	4602      	mov	r2, r0
 80033be:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6818      	ldr	r0, [r3, #0]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	787c      	ldrb	r4, [r7, #1]
 80033ca:	78ba      	ldrb	r2, [r7, #2]
 80033cc:	78f9      	ldrb	r1, [r7, #3]
 80033ce:	9302      	str	r3, [sp, #8]
 80033d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80033d4:	9301      	str	r3, [sp, #4]
 80033d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	4623      	mov	r3, r4
 80033de:	f006 ffc3 	bl	800a368 <USB_HC_Init>
 80033e2:	4603      	mov	r3, r0
 80033e4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	371c      	adds	r7, #28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd90      	pop	{r4, r7, pc}

080033f8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_HCD_HC_Halt+0x1e>
 8003412:	2302      	movs	r3, #2
 8003414:	e00f      	b.n	8003436 <HAL_HCD_HC_Halt+0x3e>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	78fa      	ldrb	r2, [r7, #3]
 8003424:	4611      	mov	r1, r2
 8003426:	4618      	mov	r0, r3
 8003428:	f007 fb55 	bl	800aad6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8003434:	7bfb      	ldrb	r3, [r7, #15]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	4608      	mov	r0, r1
 800344a:	4611      	mov	r1, r2
 800344c:	461a      	mov	r2, r3
 800344e:	4603      	mov	r3, r0
 8003450:	70fb      	strb	r3, [r7, #3]
 8003452:	460b      	mov	r3, r1
 8003454:	70bb      	strb	r3, [r7, #2]
 8003456:	4613      	mov	r3, r2
 8003458:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	3317      	adds	r3, #23
 800346a:	78ba      	ldrb	r2, [r7, #2]
 800346c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800346e:	78fa      	ldrb	r2, [r7, #3]
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	3326      	adds	r3, #38	; 0x26
 800347e:	787a      	ldrb	r2, [r7, #1]
 8003480:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003482:	7c3b      	ldrb	r3, [r7, #16]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d114      	bne.n	80034b2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	332a      	adds	r3, #42	; 0x2a
 8003498:	2203      	movs	r2, #3
 800349a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800349c:	78fa      	ldrb	r2, [r7, #3]
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	3319      	adds	r3, #25
 80034ac:	7f3a      	ldrb	r2, [r7, #28]
 80034ae:	701a      	strb	r2, [r3, #0]
 80034b0:	e009      	b.n	80034c6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034b2:	78fa      	ldrb	r2, [r7, #3]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	1a9b      	subs	r3, r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	332a      	adds	r3, #42	; 0x2a
 80034c2:	2202      	movs	r2, #2
 80034c4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80034c6:	787b      	ldrb	r3, [r7, #1]
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	f200 8102 	bhi.w	80036d2 <HAL_HCD_HC_SubmitRequest+0x292>
 80034ce:	a201      	add	r2, pc, #4	; (adr r2, 80034d4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80034d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d4:	080034e5 	.word	0x080034e5
 80034d8:	080036bd 	.word	0x080036bd
 80034dc:	080035a9 	.word	0x080035a9
 80034e0:	08003633 	.word	0x08003633
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80034e4:	7c3b      	ldrb	r3, [r7, #16]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	f040 80f5 	bne.w	80036d6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80034ec:	78bb      	ldrb	r3, [r7, #2]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d12d      	bne.n	800354e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80034f2:	8b3b      	ldrh	r3, [r7, #24]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d109      	bne.n	800350c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80034f8:	78fa      	ldrb	r2, [r7, #3]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	1a9b      	subs	r3, r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	333d      	adds	r3, #61	; 0x3d
 8003508:	2201      	movs	r2, #1
 800350a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800350c:	78fa      	ldrb	r2, [r7, #3]
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	1a9b      	subs	r3, r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	333d      	adds	r3, #61	; 0x3d
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10a      	bne.n	8003538 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003522:	78fa      	ldrb	r2, [r7, #3]
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	1a9b      	subs	r3, r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	440b      	add	r3, r1
 8003530:	332a      	adds	r3, #42	; 0x2a
 8003532:	2200      	movs	r2, #0
 8003534:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003536:	e0ce      	b.n	80036d6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	332a      	adds	r3, #42	; 0x2a
 8003548:	2202      	movs	r2, #2
 800354a:	701a      	strb	r2, [r3, #0]
      break;
 800354c:	e0c3      	b.n	80036d6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800354e:	78fa      	ldrb	r2, [r7, #3]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	331a      	adds	r3, #26
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b01      	cmp	r3, #1
 8003562:	f040 80b8 	bne.w	80036d6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	333c      	adds	r3, #60	; 0x3c
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10a      	bne.n	8003592 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	332a      	adds	r3, #42	; 0x2a
 800358c:	2200      	movs	r2, #0
 800358e:	701a      	strb	r2, [r3, #0]
      break;
 8003590:	e0a1      	b.n	80036d6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003592:	78fa      	ldrb	r2, [r7, #3]
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	332a      	adds	r3, #42	; 0x2a
 80035a2:	2202      	movs	r2, #2
 80035a4:	701a      	strb	r2, [r3, #0]
      break;
 80035a6:	e096      	b.n	80036d6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80035a8:	78bb      	ldrb	r3, [r7, #2]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d120      	bne.n	80035f0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80035ae:	78fa      	ldrb	r2, [r7, #3]
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	333d      	adds	r3, #61	; 0x3d
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10a      	bne.n	80035da <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035c4:	78fa      	ldrb	r2, [r7, #3]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	332a      	adds	r3, #42	; 0x2a
 80035d4:	2200      	movs	r2, #0
 80035d6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80035d8:	e07e      	b.n	80036d8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035da:	78fa      	ldrb	r2, [r7, #3]
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	1a9b      	subs	r3, r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	332a      	adds	r3, #42	; 0x2a
 80035ea:	2202      	movs	r2, #2
 80035ec:	701a      	strb	r2, [r3, #0]
      break;
 80035ee:	e073      	b.n	80036d8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80035f0:	78fa      	ldrb	r2, [r7, #3]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	333c      	adds	r3, #60	; 0x3c
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10a      	bne.n	800361c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003606:	78fa      	ldrb	r2, [r7, #3]
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	4613      	mov	r3, r2
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	1a9b      	subs	r3, r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	440b      	add	r3, r1
 8003614:	332a      	adds	r3, #42	; 0x2a
 8003616:	2200      	movs	r2, #0
 8003618:	701a      	strb	r2, [r3, #0]
      break;
 800361a:	e05d      	b.n	80036d8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800361c:	78fa      	ldrb	r2, [r7, #3]
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	332a      	adds	r3, #42	; 0x2a
 800362c:	2202      	movs	r2, #2
 800362e:	701a      	strb	r2, [r3, #0]
      break;
 8003630:	e052      	b.n	80036d8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003632:	78bb      	ldrb	r3, [r7, #2]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d120      	bne.n	800367a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003638:	78fa      	ldrb	r2, [r7, #3]
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	4613      	mov	r3, r2
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	1a9b      	subs	r3, r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	333d      	adds	r3, #61	; 0x3d
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10a      	bne.n	8003664 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800364e:	78fa      	ldrb	r2, [r7, #3]
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	332a      	adds	r3, #42	; 0x2a
 800365e:	2200      	movs	r2, #0
 8003660:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003662:	e039      	b.n	80036d8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003664:	78fa      	ldrb	r2, [r7, #3]
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	1a9b      	subs	r3, r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	332a      	adds	r3, #42	; 0x2a
 8003674:	2202      	movs	r2, #2
 8003676:	701a      	strb	r2, [r3, #0]
      break;
 8003678:	e02e      	b.n	80036d8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800367a:	78fa      	ldrb	r2, [r7, #3]
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	1a9b      	subs	r3, r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	333c      	adds	r3, #60	; 0x3c
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10a      	bne.n	80036a6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003690:	78fa      	ldrb	r2, [r7, #3]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	332a      	adds	r3, #42	; 0x2a
 80036a0:	2200      	movs	r2, #0
 80036a2:	701a      	strb	r2, [r3, #0]
      break;
 80036a4:	e018      	b.n	80036d8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	1a9b      	subs	r3, r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	332a      	adds	r3, #42	; 0x2a
 80036b6:	2202      	movs	r2, #2
 80036b8:	701a      	strb	r2, [r3, #0]
      break;
 80036ba:	e00d      	b.n	80036d8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	1a9b      	subs	r3, r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	332a      	adds	r3, #42	; 0x2a
 80036cc:	2200      	movs	r2, #0
 80036ce:	701a      	strb	r2, [r3, #0]
      break;
 80036d0:	e002      	b.n	80036d8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80036d2:	bf00      	nop
 80036d4:	e000      	b.n	80036d8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80036d6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80036d8:	78fa      	ldrb	r2, [r7, #3]
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	1a9b      	subs	r3, r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	332c      	adds	r3, #44	; 0x2c
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80036ec:	78fa      	ldrb	r2, [r7, #3]
 80036ee:	8b39      	ldrh	r1, [r7, #24]
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	4613      	mov	r3, r2
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	1a9b      	subs	r3, r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4403      	add	r3, r0
 80036fc:	3334      	adds	r3, #52	; 0x34
 80036fe:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	1a9b      	subs	r3, r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	334c      	adds	r3, #76	; 0x4c
 8003710:	2200      	movs	r2, #0
 8003712:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003714:	78fa      	ldrb	r2, [r7, #3]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	4613      	mov	r3, r2
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	3338      	adds	r3, #56	; 0x38
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003728:	78fa      	ldrb	r2, [r7, #3]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	3315      	adds	r3, #21
 8003738:	78fa      	ldrb	r2, [r7, #3]
 800373a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800373c:	78fa      	ldrb	r2, [r7, #3]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	334d      	adds	r3, #77	; 0x4d
 800374c:	2200      	movs	r2, #0
 800374e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6818      	ldr	r0, [r3, #0]
 8003754:	78fa      	ldrb	r2, [r7, #3]
 8003756:	4613      	mov	r3, r2
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	1a9b      	subs	r3, r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	3310      	adds	r3, #16
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	4413      	add	r3, r2
 8003764:	1d19      	adds	r1, r3, #4
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	799b      	ldrb	r3, [r3, #6]
 800376a:	461a      	mov	r2, r3
 800376c:	f006 ff28 	bl	800a5c0 <USB_HC_StartXfer>
 8003770:	4603      	mov	r3, r0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop

0800377c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f006 fc1c 	bl	8009fd0 <USB_GetMode>
 8003798:	4603      	mov	r3, r0
 800379a:	2b01      	cmp	r3, #1
 800379c:	f040 80fb 	bne.w	8003996 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f006 fbdf 	bl	8009f68 <USB_ReadInterrupts>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 80f1 	beq.w	8003994 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f006 fbd6 	bl	8009f68 <USB_ReadInterrupts>
 80037bc:	4603      	mov	r3, r0
 80037be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037c6:	d104      	bne.n	80037d2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80037d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f006 fbc6 	bl	8009f68 <USB_ReadInterrupts>
 80037dc:	4603      	mov	r3, r0
 80037de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037e6:	d104      	bne.n	80037f2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80037f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f006 fbb6 	bl	8009f68 <USB_ReadInterrupts>
 80037fc:	4603      	mov	r3, r0
 80037fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003802:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003806:	d104      	bne.n	8003812 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003810:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f006 fba6 	bl	8009f68 <USB_ReadInterrupts>
 800381c:	4603      	mov	r3, r0
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b02      	cmp	r3, #2
 8003824:	d103      	bne.n	800382e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2202      	movs	r2, #2
 800382c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f006 fb98 	bl	8009f68 <USB_ReadInterrupts>
 8003838:	4603      	mov	r3, r0
 800383a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800383e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003842:	d120      	bne.n	8003886 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800384c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d113      	bne.n	8003886 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800385e:	2110      	movs	r1, #16
 8003860:	6938      	ldr	r0, [r7, #16]
 8003862:	f006 fa8b 	bl	8009d7c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003866:	6938      	ldr	r0, [r7, #16]
 8003868:	f006 faba 	bl	8009de0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	7a5b      	ldrb	r3, [r3, #9]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d105      	bne.n	8003880 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2101      	movs	r1, #1
 800387a:	4618      	mov	r0, r3
 800387c:	f006 fcac 	bl	800a1d8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f009 fc83 	bl	800d18c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f006 fb6c 	bl	8009f68 <USB_ReadInterrupts>
 8003890:	4603      	mov	r3, r0
 8003892:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003896:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800389a:	d102      	bne.n	80038a2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f001 fd33 	bl	8005308 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f006 fb5e 	bl	8009f68 <USB_ReadInterrupts>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d106      	bne.n	80038c4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f009 fc4c 	bl	800d154 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2208      	movs	r2, #8
 80038c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f006 fb4d 	bl	8009f68 <USB_ReadInterrupts>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038d8:	d139      	bne.n	800394e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f007 f8e8 	bl	800aab4 <USB_HC_ReadInterrupt>
 80038e4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	e025      	b.n	8003938 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	fa22 f303 	lsr.w	r3, r2, r3
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d018      	beq.n	8003932 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4413      	add	r3, r2
 8003908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003916:	d106      	bne.n	8003926 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	b2db      	uxtb	r3, r3
 800391c:	4619      	mov	r1, r3
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f905 	bl	8003b2e <HCD_HC_IN_IRQHandler>
 8003924:	e005      	b.n	8003932 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	b2db      	uxtb	r3, r3
 800392a:	4619      	mov	r1, r3
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 ff67 	bl	8004800 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	3301      	adds	r3, #1
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	795b      	ldrb	r3, [r3, #5]
 800393c:	461a      	mov	r2, r3
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	4293      	cmp	r3, r2
 8003942:	d3d3      	bcc.n	80038ec <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800394c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f006 fb08 	bl	8009f68 <USB_ReadInterrupts>
 8003958:	4603      	mov	r3, r0
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	2b10      	cmp	r3, #16
 8003960:	d101      	bne.n	8003966 <HAL_HCD_IRQHandler+0x1ea>
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <HAL_HCD_IRQHandler+0x1ec>
 8003966:	2300      	movs	r3, #0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d014      	beq.n	8003996 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699a      	ldr	r2, [r3, #24]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0210 	bic.w	r2, r2, #16
 800397a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f001 fbe4 	bl	800514a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	699a      	ldr	r2, [r3, #24]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0210 	orr.w	r2, r2, #16
 8003990:	619a      	str	r2, [r3, #24]
 8003992:	e000      	b.n	8003996 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003994:	bf00      	nop
    }
  }
}
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d101      	bne.n	80039b2 <HAL_HCD_Start+0x16>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e013      	b.n	80039da <HAL_HCD_Start+0x3e>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2101      	movs	r1, #1
 80039c0:	4618      	mov	r0, r3
 80039c2:	f006 fc70 	bl	800a2a6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f006 f968 	bl	8009ca0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_HCD_Stop+0x16>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e00d      	b.n	8003a14 <HAL_HCD_Stop+0x32>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f007 f9c3 	bl	800ad90 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f006 fc12 	bl	800a252 <USB_ResetPort>
 8003a2e:	4603      	mov	r3, r0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003a44:	78fa      	ldrb	r2, [r7, #3]
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	1a9b      	subs	r3, r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	334c      	adds	r3, #76	; 0x4c
 8003a54:	781b      	ldrb	r3, [r3, #0]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003a6e:	78fa      	ldrb	r2, [r7, #3]
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	4613      	mov	r3, r2
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	1a9b      	subs	r3, r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	440b      	add	r3, r1
 8003a7c:	3338      	adds	r3, #56	; 0x38
 8003a7e:	681b      	ldr	r3, [r3, #0]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f006 fc54 	bl	800a346 <USB_GetCurrentFrame>
 8003a9e:	4603      	mov	r3, r0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f006 fc2f 	bl	800a318 <USB_GetHostSpeed>
 8003aba:	4603      	mov	r3, r0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003ad0:	78fa      	ldrb	r2, [r7, #3]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	331a      	adds	r3, #26
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003ae4:	78fa      	ldrb	r2, [r7, #3]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	1a9b      	subs	r3, r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	331b      	adds	r3, #27
 8003af4:	2200      	movs	r2, #0
 8003af6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003af8:	78fa      	ldrb	r2, [r7, #3]
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	1a9b      	subs	r3, r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	3325      	adds	r3, #37	; 0x25
 8003b08:	2200      	movs	r2, #0
 8003b0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003b0c:	78fa      	ldrb	r2, [r7, #3]
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	4613      	mov	r3, r2
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	1a9b      	subs	r3, r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	3324      	adds	r3, #36	; 0x24
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b086      	sub	sp, #24
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	460b      	mov	r3, r1
 8003b38:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	78fa      	ldrb	r2, [r7, #3]
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f006 fa1e 	bl	8009f8e <USB_ReadChInterrupts>
 8003b52:	4603      	mov	r3, r0
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d11a      	bne.n	8003b92 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003b5c:	78fb      	ldrb	r3, [r7, #3]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b68:	461a      	mov	r2, r3
 8003b6a:	2304      	movs	r3, #4
 8003b6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003b6e:	78fa      	ldrb	r2, [r7, #3]
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	4613      	mov	r3, r2
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	1a9b      	subs	r3, r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	334d      	adds	r3, #77	; 0x4d
 8003b7e:	2207      	movs	r2, #7
 8003b80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	78fa      	ldrb	r2, [r7, #3]
 8003b88:	4611      	mov	r1, r2
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f006 ffa3 	bl	800aad6 <USB_HC_Halt>
 8003b90:	e09e      	b.n	8003cd0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	78fa      	ldrb	r2, [r7, #3]
 8003b98:	4611      	mov	r1, r2
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f006 f9f7 	bl	8009f8e <USB_ReadChInterrupts>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003baa:	d11b      	bne.n	8003be4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb8:	461a      	mov	r2, r3
 8003bba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bbe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003bc0:	78fa      	ldrb	r2, [r7, #3]
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	1a9b      	subs	r3, r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	334d      	adds	r3, #77	; 0x4d
 8003bd0:	2208      	movs	r2, #8
 8003bd2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	78fa      	ldrb	r2, [r7, #3]
 8003bda:	4611      	mov	r1, r2
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f006 ff7a 	bl	800aad6 <USB_HC_Halt>
 8003be2:	e075      	b.n	8003cd0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	78fa      	ldrb	r2, [r7, #3]
 8003bea:	4611      	mov	r1, r2
 8003bec:	4618      	mov	r0, r3
 8003bee:	f006 f9ce 	bl	8009f8e <USB_ReadChInterrupts>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	f003 0308 	and.w	r3, r3, #8
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	d11a      	bne.n	8003c32 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c08:	461a      	mov	r2, r3
 8003c0a:	2308      	movs	r3, #8
 8003c0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003c0e:	78fa      	ldrb	r2, [r7, #3]
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	4613      	mov	r3, r2
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	1a9b      	subs	r3, r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	334d      	adds	r3, #77	; 0x4d
 8003c1e:	2206      	movs	r2, #6
 8003c20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	78fa      	ldrb	r2, [r7, #3]
 8003c28:	4611      	mov	r1, r2
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f006 ff53 	bl	800aad6 <USB_HC_Halt>
 8003c30:	e04e      	b.n	8003cd0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	78fa      	ldrb	r2, [r7, #3]
 8003c38:	4611      	mov	r1, r2
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f006 f9a7 	bl	8009f8e <USB_ReadChInterrupts>
 8003c40:	4603      	mov	r3, r0
 8003c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4a:	d11b      	bne.n	8003c84 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003c4c:	78fb      	ldrb	r3, [r7, #3]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c58:	461a      	mov	r2, r3
 8003c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	334d      	adds	r3, #77	; 0x4d
 8003c70:	2209      	movs	r2, #9
 8003c72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	78fa      	ldrb	r2, [r7, #3]
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f006 ff2a 	bl	800aad6 <USB_HC_Halt>
 8003c82:	e025      	b.n	8003cd0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	78fa      	ldrb	r2, [r7, #3]
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f006 f97e 	bl	8009f8e <USB_ReadChInterrupts>
 8003c92:	4603      	mov	r3, r0
 8003c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c98:	2b80      	cmp	r3, #128	; 0x80
 8003c9a:	d119      	bne.n	8003cd0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca8:	461a      	mov	r2, r3
 8003caa:	2380      	movs	r3, #128	; 0x80
 8003cac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003cae:	78fa      	ldrb	r2, [r7, #3]
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	1a9b      	subs	r3, r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	440b      	add	r3, r1
 8003cbc:	334d      	adds	r3, #77	; 0x4d
 8003cbe:	2207      	movs	r2, #7
 8003cc0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	78fa      	ldrb	r2, [r7, #3]
 8003cc8:	4611      	mov	r1, r2
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f006 ff03 	bl	800aad6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	78fa      	ldrb	r2, [r7, #3]
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f006 f958 	bl	8009f8e <USB_ReadChInterrupts>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ce8:	d112      	bne.n	8003d10 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	78fa      	ldrb	r2, [r7, #3]
 8003cf0:	4611      	mov	r1, r2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f006 feef 	bl	800aad6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003cf8:	78fb      	ldrb	r3, [r7, #3]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d04:	461a      	mov	r2, r3
 8003d06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d0a:	6093      	str	r3, [r2, #8]
 8003d0c:	f000 bd75 	b.w	80047fa <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	78fa      	ldrb	r2, [r7, #3]
 8003d16:	4611      	mov	r1, r2
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f006 f938 	bl	8009f8e <USB_ReadChInterrupts>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	f040 8128 	bne.w	8003f7a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003d2a:	78fb      	ldrb	r3, [r7, #3]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d36:	461a      	mov	r2, r3
 8003d38:	2320      	movs	r3, #32
 8003d3a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003d3c:	78fa      	ldrb	r2, [r7, #3]
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	1a9b      	subs	r3, r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	331b      	adds	r3, #27
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d119      	bne.n	8003d86 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	331b      	adds	r3, #27
 8003d62:	2200      	movs	r2, #0
 8003d64:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d66:	78fb      	ldrb	r3, [r7, #3]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	78fa      	ldrb	r2, [r7, #3]
 8003d76:	0151      	lsls	r1, r2, #5
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	440a      	add	r2, r1
 8003d7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d84:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	799b      	ldrb	r3, [r3, #6]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d01b      	beq.n	8003dc6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003d8e:	78fa      	ldrb	r2, [r7, #3]
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	1a9b      	subs	r3, r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	3330      	adds	r3, #48	; 0x30
 8003d9e:	6819      	ldr	r1, [r3, #0]
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003db2:	78fa      	ldrb	r2, [r7, #3]
 8003db4:	1ac9      	subs	r1, r1, r3
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	4613      	mov	r3, r2
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	1a9b      	subs	r3, r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4403      	add	r3, r0
 8003dc2:	3338      	adds	r3, #56	; 0x38
 8003dc4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003dc6:	78fa      	ldrb	r2, [r7, #3]
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	1a9b      	subs	r3, r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	334d      	adds	r3, #77	; 0x4d
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003dda:	78fa      	ldrb	r2, [r7, #3]
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	4613      	mov	r3, r2
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	440b      	add	r3, r1
 8003de8:	3344      	adds	r3, #68	; 0x44
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003dee:	78fb      	ldrb	r3, [r7, #3]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e00:	78fa      	ldrb	r2, [r7, #3]
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	4613      	mov	r3, r2
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	1a9b      	subs	r3, r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	3326      	adds	r3, #38	; 0x26
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00a      	beq.n	8003e2c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003e16:	78fa      	ldrb	r2, [r7, #3]
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	1a9b      	subs	r3, r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	440b      	add	r3, r1
 8003e24:	3326      	adds	r3, #38	; 0x26
 8003e26:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d110      	bne.n	8003e4e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	78fa      	ldrb	r2, [r7, #3]
 8003e32:	4611      	mov	r1, r2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f006 fe4e 	bl	800aad6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003e3a:	78fb      	ldrb	r3, [r7, #3]
 8003e3c:	015a      	lsls	r2, r3, #5
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e46:	461a      	mov	r2, r3
 8003e48:	2310      	movs	r3, #16
 8003e4a:	6093      	str	r3, [r2, #8]
 8003e4c:	e03d      	b.n	8003eca <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003e4e:	78fa      	ldrb	r2, [r7, #3]
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	1a9b      	subs	r3, r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	3326      	adds	r3, #38	; 0x26
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b03      	cmp	r3, #3
 8003e62:	d00a      	beq.n	8003e7a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003e64:	78fa      	ldrb	r2, [r7, #3]
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	1a9b      	subs	r3, r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	3326      	adds	r3, #38	; 0x26
 8003e74:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d127      	bne.n	8003eca <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003e7a:	78fb      	ldrb	r3, [r7, #3]
 8003e7c:	015a      	lsls	r2, r3, #5
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	4413      	add	r3, r2
 8003e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	78fa      	ldrb	r2, [r7, #3]
 8003e8a:	0151      	lsls	r1, r2, #5
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	440a      	add	r2, r1
 8003e90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e98:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003e9a:	78fa      	ldrb	r2, [r7, #3]
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	1a9b      	subs	r3, r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	334c      	adds	r3, #76	; 0x4c
 8003eaa:	2201      	movs	r2, #1
 8003eac:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003eae:	78fa      	ldrb	r2, [r7, #3]
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	334c      	adds	r3, #76	; 0x4c
 8003ebe:	781a      	ldrb	r2, [r3, #0]
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f009 f96f 	bl	800d1a8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	799b      	ldrb	r3, [r3, #6]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d13b      	bne.n	8003f4a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003ed2:	78fa      	ldrb	r2, [r7, #3]
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	1a9b      	subs	r3, r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	3338      	adds	r3, #56	; 0x38
 8003ee2:	6819      	ldr	r1, [r3, #0]
 8003ee4:	78fa      	ldrb	r2, [r7, #3]
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4403      	add	r3, r0
 8003ef2:	3328      	adds	r3, #40	; 0x28
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	440b      	add	r3, r1
 8003ef8:	1e59      	subs	r1, r3, #1
 8003efa:	78fa      	ldrb	r2, [r7, #3]
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	4613      	mov	r3, r2
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	1a9b      	subs	r3, r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4403      	add	r3, r0
 8003f08:	3328      	adds	r3, #40	; 0x28
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 8470 	beq.w	80047fa <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	1a9b      	subs	r3, r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	333c      	adds	r3, #60	; 0x3c
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	78fa      	ldrb	r2, [r7, #3]
 8003f2e:	f083 0301 	eor.w	r3, r3, #1
 8003f32:	b2d8      	uxtb	r0, r3
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	4613      	mov	r3, r2
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	1a9b      	subs	r3, r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	440b      	add	r3, r1
 8003f40:	333c      	adds	r3, #60	; 0x3c
 8003f42:	4602      	mov	r2, r0
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	f000 bc58 	b.w	80047fa <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003f4a:	78fa      	ldrb	r2, [r7, #3]
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	1a9b      	subs	r3, r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	440b      	add	r3, r1
 8003f58:	333c      	adds	r3, #60	; 0x3c
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	78fa      	ldrb	r2, [r7, #3]
 8003f5e:	f083 0301 	eor.w	r3, r3, #1
 8003f62:	b2d8      	uxtb	r0, r3
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	1a9b      	subs	r3, r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	333c      	adds	r3, #60	; 0x3c
 8003f72:	4602      	mov	r2, r0
 8003f74:	701a      	strb	r2, [r3, #0]
 8003f76:	f000 bc40 	b.w	80047fa <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	78fa      	ldrb	r2, [r7, #3]
 8003f80:	4611      	mov	r1, r2
 8003f82:	4618      	mov	r0, r3
 8003f84:	f006 f803 	bl	8009f8e <USB_ReadChInterrupts>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d131      	bne.n	8003ff6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003f92:	78fb      	ldrb	r3, [r7, #3]
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	2320      	movs	r3, #32
 8003fa2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003fa4:	78fa      	ldrb	r2, [r7, #3]
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	1a9b      	subs	r3, r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	331a      	adds	r3, #26
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	f040 841f 	bne.w	80047fa <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003fbc:	78fa      	ldrb	r2, [r7, #3]
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	1a9b      	subs	r3, r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	331b      	adds	r3, #27
 8003fcc:	2201      	movs	r2, #1
 8003fce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003fd0:	78fa      	ldrb	r2, [r7, #3]
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	1a9b      	subs	r3, r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	334d      	adds	r3, #77	; 0x4d
 8003fe0:	2203      	movs	r2, #3
 8003fe2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	78fa      	ldrb	r2, [r7, #3]
 8003fea:	4611      	mov	r1, r2
 8003fec:	4618      	mov	r0, r3
 8003fee:	f006 fd72 	bl	800aad6 <USB_HC_Halt>
 8003ff2:	f000 bc02 	b.w	80047fa <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	78fa      	ldrb	r2, [r7, #3]
 8003ffc:	4611      	mov	r1, r2
 8003ffe:	4618      	mov	r0, r3
 8004000:	f005 ffc5 	bl	8009f8e <USB_ReadChInterrupts>
 8004004:	4603      	mov	r3, r0
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b02      	cmp	r3, #2
 800400c:	f040 8305 	bne.w	800461a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	4413      	add	r3, r2
 8004018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800401c:	461a      	mov	r2, r3
 800401e:	2302      	movs	r3, #2
 8004020:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004022:	78fa      	ldrb	r2, [r7, #3]
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	1a9b      	subs	r3, r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	334d      	adds	r3, #77	; 0x4d
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d114      	bne.n	8004062 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004038:	78fa      	ldrb	r2, [r7, #3]
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	4613      	mov	r3, r2
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	1a9b      	subs	r3, r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	440b      	add	r3, r1
 8004046:	334d      	adds	r3, #77	; 0x4d
 8004048:	2202      	movs	r2, #2
 800404a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800404c:	78fa      	ldrb	r2, [r7, #3]
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	4613      	mov	r3, r2
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	1a9b      	subs	r3, r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	334c      	adds	r3, #76	; 0x4c
 800405c:	2201      	movs	r2, #1
 800405e:	701a      	strb	r2, [r3, #0]
 8004060:	e2cc      	b.n	80045fc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004062:	78fa      	ldrb	r2, [r7, #3]
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	4613      	mov	r3, r2
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	1a9b      	subs	r3, r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	440b      	add	r3, r1
 8004070:	334d      	adds	r3, #77	; 0x4d
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b06      	cmp	r3, #6
 8004076:	d114      	bne.n	80040a2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004078:	78fa      	ldrb	r2, [r7, #3]
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	4613      	mov	r3, r2
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	1a9b      	subs	r3, r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	334d      	adds	r3, #77	; 0x4d
 8004088:	2202      	movs	r2, #2
 800408a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800408c:	78fa      	ldrb	r2, [r7, #3]
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	4613      	mov	r3, r2
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	1a9b      	subs	r3, r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	334c      	adds	r3, #76	; 0x4c
 800409c:	2205      	movs	r2, #5
 800409e:	701a      	strb	r2, [r3, #0]
 80040a0:	e2ac      	b.n	80045fc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80040a2:	78fa      	ldrb	r2, [r7, #3]
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	4613      	mov	r3, r2
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	1a9b      	subs	r3, r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	440b      	add	r3, r1
 80040b0:	334d      	adds	r3, #77	; 0x4d
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	2b07      	cmp	r3, #7
 80040b6:	d00b      	beq.n	80040d0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80040b8:	78fa      	ldrb	r2, [r7, #3]
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	4613      	mov	r3, r2
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	1a9b      	subs	r3, r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	440b      	add	r3, r1
 80040c6:	334d      	adds	r3, #77	; 0x4d
 80040c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80040ca:	2b09      	cmp	r3, #9
 80040cc:	f040 80a6 	bne.w	800421c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040d0:	78fa      	ldrb	r2, [r7, #3]
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	4613      	mov	r3, r2
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	1a9b      	subs	r3, r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	334d      	adds	r3, #77	; 0x4d
 80040e0:	2202      	movs	r2, #2
 80040e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80040e4:	78fa      	ldrb	r2, [r7, #3]
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	4613      	mov	r3, r2
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	1a9b      	subs	r3, r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	440b      	add	r3, r1
 80040f2:	3344      	adds	r3, #68	; 0x44
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	1c59      	adds	r1, r3, #1
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	4613      	mov	r3, r2
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	1a9b      	subs	r3, r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4403      	add	r3, r0
 8004104:	3344      	adds	r3, #68	; 0x44
 8004106:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004108:	78fa      	ldrb	r2, [r7, #3]
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	4613      	mov	r3, r2
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	1a9b      	subs	r3, r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	3344      	adds	r3, #68	; 0x44
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b02      	cmp	r3, #2
 800411c:	d943      	bls.n	80041a6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800411e:	78fa      	ldrb	r2, [r7, #3]
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	440b      	add	r3, r1
 800412c:	3344      	adds	r3, #68	; 0x44
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004132:	78fa      	ldrb	r2, [r7, #3]
 8004134:	6879      	ldr	r1, [r7, #4]
 8004136:	4613      	mov	r3, r2
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	1a9b      	subs	r3, r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	440b      	add	r3, r1
 8004140:	331a      	adds	r3, #26
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d123      	bne.n	8004190 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004148:	78fa      	ldrb	r2, [r7, #3]
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	4613      	mov	r3, r2
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	1a9b      	subs	r3, r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	331b      	adds	r3, #27
 8004158:	2200      	movs	r2, #0
 800415a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800415c:	78fa      	ldrb	r2, [r7, #3]
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	4613      	mov	r3, r2
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	1a9b      	subs	r3, r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	331c      	adds	r3, #28
 800416c:	2200      	movs	r2, #0
 800416e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004170:	78fb      	ldrb	r3, [r7, #3]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	4413      	add	r3, r2
 8004178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	78fa      	ldrb	r2, [r7, #3]
 8004180:	0151      	lsls	r1, r2, #5
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	440a      	add	r2, r1
 8004186:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800418a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800418e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004190:	78fa      	ldrb	r2, [r7, #3]
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	1a9b      	subs	r3, r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	334c      	adds	r3, #76	; 0x4c
 80041a0:	2204      	movs	r2, #4
 80041a2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80041a4:	e229      	b.n	80045fa <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041a6:	78fa      	ldrb	r2, [r7, #3]
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	4613      	mov	r3, r2
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	1a9b      	subs	r3, r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	440b      	add	r3, r1
 80041b4:	334c      	adds	r3, #76	; 0x4c
 80041b6:	2202      	movs	r2, #2
 80041b8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80041ba:	78fa      	ldrb	r2, [r7, #3]
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	440b      	add	r3, r1
 80041c8:	3326      	adds	r3, #38	; 0x26
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00b      	beq.n	80041e8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80041d0:	78fa      	ldrb	r2, [r7, #3]
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	1a9b      	subs	r3, r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	3326      	adds	r3, #38	; 0x26
 80041e0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	f040 8209 	bne.w	80045fa <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041fe:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004206:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4413      	add	r3, r2
 8004210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004214:	461a      	mov	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800421a:	e1ee      	b.n	80045fa <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	4613      	mov	r3, r2
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	1a9b      	subs	r3, r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	334d      	adds	r3, #77	; 0x4d
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	2b05      	cmp	r3, #5
 8004230:	f040 80c8 	bne.w	80043c4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004234:	78fa      	ldrb	r2, [r7, #3]
 8004236:	6879      	ldr	r1, [r7, #4]
 8004238:	4613      	mov	r3, r2
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	1a9b      	subs	r3, r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	440b      	add	r3, r1
 8004242:	334d      	adds	r3, #77	; 0x4d
 8004244:	2202      	movs	r2, #2
 8004246:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004248:	78fa      	ldrb	r2, [r7, #3]
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	4613      	mov	r3, r2
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	1a9b      	subs	r3, r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	331b      	adds	r3, #27
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b01      	cmp	r3, #1
 800425c:	f040 81ce 	bne.w	80045fc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004260:	78fa      	ldrb	r2, [r7, #3]
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	4613      	mov	r3, r2
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	1a9b      	subs	r3, r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	3326      	adds	r3, #38	; 0x26
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b03      	cmp	r3, #3
 8004274:	d16b      	bne.n	800434e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004276:	78fa      	ldrb	r2, [r7, #3]
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	4613      	mov	r3, r2
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	1a9b      	subs	r3, r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	440b      	add	r3, r1
 8004284:	3348      	adds	r3, #72	; 0x48
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	1c59      	adds	r1, r3, #1
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4403      	add	r3, r0
 8004296:	3348      	adds	r3, #72	; 0x48
 8004298:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800429a:	78fa      	ldrb	r2, [r7, #3]
 800429c:	6879      	ldr	r1, [r7, #4]
 800429e:	4613      	mov	r3, r2
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	1a9b      	subs	r3, r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	440b      	add	r3, r1
 80042a8:	3348      	adds	r3, #72	; 0x48
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d943      	bls.n	8004338 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80042b0:	78fa      	ldrb	r2, [r7, #3]
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	4613      	mov	r3, r2
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	1a9b      	subs	r3, r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	440b      	add	r3, r1
 80042be:	3348      	adds	r3, #72	; 0x48
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80042c4:	78fa      	ldrb	r2, [r7, #3]
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	4613      	mov	r3, r2
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	1a9b      	subs	r3, r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	331b      	adds	r3, #27
 80042d4:	2200      	movs	r2, #0
 80042d6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80042d8:	78fa      	ldrb	r2, [r7, #3]
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	4613      	mov	r3, r2
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	1a9b      	subs	r3, r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	440b      	add	r3, r1
 80042e6:	3344      	adds	r3, #68	; 0x44
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d809      	bhi.n	8004302 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80042ee:	78fa      	ldrb	r2, [r7, #3]
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	4613      	mov	r3, r2
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	1a9b      	subs	r3, r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	440b      	add	r3, r1
 80042fc:	331c      	adds	r3, #28
 80042fe:	2201      	movs	r2, #1
 8004300:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004302:	78fb      	ldrb	r3, [r7, #3]
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	4413      	add	r3, r2
 800430a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	78fa      	ldrb	r2, [r7, #3]
 8004312:	0151      	lsls	r1, r2, #5
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	440a      	add	r2, r1
 8004318:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800431c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004320:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004322:	78fa      	ldrb	r2, [r7, #3]
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	1a9b      	subs	r3, r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	334c      	adds	r3, #76	; 0x4c
 8004332:	2204      	movs	r2, #4
 8004334:	701a      	strb	r2, [r3, #0]
 8004336:	e014      	b.n	8004362 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004338:	78fa      	ldrb	r2, [r7, #3]
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	4613      	mov	r3, r2
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	1a9b      	subs	r3, r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	334c      	adds	r3, #76	; 0x4c
 8004348:	2202      	movs	r2, #2
 800434a:	701a      	strb	r2, [r3, #0]
 800434c:	e009      	b.n	8004362 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800434e:	78fa      	ldrb	r2, [r7, #3]
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	1a9b      	subs	r3, r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	334c      	adds	r3, #76	; 0x4c
 800435e:	2202      	movs	r2, #2
 8004360:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004362:	78fa      	ldrb	r2, [r7, #3]
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	4613      	mov	r3, r2
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	1a9b      	subs	r3, r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	440b      	add	r3, r1
 8004370:	3326      	adds	r3, #38	; 0x26
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00b      	beq.n	8004390 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004378:	78fa      	ldrb	r2, [r7, #3]
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	4613      	mov	r3, r2
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	1a9b      	subs	r3, r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	3326      	adds	r3, #38	; 0x26
 8004388:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800438a:	2b02      	cmp	r3, #2
 800438c:	f040 8136 	bne.w	80045fc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004390:	78fb      	ldrb	r3, [r7, #3]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	4413      	add	r3, r2
 8004398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043a6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043ae:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80043b0:	78fb      	ldrb	r3, [r7, #3]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043bc:	461a      	mov	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	e11b      	b.n	80045fc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80043c4:	78fa      	ldrb	r2, [r7, #3]
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	4613      	mov	r3, r2
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	1a9b      	subs	r3, r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	440b      	add	r3, r1
 80043d2:	334d      	adds	r3, #77	; 0x4d
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	f040 8081 	bne.w	80044de <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043dc:	78fa      	ldrb	r2, [r7, #3]
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	1a9b      	subs	r3, r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	334d      	adds	r3, #77	; 0x4d
 80043ec:	2202      	movs	r2, #2
 80043ee:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80043f0:	78fa      	ldrb	r2, [r7, #3]
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	4613      	mov	r3, r2
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	1a9b      	subs	r3, r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	331b      	adds	r3, #27
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	2b01      	cmp	r3, #1
 8004404:	f040 80fa 	bne.w	80045fc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004408:	78fa      	ldrb	r2, [r7, #3]
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	4613      	mov	r3, r2
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	334c      	adds	r3, #76	; 0x4c
 8004418:	2202      	movs	r2, #2
 800441a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800441c:	78fb      	ldrb	r3, [r7, #3]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	4413      	add	r3, r2
 8004424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	78fa      	ldrb	r2, [r7, #3]
 800442c:	0151      	lsls	r1, r2, #5
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	440a      	add	r2, r1
 8004432:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800443c:	78fb      	ldrb	r3, [r7, #3]
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	4413      	add	r3, r2
 8004444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	78fa      	ldrb	r2, [r7, #3]
 800444c:	0151      	lsls	r1, r2, #5
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	440a      	add	r2, r1
 8004452:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800445a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	4413      	add	r3, r2
 8004464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	78fa      	ldrb	r2, [r7, #3]
 800446c:	0151      	lsls	r1, r2, #5
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	440a      	add	r2, r1
 8004472:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004476:	f023 0320 	bic.w	r3, r3, #32
 800447a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800447c:	78fa      	ldrb	r2, [r7, #3]
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	4613      	mov	r3, r2
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	1a9b      	subs	r3, r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	3326      	adds	r3, #38	; 0x26
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00b      	beq.n	80044aa <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004492:	78fa      	ldrb	r2, [r7, #3]
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	4613      	mov	r3, r2
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	1a9b      	subs	r3, r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	440b      	add	r3, r1
 80044a0:	3326      	adds	r3, #38	; 0x26
 80044a2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	f040 80a9 	bne.w	80045fc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80044aa:	78fb      	ldrb	r3, [r7, #3]
 80044ac:	015a      	lsls	r2, r3, #5
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	4413      	add	r3, r2
 80044b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044c0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044c8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80044ca:	78fb      	ldrb	r3, [r7, #3]
 80044cc:	015a      	lsls	r2, r3, #5
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	4413      	add	r3, r2
 80044d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044d6:	461a      	mov	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	e08e      	b.n	80045fc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80044de:	78fa      	ldrb	r2, [r7, #3]
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	4613      	mov	r3, r2
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	1a9b      	subs	r3, r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	440b      	add	r3, r1
 80044ec:	334d      	adds	r3, #77	; 0x4d
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d143      	bne.n	800457c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044f4:	78fa      	ldrb	r2, [r7, #3]
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	4613      	mov	r3, r2
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	1a9b      	subs	r3, r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	334d      	adds	r3, #77	; 0x4d
 8004504:	2202      	movs	r2, #2
 8004506:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004508:	78fa      	ldrb	r2, [r7, #3]
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	4613      	mov	r3, r2
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	1a9b      	subs	r3, r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	334c      	adds	r3, #76	; 0x4c
 8004518:	2202      	movs	r2, #2
 800451a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800451c:	78fa      	ldrb	r2, [r7, #3]
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	4613      	mov	r3, r2
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	1a9b      	subs	r3, r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	3326      	adds	r3, #38	; 0x26
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004532:	78fa      	ldrb	r2, [r7, #3]
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	4613      	mov	r3, r2
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	1a9b      	subs	r3, r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	3326      	adds	r3, #38	; 0x26
 8004542:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004544:	2b02      	cmp	r3, #2
 8004546:	d159      	bne.n	80045fc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004548:	78fb      	ldrb	r3, [r7, #3]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	4413      	add	r3, r2
 8004550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800455e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004566:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004568:	78fb      	ldrb	r3, [r7, #3]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	4413      	add	r3, r2
 8004570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004574:	461a      	mov	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	e03f      	b.n	80045fc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800457c:	78fa      	ldrb	r2, [r7, #3]
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	4613      	mov	r3, r2
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	334d      	adds	r3, #77	; 0x4d
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2b08      	cmp	r3, #8
 8004590:	d126      	bne.n	80045e0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004592:	78fa      	ldrb	r2, [r7, #3]
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	4613      	mov	r3, r2
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	1a9b      	subs	r3, r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	440b      	add	r3, r1
 80045a0:	334d      	adds	r3, #77	; 0x4d
 80045a2:	2202      	movs	r2, #2
 80045a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80045a6:	78fa      	ldrb	r2, [r7, #3]
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	4613      	mov	r3, r2
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	1a9b      	subs	r3, r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	440b      	add	r3, r1
 80045b4:	3344      	adds	r3, #68	; 0x44
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	1c59      	adds	r1, r3, #1
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	4613      	mov	r3, r2
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	1a9b      	subs	r3, r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4403      	add	r3, r0
 80045c6:	3344      	adds	r3, #68	; 0x44
 80045c8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80045ca:	78fa      	ldrb	r2, [r7, #3]
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	4613      	mov	r3, r2
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	334c      	adds	r3, #76	; 0x4c
 80045da:	2204      	movs	r2, #4
 80045dc:	701a      	strb	r2, [r3, #0]
 80045de:	e00d      	b.n	80045fc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80045e0:	78fa      	ldrb	r2, [r7, #3]
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	4613      	mov	r3, r2
 80045e6:	011b      	lsls	r3, r3, #4
 80045e8:	1a9b      	subs	r3, r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	440b      	add	r3, r1
 80045ee:	334d      	adds	r3, #77	; 0x4d
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	f000 8100 	beq.w	80047f8 <HCD_HC_IN_IRQHandler+0xcca>
 80045f8:	e000      	b.n	80045fc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80045fa:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80045fc:	78fa      	ldrb	r2, [r7, #3]
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	4613      	mov	r3, r2
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	1a9b      	subs	r3, r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	334c      	adds	r3, #76	; 0x4c
 800460c:	781a      	ldrb	r2, [r3, #0]
 800460e:	78fb      	ldrb	r3, [r7, #3]
 8004610:	4619      	mov	r1, r3
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f008 fdc8 	bl	800d1a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004618:	e0ef      	b.n	80047fa <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	78fa      	ldrb	r2, [r7, #3]
 8004620:	4611      	mov	r1, r2
 8004622:	4618      	mov	r0, r3
 8004624:	f005 fcb3 	bl	8009f8e <USB_ReadChInterrupts>
 8004628:	4603      	mov	r3, r0
 800462a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462e:	2b40      	cmp	r3, #64	; 0x40
 8004630:	d12f      	bne.n	8004692 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004632:	78fb      	ldrb	r3, [r7, #3]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	4413      	add	r3, r2
 800463a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800463e:	461a      	mov	r2, r3
 8004640:	2340      	movs	r3, #64	; 0x40
 8004642:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004644:	78fa      	ldrb	r2, [r7, #3]
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	4613      	mov	r3, r2
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	1a9b      	subs	r3, r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	334d      	adds	r3, #77	; 0x4d
 8004654:	2205      	movs	r2, #5
 8004656:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004658:	78fa      	ldrb	r2, [r7, #3]
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	1a9b      	subs	r3, r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	331a      	adds	r3, #26
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d109      	bne.n	8004682 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800466e:	78fa      	ldrb	r2, [r7, #3]
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	4613      	mov	r3, r2
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	1a9b      	subs	r3, r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	440b      	add	r3, r1
 800467c:	3344      	adds	r3, #68	; 0x44
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	78fa      	ldrb	r2, [r7, #3]
 8004688:	4611      	mov	r1, r2
 800468a:	4618      	mov	r0, r3
 800468c:	f006 fa23 	bl	800aad6 <USB_HC_Halt>
 8004690:	e0b3      	b.n	80047fa <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	78fa      	ldrb	r2, [r7, #3]
 8004698:	4611      	mov	r1, r2
 800469a:	4618      	mov	r0, r3
 800469c:	f005 fc77 	bl	8009f8e <USB_ReadChInterrupts>
 80046a0:	4603      	mov	r3, r0
 80046a2:	f003 0310 	and.w	r3, r3, #16
 80046a6:	2b10      	cmp	r3, #16
 80046a8:	f040 80a7 	bne.w	80047fa <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80046ac:	78fa      	ldrb	r2, [r7, #3]
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	3326      	adds	r3, #38	; 0x26
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b03      	cmp	r3, #3
 80046c0:	d11b      	bne.n	80046fa <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80046c2:	78fa      	ldrb	r2, [r7, #3]
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	4613      	mov	r3, r2
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	1a9b      	subs	r3, r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	440b      	add	r3, r1
 80046d0:	3344      	adds	r3, #68	; 0x44
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80046d6:	78fa      	ldrb	r2, [r7, #3]
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	4613      	mov	r3, r2
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	1a9b      	subs	r3, r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	440b      	add	r3, r1
 80046e4:	334d      	adds	r3, #77	; 0x4d
 80046e6:	2204      	movs	r2, #4
 80046e8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	78fa      	ldrb	r2, [r7, #3]
 80046f0:	4611      	mov	r1, r2
 80046f2:	4618      	mov	r0, r3
 80046f4:	f006 f9ef 	bl	800aad6 <USB_HC_Halt>
 80046f8:	e03f      	b.n	800477a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80046fa:	78fa      	ldrb	r2, [r7, #3]
 80046fc:	6879      	ldr	r1, [r7, #4]
 80046fe:	4613      	mov	r3, r2
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	1a9b      	subs	r3, r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	440b      	add	r3, r1
 8004708:	3326      	adds	r3, #38	; 0x26
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00a      	beq.n	8004726 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004710:	78fa      	ldrb	r2, [r7, #3]
 8004712:	6879      	ldr	r1, [r7, #4]
 8004714:	4613      	mov	r3, r2
 8004716:	011b      	lsls	r3, r3, #4
 8004718:	1a9b      	subs	r3, r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	440b      	add	r3, r1
 800471e:	3326      	adds	r3, #38	; 0x26
 8004720:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004722:	2b02      	cmp	r3, #2
 8004724:	d129      	bne.n	800477a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004726:	78fa      	ldrb	r2, [r7, #3]
 8004728:	6879      	ldr	r1, [r7, #4]
 800472a:	4613      	mov	r3, r2
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	1a9b      	subs	r3, r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	440b      	add	r3, r1
 8004734:	3344      	adds	r3, #68	; 0x44
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	799b      	ldrb	r3, [r3, #6]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <HCD_HC_IN_IRQHandler+0xc2a>
 8004742:	78fa      	ldrb	r2, [r7, #3]
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	4613      	mov	r3, r2
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	1a9b      	subs	r3, r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	440b      	add	r3, r1
 8004750:	331b      	adds	r3, #27
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d110      	bne.n	800477a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004758:	78fa      	ldrb	r2, [r7, #3]
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	4613      	mov	r3, r2
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	1a9b      	subs	r3, r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	334d      	adds	r3, #77	; 0x4d
 8004768:	2204      	movs	r2, #4
 800476a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	78fa      	ldrb	r2, [r7, #3]
 8004772:	4611      	mov	r1, r2
 8004774:	4618      	mov	r0, r3
 8004776:	f006 f9ae 	bl	800aad6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800477a:	78fa      	ldrb	r2, [r7, #3]
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	4613      	mov	r3, r2
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	1a9b      	subs	r3, r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	331b      	adds	r3, #27
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d129      	bne.n	80047e4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004790:	78fa      	ldrb	r2, [r7, #3]
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	4613      	mov	r3, r2
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	1a9b      	subs	r3, r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	331b      	adds	r3, #27
 80047a0:	2200      	movs	r2, #0
 80047a2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	78fa      	ldrb	r2, [r7, #3]
 80047b4:	0151      	lsls	r1, r2, #5
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	440a      	add	r2, r1
 80047ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047c2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80047c4:	78fb      	ldrb	r3, [r7, #3]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	78fa      	ldrb	r2, [r7, #3]
 80047d4:	0151      	lsls	r1, r2, #5
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	440a      	add	r2, r1
 80047da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047de:	f043 0320 	orr.w	r3, r3, #32
 80047e2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80047e4:	78fb      	ldrb	r3, [r7, #3]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f0:	461a      	mov	r2, r3
 80047f2:	2310      	movs	r3, #16
 80047f4:	6093      	str	r3, [r2, #8]
 80047f6:	e000      	b.n	80047fa <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80047f8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80047fa:	3718      	adds	r7, #24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	78fa      	ldrb	r2, [r7, #3]
 800481c:	4611      	mov	r1, r2
 800481e:	4618      	mov	r0, r3
 8004820:	f005 fbb5 	bl	8009f8e <USB_ReadChInterrupts>
 8004824:	4603      	mov	r3, r0
 8004826:	f003 0304 	and.w	r3, r3, #4
 800482a:	2b04      	cmp	r3, #4
 800482c:	d11b      	bne.n	8004866 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800482e:	78fb      	ldrb	r3, [r7, #3]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	4413      	add	r3, r2
 8004836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800483a:	461a      	mov	r2, r3
 800483c:	2304      	movs	r3, #4
 800483e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004840:	78fa      	ldrb	r2, [r7, #3]
 8004842:	6879      	ldr	r1, [r7, #4]
 8004844:	4613      	mov	r3, r2
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	1a9b      	subs	r3, r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	440b      	add	r3, r1
 800484e:	334d      	adds	r3, #77	; 0x4d
 8004850:	2207      	movs	r2, #7
 8004852:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	78fa      	ldrb	r2, [r7, #3]
 800485a:	4611      	mov	r1, r2
 800485c:	4618      	mov	r0, r3
 800485e:	f006 f93a 	bl	800aad6 <USB_HC_Halt>
 8004862:	f000 bc6f 	b.w	8005144 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	78fa      	ldrb	r2, [r7, #3]
 800486c:	4611      	mov	r1, r2
 800486e:	4618      	mov	r0, r3
 8004870:	f005 fb8d 	bl	8009f8e <USB_ReadChInterrupts>
 8004874:	4603      	mov	r3, r0
 8004876:	f003 0320 	and.w	r3, r3, #32
 800487a:	2b20      	cmp	r3, #32
 800487c:	f040 8082 	bne.w	8004984 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	4413      	add	r3, r2
 8004888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800488c:	461a      	mov	r2, r3
 800488e:	2320      	movs	r3, #32
 8004890:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004892:	78fa      	ldrb	r2, [r7, #3]
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	4613      	mov	r3, r2
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	1a9b      	subs	r3, r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	440b      	add	r3, r1
 80048a0:	3319      	adds	r3, #25
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d124      	bne.n	80048f2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80048a8:	78fa      	ldrb	r2, [r7, #3]
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	4613      	mov	r3, r2
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	1a9b      	subs	r3, r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	440b      	add	r3, r1
 80048b6:	3319      	adds	r3, #25
 80048b8:	2200      	movs	r2, #0
 80048ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80048bc:	78fa      	ldrb	r2, [r7, #3]
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	334c      	adds	r3, #76	; 0x4c
 80048cc:	2202      	movs	r2, #2
 80048ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80048d0:	78fa      	ldrb	r2, [r7, #3]
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	4613      	mov	r3, r2
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	1a9b      	subs	r3, r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	440b      	add	r3, r1
 80048de:	334d      	adds	r3, #77	; 0x4d
 80048e0:	2203      	movs	r2, #3
 80048e2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	78fa      	ldrb	r2, [r7, #3]
 80048ea:	4611      	mov	r1, r2
 80048ec:	4618      	mov	r0, r3
 80048ee:	f006 f8f2 	bl	800aad6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80048f2:	78fa      	ldrb	r2, [r7, #3]
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	4613      	mov	r3, r2
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	1a9b      	subs	r3, r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	440b      	add	r3, r1
 8004900:	331a      	adds	r3, #26
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b01      	cmp	r3, #1
 8004906:	f040 841d 	bne.w	8005144 <HCD_HC_OUT_IRQHandler+0x944>
 800490a:	78fa      	ldrb	r2, [r7, #3]
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	4613      	mov	r3, r2
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	440b      	add	r3, r1
 8004918:	331b      	adds	r3, #27
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	f040 8411 	bne.w	8005144 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004922:	78fa      	ldrb	r2, [r7, #3]
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	4613      	mov	r3, r2
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	1a9b      	subs	r3, r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	440b      	add	r3, r1
 8004930:	3326      	adds	r3, #38	; 0x26
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d009      	beq.n	800494c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004938:	78fa      	ldrb	r2, [r7, #3]
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	4613      	mov	r3, r2
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	1a9b      	subs	r3, r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	331b      	adds	r3, #27
 8004948:	2201      	movs	r2, #1
 800494a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800494c:	78fa      	ldrb	r2, [r7, #3]
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	4613      	mov	r3, r2
 8004952:	011b      	lsls	r3, r3, #4
 8004954:	1a9b      	subs	r3, r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	440b      	add	r3, r1
 800495a:	334d      	adds	r3, #77	; 0x4d
 800495c:	2203      	movs	r2, #3
 800495e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	78fa      	ldrb	r2, [r7, #3]
 8004966:	4611      	mov	r1, r2
 8004968:	4618      	mov	r0, r3
 800496a:	f006 f8b4 	bl	800aad6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800496e:	78fa      	ldrb	r2, [r7, #3]
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	4613      	mov	r3, r2
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	1a9b      	subs	r3, r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	3344      	adds	r3, #68	; 0x44
 800497e:	2200      	movs	r2, #0
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	e3df      	b.n	8005144 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	78fa      	ldrb	r2, [r7, #3]
 800498a:	4611      	mov	r1, r2
 800498c:	4618      	mov	r0, r3
 800498e:	f005 fafe 	bl	8009f8e <USB_ReadChInterrupts>
 8004992:	4603      	mov	r3, r0
 8004994:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800499c:	d111      	bne.n	80049c2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049aa:	461a      	mov	r2, r3
 80049ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049b0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	78fa      	ldrb	r2, [r7, #3]
 80049b8:	4611      	mov	r1, r2
 80049ba:	4618      	mov	r0, r3
 80049bc:	f006 f88b 	bl	800aad6 <USB_HC_Halt>
 80049c0:	e3c0      	b.n	8005144 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	78fa      	ldrb	r2, [r7, #3]
 80049c8:	4611      	mov	r1, r2
 80049ca:	4618      	mov	r0, r3
 80049cc:	f005 fadf 	bl	8009f8e <USB_ReadChInterrupts>
 80049d0:	4603      	mov	r3, r0
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d168      	bne.n	8004aac <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80049da:	78fa      	ldrb	r2, [r7, #3]
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	440b      	add	r3, r1
 80049e8:	3344      	adds	r3, #68	; 0x44
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	78fa      	ldrb	r2, [r7, #3]
 80049f4:	4611      	mov	r1, r2
 80049f6:	4618      	mov	r0, r3
 80049f8:	f005 fac9 	bl	8009f8e <USB_ReadChInterrupts>
 80049fc:	4603      	mov	r3, r0
 80049fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a02:	2b40      	cmp	r3, #64	; 0x40
 8004a04:	d112      	bne.n	8004a2c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004a06:	78fa      	ldrb	r2, [r7, #3]
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	1a9b      	subs	r3, r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	440b      	add	r3, r1
 8004a14:	3319      	adds	r3, #25
 8004a16:	2201      	movs	r2, #1
 8004a18:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004a1a:	78fb      	ldrb	r3, [r7, #3]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a26:	461a      	mov	r2, r3
 8004a28:	2340      	movs	r3, #64	; 0x40
 8004a2a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004a2c:	78fa      	ldrb	r2, [r7, #3]
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	4613      	mov	r3, r2
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	1a9b      	subs	r3, r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	440b      	add	r3, r1
 8004a3a:	331b      	adds	r3, #27
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d019      	beq.n	8004a76 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004a42:	78fa      	ldrb	r2, [r7, #3]
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	4613      	mov	r3, r2
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	1a9b      	subs	r3, r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	440b      	add	r3, r1
 8004a50:	331b      	adds	r3, #27
 8004a52:	2200      	movs	r2, #0
 8004a54:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004a56:	78fb      	ldrb	r3, [r7, #3]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	78fa      	ldrb	r2, [r7, #3]
 8004a66:	0151      	lsls	r1, r2, #5
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	440a      	add	r2, r1
 8004a6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a74:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004a76:	78fb      	ldrb	r3, [r7, #3]
 8004a78:	015a      	lsls	r2, r3, #5
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a82:	461a      	mov	r2, r3
 8004a84:	2301      	movs	r3, #1
 8004a86:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004a88:	78fa      	ldrb	r2, [r7, #3]
 8004a8a:	6879      	ldr	r1, [r7, #4]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	1a9b      	subs	r3, r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	334d      	adds	r3, #77	; 0x4d
 8004a98:	2201      	movs	r2, #1
 8004a9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	78fa      	ldrb	r2, [r7, #3]
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f006 f816 	bl	800aad6 <USB_HC_Halt>
 8004aaa:	e34b      	b.n	8005144 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	78fa      	ldrb	r2, [r7, #3]
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f005 fa6a 	bl	8009f8e <USB_ReadChInterrupts>
 8004aba:	4603      	mov	r3, r0
 8004abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac0:	2b40      	cmp	r3, #64	; 0x40
 8004ac2:	d139      	bne.n	8004b38 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004ac4:	78fa      	ldrb	r2, [r7, #3]
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	1a9b      	subs	r3, r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	334d      	adds	r3, #77	; 0x4d
 8004ad4:	2205      	movs	r2, #5
 8004ad6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004ad8:	78fa      	ldrb	r2, [r7, #3]
 8004ada:	6879      	ldr	r1, [r7, #4]
 8004adc:	4613      	mov	r3, r2
 8004ade:	011b      	lsls	r3, r3, #4
 8004ae0:	1a9b      	subs	r3, r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	331a      	adds	r3, #26
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d109      	bne.n	8004b02 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004aee:	78fa      	ldrb	r2, [r7, #3]
 8004af0:	6879      	ldr	r1, [r7, #4]
 8004af2:	4613      	mov	r3, r2
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	1a9b      	subs	r3, r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	440b      	add	r3, r1
 8004afc:	3319      	adds	r3, #25
 8004afe:	2201      	movs	r2, #1
 8004b00:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004b02:	78fa      	ldrb	r2, [r7, #3]
 8004b04:	6879      	ldr	r1, [r7, #4]
 8004b06:	4613      	mov	r3, r2
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	1a9b      	subs	r3, r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	440b      	add	r3, r1
 8004b10:	3344      	adds	r3, #68	; 0x44
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	78fa      	ldrb	r2, [r7, #3]
 8004b1c:	4611      	mov	r1, r2
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f005 ffd9 	bl	800aad6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b30:	461a      	mov	r2, r3
 8004b32:	2340      	movs	r3, #64	; 0x40
 8004b34:	6093      	str	r3, [r2, #8]
 8004b36:	e305      	b.n	8005144 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	78fa      	ldrb	r2, [r7, #3]
 8004b3e:	4611      	mov	r1, r2
 8004b40:	4618      	mov	r0, r3
 8004b42:	f005 fa24 	bl	8009f8e <USB_ReadChInterrupts>
 8004b46:	4603      	mov	r3, r0
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d11a      	bne.n	8004b86 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004b50:	78fb      	ldrb	r3, [r7, #3]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	2308      	movs	r3, #8
 8004b60:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004b62:	78fa      	ldrb	r2, [r7, #3]
 8004b64:	6879      	ldr	r1, [r7, #4]
 8004b66:	4613      	mov	r3, r2
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	1a9b      	subs	r3, r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	440b      	add	r3, r1
 8004b70:	334d      	adds	r3, #77	; 0x4d
 8004b72:	2206      	movs	r2, #6
 8004b74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	78fa      	ldrb	r2, [r7, #3]
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f005 ffa9 	bl	800aad6 <USB_HC_Halt>
 8004b84:	e2de      	b.n	8005144 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	78fa      	ldrb	r2, [r7, #3]
 8004b8c:	4611      	mov	r1, r2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f005 f9fd 	bl	8009f8e <USB_ReadChInterrupts>
 8004b94:	4603      	mov	r3, r0
 8004b96:	f003 0310 	and.w	r3, r3, #16
 8004b9a:	2b10      	cmp	r3, #16
 8004b9c:	d144      	bne.n	8004c28 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004b9e:	78fa      	ldrb	r2, [r7, #3]
 8004ba0:	6879      	ldr	r1, [r7, #4]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	1a9b      	subs	r3, r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	440b      	add	r3, r1
 8004bac:	3344      	adds	r3, #68	; 0x44
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004bb2:	78fa      	ldrb	r2, [r7, #3]
 8004bb4:	6879      	ldr	r1, [r7, #4]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	1a9b      	subs	r3, r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	440b      	add	r3, r1
 8004bc0:	334d      	adds	r3, #77	; 0x4d
 8004bc2:	2204      	movs	r2, #4
 8004bc4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004bc6:	78fa      	ldrb	r2, [r7, #3]
 8004bc8:	6879      	ldr	r1, [r7, #4]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	1a9b      	subs	r3, r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	440b      	add	r3, r1
 8004bd4:	3319      	adds	r3, #25
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d114      	bne.n	8004c06 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004bdc:	78fa      	ldrb	r2, [r7, #3]
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	1a9b      	subs	r3, r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	3318      	adds	r3, #24
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d109      	bne.n	8004c06 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004bf2:	78fa      	ldrb	r2, [r7, #3]
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	1a9b      	subs	r3, r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	440b      	add	r3, r1
 8004c00:	3319      	adds	r3, #25
 8004c02:	2201      	movs	r2, #1
 8004c04:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	78fa      	ldrb	r2, [r7, #3]
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f005 ff61 	bl	800aad6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004c14:	78fb      	ldrb	r3, [r7, #3]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c20:	461a      	mov	r2, r3
 8004c22:	2310      	movs	r3, #16
 8004c24:	6093      	str	r3, [r2, #8]
 8004c26:	e28d      	b.n	8005144 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	78fa      	ldrb	r2, [r7, #3]
 8004c2e:	4611      	mov	r1, r2
 8004c30:	4618      	mov	r0, r3
 8004c32:	f005 f9ac 	bl	8009f8e <USB_ReadChInterrupts>
 8004c36:	4603      	mov	r3, r0
 8004c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3c:	2b80      	cmp	r3, #128	; 0x80
 8004c3e:	d169      	bne.n	8004d14 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	799b      	ldrb	r3, [r3, #6]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d111      	bne.n	8004c6c <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004c48:	78fa      	ldrb	r2, [r7, #3]
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	1a9b      	subs	r3, r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	440b      	add	r3, r1
 8004c56:	334d      	adds	r3, #77	; 0x4d
 8004c58:	2207      	movs	r2, #7
 8004c5a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	78fa      	ldrb	r2, [r7, #3]
 8004c62:	4611      	mov	r1, r2
 8004c64:	4618      	mov	r0, r3
 8004c66:	f005 ff36 	bl	800aad6 <USB_HC_Halt>
 8004c6a:	e049      	b.n	8004d00 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004c6c:	78fa      	ldrb	r2, [r7, #3]
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	4613      	mov	r3, r2
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	1a9b      	subs	r3, r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	440b      	add	r3, r1
 8004c7a:	3344      	adds	r3, #68	; 0x44
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	1c59      	adds	r1, r3, #1
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	4613      	mov	r3, r2
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	1a9b      	subs	r3, r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4403      	add	r3, r0
 8004c8c:	3344      	adds	r3, #68	; 0x44
 8004c8e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004c90:	78fa      	ldrb	r2, [r7, #3]
 8004c92:	6879      	ldr	r1, [r7, #4]
 8004c94:	4613      	mov	r3, r2
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	1a9b      	subs	r3, r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	3344      	adds	r3, #68	; 0x44
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d922      	bls.n	8004cec <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004ca6:	78fa      	ldrb	r2, [r7, #3]
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	4613      	mov	r3, r2
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	1a9b      	subs	r3, r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	440b      	add	r3, r1
 8004cb4:	3344      	adds	r3, #68	; 0x44
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004cba:	78fa      	ldrb	r2, [r7, #3]
 8004cbc:	6879      	ldr	r1, [r7, #4]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	011b      	lsls	r3, r3, #4
 8004cc2:	1a9b      	subs	r3, r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	440b      	add	r3, r1
 8004cc8:	334c      	adds	r3, #76	; 0x4c
 8004cca:	2204      	movs	r2, #4
 8004ccc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004cce:	78fa      	ldrb	r2, [r7, #3]
 8004cd0:	6879      	ldr	r1, [r7, #4]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	1a9b      	subs	r3, r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	440b      	add	r3, r1
 8004cdc:	334c      	adds	r3, #76	; 0x4c
 8004cde:	781a      	ldrb	r2, [r3, #0]
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f008 fa5f 	bl	800d1a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004cea:	e009      	b.n	8004d00 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004cec:	78fa      	ldrb	r2, [r7, #3]
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	011b      	lsls	r3, r3, #4
 8004cf4:	1a9b      	subs	r3, r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	334c      	adds	r3, #76	; 0x4c
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004d00:	78fb      	ldrb	r3, [r7, #3]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	2380      	movs	r3, #128	; 0x80
 8004d10:	6093      	str	r3, [r2, #8]
 8004d12:	e217      	b.n	8005144 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	78fa      	ldrb	r2, [r7, #3]
 8004d1a:	4611      	mov	r1, r2
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f005 f936 	bl	8009f8e <USB_ReadChInterrupts>
 8004d22:	4603      	mov	r3, r0
 8004d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d2c:	d11b      	bne.n	8004d66 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004d2e:	78fa      	ldrb	r2, [r7, #3]
 8004d30:	6879      	ldr	r1, [r7, #4]
 8004d32:	4613      	mov	r3, r2
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	1a9b      	subs	r3, r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	440b      	add	r3, r1
 8004d3c:	334d      	adds	r3, #77	; 0x4d
 8004d3e:	2209      	movs	r2, #9
 8004d40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	78fa      	ldrb	r2, [r7, #3]
 8004d48:	4611      	mov	r1, r2
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f005 fec3 	bl	800aad6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d62:	6093      	str	r3, [r2, #8]
 8004d64:	e1ee      	b.n	8005144 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	78fa      	ldrb	r2, [r7, #3]
 8004d6c:	4611      	mov	r1, r2
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f005 f90d 	bl	8009f8e <USB_ReadChInterrupts>
 8004d74:	4603      	mov	r3, r0
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	f040 81df 	bne.w	800513e <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	2302      	movs	r3, #2
 8004d90:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004d92:	78fa      	ldrb	r2, [r7, #3]
 8004d94:	6879      	ldr	r1, [r7, #4]
 8004d96:	4613      	mov	r3, r2
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	1a9b      	subs	r3, r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	440b      	add	r3, r1
 8004da0:	334d      	adds	r3, #77	; 0x4d
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	f040 8093 	bne.w	8004ed0 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004daa:	78fa      	ldrb	r2, [r7, #3]
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	4613      	mov	r3, r2
 8004db0:	011b      	lsls	r3, r3, #4
 8004db2:	1a9b      	subs	r3, r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	440b      	add	r3, r1
 8004db8:	334d      	adds	r3, #77	; 0x4d
 8004dba:	2202      	movs	r2, #2
 8004dbc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004dbe:	78fa      	ldrb	r2, [r7, #3]
 8004dc0:	6879      	ldr	r1, [r7, #4]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	011b      	lsls	r3, r3, #4
 8004dc6:	1a9b      	subs	r3, r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	440b      	add	r3, r1
 8004dcc:	334c      	adds	r3, #76	; 0x4c
 8004dce:	2201      	movs	r2, #1
 8004dd0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004dd2:	78fa      	ldrb	r2, [r7, #3]
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	1a9b      	subs	r3, r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	440b      	add	r3, r1
 8004de0:	3326      	adds	r3, #38	; 0x26
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d00b      	beq.n	8004e00 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004de8:	78fa      	ldrb	r2, [r7, #3]
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	4613      	mov	r3, r2
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	1a9b      	subs	r3, r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	3326      	adds	r3, #38	; 0x26
 8004df8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	f040 8190 	bne.w	8005120 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	799b      	ldrb	r3, [r3, #6]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d115      	bne.n	8004e34 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004e08:	78fa      	ldrb	r2, [r7, #3]
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	1a9b      	subs	r3, r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	333d      	adds	r3, #61	; 0x3d
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	78fa      	ldrb	r2, [r7, #3]
 8004e1c:	f083 0301 	eor.w	r3, r3, #1
 8004e20:	b2d8      	uxtb	r0, r3
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	4613      	mov	r3, r2
 8004e26:	011b      	lsls	r3, r3, #4
 8004e28:	1a9b      	subs	r3, r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	440b      	add	r3, r1
 8004e2e:	333d      	adds	r3, #61	; 0x3d
 8004e30:	4602      	mov	r2, r0
 8004e32:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	799b      	ldrb	r3, [r3, #6]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	f040 8171 	bne.w	8005120 <HCD_HC_OUT_IRQHandler+0x920>
 8004e3e:	78fa      	ldrb	r2, [r7, #3]
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	4613      	mov	r3, r2
 8004e44:	011b      	lsls	r3, r3, #4
 8004e46:	1a9b      	subs	r3, r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	3334      	adds	r3, #52	; 0x34
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 8165 	beq.w	8005120 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004e56:	78fa      	ldrb	r2, [r7, #3]
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	011b      	lsls	r3, r3, #4
 8004e5e:	1a9b      	subs	r3, r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	440b      	add	r3, r1
 8004e64:	3334      	adds	r3, #52	; 0x34
 8004e66:	6819      	ldr	r1, [r3, #0]
 8004e68:	78fa      	ldrb	r2, [r7, #3]
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	011b      	lsls	r3, r3, #4
 8004e70:	1a9b      	subs	r3, r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4403      	add	r3, r0
 8004e76:	3328      	adds	r3, #40	; 0x28
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	440b      	add	r3, r1
 8004e7c:	1e59      	subs	r1, r3, #1
 8004e7e:	78fa      	ldrb	r2, [r7, #3]
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	4613      	mov	r3, r2
 8004e84:	011b      	lsls	r3, r3, #4
 8004e86:	1a9b      	subs	r3, r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4403      	add	r3, r0
 8004e8c:	3328      	adds	r3, #40	; 0x28
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e94:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 813f 	beq.w	8005120 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004ea2:	78fa      	ldrb	r2, [r7, #3]
 8004ea4:	6879      	ldr	r1, [r7, #4]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	1a9b      	subs	r3, r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	440b      	add	r3, r1
 8004eb0:	333d      	adds	r3, #61	; 0x3d
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	78fa      	ldrb	r2, [r7, #3]
 8004eb6:	f083 0301 	eor.w	r3, r3, #1
 8004eba:	b2d8      	uxtb	r0, r3
 8004ebc:	6879      	ldr	r1, [r7, #4]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	011b      	lsls	r3, r3, #4
 8004ec2:	1a9b      	subs	r3, r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	440b      	add	r3, r1
 8004ec8:	333d      	adds	r3, #61	; 0x3d
 8004eca:	4602      	mov	r2, r0
 8004ecc:	701a      	strb	r2, [r3, #0]
 8004ece:	e127      	b.n	8005120 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004ed0:	78fa      	ldrb	r2, [r7, #3]
 8004ed2:	6879      	ldr	r1, [r7, #4]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	011b      	lsls	r3, r3, #4
 8004ed8:	1a9b      	subs	r3, r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	440b      	add	r3, r1
 8004ede:	334d      	adds	r3, #77	; 0x4d
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	d120      	bne.n	8004f28 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ee6:	78fa      	ldrb	r2, [r7, #3]
 8004ee8:	6879      	ldr	r1, [r7, #4]
 8004eea:	4613      	mov	r3, r2
 8004eec:	011b      	lsls	r3, r3, #4
 8004eee:	1a9b      	subs	r3, r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	334d      	adds	r3, #77	; 0x4d
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004efa:	78fa      	ldrb	r2, [r7, #3]
 8004efc:	6879      	ldr	r1, [r7, #4]
 8004efe:	4613      	mov	r3, r2
 8004f00:	011b      	lsls	r3, r3, #4
 8004f02:	1a9b      	subs	r3, r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	440b      	add	r3, r1
 8004f08:	331b      	adds	r3, #27
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	f040 8107 	bne.w	8005120 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f12:	78fa      	ldrb	r2, [r7, #3]
 8004f14:	6879      	ldr	r1, [r7, #4]
 8004f16:	4613      	mov	r3, r2
 8004f18:	011b      	lsls	r3, r3, #4
 8004f1a:	1a9b      	subs	r3, r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	440b      	add	r3, r1
 8004f20:	334c      	adds	r3, #76	; 0x4c
 8004f22:	2202      	movs	r2, #2
 8004f24:	701a      	strb	r2, [r3, #0]
 8004f26:	e0fb      	b.n	8005120 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004f28:	78fa      	ldrb	r2, [r7, #3]
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	011b      	lsls	r3, r3, #4
 8004f30:	1a9b      	subs	r3, r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	440b      	add	r3, r1
 8004f36:	334d      	adds	r3, #77	; 0x4d
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	d13a      	bne.n	8004fb4 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f3e:	78fa      	ldrb	r2, [r7, #3]
 8004f40:	6879      	ldr	r1, [r7, #4]
 8004f42:	4613      	mov	r3, r2
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	1a9b      	subs	r3, r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	334d      	adds	r3, #77	; 0x4d
 8004f4e:	2202      	movs	r2, #2
 8004f50:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f52:	78fa      	ldrb	r2, [r7, #3]
 8004f54:	6879      	ldr	r1, [r7, #4]
 8004f56:	4613      	mov	r3, r2
 8004f58:	011b      	lsls	r3, r3, #4
 8004f5a:	1a9b      	subs	r3, r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	440b      	add	r3, r1
 8004f60:	334c      	adds	r3, #76	; 0x4c
 8004f62:	2202      	movs	r2, #2
 8004f64:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004f66:	78fa      	ldrb	r2, [r7, #3]
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	011b      	lsls	r3, r3, #4
 8004f6e:	1a9b      	subs	r3, r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	331b      	adds	r3, #27
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	f040 80d1 	bne.w	8005120 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004f7e:	78fa      	ldrb	r2, [r7, #3]
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	4613      	mov	r3, r2
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	1a9b      	subs	r3, r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	440b      	add	r3, r1
 8004f8c:	331b      	adds	r3, #27
 8004f8e:	2200      	movs	r2, #0
 8004f90:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004f92:	78fb      	ldrb	r3, [r7, #3]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	78fa      	ldrb	r2, [r7, #3]
 8004fa2:	0151      	lsls	r1, r2, #5
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	440a      	add	r2, r1
 8004fa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fb0:	6053      	str	r3, [r2, #4]
 8004fb2:	e0b5      	b.n	8005120 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004fb4:	78fa      	ldrb	r2, [r7, #3]
 8004fb6:	6879      	ldr	r1, [r7, #4]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	1a9b      	subs	r3, r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	440b      	add	r3, r1
 8004fc2:	334d      	adds	r3, #77	; 0x4d
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	2b05      	cmp	r3, #5
 8004fc8:	d114      	bne.n	8004ff4 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004fca:	78fa      	ldrb	r2, [r7, #3]
 8004fcc:	6879      	ldr	r1, [r7, #4]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	1a9b      	subs	r3, r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	440b      	add	r3, r1
 8004fd8:	334d      	adds	r3, #77	; 0x4d
 8004fda:	2202      	movs	r2, #2
 8004fdc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004fde:	78fa      	ldrb	r2, [r7, #3]
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	1a9b      	subs	r3, r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	440b      	add	r3, r1
 8004fec:	334c      	adds	r3, #76	; 0x4c
 8004fee:	2202      	movs	r2, #2
 8004ff0:	701a      	strb	r2, [r3, #0]
 8004ff2:	e095      	b.n	8005120 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004ff4:	78fa      	ldrb	r2, [r7, #3]
 8004ff6:	6879      	ldr	r1, [r7, #4]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	011b      	lsls	r3, r3, #4
 8004ffc:	1a9b      	subs	r3, r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	440b      	add	r3, r1
 8005002:	334d      	adds	r3, #77	; 0x4d
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2b06      	cmp	r3, #6
 8005008:	d114      	bne.n	8005034 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800500a:	78fa      	ldrb	r2, [r7, #3]
 800500c:	6879      	ldr	r1, [r7, #4]
 800500e:	4613      	mov	r3, r2
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	1a9b      	subs	r3, r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	440b      	add	r3, r1
 8005018:	334d      	adds	r3, #77	; 0x4d
 800501a:	2202      	movs	r2, #2
 800501c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800501e:	78fa      	ldrb	r2, [r7, #3]
 8005020:	6879      	ldr	r1, [r7, #4]
 8005022:	4613      	mov	r3, r2
 8005024:	011b      	lsls	r3, r3, #4
 8005026:	1a9b      	subs	r3, r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	440b      	add	r3, r1
 800502c:	334c      	adds	r3, #76	; 0x4c
 800502e:	2205      	movs	r2, #5
 8005030:	701a      	strb	r2, [r3, #0]
 8005032:	e075      	b.n	8005120 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005034:	78fa      	ldrb	r2, [r7, #3]
 8005036:	6879      	ldr	r1, [r7, #4]
 8005038:	4613      	mov	r3, r2
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	1a9b      	subs	r3, r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	440b      	add	r3, r1
 8005042:	334d      	adds	r3, #77	; 0x4d
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	2b07      	cmp	r3, #7
 8005048:	d00a      	beq.n	8005060 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800504a:	78fa      	ldrb	r2, [r7, #3]
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	4613      	mov	r3, r2
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	1a9b      	subs	r3, r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	440b      	add	r3, r1
 8005058:	334d      	adds	r3, #77	; 0x4d
 800505a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800505c:	2b09      	cmp	r3, #9
 800505e:	d170      	bne.n	8005142 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005060:	78fa      	ldrb	r2, [r7, #3]
 8005062:	6879      	ldr	r1, [r7, #4]
 8005064:	4613      	mov	r3, r2
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	1a9b      	subs	r3, r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	440b      	add	r3, r1
 800506e:	334d      	adds	r3, #77	; 0x4d
 8005070:	2202      	movs	r2, #2
 8005072:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005074:	78fa      	ldrb	r2, [r7, #3]
 8005076:	6879      	ldr	r1, [r7, #4]
 8005078:	4613      	mov	r3, r2
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	1a9b      	subs	r3, r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	440b      	add	r3, r1
 8005082:	3344      	adds	r3, #68	; 0x44
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	1c59      	adds	r1, r3, #1
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	4613      	mov	r3, r2
 800508c:	011b      	lsls	r3, r3, #4
 800508e:	1a9b      	subs	r3, r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4403      	add	r3, r0
 8005094:	3344      	adds	r3, #68	; 0x44
 8005096:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005098:	78fa      	ldrb	r2, [r7, #3]
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	4613      	mov	r3, r2
 800509e:	011b      	lsls	r3, r3, #4
 80050a0:	1a9b      	subs	r3, r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	3344      	adds	r3, #68	; 0x44
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d914      	bls.n	80050d8 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80050ae:	78fa      	ldrb	r2, [r7, #3]
 80050b0:	6879      	ldr	r1, [r7, #4]
 80050b2:	4613      	mov	r3, r2
 80050b4:	011b      	lsls	r3, r3, #4
 80050b6:	1a9b      	subs	r3, r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	440b      	add	r3, r1
 80050bc:	3344      	adds	r3, #68	; 0x44
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80050c2:	78fa      	ldrb	r2, [r7, #3]
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	4613      	mov	r3, r2
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	1a9b      	subs	r3, r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	440b      	add	r3, r1
 80050d0:	334c      	adds	r3, #76	; 0x4c
 80050d2:	2204      	movs	r2, #4
 80050d4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80050d6:	e022      	b.n	800511e <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80050d8:	78fa      	ldrb	r2, [r7, #3]
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	4613      	mov	r3, r2
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	1a9b      	subs	r3, r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	440b      	add	r3, r1
 80050e6:	334c      	adds	r3, #76	; 0x4c
 80050e8:	2202      	movs	r2, #2
 80050ea:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80050ec:	78fb      	ldrb	r3, [r7, #3]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005102:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800510a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800510c:	78fb      	ldrb	r3, [r7, #3]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	4413      	add	r3, r2
 8005114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005118:	461a      	mov	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800511e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005120:	78fa      	ldrb	r2, [r7, #3]
 8005122:	6879      	ldr	r1, [r7, #4]
 8005124:	4613      	mov	r3, r2
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	1a9b      	subs	r3, r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	440b      	add	r3, r1
 800512e:	334c      	adds	r3, #76	; 0x4c
 8005130:	781a      	ldrb	r2, [r3, #0]
 8005132:	78fb      	ldrb	r3, [r7, #3]
 8005134:	4619      	mov	r1, r3
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f008 f836 	bl	800d1a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800513c:	e002      	b.n	8005144 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800513e:	bf00      	nop
 8005140:	e000      	b.n	8005144 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8005142:	bf00      	nop
  }
}
 8005144:	3718      	adds	r7, #24
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b08a      	sub	sp, #40	; 0x28
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	0c5b      	lsrs	r3, r3, #17
 8005170:	f003 030f 	and.w	r3, r3, #15
 8005174:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	091b      	lsrs	r3, r3, #4
 800517a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800517e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	2b02      	cmp	r3, #2
 8005184:	d004      	beq.n	8005190 <HCD_RXQLVL_IRQHandler+0x46>
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2b05      	cmp	r3, #5
 800518a:	f000 80b6 	beq.w	80052fa <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800518e:	e0b7      	b.n	8005300 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 80b3 	beq.w	80052fe <HCD_RXQLVL_IRQHandler+0x1b4>
 8005198:	6879      	ldr	r1, [r7, #4]
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	4613      	mov	r3, r2
 800519e:	011b      	lsls	r3, r3, #4
 80051a0:	1a9b      	subs	r3, r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	440b      	add	r3, r1
 80051a6:	332c      	adds	r3, #44	; 0x2c
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 80a7 	beq.w	80052fe <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	4613      	mov	r3, r2
 80051b6:	011b      	lsls	r3, r3, #4
 80051b8:	1a9b      	subs	r3, r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	440b      	add	r3, r1
 80051be:	3338      	adds	r3, #56	; 0x38
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	18d1      	adds	r1, r2, r3
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	4613      	mov	r3, r2
 80051cc:	011b      	lsls	r3, r3, #4
 80051ce:	1a9b      	subs	r3, r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4403      	add	r3, r0
 80051d4:	3334      	adds	r3, #52	; 0x34
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4299      	cmp	r1, r3
 80051da:	f200 8083 	bhi.w	80052e4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	6879      	ldr	r1, [r7, #4]
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	4613      	mov	r3, r2
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	1a9b      	subs	r3, r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	440b      	add	r3, r1
 80051f0:	332c      	adds	r3, #44	; 0x2c
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	b292      	uxth	r2, r2
 80051f8:	4619      	mov	r1, r3
 80051fa:	f004 fe5d 	bl	8009eb8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80051fe:	6879      	ldr	r1, [r7, #4]
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	4613      	mov	r3, r2
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	1a9b      	subs	r3, r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	440b      	add	r3, r1
 800520c:	332c      	adds	r3, #44	; 0x2c
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	18d1      	adds	r1, r2, r3
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	4613      	mov	r3, r2
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	1a9b      	subs	r3, r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4403      	add	r3, r0
 8005222:	332c      	adds	r3, #44	; 0x2c
 8005224:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	4613      	mov	r3, r2
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	1a9b      	subs	r3, r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	440b      	add	r3, r1
 8005234:	3338      	adds	r3, #56	; 0x38
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	18d1      	adds	r1, r2, r3
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	4613      	mov	r3, r2
 8005242:	011b      	lsls	r3, r3, #4
 8005244:	1a9b      	subs	r3, r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4403      	add	r3, r0
 800524a:	3338      	adds	r3, #56	; 0x38
 800524c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	4413      	add	r3, r2
 8005256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	0cdb      	lsrs	r3, r3, #19
 800525e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005262:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	4613      	mov	r3, r2
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	1a9b      	subs	r3, r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	440b      	add	r3, r1
 8005272:	3328      	adds	r3, #40	; 0x28
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	4293      	cmp	r3, r2
 800527c:	d13f      	bne.n	80052fe <HCD_RXQLVL_IRQHandler+0x1b4>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d03c      	beq.n	80052fe <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	4413      	add	r3, r2
 800528c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800529a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052a2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b0:	461a      	mov	r2, r3
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	4613      	mov	r3, r2
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	1a9b      	subs	r3, r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	440b      	add	r3, r1
 80052c4:	333c      	adds	r3, #60	; 0x3c
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	f083 0301 	eor.w	r3, r3, #1
 80052cc:	b2d8      	uxtb	r0, r3
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	4613      	mov	r3, r2
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	1a9b      	subs	r3, r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	440b      	add	r3, r1
 80052dc:	333c      	adds	r3, #60	; 0x3c
 80052de:	4602      	mov	r2, r0
 80052e0:	701a      	strb	r2, [r3, #0]
      break;
 80052e2:	e00c      	b.n	80052fe <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80052e4:	6879      	ldr	r1, [r7, #4]
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	4613      	mov	r3, r2
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	1a9b      	subs	r3, r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	440b      	add	r3, r1
 80052f2:	334c      	adds	r3, #76	; 0x4c
 80052f4:	2204      	movs	r2, #4
 80052f6:	701a      	strb	r2, [r3, #0]
      break;
 80052f8:	e001      	b.n	80052fe <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80052fa:	bf00      	nop
 80052fc:	e000      	b.n	8005300 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80052fe:	bf00      	nop
  }
}
 8005300:	bf00      	nop
 8005302:	3728      	adds	r7, #40	; 0x28
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005334:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b02      	cmp	r3, #2
 800533e:	d10b      	bne.n	8005358 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b01      	cmp	r3, #1
 8005348:	d102      	bne.n	8005350 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f007 ff10 	bl	800d170 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f043 0302 	orr.w	r3, r3, #2
 8005356:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f003 0308 	and.w	r3, r3, #8
 800535e:	2b08      	cmp	r3, #8
 8005360:	d132      	bne.n	80053c8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f043 0308 	orr.w	r3, r3, #8
 8005368:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b04      	cmp	r3, #4
 8005372:	d126      	bne.n	80053c2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	7a5b      	ldrb	r3, [r3, #9]
 8005378:	2b02      	cmp	r3, #2
 800537a:	d113      	bne.n	80053a4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005382:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005386:	d106      	bne.n	8005396 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2102      	movs	r1, #2
 800538e:	4618      	mov	r0, r3
 8005390:	f004 ff22 	bl	800a1d8 <USB_InitFSLSPClkSel>
 8005394:	e011      	b.n	80053ba <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2101      	movs	r1, #1
 800539c:	4618      	mov	r0, r3
 800539e:	f004 ff1b 	bl	800a1d8 <USB_InitFSLSPClkSel>
 80053a2:	e00a      	b.n	80053ba <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	79db      	ldrb	r3, [r3, #7]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d106      	bne.n	80053ba <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053b2:	461a      	mov	r2, r3
 80053b4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80053b8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f007 ff02 	bl	800d1c4 <HAL_HCD_PortEnabled_Callback>
 80053c0:	e002      	b.n	80053c8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f007 ff0c 	bl	800d1e0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b20      	cmp	r3, #32
 80053d0:	d103      	bne.n	80053da <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	f043 0320 	orr.w	r3, r3, #32
 80053d8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053e0:	461a      	mov	r2, r3
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	6013      	str	r3, [r2, #0]
}
 80053e6:	bf00      	nop
 80053e8:	3718      	adds	r7, #24
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
	...

080053f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e12b      	b.n	800565a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d106      	bne.n	800541c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7fc fbde 	bl	8001bd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2224      	movs	r2, #36	; 0x24
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0201 	bic.w	r2, r2, #1
 8005432:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005442:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005452:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005454:	f002 f900 	bl	8007658 <HAL_RCC_GetPCLK1Freq>
 8005458:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	4a81      	ldr	r2, [pc, #516]	; (8005664 <HAL_I2C_Init+0x274>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d807      	bhi.n	8005474 <HAL_I2C_Init+0x84>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4a80      	ldr	r2, [pc, #512]	; (8005668 <HAL_I2C_Init+0x278>)
 8005468:	4293      	cmp	r3, r2
 800546a:	bf94      	ite	ls
 800546c:	2301      	movls	r3, #1
 800546e:	2300      	movhi	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	e006      	b.n	8005482 <HAL_I2C_Init+0x92>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4a7d      	ldr	r2, [pc, #500]	; (800566c <HAL_I2C_Init+0x27c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	bf94      	ite	ls
 800547c:	2301      	movls	r3, #1
 800547e:	2300      	movhi	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e0e7      	b.n	800565a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4a78      	ldr	r2, [pc, #480]	; (8005670 <HAL_I2C_Init+0x280>)
 800548e:	fba2 2303 	umull	r2, r3, r2, r3
 8005492:	0c9b      	lsrs	r3, r3, #18
 8005494:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	4a6a      	ldr	r2, [pc, #424]	; (8005664 <HAL_I2C_Init+0x274>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d802      	bhi.n	80054c4 <HAL_I2C_Init+0xd4>
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	3301      	adds	r3, #1
 80054c2:	e009      	b.n	80054d8 <HAL_I2C_Init+0xe8>
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80054ca:	fb02 f303 	mul.w	r3, r2, r3
 80054ce:	4a69      	ldr	r2, [pc, #420]	; (8005674 <HAL_I2C_Init+0x284>)
 80054d0:	fba2 2303 	umull	r2, r3, r2, r3
 80054d4:	099b      	lsrs	r3, r3, #6
 80054d6:	3301      	adds	r3, #1
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6812      	ldr	r2, [r2, #0]
 80054dc:	430b      	orrs	r3, r1
 80054de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80054ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	495c      	ldr	r1, [pc, #368]	; (8005664 <HAL_I2C_Init+0x274>)
 80054f4:	428b      	cmp	r3, r1
 80054f6:	d819      	bhi.n	800552c <HAL_I2C_Init+0x13c>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	1e59      	subs	r1, r3, #1
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	fbb1 f3f3 	udiv	r3, r1, r3
 8005506:	1c59      	adds	r1, r3, #1
 8005508:	f640 73fc 	movw	r3, #4092	; 0xffc
 800550c:	400b      	ands	r3, r1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <HAL_I2C_Init+0x138>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	1e59      	subs	r1, r3, #1
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005520:	3301      	adds	r3, #1
 8005522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005526:	e051      	b.n	80055cc <HAL_I2C_Init+0x1dc>
 8005528:	2304      	movs	r3, #4
 800552a:	e04f      	b.n	80055cc <HAL_I2C_Init+0x1dc>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d111      	bne.n	8005558 <HAL_I2C_Init+0x168>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	1e58      	subs	r0, r3, #1
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6859      	ldr	r1, [r3, #4]
 800553c:	460b      	mov	r3, r1
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	440b      	add	r3, r1
 8005542:	fbb0 f3f3 	udiv	r3, r0, r3
 8005546:	3301      	adds	r3, #1
 8005548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800554c:	2b00      	cmp	r3, #0
 800554e:	bf0c      	ite	eq
 8005550:	2301      	moveq	r3, #1
 8005552:	2300      	movne	r3, #0
 8005554:	b2db      	uxtb	r3, r3
 8005556:	e012      	b.n	800557e <HAL_I2C_Init+0x18e>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	1e58      	subs	r0, r3, #1
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6859      	ldr	r1, [r3, #4]
 8005560:	460b      	mov	r3, r1
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	440b      	add	r3, r1
 8005566:	0099      	lsls	r1, r3, #2
 8005568:	440b      	add	r3, r1
 800556a:	fbb0 f3f3 	udiv	r3, r0, r3
 800556e:	3301      	adds	r3, #1
 8005570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005574:	2b00      	cmp	r3, #0
 8005576:	bf0c      	ite	eq
 8005578:	2301      	moveq	r3, #1
 800557a:	2300      	movne	r3, #0
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <HAL_I2C_Init+0x196>
 8005582:	2301      	movs	r3, #1
 8005584:	e022      	b.n	80055cc <HAL_I2C_Init+0x1dc>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10e      	bne.n	80055ac <HAL_I2C_Init+0x1bc>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	1e58      	subs	r0, r3, #1
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6859      	ldr	r1, [r3, #4]
 8005596:	460b      	mov	r3, r1
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	440b      	add	r3, r1
 800559c:	fbb0 f3f3 	udiv	r3, r0, r3
 80055a0:	3301      	adds	r3, #1
 80055a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055aa:	e00f      	b.n	80055cc <HAL_I2C_Init+0x1dc>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	1e58      	subs	r0, r3, #1
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6859      	ldr	r1, [r3, #4]
 80055b4:	460b      	mov	r3, r1
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	0099      	lsls	r1, r3, #2
 80055bc:	440b      	add	r3, r1
 80055be:	fbb0 f3f3 	udiv	r3, r0, r3
 80055c2:	3301      	adds	r3, #1
 80055c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055cc:	6879      	ldr	r1, [r7, #4]
 80055ce:	6809      	ldr	r1, [r1, #0]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	69da      	ldr	r2, [r3, #28]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80055fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6911      	ldr	r1, [r2, #16]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	68d2      	ldr	r2, [r2, #12]
 8005606:	4311      	orrs	r1, r2
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6812      	ldr	r2, [r2, #0]
 800560c:	430b      	orrs	r3, r1
 800560e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	695a      	ldr	r2, [r3, #20]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f042 0201 	orr.w	r2, r2, #1
 800563a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2220      	movs	r2, #32
 8005646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	000186a0 	.word	0x000186a0
 8005668:	001e847f 	.word	0x001e847f
 800566c:	003d08ff 	.word	0x003d08ff
 8005670:	431bde83 	.word	0x431bde83
 8005674:	10624dd3 	.word	0x10624dd3

08005678 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b088      	sub	sp, #32
 800567c:	af02      	add	r7, sp, #8
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	4608      	mov	r0, r1
 8005682:	4611      	mov	r1, r2
 8005684:	461a      	mov	r2, r3
 8005686:	4603      	mov	r3, r0
 8005688:	817b      	strh	r3, [r7, #10]
 800568a:	460b      	mov	r3, r1
 800568c:	813b      	strh	r3, [r7, #8]
 800568e:	4613      	mov	r3, r2
 8005690:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005692:	f7fc fe99 	bl	80023c8 <HAL_GetTick>
 8005696:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b20      	cmp	r3, #32
 80056a2:	f040 80d9 	bne.w	8005858 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	2319      	movs	r3, #25
 80056ac:	2201      	movs	r2, #1
 80056ae:	496d      	ldr	r1, [pc, #436]	; (8005864 <HAL_I2C_Mem_Write+0x1ec>)
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 fc8b 	bl	8005fcc <I2C_WaitOnFlagUntilTimeout>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80056bc:	2302      	movs	r3, #2
 80056be:	e0cc      	b.n	800585a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d101      	bne.n	80056ce <HAL_I2C_Mem_Write+0x56>
 80056ca:	2302      	movs	r3, #2
 80056cc:	e0c5      	b.n	800585a <HAL_I2C_Mem_Write+0x1e2>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d007      	beq.n	80056f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f042 0201 	orr.w	r2, r2, #1
 80056f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005702:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2221      	movs	r2, #33	; 0x21
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2240      	movs	r2, #64	; 0x40
 8005710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6a3a      	ldr	r2, [r7, #32]
 800571e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005724:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572a:	b29a      	uxth	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4a4d      	ldr	r2, [pc, #308]	; (8005868 <HAL_I2C_Mem_Write+0x1f0>)
 8005734:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005736:	88f8      	ldrh	r0, [r7, #6]
 8005738:	893a      	ldrh	r2, [r7, #8]
 800573a:	8979      	ldrh	r1, [r7, #10]
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	9301      	str	r3, [sp, #4]
 8005740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	4603      	mov	r3, r0
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 fac2 	bl	8005cd0 <I2C_RequestMemoryWrite>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d052      	beq.n	80057f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e081      	b.n	800585a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f000 fd50 	bl	8006200 <I2C_WaitOnTXEFlagUntilTimeout>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00d      	beq.n	8005782 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	2b04      	cmp	r3, #4
 800576c:	d107      	bne.n	800577e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800577c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e06b      	b.n	800585a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005786:	781a      	ldrb	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	1c5a      	adds	r2, r3, #1
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579c:	3b01      	subs	r3, #1
 800579e:	b29a      	uxth	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	3b01      	subs	r3, #1
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	f003 0304 	and.w	r3, r3, #4
 80057bc:	2b04      	cmp	r3, #4
 80057be:	d11b      	bne.n	80057f8 <HAL_I2C_Mem_Write+0x180>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d017      	beq.n	80057f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	781a      	ldrb	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d8:	1c5a      	adds	r2, r3, #1
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057e2:	3b01      	subs	r3, #1
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1aa      	bne.n	8005756 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 fd43 	bl	8006290 <I2C_WaitOnBTFFlagUntilTimeout>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00d      	beq.n	800582c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005814:	2b04      	cmp	r3, #4
 8005816:	d107      	bne.n	8005828 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005826:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e016      	b.n	800585a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800583a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2220      	movs	r2, #32
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005854:	2300      	movs	r3, #0
 8005856:	e000      	b.n	800585a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005858:	2302      	movs	r3, #2
  }
}
 800585a:	4618      	mov	r0, r3
 800585c:	3718      	adds	r7, #24
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	00100002 	.word	0x00100002
 8005868:	ffff0000 	.word	0xffff0000

0800586c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b08c      	sub	sp, #48	; 0x30
 8005870:	af02      	add	r7, sp, #8
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	4608      	mov	r0, r1
 8005876:	4611      	mov	r1, r2
 8005878:	461a      	mov	r2, r3
 800587a:	4603      	mov	r3, r0
 800587c:	817b      	strh	r3, [r7, #10]
 800587e:	460b      	mov	r3, r1
 8005880:	813b      	strh	r3, [r7, #8]
 8005882:	4613      	mov	r3, r2
 8005884:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005886:	f7fc fd9f 	bl	80023c8 <HAL_GetTick>
 800588a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b20      	cmp	r3, #32
 8005896:	f040 8214 	bne.w	8005cc2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	2319      	movs	r3, #25
 80058a0:	2201      	movs	r2, #1
 80058a2:	497b      	ldr	r1, [pc, #492]	; (8005a90 <HAL_I2C_Mem_Read+0x224>)
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 fb91 	bl	8005fcc <I2C_WaitOnFlagUntilTimeout>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80058b0:	2302      	movs	r3, #2
 80058b2:	e207      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d101      	bne.n	80058c2 <HAL_I2C_Mem_Read+0x56>
 80058be:	2302      	movs	r3, #2
 80058c0:	e200      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x458>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d007      	beq.n	80058e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2222      	movs	r2, #34	; 0x22
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2240      	movs	r2, #64	; 0x40
 8005904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005912:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005918:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800591e:	b29a      	uxth	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4a5b      	ldr	r2, [pc, #364]	; (8005a94 <HAL_I2C_Mem_Read+0x228>)
 8005928:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800592a:	88f8      	ldrh	r0, [r7, #6]
 800592c:	893a      	ldrh	r2, [r7, #8]
 800592e:	8979      	ldrh	r1, [r7, #10]
 8005930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005932:	9301      	str	r3, [sp, #4]
 8005934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	4603      	mov	r3, r0
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 fa5e 	bl	8005dfc <I2C_RequestMemoryRead>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e1bc      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800594e:	2b00      	cmp	r3, #0
 8005950:	d113      	bne.n	800597a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005952:	2300      	movs	r3, #0
 8005954:	623b      	str	r3, [r7, #32]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	623b      	str	r3, [r7, #32]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	623b      	str	r3, [r7, #32]
 8005966:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	e190      	b.n	8005c9c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800597e:	2b01      	cmp	r3, #1
 8005980:	d11b      	bne.n	80059ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005990:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005992:	2300      	movs	r3, #0
 8005994:	61fb      	str	r3, [r7, #28]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	61fb      	str	r3, [r7, #28]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	61fb      	str	r3, [r7, #28]
 80059a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	e170      	b.n	8005c9c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d11b      	bne.n	80059fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059e2:	2300      	movs	r3, #0
 80059e4:	61bb      	str	r3, [r7, #24]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	61bb      	str	r3, [r7, #24]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	61bb      	str	r3, [r7, #24]
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	e150      	b.n	8005c9c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059fa:	2300      	movs	r3, #0
 80059fc:	617b      	str	r3, [r7, #20]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	617b      	str	r3, [r7, #20]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	617b      	str	r3, [r7, #20]
 8005a0e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005a10:	e144      	b.n	8005c9c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	f200 80f1 	bhi.w	8005bfe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d123      	bne.n	8005a6c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 fc79 	bl	8006320 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e145      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	691a      	ldr	r2, [r3, #16]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	1c5a      	adds	r2, r3, #1
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	3b01      	subs	r3, #1
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a6a:	e117      	b.n	8005c9c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d14e      	bne.n	8005b12 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	4906      	ldr	r1, [pc, #24]	; (8005a98 <HAL_I2C_Mem_Read+0x22c>)
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f000 faa4 	bl	8005fcc <I2C_WaitOnFlagUntilTimeout>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d008      	beq.n	8005a9c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e11a      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x458>
 8005a8e:	bf00      	nop
 8005a90:	00100002 	.word	0x00100002
 8005a94:	ffff0000 	.word	0xffff0000
 8005a98:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	691a      	ldr	r2, [r3, #16]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	b2d2      	uxtb	r2, r2
 8005ab8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	1c5a      	adds	r2, r3, #1
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	691a      	ldr	r2, [r3, #16]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	b2d2      	uxtb	r2, r2
 8005aea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005afa:	3b01      	subs	r3, #1
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b10:	e0c4      	b.n	8005c9c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b18:	2200      	movs	r2, #0
 8005b1a:	496c      	ldr	r1, [pc, #432]	; (8005ccc <HAL_I2C_Mem_Read+0x460>)
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 fa55 	bl	8005fcc <I2C_WaitOnFlagUntilTimeout>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e0cb      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	691a      	ldr	r2, [r3, #16]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	b2d2      	uxtb	r2, r2
 8005b48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	1c5a      	adds	r2, r3, #1
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	3b01      	subs	r3, #1
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b74:	2200      	movs	r2, #0
 8005b76:	4955      	ldr	r1, [pc, #340]	; (8005ccc <HAL_I2C_Mem_Read+0x460>)
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 fa27 	bl	8005fcc <I2C_WaitOnFlagUntilTimeout>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d001      	beq.n	8005b88 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e09d      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	691a      	ldr	r2, [r3, #16]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	b2d2      	uxtb	r2, r2
 8005ba4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	691a      	ldr	r2, [r3, #16]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	b2d2      	uxtb	r2, r2
 8005bd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005bfc:	e04e      	b.n	8005c9c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 fb8c 	bl	8006320 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d001      	beq.n	8005c12 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e058      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	691a      	ldr	r2, [r3, #16]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1c:	b2d2      	uxtb	r2, r2
 8005c1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	f003 0304 	and.w	r3, r3, #4
 8005c4e:	2b04      	cmp	r3, #4
 8005c50:	d124      	bne.n	8005c9c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c56:	2b03      	cmp	r3, #3
 8005c58:	d107      	bne.n	8005c6a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c68:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	691a      	ldr	r2, [r3, #16]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	b2d2      	uxtb	r2, r2
 8005c76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	3b01      	subs	r3, #1
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f47f aeb6 	bne.w	8005a12 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	e000      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005cc2:	2302      	movs	r3, #2
  }
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3728      	adds	r7, #40	; 0x28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	00010004 	.word	0x00010004

08005cd0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b088      	sub	sp, #32
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	4608      	mov	r0, r1
 8005cda:	4611      	mov	r1, r2
 8005cdc:	461a      	mov	r2, r3
 8005cde:	4603      	mov	r3, r0
 8005ce0:	817b      	strh	r3, [r7, #10]
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	813b      	strh	r3, [r7, #8]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cf8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 f960 	bl	8005fcc <I2C_WaitOnFlagUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00d      	beq.n	8005d2e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d20:	d103      	bne.n	8005d2a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e05f      	b.n	8005dee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d2e:	897b      	ldrh	r3, [r7, #10]
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	461a      	mov	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	6a3a      	ldr	r2, [r7, #32]
 8005d42:	492d      	ldr	r1, [pc, #180]	; (8005df8 <I2C_RequestMemoryWrite+0x128>)
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f9bb 	bl	80060c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e04c      	b.n	8005dee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d54:	2300      	movs	r3, #0
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6c:	6a39      	ldr	r1, [r7, #32]
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 fa46 	bl	8006200 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00d      	beq.n	8005d96 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d107      	bne.n	8005d92 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e02b      	b.n	8005dee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d96:	88fb      	ldrh	r3, [r7, #6]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d105      	bne.n	8005da8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d9c:	893b      	ldrh	r3, [r7, #8]
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	611a      	str	r2, [r3, #16]
 8005da6:	e021      	b.n	8005dec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005da8:	893b      	ldrh	r3, [r7, #8]
 8005daa:	0a1b      	lsrs	r3, r3, #8
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db8:	6a39      	ldr	r1, [r7, #32]
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 fa20 	bl	8006200 <I2C_WaitOnTXEFlagUntilTimeout>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00d      	beq.n	8005de2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	d107      	bne.n	8005dde <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ddc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e005      	b.n	8005dee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005de2:	893b      	ldrh	r3, [r7, #8]
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	00010002 	.word	0x00010002

08005dfc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b088      	sub	sp, #32
 8005e00:	af02      	add	r7, sp, #8
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	4608      	mov	r0, r1
 8005e06:	4611      	mov	r1, r2
 8005e08:	461a      	mov	r2, r3
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	817b      	strh	r3, [r7, #10]
 8005e0e:	460b      	mov	r3, r1
 8005e10:	813b      	strh	r3, [r7, #8]
 8005e12:	4613      	mov	r3, r2
 8005e14:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e24:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f000 f8c2 	bl	8005fcc <I2C_WaitOnFlagUntilTimeout>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00d      	beq.n	8005e6a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e5c:	d103      	bne.n	8005e66 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e0aa      	b.n	8005fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e6a:	897b      	ldrh	r3, [r7, #10]
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	461a      	mov	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	6a3a      	ldr	r2, [r7, #32]
 8005e7e:	4952      	ldr	r1, [pc, #328]	; (8005fc8 <I2C_RequestMemoryRead+0x1cc>)
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f000 f91d 	bl	80060c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e097      	b.n	8005fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e90:	2300      	movs	r3, #0
 8005e92:	617b      	str	r3, [r7, #20]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	617b      	str	r3, [r7, #20]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	617b      	str	r3, [r7, #20]
 8005ea4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea8:	6a39      	ldr	r1, [r7, #32]
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f000 f9a8 	bl	8006200 <I2C_WaitOnTXEFlagUntilTimeout>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00d      	beq.n	8005ed2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eba:	2b04      	cmp	r3, #4
 8005ebc:	d107      	bne.n	8005ece <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ecc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e076      	b.n	8005fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ed2:	88fb      	ldrh	r3, [r7, #6]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d105      	bne.n	8005ee4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ed8:	893b      	ldrh	r3, [r7, #8]
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	611a      	str	r2, [r3, #16]
 8005ee2:	e021      	b.n	8005f28 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ee4:	893b      	ldrh	r3, [r7, #8]
 8005ee6:	0a1b      	lsrs	r3, r3, #8
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ef4:	6a39      	ldr	r1, [r7, #32]
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 f982 	bl	8006200 <I2C_WaitOnTXEFlagUntilTimeout>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00d      	beq.n	8005f1e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	d107      	bne.n	8005f1a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e050      	b.n	8005fc0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f1e:	893b      	ldrh	r3, [r7, #8]
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f2a:	6a39      	ldr	r1, [r7, #32]
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f000 f967 	bl	8006200 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00d      	beq.n	8005f54 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3c:	2b04      	cmp	r3, #4
 8005f3e:	d107      	bne.n	8005f50 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f4e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e035      	b.n	8005fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f62:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f000 f82b 	bl	8005fcc <I2C_WaitOnFlagUntilTimeout>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00d      	beq.n	8005f98 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f8a:	d103      	bne.n	8005f94 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e013      	b.n	8005fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005f98:	897b      	ldrh	r3, [r7, #10]
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	f043 0301 	orr.w	r3, r3, #1
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	6a3a      	ldr	r2, [r7, #32]
 8005fac:	4906      	ldr	r1, [pc, #24]	; (8005fc8 <I2C_RequestMemoryRead+0x1cc>)
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f000 f886 	bl	80060c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e000      	b.n	8005fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3718      	adds	r7, #24
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	00010002 	.word	0x00010002

08005fcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	603b      	str	r3, [r7, #0]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fdc:	e048      	b.n	8006070 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe4:	d044      	beq.n	8006070 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fe6:	f7fc f9ef 	bl	80023c8 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d302      	bcc.n	8005ffc <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d139      	bne.n	8006070 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	0c1b      	lsrs	r3, r3, #16
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b01      	cmp	r3, #1
 8006004:	d10d      	bne.n	8006022 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	43da      	mvns	r2, r3
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	4013      	ands	r3, r2
 8006012:	b29b      	uxth	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	bf0c      	ite	eq
 8006018:	2301      	moveq	r3, #1
 800601a:	2300      	movne	r3, #0
 800601c:	b2db      	uxtb	r3, r3
 800601e:	461a      	mov	r2, r3
 8006020:	e00c      	b.n	800603c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	43da      	mvns	r2, r3
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	4013      	ands	r3, r2
 800602e:	b29b      	uxth	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	bf0c      	ite	eq
 8006034:	2301      	moveq	r3, #1
 8006036:	2300      	movne	r3, #0
 8006038:	b2db      	uxtb	r3, r3
 800603a:	461a      	mov	r2, r3
 800603c:	79fb      	ldrb	r3, [r7, #7]
 800603e:	429a      	cmp	r2, r3
 8006040:	d116      	bne.n	8006070 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2220      	movs	r2, #32
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605c:	f043 0220 	orr.w	r2, r3, #32
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e023      	b.n	80060b8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	0c1b      	lsrs	r3, r3, #16
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b01      	cmp	r3, #1
 8006078:	d10d      	bne.n	8006096 <I2C_WaitOnFlagUntilTimeout+0xca>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	43da      	mvns	r2, r3
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	4013      	ands	r3, r2
 8006086:	b29b      	uxth	r3, r3
 8006088:	2b00      	cmp	r3, #0
 800608a:	bf0c      	ite	eq
 800608c:	2301      	moveq	r3, #1
 800608e:	2300      	movne	r3, #0
 8006090:	b2db      	uxtb	r3, r3
 8006092:	461a      	mov	r2, r3
 8006094:	e00c      	b.n	80060b0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	43da      	mvns	r2, r3
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	4013      	ands	r3, r2
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	bf0c      	ite	eq
 80060a8:	2301      	moveq	r3, #1
 80060aa:	2300      	movne	r3, #0
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	461a      	mov	r2, r3
 80060b0:	79fb      	ldrb	r3, [r7, #7]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d093      	beq.n	8005fde <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060ce:	e071      	b.n	80061b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060de:	d123      	bne.n	8006128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2220      	movs	r2, #32
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006114:	f043 0204 	orr.w	r2, r3, #4
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e067      	b.n	80061f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612e:	d041      	beq.n	80061b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006130:	f7fc f94a 	bl	80023c8 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	429a      	cmp	r2, r3
 800613e:	d302      	bcc.n	8006146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d136      	bne.n	80061b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	0c1b      	lsrs	r3, r3, #16
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b01      	cmp	r3, #1
 800614e:	d10c      	bne.n	800616a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	43da      	mvns	r2, r3
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	4013      	ands	r3, r2
 800615c:	b29b      	uxth	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	bf14      	ite	ne
 8006162:	2301      	movne	r3, #1
 8006164:	2300      	moveq	r3, #0
 8006166:	b2db      	uxtb	r3, r3
 8006168:	e00b      	b.n	8006182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	43da      	mvns	r2, r3
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	4013      	ands	r3, r2
 8006176:	b29b      	uxth	r3, r3
 8006178:	2b00      	cmp	r3, #0
 800617a:	bf14      	ite	ne
 800617c:	2301      	movne	r3, #1
 800617e:	2300      	moveq	r3, #0
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d016      	beq.n	80061b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2220      	movs	r2, #32
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a0:	f043 0220 	orr.w	r2, r3, #32
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e021      	b.n	80061f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	0c1b      	lsrs	r3, r3, #16
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d10c      	bne.n	80061d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	43da      	mvns	r2, r3
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	4013      	ands	r3, r2
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	bf14      	ite	ne
 80061d0:	2301      	movne	r3, #1
 80061d2:	2300      	moveq	r3, #0
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	e00b      	b.n	80061f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	43da      	mvns	r2, r3
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	4013      	ands	r3, r2
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	bf14      	ite	ne
 80061ea:	2301      	movne	r3, #1
 80061ec:	2300      	moveq	r3, #0
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f47f af6d 	bne.w	80060d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800620c:	e034      	b.n	8006278 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f000 f8e3 	bl	80063da <I2C_IsAcknowledgeFailed>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e034      	b.n	8006288 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006224:	d028      	beq.n	8006278 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006226:	f7fc f8cf 	bl	80023c8 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	429a      	cmp	r2, r3
 8006234:	d302      	bcc.n	800623c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d11d      	bne.n	8006278 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006246:	2b80      	cmp	r3, #128	; 0x80
 8006248:	d016      	beq.n	8006278 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2220      	movs	r2, #32
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006264:	f043 0220 	orr.w	r2, r3, #32
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e007      	b.n	8006288 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006282:	2b80      	cmp	r3, #128	; 0x80
 8006284:	d1c3      	bne.n	800620e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800629c:	e034      	b.n	8006308 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 f89b 	bl	80063da <I2C_IsAcknowledgeFailed>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e034      	b.n	8006318 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b4:	d028      	beq.n	8006308 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062b6:	f7fc f887 	bl	80023c8 <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d302      	bcc.n	80062cc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d11d      	bne.n	8006308 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	f003 0304 	and.w	r3, r3, #4
 80062d6:	2b04      	cmp	r3, #4
 80062d8:	d016      	beq.n	8006308 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f4:	f043 0220 	orr.w	r2, r3, #32
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e007      	b.n	8006318 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	f003 0304 	and.w	r3, r3, #4
 8006312:	2b04      	cmp	r3, #4
 8006314:	d1c3      	bne.n	800629e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800632c:	e049      	b.n	80063c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	f003 0310 	and.w	r3, r3, #16
 8006338:	2b10      	cmp	r3, #16
 800633a:	d119      	bne.n	8006370 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f06f 0210 	mvn.w	r2, #16
 8006344:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2220      	movs	r2, #32
 8006350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e030      	b.n	80063d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006370:	f7fc f82a 	bl	80023c8 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	429a      	cmp	r2, r3
 800637e:	d302      	bcc.n	8006386 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d11d      	bne.n	80063c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006390:	2b40      	cmp	r3, #64	; 0x40
 8006392:	d016      	beq.n	80063c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2220      	movs	r2, #32
 800639e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	f043 0220 	orr.w	r2, r3, #32
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e007      	b.n	80063d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063cc:	2b40      	cmp	r3, #64	; 0x40
 80063ce:	d1ae      	bne.n	800632e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063f0:	d11b      	bne.n	800642a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063fa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2220      	movs	r2, #32
 8006406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	f043 0204 	orr.w	r2, r3, #4
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e000      	b.n	800642c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b088      	sub	sp, #32
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e128      	b.n	800669c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d109      	bne.n	800646a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a90      	ldr	r2, [pc, #576]	; (80066a4 <HAL_I2S_Init+0x26c>)
 8006462:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7fb fbff 	bl	8001c68 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2202      	movs	r2, #2
 800646e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	69db      	ldr	r3, [r3, #28]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	6812      	ldr	r2, [r2, #0]
 800647c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006480:	f023 030f 	bic.w	r3, r3, #15
 8006484:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2202      	movs	r2, #2
 800648c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	2b02      	cmp	r3, #2
 8006494:	d060      	beq.n	8006558 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d102      	bne.n	80064a4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800649e:	2310      	movs	r3, #16
 80064a0:	617b      	str	r3, [r7, #20]
 80064a2:	e001      	b.n	80064a8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80064a4:	2320      	movs	r3, #32
 80064a6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	2b20      	cmp	r3, #32
 80064ae:	d802      	bhi.n	80064b6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80064b6:	2001      	movs	r0, #1
 80064b8:	f001 f9d8 	bl	800786c <HAL_RCCEx_GetPeriphCLKFreq>
 80064bc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064c6:	d125      	bne.n	8006514 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d010      	beq.n	80064f2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80064da:	4613      	mov	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	461a      	mov	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ec:	3305      	adds	r3, #5
 80064ee:	613b      	str	r3, [r7, #16]
 80064f0:	e01f      	b.n	8006532 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	00db      	lsls	r3, r3, #3
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	005b      	lsls	r3, r3, #1
 8006504:	461a      	mov	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	fbb2 f3f3 	udiv	r3, r2, r3
 800650e:	3305      	adds	r3, #5
 8006510:	613b      	str	r3, [r7, #16]
 8006512:	e00e      	b.n	8006532 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	fbb2 f2f3 	udiv	r2, r2, r3
 800651c:	4613      	mov	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	461a      	mov	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	fbb2 f3f3 	udiv	r3, r2, r3
 800652e:	3305      	adds	r3, #5
 8006530:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	4a5c      	ldr	r2, [pc, #368]	; (80066a8 <HAL_I2S_Init+0x270>)
 8006536:	fba2 2303 	umull	r2, r3, r2, r3
 800653a:	08db      	lsrs	r3, r3, #3
 800653c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	085b      	lsrs	r3, r3, #1
 800654e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	021b      	lsls	r3, r3, #8
 8006554:	61bb      	str	r3, [r7, #24]
 8006556:	e003      	b.n	8006560 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006558:	2302      	movs	r3, #2
 800655a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800655c:	2300      	movs	r3, #0
 800655e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d902      	bls.n	800656c <HAL_I2S_Init+0x134>
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	2bff      	cmp	r3, #255	; 0xff
 800656a:	d907      	bls.n	800657c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006570:	f043 0210 	orr.w	r2, r3, #16
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e08f      	b.n	800669c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	691a      	ldr	r2, [r3, #16]
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	ea42 0103 	orr.w	r1, r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	69fa      	ldr	r2, [r7, #28]
 800658c:	430a      	orrs	r2, r1
 800658e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800659a:	f023 030f 	bic.w	r3, r3, #15
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	6851      	ldr	r1, [r2, #4]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6892      	ldr	r2, [r2, #8]
 80065a6:	4311      	orrs	r1, r2
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	68d2      	ldr	r2, [r2, #12]
 80065ac:	4311      	orrs	r1, r2
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	6992      	ldr	r2, [r2, #24]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	431a      	orrs	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065be:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d161      	bne.n	800668c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a38      	ldr	r2, [pc, #224]	; (80066ac <HAL_I2S_Init+0x274>)
 80065cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a37      	ldr	r2, [pc, #220]	; (80066b0 <HAL_I2S_Init+0x278>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d101      	bne.n	80065dc <HAL_I2S_Init+0x1a4>
 80065d8:	4b36      	ldr	r3, [pc, #216]	; (80066b4 <HAL_I2S_Init+0x27c>)
 80065da:	e001      	b.n	80065e0 <HAL_I2S_Init+0x1a8>
 80065dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	6812      	ldr	r2, [r2, #0]
 80065e6:	4932      	ldr	r1, [pc, #200]	; (80066b0 <HAL_I2S_Init+0x278>)
 80065e8:	428a      	cmp	r2, r1
 80065ea:	d101      	bne.n	80065f0 <HAL_I2S_Init+0x1b8>
 80065ec:	4a31      	ldr	r2, [pc, #196]	; (80066b4 <HAL_I2S_Init+0x27c>)
 80065ee:	e001      	b.n	80065f4 <HAL_I2S_Init+0x1bc>
 80065f0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80065f4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80065f8:	f023 030f 	bic.w	r3, r3, #15
 80065fc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a2b      	ldr	r2, [pc, #172]	; (80066b0 <HAL_I2S_Init+0x278>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d101      	bne.n	800660c <HAL_I2S_Init+0x1d4>
 8006608:	4b2a      	ldr	r3, [pc, #168]	; (80066b4 <HAL_I2S_Init+0x27c>)
 800660a:	e001      	b.n	8006610 <HAL_I2S_Init+0x1d8>
 800660c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006610:	2202      	movs	r2, #2
 8006612:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a25      	ldr	r2, [pc, #148]	; (80066b0 <HAL_I2S_Init+0x278>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d101      	bne.n	8006622 <HAL_I2S_Init+0x1ea>
 800661e:	4b25      	ldr	r3, [pc, #148]	; (80066b4 <HAL_I2S_Init+0x27c>)
 8006620:	e001      	b.n	8006626 <HAL_I2S_Init+0x1ee>
 8006622:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006632:	d003      	beq.n	800663c <HAL_I2S_Init+0x204>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d103      	bne.n	8006644 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800663c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	e001      	b.n	8006648 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006644:	2300      	movs	r3, #0
 8006646:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006652:	4313      	orrs	r3, r2
 8006654:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800665c:	4313      	orrs	r3, r2
 800665e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006666:	4313      	orrs	r3, r2
 8006668:	b29a      	uxth	r2, r3
 800666a:	897b      	ldrh	r3, [r7, #10]
 800666c:	4313      	orrs	r3, r2
 800666e:	b29b      	uxth	r3, r3
 8006670:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006674:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a0d      	ldr	r2, [pc, #52]	; (80066b0 <HAL_I2S_Init+0x278>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d101      	bne.n	8006684 <HAL_I2S_Init+0x24c>
 8006680:	4b0c      	ldr	r3, [pc, #48]	; (80066b4 <HAL_I2S_Init+0x27c>)
 8006682:	e001      	b.n	8006688 <HAL_I2S_Init+0x250>
 8006684:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006688:	897a      	ldrh	r2, [r7, #10]
 800668a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3720      	adds	r7, #32
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	080067af 	.word	0x080067af
 80066a8:	cccccccd 	.word	0xcccccccd
 80066ac:	080068c5 	.word	0x080068c5
 80066b0:	40003800 	.word	0x40003800
 80066b4:	40003400 	.word	0x40003400

080066b8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006700:	881a      	ldrh	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	1c9a      	adds	r2, r3, #2
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006716:	b29b      	uxth	r3, r3
 8006718:	3b01      	subs	r3, #1
 800671a:	b29a      	uxth	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006724:	b29b      	uxth	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10e      	bne.n	8006748 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685a      	ldr	r2, [r3, #4]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006738:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7ff ffb8 	bl	80066b8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006748:	bf00      	nop
 800674a:	3708      	adds	r7, #8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68da      	ldr	r2, [r3, #12]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006762:	b292      	uxth	r2, r2
 8006764:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676a:	1c9a      	adds	r2, r3, #2
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006774:	b29b      	uxth	r3, r3
 8006776:	3b01      	subs	r3, #1
 8006778:	b29a      	uxth	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006782:	b29b      	uxth	r3, r3
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10e      	bne.n	80067a6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006796:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f7ff ff93 	bl	80066cc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80067a6:	bf00      	nop
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b086      	sub	sp, #24
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	d13a      	bne.n	8006840 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d109      	bne.n	80067e8 <I2S_IRQHandler+0x3a>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067de:	2b40      	cmp	r3, #64	; 0x40
 80067e0:	d102      	bne.n	80067e8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7ff ffb4 	bl	8006750 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ee:	2b40      	cmp	r3, #64	; 0x40
 80067f0:	d126      	bne.n	8006840 <I2S_IRQHandler+0x92>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f003 0320 	and.w	r3, r3, #32
 80067fc:	2b20      	cmp	r3, #32
 80067fe:	d11f      	bne.n	8006840 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685a      	ldr	r2, [r3, #4]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800680e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006810:	2300      	movs	r3, #0
 8006812:	613b      	str	r3, [r7, #16]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	613b      	str	r3, [r7, #16]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	613b      	str	r3, [r7, #16]
 8006824:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006832:	f043 0202 	orr.w	r2, r3, #2
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7ff ff50 	bl	80066e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b03      	cmp	r3, #3
 800684a:	d136      	bne.n	80068ba <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b02      	cmp	r3, #2
 8006854:	d109      	bne.n	800686a <I2S_IRQHandler+0xbc>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006860:	2b80      	cmp	r3, #128	; 0x80
 8006862:	d102      	bne.n	800686a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7ff ff45 	bl	80066f4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f003 0308 	and.w	r3, r3, #8
 8006870:	2b08      	cmp	r3, #8
 8006872:	d122      	bne.n	80068ba <I2S_IRQHandler+0x10c>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f003 0320 	and.w	r3, r3, #32
 800687e:	2b20      	cmp	r3, #32
 8006880:	d11b      	bne.n	80068ba <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006890:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006892:	2300      	movs	r3, #0
 8006894:	60fb      	str	r3, [r7, #12]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	60fb      	str	r3, [r7, #12]
 800689e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ac:	f043 0204 	orr.w	r2, r3, #4
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7ff ff13 	bl	80066e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80068ba:	bf00      	nop
 80068bc:	3718      	adds	r7, #24
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
	...

080068c4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b088      	sub	sp, #32
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a92      	ldr	r2, [pc, #584]	; (8006b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d101      	bne.n	80068e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80068de:	4b92      	ldr	r3, [pc, #584]	; (8006b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80068e0:	e001      	b.n	80068e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80068e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a8b      	ldr	r2, [pc, #556]	; (8006b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d101      	bne.n	8006900 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80068fc:	4b8a      	ldr	r3, [pc, #552]	; (8006b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80068fe:	e001      	b.n	8006904 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006900:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006910:	d004      	beq.n	800691c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	f040 8099 	bne.w	8006a4e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b02      	cmp	r3, #2
 8006924:	d107      	bne.n	8006936 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f925 	bl	8006b80 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	2b01      	cmp	r3, #1
 800693e:	d107      	bne.n	8006950 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006946:	2b00      	cmp	r3, #0
 8006948:	d002      	beq.n	8006950 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f9c8 	bl	8006ce0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006956:	2b40      	cmp	r3, #64	; 0x40
 8006958:	d13a      	bne.n	80069d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f003 0320 	and.w	r3, r3, #32
 8006960:	2b00      	cmp	r3, #0
 8006962:	d035      	beq.n	80069d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a6e      	ldr	r2, [pc, #440]	; (8006b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d101      	bne.n	8006972 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800696e:	4b6e      	ldr	r3, [pc, #440]	; (8006b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006970:	e001      	b.n	8006976 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006972:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4969      	ldr	r1, [pc, #420]	; (8006b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800697e:	428b      	cmp	r3, r1
 8006980:	d101      	bne.n	8006986 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006982:	4b69      	ldr	r3, [pc, #420]	; (8006b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006984:	e001      	b.n	800698a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006986:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800698a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800698e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800699e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80069a0:	2300      	movs	r3, #0
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c2:	f043 0202 	orr.w	r2, r3, #2
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7ff fe88 	bl	80066e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	f003 0308 	and.w	r3, r3, #8
 80069d6:	2b08      	cmp	r3, #8
 80069d8:	f040 80c3 	bne.w	8006b62 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f003 0320 	and.w	r3, r3, #32
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 80bd 	beq.w	8006b62 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80069f6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a49      	ldr	r2, [pc, #292]	; (8006b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d101      	bne.n	8006a06 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006a02:	4b49      	ldr	r3, [pc, #292]	; (8006b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006a04:	e001      	b.n	8006a0a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006a06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4944      	ldr	r1, [pc, #272]	; (8006b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006a12:	428b      	cmp	r3, r1
 8006a14:	d101      	bne.n	8006a1a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006a16:	4b44      	ldr	r3, [pc, #272]	; (8006b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006a18:	e001      	b.n	8006a1e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006a1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a22:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006a24:	2300      	movs	r3, #0
 8006a26:	60bb      	str	r3, [r7, #8]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	60bb      	str	r3, [r7, #8]
 8006a30:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a3e:	f043 0204 	orr.w	r2, r3, #4
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7ff fe4a 	bl	80066e0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006a4c:	e089      	b.n	8006b62 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	f003 0302 	and.w	r3, r3, #2
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d107      	bne.n	8006a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d002      	beq.n	8006a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f8be 	bl	8006be4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d107      	bne.n	8006a82 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d002      	beq.n	8006a82 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f8fd 	bl	8006c7c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a88:	2b40      	cmp	r3, #64	; 0x40
 8006a8a:	d12f      	bne.n	8006aec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f003 0320 	and.w	r3, r3, #32
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d02a      	beq.n	8006aec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006aa4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a1e      	ldr	r2, [pc, #120]	; (8006b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d101      	bne.n	8006ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006ab0:	4b1d      	ldr	r3, [pc, #116]	; (8006b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006ab2:	e001      	b.n	8006ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006ab4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4919      	ldr	r1, [pc, #100]	; (8006b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006ac0:	428b      	cmp	r3, r1
 8006ac2:	d101      	bne.n	8006ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006ac4:	4b18      	ldr	r3, [pc, #96]	; (8006b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006ac6:	e001      	b.n	8006acc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006ac8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006acc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ad0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ade:	f043 0202 	orr.w	r2, r3, #2
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7ff fdfa 	bl	80066e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	f003 0308 	and.w	r3, r3, #8
 8006af2:	2b08      	cmp	r3, #8
 8006af4:	d136      	bne.n	8006b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	f003 0320 	and.w	r3, r3, #32
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d031      	beq.n	8006b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a07      	ldr	r2, [pc, #28]	; (8006b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d101      	bne.n	8006b0e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006b0a:	4b07      	ldr	r3, [pc, #28]	; (8006b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006b0c:	e001      	b.n	8006b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006b0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4902      	ldr	r1, [pc, #8]	; (8006b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006b1a:	428b      	cmp	r3, r1
 8006b1c:	d106      	bne.n	8006b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006b1e:	4b02      	ldr	r3, [pc, #8]	; (8006b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006b20:	e006      	b.n	8006b30 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006b22:	bf00      	nop
 8006b24:	40003800 	.word	0x40003800
 8006b28:	40003400 	.word	0x40003400
 8006b2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b34:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006b44:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b52:	f043 0204 	orr.w	r2, r3, #4
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7ff fdc0 	bl	80066e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b60:	e000      	b.n	8006b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006b62:	bf00      	nop
}
 8006b64:	bf00      	nop
 8006b66:	3720      	adds	r7, #32
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	1c99      	adds	r1, r3, #2
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	6251      	str	r1, [r2, #36]	; 0x24
 8006b92:	881a      	ldrh	r2, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d113      	bne.n	8006bda <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006bc0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d106      	bne.n	8006bda <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7ff ffc9 	bl	8006b6c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006bda:	bf00      	nop
 8006bdc:	3708      	adds	r7, #8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
	...

08006be4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf0:	1c99      	adds	r1, r3, #2
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	6251      	str	r1, [r2, #36]	; 0x24
 8006bf6:	8819      	ldrh	r1, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a1d      	ldr	r2, [pc, #116]	; (8006c74 <I2SEx_TxISR_I2SExt+0x90>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d101      	bne.n	8006c06 <I2SEx_TxISR_I2SExt+0x22>
 8006c02:	4b1d      	ldr	r3, [pc, #116]	; (8006c78 <I2SEx_TxISR_I2SExt+0x94>)
 8006c04:	e001      	b.n	8006c0a <I2SEx_TxISR_I2SExt+0x26>
 8006c06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c0a:	460a      	mov	r2, r1
 8006c0c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d121      	bne.n	8006c6a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a12      	ldr	r2, [pc, #72]	; (8006c74 <I2SEx_TxISR_I2SExt+0x90>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d101      	bne.n	8006c34 <I2SEx_TxISR_I2SExt+0x50>
 8006c30:	4b11      	ldr	r3, [pc, #68]	; (8006c78 <I2SEx_TxISR_I2SExt+0x94>)
 8006c32:	e001      	b.n	8006c38 <I2SEx_TxISR_I2SExt+0x54>
 8006c34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c38:	685a      	ldr	r2, [r3, #4]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	490d      	ldr	r1, [pc, #52]	; (8006c74 <I2SEx_TxISR_I2SExt+0x90>)
 8006c40:	428b      	cmp	r3, r1
 8006c42:	d101      	bne.n	8006c48 <I2SEx_TxISR_I2SExt+0x64>
 8006c44:	4b0c      	ldr	r3, [pc, #48]	; (8006c78 <I2SEx_TxISR_I2SExt+0x94>)
 8006c46:	e001      	b.n	8006c4c <I2SEx_TxISR_I2SExt+0x68>
 8006c48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006c50:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d106      	bne.n	8006c6a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7ff ff81 	bl	8006b6c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c6a:	bf00      	nop
 8006c6c:	3708      	adds	r7, #8
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	40003800 	.word	0x40003800
 8006c78:	40003400 	.word	0x40003400

08006c7c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68d8      	ldr	r0, [r3, #12]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8e:	1c99      	adds	r1, r3, #2
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006c94:	b282      	uxth	r2, r0
 8006c96:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d113      	bne.n	8006cd8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006cbe:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d106      	bne.n	8006cd8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7ff ff4a 	bl	8006b6c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006cd8:	bf00      	nop
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a20      	ldr	r2, [pc, #128]	; (8006d70 <I2SEx_RxISR_I2SExt+0x90>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d101      	bne.n	8006cf6 <I2SEx_RxISR_I2SExt+0x16>
 8006cf2:	4b20      	ldr	r3, [pc, #128]	; (8006d74 <I2SEx_RxISR_I2SExt+0x94>)
 8006cf4:	e001      	b.n	8006cfa <I2SEx_RxISR_I2SExt+0x1a>
 8006cf6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006cfa:	68d8      	ldr	r0, [r3, #12]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d00:	1c99      	adds	r1, r3, #2
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006d06:	b282      	uxth	r2, r0
 8006d08:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	3b01      	subs	r3, #1
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d121      	bne.n	8006d66 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a12      	ldr	r2, [pc, #72]	; (8006d70 <I2SEx_RxISR_I2SExt+0x90>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d101      	bne.n	8006d30 <I2SEx_RxISR_I2SExt+0x50>
 8006d2c:	4b11      	ldr	r3, [pc, #68]	; (8006d74 <I2SEx_RxISR_I2SExt+0x94>)
 8006d2e:	e001      	b.n	8006d34 <I2SEx_RxISR_I2SExt+0x54>
 8006d30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d34:	685a      	ldr	r2, [r3, #4]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	490d      	ldr	r1, [pc, #52]	; (8006d70 <I2SEx_RxISR_I2SExt+0x90>)
 8006d3c:	428b      	cmp	r3, r1
 8006d3e:	d101      	bne.n	8006d44 <I2SEx_RxISR_I2SExt+0x64>
 8006d40:	4b0c      	ldr	r3, [pc, #48]	; (8006d74 <I2SEx_RxISR_I2SExt+0x94>)
 8006d42:	e001      	b.n	8006d48 <I2SEx_RxISR_I2SExt+0x68>
 8006d44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d48:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006d4c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d106      	bne.n	8006d66 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f7ff ff03 	bl	8006b6c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006d66:	bf00      	nop
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	40003800 	.word	0x40003800
 8006d74:	40003400 	.word	0x40003400

08006d78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e267      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d075      	beq.n	8006e82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d96:	4b88      	ldr	r3, [pc, #544]	; (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f003 030c 	and.w	r3, r3, #12
 8006d9e:	2b04      	cmp	r3, #4
 8006da0:	d00c      	beq.n	8006dbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006da2:	4b85      	ldr	r3, [pc, #532]	; (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006daa:	2b08      	cmp	r3, #8
 8006dac:	d112      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006dae:	4b82      	ldr	r3, [pc, #520]	; (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006db6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dba:	d10b      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dbc:	4b7e      	ldr	r3, [pc, #504]	; (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d05b      	beq.n	8006e80 <HAL_RCC_OscConfig+0x108>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d157      	bne.n	8006e80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e242      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ddc:	d106      	bne.n	8006dec <HAL_RCC_OscConfig+0x74>
 8006dde:	4b76      	ldr	r3, [pc, #472]	; (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a75      	ldr	r2, [pc, #468]	; (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006de8:	6013      	str	r3, [r2, #0]
 8006dea:	e01d      	b.n	8006e28 <HAL_RCC_OscConfig+0xb0>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006df4:	d10c      	bne.n	8006e10 <HAL_RCC_OscConfig+0x98>
 8006df6:	4b70      	ldr	r3, [pc, #448]	; (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a6f      	ldr	r2, [pc, #444]	; (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e00:	6013      	str	r3, [r2, #0]
 8006e02:	4b6d      	ldr	r3, [pc, #436]	; (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a6c      	ldr	r2, [pc, #432]	; (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e0c:	6013      	str	r3, [r2, #0]
 8006e0e:	e00b      	b.n	8006e28 <HAL_RCC_OscConfig+0xb0>
 8006e10:	4b69      	ldr	r3, [pc, #420]	; (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a68      	ldr	r2, [pc, #416]	; (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e1a:	6013      	str	r3, [r2, #0]
 8006e1c:	4b66      	ldr	r3, [pc, #408]	; (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a65      	ldr	r2, [pc, #404]	; (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d013      	beq.n	8006e58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e30:	f7fb faca 	bl	80023c8 <HAL_GetTick>
 8006e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e36:	e008      	b.n	8006e4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e38:	f7fb fac6 	bl	80023c8 <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	2b64      	cmp	r3, #100	; 0x64
 8006e44:	d901      	bls.n	8006e4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e207      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e4a:	4b5b      	ldr	r3, [pc, #364]	; (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d0f0      	beq.n	8006e38 <HAL_RCC_OscConfig+0xc0>
 8006e56:	e014      	b.n	8006e82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e58:	f7fb fab6 	bl	80023c8 <HAL_GetTick>
 8006e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e5e:	e008      	b.n	8006e72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e60:	f7fb fab2 	bl	80023c8 <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	2b64      	cmp	r3, #100	; 0x64
 8006e6c:	d901      	bls.n	8006e72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e1f3      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e72:	4b51      	ldr	r3, [pc, #324]	; (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1f0      	bne.n	8006e60 <HAL_RCC_OscConfig+0xe8>
 8006e7e:	e000      	b.n	8006e82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d063      	beq.n	8006f56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e8e:	4b4a      	ldr	r3, [pc, #296]	; (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f003 030c 	and.w	r3, r3, #12
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00b      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e9a:	4b47      	ldr	r3, [pc, #284]	; (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ea2:	2b08      	cmp	r3, #8
 8006ea4:	d11c      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ea6:	4b44      	ldr	r3, [pc, #272]	; (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d116      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006eb2:	4b41      	ldr	r3, [pc, #260]	; (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d005      	beq.n	8006eca <HAL_RCC_OscConfig+0x152>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d001      	beq.n	8006eca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e1c7      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eca:	4b3b      	ldr	r3, [pc, #236]	; (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	00db      	lsls	r3, r3, #3
 8006ed8:	4937      	ldr	r1, [pc, #220]	; (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ede:	e03a      	b.n	8006f56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d020      	beq.n	8006f2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ee8:	4b34      	ldr	r3, [pc, #208]	; (8006fbc <HAL_RCC_OscConfig+0x244>)
 8006eea:	2201      	movs	r2, #1
 8006eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eee:	f7fb fa6b 	bl	80023c8 <HAL_GetTick>
 8006ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ef4:	e008      	b.n	8006f08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ef6:	f7fb fa67 	bl	80023c8 <HAL_GetTick>
 8006efa:	4602      	mov	r2, r0
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d901      	bls.n	8006f08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e1a8      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f08:	4b2b      	ldr	r3, [pc, #172]	; (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0302 	and.w	r3, r3, #2
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d0f0      	beq.n	8006ef6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f14:	4b28      	ldr	r3, [pc, #160]	; (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	00db      	lsls	r3, r3, #3
 8006f22:	4925      	ldr	r1, [pc, #148]	; (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	600b      	str	r3, [r1, #0]
 8006f28:	e015      	b.n	8006f56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f2a:	4b24      	ldr	r3, [pc, #144]	; (8006fbc <HAL_RCC_OscConfig+0x244>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f30:	f7fb fa4a 	bl	80023c8 <HAL_GetTick>
 8006f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f36:	e008      	b.n	8006f4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f38:	f7fb fa46 	bl	80023c8 <HAL_GetTick>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d901      	bls.n	8006f4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e187      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f4a:	4b1b      	ldr	r3, [pc, #108]	; (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0302 	and.w	r3, r3, #2
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1f0      	bne.n	8006f38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0308 	and.w	r3, r3, #8
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d036      	beq.n	8006fd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d016      	beq.n	8006f98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f6a:	4b15      	ldr	r3, [pc, #84]	; (8006fc0 <HAL_RCC_OscConfig+0x248>)
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f70:	f7fb fa2a 	bl	80023c8 <HAL_GetTick>
 8006f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f76:	e008      	b.n	8006f8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f78:	f7fb fa26 	bl	80023c8 <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d901      	bls.n	8006f8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e167      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f8a:	4b0b      	ldr	r3, [pc, #44]	; (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d0f0      	beq.n	8006f78 <HAL_RCC_OscConfig+0x200>
 8006f96:	e01b      	b.n	8006fd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f98:	4b09      	ldr	r3, [pc, #36]	; (8006fc0 <HAL_RCC_OscConfig+0x248>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f9e:	f7fb fa13 	bl	80023c8 <HAL_GetTick>
 8006fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fa4:	e00e      	b.n	8006fc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fa6:	f7fb fa0f 	bl	80023c8 <HAL_GetTick>
 8006faa:	4602      	mov	r2, r0
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d907      	bls.n	8006fc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	e150      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
 8006fb8:	40023800 	.word	0x40023800
 8006fbc:	42470000 	.word	0x42470000
 8006fc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fc4:	4b88      	ldr	r3, [pc, #544]	; (80071e8 <HAL_RCC_OscConfig+0x470>)
 8006fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fc8:	f003 0302 	and.w	r3, r3, #2
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1ea      	bne.n	8006fa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 8097 	beq.w	800710c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fe2:	4b81      	ldr	r3, [pc, #516]	; (80071e8 <HAL_RCC_OscConfig+0x470>)
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10f      	bne.n	800700e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60bb      	str	r3, [r7, #8]
 8006ff2:	4b7d      	ldr	r3, [pc, #500]	; (80071e8 <HAL_RCC_OscConfig+0x470>)
 8006ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff6:	4a7c      	ldr	r2, [pc, #496]	; (80071e8 <HAL_RCC_OscConfig+0x470>)
 8006ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8006ffe:	4b7a      	ldr	r3, [pc, #488]	; (80071e8 <HAL_RCC_OscConfig+0x470>)
 8007000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007006:	60bb      	str	r3, [r7, #8]
 8007008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800700a:	2301      	movs	r3, #1
 800700c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800700e:	4b77      	ldr	r3, [pc, #476]	; (80071ec <HAL_RCC_OscConfig+0x474>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007016:	2b00      	cmp	r3, #0
 8007018:	d118      	bne.n	800704c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800701a:	4b74      	ldr	r3, [pc, #464]	; (80071ec <HAL_RCC_OscConfig+0x474>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a73      	ldr	r2, [pc, #460]	; (80071ec <HAL_RCC_OscConfig+0x474>)
 8007020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007026:	f7fb f9cf 	bl	80023c8 <HAL_GetTick>
 800702a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800702c:	e008      	b.n	8007040 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800702e:	f7fb f9cb 	bl	80023c8 <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	2b02      	cmp	r3, #2
 800703a:	d901      	bls.n	8007040 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e10c      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007040:	4b6a      	ldr	r3, [pc, #424]	; (80071ec <HAL_RCC_OscConfig+0x474>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007048:	2b00      	cmp	r3, #0
 800704a:	d0f0      	beq.n	800702e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d106      	bne.n	8007062 <HAL_RCC_OscConfig+0x2ea>
 8007054:	4b64      	ldr	r3, [pc, #400]	; (80071e8 <HAL_RCC_OscConfig+0x470>)
 8007056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007058:	4a63      	ldr	r2, [pc, #396]	; (80071e8 <HAL_RCC_OscConfig+0x470>)
 800705a:	f043 0301 	orr.w	r3, r3, #1
 800705e:	6713      	str	r3, [r2, #112]	; 0x70
 8007060:	e01c      	b.n	800709c <HAL_RCC_OscConfig+0x324>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	2b05      	cmp	r3, #5
 8007068:	d10c      	bne.n	8007084 <HAL_RCC_OscConfig+0x30c>
 800706a:	4b5f      	ldr	r3, [pc, #380]	; (80071e8 <HAL_RCC_OscConfig+0x470>)
 800706c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800706e:	4a5e      	ldr	r2, [pc, #376]	; (80071e8 <HAL_RCC_OscConfig+0x470>)
 8007070:	f043 0304 	orr.w	r3, r3, #4
 8007074:	6713      	str	r3, [r2, #112]	; 0x70
 8007076:	4b5c      	ldr	r3, [pc, #368]	; (80071e8 <HAL_RCC_OscConfig+0x470>)
 8007078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800707a:	4a5b      	ldr	r2, [pc, #364]	; (80071e8 <HAL_RCC_OscConfig+0x470>)
 800707c:	f043 0301 	orr.w	r3, r3, #1
 8007080:	6713      	str	r3, [r2, #112]	; 0x70
 8007082:	e00b      	b.n	800709c <HAL_RCC_OscConfig+0x324>
 8007084:	4b58      	ldr	r3, [pc, #352]	; (80071e8 <HAL_RCC_OscConfig+0x470>)
 8007086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007088:	4a57      	ldr	r2, [pc, #348]	; (80071e8 <HAL_RCC_OscConfig+0x470>)
 800708a:	f023 0301 	bic.w	r3, r3, #1
 800708e:	6713      	str	r3, [r2, #112]	; 0x70
 8007090:	4b55      	ldr	r3, [pc, #340]	; (80071e8 <HAL_RCC_OscConfig+0x470>)
 8007092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007094:	4a54      	ldr	r2, [pc, #336]	; (80071e8 <HAL_RCC_OscConfig+0x470>)
 8007096:	f023 0304 	bic.w	r3, r3, #4
 800709a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d015      	beq.n	80070d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070a4:	f7fb f990 	bl	80023c8 <HAL_GetTick>
 80070a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070aa:	e00a      	b.n	80070c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070ac:	f7fb f98c 	bl	80023c8 <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d901      	bls.n	80070c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e0cb      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070c2:	4b49      	ldr	r3, [pc, #292]	; (80071e8 <HAL_RCC_OscConfig+0x470>)
 80070c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c6:	f003 0302 	and.w	r3, r3, #2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d0ee      	beq.n	80070ac <HAL_RCC_OscConfig+0x334>
 80070ce:	e014      	b.n	80070fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070d0:	f7fb f97a 	bl	80023c8 <HAL_GetTick>
 80070d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070d6:	e00a      	b.n	80070ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070d8:	f7fb f976 	bl	80023c8 <HAL_GetTick>
 80070dc:	4602      	mov	r2, r0
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d901      	bls.n	80070ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	e0b5      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070ee:	4b3e      	ldr	r3, [pc, #248]	; (80071e8 <HAL_RCC_OscConfig+0x470>)
 80070f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f2:	f003 0302 	and.w	r3, r3, #2
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1ee      	bne.n	80070d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070fa:	7dfb      	ldrb	r3, [r7, #23]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d105      	bne.n	800710c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007100:	4b39      	ldr	r3, [pc, #228]	; (80071e8 <HAL_RCC_OscConfig+0x470>)
 8007102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007104:	4a38      	ldr	r2, [pc, #224]	; (80071e8 <HAL_RCC_OscConfig+0x470>)
 8007106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800710a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 80a1 	beq.w	8007258 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007116:	4b34      	ldr	r3, [pc, #208]	; (80071e8 <HAL_RCC_OscConfig+0x470>)
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f003 030c 	and.w	r3, r3, #12
 800711e:	2b08      	cmp	r3, #8
 8007120:	d05c      	beq.n	80071dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	2b02      	cmp	r3, #2
 8007128:	d141      	bne.n	80071ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800712a:	4b31      	ldr	r3, [pc, #196]	; (80071f0 <HAL_RCC_OscConfig+0x478>)
 800712c:	2200      	movs	r2, #0
 800712e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007130:	f7fb f94a 	bl	80023c8 <HAL_GetTick>
 8007134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007136:	e008      	b.n	800714a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007138:	f7fb f946 	bl	80023c8 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	2b02      	cmp	r3, #2
 8007144:	d901      	bls.n	800714a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e087      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800714a:	4b27      	ldr	r3, [pc, #156]	; (80071e8 <HAL_RCC_OscConfig+0x470>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1f0      	bne.n	8007138 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	69da      	ldr	r2, [r3, #28]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	431a      	orrs	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007164:	019b      	lsls	r3, r3, #6
 8007166:	431a      	orrs	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716c:	085b      	lsrs	r3, r3, #1
 800716e:	3b01      	subs	r3, #1
 8007170:	041b      	lsls	r3, r3, #16
 8007172:	431a      	orrs	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007178:	061b      	lsls	r3, r3, #24
 800717a:	491b      	ldr	r1, [pc, #108]	; (80071e8 <HAL_RCC_OscConfig+0x470>)
 800717c:	4313      	orrs	r3, r2
 800717e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007180:	4b1b      	ldr	r3, [pc, #108]	; (80071f0 <HAL_RCC_OscConfig+0x478>)
 8007182:	2201      	movs	r2, #1
 8007184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007186:	f7fb f91f 	bl	80023c8 <HAL_GetTick>
 800718a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800718c:	e008      	b.n	80071a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800718e:	f7fb f91b 	bl	80023c8 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	2b02      	cmp	r3, #2
 800719a:	d901      	bls.n	80071a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e05c      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071a0:	4b11      	ldr	r3, [pc, #68]	; (80071e8 <HAL_RCC_OscConfig+0x470>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d0f0      	beq.n	800718e <HAL_RCC_OscConfig+0x416>
 80071ac:	e054      	b.n	8007258 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071ae:	4b10      	ldr	r3, [pc, #64]	; (80071f0 <HAL_RCC_OscConfig+0x478>)
 80071b0:	2200      	movs	r2, #0
 80071b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071b4:	f7fb f908 	bl	80023c8 <HAL_GetTick>
 80071b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ba:	e008      	b.n	80071ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071bc:	f7fb f904 	bl	80023c8 <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d901      	bls.n	80071ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e045      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ce:	4b06      	ldr	r3, [pc, #24]	; (80071e8 <HAL_RCC_OscConfig+0x470>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1f0      	bne.n	80071bc <HAL_RCC_OscConfig+0x444>
 80071da:	e03d      	b.n	8007258 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d107      	bne.n	80071f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e038      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
 80071e8:	40023800 	.word	0x40023800
 80071ec:	40007000 	.word	0x40007000
 80071f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80071f4:	4b1b      	ldr	r3, [pc, #108]	; (8007264 <HAL_RCC_OscConfig+0x4ec>)
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d028      	beq.n	8007254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800720c:	429a      	cmp	r2, r3
 800720e:	d121      	bne.n	8007254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800721a:	429a      	cmp	r2, r3
 800721c:	d11a      	bne.n	8007254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007224:	4013      	ands	r3, r2
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800722a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800722c:	4293      	cmp	r3, r2
 800722e:	d111      	bne.n	8007254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723a:	085b      	lsrs	r3, r3, #1
 800723c:	3b01      	subs	r3, #1
 800723e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007240:	429a      	cmp	r2, r3
 8007242:	d107      	bne.n	8007254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007250:	429a      	cmp	r2, r3
 8007252:	d001      	beq.n	8007258 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e000      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3718      	adds	r7, #24
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	40023800 	.word	0x40023800

08007268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d101      	bne.n	800727c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e0cc      	b.n	8007416 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800727c:	4b68      	ldr	r3, [pc, #416]	; (8007420 <HAL_RCC_ClockConfig+0x1b8>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0307 	and.w	r3, r3, #7
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	429a      	cmp	r2, r3
 8007288:	d90c      	bls.n	80072a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800728a:	4b65      	ldr	r3, [pc, #404]	; (8007420 <HAL_RCC_ClockConfig+0x1b8>)
 800728c:	683a      	ldr	r2, [r7, #0]
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007292:	4b63      	ldr	r3, [pc, #396]	; (8007420 <HAL_RCC_ClockConfig+0x1b8>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0307 	and.w	r3, r3, #7
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	429a      	cmp	r2, r3
 800729e:	d001      	beq.n	80072a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e0b8      	b.n	8007416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0302 	and.w	r3, r3, #2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d020      	beq.n	80072f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0304 	and.w	r3, r3, #4
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d005      	beq.n	80072c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072bc:	4b59      	ldr	r3, [pc, #356]	; (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	4a58      	ldr	r2, [pc, #352]	; (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 80072c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80072c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0308 	and.w	r3, r3, #8
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d005      	beq.n	80072e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072d4:	4b53      	ldr	r3, [pc, #332]	; (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	4a52      	ldr	r2, [pc, #328]	; (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 80072da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80072de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072e0:	4b50      	ldr	r3, [pc, #320]	; (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	494d      	ldr	r1, [pc, #308]	; (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0301 	and.w	r3, r3, #1
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d044      	beq.n	8007388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d107      	bne.n	8007316 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007306:	4b47      	ldr	r3, [pc, #284]	; (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d119      	bne.n	8007346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e07f      	b.n	8007416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	2b02      	cmp	r3, #2
 800731c:	d003      	beq.n	8007326 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007322:	2b03      	cmp	r3, #3
 8007324:	d107      	bne.n	8007336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007326:	4b3f      	ldr	r3, [pc, #252]	; (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d109      	bne.n	8007346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e06f      	b.n	8007416 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007336:	4b3b      	ldr	r3, [pc, #236]	; (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0302 	and.w	r3, r3, #2
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e067      	b.n	8007416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007346:	4b37      	ldr	r3, [pc, #220]	; (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	f023 0203 	bic.w	r2, r3, #3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	4934      	ldr	r1, [pc, #208]	; (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 8007354:	4313      	orrs	r3, r2
 8007356:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007358:	f7fb f836 	bl	80023c8 <HAL_GetTick>
 800735c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800735e:	e00a      	b.n	8007376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007360:	f7fb f832 	bl	80023c8 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	f241 3288 	movw	r2, #5000	; 0x1388
 800736e:	4293      	cmp	r3, r2
 8007370:	d901      	bls.n	8007376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007372:	2303      	movs	r3, #3
 8007374:	e04f      	b.n	8007416 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007376:	4b2b      	ldr	r3, [pc, #172]	; (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	f003 020c 	and.w	r2, r3, #12
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	429a      	cmp	r2, r3
 8007386:	d1eb      	bne.n	8007360 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007388:	4b25      	ldr	r3, [pc, #148]	; (8007420 <HAL_RCC_ClockConfig+0x1b8>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0307 	and.w	r3, r3, #7
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	429a      	cmp	r2, r3
 8007394:	d20c      	bcs.n	80073b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007396:	4b22      	ldr	r3, [pc, #136]	; (8007420 <HAL_RCC_ClockConfig+0x1b8>)
 8007398:	683a      	ldr	r2, [r7, #0]
 800739a:	b2d2      	uxtb	r2, r2
 800739c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800739e:	4b20      	ldr	r3, [pc, #128]	; (8007420 <HAL_RCC_ClockConfig+0x1b8>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0307 	and.w	r3, r3, #7
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d001      	beq.n	80073b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e032      	b.n	8007416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0304 	and.w	r3, r3, #4
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d008      	beq.n	80073ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073bc:	4b19      	ldr	r3, [pc, #100]	; (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	4916      	ldr	r1, [pc, #88]	; (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0308 	and.w	r3, r3, #8
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d009      	beq.n	80073ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073da:	4b12      	ldr	r3, [pc, #72]	; (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	00db      	lsls	r3, r3, #3
 80073e8:	490e      	ldr	r1, [pc, #56]	; (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 80073ea:	4313      	orrs	r3, r2
 80073ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80073ee:	f000 f821 	bl	8007434 <HAL_RCC_GetSysClockFreq>
 80073f2:	4602      	mov	r2, r0
 80073f4:	4b0b      	ldr	r3, [pc, #44]	; (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	091b      	lsrs	r3, r3, #4
 80073fa:	f003 030f 	and.w	r3, r3, #15
 80073fe:	490a      	ldr	r1, [pc, #40]	; (8007428 <HAL_RCC_ClockConfig+0x1c0>)
 8007400:	5ccb      	ldrb	r3, [r1, r3]
 8007402:	fa22 f303 	lsr.w	r3, r2, r3
 8007406:	4a09      	ldr	r2, [pc, #36]	; (800742c <HAL_RCC_ClockConfig+0x1c4>)
 8007408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800740a:	4b09      	ldr	r3, [pc, #36]	; (8007430 <HAL_RCC_ClockConfig+0x1c8>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4618      	mov	r0, r3
 8007410:	f7fa ff96 	bl	8002340 <HAL_InitTick>

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	40023c00 	.word	0x40023c00
 8007424:	40023800 	.word	0x40023800
 8007428:	08011ed0 	.word	0x08011ed0
 800742c:	20000004 	.word	0x20000004
 8007430:	20000008 	.word	0x20000008

08007434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007438:	b094      	sub	sp, #80	; 0x50
 800743a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800743c:	2300      	movs	r3, #0
 800743e:	647b      	str	r3, [r7, #68]	; 0x44
 8007440:	2300      	movs	r3, #0
 8007442:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007444:	2300      	movs	r3, #0
 8007446:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007448:	2300      	movs	r3, #0
 800744a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800744c:	4b79      	ldr	r3, [pc, #484]	; (8007634 <HAL_RCC_GetSysClockFreq+0x200>)
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f003 030c 	and.w	r3, r3, #12
 8007454:	2b08      	cmp	r3, #8
 8007456:	d00d      	beq.n	8007474 <HAL_RCC_GetSysClockFreq+0x40>
 8007458:	2b08      	cmp	r3, #8
 800745a:	f200 80e1 	bhi.w	8007620 <HAL_RCC_GetSysClockFreq+0x1ec>
 800745e:	2b00      	cmp	r3, #0
 8007460:	d002      	beq.n	8007468 <HAL_RCC_GetSysClockFreq+0x34>
 8007462:	2b04      	cmp	r3, #4
 8007464:	d003      	beq.n	800746e <HAL_RCC_GetSysClockFreq+0x3a>
 8007466:	e0db      	b.n	8007620 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007468:	4b73      	ldr	r3, [pc, #460]	; (8007638 <HAL_RCC_GetSysClockFreq+0x204>)
 800746a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800746c:	e0db      	b.n	8007626 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800746e:	4b73      	ldr	r3, [pc, #460]	; (800763c <HAL_RCC_GetSysClockFreq+0x208>)
 8007470:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007472:	e0d8      	b.n	8007626 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007474:	4b6f      	ldr	r3, [pc, #444]	; (8007634 <HAL_RCC_GetSysClockFreq+0x200>)
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800747c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800747e:	4b6d      	ldr	r3, [pc, #436]	; (8007634 <HAL_RCC_GetSysClockFreq+0x200>)
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d063      	beq.n	8007552 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800748a:	4b6a      	ldr	r3, [pc, #424]	; (8007634 <HAL_RCC_GetSysClockFreq+0x200>)
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	099b      	lsrs	r3, r3, #6
 8007490:	2200      	movs	r2, #0
 8007492:	63bb      	str	r3, [r7, #56]	; 0x38
 8007494:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800749c:	633b      	str	r3, [r7, #48]	; 0x30
 800749e:	2300      	movs	r3, #0
 80074a0:	637b      	str	r3, [r7, #52]	; 0x34
 80074a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80074a6:	4622      	mov	r2, r4
 80074a8:	462b      	mov	r3, r5
 80074aa:	f04f 0000 	mov.w	r0, #0
 80074ae:	f04f 0100 	mov.w	r1, #0
 80074b2:	0159      	lsls	r1, r3, #5
 80074b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074b8:	0150      	lsls	r0, r2, #5
 80074ba:	4602      	mov	r2, r0
 80074bc:	460b      	mov	r3, r1
 80074be:	4621      	mov	r1, r4
 80074c0:	1a51      	subs	r1, r2, r1
 80074c2:	6139      	str	r1, [r7, #16]
 80074c4:	4629      	mov	r1, r5
 80074c6:	eb63 0301 	sbc.w	r3, r3, r1
 80074ca:	617b      	str	r3, [r7, #20]
 80074cc:	f04f 0200 	mov.w	r2, #0
 80074d0:	f04f 0300 	mov.w	r3, #0
 80074d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074d8:	4659      	mov	r1, fp
 80074da:	018b      	lsls	r3, r1, #6
 80074dc:	4651      	mov	r1, sl
 80074de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80074e2:	4651      	mov	r1, sl
 80074e4:	018a      	lsls	r2, r1, #6
 80074e6:	4651      	mov	r1, sl
 80074e8:	ebb2 0801 	subs.w	r8, r2, r1
 80074ec:	4659      	mov	r1, fp
 80074ee:	eb63 0901 	sbc.w	r9, r3, r1
 80074f2:	f04f 0200 	mov.w	r2, #0
 80074f6:	f04f 0300 	mov.w	r3, #0
 80074fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007502:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007506:	4690      	mov	r8, r2
 8007508:	4699      	mov	r9, r3
 800750a:	4623      	mov	r3, r4
 800750c:	eb18 0303 	adds.w	r3, r8, r3
 8007510:	60bb      	str	r3, [r7, #8]
 8007512:	462b      	mov	r3, r5
 8007514:	eb49 0303 	adc.w	r3, r9, r3
 8007518:	60fb      	str	r3, [r7, #12]
 800751a:	f04f 0200 	mov.w	r2, #0
 800751e:	f04f 0300 	mov.w	r3, #0
 8007522:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007526:	4629      	mov	r1, r5
 8007528:	024b      	lsls	r3, r1, #9
 800752a:	4621      	mov	r1, r4
 800752c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007530:	4621      	mov	r1, r4
 8007532:	024a      	lsls	r2, r1, #9
 8007534:	4610      	mov	r0, r2
 8007536:	4619      	mov	r1, r3
 8007538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800753a:	2200      	movs	r2, #0
 800753c:	62bb      	str	r3, [r7, #40]	; 0x28
 800753e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007540:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007544:	f7f9 fba0 	bl	8000c88 <__aeabi_uldivmod>
 8007548:	4602      	mov	r2, r0
 800754a:	460b      	mov	r3, r1
 800754c:	4613      	mov	r3, r2
 800754e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007550:	e058      	b.n	8007604 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007552:	4b38      	ldr	r3, [pc, #224]	; (8007634 <HAL_RCC_GetSysClockFreq+0x200>)
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	099b      	lsrs	r3, r3, #6
 8007558:	2200      	movs	r2, #0
 800755a:	4618      	mov	r0, r3
 800755c:	4611      	mov	r1, r2
 800755e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007562:	623b      	str	r3, [r7, #32]
 8007564:	2300      	movs	r3, #0
 8007566:	627b      	str	r3, [r7, #36]	; 0x24
 8007568:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800756c:	4642      	mov	r2, r8
 800756e:	464b      	mov	r3, r9
 8007570:	f04f 0000 	mov.w	r0, #0
 8007574:	f04f 0100 	mov.w	r1, #0
 8007578:	0159      	lsls	r1, r3, #5
 800757a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800757e:	0150      	lsls	r0, r2, #5
 8007580:	4602      	mov	r2, r0
 8007582:	460b      	mov	r3, r1
 8007584:	4641      	mov	r1, r8
 8007586:	ebb2 0a01 	subs.w	sl, r2, r1
 800758a:	4649      	mov	r1, r9
 800758c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007590:	f04f 0200 	mov.w	r2, #0
 8007594:	f04f 0300 	mov.w	r3, #0
 8007598:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800759c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80075a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80075a4:	ebb2 040a 	subs.w	r4, r2, sl
 80075a8:	eb63 050b 	sbc.w	r5, r3, fp
 80075ac:	f04f 0200 	mov.w	r2, #0
 80075b0:	f04f 0300 	mov.w	r3, #0
 80075b4:	00eb      	lsls	r3, r5, #3
 80075b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075ba:	00e2      	lsls	r2, r4, #3
 80075bc:	4614      	mov	r4, r2
 80075be:	461d      	mov	r5, r3
 80075c0:	4643      	mov	r3, r8
 80075c2:	18e3      	adds	r3, r4, r3
 80075c4:	603b      	str	r3, [r7, #0]
 80075c6:	464b      	mov	r3, r9
 80075c8:	eb45 0303 	adc.w	r3, r5, r3
 80075cc:	607b      	str	r3, [r7, #4]
 80075ce:	f04f 0200 	mov.w	r2, #0
 80075d2:	f04f 0300 	mov.w	r3, #0
 80075d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80075da:	4629      	mov	r1, r5
 80075dc:	028b      	lsls	r3, r1, #10
 80075de:	4621      	mov	r1, r4
 80075e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80075e4:	4621      	mov	r1, r4
 80075e6:	028a      	lsls	r2, r1, #10
 80075e8:	4610      	mov	r0, r2
 80075ea:	4619      	mov	r1, r3
 80075ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075ee:	2200      	movs	r2, #0
 80075f0:	61bb      	str	r3, [r7, #24]
 80075f2:	61fa      	str	r2, [r7, #28]
 80075f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075f8:	f7f9 fb46 	bl	8000c88 <__aeabi_uldivmod>
 80075fc:	4602      	mov	r2, r0
 80075fe:	460b      	mov	r3, r1
 8007600:	4613      	mov	r3, r2
 8007602:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007604:	4b0b      	ldr	r3, [pc, #44]	; (8007634 <HAL_RCC_GetSysClockFreq+0x200>)
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	0c1b      	lsrs	r3, r3, #16
 800760a:	f003 0303 	and.w	r3, r3, #3
 800760e:	3301      	adds	r3, #1
 8007610:	005b      	lsls	r3, r3, #1
 8007612:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007614:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007618:	fbb2 f3f3 	udiv	r3, r2, r3
 800761c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800761e:	e002      	b.n	8007626 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007620:	4b05      	ldr	r3, [pc, #20]	; (8007638 <HAL_RCC_GetSysClockFreq+0x204>)
 8007622:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007628:	4618      	mov	r0, r3
 800762a:	3750      	adds	r7, #80	; 0x50
 800762c:	46bd      	mov	sp, r7
 800762e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007632:	bf00      	nop
 8007634:	40023800 	.word	0x40023800
 8007638:	00f42400 	.word	0x00f42400
 800763c:	007a1200 	.word	0x007a1200

08007640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007640:	b480      	push	{r7}
 8007642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007644:	4b03      	ldr	r3, [pc, #12]	; (8007654 <HAL_RCC_GetHCLKFreq+0x14>)
 8007646:	681b      	ldr	r3, [r3, #0]
}
 8007648:	4618      	mov	r0, r3
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	20000004 	.word	0x20000004

08007658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800765c:	f7ff fff0 	bl	8007640 <HAL_RCC_GetHCLKFreq>
 8007660:	4602      	mov	r2, r0
 8007662:	4b05      	ldr	r3, [pc, #20]	; (8007678 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	0a9b      	lsrs	r3, r3, #10
 8007668:	f003 0307 	and.w	r3, r3, #7
 800766c:	4903      	ldr	r1, [pc, #12]	; (800767c <HAL_RCC_GetPCLK1Freq+0x24>)
 800766e:	5ccb      	ldrb	r3, [r1, r3]
 8007670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007674:	4618      	mov	r0, r3
 8007676:	bd80      	pop	{r7, pc}
 8007678:	40023800 	.word	0x40023800
 800767c:	08011ee0 	.word	0x08011ee0

08007680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007684:	f7ff ffdc 	bl	8007640 <HAL_RCC_GetHCLKFreq>
 8007688:	4602      	mov	r2, r0
 800768a:	4b05      	ldr	r3, [pc, #20]	; (80076a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	0b5b      	lsrs	r3, r3, #13
 8007690:	f003 0307 	and.w	r3, r3, #7
 8007694:	4903      	ldr	r1, [pc, #12]	; (80076a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007696:	5ccb      	ldrb	r3, [r1, r3]
 8007698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800769c:	4618      	mov	r0, r3
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	40023800 	.word	0x40023800
 80076a4:	08011ee0 	.word	0x08011ee0

080076a8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80076b0:	2300      	movs	r3, #0
 80076b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80076b4:	2300      	movs	r3, #0
 80076b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 0301 	and.w	r3, r3, #1
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d105      	bne.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d035      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80076d0:	4b62      	ldr	r3, [pc, #392]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80076d6:	f7fa fe77 	bl	80023c8 <HAL_GetTick>
 80076da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80076dc:	e008      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80076de:	f7fa fe73 	bl	80023c8 <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d901      	bls.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e0b0      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80076f0:	4b5b      	ldr	r3, [pc, #364]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d1f0      	bne.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	019a      	lsls	r2, r3, #6
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	071b      	lsls	r3, r3, #28
 8007708:	4955      	ldr	r1, [pc, #340]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800770a:	4313      	orrs	r3, r2
 800770c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007710:	4b52      	ldr	r3, [pc, #328]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007712:	2201      	movs	r2, #1
 8007714:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007716:	f7fa fe57 	bl	80023c8 <HAL_GetTick>
 800771a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800771c:	e008      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800771e:	f7fa fe53 	bl	80023c8 <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	2b02      	cmp	r3, #2
 800772a:	d901      	bls.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	e090      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007730:	4b4b      	ldr	r3, [pc, #300]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d0f0      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	2b00      	cmp	r3, #0
 8007746:	f000 8083 	beq.w	8007850 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800774a:	2300      	movs	r3, #0
 800774c:	60fb      	str	r3, [r7, #12]
 800774e:	4b44      	ldr	r3, [pc, #272]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007752:	4a43      	ldr	r2, [pc, #268]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007758:	6413      	str	r3, [r2, #64]	; 0x40
 800775a:	4b41      	ldr	r3, [pc, #260]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800775c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007762:	60fb      	str	r3, [r7, #12]
 8007764:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007766:	4b3f      	ldr	r3, [pc, #252]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a3e      	ldr	r2, [pc, #248]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800776c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007770:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007772:	f7fa fe29 	bl	80023c8 <HAL_GetTick>
 8007776:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007778:	e008      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800777a:	f7fa fe25 	bl	80023c8 <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	2b02      	cmp	r3, #2
 8007786:	d901      	bls.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e062      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800778c:	4b35      	ldr	r3, [pc, #212]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007794:	2b00      	cmp	r3, #0
 8007796:	d0f0      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007798:	4b31      	ldr	r3, [pc, #196]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800779a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800779c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077a0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d02f      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d028      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80077b6:	4b2a      	ldr	r3, [pc, #168]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80077c0:	4b29      	ldr	r3, [pc, #164]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80077c2:	2201      	movs	r2, #1
 80077c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80077c6:	4b28      	ldr	r3, [pc, #160]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80077cc:	4a24      	ldr	r2, [pc, #144]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80077d2:	4b23      	ldr	r3, [pc, #140]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077d6:	f003 0301 	and.w	r3, r3, #1
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d114      	bne.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80077de:	f7fa fdf3 	bl	80023c8 <HAL_GetTick>
 80077e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077e4:	e00a      	b.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077e6:	f7fa fdef 	bl	80023c8 <HAL_GetTick>
 80077ea:	4602      	mov	r2, r0
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d901      	bls.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e02a      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077fc:	4b18      	ldr	r3, [pc, #96]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007800:	f003 0302 	and.w	r3, r3, #2
 8007804:	2b00      	cmp	r3, #0
 8007806:	d0ee      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007810:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007814:	d10d      	bne.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007816:	4b12      	ldr	r3, [pc, #72]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800782a:	490d      	ldr	r1, [pc, #52]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800782c:	4313      	orrs	r3, r2
 800782e:	608b      	str	r3, [r1, #8]
 8007830:	e005      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007832:	4b0b      	ldr	r3, [pc, #44]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	4a0a      	ldr	r2, [pc, #40]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007838:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800783c:	6093      	str	r3, [r2, #8]
 800783e:	4b08      	ldr	r3, [pc, #32]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007840:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800784a:	4905      	ldr	r1, [pc, #20]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800784c:	4313      	orrs	r3, r2
 800784e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3718      	adds	r7, #24
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	42470068 	.word	0x42470068
 8007860:	40023800 	.word	0x40023800
 8007864:	40007000 	.word	0x40007000
 8007868:	42470e40 	.word	0x42470e40

0800786c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800786c:	b480      	push	{r7}
 800786e:	b087      	sub	sp, #28
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007874:	2300      	movs	r3, #0
 8007876:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007878:	2300      	movs	r3, #0
 800787a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007880:	2300      	movs	r3, #0
 8007882:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d13f      	bne.n	800790a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800788a:	4b24      	ldr	r3, [pc, #144]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007892:	60fb      	str	r3, [r7, #12]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d006      	beq.n	80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078a0:	d12f      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80078a2:	4b1f      	ldr	r3, [pc, #124]	; (8007920 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80078a4:	617b      	str	r3, [r7, #20]
          break;
 80078a6:	e02f      	b.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80078a8:	4b1c      	ldr	r3, [pc, #112]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078b4:	d108      	bne.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80078b6:	4b19      	ldr	r3, [pc, #100]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078be:	4a19      	ldr	r2, [pc, #100]	; (8007924 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80078c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c4:	613b      	str	r3, [r7, #16]
 80078c6:	e007      	b.n	80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80078c8:	4b14      	ldr	r3, [pc, #80]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078d0:	4a15      	ldr	r2, [pc, #84]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80078d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80078d8:	4b10      	ldr	r3, [pc, #64]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80078da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078de:	099b      	lsrs	r3, r3, #6
 80078e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	fb02 f303 	mul.w	r3, r2, r3
 80078ea:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80078ec:	4b0b      	ldr	r3, [pc, #44]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80078ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078f2:	0f1b      	lsrs	r3, r3, #28
 80078f4:	f003 0307 	and.w	r3, r3, #7
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80078fe:	617b      	str	r3, [r7, #20]
          break;
 8007900:	e002      	b.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007902:	2300      	movs	r3, #0
 8007904:	617b      	str	r3, [r7, #20]
          break;
 8007906:	bf00      	nop
        }
      }
      break;
 8007908:	e000      	b.n	800790c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 800790a:	bf00      	nop
    }
  }
  return frequency;
 800790c:	697b      	ldr	r3, [r7, #20]
}
 800790e:	4618      	mov	r0, r3
 8007910:	371c      	adds	r7, #28
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	40023800 	.word	0x40023800
 8007920:	00bb8000 	.word	0x00bb8000
 8007924:	007a1200 	.word	0x007a1200
 8007928:	00f42400 	.word	0x00f42400

0800792c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e07b      	b.n	8007a36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007942:	2b00      	cmp	r3, #0
 8007944:	d108      	bne.n	8007958 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800794e:	d009      	beq.n	8007964 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	61da      	str	r2, [r3, #28]
 8007956:	e005      	b.n	8007964 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b00      	cmp	r3, #0
 8007974:	d106      	bne.n	8007984 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7fa f9f2 	bl	8001d68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2202      	movs	r2, #2
 8007988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800799a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80079ac:	431a      	orrs	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079b6:	431a      	orrs	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	f003 0302 	and.w	r3, r3, #2
 80079c0:	431a      	orrs	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	695b      	ldr	r3, [r3, #20]
 80079c6:	f003 0301 	and.w	r3, r3, #1
 80079ca:	431a      	orrs	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079d4:	431a      	orrs	r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	69db      	ldr	r3, [r3, #28]
 80079da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079de:	431a      	orrs	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a1b      	ldr	r3, [r3, #32]
 80079e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e8:	ea42 0103 	orr.w	r1, r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	430a      	orrs	r2, r1
 80079fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	0c1b      	lsrs	r3, r3, #16
 8007a02:	f003 0104 	and.w	r1, r3, #4
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0a:	f003 0210 	and.w	r2, r3, #16
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	430a      	orrs	r2, r1
 8007a14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	69da      	ldr	r2, [r3, #28]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b082      	sub	sp, #8
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d101      	bne.n	8007a50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e041      	b.n	8007ad4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d106      	bne.n	8007a6a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7fa f9c7 	bl	8001df8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2202      	movs	r2, #2
 8007a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	3304      	adds	r3, #4
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	4610      	mov	r0, r2
 8007a7e:	f000 fad9 	bl	8008034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e041      	b.n	8007b72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d106      	bne.n	8007b08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f839 	bl	8007b7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	3304      	adds	r3, #4
 8007b18:	4619      	mov	r1, r3
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	f000 fa8a 	bl	8008034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007b82:	bf00      	nop
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
	...

08007b90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d109      	bne.n	8007bb4 <HAL_TIM_PWM_Start+0x24>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	bf14      	ite	ne
 8007bac:	2301      	movne	r3, #1
 8007bae:	2300      	moveq	r3, #0
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	e022      	b.n	8007bfa <HAL_TIM_PWM_Start+0x6a>
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	2b04      	cmp	r3, #4
 8007bb8:	d109      	bne.n	8007bce <HAL_TIM_PWM_Start+0x3e>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	bf14      	ite	ne
 8007bc6:	2301      	movne	r3, #1
 8007bc8:	2300      	moveq	r3, #0
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	e015      	b.n	8007bfa <HAL_TIM_PWM_Start+0x6a>
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	2b08      	cmp	r3, #8
 8007bd2:	d109      	bne.n	8007be8 <HAL_TIM_PWM_Start+0x58>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	bf14      	ite	ne
 8007be0:	2301      	movne	r3, #1
 8007be2:	2300      	moveq	r3, #0
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	e008      	b.n	8007bfa <HAL_TIM_PWM_Start+0x6a>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	bf14      	ite	ne
 8007bf4:	2301      	movne	r3, #1
 8007bf6:	2300      	moveq	r3, #0
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e07c      	b.n	8007cfc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d104      	bne.n	8007c12 <HAL_TIM_PWM_Start+0x82>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c10:	e013      	b.n	8007c3a <HAL_TIM_PWM_Start+0xaa>
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2b04      	cmp	r3, #4
 8007c16:	d104      	bne.n	8007c22 <HAL_TIM_PWM_Start+0x92>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c20:	e00b      	b.n	8007c3a <HAL_TIM_PWM_Start+0xaa>
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2b08      	cmp	r3, #8
 8007c26:	d104      	bne.n	8007c32 <HAL_TIM_PWM_Start+0xa2>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c30:	e003      	b.n	8007c3a <HAL_TIM_PWM_Start+0xaa>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2202      	movs	r2, #2
 8007c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 fcec 	bl	8008620 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a2d      	ldr	r2, [pc, #180]	; (8007d04 <HAL_TIM_PWM_Start+0x174>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d004      	beq.n	8007c5c <HAL_TIM_PWM_Start+0xcc>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a2c      	ldr	r2, [pc, #176]	; (8007d08 <HAL_TIM_PWM_Start+0x178>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d101      	bne.n	8007c60 <HAL_TIM_PWM_Start+0xd0>
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e000      	b.n	8007c62 <HAL_TIM_PWM_Start+0xd2>
 8007c60:	2300      	movs	r3, #0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d007      	beq.n	8007c76 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a22      	ldr	r2, [pc, #136]	; (8007d04 <HAL_TIM_PWM_Start+0x174>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d022      	beq.n	8007cc6 <HAL_TIM_PWM_Start+0x136>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c88:	d01d      	beq.n	8007cc6 <HAL_TIM_PWM_Start+0x136>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a1f      	ldr	r2, [pc, #124]	; (8007d0c <HAL_TIM_PWM_Start+0x17c>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d018      	beq.n	8007cc6 <HAL_TIM_PWM_Start+0x136>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a1d      	ldr	r2, [pc, #116]	; (8007d10 <HAL_TIM_PWM_Start+0x180>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d013      	beq.n	8007cc6 <HAL_TIM_PWM_Start+0x136>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a1c      	ldr	r2, [pc, #112]	; (8007d14 <HAL_TIM_PWM_Start+0x184>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d00e      	beq.n	8007cc6 <HAL_TIM_PWM_Start+0x136>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a16      	ldr	r2, [pc, #88]	; (8007d08 <HAL_TIM_PWM_Start+0x178>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d009      	beq.n	8007cc6 <HAL_TIM_PWM_Start+0x136>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a18      	ldr	r2, [pc, #96]	; (8007d18 <HAL_TIM_PWM_Start+0x188>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d004      	beq.n	8007cc6 <HAL_TIM_PWM_Start+0x136>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a16      	ldr	r2, [pc, #88]	; (8007d1c <HAL_TIM_PWM_Start+0x18c>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d111      	bne.n	8007cea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	f003 0307 	and.w	r3, r3, #7
 8007cd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2b06      	cmp	r3, #6
 8007cd6:	d010      	beq.n	8007cfa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f042 0201 	orr.w	r2, r2, #1
 8007ce6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ce8:	e007      	b.n	8007cfa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f042 0201 	orr.w	r2, r2, #1
 8007cf8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	40010000 	.word	0x40010000
 8007d08:	40010400 	.word	0x40010400
 8007d0c:	40000400 	.word	0x40000400
 8007d10:	40000800 	.word	0x40000800
 8007d14:	40000c00 	.word	0x40000c00
 8007d18:	40014000 	.word	0x40014000
 8007d1c:	40001800 	.word	0x40001800

08007d20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d101      	bne.n	8007d3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d3a:	2302      	movs	r3, #2
 8007d3c:	e0ae      	b.n	8007e9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2201      	movs	r2, #1
 8007d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b0c      	cmp	r3, #12
 8007d4a:	f200 809f 	bhi.w	8007e8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007d4e:	a201      	add	r2, pc, #4	; (adr r2, 8007d54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d54:	08007d89 	.word	0x08007d89
 8007d58:	08007e8d 	.word	0x08007e8d
 8007d5c:	08007e8d 	.word	0x08007e8d
 8007d60:	08007e8d 	.word	0x08007e8d
 8007d64:	08007dc9 	.word	0x08007dc9
 8007d68:	08007e8d 	.word	0x08007e8d
 8007d6c:	08007e8d 	.word	0x08007e8d
 8007d70:	08007e8d 	.word	0x08007e8d
 8007d74:	08007e0b 	.word	0x08007e0b
 8007d78:	08007e8d 	.word	0x08007e8d
 8007d7c:	08007e8d 	.word	0x08007e8d
 8007d80:	08007e8d 	.word	0x08007e8d
 8007d84:	08007e4b 	.word	0x08007e4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68b9      	ldr	r1, [r7, #8]
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f000 f9fc 	bl	800818c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	699a      	ldr	r2, [r3, #24]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f042 0208 	orr.w	r2, r2, #8
 8007da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	699a      	ldr	r2, [r3, #24]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f022 0204 	bic.w	r2, r2, #4
 8007db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6999      	ldr	r1, [r3, #24]
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	691a      	ldr	r2, [r3, #16]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	430a      	orrs	r2, r1
 8007dc4:	619a      	str	r2, [r3, #24]
      break;
 8007dc6:	e064      	b.n	8007e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	68b9      	ldr	r1, [r7, #8]
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f000 fa4c 	bl	800826c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	699a      	ldr	r2, [r3, #24]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007de2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	699a      	ldr	r2, [r3, #24]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007df2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6999      	ldr	r1, [r3, #24]
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	021a      	lsls	r2, r3, #8
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	430a      	orrs	r2, r1
 8007e06:	619a      	str	r2, [r3, #24]
      break;
 8007e08:	e043      	b.n	8007e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68b9      	ldr	r1, [r7, #8]
 8007e10:	4618      	mov	r0, r3
 8007e12:	f000 faa1 	bl	8008358 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	69da      	ldr	r2, [r3, #28]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f042 0208 	orr.w	r2, r2, #8
 8007e24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	69da      	ldr	r2, [r3, #28]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f022 0204 	bic.w	r2, r2, #4
 8007e34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	69d9      	ldr	r1, [r3, #28]
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	691a      	ldr	r2, [r3, #16]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	430a      	orrs	r2, r1
 8007e46:	61da      	str	r2, [r3, #28]
      break;
 8007e48:	e023      	b.n	8007e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68b9      	ldr	r1, [r7, #8]
 8007e50:	4618      	mov	r0, r3
 8007e52:	f000 faf5 	bl	8008440 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	69da      	ldr	r2, [r3, #28]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	69da      	ldr	r2, [r3, #28]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	69d9      	ldr	r1, [r3, #28]
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	021a      	lsls	r2, r3, #8
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	61da      	str	r2, [r3, #28]
      break;
 8007e8a:	e002      	b.n	8007e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3718      	adds	r7, #24
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d101      	bne.n	8007ec0 <HAL_TIM_ConfigClockSource+0x1c>
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	e0b4      	b.n	800802a <HAL_TIM_ConfigClockSource+0x186>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007ede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ee6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ef8:	d03e      	beq.n	8007f78 <HAL_TIM_ConfigClockSource+0xd4>
 8007efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007efe:	f200 8087 	bhi.w	8008010 <HAL_TIM_ConfigClockSource+0x16c>
 8007f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f06:	f000 8086 	beq.w	8008016 <HAL_TIM_ConfigClockSource+0x172>
 8007f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f0e:	d87f      	bhi.n	8008010 <HAL_TIM_ConfigClockSource+0x16c>
 8007f10:	2b70      	cmp	r3, #112	; 0x70
 8007f12:	d01a      	beq.n	8007f4a <HAL_TIM_ConfigClockSource+0xa6>
 8007f14:	2b70      	cmp	r3, #112	; 0x70
 8007f16:	d87b      	bhi.n	8008010 <HAL_TIM_ConfigClockSource+0x16c>
 8007f18:	2b60      	cmp	r3, #96	; 0x60
 8007f1a:	d050      	beq.n	8007fbe <HAL_TIM_ConfigClockSource+0x11a>
 8007f1c:	2b60      	cmp	r3, #96	; 0x60
 8007f1e:	d877      	bhi.n	8008010 <HAL_TIM_ConfigClockSource+0x16c>
 8007f20:	2b50      	cmp	r3, #80	; 0x50
 8007f22:	d03c      	beq.n	8007f9e <HAL_TIM_ConfigClockSource+0xfa>
 8007f24:	2b50      	cmp	r3, #80	; 0x50
 8007f26:	d873      	bhi.n	8008010 <HAL_TIM_ConfigClockSource+0x16c>
 8007f28:	2b40      	cmp	r3, #64	; 0x40
 8007f2a:	d058      	beq.n	8007fde <HAL_TIM_ConfigClockSource+0x13a>
 8007f2c:	2b40      	cmp	r3, #64	; 0x40
 8007f2e:	d86f      	bhi.n	8008010 <HAL_TIM_ConfigClockSource+0x16c>
 8007f30:	2b30      	cmp	r3, #48	; 0x30
 8007f32:	d064      	beq.n	8007ffe <HAL_TIM_ConfigClockSource+0x15a>
 8007f34:	2b30      	cmp	r3, #48	; 0x30
 8007f36:	d86b      	bhi.n	8008010 <HAL_TIM_ConfigClockSource+0x16c>
 8007f38:	2b20      	cmp	r3, #32
 8007f3a:	d060      	beq.n	8007ffe <HAL_TIM_ConfigClockSource+0x15a>
 8007f3c:	2b20      	cmp	r3, #32
 8007f3e:	d867      	bhi.n	8008010 <HAL_TIM_ConfigClockSource+0x16c>
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d05c      	beq.n	8007ffe <HAL_TIM_ConfigClockSource+0x15a>
 8007f44:	2b10      	cmp	r3, #16
 8007f46:	d05a      	beq.n	8007ffe <HAL_TIM_ConfigClockSource+0x15a>
 8007f48:	e062      	b.n	8008010 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f5a:	f000 fb41 	bl	80085e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	609a      	str	r2, [r3, #8]
      break;
 8007f76:	e04f      	b.n	8008018 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f88:	f000 fb2a 	bl	80085e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	689a      	ldr	r2, [r3, #8]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f9a:	609a      	str	r2, [r3, #8]
      break;
 8007f9c:	e03c      	b.n	8008018 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007faa:	461a      	mov	r2, r3
 8007fac:	f000 fa9e 	bl	80084ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2150      	movs	r1, #80	; 0x50
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f000 faf7 	bl	80085aa <TIM_ITRx_SetConfig>
      break;
 8007fbc:	e02c      	b.n	8008018 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fca:	461a      	mov	r2, r3
 8007fcc:	f000 fabd 	bl	800854a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2160      	movs	r1, #96	; 0x60
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 fae7 	bl	80085aa <TIM_ITRx_SetConfig>
      break;
 8007fdc:	e01c      	b.n	8008018 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fea:	461a      	mov	r2, r3
 8007fec:	f000 fa7e 	bl	80084ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2140      	movs	r1, #64	; 0x40
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 fad7 	bl	80085aa <TIM_ITRx_SetConfig>
      break;
 8007ffc:	e00c      	b.n	8008018 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4619      	mov	r1, r3
 8008008:	4610      	mov	r0, r2
 800800a:	f000 face 	bl	80085aa <TIM_ITRx_SetConfig>
      break;
 800800e:	e003      	b.n	8008018 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	73fb      	strb	r3, [r7, #15]
      break;
 8008014:	e000      	b.n	8008018 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008016:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008028:	7bfb      	ldrb	r3, [r7, #15]
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
	...

08008034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a46      	ldr	r2, [pc, #280]	; (8008160 <TIM_Base_SetConfig+0x12c>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d013      	beq.n	8008074 <TIM_Base_SetConfig+0x40>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008052:	d00f      	beq.n	8008074 <TIM_Base_SetConfig+0x40>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a43      	ldr	r2, [pc, #268]	; (8008164 <TIM_Base_SetConfig+0x130>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d00b      	beq.n	8008074 <TIM_Base_SetConfig+0x40>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a42      	ldr	r2, [pc, #264]	; (8008168 <TIM_Base_SetConfig+0x134>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d007      	beq.n	8008074 <TIM_Base_SetConfig+0x40>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a41      	ldr	r2, [pc, #260]	; (800816c <TIM_Base_SetConfig+0x138>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d003      	beq.n	8008074 <TIM_Base_SetConfig+0x40>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a40      	ldr	r2, [pc, #256]	; (8008170 <TIM_Base_SetConfig+0x13c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d108      	bne.n	8008086 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800807a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	4313      	orrs	r3, r2
 8008084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4a35      	ldr	r2, [pc, #212]	; (8008160 <TIM_Base_SetConfig+0x12c>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d02b      	beq.n	80080e6 <TIM_Base_SetConfig+0xb2>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008094:	d027      	beq.n	80080e6 <TIM_Base_SetConfig+0xb2>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a32      	ldr	r2, [pc, #200]	; (8008164 <TIM_Base_SetConfig+0x130>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d023      	beq.n	80080e6 <TIM_Base_SetConfig+0xb2>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a31      	ldr	r2, [pc, #196]	; (8008168 <TIM_Base_SetConfig+0x134>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d01f      	beq.n	80080e6 <TIM_Base_SetConfig+0xb2>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a30      	ldr	r2, [pc, #192]	; (800816c <TIM_Base_SetConfig+0x138>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d01b      	beq.n	80080e6 <TIM_Base_SetConfig+0xb2>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a2f      	ldr	r2, [pc, #188]	; (8008170 <TIM_Base_SetConfig+0x13c>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d017      	beq.n	80080e6 <TIM_Base_SetConfig+0xb2>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a2e      	ldr	r2, [pc, #184]	; (8008174 <TIM_Base_SetConfig+0x140>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d013      	beq.n	80080e6 <TIM_Base_SetConfig+0xb2>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a2d      	ldr	r2, [pc, #180]	; (8008178 <TIM_Base_SetConfig+0x144>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d00f      	beq.n	80080e6 <TIM_Base_SetConfig+0xb2>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a2c      	ldr	r2, [pc, #176]	; (800817c <TIM_Base_SetConfig+0x148>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d00b      	beq.n	80080e6 <TIM_Base_SetConfig+0xb2>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a2b      	ldr	r2, [pc, #172]	; (8008180 <TIM_Base_SetConfig+0x14c>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d007      	beq.n	80080e6 <TIM_Base_SetConfig+0xb2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a2a      	ldr	r2, [pc, #168]	; (8008184 <TIM_Base_SetConfig+0x150>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d003      	beq.n	80080e6 <TIM_Base_SetConfig+0xb2>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a29      	ldr	r2, [pc, #164]	; (8008188 <TIM_Base_SetConfig+0x154>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d108      	bne.n	80080f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	4313      	orrs	r3, r2
 8008104:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	689a      	ldr	r2, [r3, #8]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a10      	ldr	r2, [pc, #64]	; (8008160 <TIM_Base_SetConfig+0x12c>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d003      	beq.n	800812c <TIM_Base_SetConfig+0xf8>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a12      	ldr	r2, [pc, #72]	; (8008170 <TIM_Base_SetConfig+0x13c>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d103      	bne.n	8008134 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	691a      	ldr	r2, [r3, #16]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	2b01      	cmp	r3, #1
 8008144:	d105      	bne.n	8008152 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	f023 0201 	bic.w	r2, r3, #1
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	611a      	str	r2, [r3, #16]
  }
}
 8008152:	bf00      	nop
 8008154:	3714      	adds	r7, #20
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	40010000 	.word	0x40010000
 8008164:	40000400 	.word	0x40000400
 8008168:	40000800 	.word	0x40000800
 800816c:	40000c00 	.word	0x40000c00
 8008170:	40010400 	.word	0x40010400
 8008174:	40014000 	.word	0x40014000
 8008178:	40014400 	.word	0x40014400
 800817c:	40014800 	.word	0x40014800
 8008180:	40001800 	.word	0x40001800
 8008184:	40001c00 	.word	0x40001c00
 8008188:	40002000 	.word	0x40002000

0800818c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800818c:	b480      	push	{r7}
 800818e:	b087      	sub	sp, #28
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a1b      	ldr	r3, [r3, #32]
 80081a0:	f023 0201 	bic.w	r2, r3, #1
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	699b      	ldr	r3, [r3, #24]
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f023 0303 	bic.w	r3, r3, #3
 80081c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	f023 0302 	bic.w	r3, r3, #2
 80081d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	4313      	orrs	r3, r2
 80081de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a20      	ldr	r2, [pc, #128]	; (8008264 <TIM_OC1_SetConfig+0xd8>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d003      	beq.n	80081f0 <TIM_OC1_SetConfig+0x64>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a1f      	ldr	r2, [pc, #124]	; (8008268 <TIM_OC1_SetConfig+0xdc>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d10c      	bne.n	800820a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	f023 0308 	bic.w	r3, r3, #8
 80081f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	697a      	ldr	r2, [r7, #20]
 80081fe:	4313      	orrs	r3, r2
 8008200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	f023 0304 	bic.w	r3, r3, #4
 8008208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a15      	ldr	r2, [pc, #84]	; (8008264 <TIM_OC1_SetConfig+0xd8>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d003      	beq.n	800821a <TIM_OC1_SetConfig+0x8e>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a14      	ldr	r2, [pc, #80]	; (8008268 <TIM_OC1_SetConfig+0xdc>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d111      	bne.n	800823e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	4313      	orrs	r3, r2
 8008232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	4313      	orrs	r3, r2
 800823c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	693a      	ldr	r2, [r7, #16]
 8008242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	685a      	ldr	r2, [r3, #4]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	697a      	ldr	r2, [r7, #20]
 8008256:	621a      	str	r2, [r3, #32]
}
 8008258:	bf00      	nop
 800825a:	371c      	adds	r7, #28
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr
 8008264:	40010000 	.word	0x40010000
 8008268:	40010400 	.word	0x40010400

0800826c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800826c:	b480      	push	{r7}
 800826e:	b087      	sub	sp, #28
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a1b      	ldr	r3, [r3, #32]
 8008280:	f023 0210 	bic.w	r2, r3, #16
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800829a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	021b      	lsls	r3, r3, #8
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	f023 0320 	bic.w	r3, r3, #32
 80082b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	011b      	lsls	r3, r3, #4
 80082be:	697a      	ldr	r2, [r7, #20]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a22      	ldr	r2, [pc, #136]	; (8008350 <TIM_OC2_SetConfig+0xe4>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d003      	beq.n	80082d4 <TIM_OC2_SetConfig+0x68>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a21      	ldr	r2, [pc, #132]	; (8008354 <TIM_OC2_SetConfig+0xe8>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d10d      	bne.n	80082f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	011b      	lsls	r3, r3, #4
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a17      	ldr	r2, [pc, #92]	; (8008350 <TIM_OC2_SetConfig+0xe4>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d003      	beq.n	8008300 <TIM_OC2_SetConfig+0x94>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a16      	ldr	r2, [pc, #88]	; (8008354 <TIM_OC2_SetConfig+0xe8>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d113      	bne.n	8008328 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008306:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800830e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	693a      	ldr	r2, [r7, #16]
 8008318:	4313      	orrs	r3, r2
 800831a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	693a      	ldr	r2, [r7, #16]
 8008324:	4313      	orrs	r3, r2
 8008326:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	685a      	ldr	r2, [r3, #4]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	621a      	str	r2, [r3, #32]
}
 8008342:	bf00      	nop
 8008344:	371c      	adds	r7, #28
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	40010000 	.word	0x40010000
 8008354:	40010400 	.word	0x40010400

08008358 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008358:	b480      	push	{r7}
 800835a:	b087      	sub	sp, #28
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a1b      	ldr	r3, [r3, #32]
 800836c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	69db      	ldr	r3, [r3, #28]
 800837e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f023 0303 	bic.w	r3, r3, #3
 800838e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	4313      	orrs	r3, r2
 8008398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80083a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	021b      	lsls	r3, r3, #8
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	4313      	orrs	r3, r2
 80083ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a21      	ldr	r2, [pc, #132]	; (8008438 <TIM_OC3_SetConfig+0xe0>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d003      	beq.n	80083be <TIM_OC3_SetConfig+0x66>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a20      	ldr	r2, [pc, #128]	; (800843c <TIM_OC3_SetConfig+0xe4>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d10d      	bne.n	80083da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	021b      	lsls	r3, r3, #8
 80083cc:	697a      	ldr	r2, [r7, #20]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a16      	ldr	r2, [pc, #88]	; (8008438 <TIM_OC3_SetConfig+0xe0>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d003      	beq.n	80083ea <TIM_OC3_SetConfig+0x92>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a15      	ldr	r2, [pc, #84]	; (800843c <TIM_OC3_SetConfig+0xe4>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d113      	bne.n	8008412 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	011b      	lsls	r3, r3, #4
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	4313      	orrs	r3, r2
 8008404:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	699b      	ldr	r3, [r3, #24]
 800840a:	011b      	lsls	r3, r3, #4
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	4313      	orrs	r3, r2
 8008410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	685a      	ldr	r2, [r3, #4]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	697a      	ldr	r2, [r7, #20]
 800842a:	621a      	str	r2, [r3, #32]
}
 800842c:	bf00      	nop
 800842e:	371c      	adds	r7, #28
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr
 8008438:	40010000 	.word	0x40010000
 800843c:	40010400 	.word	0x40010400

08008440 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008440:	b480      	push	{r7}
 8008442:	b087      	sub	sp, #28
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a1b      	ldr	r3, [r3, #32]
 800844e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a1b      	ldr	r3, [r3, #32]
 8008454:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	69db      	ldr	r3, [r3, #28]
 8008466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800846e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	021b      	lsls	r3, r3, #8
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	4313      	orrs	r3, r2
 8008482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800848a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	031b      	lsls	r3, r3, #12
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	4313      	orrs	r3, r2
 8008496:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a12      	ldr	r2, [pc, #72]	; (80084e4 <TIM_OC4_SetConfig+0xa4>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d003      	beq.n	80084a8 <TIM_OC4_SetConfig+0x68>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a11      	ldr	r2, [pc, #68]	; (80084e8 <TIM_OC4_SetConfig+0xa8>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d109      	bne.n	80084bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	019b      	lsls	r3, r3, #6
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	697a      	ldr	r2, [r7, #20]
 80084c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	685a      	ldr	r2, [r3, #4]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	693a      	ldr	r2, [r7, #16]
 80084d4:	621a      	str	r2, [r3, #32]
}
 80084d6:	bf00      	nop
 80084d8:	371c      	adds	r7, #28
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	40010000 	.word	0x40010000
 80084e8:	40010400 	.word	0x40010400

080084ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b087      	sub	sp, #28
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	f023 0201 	bic.w	r2, r3, #1
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	011b      	lsls	r3, r3, #4
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	4313      	orrs	r3, r2
 8008520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f023 030a 	bic.w	r3, r3, #10
 8008528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800852a:	697a      	ldr	r2, [r7, #20]
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	4313      	orrs	r3, r2
 8008530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	621a      	str	r2, [r3, #32]
}
 800853e:	bf00      	nop
 8008540:	371c      	adds	r7, #28
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800854a:	b480      	push	{r7}
 800854c:	b087      	sub	sp, #28
 800854e:	af00      	add	r7, sp, #0
 8008550:	60f8      	str	r0, [r7, #12]
 8008552:	60b9      	str	r1, [r7, #8]
 8008554:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6a1b      	ldr	r3, [r3, #32]
 8008560:	f023 0210 	bic.w	r2, r3, #16
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008574:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	031b      	lsls	r3, r3, #12
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	4313      	orrs	r3, r2
 800857e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008586:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	011b      	lsls	r3, r3, #4
 800858c:	697a      	ldr	r2, [r7, #20]
 800858e:	4313      	orrs	r3, r2
 8008590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	697a      	ldr	r2, [r7, #20]
 800859c:	621a      	str	r2, [r3, #32]
}
 800859e:	bf00      	nop
 80085a0:	371c      	adds	r7, #28
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr

080085aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085aa:	b480      	push	{r7}
 80085ac:	b085      	sub	sp, #20
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
 80085b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	f043 0307 	orr.w	r3, r3, #7
 80085cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	609a      	str	r2, [r3, #8]
}
 80085d4:	bf00      	nop
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b087      	sub	sp, #28
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
 80085ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	021a      	lsls	r2, r3, #8
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	431a      	orrs	r2, r3
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	4313      	orrs	r3, r2
 8008608:	697a      	ldr	r2, [r7, #20]
 800860a:	4313      	orrs	r3, r2
 800860c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	697a      	ldr	r2, [r7, #20]
 8008612:	609a      	str	r2, [r3, #8]
}
 8008614:	bf00      	nop
 8008616:	371c      	adds	r7, #28
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008620:	b480      	push	{r7}
 8008622:	b087      	sub	sp, #28
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	f003 031f 	and.w	r3, r3, #31
 8008632:	2201      	movs	r2, #1
 8008634:	fa02 f303 	lsl.w	r3, r2, r3
 8008638:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6a1a      	ldr	r2, [r3, #32]
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	43db      	mvns	r3, r3
 8008642:	401a      	ands	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6a1a      	ldr	r2, [r3, #32]
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	f003 031f 	and.w	r3, r3, #31
 8008652:	6879      	ldr	r1, [r7, #4]
 8008654:	fa01 f303 	lsl.w	r3, r1, r3
 8008658:	431a      	orrs	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	621a      	str	r2, [r3, #32]
}
 800865e:	bf00      	nop
 8008660:	371c      	adds	r7, #28
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
	...

0800866c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800867c:	2b01      	cmp	r3, #1
 800867e:	d101      	bne.n	8008684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008680:	2302      	movs	r3, #2
 8008682:	e05a      	b.n	800873a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2202      	movs	r2, #2
 8008690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a21      	ldr	r2, [pc, #132]	; (8008748 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d022      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086d0:	d01d      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a1d      	ldr	r2, [pc, #116]	; (800874c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d018      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a1b      	ldr	r2, [pc, #108]	; (8008750 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d013      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a1a      	ldr	r2, [pc, #104]	; (8008754 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d00e      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a18      	ldr	r2, [pc, #96]	; (8008758 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d009      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a17      	ldr	r2, [pc, #92]	; (800875c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d004      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a15      	ldr	r2, [pc, #84]	; (8008760 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d10c      	bne.n	8008728 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008714:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	4313      	orrs	r3, r2
 800871e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3714      	adds	r7, #20
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	40010000 	.word	0x40010000
 800874c:	40000400 	.word	0x40000400
 8008750:	40000800 	.word	0x40000800
 8008754:	40000c00 	.word	0x40000c00
 8008758:	40010400 	.word	0x40010400
 800875c:	40014000 	.word	0x40014000
 8008760:	40001800 	.word	0x40001800

08008764 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800876e:	2300      	movs	r3, #0
 8008770:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008778:	2b01      	cmp	r3, #1
 800877a:	d101      	bne.n	8008780 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800877c:	2302      	movs	r3, #2
 800877e:	e03d      	b.n	80087fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	4313      	orrs	r3, r2
 8008794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4313      	orrs	r3, r2
 80087be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	695b      	ldr	r3, [r3, #20]
 80087d8:	4313      	orrs	r3, r2
 80087da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	69db      	ldr	r3, [r3, #28]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3714      	adds	r7, #20
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d101      	bne.n	800881a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e042      	b.n	80088a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b00      	cmp	r3, #0
 8008824:	d106      	bne.n	8008834 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f7f9 fb3e 	bl	8001eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2224      	movs	r2, #36	; 0x24
 8008838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	68da      	ldr	r2, [r3, #12]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800884a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 ff4f 	bl	80096f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	691a      	ldr	r2, [r3, #16]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008860:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	695a      	ldr	r2, [r3, #20]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008870:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68da      	ldr	r2, [r3, #12]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008880:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2220      	movs	r2, #32
 800888c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2220      	movs	r2, #32
 8008894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b08a      	sub	sp, #40	; 0x28
 80088ac:	af02      	add	r7, sp, #8
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	603b      	str	r3, [r7, #0]
 80088b4:	4613      	mov	r3, r2
 80088b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80088b8:	2300      	movs	r3, #0
 80088ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	2b20      	cmp	r3, #32
 80088c6:	d175      	bne.n	80089b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d002      	beq.n	80088d4 <HAL_UART_Transmit+0x2c>
 80088ce:	88fb      	ldrh	r3, [r7, #6]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d101      	bne.n	80088d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	e06e      	b.n	80089b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2221      	movs	r2, #33	; 0x21
 80088e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80088e6:	f7f9 fd6f 	bl	80023c8 <HAL_GetTick>
 80088ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	88fa      	ldrh	r2, [r7, #6]
 80088f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	88fa      	ldrh	r2, [r7, #6]
 80088f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008900:	d108      	bne.n	8008914 <HAL_UART_Transmit+0x6c>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d104      	bne.n	8008914 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800890a:	2300      	movs	r3, #0
 800890c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	61bb      	str	r3, [r7, #24]
 8008912:	e003      	b.n	800891c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008918:	2300      	movs	r3, #0
 800891a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800891c:	e02e      	b.n	800897c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	9300      	str	r3, [sp, #0]
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	2200      	movs	r2, #0
 8008926:	2180      	movs	r1, #128	; 0x80
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f000 fc27 	bl	800917c <UART_WaitOnFlagUntilTimeout>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d005      	beq.n	8008940 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2220      	movs	r2, #32
 8008938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800893c:	2303      	movs	r3, #3
 800893e:	e03a      	b.n	80089b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10b      	bne.n	800895e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	881b      	ldrh	r3, [r3, #0]
 800894a:	461a      	mov	r2, r3
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008954:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	3302      	adds	r3, #2
 800895a:	61bb      	str	r3, [r7, #24]
 800895c:	e007      	b.n	800896e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	781a      	ldrb	r2, [r3, #0]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	3301      	adds	r3, #1
 800896c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008972:	b29b      	uxth	r3, r3
 8008974:	3b01      	subs	r3, #1
 8008976:	b29a      	uxth	r2, r3
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008980:	b29b      	uxth	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1cb      	bne.n	800891e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	9300      	str	r3, [sp, #0]
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	2200      	movs	r2, #0
 800898e:	2140      	movs	r1, #64	; 0x40
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	f000 fbf3 	bl	800917c <UART_WaitOnFlagUntilTimeout>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d005      	beq.n	80089a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2220      	movs	r2, #32
 80089a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80089a4:	2303      	movs	r3, #3
 80089a6:	e006      	b.n	80089b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2220      	movs	r2, #32
 80089ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80089b0:	2300      	movs	r3, #0
 80089b2:	e000      	b.n	80089b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80089b4:	2302      	movs	r3, #2
  }
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3720      	adds	r7, #32
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b084      	sub	sp, #16
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	60f8      	str	r0, [r7, #12]
 80089c6:	60b9      	str	r1, [r7, #8]
 80089c8:	4613      	mov	r3, r2
 80089ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	2b20      	cmp	r3, #32
 80089d6:	d112      	bne.n	80089fe <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d002      	beq.n	80089e4 <HAL_UART_Receive_DMA+0x26>
 80089de:	88fb      	ldrh	r3, [r7, #6]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d101      	bne.n	80089e8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	e00b      	b.n	8008a00 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80089ee:	88fb      	ldrh	r3, [r7, #6]
 80089f0:	461a      	mov	r2, r3
 80089f2:	68b9      	ldr	r1, [r7, #8]
 80089f4:	68f8      	ldr	r0, [r7, #12]
 80089f6:	f000 fc1b 	bl	8009230 <UART_Start_Receive_DMA>
 80089fa:	4603      	mov	r3, r0
 80089fc:	e000      	b.n	8008a00 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80089fe:	2302      	movs	r3, #2
  }
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b0ba      	sub	sp, #232	; 0xe8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008a34:	2300      	movs	r3, #0
 8008a36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a3e:	f003 030f 	and.w	r3, r3, #15
 8008a42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008a46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10f      	bne.n	8008a6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a52:	f003 0320 	and.w	r3, r3, #32
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d009      	beq.n	8008a6e <HAL_UART_IRQHandler+0x66>
 8008a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a5e:	f003 0320 	and.w	r3, r3, #32
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d003      	beq.n	8008a6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fd83 	bl	8009572 <UART_Receive_IT>
      return;
 8008a6c:	e25b      	b.n	8008f26 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008a6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f000 80de 	beq.w	8008c34 <HAL_UART_IRQHandler+0x22c>
 8008a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a7c:	f003 0301 	and.w	r3, r3, #1
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d106      	bne.n	8008a92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a88:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f000 80d1 	beq.w	8008c34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00b      	beq.n	8008ab6 <HAL_UART_IRQHandler+0xae>
 8008a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d005      	beq.n	8008ab6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aae:	f043 0201 	orr.w	r2, r3, #1
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aba:	f003 0304 	and.w	r3, r3, #4
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00b      	beq.n	8008ada <HAL_UART_IRQHandler+0xd2>
 8008ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ac6:	f003 0301 	and.w	r3, r3, #1
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d005      	beq.n	8008ada <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ad2:	f043 0202 	orr.w	r2, r3, #2
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ade:	f003 0302 	and.w	r3, r3, #2
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00b      	beq.n	8008afe <HAL_UART_IRQHandler+0xf6>
 8008ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d005      	beq.n	8008afe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008af6:	f043 0204 	orr.w	r2, r3, #4
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b02:	f003 0308 	and.w	r3, r3, #8
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d011      	beq.n	8008b2e <HAL_UART_IRQHandler+0x126>
 8008b0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b0e:	f003 0320 	and.w	r3, r3, #32
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d105      	bne.n	8008b22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b1a:	f003 0301 	and.w	r3, r3, #1
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d005      	beq.n	8008b2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b26:	f043 0208 	orr.w	r2, r3, #8
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f000 81f2 	beq.w	8008f1c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b3c:	f003 0320 	and.w	r3, r3, #32
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d008      	beq.n	8008b56 <HAL_UART_IRQHandler+0x14e>
 8008b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b48:	f003 0320 	and.w	r3, r3, #32
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d002      	beq.n	8008b56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fd0e 	bl	8009572 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	695b      	ldr	r3, [r3, #20]
 8008b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b60:	2b40      	cmp	r3, #64	; 0x40
 8008b62:	bf0c      	ite	eq
 8008b64:	2301      	moveq	r3, #1
 8008b66:	2300      	movne	r3, #0
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b72:	f003 0308 	and.w	r3, r3, #8
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d103      	bne.n	8008b82 <HAL_UART_IRQHandler+0x17a>
 8008b7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d04f      	beq.n	8008c22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fc16 	bl	80093b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	695b      	ldr	r3, [r3, #20]
 8008b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b92:	2b40      	cmp	r3, #64	; 0x40
 8008b94:	d141      	bne.n	8008c1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	3314      	adds	r3, #20
 8008b9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ba4:	e853 3f00 	ldrex	r3, [r3]
 8008ba8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008bac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	3314      	adds	r3, #20
 8008bbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008bc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008bc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008bce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008bd2:	e841 2300 	strex	r3, r2, [r1]
 8008bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008bda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1d9      	bne.n	8008b96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d013      	beq.n	8008c12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bee:	4a7e      	ldr	r2, [pc, #504]	; (8008de8 <HAL_UART_IRQHandler+0x3e0>)
 8008bf0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7f9 fe9e 	bl	8002938 <HAL_DMA_Abort_IT>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d016      	beq.n	8008c30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c10:	e00e      	b.n	8008c30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 f99e 	bl	8008f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c18:	e00a      	b.n	8008c30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 f99a 	bl	8008f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c20:	e006      	b.n	8008c30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 f996 	bl	8008f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008c2e:	e175      	b.n	8008f1c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c30:	bf00      	nop
    return;
 8008c32:	e173      	b.n	8008f1c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	f040 814f 	bne.w	8008edc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c42:	f003 0310 	and.w	r3, r3, #16
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f000 8148 	beq.w	8008edc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c50:	f003 0310 	and.w	r3, r3, #16
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f000 8141 	beq.w	8008edc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	60bb      	str	r3, [r7, #8]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	60bb      	str	r3, [r7, #8]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	60bb      	str	r3, [r7, #8]
 8008c6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	695b      	ldr	r3, [r3, #20]
 8008c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c7a:	2b40      	cmp	r3, #64	; 0x40
 8008c7c:	f040 80b6 	bne.w	8008dec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f000 8145 	beq.w	8008f20 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	f080 813e 	bcs.w	8008f20 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008caa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cb6:	f000 8088 	beq.w	8008dca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	330c      	adds	r3, #12
 8008cc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008cc8:	e853 3f00 	ldrex	r3, [r3]
 8008ccc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008cd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	330c      	adds	r3, #12
 8008ce2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008ce6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008cea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008cf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008cf6:	e841 2300 	strex	r3, r2, [r1]
 8008cfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008cfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d1d9      	bne.n	8008cba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	3314      	adds	r3, #20
 8008d0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d10:	e853 3f00 	ldrex	r3, [r3]
 8008d14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008d16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d18:	f023 0301 	bic.w	r3, r3, #1
 8008d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3314      	adds	r3, #20
 8008d26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008d2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008d32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d36:	e841 2300 	strex	r3, r2, [r1]
 8008d3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008d3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1e1      	bne.n	8008d06 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3314      	adds	r3, #20
 8008d48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d4c:	e853 3f00 	ldrex	r3, [r3]
 8008d50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	3314      	adds	r3, #20
 8008d62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008d66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008d68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d6e:	e841 2300 	strex	r3, r2, [r1]
 8008d72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1e3      	bne.n	8008d42 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2220      	movs	r2, #32
 8008d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	330c      	adds	r3, #12
 8008d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d92:	e853 3f00 	ldrex	r3, [r3]
 8008d96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d9a:	f023 0310 	bic.w	r3, r3, #16
 8008d9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	330c      	adds	r3, #12
 8008da8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008dac:	65ba      	str	r2, [r7, #88]	; 0x58
 8008dae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008db2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008db4:	e841 2300 	strex	r3, r2, [r1]
 8008db8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1e3      	bne.n	8008d88 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7f9 fd47 	bl	8002858 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2202      	movs	r2, #2
 8008dce:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	4619      	mov	r1, r3
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f8c1 	bl	8008f68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008de6:	e09b      	b.n	8008f20 <HAL_UART_IRQHandler+0x518>
 8008de8:	0800947b 	.word	0x0800947b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f000 808e 	beq.w	8008f24 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008e08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f000 8089 	beq.w	8008f24 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	330c      	adds	r3, #12
 8008e18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1c:	e853 3f00 	ldrex	r3, [r3]
 8008e20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	330c      	adds	r3, #12
 8008e32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008e36:	647a      	str	r2, [r7, #68]	; 0x44
 8008e38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e3e:	e841 2300 	strex	r3, r2, [r1]
 8008e42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1e3      	bne.n	8008e12 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	3314      	adds	r3, #20
 8008e50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e54:	e853 3f00 	ldrex	r3, [r3]
 8008e58:	623b      	str	r3, [r7, #32]
   return(result);
 8008e5a:	6a3b      	ldr	r3, [r7, #32]
 8008e5c:	f023 0301 	bic.w	r3, r3, #1
 8008e60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	3314      	adds	r3, #20
 8008e6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008e6e:	633a      	str	r2, [r7, #48]	; 0x30
 8008e70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e76:	e841 2300 	strex	r3, r2, [r1]
 8008e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1e3      	bne.n	8008e4a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2220      	movs	r2, #32
 8008e86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	330c      	adds	r3, #12
 8008e96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	e853 3f00 	ldrex	r3, [r3]
 8008e9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f023 0310 	bic.w	r3, r3, #16
 8008ea6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	330c      	adds	r3, #12
 8008eb0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008eb4:	61fa      	str	r2, [r7, #28]
 8008eb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb8:	69b9      	ldr	r1, [r7, #24]
 8008eba:	69fa      	ldr	r2, [r7, #28]
 8008ebc:	e841 2300 	strex	r3, r2, [r1]
 8008ec0:	617b      	str	r3, [r7, #20]
   return(result);
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1e3      	bne.n	8008e90 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2202      	movs	r2, #2
 8008ecc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ece:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 f847 	bl	8008f68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008eda:	e023      	b.n	8008f24 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d009      	beq.n	8008efc <HAL_UART_IRQHandler+0x4f4>
 8008ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d003      	beq.n	8008efc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fad4 	bl	80094a2 <UART_Transmit_IT>
    return;
 8008efa:	e014      	b.n	8008f26 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00e      	beq.n	8008f26 <HAL_UART_IRQHandler+0x51e>
 8008f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d008      	beq.n	8008f26 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fb14 	bl	8009542 <UART_EndTransmit_IT>
    return;
 8008f1a:	e004      	b.n	8008f26 <HAL_UART_IRQHandler+0x51e>
    return;
 8008f1c:	bf00      	nop
 8008f1e:	e002      	b.n	8008f26 <HAL_UART_IRQHandler+0x51e>
      return;
 8008f20:	bf00      	nop
 8008f22:	e000      	b.n	8008f26 <HAL_UART_IRQHandler+0x51e>
      return;
 8008f24:	bf00      	nop
  }
}
 8008f26:	37e8      	adds	r7, #232	; 0xe8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008f34:	bf00      	nop
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008f48:	bf00      	nop
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008f5c:	bf00      	nop
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	460b      	mov	r3, r1
 8008f72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f74:	bf00      	nop
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b09c      	sub	sp, #112	; 0x70
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d172      	bne.n	8009082 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	330c      	adds	r3, #12
 8008fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fac:	e853 3f00 	ldrex	r3, [r3]
 8008fb0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8008fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	330c      	adds	r3, #12
 8008fc0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008fc2:	65ba      	str	r2, [r7, #88]	; 0x58
 8008fc4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008fc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008fca:	e841 2300 	strex	r3, r2, [r1]
 8008fce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008fd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1e5      	bne.n	8008fa2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	3314      	adds	r3, #20
 8008fdc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe0:	e853 3f00 	ldrex	r3, [r3]
 8008fe4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fe8:	f023 0301 	bic.w	r3, r3, #1
 8008fec:	667b      	str	r3, [r7, #100]	; 0x64
 8008fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	3314      	adds	r3, #20
 8008ff4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008ff6:	647a      	str	r2, [r7, #68]	; 0x44
 8008ff8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ffc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ffe:	e841 2300 	strex	r3, r2, [r1]
 8009002:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1e5      	bne.n	8008fd6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800900a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	3314      	adds	r3, #20
 8009010:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	e853 3f00 	ldrex	r3, [r3]
 8009018:	623b      	str	r3, [r7, #32]
   return(result);
 800901a:	6a3b      	ldr	r3, [r7, #32]
 800901c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009020:	663b      	str	r3, [r7, #96]	; 0x60
 8009022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	3314      	adds	r3, #20
 8009028:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800902a:	633a      	str	r2, [r7, #48]	; 0x30
 800902c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009032:	e841 2300 	strex	r3, r2, [r1]
 8009036:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903a:	2b00      	cmp	r3, #0
 800903c:	d1e5      	bne.n	800900a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800903e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009040:	2220      	movs	r2, #32
 8009042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800904a:	2b01      	cmp	r3, #1
 800904c:	d119      	bne.n	8009082 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800904e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	330c      	adds	r3, #12
 8009054:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	e853 3f00 	ldrex	r3, [r3]
 800905c:	60fb      	str	r3, [r7, #12]
   return(result);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f023 0310 	bic.w	r3, r3, #16
 8009064:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	330c      	adds	r3, #12
 800906c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800906e:	61fa      	str	r2, [r7, #28]
 8009070:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009072:	69b9      	ldr	r1, [r7, #24]
 8009074:	69fa      	ldr	r2, [r7, #28]
 8009076:	e841 2300 	strex	r3, r2, [r1]
 800907a:	617b      	str	r3, [r7, #20]
   return(result);
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1e5      	bne.n	800904e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009084:	2200      	movs	r2, #0
 8009086:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800908a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908c:	2b01      	cmp	r3, #1
 800908e:	d106      	bne.n	800909e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009092:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009094:	4619      	mov	r1, r3
 8009096:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009098:	f7ff ff66 	bl	8008f68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800909c:	e002      	b.n	80090a4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800909e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80090a0:	f7f7 ffa6 	bl	8000ff0 <HAL_UART_RxCpltCallback>
}
 80090a4:	bf00      	nop
 80090a6:	3770      	adds	r7, #112	; 0x70
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2201      	movs	r2, #1
 80090be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d108      	bne.n	80090da <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80090cc:	085b      	lsrs	r3, r3, #1
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	4619      	mov	r1, r3
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f7ff ff48 	bl	8008f68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090d8:	e002      	b.n	80090e0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f7ff ff30 	bl	8008f40 <HAL_UART_RxHalfCpltCallback>
}
 80090e0:	bf00      	nop
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80090f0:	2300      	movs	r3, #0
 80090f2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	695b      	ldr	r3, [r3, #20]
 8009100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009104:	2b80      	cmp	r3, #128	; 0x80
 8009106:	bf0c      	ite	eq
 8009108:	2301      	moveq	r3, #1
 800910a:	2300      	movne	r3, #0
 800910c:	b2db      	uxtb	r3, r3
 800910e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009116:	b2db      	uxtb	r3, r3
 8009118:	2b21      	cmp	r3, #33	; 0x21
 800911a:	d108      	bne.n	800912e <UART_DMAError+0x46>
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d005      	beq.n	800912e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	2200      	movs	r2, #0
 8009126:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009128:	68b8      	ldr	r0, [r7, #8]
 800912a:	f000 f91b 	bl	8009364 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	695b      	ldr	r3, [r3, #20]
 8009134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009138:	2b40      	cmp	r3, #64	; 0x40
 800913a:	bf0c      	ite	eq
 800913c:	2301      	moveq	r3, #1
 800913e:	2300      	movne	r3, #0
 8009140:	b2db      	uxtb	r3, r3
 8009142:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800914a:	b2db      	uxtb	r3, r3
 800914c:	2b22      	cmp	r3, #34	; 0x22
 800914e:	d108      	bne.n	8009162 <UART_DMAError+0x7a>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d005      	beq.n	8009162 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	2200      	movs	r2, #0
 800915a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800915c:	68b8      	ldr	r0, [r7, #8]
 800915e:	f000 f929 	bl	80093b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009166:	f043 0210 	orr.w	r2, r3, #16
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800916e:	68b8      	ldr	r0, [r7, #8]
 8009170:	f7ff fef0 	bl	8008f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009174:	bf00      	nop
 8009176:	3710      	adds	r7, #16
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b086      	sub	sp, #24
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	603b      	str	r3, [r7, #0]
 8009188:	4613      	mov	r3, r2
 800918a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800918c:	e03b      	b.n	8009206 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800918e:	6a3b      	ldr	r3, [r7, #32]
 8009190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009194:	d037      	beq.n	8009206 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009196:	f7f9 f917 	bl	80023c8 <HAL_GetTick>
 800919a:	4602      	mov	r2, r0
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	1ad3      	subs	r3, r2, r3
 80091a0:	6a3a      	ldr	r2, [r7, #32]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d302      	bcc.n	80091ac <UART_WaitOnFlagUntilTimeout+0x30>
 80091a6:	6a3b      	ldr	r3, [r7, #32]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d101      	bne.n	80091b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80091ac:	2303      	movs	r3, #3
 80091ae:	e03a      	b.n	8009226 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	f003 0304 	and.w	r3, r3, #4
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d023      	beq.n	8009206 <UART_WaitOnFlagUntilTimeout+0x8a>
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	2b80      	cmp	r3, #128	; 0x80
 80091c2:	d020      	beq.n	8009206 <UART_WaitOnFlagUntilTimeout+0x8a>
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	2b40      	cmp	r3, #64	; 0x40
 80091c8:	d01d      	beq.n	8009206 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f003 0308 	and.w	r3, r3, #8
 80091d4:	2b08      	cmp	r3, #8
 80091d6:	d116      	bne.n	8009206 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80091d8:	2300      	movs	r3, #0
 80091da:	617b      	str	r3, [r7, #20]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	617b      	str	r3, [r7, #20]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	617b      	str	r3, [r7, #20]
 80091ec:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80091ee:	68f8      	ldr	r0, [r7, #12]
 80091f0:	f000 f8e0 	bl	80093b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2208      	movs	r2, #8
 80091f8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	e00f      	b.n	8009226 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	4013      	ands	r3, r2
 8009210:	68ba      	ldr	r2, [r7, #8]
 8009212:	429a      	cmp	r2, r3
 8009214:	bf0c      	ite	eq
 8009216:	2301      	moveq	r3, #1
 8009218:	2300      	movne	r3, #0
 800921a:	b2db      	uxtb	r3, r3
 800921c:	461a      	mov	r2, r3
 800921e:	79fb      	ldrb	r3, [r7, #7]
 8009220:	429a      	cmp	r2, r3
 8009222:	d0b4      	beq.n	800918e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3718      	adds	r7, #24
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
	...

08009230 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b098      	sub	sp, #96	; 0x60
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	4613      	mov	r3, r2
 800923c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	88fa      	ldrh	r2, [r7, #6]
 8009248:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2222      	movs	r2, #34	; 0x22
 8009254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800925c:	4a3e      	ldr	r2, [pc, #248]	; (8009358 <UART_Start_Receive_DMA+0x128>)
 800925e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009264:	4a3d      	ldr	r2, [pc, #244]	; (800935c <UART_Start_Receive_DMA+0x12c>)
 8009266:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800926c:	4a3c      	ldr	r2, [pc, #240]	; (8009360 <UART_Start_Receive_DMA+0x130>)
 800926e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009274:	2200      	movs	r2, #0
 8009276:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009278:	f107 0308 	add.w	r3, r7, #8
 800927c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	3304      	adds	r3, #4
 8009288:	4619      	mov	r1, r3
 800928a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	88fb      	ldrh	r3, [r7, #6]
 8009290:	f7f9 fa8a 	bl	80027a8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009294:	2300      	movs	r3, #0
 8009296:	613b      	str	r3, [r7, #16]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	613b      	str	r3, [r7, #16]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	613b      	str	r3, [r7, #16]
 80092a8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d019      	beq.n	80092e6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	330c      	adds	r3, #12
 80092b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092bc:	e853 3f00 	ldrex	r3, [r3]
 80092c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80092c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	330c      	adds	r3, #12
 80092d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092d2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80092d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80092d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092da:	e841 2300 	strex	r3, r2, [r1]
 80092de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80092e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d1e5      	bne.n	80092b2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	3314      	adds	r3, #20
 80092ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f0:	e853 3f00 	ldrex	r3, [r3]
 80092f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80092f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f8:	f043 0301 	orr.w	r3, r3, #1
 80092fc:	657b      	str	r3, [r7, #84]	; 0x54
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	3314      	adds	r3, #20
 8009304:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009306:	63ba      	str	r2, [r7, #56]	; 0x38
 8009308:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800930c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800930e:	e841 2300 	strex	r3, r2, [r1]
 8009312:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1e5      	bne.n	80092e6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	3314      	adds	r3, #20
 8009320:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	e853 3f00 	ldrex	r3, [r3]
 8009328:	617b      	str	r3, [r7, #20]
   return(result);
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009330:	653b      	str	r3, [r7, #80]	; 0x50
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	3314      	adds	r3, #20
 8009338:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800933a:	627a      	str	r2, [r7, #36]	; 0x24
 800933c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933e:	6a39      	ldr	r1, [r7, #32]
 8009340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009342:	e841 2300 	strex	r3, r2, [r1]
 8009346:	61fb      	str	r3, [r7, #28]
   return(result);
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1e5      	bne.n	800931a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3760      	adds	r7, #96	; 0x60
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	08008f81 	.word	0x08008f81
 800935c:	080090ad 	.word	0x080090ad
 8009360:	080090e9 	.word	0x080090e9

08009364 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009364:	b480      	push	{r7}
 8009366:	b089      	sub	sp, #36	; 0x24
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	330c      	adds	r3, #12
 8009372:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	e853 3f00 	ldrex	r3, [r3]
 800937a:	60bb      	str	r3, [r7, #8]
   return(result);
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009382:	61fb      	str	r3, [r7, #28]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	330c      	adds	r3, #12
 800938a:	69fa      	ldr	r2, [r7, #28]
 800938c:	61ba      	str	r2, [r7, #24]
 800938e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009390:	6979      	ldr	r1, [r7, #20]
 8009392:	69ba      	ldr	r2, [r7, #24]
 8009394:	e841 2300 	strex	r3, r2, [r1]
 8009398:	613b      	str	r3, [r7, #16]
   return(result);
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1e5      	bne.n	800936c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2220      	movs	r2, #32
 80093a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80093a8:	bf00      	nop
 80093aa:	3724      	adds	r7, #36	; 0x24
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b095      	sub	sp, #84	; 0x54
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	330c      	adds	r3, #12
 80093c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c6:	e853 3f00 	ldrex	r3, [r3]
 80093ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80093cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	330c      	adds	r3, #12
 80093da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80093dc:	643a      	str	r2, [r7, #64]	; 0x40
 80093de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80093e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093e4:	e841 2300 	strex	r3, r2, [r1]
 80093e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d1e5      	bne.n	80093bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	3314      	adds	r3, #20
 80093f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f8:	6a3b      	ldr	r3, [r7, #32]
 80093fa:	e853 3f00 	ldrex	r3, [r3]
 80093fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	f023 0301 	bic.w	r3, r3, #1
 8009406:	64bb      	str	r3, [r7, #72]	; 0x48
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	3314      	adds	r3, #20
 800940e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009410:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009412:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009414:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009418:	e841 2300 	strex	r3, r2, [r1]
 800941c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800941e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009420:	2b00      	cmp	r3, #0
 8009422:	d1e5      	bne.n	80093f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009428:	2b01      	cmp	r3, #1
 800942a:	d119      	bne.n	8009460 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	330c      	adds	r3, #12
 8009432:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	e853 3f00 	ldrex	r3, [r3]
 800943a:	60bb      	str	r3, [r7, #8]
   return(result);
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	f023 0310 	bic.w	r3, r3, #16
 8009442:	647b      	str	r3, [r7, #68]	; 0x44
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	330c      	adds	r3, #12
 800944a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800944c:	61ba      	str	r2, [r7, #24]
 800944e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009450:	6979      	ldr	r1, [r7, #20]
 8009452:	69ba      	ldr	r2, [r7, #24]
 8009454:	e841 2300 	strex	r3, r2, [r1]
 8009458:	613b      	str	r3, [r7, #16]
   return(result);
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1e5      	bne.n	800942c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2220      	movs	r2, #32
 8009464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800946e:	bf00      	nop
 8009470:	3754      	adds	r7, #84	; 0x54
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b084      	sub	sp, #16
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009486:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2200      	movs	r2, #0
 800948c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2200      	movs	r2, #0
 8009492:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f7ff fd5d 	bl	8008f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800949a:	bf00      	nop
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80094a2:	b480      	push	{r7}
 80094a4:	b085      	sub	sp, #20
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b21      	cmp	r3, #33	; 0x21
 80094b4:	d13e      	bne.n	8009534 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094be:	d114      	bne.n	80094ea <UART_Transmit_IT+0x48>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d110      	bne.n	80094ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6a1b      	ldr	r3, [r3, #32]
 80094cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	881b      	ldrh	r3, [r3, #0]
 80094d2:	461a      	mov	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a1b      	ldr	r3, [r3, #32]
 80094e2:	1c9a      	adds	r2, r3, #2
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	621a      	str	r2, [r3, #32]
 80094e8:	e008      	b.n	80094fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6a1b      	ldr	r3, [r3, #32]
 80094ee:	1c59      	adds	r1, r3, #1
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	6211      	str	r1, [r2, #32]
 80094f4:	781a      	ldrb	r2, [r3, #0]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009500:	b29b      	uxth	r3, r3
 8009502:	3b01      	subs	r3, #1
 8009504:	b29b      	uxth	r3, r3
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	4619      	mov	r1, r3
 800950a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800950c:	2b00      	cmp	r3, #0
 800950e:	d10f      	bne.n	8009530 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	68da      	ldr	r2, [r3, #12]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800951e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	68da      	ldr	r2, [r3, #12]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800952e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009530:	2300      	movs	r3, #0
 8009532:	e000      	b.n	8009536 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009534:	2302      	movs	r3, #2
  }
}
 8009536:	4618      	mov	r0, r3
 8009538:	3714      	adds	r7, #20
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009542:	b580      	push	{r7, lr}
 8009544:	b082      	sub	sp, #8
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	68da      	ldr	r2, [r3, #12]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009558:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2220      	movs	r2, #32
 800955e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7ff fce2 	bl	8008f2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009568:	2300      	movs	r3, #0
}
 800956a:	4618      	mov	r0, r3
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b08c      	sub	sp, #48	; 0x30
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009580:	b2db      	uxtb	r3, r3
 8009582:	2b22      	cmp	r3, #34	; 0x22
 8009584:	f040 80ae 	bne.w	80096e4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009590:	d117      	bne.n	80095c2 <UART_Receive_IT+0x50>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d113      	bne.n	80095c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800959a:	2300      	movs	r3, #0
 800959c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ba:	1c9a      	adds	r2, r3, #2
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	629a      	str	r2, [r3, #40]	; 0x28
 80095c0:	e026      	b.n	8009610 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80095c8:	2300      	movs	r3, #0
 80095ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095d4:	d007      	beq.n	80095e6 <UART_Receive_IT+0x74>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10a      	bne.n	80095f4 <UART_Receive_IT+0x82>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d106      	bne.n	80095f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	b2da      	uxtb	r2, r3
 80095ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f0:	701a      	strb	r2, [r3, #0]
 80095f2:	e008      	b.n	8009606 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009600:	b2da      	uxtb	r2, r3
 8009602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009604:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800960a:	1c5a      	adds	r2, r3, #1
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009614:	b29b      	uxth	r3, r3
 8009616:	3b01      	subs	r3, #1
 8009618:	b29b      	uxth	r3, r3
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	4619      	mov	r1, r3
 800961e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009620:	2b00      	cmp	r3, #0
 8009622:	d15d      	bne.n	80096e0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	68da      	ldr	r2, [r3, #12]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f022 0220 	bic.w	r2, r2, #32
 8009632:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	68da      	ldr	r2, [r3, #12]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009642:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	695a      	ldr	r2, [r3, #20]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f022 0201 	bic.w	r2, r2, #1
 8009652:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2220      	movs	r2, #32
 8009658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009666:	2b01      	cmp	r3, #1
 8009668:	d135      	bne.n	80096d6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	330c      	adds	r3, #12
 8009676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	e853 3f00 	ldrex	r3, [r3]
 800967e:	613b      	str	r3, [r7, #16]
   return(result);
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	f023 0310 	bic.w	r3, r3, #16
 8009686:	627b      	str	r3, [r7, #36]	; 0x24
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	330c      	adds	r3, #12
 800968e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009690:	623a      	str	r2, [r7, #32]
 8009692:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009694:	69f9      	ldr	r1, [r7, #28]
 8009696:	6a3a      	ldr	r2, [r7, #32]
 8009698:	e841 2300 	strex	r3, r2, [r1]
 800969c:	61bb      	str	r3, [r7, #24]
   return(result);
 800969e:	69bb      	ldr	r3, [r7, #24]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d1e5      	bne.n	8009670 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 0310 	and.w	r3, r3, #16
 80096ae:	2b10      	cmp	r3, #16
 80096b0:	d10a      	bne.n	80096c8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80096b2:	2300      	movs	r3, #0
 80096b4:	60fb      	str	r3, [r7, #12]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	60fb      	str	r3, [r7, #12]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	60fb      	str	r3, [r7, #12]
 80096c6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80096cc:	4619      	mov	r1, r3
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f7ff fc4a 	bl	8008f68 <HAL_UARTEx_RxEventCallback>
 80096d4:	e002      	b.n	80096dc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f7f7 fc8a 	bl	8000ff0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80096dc:	2300      	movs	r3, #0
 80096de:	e002      	b.n	80096e6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80096e0:	2300      	movs	r3, #0
 80096e2:	e000      	b.n	80096e6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80096e4:	2302      	movs	r3, #2
  }
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3730      	adds	r7, #48	; 0x30
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
	...

080096f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096f4:	b0c0      	sub	sp, #256	; 0x100
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	691b      	ldr	r3, [r3, #16]
 8009704:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800970c:	68d9      	ldr	r1, [r3, #12]
 800970e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	ea40 0301 	orr.w	r3, r0, r1
 8009718:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800971a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800971e:	689a      	ldr	r2, [r3, #8]
 8009720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	431a      	orrs	r2, r3
 8009728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800972c:	695b      	ldr	r3, [r3, #20]
 800972e:	431a      	orrs	r2, r3
 8009730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009734:	69db      	ldr	r3, [r3, #28]
 8009736:	4313      	orrs	r3, r2
 8009738:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800973c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009748:	f021 010c 	bic.w	r1, r1, #12
 800974c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009756:	430b      	orrs	r3, r1
 8009758:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800975a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800976a:	6999      	ldr	r1, [r3, #24]
 800976c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	ea40 0301 	orr.w	r3, r0, r1
 8009776:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	4b8f      	ldr	r3, [pc, #572]	; (80099bc <UART_SetConfig+0x2cc>)
 8009780:	429a      	cmp	r2, r3
 8009782:	d005      	beq.n	8009790 <UART_SetConfig+0xa0>
 8009784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	4b8d      	ldr	r3, [pc, #564]	; (80099c0 <UART_SetConfig+0x2d0>)
 800978c:	429a      	cmp	r2, r3
 800978e:	d104      	bne.n	800979a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009790:	f7fd ff76 	bl	8007680 <HAL_RCC_GetPCLK2Freq>
 8009794:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009798:	e003      	b.n	80097a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800979a:	f7fd ff5d 	bl	8007658 <HAL_RCC_GetPCLK1Freq>
 800979e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097a6:	69db      	ldr	r3, [r3, #28]
 80097a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097ac:	f040 810c 	bne.w	80099c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80097b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097b4:	2200      	movs	r2, #0
 80097b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80097ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80097be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80097c2:	4622      	mov	r2, r4
 80097c4:	462b      	mov	r3, r5
 80097c6:	1891      	adds	r1, r2, r2
 80097c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80097ca:	415b      	adcs	r3, r3
 80097cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80097d2:	4621      	mov	r1, r4
 80097d4:	eb12 0801 	adds.w	r8, r2, r1
 80097d8:	4629      	mov	r1, r5
 80097da:	eb43 0901 	adc.w	r9, r3, r1
 80097de:	f04f 0200 	mov.w	r2, #0
 80097e2:	f04f 0300 	mov.w	r3, #0
 80097e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80097ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80097ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80097f2:	4690      	mov	r8, r2
 80097f4:	4699      	mov	r9, r3
 80097f6:	4623      	mov	r3, r4
 80097f8:	eb18 0303 	adds.w	r3, r8, r3
 80097fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009800:	462b      	mov	r3, r5
 8009802:	eb49 0303 	adc.w	r3, r9, r3
 8009806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800980a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009816:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800981a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800981e:	460b      	mov	r3, r1
 8009820:	18db      	adds	r3, r3, r3
 8009822:	653b      	str	r3, [r7, #80]	; 0x50
 8009824:	4613      	mov	r3, r2
 8009826:	eb42 0303 	adc.w	r3, r2, r3
 800982a:	657b      	str	r3, [r7, #84]	; 0x54
 800982c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009830:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009834:	f7f7 fa28 	bl	8000c88 <__aeabi_uldivmod>
 8009838:	4602      	mov	r2, r0
 800983a:	460b      	mov	r3, r1
 800983c:	4b61      	ldr	r3, [pc, #388]	; (80099c4 <UART_SetConfig+0x2d4>)
 800983e:	fba3 2302 	umull	r2, r3, r3, r2
 8009842:	095b      	lsrs	r3, r3, #5
 8009844:	011c      	lsls	r4, r3, #4
 8009846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800984a:	2200      	movs	r2, #0
 800984c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009850:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009854:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009858:	4642      	mov	r2, r8
 800985a:	464b      	mov	r3, r9
 800985c:	1891      	adds	r1, r2, r2
 800985e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009860:	415b      	adcs	r3, r3
 8009862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009864:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009868:	4641      	mov	r1, r8
 800986a:	eb12 0a01 	adds.w	sl, r2, r1
 800986e:	4649      	mov	r1, r9
 8009870:	eb43 0b01 	adc.w	fp, r3, r1
 8009874:	f04f 0200 	mov.w	r2, #0
 8009878:	f04f 0300 	mov.w	r3, #0
 800987c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009880:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009884:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009888:	4692      	mov	sl, r2
 800988a:	469b      	mov	fp, r3
 800988c:	4643      	mov	r3, r8
 800988e:	eb1a 0303 	adds.w	r3, sl, r3
 8009892:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009896:	464b      	mov	r3, r9
 8009898:	eb4b 0303 	adc.w	r3, fp, r3
 800989c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80098a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80098ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80098b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80098b4:	460b      	mov	r3, r1
 80098b6:	18db      	adds	r3, r3, r3
 80098b8:	643b      	str	r3, [r7, #64]	; 0x40
 80098ba:	4613      	mov	r3, r2
 80098bc:	eb42 0303 	adc.w	r3, r2, r3
 80098c0:	647b      	str	r3, [r7, #68]	; 0x44
 80098c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80098c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80098ca:	f7f7 f9dd 	bl	8000c88 <__aeabi_uldivmod>
 80098ce:	4602      	mov	r2, r0
 80098d0:	460b      	mov	r3, r1
 80098d2:	4611      	mov	r1, r2
 80098d4:	4b3b      	ldr	r3, [pc, #236]	; (80099c4 <UART_SetConfig+0x2d4>)
 80098d6:	fba3 2301 	umull	r2, r3, r3, r1
 80098da:	095b      	lsrs	r3, r3, #5
 80098dc:	2264      	movs	r2, #100	; 0x64
 80098de:	fb02 f303 	mul.w	r3, r2, r3
 80098e2:	1acb      	subs	r3, r1, r3
 80098e4:	00db      	lsls	r3, r3, #3
 80098e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80098ea:	4b36      	ldr	r3, [pc, #216]	; (80099c4 <UART_SetConfig+0x2d4>)
 80098ec:	fba3 2302 	umull	r2, r3, r3, r2
 80098f0:	095b      	lsrs	r3, r3, #5
 80098f2:	005b      	lsls	r3, r3, #1
 80098f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80098f8:	441c      	add	r4, r3
 80098fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098fe:	2200      	movs	r2, #0
 8009900:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009904:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009908:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800990c:	4642      	mov	r2, r8
 800990e:	464b      	mov	r3, r9
 8009910:	1891      	adds	r1, r2, r2
 8009912:	63b9      	str	r1, [r7, #56]	; 0x38
 8009914:	415b      	adcs	r3, r3
 8009916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009918:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800991c:	4641      	mov	r1, r8
 800991e:	1851      	adds	r1, r2, r1
 8009920:	6339      	str	r1, [r7, #48]	; 0x30
 8009922:	4649      	mov	r1, r9
 8009924:	414b      	adcs	r3, r1
 8009926:	637b      	str	r3, [r7, #52]	; 0x34
 8009928:	f04f 0200 	mov.w	r2, #0
 800992c:	f04f 0300 	mov.w	r3, #0
 8009930:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009934:	4659      	mov	r1, fp
 8009936:	00cb      	lsls	r3, r1, #3
 8009938:	4651      	mov	r1, sl
 800993a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800993e:	4651      	mov	r1, sl
 8009940:	00ca      	lsls	r2, r1, #3
 8009942:	4610      	mov	r0, r2
 8009944:	4619      	mov	r1, r3
 8009946:	4603      	mov	r3, r0
 8009948:	4642      	mov	r2, r8
 800994a:	189b      	adds	r3, r3, r2
 800994c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009950:	464b      	mov	r3, r9
 8009952:	460a      	mov	r2, r1
 8009954:	eb42 0303 	adc.w	r3, r2, r3
 8009958:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800995c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009968:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800996c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009970:	460b      	mov	r3, r1
 8009972:	18db      	adds	r3, r3, r3
 8009974:	62bb      	str	r3, [r7, #40]	; 0x28
 8009976:	4613      	mov	r3, r2
 8009978:	eb42 0303 	adc.w	r3, r2, r3
 800997c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800997e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009982:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009986:	f7f7 f97f 	bl	8000c88 <__aeabi_uldivmod>
 800998a:	4602      	mov	r2, r0
 800998c:	460b      	mov	r3, r1
 800998e:	4b0d      	ldr	r3, [pc, #52]	; (80099c4 <UART_SetConfig+0x2d4>)
 8009990:	fba3 1302 	umull	r1, r3, r3, r2
 8009994:	095b      	lsrs	r3, r3, #5
 8009996:	2164      	movs	r1, #100	; 0x64
 8009998:	fb01 f303 	mul.w	r3, r1, r3
 800999c:	1ad3      	subs	r3, r2, r3
 800999e:	00db      	lsls	r3, r3, #3
 80099a0:	3332      	adds	r3, #50	; 0x32
 80099a2:	4a08      	ldr	r2, [pc, #32]	; (80099c4 <UART_SetConfig+0x2d4>)
 80099a4:	fba2 2303 	umull	r2, r3, r2, r3
 80099a8:	095b      	lsrs	r3, r3, #5
 80099aa:	f003 0207 	and.w	r2, r3, #7
 80099ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4422      	add	r2, r4
 80099b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80099b8:	e106      	b.n	8009bc8 <UART_SetConfig+0x4d8>
 80099ba:	bf00      	nop
 80099bc:	40011000 	.word	0x40011000
 80099c0:	40011400 	.word	0x40011400
 80099c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80099c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099cc:	2200      	movs	r2, #0
 80099ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80099d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80099d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80099da:	4642      	mov	r2, r8
 80099dc:	464b      	mov	r3, r9
 80099de:	1891      	adds	r1, r2, r2
 80099e0:	6239      	str	r1, [r7, #32]
 80099e2:	415b      	adcs	r3, r3
 80099e4:	627b      	str	r3, [r7, #36]	; 0x24
 80099e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80099ea:	4641      	mov	r1, r8
 80099ec:	1854      	adds	r4, r2, r1
 80099ee:	4649      	mov	r1, r9
 80099f0:	eb43 0501 	adc.w	r5, r3, r1
 80099f4:	f04f 0200 	mov.w	r2, #0
 80099f8:	f04f 0300 	mov.w	r3, #0
 80099fc:	00eb      	lsls	r3, r5, #3
 80099fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009a02:	00e2      	lsls	r2, r4, #3
 8009a04:	4614      	mov	r4, r2
 8009a06:	461d      	mov	r5, r3
 8009a08:	4643      	mov	r3, r8
 8009a0a:	18e3      	adds	r3, r4, r3
 8009a0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009a10:	464b      	mov	r3, r9
 8009a12:	eb45 0303 	adc.w	r3, r5, r3
 8009a16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009a26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009a2a:	f04f 0200 	mov.w	r2, #0
 8009a2e:	f04f 0300 	mov.w	r3, #0
 8009a32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009a36:	4629      	mov	r1, r5
 8009a38:	008b      	lsls	r3, r1, #2
 8009a3a:	4621      	mov	r1, r4
 8009a3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a40:	4621      	mov	r1, r4
 8009a42:	008a      	lsls	r2, r1, #2
 8009a44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009a48:	f7f7 f91e 	bl	8000c88 <__aeabi_uldivmod>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	460b      	mov	r3, r1
 8009a50:	4b60      	ldr	r3, [pc, #384]	; (8009bd4 <UART_SetConfig+0x4e4>)
 8009a52:	fba3 2302 	umull	r2, r3, r3, r2
 8009a56:	095b      	lsrs	r3, r3, #5
 8009a58:	011c      	lsls	r4, r3, #4
 8009a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009a64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009a68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009a6c:	4642      	mov	r2, r8
 8009a6e:	464b      	mov	r3, r9
 8009a70:	1891      	adds	r1, r2, r2
 8009a72:	61b9      	str	r1, [r7, #24]
 8009a74:	415b      	adcs	r3, r3
 8009a76:	61fb      	str	r3, [r7, #28]
 8009a78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009a7c:	4641      	mov	r1, r8
 8009a7e:	1851      	adds	r1, r2, r1
 8009a80:	6139      	str	r1, [r7, #16]
 8009a82:	4649      	mov	r1, r9
 8009a84:	414b      	adcs	r3, r1
 8009a86:	617b      	str	r3, [r7, #20]
 8009a88:	f04f 0200 	mov.w	r2, #0
 8009a8c:	f04f 0300 	mov.w	r3, #0
 8009a90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009a94:	4659      	mov	r1, fp
 8009a96:	00cb      	lsls	r3, r1, #3
 8009a98:	4651      	mov	r1, sl
 8009a9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a9e:	4651      	mov	r1, sl
 8009aa0:	00ca      	lsls	r2, r1, #3
 8009aa2:	4610      	mov	r0, r2
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	4642      	mov	r2, r8
 8009aaa:	189b      	adds	r3, r3, r2
 8009aac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ab0:	464b      	mov	r3, r9
 8009ab2:	460a      	mov	r2, r1
 8009ab4:	eb42 0303 	adc.w	r3, r2, r3
 8009ab8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	67bb      	str	r3, [r7, #120]	; 0x78
 8009ac6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009ac8:	f04f 0200 	mov.w	r2, #0
 8009acc:	f04f 0300 	mov.w	r3, #0
 8009ad0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009ad4:	4649      	mov	r1, r9
 8009ad6:	008b      	lsls	r3, r1, #2
 8009ad8:	4641      	mov	r1, r8
 8009ada:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ade:	4641      	mov	r1, r8
 8009ae0:	008a      	lsls	r2, r1, #2
 8009ae2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009ae6:	f7f7 f8cf 	bl	8000c88 <__aeabi_uldivmod>
 8009aea:	4602      	mov	r2, r0
 8009aec:	460b      	mov	r3, r1
 8009aee:	4611      	mov	r1, r2
 8009af0:	4b38      	ldr	r3, [pc, #224]	; (8009bd4 <UART_SetConfig+0x4e4>)
 8009af2:	fba3 2301 	umull	r2, r3, r3, r1
 8009af6:	095b      	lsrs	r3, r3, #5
 8009af8:	2264      	movs	r2, #100	; 0x64
 8009afa:	fb02 f303 	mul.w	r3, r2, r3
 8009afe:	1acb      	subs	r3, r1, r3
 8009b00:	011b      	lsls	r3, r3, #4
 8009b02:	3332      	adds	r3, #50	; 0x32
 8009b04:	4a33      	ldr	r2, [pc, #204]	; (8009bd4 <UART_SetConfig+0x4e4>)
 8009b06:	fba2 2303 	umull	r2, r3, r2, r3
 8009b0a:	095b      	lsrs	r3, r3, #5
 8009b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b10:	441c      	add	r4, r3
 8009b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b16:	2200      	movs	r2, #0
 8009b18:	673b      	str	r3, [r7, #112]	; 0x70
 8009b1a:	677a      	str	r2, [r7, #116]	; 0x74
 8009b1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009b20:	4642      	mov	r2, r8
 8009b22:	464b      	mov	r3, r9
 8009b24:	1891      	adds	r1, r2, r2
 8009b26:	60b9      	str	r1, [r7, #8]
 8009b28:	415b      	adcs	r3, r3
 8009b2a:	60fb      	str	r3, [r7, #12]
 8009b2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b30:	4641      	mov	r1, r8
 8009b32:	1851      	adds	r1, r2, r1
 8009b34:	6039      	str	r1, [r7, #0]
 8009b36:	4649      	mov	r1, r9
 8009b38:	414b      	adcs	r3, r1
 8009b3a:	607b      	str	r3, [r7, #4]
 8009b3c:	f04f 0200 	mov.w	r2, #0
 8009b40:	f04f 0300 	mov.w	r3, #0
 8009b44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009b48:	4659      	mov	r1, fp
 8009b4a:	00cb      	lsls	r3, r1, #3
 8009b4c:	4651      	mov	r1, sl
 8009b4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b52:	4651      	mov	r1, sl
 8009b54:	00ca      	lsls	r2, r1, #3
 8009b56:	4610      	mov	r0, r2
 8009b58:	4619      	mov	r1, r3
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	4642      	mov	r2, r8
 8009b5e:	189b      	adds	r3, r3, r2
 8009b60:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b62:	464b      	mov	r3, r9
 8009b64:	460a      	mov	r2, r1
 8009b66:	eb42 0303 	adc.w	r3, r2, r3
 8009b6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	663b      	str	r3, [r7, #96]	; 0x60
 8009b76:	667a      	str	r2, [r7, #100]	; 0x64
 8009b78:	f04f 0200 	mov.w	r2, #0
 8009b7c:	f04f 0300 	mov.w	r3, #0
 8009b80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009b84:	4649      	mov	r1, r9
 8009b86:	008b      	lsls	r3, r1, #2
 8009b88:	4641      	mov	r1, r8
 8009b8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b8e:	4641      	mov	r1, r8
 8009b90:	008a      	lsls	r2, r1, #2
 8009b92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009b96:	f7f7 f877 	bl	8000c88 <__aeabi_uldivmod>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	4b0d      	ldr	r3, [pc, #52]	; (8009bd4 <UART_SetConfig+0x4e4>)
 8009ba0:	fba3 1302 	umull	r1, r3, r3, r2
 8009ba4:	095b      	lsrs	r3, r3, #5
 8009ba6:	2164      	movs	r1, #100	; 0x64
 8009ba8:	fb01 f303 	mul.w	r3, r1, r3
 8009bac:	1ad3      	subs	r3, r2, r3
 8009bae:	011b      	lsls	r3, r3, #4
 8009bb0:	3332      	adds	r3, #50	; 0x32
 8009bb2:	4a08      	ldr	r2, [pc, #32]	; (8009bd4 <UART_SetConfig+0x4e4>)
 8009bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8009bb8:	095b      	lsrs	r3, r3, #5
 8009bba:	f003 020f 	and.w	r2, r3, #15
 8009bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4422      	add	r2, r4
 8009bc6:	609a      	str	r2, [r3, #8]
}
 8009bc8:	bf00      	nop
 8009bca:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009bd4:	51eb851f 	.word	0x51eb851f

08009bd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009bd8:	b084      	sub	sp, #16
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b084      	sub	sp, #16
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
 8009be2:	f107 001c 	add.w	r0, r7, #28
 8009be6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009bea:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d123      	bne.n	8009c3a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009c06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009c1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d105      	bne.n	8009c2e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 f9dc 	bl	8009fec <USB_CoreReset>
 8009c34:	4603      	mov	r3, r0
 8009c36:	73fb      	strb	r3, [r7, #15]
 8009c38:	e01b      	b.n	8009c72 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 f9d0 	bl	8009fec <USB_CoreReset>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009c50:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d106      	bne.n	8009c66 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	639a      	str	r2, [r3, #56]	; 0x38
 8009c64:	e005      	b.n	8009c72 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009c72:	7fbb      	ldrb	r3, [r7, #30]
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d10b      	bne.n	8009c90 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	f043 0206 	orr.w	r2, r3, #6
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	f043 0220 	orr.w	r2, r3, #32
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c9c:	b004      	add	sp, #16
 8009c9e:	4770      	bx	lr

08009ca0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	f043 0201 	orr.w	r2, r3, #1
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	370c      	adds	r7, #12
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr

08009cc2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009cc2:	b480      	push	{r7}
 8009cc4:	b083      	sub	sp, #12
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	f023 0201 	bic.w	r2, r3, #1
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009cd6:	2300      	movs	r3, #0
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	370c      	adds	r7, #12
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	460b      	mov	r3, r1
 8009cee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009d00:	78fb      	ldrb	r3, [r7, #3]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d115      	bne.n	8009d32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009d12:	200a      	movs	r0, #10
 8009d14:	f7f8 fb64 	bl	80023e0 <HAL_Delay>
      ms += 10U;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	330a      	adds	r3, #10
 8009d1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f956 	bl	8009fd0 <USB_GetMode>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d01e      	beq.n	8009d68 <USB_SetCurrentMode+0x84>
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2bc7      	cmp	r3, #199	; 0xc7
 8009d2e:	d9f0      	bls.n	8009d12 <USB_SetCurrentMode+0x2e>
 8009d30:	e01a      	b.n	8009d68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009d32:	78fb      	ldrb	r3, [r7, #3]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d115      	bne.n	8009d64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009d44:	200a      	movs	r0, #10
 8009d46:	f7f8 fb4b 	bl	80023e0 <HAL_Delay>
      ms += 10U;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	330a      	adds	r3, #10
 8009d4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 f93d 	bl	8009fd0 <USB_GetMode>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d005      	beq.n	8009d68 <USB_SetCurrentMode+0x84>
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2bc7      	cmp	r3, #199	; 0xc7
 8009d60:	d9f0      	bls.n	8009d44 <USB_SetCurrentMode+0x60>
 8009d62:	e001      	b.n	8009d68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009d64:	2301      	movs	r3, #1
 8009d66:	e005      	b.n	8009d74 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2bc8      	cmp	r3, #200	; 0xc8
 8009d6c:	d101      	bne.n	8009d72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e000      	b.n	8009d74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b085      	sub	sp, #20
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009d86:	2300      	movs	r3, #0
 8009d88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009d96:	d901      	bls.n	8009d9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009d98:	2303      	movs	r3, #3
 8009d9a:	e01b      	b.n	8009dd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	691b      	ldr	r3, [r3, #16]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	daf2      	bge.n	8009d8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009da4:	2300      	movs	r3, #0
 8009da6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	019b      	lsls	r3, r3, #6
 8009dac:	f043 0220 	orr.w	r2, r3, #32
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	3301      	adds	r3, #1
 8009db8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009dc0:	d901      	bls.n	8009dc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009dc2:	2303      	movs	r3, #3
 8009dc4:	e006      	b.n	8009dd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	691b      	ldr	r3, [r3, #16]
 8009dca:	f003 0320 	and.w	r3, r3, #32
 8009dce:	2b20      	cmp	r3, #32
 8009dd0:	d0f0      	beq.n	8009db4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3714      	adds	r7, #20
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009de8:	2300      	movs	r3, #0
 8009dea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	3301      	adds	r3, #1
 8009df0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009df8:	d901      	bls.n	8009dfe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009dfa:	2303      	movs	r3, #3
 8009dfc:	e018      	b.n	8009e30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	691b      	ldr	r3, [r3, #16]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	daf2      	bge.n	8009dec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009e06:	2300      	movs	r3, #0
 8009e08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2210      	movs	r2, #16
 8009e0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	3301      	adds	r3, #1
 8009e14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009e1c:	d901      	bls.n	8009e22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009e1e:	2303      	movs	r3, #3
 8009e20:	e006      	b.n	8009e30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	f003 0310 	and.w	r3, r3, #16
 8009e2a:	2b10      	cmp	r3, #16
 8009e2c:	d0f0      	beq.n	8009e10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3714      	adds	r7, #20
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b089      	sub	sp, #36	; 0x24
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	4611      	mov	r1, r2
 8009e48:	461a      	mov	r2, r3
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	71fb      	strb	r3, [r7, #7]
 8009e4e:	4613      	mov	r3, r2
 8009e50:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009e5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d123      	bne.n	8009eaa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009e62:	88bb      	ldrh	r3, [r7, #4]
 8009e64:	3303      	adds	r3, #3
 8009e66:	089b      	lsrs	r3, r3, #2
 8009e68:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	61bb      	str	r3, [r7, #24]
 8009e6e:	e018      	b.n	8009ea2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009e70:	79fb      	ldrb	r3, [r7, #7]
 8009e72:	031a      	lsls	r2, r3, #12
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	4413      	add	r3, r2
 8009e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	3301      	adds	r3, #1
 8009e88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e8a:	69fb      	ldr	r3, [r7, #28]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	3301      	adds	r3, #1
 8009e94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	61bb      	str	r3, [r7, #24]
 8009ea2:	69ba      	ldr	r2, [r7, #24]
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d3e2      	bcc.n	8009e70 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3724      	adds	r7, #36	; 0x24
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr

08009eb8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b08b      	sub	sp, #44	; 0x2c
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009ece:	88fb      	ldrh	r3, [r7, #6]
 8009ed0:	089b      	lsrs	r3, r3, #2
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009ed6:	88fb      	ldrh	r3, [r7, #6]
 8009ed8:	f003 0303 	and.w	r3, r3, #3
 8009edc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009ede:	2300      	movs	r3, #0
 8009ee0:	623b      	str	r3, [r7, #32]
 8009ee2:	e014      	b.n	8009f0e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009ee4:	69bb      	ldr	r3, [r7, #24]
 8009ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eee:	601a      	str	r2, [r3, #0]
    pDest++;
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef8:	3301      	adds	r3, #1
 8009efa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efe:	3301      	adds	r3, #1
 8009f00:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f04:	3301      	adds	r3, #1
 8009f06:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009f08:	6a3b      	ldr	r3, [r7, #32]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	623b      	str	r3, [r7, #32]
 8009f0e:	6a3a      	ldr	r2, [r7, #32]
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d3e6      	bcc.n	8009ee4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009f16:	8bfb      	ldrh	r3, [r7, #30]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d01e      	beq.n	8009f5a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f26:	461a      	mov	r2, r3
 8009f28:	f107 0310 	add.w	r3, r7, #16
 8009f2c:	6812      	ldr	r2, [r2, #0]
 8009f2e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009f30:	693a      	ldr	r2, [r7, #16]
 8009f32:	6a3b      	ldr	r3, [r7, #32]
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	00db      	lsls	r3, r3, #3
 8009f38:	fa22 f303 	lsr.w	r3, r2, r3
 8009f3c:	b2da      	uxtb	r2, r3
 8009f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f40:	701a      	strb	r2, [r3, #0]
      i++;
 8009f42:	6a3b      	ldr	r3, [r7, #32]
 8009f44:	3301      	adds	r3, #1
 8009f46:	623b      	str	r3, [r7, #32]
      pDest++;
 8009f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009f4e:	8bfb      	ldrh	r3, [r7, #30]
 8009f50:	3b01      	subs	r3, #1
 8009f52:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009f54:	8bfb      	ldrh	r3, [r7, #30]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d1ea      	bne.n	8009f30 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	372c      	adds	r7, #44	; 0x2c
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	695b      	ldr	r3, [r3, #20]
 8009f74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	699b      	ldr	r3, [r3, #24]
 8009f7a:	68fa      	ldr	r2, [r7, #12]
 8009f7c:	4013      	ands	r3, r2
 8009f7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009f80:	68fb      	ldr	r3, [r7, #12]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr

08009f8e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8009f8e:	b480      	push	{r7}
 8009f90:	b085      	sub	sp, #20
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
 8009f96:	460b      	mov	r3, r1
 8009f98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8009f9e:	78fb      	ldrb	r3, [r7, #3]
 8009fa0:	015a      	lsls	r2, r3, #5
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8009fae:	78fb      	ldrb	r3, [r7, #3]
 8009fb0:	015a      	lsls	r2, r3, #5
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	4013      	ands	r3, r2
 8009fc0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009fc2:	68bb      	ldr	r3, [r7, #8]
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3714      	adds	r7, #20
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	695b      	ldr	r3, [r3, #20]
 8009fdc:	f003 0301 	and.w	r3, r3, #1
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b085      	sub	sp, #20
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800a004:	d901      	bls.n	800a00a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a006:	2303      	movs	r3, #3
 800a008:	e01b      	b.n	800a042 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	691b      	ldr	r3, [r3, #16]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	daf2      	bge.n	8009ff8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a012:	2300      	movs	r3, #0
 800a014:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	f043 0201 	orr.w	r2, r3, #1
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	3301      	adds	r3, #1
 800a026:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800a02e:	d901      	bls.n	800a034 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a030:	2303      	movs	r3, #3
 800a032:	e006      	b.n	800a042 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	691b      	ldr	r3, [r3, #16]
 800a038:	f003 0301 	and.w	r3, r3, #1
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d0f0      	beq.n	800a022 <USB_CoreReset+0x36>

  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3714      	adds	r7, #20
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr
	...

0800a050 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a050:	b084      	sub	sp, #16
 800a052:	b580      	push	{r7, lr}
 800a054:	b086      	sub	sp, #24
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
 800a05a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a05e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a062:	2300      	movs	r3, #0
 800a064:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a070:	461a      	mov	r2, r3
 800a072:	2300      	movs	r3, #0
 800a074:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a086:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a092:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d119      	bne.n	800a0da <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a0a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d10a      	bne.n	800a0c4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	68fa      	ldr	r2, [r7, #12]
 800a0b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a0bc:	f043 0304 	orr.w	r3, r3, #4
 800a0c0:	6013      	str	r3, [r2, #0]
 800a0c2:	e014      	b.n	800a0ee <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a0d2:	f023 0304 	bic.w	r3, r3, #4
 800a0d6:	6013      	str	r3, [r2, #0]
 800a0d8:	e009      	b.n	800a0ee <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a0e8:	f023 0304 	bic.w	r3, r3, #4
 800a0ec:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a0ee:	2110      	movs	r1, #16
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f7ff fe43 	bl	8009d7c <USB_FlushTxFifo>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d001      	beq.n	800a100 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f7ff fe6d 	bl	8009de0 <USB_FlushRxFifo>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d001      	beq.n	800a110 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800a10c:	2301      	movs	r3, #1
 800a10e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a110:	2300      	movs	r3, #0
 800a112:	613b      	str	r3, [r7, #16]
 800a114:	e015      	b.n	800a142 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	015a      	lsls	r2, r3, #5
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	4413      	add	r3, r2
 800a11e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a122:	461a      	mov	r2, r3
 800a124:	f04f 33ff 	mov.w	r3, #4294967295
 800a128:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	015a      	lsls	r2, r3, #5
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	4413      	add	r3, r2
 800a132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a136:	461a      	mov	r2, r3
 800a138:	2300      	movs	r3, #0
 800a13a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	3301      	adds	r3, #1
 800a140:	613b      	str	r3, [r7, #16]
 800a142:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a146:	461a      	mov	r2, r3
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d3e3      	bcc.n	800a116 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f04f 32ff 	mov.w	r2, #4294967295
 800a15a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4a18      	ldr	r2, [pc, #96]	; (800a1c0 <USB_HostInit+0x170>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d10b      	bne.n	800a17c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a16a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a15      	ldr	r2, [pc, #84]	; (800a1c4 <USB_HostInit+0x174>)
 800a170:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4a14      	ldr	r2, [pc, #80]	; (800a1c8 <USB_HostInit+0x178>)
 800a176:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a17a:	e009      	b.n	800a190 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2280      	movs	r2, #128	; 0x80
 800a180:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4a11      	ldr	r2, [pc, #68]	; (800a1cc <USB_HostInit+0x17c>)
 800a186:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a11      	ldr	r2, [pc, #68]	; (800a1d0 <USB_HostInit+0x180>)
 800a18c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a190:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a194:	2b00      	cmp	r3, #0
 800a196:	d105      	bne.n	800a1a4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	699b      	ldr	r3, [r3, #24]
 800a19c:	f043 0210 	orr.w	r2, r3, #16
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	699a      	ldr	r2, [r3, #24]
 800a1a8:	4b0a      	ldr	r3, [pc, #40]	; (800a1d4 <USB_HostInit+0x184>)
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a1b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3718      	adds	r7, #24
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a1bc:	b004      	add	sp, #16
 800a1be:	4770      	bx	lr
 800a1c0:	40040000 	.word	0x40040000
 800a1c4:	01000200 	.word	0x01000200
 800a1c8:	00e00300 	.word	0x00e00300
 800a1cc:	00600080 	.word	0x00600080
 800a1d0:	004000e0 	.word	0x004000e0
 800a1d4:	a3200008 	.word	0xa3200008

0800a1d8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b085      	sub	sp, #20
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	68fa      	ldr	r2, [r7, #12]
 800a1f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a1f6:	f023 0303 	bic.w	r3, r3, #3
 800a1fa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	78fb      	ldrb	r3, [r7, #3]
 800a206:	f003 0303 	and.w	r3, r3, #3
 800a20a:	68f9      	ldr	r1, [r7, #12]
 800a20c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a210:	4313      	orrs	r3, r2
 800a212:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a214:	78fb      	ldrb	r3, [r7, #3]
 800a216:	2b01      	cmp	r3, #1
 800a218:	d107      	bne.n	800a22a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a220:	461a      	mov	r2, r3
 800a222:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a226:	6053      	str	r3, [r2, #4]
 800a228:	e00c      	b.n	800a244 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800a22a:	78fb      	ldrb	r3, [r7, #3]
 800a22c:	2b02      	cmp	r3, #2
 800a22e:	d107      	bne.n	800a240 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a236:	461a      	mov	r2, r3
 800a238:	f241 7370 	movw	r3, #6000	; 0x1770
 800a23c:	6053      	str	r3, [r2, #4]
 800a23e:	e001      	b.n	800a244 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	e000      	b.n	800a246 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	3714      	adds	r7, #20
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr

0800a252 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b084      	sub	sp, #16
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a25e:	2300      	movs	r3, #0
 800a260:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a272:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a27c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a280:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a282:	2064      	movs	r0, #100	; 0x64
 800a284:	f7f8 f8ac 	bl	80023e0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	68fa      	ldr	r2, [r7, #12]
 800a28c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a294:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a296:	200a      	movs	r0, #10
 800a298:	f7f8 f8a2 	bl	80023e0 <HAL_Delay>

  return HAL_OK;
 800a29c:	2300      	movs	r3, #0
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a2a6:	b480      	push	{r7}
 800a2a8:	b085      	sub	sp, #20
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a2ca:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d109      	bne.n	800a2ea <USB_DriveVbus+0x44>
 800a2d6:	78fb      	ldrb	r3, [r7, #3]
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d106      	bne.n	800a2ea <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a2e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a2e8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a2f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2f4:	d109      	bne.n	800a30a <USB_DriveVbus+0x64>
 800a2f6:	78fb      	ldrb	r3, [r7, #3]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d106      	bne.n	800a30a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a304:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a308:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3714      	adds	r7, #20
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800a318:	b480      	push	{r7}
 800a31a:	b085      	sub	sp, #20
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a324:	2300      	movs	r3, #0
 800a326:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	0c5b      	lsrs	r3, r3, #17
 800a336:	f003 0303 	and.w	r3, r3, #3
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3714      	adds	r7, #20
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr

0800a346 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800a346:	b480      	push	{r7}
 800a348:	b085      	sub	sp, #20
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	b29b      	uxth	r3, r3
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3714      	adds	r7, #20
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b088      	sub	sp, #32
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	4608      	mov	r0, r1
 800a372:	4611      	mov	r1, r2
 800a374:	461a      	mov	r2, r3
 800a376:	4603      	mov	r3, r0
 800a378:	70fb      	strb	r3, [r7, #3]
 800a37a:	460b      	mov	r3, r1
 800a37c:	70bb      	strb	r3, [r7, #2]
 800a37e:	4613      	mov	r3, r2
 800a380:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a382:	2300      	movs	r3, #0
 800a384:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800a38a:	78fb      	ldrb	r3, [r7, #3]
 800a38c:	015a      	lsls	r2, r3, #5
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	4413      	add	r3, r2
 800a392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a396:	461a      	mov	r2, r3
 800a398:	f04f 33ff 	mov.w	r3, #4294967295
 800a39c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a39e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a3a2:	2b03      	cmp	r3, #3
 800a3a4:	d87c      	bhi.n	800a4a0 <USB_HC_Init+0x138>
 800a3a6:	a201      	add	r2, pc, #4	; (adr r2, 800a3ac <USB_HC_Init+0x44>)
 800a3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ac:	0800a3bd 	.word	0x0800a3bd
 800a3b0:	0800a463 	.word	0x0800a463
 800a3b4:	0800a3bd 	.word	0x0800a3bd
 800a3b8:	0800a425 	.word	0x0800a425
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a3bc:	78fb      	ldrb	r3, [r7, #3]
 800a3be:	015a      	lsls	r2, r3, #5
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	4413      	add	r3, r2
 800a3c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	f240 439d 	movw	r3, #1181	; 0x49d
 800a3ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a3d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	da10      	bge.n	800a3fa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a3d8:	78fb      	ldrb	r3, [r7, #3]
 800a3da:	015a      	lsls	r2, r3, #5
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	4413      	add	r3, r2
 800a3e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	78fa      	ldrb	r2, [r7, #3]
 800a3e8:	0151      	lsls	r1, r2, #5
 800a3ea:	693a      	ldr	r2, [r7, #16]
 800a3ec:	440a      	add	r2, r1
 800a3ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3f6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800a3f8:	e055      	b.n	800a4a6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4a6f      	ldr	r2, [pc, #444]	; (800a5bc <USB_HC_Init+0x254>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d151      	bne.n	800a4a6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a402:	78fb      	ldrb	r3, [r7, #3]
 800a404:	015a      	lsls	r2, r3, #5
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	4413      	add	r3, r2
 800a40a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	78fa      	ldrb	r2, [r7, #3]
 800a412:	0151      	lsls	r1, r2, #5
 800a414:	693a      	ldr	r2, [r7, #16]
 800a416:	440a      	add	r2, r1
 800a418:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a41c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a420:	60d3      	str	r3, [r2, #12]
      break;
 800a422:	e040      	b.n	800a4a6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a424:	78fb      	ldrb	r3, [r7, #3]
 800a426:	015a      	lsls	r2, r3, #5
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	4413      	add	r3, r2
 800a42c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a430:	461a      	mov	r2, r3
 800a432:	f240 639d 	movw	r3, #1693	; 0x69d
 800a436:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a438:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	da34      	bge.n	800a4aa <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a440:	78fb      	ldrb	r3, [r7, #3]
 800a442:	015a      	lsls	r2, r3, #5
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	4413      	add	r3, r2
 800a448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	78fa      	ldrb	r2, [r7, #3]
 800a450:	0151      	lsls	r1, r2, #5
 800a452:	693a      	ldr	r2, [r7, #16]
 800a454:	440a      	add	r2, r1
 800a456:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a45a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a45e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a460:	e023      	b.n	800a4aa <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a462:	78fb      	ldrb	r3, [r7, #3]
 800a464:	015a      	lsls	r2, r3, #5
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	4413      	add	r3, r2
 800a46a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a46e:	461a      	mov	r2, r3
 800a470:	f240 2325 	movw	r3, #549	; 0x225
 800a474:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a476:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	da17      	bge.n	800a4ae <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a47e:	78fb      	ldrb	r3, [r7, #3]
 800a480:	015a      	lsls	r2, r3, #5
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	4413      	add	r3, r2
 800a486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	78fa      	ldrb	r2, [r7, #3]
 800a48e:	0151      	lsls	r1, r2, #5
 800a490:	693a      	ldr	r2, [r7, #16]
 800a492:	440a      	add	r2, r1
 800a494:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a498:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a49c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a49e:	e006      	b.n	800a4ae <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	77fb      	strb	r3, [r7, #31]
      break;
 800a4a4:	e004      	b.n	800a4b0 <USB_HC_Init+0x148>
      break;
 800a4a6:	bf00      	nop
 800a4a8:	e002      	b.n	800a4b0 <USB_HC_Init+0x148>
      break;
 800a4aa:	bf00      	nop
 800a4ac:	e000      	b.n	800a4b0 <USB_HC_Init+0x148>
      break;
 800a4ae:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a4b0:	78fb      	ldrb	r3, [r7, #3]
 800a4b2:	015a      	lsls	r2, r3, #5
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	4413      	add	r3, r2
 800a4b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4bc:	461a      	mov	r2, r3
 800a4be:	2300      	movs	r3, #0
 800a4c0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a4c2:	78fb      	ldrb	r3, [r7, #3]
 800a4c4:	015a      	lsls	r2, r3, #5
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	4413      	add	r3, r2
 800a4ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	78fa      	ldrb	r2, [r7, #3]
 800a4d2:	0151      	lsls	r1, r2, #5
 800a4d4:	693a      	ldr	r2, [r7, #16]
 800a4d6:	440a      	add	r2, r1
 800a4d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4dc:	f043 0302 	orr.w	r3, r3, #2
 800a4e0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4e8:	699a      	ldr	r2, [r3, #24]
 800a4ea:	78fb      	ldrb	r3, [r7, #3]
 800a4ec:	f003 030f 	and.w	r3, r3, #15
 800a4f0:	2101      	movs	r1, #1
 800a4f2:	fa01 f303 	lsl.w	r3, r1, r3
 800a4f6:	6939      	ldr	r1, [r7, #16]
 800a4f8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	699b      	ldr	r3, [r3, #24]
 800a504:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a50c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a510:	2b00      	cmp	r3, #0
 800a512:	da03      	bge.n	800a51c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a514:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a518:	61bb      	str	r3, [r7, #24]
 800a51a:	e001      	b.n	800a520 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800a51c:	2300      	movs	r3, #0
 800a51e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f7ff fef9 	bl	800a318 <USB_GetHostSpeed>
 800a526:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a528:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	d106      	bne.n	800a53e <USB_HC_Init+0x1d6>
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2b02      	cmp	r3, #2
 800a534:	d003      	beq.n	800a53e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a536:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a53a:	617b      	str	r3, [r7, #20]
 800a53c:	e001      	b.n	800a542 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a53e:	2300      	movs	r3, #0
 800a540:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a542:	787b      	ldrb	r3, [r7, #1]
 800a544:	059b      	lsls	r3, r3, #22
 800a546:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a54a:	78bb      	ldrb	r3, [r7, #2]
 800a54c:	02db      	lsls	r3, r3, #11
 800a54e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a552:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a554:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a558:	049b      	lsls	r3, r3, #18
 800a55a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a55e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800a560:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a562:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a566:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	431a      	orrs	r2, r3
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a570:	78fa      	ldrb	r2, [r7, #3]
 800a572:	0151      	lsls	r1, r2, #5
 800a574:	693a      	ldr	r2, [r7, #16]
 800a576:	440a      	add	r2, r1
 800a578:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a57c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a580:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a582:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a586:	2b03      	cmp	r3, #3
 800a588:	d003      	beq.n	800a592 <USB_HC_Init+0x22a>
 800a58a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d10f      	bne.n	800a5b2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a592:	78fb      	ldrb	r3, [r7, #3]
 800a594:	015a      	lsls	r2, r3, #5
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	4413      	add	r3, r2
 800a59a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	78fa      	ldrb	r2, [r7, #3]
 800a5a2:	0151      	lsls	r1, r2, #5
 800a5a4:	693a      	ldr	r2, [r7, #16]
 800a5a6:	440a      	add	r2, r1
 800a5a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a5b0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a5b2:	7ffb      	ldrb	r3, [r7, #31]
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3720      	adds	r7, #32
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	40040000 	.word	0x40040000

0800a5c0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b08c      	sub	sp, #48	; 0x30
 800a5c4:	af02      	add	r7, sp, #8
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	785b      	ldrb	r3, [r3, #1]
 800a5d6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800a5d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5dc:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	4a5d      	ldr	r2, [pc, #372]	; (800a758 <USB_HC_StartXfer+0x198>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d12f      	bne.n	800a646 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800a5e6:	79fb      	ldrb	r3, [r7, #7]
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d11c      	bne.n	800a626 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	7c9b      	ldrb	r3, [r3, #18]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d003      	beq.n	800a5fc <USB_HC_StartXfer+0x3c>
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	7c9b      	ldrb	r3, [r3, #18]
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	d124      	bne.n	800a646 <USB_HC_StartXfer+0x86>
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	799b      	ldrb	r3, [r3, #6]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d120      	bne.n	800a646 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a604:	69fb      	ldr	r3, [r7, #28]
 800a606:	015a      	lsls	r2, r3, #5
 800a608:	6a3b      	ldr	r3, [r7, #32]
 800a60a:	4413      	add	r3, r2
 800a60c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	69fa      	ldr	r2, [r7, #28]
 800a614:	0151      	lsls	r1, r2, #5
 800a616:	6a3a      	ldr	r2, [r7, #32]
 800a618:	440a      	add	r2, r1
 800a61a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a61e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a622:	60d3      	str	r3, [r2, #12]
 800a624:	e00f      	b.n	800a646 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	791b      	ldrb	r3, [r3, #4]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d10b      	bne.n	800a646 <USB_HC_StartXfer+0x86>
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	795b      	ldrb	r3, [r3, #5]
 800a632:	2b01      	cmp	r3, #1
 800a634:	d107      	bne.n	800a646 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	785b      	ldrb	r3, [r3, #1]
 800a63a:	4619      	mov	r1, r3
 800a63c:	68f8      	ldr	r0, [r7, #12]
 800a63e:	f000 fb6b 	bl	800ad18 <USB_DoPing>
        return HAL_OK;
 800a642:	2300      	movs	r3, #0
 800a644:	e232      	b.n	800aaac <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	799b      	ldrb	r3, [r3, #6]
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d158      	bne.n	800a700 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800a64e:	2301      	movs	r3, #1
 800a650:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	78db      	ldrb	r3, [r3, #3]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d007      	beq.n	800a66a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a65a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a65c:	68ba      	ldr	r2, [r7, #8]
 800a65e:	8a92      	ldrh	r2, [r2, #20]
 800a660:	fb03 f202 	mul.w	r2, r3, r2
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	61da      	str	r2, [r3, #28]
 800a668:	e07c      	b.n	800a764 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	7c9b      	ldrb	r3, [r3, #18]
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d130      	bne.n	800a6d4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	6a1b      	ldr	r3, [r3, #32]
 800a676:	2bbc      	cmp	r3, #188	; 0xbc
 800a678:	d918      	bls.n	800a6ac <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	8a9b      	ldrh	r3, [r3, #20]
 800a67e:	461a      	mov	r2, r3
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	69da      	ldr	r2, [r3, #28]
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	2b01      	cmp	r3, #1
 800a692:	d003      	beq.n	800a69c <USB_HC_StartXfer+0xdc>
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	2b02      	cmp	r3, #2
 800a69a:	d103      	bne.n	800a6a4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	2202      	movs	r2, #2
 800a6a0:	60da      	str	r2, [r3, #12]
 800a6a2:	e05f      	b.n	800a764 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	60da      	str	r2, [r3, #12]
 800a6aa:	e05b      	b.n	800a764 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	6a1a      	ldr	r2, [r3, #32]
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d007      	beq.n	800a6cc <USB_HC_StartXfer+0x10c>
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	2b02      	cmp	r3, #2
 800a6c2:	d003      	beq.n	800a6cc <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	2204      	movs	r2, #4
 800a6c8:	60da      	str	r2, [r3, #12]
 800a6ca:	e04b      	b.n	800a764 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	2203      	movs	r2, #3
 800a6d0:	60da      	str	r2, [r3, #12]
 800a6d2:	e047      	b.n	800a764 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800a6d4:	79fb      	ldrb	r3, [r7, #7]
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d10d      	bne.n	800a6f6 <USB_HC_StartXfer+0x136>
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	6a1b      	ldr	r3, [r3, #32]
 800a6de:	68ba      	ldr	r2, [r7, #8]
 800a6e0:	8a92      	ldrh	r2, [r2, #20]
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d907      	bls.n	800a6f6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a6e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a6e8:	68ba      	ldr	r2, [r7, #8]
 800a6ea:	8a92      	ldrh	r2, [r2, #20]
 800a6ec:	fb03 f202 	mul.w	r2, r3, r2
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	61da      	str	r2, [r3, #28]
 800a6f4:	e036      	b.n	800a764 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	6a1a      	ldr	r2, [r3, #32]
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	61da      	str	r2, [r3, #28]
 800a6fe:	e031      	b.n	800a764 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	6a1b      	ldr	r3, [r3, #32]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d018      	beq.n	800a73a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	6a1b      	ldr	r3, [r3, #32]
 800a70c:	68ba      	ldr	r2, [r7, #8]
 800a70e:	8a92      	ldrh	r2, [r2, #20]
 800a710:	4413      	add	r3, r2
 800a712:	3b01      	subs	r3, #1
 800a714:	68ba      	ldr	r2, [r7, #8]
 800a716:	8a92      	ldrh	r2, [r2, #20]
 800a718:	fbb3 f3f2 	udiv	r3, r3, r2
 800a71c:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 800a71e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a720:	8b7b      	ldrh	r3, [r7, #26]
 800a722:	429a      	cmp	r2, r3
 800a724:	d90b      	bls.n	800a73e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800a726:	8b7b      	ldrh	r3, [r7, #26]
 800a728:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a72a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a72c:	68ba      	ldr	r2, [r7, #8]
 800a72e:	8a92      	ldrh	r2, [r2, #20]
 800a730:	fb03 f202 	mul.w	r2, r3, r2
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	61da      	str	r2, [r3, #28]
 800a738:	e001      	b.n	800a73e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800a73a:	2301      	movs	r3, #1
 800a73c:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	78db      	ldrb	r3, [r3, #3]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00a      	beq.n	800a75c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a746:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a748:	68ba      	ldr	r2, [r7, #8]
 800a74a:	8a92      	ldrh	r2, [r2, #20]
 800a74c:	fb03 f202 	mul.w	r2, r3, r2
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	61da      	str	r2, [r3, #28]
 800a754:	e006      	b.n	800a764 <USB_HC_StartXfer+0x1a4>
 800a756:	bf00      	nop
 800a758:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	6a1a      	ldr	r2, [r3, #32]
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	69db      	ldr	r3, [r3, #28]
 800a768:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a76c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a76e:	04d9      	lsls	r1, r3, #19
 800a770:	4ba3      	ldr	r3, [pc, #652]	; (800aa00 <USB_HC_StartXfer+0x440>)
 800a772:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a774:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	7d9b      	ldrb	r3, [r3, #22]
 800a77a:	075b      	lsls	r3, r3, #29
 800a77c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a780:	69f9      	ldr	r1, [r7, #28]
 800a782:	0148      	lsls	r0, r1, #5
 800a784:	6a39      	ldr	r1, [r7, #32]
 800a786:	4401      	add	r1, r0
 800a788:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a78c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a78e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a790:	79fb      	ldrb	r3, [r7, #7]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d009      	beq.n	800a7aa <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	6999      	ldr	r1, [r3, #24]
 800a79a:	69fb      	ldr	r3, [r7, #28]
 800a79c:	015a      	lsls	r2, r3, #5
 800a79e:	6a3b      	ldr	r3, [r7, #32]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7a6:	460a      	mov	r2, r1
 800a7a8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a7aa:	6a3b      	ldr	r3, [r7, #32]
 800a7ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	f003 0301 	and.w	r3, r3, #1
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	bf0c      	ite	eq
 800a7ba:	2301      	moveq	r3, #1
 800a7bc:	2300      	movne	r3, #0
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	015a      	lsls	r2, r3, #5
 800a7c6:	6a3b      	ldr	r3, [r7, #32]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	69fa      	ldr	r2, [r7, #28]
 800a7d2:	0151      	lsls	r1, r2, #5
 800a7d4:	6a3a      	ldr	r2, [r7, #32]
 800a7d6:	440a      	add	r2, r1
 800a7d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a7e0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a7e2:	69fb      	ldr	r3, [r7, #28]
 800a7e4:	015a      	lsls	r2, r3, #5
 800a7e6:	6a3b      	ldr	r3, [r7, #32]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	7e7b      	ldrb	r3, [r7, #25]
 800a7f2:	075b      	lsls	r3, r3, #29
 800a7f4:	69f9      	ldr	r1, [r7, #28]
 800a7f6:	0148      	lsls	r0, r1, #5
 800a7f8:	6a39      	ldr	r1, [r7, #32]
 800a7fa:	4401      	add	r1, r0
 800a7fc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a800:	4313      	orrs	r3, r2
 800a802:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	799b      	ldrb	r3, [r3, #6]
 800a808:	2b01      	cmp	r3, #1
 800a80a:	f040 80c3 	bne.w	800a994 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	7c5b      	ldrb	r3, [r3, #17]
 800a812:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a818:	4313      	orrs	r3, r2
 800a81a:	69fa      	ldr	r2, [r7, #28]
 800a81c:	0151      	lsls	r1, r2, #5
 800a81e:	6a3a      	ldr	r2, [r7, #32]
 800a820:	440a      	add	r2, r1
 800a822:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a826:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a82a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	015a      	lsls	r2, r3, #5
 800a830:	6a3b      	ldr	r3, [r7, #32]
 800a832:	4413      	add	r3, r2
 800a834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	69fa      	ldr	r2, [r7, #28]
 800a83c:	0151      	lsls	r1, r2, #5
 800a83e:	6a3a      	ldr	r2, [r7, #32]
 800a840:	440a      	add	r2, r1
 800a842:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a846:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a84a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	79db      	ldrb	r3, [r3, #7]
 800a850:	2b01      	cmp	r3, #1
 800a852:	d123      	bne.n	800a89c <USB_HC_StartXfer+0x2dc>
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	78db      	ldrb	r3, [r3, #3]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d11f      	bne.n	800a89c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a85c:	69fb      	ldr	r3, [r7, #28]
 800a85e:	015a      	lsls	r2, r3, #5
 800a860:	6a3b      	ldr	r3, [r7, #32]
 800a862:	4413      	add	r3, r2
 800a864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	69fa      	ldr	r2, [r7, #28]
 800a86c:	0151      	lsls	r1, r2, #5
 800a86e:	6a3a      	ldr	r2, [r7, #32]
 800a870:	440a      	add	r2, r1
 800a872:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a87a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	015a      	lsls	r2, r3, #5
 800a880:	6a3b      	ldr	r3, [r7, #32]
 800a882:	4413      	add	r3, r2
 800a884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a888:	68db      	ldr	r3, [r3, #12]
 800a88a:	69fa      	ldr	r2, [r7, #28]
 800a88c:	0151      	lsls	r1, r2, #5
 800a88e:	6a3a      	ldr	r2, [r7, #32]
 800a890:	440a      	add	r2, r1
 800a892:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a89a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	7c9b      	ldrb	r3, [r3, #18]
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d003      	beq.n	800a8ac <USB_HC_StartXfer+0x2ec>
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	7c9b      	ldrb	r3, [r3, #18]
 800a8a8:	2b03      	cmp	r3, #3
 800a8aa:	d117      	bne.n	800a8dc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d113      	bne.n	800a8dc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	78db      	ldrb	r3, [r3, #3]
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d10f      	bne.n	800a8dc <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	015a      	lsls	r2, r3, #5
 800a8c0:	6a3b      	ldr	r3, [r7, #32]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	69fa      	ldr	r2, [r7, #28]
 800a8cc:	0151      	lsls	r1, r2, #5
 800a8ce:	6a3a      	ldr	r2, [r7, #32]
 800a8d0:	440a      	add	r2, r1
 800a8d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8da:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	7c9b      	ldrb	r3, [r3, #18]
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d162      	bne.n	800a9aa <USB_HC_StartXfer+0x3ea>
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	78db      	ldrb	r3, [r3, #3]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d15e      	bne.n	800a9aa <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	3b01      	subs	r3, #1
 800a8f2:	2b03      	cmp	r3, #3
 800a8f4:	d858      	bhi.n	800a9a8 <USB_HC_StartXfer+0x3e8>
 800a8f6:	a201      	add	r2, pc, #4	; (adr r2, 800a8fc <USB_HC_StartXfer+0x33c>)
 800a8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8fc:	0800a90d 	.word	0x0800a90d
 800a900:	0800a92f 	.word	0x0800a92f
 800a904:	0800a951 	.word	0x0800a951
 800a908:	0800a973 	.word	0x0800a973
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	015a      	lsls	r2, r3, #5
 800a910:	6a3b      	ldr	r3, [r7, #32]
 800a912:	4413      	add	r3, r2
 800a914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	69fa      	ldr	r2, [r7, #28]
 800a91c:	0151      	lsls	r1, r2, #5
 800a91e:	6a3a      	ldr	r2, [r7, #32]
 800a920:	440a      	add	r2, r1
 800a922:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a92a:	6053      	str	r3, [r2, #4]
          break;
 800a92c:	e03d      	b.n	800a9aa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	015a      	lsls	r2, r3, #5
 800a932:	6a3b      	ldr	r3, [r7, #32]
 800a934:	4413      	add	r3, r2
 800a936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	69fa      	ldr	r2, [r7, #28]
 800a93e:	0151      	lsls	r1, r2, #5
 800a940:	6a3a      	ldr	r2, [r7, #32]
 800a942:	440a      	add	r2, r1
 800a944:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a948:	f043 030e 	orr.w	r3, r3, #14
 800a94c:	6053      	str	r3, [r2, #4]
          break;
 800a94e:	e02c      	b.n	800a9aa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800a950:	69fb      	ldr	r3, [r7, #28]
 800a952:	015a      	lsls	r2, r3, #5
 800a954:	6a3b      	ldr	r3, [r7, #32]
 800a956:	4413      	add	r3, r2
 800a958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	69fa      	ldr	r2, [r7, #28]
 800a960:	0151      	lsls	r1, r2, #5
 800a962:	6a3a      	ldr	r2, [r7, #32]
 800a964:	440a      	add	r2, r1
 800a966:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a96a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a96e:	6053      	str	r3, [r2, #4]
          break;
 800a970:	e01b      	b.n	800a9aa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	015a      	lsls	r2, r3, #5
 800a976:	6a3b      	ldr	r3, [r7, #32]
 800a978:	4413      	add	r3, r2
 800a97a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	69fa      	ldr	r2, [r7, #28]
 800a982:	0151      	lsls	r1, r2, #5
 800a984:	6a3a      	ldr	r2, [r7, #32]
 800a986:	440a      	add	r2, r1
 800a988:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a98c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a990:	6053      	str	r3, [r2, #4]
          break;
 800a992:	e00a      	b.n	800a9aa <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a994:	69fb      	ldr	r3, [r7, #28]
 800a996:	015a      	lsls	r2, r3, #5
 800a998:	6a3b      	ldr	r3, [r7, #32]
 800a99a:	4413      	add	r3, r2
 800a99c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	6053      	str	r3, [r2, #4]
 800a9a6:	e000      	b.n	800a9aa <USB_HC_StartXfer+0x3ea>
          break;
 800a9a8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a9aa:	69fb      	ldr	r3, [r7, #28]
 800a9ac:	015a      	lsls	r2, r3, #5
 800a9ae:	6a3b      	ldr	r3, [r7, #32]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a9c0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	78db      	ldrb	r3, [r3, #3]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d004      	beq.n	800a9d4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9d0:	613b      	str	r3, [r7, #16]
 800a9d2:	e003      	b.n	800a9dc <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a9da:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a9e2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	015a      	lsls	r2, r3, #5
 800a9e8:	6a3b      	ldr	r3, [r7, #32]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a9f6:	79fb      	ldrb	r3, [r7, #7]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d003      	beq.n	800aa04 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	e055      	b.n	800aaac <USB_HC_StartXfer+0x4ec>
 800aa00:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	78db      	ldrb	r3, [r3, #3]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d14e      	bne.n	800aaaa <USB_HC_StartXfer+0x4ea>
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	6a1b      	ldr	r3, [r3, #32]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d04a      	beq.n	800aaaa <USB_HC_StartXfer+0x4ea>
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	79db      	ldrb	r3, [r3, #7]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d146      	bne.n	800aaaa <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	7c9b      	ldrb	r3, [r3, #18]
 800aa20:	2b03      	cmp	r3, #3
 800aa22:	d831      	bhi.n	800aa88 <USB_HC_StartXfer+0x4c8>
 800aa24:	a201      	add	r2, pc, #4	; (adr r2, 800aa2c <USB_HC_StartXfer+0x46c>)
 800aa26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa2a:	bf00      	nop
 800aa2c:	0800aa3d 	.word	0x0800aa3d
 800aa30:	0800aa61 	.word	0x0800aa61
 800aa34:	0800aa3d 	.word	0x0800aa3d
 800aa38:	0800aa61 	.word	0x0800aa61
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	6a1b      	ldr	r3, [r3, #32]
 800aa40:	3303      	adds	r3, #3
 800aa42:	089b      	lsrs	r3, r3, #2
 800aa44:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800aa46:	8afa      	ldrh	r2, [r7, #22]
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d91c      	bls.n	800aa8c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	699b      	ldr	r3, [r3, #24]
 800aa56:	f043 0220 	orr.w	r2, r3, #32
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	619a      	str	r2, [r3, #24]
        }
        break;
 800aa5e:	e015      	b.n	800aa8c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	6a1b      	ldr	r3, [r3, #32]
 800aa64:	3303      	adds	r3, #3
 800aa66:	089b      	lsrs	r3, r3, #2
 800aa68:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800aa6a:	8afa      	ldrh	r2, [r7, #22]
 800aa6c:	6a3b      	ldr	r3, [r7, #32]
 800aa6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d90a      	bls.n	800aa90 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	699b      	ldr	r3, [r3, #24]
 800aa7e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	619a      	str	r2, [r3, #24]
        }
        break;
 800aa86:	e003      	b.n	800aa90 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800aa88:	bf00      	nop
 800aa8a:	e002      	b.n	800aa92 <USB_HC_StartXfer+0x4d2>
        break;
 800aa8c:	bf00      	nop
 800aa8e:	e000      	b.n	800aa92 <USB_HC_StartXfer+0x4d2>
        break;
 800aa90:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	6999      	ldr	r1, [r3, #24]
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	785a      	ldrb	r2, [r3, #1]
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	6a1b      	ldr	r3, [r3, #32]
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	2000      	movs	r0, #0
 800aaa2:	9000      	str	r0, [sp, #0]
 800aaa4:	68f8      	ldr	r0, [r7, #12]
 800aaa6:	f7ff f9c9 	bl	8009e3c <USB_WritePacket>
  }

  return HAL_OK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3728      	adds	r7, #40	; 0x28
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aac6:	695b      	ldr	r3, [r3, #20]
 800aac8:	b29b      	uxth	r3, r3
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3714      	adds	r7, #20
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr

0800aad6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800aad6:	b480      	push	{r7}
 800aad8:	b089      	sub	sp, #36	; 0x24
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
 800aade:	460b      	mov	r3, r1
 800aae0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800aae6:	78fb      	ldrb	r3, [r7, #3]
 800aae8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800aaea:	2300      	movs	r3, #0
 800aaec:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	015a      	lsls	r2, r3, #5
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	0c9b      	lsrs	r3, r3, #18
 800aafe:	f003 0303 	and.w	r3, r3, #3
 800ab02:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800ab04:	69bb      	ldr	r3, [r7, #24]
 800ab06:	015a      	lsls	r2, r3, #5
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	0fdb      	lsrs	r3, r3, #31
 800ab14:	f003 0301 	and.w	r3, r3, #1
 800ab18:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800ab1a:	69bb      	ldr	r3, [r7, #24]
 800ab1c:	015a      	lsls	r2, r3, #5
 800ab1e:	69fb      	ldr	r3, [r7, #28]
 800ab20:	4413      	add	r3, r2
 800ab22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	0fdb      	lsrs	r3, r3, #31
 800ab2a:	f003 0301 	and.w	r3, r3, #1
 800ab2e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	f003 0320 	and.w	r3, r3, #32
 800ab38:	2b20      	cmp	r3, #32
 800ab3a:	d10d      	bne.n	800ab58 <USB_HC_Halt+0x82>
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d10a      	bne.n	800ab58 <USB_HC_Halt+0x82>
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d005      	beq.n	800ab54 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d002      	beq.n	800ab54 <USB_HC_Halt+0x7e>
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	2b03      	cmp	r3, #3
 800ab52:	d101      	bne.n	800ab58 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800ab54:	2300      	movs	r3, #0
 800ab56:	e0d8      	b.n	800ad0a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d002      	beq.n	800ab64 <USB_HC_Halt+0x8e>
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	d173      	bne.n	800ac4c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	015a      	lsls	r2, r3, #5
 800ab68:	69fb      	ldr	r3, [r7, #28]
 800ab6a:	4413      	add	r3, r2
 800ab6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	69ba      	ldr	r2, [r7, #24]
 800ab74:	0151      	lsls	r1, r2, #5
 800ab76:	69fa      	ldr	r2, [r7, #28]
 800ab78:	440a      	add	r2, r1
 800ab7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab82:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	f003 0320 	and.w	r3, r3, #32
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d14a      	bne.n	800ac26 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d133      	bne.n	800ac04 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ab9c:	69bb      	ldr	r3, [r7, #24]
 800ab9e:	015a      	lsls	r2, r3, #5
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	4413      	add	r3, r2
 800aba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	69ba      	ldr	r2, [r7, #24]
 800abac:	0151      	lsls	r1, r2, #5
 800abae:	69fa      	ldr	r2, [r7, #28]
 800abb0:	440a      	add	r2, r1
 800abb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800abba:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800abbc:	69bb      	ldr	r3, [r7, #24]
 800abbe:	015a      	lsls	r2, r3, #5
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	4413      	add	r3, r2
 800abc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	69ba      	ldr	r2, [r7, #24]
 800abcc:	0151      	lsls	r1, r2, #5
 800abce:	69fa      	ldr	r2, [r7, #28]
 800abd0:	440a      	add	r2, r1
 800abd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800abda:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	3301      	adds	r3, #1
 800abe0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800abe8:	d82e      	bhi.n	800ac48 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	015a      	lsls	r2, r3, #5
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	4413      	add	r3, r2
 800abf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac00:	d0ec      	beq.n	800abdc <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ac02:	e081      	b.n	800ad08 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	015a      	lsls	r2, r3, #5
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	69ba      	ldr	r2, [r7, #24]
 800ac14:	0151      	lsls	r1, r2, #5
 800ac16:	69fa      	ldr	r2, [r7, #28]
 800ac18:	440a      	add	r2, r1
 800ac1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac22:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ac24:	e070      	b.n	800ad08 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	015a      	lsls	r2, r3, #5
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	69ba      	ldr	r2, [r7, #24]
 800ac36:	0151      	lsls	r1, r2, #5
 800ac38:	69fa      	ldr	r2, [r7, #28]
 800ac3a:	440a      	add	r2, r1
 800ac3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac44:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ac46:	e05f      	b.n	800ad08 <USB_HC_Halt+0x232>
            break;
 800ac48:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ac4a:	e05d      	b.n	800ad08 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	015a      	lsls	r2, r3, #5
 800ac50:	69fb      	ldr	r3, [r7, #28]
 800ac52:	4413      	add	r3, r2
 800ac54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	69ba      	ldr	r2, [r7, #24]
 800ac5c:	0151      	lsls	r1, r2, #5
 800ac5e:	69fa      	ldr	r2, [r7, #28]
 800ac60:	440a      	add	r2, r1
 800ac62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac6a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac72:	691b      	ldr	r3, [r3, #16]
 800ac74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d133      	bne.n	800ace4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	015a      	lsls	r2, r3, #5
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	4413      	add	r3, r2
 800ac84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	69ba      	ldr	r2, [r7, #24]
 800ac8c:	0151      	lsls	r1, r2, #5
 800ac8e:	69fa      	ldr	r2, [r7, #28]
 800ac90:	440a      	add	r2, r1
 800ac92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac9a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	015a      	lsls	r2, r3, #5
 800aca0:	69fb      	ldr	r3, [r7, #28]
 800aca2:	4413      	add	r3, r2
 800aca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	69ba      	ldr	r2, [r7, #24]
 800acac:	0151      	lsls	r1, r2, #5
 800acae:	69fa      	ldr	r2, [r7, #28]
 800acb0:	440a      	add	r2, r1
 800acb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800acba:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	3301      	adds	r3, #1
 800acc0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acc8:	d81d      	bhi.n	800ad06 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	015a      	lsls	r2, r3, #5
 800acce:	69fb      	ldr	r3, [r7, #28]
 800acd0:	4413      	add	r3, r2
 800acd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800acdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ace0:	d0ec      	beq.n	800acbc <USB_HC_Halt+0x1e6>
 800ace2:	e011      	b.n	800ad08 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	015a      	lsls	r2, r3, #5
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	4413      	add	r3, r2
 800acec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	69ba      	ldr	r2, [r7, #24]
 800acf4:	0151      	lsls	r1, r2, #5
 800acf6:	69fa      	ldr	r2, [r7, #28]
 800acf8:	440a      	add	r2, r1
 800acfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad02:	6013      	str	r3, [r2, #0]
 800ad04:	e000      	b.n	800ad08 <USB_HC_Halt+0x232>
          break;
 800ad06:	bf00      	nop
    }
  }

  return HAL_OK;
 800ad08:	2300      	movs	r3, #0
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3724      	adds	r7, #36	; 0x24
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr
	...

0800ad18 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b087      	sub	sp, #28
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	460b      	mov	r3, r1
 800ad22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800ad28:	78fb      	ldrb	r3, [r7, #3]
 800ad2a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	04da      	lsls	r2, r3, #19
 800ad34:	4b15      	ldr	r3, [pc, #84]	; (800ad8c <USB_DoPing+0x74>)
 800ad36:	4013      	ands	r3, r2
 800ad38:	693a      	ldr	r2, [r7, #16]
 800ad3a:	0151      	lsls	r1, r2, #5
 800ad3c:	697a      	ldr	r2, [r7, #20]
 800ad3e:	440a      	add	r2, r1
 800ad40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad48:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	015a      	lsls	r2, r3, #5
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	4413      	add	r3, r2
 800ad52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ad60:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad68:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	015a      	lsls	r2, r3, #5
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	4413      	add	r3, r2
 800ad72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad76:	461a      	mov	r2, r3
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	371c      	adds	r7, #28
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr
 800ad8a:	bf00      	nop
 800ad8c:	1ff80000 	.word	0x1ff80000

0800ad90 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b088      	sub	sp, #32
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800ada0:	2300      	movs	r3, #0
 800ada2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f7fe ff8c 	bl	8009cc2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800adaa:	2110      	movs	r1, #16
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f7fe ffe5 	bl	8009d7c <USB_FlushTxFifo>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d001      	beq.n	800adbc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800adb8:	2301      	movs	r3, #1
 800adba:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f7ff f80f 	bl	8009de0 <USB_FlushRxFifo>
 800adc2:	4603      	mov	r3, r0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d001      	beq.n	800adcc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800adc8:	2301      	movs	r3, #1
 800adca:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800adcc:	2300      	movs	r3, #0
 800adce:	61bb      	str	r3, [r7, #24]
 800add0:	e01f      	b.n	800ae12 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800add2:	69bb      	ldr	r3, [r7, #24]
 800add4:	015a      	lsls	r2, r3, #5
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	4413      	add	r3, r2
 800adda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ade8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800adf0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800adf8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800adfa:	69bb      	ldr	r3, [r7, #24]
 800adfc:	015a      	lsls	r2, r3, #5
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	4413      	add	r3, r2
 800ae02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae06:	461a      	mov	r2, r3
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	61bb      	str	r3, [r7, #24]
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	2b0f      	cmp	r3, #15
 800ae16:	d9dc      	bls.n	800add2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ae18:	2300      	movs	r3, #0
 800ae1a:	61bb      	str	r3, [r7, #24]
 800ae1c:	e034      	b.n	800ae88 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800ae1e:	69bb      	ldr	r3, [r7, #24]
 800ae20:	015a      	lsls	r2, r3, #5
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	4413      	add	r3, r2
 800ae26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae34:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae3c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ae44:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ae46:	69bb      	ldr	r3, [r7, #24]
 800ae48:	015a      	lsls	r2, r3, #5
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae52:	461a      	mov	r2, r3
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae64:	d80c      	bhi.n	800ae80 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ae66:	69bb      	ldr	r3, [r7, #24]
 800ae68:	015a      	lsls	r2, r3, #5
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae7c:	d0ec      	beq.n	800ae58 <USB_StopHost+0xc8>
 800ae7e:	e000      	b.n	800ae82 <USB_StopHost+0xf2>
        break;
 800ae80:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	3301      	adds	r3, #1
 800ae86:	61bb      	str	r3, [r7, #24]
 800ae88:	69bb      	ldr	r3, [r7, #24]
 800ae8a:	2b0f      	cmp	r3, #15
 800ae8c:	d9c7      	bls.n	800ae1e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae94:	461a      	mov	r2, r3
 800ae96:	f04f 33ff 	mov.w	r3, #4294967295
 800ae9a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f04f 32ff 	mov.w	r2, #4294967295
 800aea2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f7fe fefb 	bl	8009ca0 <USB_EnableGlobalInt>

  return ret;
 800aeaa:	7ffb      	ldrb	r3, [r7, #31]
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3720      	adds	r7, #32
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800aeb4:	b590      	push	{r4, r7, lr}
 800aeb6:	b089      	sub	sp, #36	; 0x24
 800aeb8:	af04      	add	r7, sp, #16
 800aeba:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800aebc:	2301      	movs	r3, #1
 800aebe:	2202      	movs	r2, #2
 800aec0:	2102      	movs	r1, #2
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 fc85 	bl	800b7d2 <USBH_FindInterface>
 800aec8:	4603      	mov	r3, r0
 800aeca:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800aecc:	7bfb      	ldrb	r3, [r7, #15]
 800aece:	2bff      	cmp	r3, #255	; 0xff
 800aed0:	d002      	beq.n	800aed8 <USBH_CDC_InterfaceInit+0x24>
 800aed2:	7bfb      	ldrb	r3, [r7, #15]
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d901      	bls.n	800aedc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800aed8:	2302      	movs	r3, #2
 800aeda:	e13d      	b.n	800b158 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800aedc:	7bfb      	ldrb	r3, [r7, #15]
 800aede:	4619      	mov	r1, r3
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f000 fc5a 	bl	800b79a <USBH_SelectInterface>
 800aee6:	4603      	mov	r3, r0
 800aee8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800aeea:	7bbb      	ldrb	r3, [r7, #14]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d001      	beq.n	800aef4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800aef0:	2302      	movs	r3, #2
 800aef2:	e131      	b.n	800b158 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800aefa:	2050      	movs	r0, #80	; 0x50
 800aefc:	f002 fb78 	bl	800d5f0 <malloc>
 800af00:	4603      	mov	r3, r0
 800af02:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af0a:	69db      	ldr	r3, [r3, #28]
 800af0c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d101      	bne.n	800af18 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800af14:	2302      	movs	r3, #2
 800af16:	e11f      	b.n	800b158 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800af18:	2250      	movs	r2, #80	; 0x50
 800af1a:	2100      	movs	r1, #0
 800af1c:	68b8      	ldr	r0, [r7, #8]
 800af1e:	f004 f9dc 	bl	800f2da <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800af22:	7bfb      	ldrb	r3, [r7, #15]
 800af24:	687a      	ldr	r2, [r7, #4]
 800af26:	211a      	movs	r1, #26
 800af28:	fb01 f303 	mul.w	r3, r1, r3
 800af2c:	4413      	add	r3, r2
 800af2e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	b25b      	sxtb	r3, r3
 800af36:	2b00      	cmp	r3, #0
 800af38:	da15      	bge.n	800af66 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800af3a:	7bfb      	ldrb	r3, [r7, #15]
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	211a      	movs	r1, #26
 800af40:	fb01 f303 	mul.w	r3, r1, r3
 800af44:	4413      	add	r3, r2
 800af46:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800af4a:	781a      	ldrb	r2, [r3, #0]
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800af50:	7bfb      	ldrb	r3, [r7, #15]
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	211a      	movs	r1, #26
 800af56:	fb01 f303 	mul.w	r3, r1, r3
 800af5a:	4413      	add	r3, r2
 800af5c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800af60:	881a      	ldrh	r2, [r3, #0]
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	785b      	ldrb	r3, [r3, #1]
 800af6a:	4619      	mov	r1, r3
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f001 ffce 	bl	800cf0e <USBH_AllocPipe>
 800af72:	4603      	mov	r3, r0
 800af74:	461a      	mov	r2, r3
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	7819      	ldrb	r1, [r3, #0]
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	7858      	ldrb	r0, [r3, #1]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800af8e:	68ba      	ldr	r2, [r7, #8]
 800af90:	8952      	ldrh	r2, [r2, #10]
 800af92:	9202      	str	r2, [sp, #8]
 800af94:	2203      	movs	r2, #3
 800af96:	9201      	str	r2, [sp, #4]
 800af98:	9300      	str	r3, [sp, #0]
 800af9a:	4623      	mov	r3, r4
 800af9c:	4602      	mov	r2, r0
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f001 ff86 	bl	800ceb0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	2200      	movs	r2, #0
 800afaa:	4619      	mov	r1, r3
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f002 fa95 	bl	800d4dc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800afb2:	2300      	movs	r3, #0
 800afb4:	2200      	movs	r2, #0
 800afb6:	210a      	movs	r1, #10
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 fc0a 	bl	800b7d2 <USBH_FindInterface>
 800afbe:	4603      	mov	r3, r0
 800afc0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800afc2:	7bfb      	ldrb	r3, [r7, #15]
 800afc4:	2bff      	cmp	r3, #255	; 0xff
 800afc6:	d002      	beq.n	800afce <USBH_CDC_InterfaceInit+0x11a>
 800afc8:	7bfb      	ldrb	r3, [r7, #15]
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d901      	bls.n	800afd2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800afce:	2302      	movs	r3, #2
 800afd0:	e0c2      	b.n	800b158 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800afd2:	7bfb      	ldrb	r3, [r7, #15]
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	211a      	movs	r1, #26
 800afd8:	fb01 f303 	mul.w	r3, r1, r3
 800afdc:	4413      	add	r3, r2
 800afde:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	b25b      	sxtb	r3, r3
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	da16      	bge.n	800b018 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800afea:	7bfb      	ldrb	r3, [r7, #15]
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	211a      	movs	r1, #26
 800aff0:	fb01 f303 	mul.w	r3, r1, r3
 800aff4:	4413      	add	r3, r2
 800aff6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800affa:	781a      	ldrb	r2, [r3, #0]
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b000:	7bfb      	ldrb	r3, [r7, #15]
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	211a      	movs	r1, #26
 800b006:	fb01 f303 	mul.w	r3, r1, r3
 800b00a:	4413      	add	r3, r2
 800b00c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b010:	881a      	ldrh	r2, [r3, #0]
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	835a      	strh	r2, [r3, #26]
 800b016:	e015      	b.n	800b044 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b018:	7bfb      	ldrb	r3, [r7, #15]
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	211a      	movs	r1, #26
 800b01e:	fb01 f303 	mul.w	r3, r1, r3
 800b022:	4413      	add	r3, r2
 800b024:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b028:	781a      	ldrb	r2, [r3, #0]
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b02e:	7bfb      	ldrb	r3, [r7, #15]
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	211a      	movs	r1, #26
 800b034:	fb01 f303 	mul.w	r3, r1, r3
 800b038:	4413      	add	r3, r2
 800b03a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b03e:	881a      	ldrh	r2, [r3, #0]
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800b044:	7bfb      	ldrb	r3, [r7, #15]
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	211a      	movs	r1, #26
 800b04a:	fb01 f303 	mul.w	r3, r1, r3
 800b04e:	4413      	add	r3, r2
 800b050:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	b25b      	sxtb	r3, r3
 800b058:	2b00      	cmp	r3, #0
 800b05a:	da16      	bge.n	800b08a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b05c:	7bfb      	ldrb	r3, [r7, #15]
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	211a      	movs	r1, #26
 800b062:	fb01 f303 	mul.w	r3, r1, r3
 800b066:	4413      	add	r3, r2
 800b068:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b06c:	781a      	ldrb	r2, [r3, #0]
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b072:	7bfb      	ldrb	r3, [r7, #15]
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	211a      	movs	r1, #26
 800b078:	fb01 f303 	mul.w	r3, r1, r3
 800b07c:	4413      	add	r3, r2
 800b07e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b082:	881a      	ldrh	r2, [r3, #0]
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	835a      	strh	r2, [r3, #26]
 800b088:	e015      	b.n	800b0b6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b08a:	7bfb      	ldrb	r3, [r7, #15]
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	211a      	movs	r1, #26
 800b090:	fb01 f303 	mul.w	r3, r1, r3
 800b094:	4413      	add	r3, r2
 800b096:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b09a:	781a      	ldrb	r2, [r3, #0]
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b0a0:	7bfb      	ldrb	r3, [r7, #15]
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	211a      	movs	r1, #26
 800b0a6:	fb01 f303 	mul.w	r3, r1, r3
 800b0aa:	4413      	add	r3, r2
 800b0ac:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b0b0:	881a      	ldrh	r2, [r3, #0]
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	7b9b      	ldrb	r3, [r3, #14]
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f001 ff26 	bl	800cf0e <USBH_AllocPipe>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	7bdb      	ldrb	r3, [r3, #15]
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f001 ff1c 	bl	800cf0e <USBH_AllocPipe>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	461a      	mov	r2, r3
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	7b59      	ldrb	r1, [r3, #13]
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	7b98      	ldrb	r0, [r3, #14]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b0f2:	68ba      	ldr	r2, [r7, #8]
 800b0f4:	8b12      	ldrh	r2, [r2, #24]
 800b0f6:	9202      	str	r2, [sp, #8]
 800b0f8:	2202      	movs	r2, #2
 800b0fa:	9201      	str	r2, [sp, #4]
 800b0fc:	9300      	str	r3, [sp, #0]
 800b0fe:	4623      	mov	r3, r4
 800b100:	4602      	mov	r2, r0
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f001 fed4 	bl	800ceb0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	7b19      	ldrb	r1, [r3, #12]
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	7bd8      	ldrb	r0, [r3, #15]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b11c:	68ba      	ldr	r2, [r7, #8]
 800b11e:	8b52      	ldrh	r2, [r2, #26]
 800b120:	9202      	str	r2, [sp, #8]
 800b122:	2202      	movs	r2, #2
 800b124:	9201      	str	r2, [sp, #4]
 800b126:	9300      	str	r3, [sp, #0]
 800b128:	4623      	mov	r3, r4
 800b12a:	4602      	mov	r2, r0
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f001 febf 	bl	800ceb0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	2200      	movs	r2, #0
 800b136:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	7b5b      	ldrb	r3, [r3, #13]
 800b13e:	2200      	movs	r2, #0
 800b140:	4619      	mov	r1, r3
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f002 f9ca 	bl	800d4dc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	7b1b      	ldrb	r3, [r3, #12]
 800b14c:	2200      	movs	r2, #0
 800b14e:	4619      	mov	r1, r3
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f002 f9c3 	bl	800d4dc <USBH_LL_SetToggle>

  return USBH_OK;
 800b156:	2300      	movs	r3, #0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3714      	adds	r7, #20
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd90      	pop	{r4, r7, pc}

0800b160 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b16e:	69db      	ldr	r3, [r3, #28]
 800b170:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00e      	beq.n	800b198 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	4619      	mov	r1, r3
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f001 feb4 	bl	800ceee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	4619      	mov	r1, r3
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f001 fedf 	bl	800cf50 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2200      	movs	r2, #0
 800b196:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	7b1b      	ldrb	r3, [r3, #12]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d00e      	beq.n	800b1be <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	7b1b      	ldrb	r3, [r3, #12]
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f001 fea1 	bl	800ceee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	7b1b      	ldrb	r3, [r3, #12]
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f001 fecc 	bl	800cf50 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	7b5b      	ldrb	r3, [r3, #13]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d00e      	beq.n	800b1e4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	7b5b      	ldrb	r3, [r3, #13]
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f001 fe8e 	bl	800ceee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	7b5b      	ldrb	r3, [r3, #13]
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f001 feb9 	bl	800cf50 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1ea:	69db      	ldr	r3, [r3, #28]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d00b      	beq.n	800b208 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1f6:	69db      	ldr	r3, [r3, #28]
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f002 fa01 	bl	800d600 <free>
    phost->pActiveClass->pData = 0U;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b204:	2200      	movs	r2, #0
 800b206:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3710      	adds	r7, #16
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}

0800b212 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b212:	b580      	push	{r7, lr}
 800b214:	b084      	sub	sp, #16
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b220:	69db      	ldr	r3, [r3, #28]
 800b222:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	3340      	adds	r3, #64	; 0x40
 800b228:	4619      	mov	r1, r3
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 f8b1 	bl	800b392 <GetLineCoding>
 800b230:	4603      	mov	r3, r0
 800b232:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800b234:	7afb      	ldrb	r3, [r7, #11]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d105      	bne.n	800b246 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b240:	2102      	movs	r1, #2
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800b246:	7afb      	ldrb	r3, [r7, #11]
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3710      	adds	r7, #16
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b258:	2301      	movs	r3, #1
 800b25a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800b25c:	2300      	movs	r3, #0
 800b25e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b266:	69db      	ldr	r3, [r3, #28]
 800b268:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b270:	2b04      	cmp	r3, #4
 800b272:	d877      	bhi.n	800b364 <USBH_CDC_Process+0x114>
 800b274:	a201      	add	r2, pc, #4	; (adr r2, 800b27c <USBH_CDC_Process+0x2c>)
 800b276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b27a:	bf00      	nop
 800b27c:	0800b291 	.word	0x0800b291
 800b280:	0800b297 	.word	0x0800b297
 800b284:	0800b2c7 	.word	0x0800b2c7
 800b288:	0800b33b 	.word	0x0800b33b
 800b28c:	0800b349 	.word	0x0800b349
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800b290:	2300      	movs	r3, #0
 800b292:	73fb      	strb	r3, [r7, #15]
      break;
 800b294:	e06d      	b.n	800b372 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b29a:	4619      	mov	r1, r3
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f000 f897 	bl	800b3d0 <SetLineCoding>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b2a6:	7bbb      	ldrb	r3, [r7, #14]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d104      	bne.n	800b2b6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	2202      	movs	r2, #2
 800b2b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b2b4:	e058      	b.n	800b368 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800b2b6:	7bbb      	ldrb	r3, [r7, #14]
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	d055      	beq.n	800b368 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	2204      	movs	r2, #4
 800b2c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b2c4:	e050      	b.n	800b368 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	3340      	adds	r3, #64	; 0x40
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 f860 	bl	800b392 <GetLineCoding>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b2d6:	7bbb      	ldrb	r3, [r7, #14]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d126      	bne.n	800b32a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2ee:	791b      	ldrb	r3, [r3, #4]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d13b      	bne.n	800b36c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2fe:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b300:	429a      	cmp	r2, r3
 800b302:	d133      	bne.n	800b36c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b30e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b310:	429a      	cmp	r2, r3
 800b312:	d12b      	bne.n	800b36c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b31c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b31e:	429a      	cmp	r2, r3
 800b320:	d124      	bne.n	800b36c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 f958 	bl	800b5d8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b328:	e020      	b.n	800b36c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800b32a:	7bbb      	ldrb	r3, [r7, #14]
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d01d      	beq.n	800b36c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	2204      	movs	r2, #4
 800b334:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b338:	e018      	b.n	800b36c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 f867 	bl	800b40e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 f8da 	bl	800b4fa <CDC_ProcessReception>
      break;
 800b346:	e014      	b.n	800b372 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800b348:	2100      	movs	r1, #0
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f001 f822 	bl	800c394 <USBH_ClrFeature>
 800b350:	4603      	mov	r3, r0
 800b352:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b354:	7bbb      	ldrb	r3, [r7, #14]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d10a      	bne.n	800b370 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	2200      	movs	r2, #0
 800b35e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800b362:	e005      	b.n	800b370 <USBH_CDC_Process+0x120>

    default:
      break;
 800b364:	bf00      	nop
 800b366:	e004      	b.n	800b372 <USBH_CDC_Process+0x122>
      break;
 800b368:	bf00      	nop
 800b36a:	e002      	b.n	800b372 <USBH_CDC_Process+0x122>
      break;
 800b36c:	bf00      	nop
 800b36e:	e000      	b.n	800b372 <USBH_CDC_Process+0x122>
      break;
 800b370:	bf00      	nop

  }

  return status;
 800b372:	7bfb      	ldrb	r3, [r7, #15]
}
 800b374:	4618      	mov	r0, r3
 800b376:	3710      	adds	r7, #16
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b384:	2300      	movs	r3, #0
}
 800b386:	4618      	mov	r0, r3
 800b388:	370c      	adds	r7, #12
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr

0800b392 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800b392:	b580      	push	{r7, lr}
 800b394:	b082      	sub	sp, #8
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
 800b39a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	22a1      	movs	r2, #161	; 0xa1
 800b3a0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2221      	movs	r2, #33	; 0x21
 800b3a6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2207      	movs	r2, #7
 800b3b8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	2207      	movs	r2, #7
 800b3be:	4619      	mov	r1, r3
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f001 fb23 	bl	800ca0c <USBH_CtlReq>
 800b3c6:	4603      	mov	r3, r0
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3708      	adds	r7, #8
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2221      	movs	r2, #33	; 0x21
 800b3de:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2220      	movs	r2, #32
 800b3e4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2207      	movs	r2, #7
 800b3f6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	2207      	movs	r2, #7
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f001 fb04 	bl	800ca0c <USBH_CtlReq>
 800b404:	4603      	mov	r3, r0
}
 800b406:	4618      	mov	r0, r3
 800b408:	3708      	adds	r7, #8
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}

0800b40e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800b40e:	b580      	push	{r7, lr}
 800b410:	b086      	sub	sp, #24
 800b412:	af02      	add	r7, sp, #8
 800b414:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b41c:	69db      	ldr	r3, [r3, #28]
 800b41e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b420:	2300      	movs	r3, #0
 800b422:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d002      	beq.n	800b434 <CDC_ProcessTransmission+0x26>
 800b42e:	2b02      	cmp	r3, #2
 800b430:	d023      	beq.n	800b47a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800b432:	e05e      	b.n	800b4f2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b438:	68fa      	ldr	r2, [r7, #12]
 800b43a:	8b12      	ldrh	r2, [r2, #24]
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d90b      	bls.n	800b458 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	69d9      	ldr	r1, [r3, #28]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	8b1a      	ldrh	r2, [r3, #24]
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	7b5b      	ldrb	r3, [r3, #13]
 800b44c:	2001      	movs	r0, #1
 800b44e:	9000      	str	r0, [sp, #0]
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f001 fcea 	bl	800ce2a <USBH_BulkSendData>
 800b456:	e00b      	b.n	800b470 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800b460:	b29a      	uxth	r2, r3
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	7b5b      	ldrb	r3, [r3, #13]
 800b466:	2001      	movs	r0, #1
 800b468:	9000      	str	r0, [sp, #0]
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f001 fcdd 	bl	800ce2a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2202      	movs	r2, #2
 800b474:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b478:	e03b      	b.n	800b4f2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	7b5b      	ldrb	r3, [r3, #13]
 800b47e:	4619      	mov	r1, r3
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f002 f801 	bl	800d488 <USBH_LL_GetURBState>
 800b486:	4603      	mov	r3, r0
 800b488:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800b48a:	7afb      	ldrb	r3, [r7, #11]
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d128      	bne.n	800b4e2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	8b12      	ldrh	r2, [r2, #24]
 800b498:	4293      	cmp	r3, r2
 800b49a:	d90e      	bls.n	800b4ba <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a0:	68fa      	ldr	r2, [r7, #12]
 800b4a2:	8b12      	ldrh	r2, [r2, #24]
 800b4a4:	1a9a      	subs	r2, r3, r2
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	69db      	ldr	r3, [r3, #28]
 800b4ae:	68fa      	ldr	r2, [r7, #12]
 800b4b0:	8b12      	ldrh	r2, [r2, #24]
 800b4b2:	441a      	add	r2, r3
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	61da      	str	r2, [r3, #28]
 800b4b8:	e002      	b.n	800b4c0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d004      	beq.n	800b4d2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b4d0:	e00e      	b.n	800b4f0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 f868 	bl	800b5b0 <USBH_CDC_TransmitCallback>
      break;
 800b4e0:	e006      	b.n	800b4f0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800b4e2:	7afb      	ldrb	r3, [r7, #11]
 800b4e4:	2b02      	cmp	r3, #2
 800b4e6:	d103      	bne.n	800b4f0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b4f0:	bf00      	nop
  }
}
 800b4f2:	bf00      	nop
 800b4f4:	3710      	adds	r7, #16
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}

0800b4fa <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800b4fa:	b580      	push	{r7, lr}
 800b4fc:	b086      	sub	sp, #24
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b508:	69db      	ldr	r3, [r3, #28]
 800b50a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b50c:	2300      	movs	r3, #0
 800b50e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800b516:	2b03      	cmp	r3, #3
 800b518:	d002      	beq.n	800b520 <CDC_ProcessReception+0x26>
 800b51a:	2b04      	cmp	r3, #4
 800b51c:	d00e      	beq.n	800b53c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800b51e:	e043      	b.n	800b5a8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	6a19      	ldr	r1, [r3, #32]
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	8b5a      	ldrh	r2, [r3, #26]
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	7b1b      	ldrb	r3, [r3, #12]
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f001 fca1 	bl	800ce74 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	2204      	movs	r2, #4
 800b536:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b53a:	e035      	b.n	800b5a8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	7b1b      	ldrb	r3, [r3, #12]
 800b540:	4619      	mov	r1, r3
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f001 ffa0 	bl	800d488 <USBH_LL_GetURBState>
 800b548:	4603      	mov	r3, r0
 800b54a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800b54c:	7cfb      	ldrb	r3, [r7, #19]
 800b54e:	2b01      	cmp	r3, #1
 800b550:	d129      	bne.n	800b5a6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	7b1b      	ldrb	r3, [r3, #12]
 800b556:	4619      	mov	r1, r3
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f001 ff03 	bl	800d364 <USBH_LL_GetLastXferSize>
 800b55e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b564:	68fa      	ldr	r2, [r7, #12]
 800b566:	429a      	cmp	r2, r3
 800b568:	d016      	beq.n	800b598 <CDC_ProcessReception+0x9e>
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	8b5b      	ldrh	r3, [r3, #26]
 800b56e:	461a      	mov	r2, r3
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	4293      	cmp	r3, r2
 800b574:	d910      	bls.n	800b598 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	1ad2      	subs	r2, r2, r3
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	6a1a      	ldr	r2, [r3, #32]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	441a      	add	r2, r3
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	2203      	movs	r2, #3
 800b592:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b596:	e006      	b.n	800b5a6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	2200      	movs	r2, #0
 800b59c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f000 f80f 	bl	800b5c4 <USBH_CDC_ReceiveCallback>
      break;
 800b5a6:	bf00      	nop
  }
}
 800b5a8:	bf00      	nop
 800b5aa:	3718      	adds	r7, #24
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b083      	sub	sp, #12
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b5b8:	bf00      	nop
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr

0800b5c4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b083      	sub	sp, #12
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b5cc:	bf00      	nop
 800b5ce:	370c      	adds	r7, #12
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b083      	sub	sp, #12
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b5e0:	bf00      	nop
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	4613      	mov	r3, r2
 800b5f8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d101      	bne.n	800b604 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b600:	2302      	movs	r3, #2
 800b602:	e029      	b.n	800b658 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	79fa      	ldrb	r2, [r7, #7]
 800b608:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2200      	movs	r2, #0
 800b610:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2200      	movs	r2, #0
 800b618:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b61c:	68f8      	ldr	r0, [r7, #12]
 800b61e:	f000 f81f 	bl	800b660 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2200      	movs	r2, #0
 800b626:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2200      	movs	r2, #0
 800b62e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2200      	movs	r2, #0
 800b636:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2200      	movs	r2, #0
 800b63e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d003      	beq.n	800b650 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	68ba      	ldr	r2, [r7, #8]
 800b64c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b650:	68f8      	ldr	r0, [r7, #12]
 800b652:	f001 fdd3 	bl	800d1fc <USBH_LL_Init>

  return USBH_OK;
 800b656:	2300      	movs	r3, #0
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3710      	adds	r7, #16
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b668:	2300      	movs	r3, #0
 800b66a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b66c:	2300      	movs	r3, #0
 800b66e:	60fb      	str	r3, [r7, #12]
 800b670:	e009      	b.n	800b686 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	33e0      	adds	r3, #224	; 0xe0
 800b678:	009b      	lsls	r3, r3, #2
 800b67a:	4413      	add	r3, r2
 800b67c:	2200      	movs	r2, #0
 800b67e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	3301      	adds	r3, #1
 800b684:	60fb      	str	r3, [r7, #12]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2b0f      	cmp	r3, #15
 800b68a:	d9f2      	bls.n	800b672 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b68c:	2300      	movs	r3, #0
 800b68e:	60fb      	str	r3, [r7, #12]
 800b690:	e009      	b.n	800b6a6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	4413      	add	r3, r2
 800b698:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b69c:	2200      	movs	r2, #0
 800b69e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	60fb      	str	r3, [r7, #12]
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6ac:	d3f1      	bcc.n	800b692 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2201      	movs	r2, #1
 800b6be:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2240      	movs	r2, #64	; 0x40
 800b6d2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	331c      	adds	r3, #28
 800b6fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b702:	2100      	movs	r1, #0
 800b704:	4618      	mov	r0, r3
 800b706:	f003 fde8 	bl	800f2da <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b710:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b714:	2100      	movs	r1, #0
 800b716:	4618      	mov	r0, r3
 800b718:	f003 fddf 	bl	800f2da <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f203 3326 	addw	r3, r3, #806	; 0x326
 800b722:	2212      	movs	r2, #18
 800b724:	2100      	movs	r1, #0
 800b726:	4618      	mov	r0, r3
 800b728:	f003 fdd7 	bl	800f2da <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b732:	223e      	movs	r2, #62	; 0x3e
 800b734:	2100      	movs	r1, #0
 800b736:	4618      	mov	r0, r3
 800b738:	f003 fdcf 	bl	800f2da <memset>

  return USBH_OK;
 800b73c:	2300      	movs	r3, #0
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3710      	adds	r7, #16
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b746:	b480      	push	{r7}
 800b748:	b085      	sub	sp, #20
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
 800b74e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b750:	2300      	movs	r3, #0
 800b752:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d016      	beq.n	800b788 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b760:	2b00      	cmp	r3, #0
 800b762:	d10e      	bne.n	800b782 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b76a:	1c59      	adds	r1, r3, #1
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	33de      	adds	r3, #222	; 0xde
 800b776:	6839      	ldr	r1, [r7, #0]
 800b778:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b77c:	2300      	movs	r3, #0
 800b77e:	73fb      	strb	r3, [r7, #15]
 800b780:	e004      	b.n	800b78c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b782:	2302      	movs	r3, #2
 800b784:	73fb      	strb	r3, [r7, #15]
 800b786:	e001      	b.n	800b78c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b788:	2302      	movs	r3, #2
 800b78a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b78c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3714      	adds	r7, #20
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr

0800b79a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b79a:	b480      	push	{r7}
 800b79c:	b085      	sub	sp, #20
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b7b0:	78fa      	ldrb	r2, [r7, #3]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d204      	bcs.n	800b7c0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	78fa      	ldrb	r2, [r7, #3]
 800b7ba:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b7be:	e001      	b.n	800b7c4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b7c0:	2302      	movs	r3, #2
 800b7c2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b7c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3714      	adds	r7, #20
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr

0800b7d2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b7d2:	b480      	push	{r7}
 800b7d4:	b087      	sub	sp, #28
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6078      	str	r0, [r7, #4]
 800b7da:	4608      	mov	r0, r1
 800b7dc:	4611      	mov	r1, r2
 800b7de:	461a      	mov	r2, r3
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	70fb      	strb	r3, [r7, #3]
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	70bb      	strb	r3, [r7, #2]
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b7fa:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b7fc:	e025      	b.n	800b84a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b7fe:	7dfb      	ldrb	r3, [r7, #23]
 800b800:	221a      	movs	r2, #26
 800b802:	fb02 f303 	mul.w	r3, r2, r3
 800b806:	3308      	adds	r3, #8
 800b808:	68fa      	ldr	r2, [r7, #12]
 800b80a:	4413      	add	r3, r2
 800b80c:	3302      	adds	r3, #2
 800b80e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	795b      	ldrb	r3, [r3, #5]
 800b814:	78fa      	ldrb	r2, [r7, #3]
 800b816:	429a      	cmp	r2, r3
 800b818:	d002      	beq.n	800b820 <USBH_FindInterface+0x4e>
 800b81a:	78fb      	ldrb	r3, [r7, #3]
 800b81c:	2bff      	cmp	r3, #255	; 0xff
 800b81e:	d111      	bne.n	800b844 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b824:	78ba      	ldrb	r2, [r7, #2]
 800b826:	429a      	cmp	r2, r3
 800b828:	d002      	beq.n	800b830 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b82a:	78bb      	ldrb	r3, [r7, #2]
 800b82c:	2bff      	cmp	r3, #255	; 0xff
 800b82e:	d109      	bne.n	800b844 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b834:	787a      	ldrb	r2, [r7, #1]
 800b836:	429a      	cmp	r2, r3
 800b838:	d002      	beq.n	800b840 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b83a:	787b      	ldrb	r3, [r7, #1]
 800b83c:	2bff      	cmp	r3, #255	; 0xff
 800b83e:	d101      	bne.n	800b844 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b840:	7dfb      	ldrb	r3, [r7, #23]
 800b842:	e006      	b.n	800b852 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b844:	7dfb      	ldrb	r3, [r7, #23]
 800b846:	3301      	adds	r3, #1
 800b848:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b84a:	7dfb      	ldrb	r3, [r7, #23]
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d9d6      	bls.n	800b7fe <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b850:	23ff      	movs	r3, #255	; 0xff
}
 800b852:	4618      	mov	r0, r3
 800b854:	371c      	adds	r7, #28
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr

0800b85e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800b85e:	b580      	push	{r7, lr}
 800b860:	b082      	sub	sp, #8
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f001 fd04 	bl	800d274 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b86c:	2101      	movs	r1, #1
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f001 fe1d 	bl	800d4ae <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b874:	2300      	movs	r3, #0
}
 800b876:	4618      	mov	r0, r3
 800b878:	3708      	adds	r7, #8
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
	...

0800b880 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b088      	sub	sp, #32
 800b884:	af04      	add	r7, sp, #16
 800b886:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b888:	2302      	movs	r3, #2
 800b88a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b88c:	2300      	movs	r3, #0
 800b88e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b896:	b2db      	uxtb	r3, r3
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d102      	bne.n	800b8a2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2203      	movs	r2, #3
 800b8a0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	2b0b      	cmp	r3, #11
 800b8aa:	f200 81be 	bhi.w	800bc2a <USBH_Process+0x3aa>
 800b8ae:	a201      	add	r2, pc, #4	; (adr r2, 800b8b4 <USBH_Process+0x34>)
 800b8b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8b4:	0800b8e5 	.word	0x0800b8e5
 800b8b8:	0800b917 	.word	0x0800b917
 800b8bc:	0800b97f 	.word	0x0800b97f
 800b8c0:	0800bbc5 	.word	0x0800bbc5
 800b8c4:	0800bc2b 	.word	0x0800bc2b
 800b8c8:	0800ba23 	.word	0x0800ba23
 800b8cc:	0800bb6b 	.word	0x0800bb6b
 800b8d0:	0800ba59 	.word	0x0800ba59
 800b8d4:	0800ba79 	.word	0x0800ba79
 800b8d8:	0800ba99 	.word	0x0800ba99
 800b8dc:	0800badd 	.word	0x0800badd
 800b8e0:	0800bbad 	.word	0x0800bbad
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	f000 819e 	beq.w	800bc2e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b8f8:	20c8      	movs	r0, #200	; 0xc8
 800b8fa:	f001 fe22 	bl	800d542 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f001 fd15 	bl	800d32e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2200      	movs	r2, #0
 800b908:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2200      	movs	r2, #0
 800b910:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b914:	e18b      	b.n	800bc2e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d107      	bne.n	800b930 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2202      	movs	r2, #2
 800b92c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b92e:	e18d      	b.n	800bc4c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b936:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b93a:	d914      	bls.n	800b966 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b942:	3301      	adds	r3, #1
 800b944:	b2da      	uxtb	r2, r3
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b952:	2b03      	cmp	r3, #3
 800b954:	d903      	bls.n	800b95e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	220d      	movs	r2, #13
 800b95a:	701a      	strb	r2, [r3, #0]
      break;
 800b95c:	e176      	b.n	800bc4c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2200      	movs	r2, #0
 800b962:	701a      	strb	r2, [r3, #0]
      break;
 800b964:	e172      	b.n	800bc4c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b96c:	f103 020a 	add.w	r2, r3, #10
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b976:	200a      	movs	r0, #10
 800b978:	f001 fde3 	bl	800d542 <USBH_Delay>
      break;
 800b97c:	e166      	b.n	800bc4c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b984:	2b00      	cmp	r3, #0
 800b986:	d005      	beq.n	800b994 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b98e:	2104      	movs	r1, #4
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b994:	2064      	movs	r0, #100	; 0x64
 800b996:	f001 fdd4 	bl	800d542 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f001 fca0 	bl	800d2e0 <USBH_LL_GetSpeed>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2205      	movs	r2, #5
 800b9ae:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f001 faab 	bl	800cf0e <USBH_AllocPipe>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b9c0:	2180      	movs	r1, #128	; 0x80
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f001 faa3 	bl	800cf0e <USBH_AllocPipe>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	7919      	ldrb	r1, [r3, #4]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b9e0:	687a      	ldr	r2, [r7, #4]
 800b9e2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b9e4:	b292      	uxth	r2, r2
 800b9e6:	9202      	str	r2, [sp, #8]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	9201      	str	r2, [sp, #4]
 800b9ec:	9300      	str	r3, [sp, #0]
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	2280      	movs	r2, #128	; 0x80
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f001 fa5c 	bl	800ceb0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	7959      	ldrb	r1, [r3, #5]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ba0c:	b292      	uxth	r2, r2
 800ba0e:	9202      	str	r2, [sp, #8]
 800ba10:	2200      	movs	r2, #0
 800ba12:	9201      	str	r2, [sp, #4]
 800ba14:	9300      	str	r3, [sp, #0]
 800ba16:	4603      	mov	r3, r0
 800ba18:	2200      	movs	r2, #0
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f001 fa48 	bl	800ceb0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ba20:	e114      	b.n	800bc4c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 f918 	bl	800bc58 <USBH_HandleEnum>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ba2c:	7bbb      	ldrb	r3, [r7, #14]
 800ba2e:	b2db      	uxtb	r3, r3
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	f040 80fe 	bne.w	800bc32 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d103      	bne.n	800ba50 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2208      	movs	r2, #8
 800ba4c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ba4e:	e0f0      	b.n	800bc32 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2207      	movs	r2, #7
 800ba54:	701a      	strb	r2, [r3, #0]
      break;
 800ba56:	e0ec      	b.n	800bc32 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	f000 80e9 	beq.w	800bc36 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba6a:	2101      	movs	r1, #1
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2208      	movs	r2, #8
 800ba74:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800ba76:	e0de      	b.n	800bc36 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	4619      	mov	r1, r3
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 fc3f 	bl	800c306 <USBH_SetCfg>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f040 80d5 	bne.w	800bc3a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2209      	movs	r2, #9
 800ba94:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ba96:	e0d0      	b.n	800bc3a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ba9e:	f003 0320 	and.w	r3, r3, #32
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d016      	beq.n	800bad4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800baa6:	2101      	movs	r1, #1
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 fc4f 	bl	800c34c <USBH_SetFeature>
 800baae:	4603      	mov	r3, r0
 800bab0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bab2:	7bbb      	ldrb	r3, [r7, #14]
 800bab4:	b2db      	uxtb	r3, r3
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d103      	bne.n	800bac2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	220a      	movs	r2, #10
 800babe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bac0:	e0bd      	b.n	800bc3e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800bac2:	7bbb      	ldrb	r3, [r7, #14]
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	2b03      	cmp	r3, #3
 800bac8:	f040 80b9 	bne.w	800bc3e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	220a      	movs	r2, #10
 800bad0:	701a      	strb	r2, [r3, #0]
      break;
 800bad2:	e0b4      	b.n	800bc3e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	220a      	movs	r2, #10
 800bad8:	701a      	strb	r2, [r3, #0]
      break;
 800bada:	e0b0      	b.n	800bc3e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	f000 80ad 	beq.w	800bc42 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2200      	movs	r2, #0
 800baec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800baf0:	2300      	movs	r3, #0
 800baf2:	73fb      	strb	r3, [r7, #15]
 800baf4:	e016      	b.n	800bb24 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800baf6:	7bfa      	ldrb	r2, [r7, #15]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	32de      	adds	r2, #222	; 0xde
 800bafc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb00:	791a      	ldrb	r2, [r3, #4]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d108      	bne.n	800bb1e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800bb0c:	7bfa      	ldrb	r2, [r7, #15]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	32de      	adds	r2, #222	; 0xde
 800bb12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800bb1c:	e005      	b.n	800bb2a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bb1e:	7bfb      	ldrb	r3, [r7, #15]
 800bb20:	3301      	adds	r3, #1
 800bb22:	73fb      	strb	r3, [r7, #15]
 800bb24:	7bfb      	ldrb	r3, [r7, #15]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d0e5      	beq.n	800baf6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d016      	beq.n	800bb62 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	4798      	blx	r3
 800bb40:	4603      	mov	r3, r0
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d109      	bne.n	800bb5a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2206      	movs	r2, #6
 800bb4a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bb52:	2103      	movs	r1, #3
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bb58:	e073      	b.n	800bc42 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	220d      	movs	r2, #13
 800bb5e:	701a      	strb	r2, [r3, #0]
      break;
 800bb60:	e06f      	b.n	800bc42 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	220d      	movs	r2, #13
 800bb66:	701a      	strb	r2, [r3, #0]
      break;
 800bb68:	e06b      	b.n	800bc42 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d017      	beq.n	800bba4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb7a:	691b      	ldr	r3, [r3, #16]
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	4798      	blx	r3
 800bb80:	4603      	mov	r3, r0
 800bb82:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bb84:	7bbb      	ldrb	r3, [r7, #14]
 800bb86:	b2db      	uxtb	r3, r3
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d103      	bne.n	800bb94 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	220b      	movs	r2, #11
 800bb90:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bb92:	e058      	b.n	800bc46 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800bb94:	7bbb      	ldrb	r3, [r7, #14]
 800bb96:	b2db      	uxtb	r3, r3
 800bb98:	2b02      	cmp	r3, #2
 800bb9a:	d154      	bne.n	800bc46 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	220d      	movs	r2, #13
 800bba0:	701a      	strb	r2, [r3, #0]
      break;
 800bba2:	e050      	b.n	800bc46 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	220d      	movs	r2, #13
 800bba8:	701a      	strb	r2, [r3, #0]
      break;
 800bbaa:	e04c      	b.n	800bc46 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d049      	beq.n	800bc4a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bbbc:	695b      	ldr	r3, [r3, #20]
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	4798      	blx	r3
      }
      break;
 800bbc2:	e042      	b.n	800bc4a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f7ff fd47 	bl	800b660 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d009      	beq.n	800bbf0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bbe2:	68db      	ldr	r3, [r3, #12]
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d005      	beq.n	800bc06 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bc00:	2105      	movs	r1, #5
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d107      	bne.n	800bc22 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2200      	movs	r2, #0
 800bc16:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f7ff fe1f 	bl	800b85e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bc20:	e014      	b.n	800bc4c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f001 fb26 	bl	800d274 <USBH_LL_Start>
      break;
 800bc28:	e010      	b.n	800bc4c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800bc2a:	bf00      	nop
 800bc2c:	e00e      	b.n	800bc4c <USBH_Process+0x3cc>
      break;
 800bc2e:	bf00      	nop
 800bc30:	e00c      	b.n	800bc4c <USBH_Process+0x3cc>
      break;
 800bc32:	bf00      	nop
 800bc34:	e00a      	b.n	800bc4c <USBH_Process+0x3cc>
    break;
 800bc36:	bf00      	nop
 800bc38:	e008      	b.n	800bc4c <USBH_Process+0x3cc>
      break;
 800bc3a:	bf00      	nop
 800bc3c:	e006      	b.n	800bc4c <USBH_Process+0x3cc>
      break;
 800bc3e:	bf00      	nop
 800bc40:	e004      	b.n	800bc4c <USBH_Process+0x3cc>
      break;
 800bc42:	bf00      	nop
 800bc44:	e002      	b.n	800bc4c <USBH_Process+0x3cc>
      break;
 800bc46:	bf00      	nop
 800bc48:	e000      	b.n	800bc4c <USBH_Process+0x3cc>
      break;
 800bc4a:	bf00      	nop
  }
  return USBH_OK;
 800bc4c:	2300      	movs	r3, #0
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3710      	adds	r7, #16
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop

0800bc58 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b088      	sub	sp, #32
 800bc5c:	af04      	add	r7, sp, #16
 800bc5e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800bc60:	2301      	movs	r3, #1
 800bc62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800bc64:	2301      	movs	r3, #1
 800bc66:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	785b      	ldrb	r3, [r3, #1]
 800bc6c:	2b07      	cmp	r3, #7
 800bc6e:	f200 81c1 	bhi.w	800bff4 <USBH_HandleEnum+0x39c>
 800bc72:	a201      	add	r2, pc, #4	; (adr r2, 800bc78 <USBH_HandleEnum+0x20>)
 800bc74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc78:	0800bc99 	.word	0x0800bc99
 800bc7c:	0800bd57 	.word	0x0800bd57
 800bc80:	0800bdc1 	.word	0x0800bdc1
 800bc84:	0800be4f 	.word	0x0800be4f
 800bc88:	0800beb9 	.word	0x0800beb9
 800bc8c:	0800bf29 	.word	0x0800bf29
 800bc90:	0800bf6f 	.word	0x0800bf6f
 800bc94:	0800bfb5 	.word	0x0800bfb5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800bc98:	2108      	movs	r1, #8
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f000 fa50 	bl	800c140 <USBH_Get_DevDesc>
 800bca0:	4603      	mov	r3, r0
 800bca2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bca4:	7bbb      	ldrb	r3, [r7, #14]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d130      	bne.n	800bd0c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	7919      	ldrb	r1, [r3, #4]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bcce:	b292      	uxth	r2, r2
 800bcd0:	9202      	str	r2, [sp, #8]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	9201      	str	r2, [sp, #4]
 800bcd6:	9300      	str	r3, [sp, #0]
 800bcd8:	4603      	mov	r3, r0
 800bcda:	2280      	movs	r2, #128	; 0x80
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f001 f8e7 	bl	800ceb0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	7959      	ldrb	r1, [r3, #5]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bcf6:	b292      	uxth	r2, r2
 800bcf8:	9202      	str	r2, [sp, #8]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	9201      	str	r2, [sp, #4]
 800bcfe:	9300      	str	r3, [sp, #0]
 800bd00:	4603      	mov	r3, r0
 800bd02:	2200      	movs	r2, #0
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f001 f8d3 	bl	800ceb0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bd0a:	e175      	b.n	800bff8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bd0c:	7bbb      	ldrb	r3, [r7, #14]
 800bd0e:	2b03      	cmp	r3, #3
 800bd10:	f040 8172 	bne.w	800bff8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	b2da      	uxtb	r2, r3
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd2a:	2b03      	cmp	r3, #3
 800bd2c:	d903      	bls.n	800bd36 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	220d      	movs	r2, #13
 800bd32:	701a      	strb	r2, [r3, #0]
      break;
 800bd34:	e160      	b.n	800bff8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	795b      	ldrb	r3, [r3, #5]
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f001 f907 	bl	800cf50 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	791b      	ldrb	r3, [r3, #4]
 800bd46:	4619      	mov	r1, r3
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f001 f901 	bl	800cf50 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2200      	movs	r2, #0
 800bd52:	701a      	strb	r2, [r3, #0]
      break;
 800bd54:	e150      	b.n	800bff8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800bd56:	2112      	movs	r1, #18
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f000 f9f1 	bl	800c140 <USBH_Get_DevDesc>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bd62:	7bbb      	ldrb	r3, [r7, #14]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d103      	bne.n	800bd70 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2202      	movs	r2, #2
 800bd6c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bd6e:	e145      	b.n	800bffc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bd70:	7bbb      	ldrb	r3, [r7, #14]
 800bd72:	2b03      	cmp	r3, #3
 800bd74:	f040 8142 	bne.w	800bffc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd7e:	3301      	adds	r3, #1
 800bd80:	b2da      	uxtb	r2, r3
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd8e:	2b03      	cmp	r3, #3
 800bd90:	d903      	bls.n	800bd9a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	220d      	movs	r2, #13
 800bd96:	701a      	strb	r2, [r3, #0]
      break;
 800bd98:	e130      	b.n	800bffc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	795b      	ldrb	r3, [r3, #5]
 800bd9e:	4619      	mov	r1, r3
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f001 f8d5 	bl	800cf50 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	791b      	ldrb	r3, [r3, #4]
 800bdaa:	4619      	mov	r1, r3
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f001 f8cf 	bl	800cf50 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	701a      	strb	r2, [r3, #0]
      break;
 800bdbe:	e11d      	b.n	800bffc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800bdc0:	2101      	movs	r1, #1
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f000 fa7b 	bl	800c2be <USBH_SetAddress>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bdcc:	7bbb      	ldrb	r3, [r7, #14]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d132      	bne.n	800be38 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800bdd2:	2002      	movs	r0, #2
 800bdd4:	f001 fbb5 	bl	800d542 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2201      	movs	r2, #1
 800bddc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2203      	movs	r2, #3
 800bde4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	7919      	ldrb	r1, [r3, #4]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bdfa:	b292      	uxth	r2, r2
 800bdfc:	9202      	str	r2, [sp, #8]
 800bdfe:	2200      	movs	r2, #0
 800be00:	9201      	str	r2, [sp, #4]
 800be02:	9300      	str	r3, [sp, #0]
 800be04:	4603      	mov	r3, r0
 800be06:	2280      	movs	r2, #128	; 0x80
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f001 f851 	bl	800ceb0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	7959      	ldrb	r1, [r3, #5]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800be22:	b292      	uxth	r2, r2
 800be24:	9202      	str	r2, [sp, #8]
 800be26:	2200      	movs	r2, #0
 800be28:	9201      	str	r2, [sp, #4]
 800be2a:	9300      	str	r3, [sp, #0]
 800be2c:	4603      	mov	r3, r0
 800be2e:	2200      	movs	r2, #0
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f001 f83d 	bl	800ceb0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800be36:	e0e3      	b.n	800c000 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800be38:	7bbb      	ldrb	r3, [r7, #14]
 800be3a:	2b03      	cmp	r3, #3
 800be3c:	f040 80e0 	bne.w	800c000 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	220d      	movs	r2, #13
 800be44:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2200      	movs	r2, #0
 800be4a:	705a      	strb	r2, [r3, #1]
      break;
 800be4c:	e0d8      	b.n	800c000 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800be4e:	2109      	movs	r1, #9
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 f9a1 	bl	800c198 <USBH_Get_CfgDesc>
 800be56:	4603      	mov	r3, r0
 800be58:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800be5a:	7bbb      	ldrb	r3, [r7, #14]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d103      	bne.n	800be68 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2204      	movs	r2, #4
 800be64:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800be66:	e0cd      	b.n	800c004 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800be68:	7bbb      	ldrb	r3, [r7, #14]
 800be6a:	2b03      	cmp	r3, #3
 800be6c:	f040 80ca 	bne.w	800c004 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800be76:	3301      	adds	r3, #1
 800be78:	b2da      	uxtb	r2, r3
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800be86:	2b03      	cmp	r3, #3
 800be88:	d903      	bls.n	800be92 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	220d      	movs	r2, #13
 800be8e:	701a      	strb	r2, [r3, #0]
      break;
 800be90:	e0b8      	b.n	800c004 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	795b      	ldrb	r3, [r3, #5]
 800be96:	4619      	mov	r1, r3
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f001 f859 	bl	800cf50 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	791b      	ldrb	r3, [r3, #4]
 800bea2:	4619      	mov	r1, r3
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f001 f853 	bl	800cf50 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2200      	movs	r2, #0
 800beae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2200      	movs	r2, #0
 800beb4:	701a      	strb	r2, [r3, #0]
      break;
 800beb6:	e0a5      	b.n	800c004 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800bebe:	4619      	mov	r1, r3
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f000 f969 	bl	800c198 <USBH_Get_CfgDesc>
 800bec6:	4603      	mov	r3, r0
 800bec8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800beca:	7bbb      	ldrb	r3, [r7, #14]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d103      	bne.n	800bed8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2205      	movs	r2, #5
 800bed4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bed6:	e097      	b.n	800c008 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bed8:	7bbb      	ldrb	r3, [r7, #14]
 800beda:	2b03      	cmp	r3, #3
 800bedc:	f040 8094 	bne.w	800c008 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bee6:	3301      	adds	r3, #1
 800bee8:	b2da      	uxtb	r2, r3
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bef6:	2b03      	cmp	r3, #3
 800bef8:	d903      	bls.n	800bf02 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	220d      	movs	r2, #13
 800befe:	701a      	strb	r2, [r3, #0]
      break;
 800bf00:	e082      	b.n	800c008 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	795b      	ldrb	r3, [r3, #5]
 800bf06:	4619      	mov	r1, r3
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f001 f821 	bl	800cf50 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	791b      	ldrb	r3, [r3, #4]
 800bf12:	4619      	mov	r1, r3
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f001 f81b 	bl	800cf50 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	701a      	strb	r2, [r3, #0]
      break;
 800bf26:	e06f      	b.n	800c008 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d019      	beq.n	800bf66 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bf3e:	23ff      	movs	r3, #255	; 0xff
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 f953 	bl	800c1ec <USBH_Get_StringDesc>
 800bf46:	4603      	mov	r3, r0
 800bf48:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bf4a:	7bbb      	ldrb	r3, [r7, #14]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d103      	bne.n	800bf58 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2206      	movs	r2, #6
 800bf54:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bf56:	e059      	b.n	800c00c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bf58:	7bbb      	ldrb	r3, [r7, #14]
 800bf5a:	2b03      	cmp	r3, #3
 800bf5c:	d156      	bne.n	800c00c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2206      	movs	r2, #6
 800bf62:	705a      	strb	r2, [r3, #1]
      break;
 800bf64:	e052      	b.n	800c00c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2206      	movs	r2, #6
 800bf6a:	705a      	strb	r2, [r3, #1]
      break;
 800bf6c:	e04e      	b.n	800c00c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d019      	beq.n	800bfac <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bf84:	23ff      	movs	r3, #255	; 0xff
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 f930 	bl	800c1ec <USBH_Get_StringDesc>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bf90:	7bbb      	ldrb	r3, [r7, #14]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d103      	bne.n	800bf9e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2207      	movs	r2, #7
 800bf9a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bf9c:	e038      	b.n	800c010 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bf9e:	7bbb      	ldrb	r3, [r7, #14]
 800bfa0:	2b03      	cmp	r3, #3
 800bfa2:	d135      	bne.n	800c010 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2207      	movs	r2, #7
 800bfa8:	705a      	strb	r2, [r3, #1]
      break;
 800bfaa:	e031      	b.n	800c010 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2207      	movs	r2, #7
 800bfb0:	705a      	strb	r2, [r3, #1]
      break;
 800bfb2:	e02d      	b.n	800c010 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d017      	beq.n	800bfee <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bfca:	23ff      	movs	r3, #255	; 0xff
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f000 f90d 	bl	800c1ec <USBH_Get_StringDesc>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bfd6:	7bbb      	ldrb	r3, [r7, #14]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d102      	bne.n	800bfe2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800bfe0:	e018      	b.n	800c014 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bfe2:	7bbb      	ldrb	r3, [r7, #14]
 800bfe4:	2b03      	cmp	r3, #3
 800bfe6:	d115      	bne.n	800c014 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	73fb      	strb	r3, [r7, #15]
      break;
 800bfec:	e012      	b.n	800c014 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800bfee:	2300      	movs	r3, #0
 800bff0:	73fb      	strb	r3, [r7, #15]
      break;
 800bff2:	e00f      	b.n	800c014 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800bff4:	bf00      	nop
 800bff6:	e00e      	b.n	800c016 <USBH_HandleEnum+0x3be>
      break;
 800bff8:	bf00      	nop
 800bffa:	e00c      	b.n	800c016 <USBH_HandleEnum+0x3be>
      break;
 800bffc:	bf00      	nop
 800bffe:	e00a      	b.n	800c016 <USBH_HandleEnum+0x3be>
      break;
 800c000:	bf00      	nop
 800c002:	e008      	b.n	800c016 <USBH_HandleEnum+0x3be>
      break;
 800c004:	bf00      	nop
 800c006:	e006      	b.n	800c016 <USBH_HandleEnum+0x3be>
      break;
 800c008:	bf00      	nop
 800c00a:	e004      	b.n	800c016 <USBH_HandleEnum+0x3be>
      break;
 800c00c:	bf00      	nop
 800c00e:	e002      	b.n	800c016 <USBH_HandleEnum+0x3be>
      break;
 800c010:	bf00      	nop
 800c012:	e000      	b.n	800c016 <USBH_HandleEnum+0x3be>
      break;
 800c014:	bf00      	nop
  }
  return Status;
 800c016:	7bfb      	ldrb	r3, [r7, #15]
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3710      	adds	r7, #16
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c020:	b480      	push	{r7}
 800c022:	b083      	sub	sp, #12
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	683a      	ldr	r2, [r7, #0]
 800c02e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c032:	bf00      	nop
 800c034:	370c      	adds	r7, #12
 800c036:	46bd      	mov	sp, r7
 800c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03c:	4770      	bx	lr

0800c03e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c03e:	b580      	push	{r7, lr}
 800c040:	b082      	sub	sp, #8
 800c042:	af00      	add	r7, sp, #0
 800c044:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c04c:	1c5a      	adds	r2, r3, #1
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 f804 	bl	800c062 <USBH_HandleSof>
}
 800c05a:	bf00      	nop
 800c05c:	3708      	adds	r7, #8
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}

0800c062 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c062:	b580      	push	{r7, lr}
 800c064:	b082      	sub	sp, #8
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	2b0b      	cmp	r3, #11
 800c072:	d10a      	bne.n	800c08a <USBH_HandleSof+0x28>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d005      	beq.n	800c08a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c084:	699b      	ldr	r3, [r3, #24]
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	4798      	blx	r3
  }
}
 800c08a:	bf00      	nop
 800c08c:	3708      	adds	r7, #8
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}

0800c092 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c092:	b480      	push	{r7}
 800c094:	b083      	sub	sp, #12
 800c096:	af00      	add	r7, sp, #0
 800c098:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2201      	movs	r2, #1
 800c09e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800c0a2:	bf00      	nop
}
 800c0a4:	370c      	adds	r7, #12
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr

0800c0ae <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c0ae:	b480      	push	{r7}
 800c0b0:	b083      	sub	sp, #12
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c0be:	bf00      	nop
}
 800c0c0:	370c      	adds	r7, #12
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr

0800c0ca <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c0ca:	b480      	push	{r7}
 800c0cc:	b083      	sub	sp, #12
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2201      	movs	r2, #1
 800c0d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c0ea:	2300      	movs	r3, #0
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	370c      	adds	r7, #12
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2201      	movs	r2, #1
 800c104:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2200      	movs	r2, #0
 800c10c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2200      	movs	r2, #0
 800c114:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f001 f8c6 	bl	800d2aa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	791b      	ldrb	r3, [r3, #4]
 800c122:	4619      	mov	r1, r3
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f000 ff13 	bl	800cf50 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	795b      	ldrb	r3, [r3, #5]
 800c12e:	4619      	mov	r1, r3
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 ff0d 	bl	800cf50 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c136:	2300      	movs	r3, #0
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3708      	adds	r7, #8
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b086      	sub	sp, #24
 800c144:	af02      	add	r7, sp, #8
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	460b      	mov	r3, r1
 800c14a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800c14c:	887b      	ldrh	r3, [r7, #2]
 800c14e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c152:	d901      	bls.n	800c158 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800c154:	2303      	movs	r3, #3
 800c156:	e01b      	b.n	800c190 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c15e:	887b      	ldrh	r3, [r7, #2]
 800c160:	9300      	str	r3, [sp, #0]
 800c162:	4613      	mov	r3, r2
 800c164:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c168:	2100      	movs	r1, #0
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 f872 	bl	800c254 <USBH_GetDescriptor>
 800c170:	4603      	mov	r3, r0
 800c172:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800c174:	7bfb      	ldrb	r3, [r7, #15]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d109      	bne.n	800c18e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c180:	887a      	ldrh	r2, [r7, #2]
 800c182:	4619      	mov	r1, r3
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f000 f929 	bl	800c3dc <USBH_ParseDevDesc>
 800c18a:	4603      	mov	r3, r0
 800c18c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c18e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c190:	4618      	mov	r0, r3
 800c192:	3710      	adds	r7, #16
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b086      	sub	sp, #24
 800c19c:	af02      	add	r7, sp, #8
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	331c      	adds	r3, #28
 800c1a8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800c1aa:	887b      	ldrh	r3, [r7, #2]
 800c1ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1b0:	d901      	bls.n	800c1b6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800c1b2:	2303      	movs	r3, #3
 800c1b4:	e016      	b.n	800c1e4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c1b6:	887b      	ldrh	r3, [r7, #2]
 800c1b8:	9300      	str	r3, [sp, #0]
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c1c0:	2100      	movs	r1, #0
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 f846 	bl	800c254 <USBH_GetDescriptor>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c1cc:	7bfb      	ldrb	r3, [r7, #15]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d107      	bne.n	800c1e2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c1d2:	887b      	ldrh	r3, [r7, #2]
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	68b9      	ldr	r1, [r7, #8]
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 f9b3 	bl	800c544 <USBH_ParseCfgDesc>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3710      	adds	r7, #16
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b088      	sub	sp, #32
 800c1f0:	af02      	add	r7, sp, #8
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	607a      	str	r2, [r7, #4]
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	460b      	mov	r3, r1
 800c1fa:	72fb      	strb	r3, [r7, #11]
 800c1fc:	4613      	mov	r3, r2
 800c1fe:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800c200:	893b      	ldrh	r3, [r7, #8]
 800c202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c206:	d802      	bhi.n	800c20e <USBH_Get_StringDesc+0x22>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d101      	bne.n	800c212 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800c20e:	2303      	movs	r3, #3
 800c210:	e01c      	b.n	800c24c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800c212:	7afb      	ldrb	r3, [r7, #11]
 800c214:	b29b      	uxth	r3, r3
 800c216:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c21a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c222:	893b      	ldrh	r3, [r7, #8]
 800c224:	9300      	str	r3, [sp, #0]
 800c226:	460b      	mov	r3, r1
 800c228:	2100      	movs	r1, #0
 800c22a:	68f8      	ldr	r0, [r7, #12]
 800c22c:	f000 f812 	bl	800c254 <USBH_GetDescriptor>
 800c230:	4603      	mov	r3, r0
 800c232:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c234:	7dfb      	ldrb	r3, [r7, #23]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d107      	bne.n	800c24a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c240:	893a      	ldrh	r2, [r7, #8]
 800c242:	6879      	ldr	r1, [r7, #4]
 800c244:	4618      	mov	r0, r3
 800c246:	f000 fb93 	bl	800c970 <USBH_ParseStringDesc>
  }

  return status;
 800c24a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3718      	adds	r7, #24
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	607b      	str	r3, [r7, #4]
 800c25e:	460b      	mov	r3, r1
 800c260:	72fb      	strb	r3, [r7, #11]
 800c262:	4613      	mov	r3, r2
 800c264:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	789b      	ldrb	r3, [r3, #2]
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d11c      	bne.n	800c2a8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c26e:	7afb      	ldrb	r3, [r7, #11]
 800c270:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c274:	b2da      	uxtb	r2, r3
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2206      	movs	r2, #6
 800c27e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	893a      	ldrh	r2, [r7, #8]
 800c284:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c286:	893b      	ldrh	r3, [r7, #8]
 800c288:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c28c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c290:	d104      	bne.n	800c29c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f240 4209 	movw	r2, #1033	; 0x409
 800c298:	829a      	strh	r2, [r3, #20]
 800c29a:	e002      	b.n	800c2a2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	8b3a      	ldrh	r2, [r7, #24]
 800c2a6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c2a8:	8b3b      	ldrh	r3, [r7, #24]
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	6879      	ldr	r1, [r7, #4]
 800c2ae:	68f8      	ldr	r0, [r7, #12]
 800c2b0:	f000 fbac 	bl	800ca0c <USBH_CtlReq>
 800c2b4:	4603      	mov	r3, r0
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3710      	adds	r7, #16
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}

0800c2be <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c2be:	b580      	push	{r7, lr}
 800c2c0:	b082      	sub	sp, #8
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	6078      	str	r0, [r7, #4]
 800c2c6:	460b      	mov	r3, r1
 800c2c8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	789b      	ldrb	r3, [r3, #2]
 800c2ce:	2b01      	cmp	r3, #1
 800c2d0:	d10f      	bne.n	800c2f2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2205      	movs	r2, #5
 800c2dc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c2de:	78fb      	ldrb	r3, [r7, #3]
 800c2e0:	b29a      	uxth	r2, r3
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	2100      	movs	r1, #0
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 fb88 	bl	800ca0c <USBH_CtlReq>
 800c2fc:	4603      	mov	r3, r0
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3708      	adds	r7, #8
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}

0800c306 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c306:	b580      	push	{r7, lr}
 800c308:	b082      	sub	sp, #8
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	6078      	str	r0, [r7, #4]
 800c30e:	460b      	mov	r3, r1
 800c310:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	789b      	ldrb	r3, [r3, #2]
 800c316:	2b01      	cmp	r3, #1
 800c318:	d10e      	bne.n	800c338 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2200      	movs	r2, #0
 800c31e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2209      	movs	r2, #9
 800c324:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	887a      	ldrh	r2, [r7, #2]
 800c32a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2200      	movs	r2, #0
 800c330:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c338:	2200      	movs	r2, #0
 800c33a:	2100      	movs	r1, #0
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 fb65 	bl	800ca0c <USBH_CtlReq>
 800c342:	4603      	mov	r3, r0
}
 800c344:	4618      	mov	r0, r3
 800c346:	3708      	adds	r7, #8
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	460b      	mov	r3, r1
 800c356:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	789b      	ldrb	r3, [r3, #2]
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	d10f      	bne.n	800c380 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2200      	movs	r2, #0
 800c364:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2203      	movs	r2, #3
 800c36a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c36c:	78fb      	ldrb	r3, [r7, #3]
 800c36e:	b29a      	uxth	r2, r3
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2200      	movs	r2, #0
 800c378:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2200      	movs	r2, #0
 800c37e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c380:	2200      	movs	r2, #0
 800c382:	2100      	movs	r1, #0
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f000 fb41 	bl	800ca0c <USBH_CtlReq>
 800c38a:	4603      	mov	r3, r0
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3708      	adds	r7, #8
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	460b      	mov	r3, r1
 800c39e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	789b      	ldrb	r3, [r3, #2]
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d10f      	bne.n	800c3c8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2202      	movs	r2, #2
 800c3ac:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c3ba:	78fb      	ldrb	r3, [r7, #3]
 800c3bc:	b29a      	uxth	r2, r3
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	2100      	movs	r1, #0
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f000 fb1d 	bl	800ca0c <USBH_CtlReq>
 800c3d2:	4603      	mov	r3, r0
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3708      	adds	r7, #8
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b087      	sub	sp, #28
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	60f8      	str	r0, [r7, #12]
 800c3e4:	60b9      	str	r1, [r7, #8]
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f203 3326 	addw	r3, r3, #806	; 0x326
 800c3f0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d101      	bne.n	800c400 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800c3fc:	2302      	movs	r3, #2
 800c3fe:	e098      	b.n	800c532 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	781a      	ldrb	r2, [r3, #0]
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	785a      	ldrb	r2, [r3, #1]
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	3302      	adds	r3, #2
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	b29a      	uxth	r2, r3
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	3303      	adds	r3, #3
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	b29b      	uxth	r3, r3
 800c420:	021b      	lsls	r3, r3, #8
 800c422:	b29b      	uxth	r3, r3
 800c424:	4313      	orrs	r3, r2
 800c426:	b29a      	uxth	r2, r3
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	791a      	ldrb	r2, [r3, #4]
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	795a      	ldrb	r2, [r3, #5]
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	799a      	ldrb	r2, [r3, #6]
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	79da      	ldrb	r2, [r3, #7]
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c452:	2b00      	cmp	r3, #0
 800c454:	d004      	beq.n	800c460 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800c45c:	2b01      	cmp	r3, #1
 800c45e:	d11b      	bne.n	800c498 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	79db      	ldrb	r3, [r3, #7]
 800c464:	2b20      	cmp	r3, #32
 800c466:	dc0f      	bgt.n	800c488 <USBH_ParseDevDesc+0xac>
 800c468:	2b08      	cmp	r3, #8
 800c46a:	db0f      	blt.n	800c48c <USBH_ParseDevDesc+0xb0>
 800c46c:	3b08      	subs	r3, #8
 800c46e:	4a34      	ldr	r2, [pc, #208]	; (800c540 <USBH_ParseDevDesc+0x164>)
 800c470:	fa22 f303 	lsr.w	r3, r2, r3
 800c474:	f003 0301 	and.w	r3, r3, #1
 800c478:	2b00      	cmp	r3, #0
 800c47a:	bf14      	ite	ne
 800c47c:	2301      	movne	r3, #1
 800c47e:	2300      	moveq	r3, #0
 800c480:	b2db      	uxtb	r3, r3
 800c482:	2b00      	cmp	r3, #0
 800c484:	d106      	bne.n	800c494 <USBH_ParseDevDesc+0xb8>
 800c486:	e001      	b.n	800c48c <USBH_ParseDevDesc+0xb0>
 800c488:	2b40      	cmp	r3, #64	; 0x40
 800c48a:	d003      	beq.n	800c494 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	2208      	movs	r2, #8
 800c490:	71da      	strb	r2, [r3, #7]
        break;
 800c492:	e000      	b.n	800c496 <USBH_ParseDevDesc+0xba>
        break;
 800c494:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800c496:	e00e      	b.n	800c4b6 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c49e:	2b02      	cmp	r3, #2
 800c4a0:	d107      	bne.n	800c4b2 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	79db      	ldrb	r3, [r3, #7]
 800c4a6:	2b08      	cmp	r3, #8
 800c4a8:	d005      	beq.n	800c4b6 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	2208      	movs	r2, #8
 800c4ae:	71da      	strb	r2, [r3, #7]
 800c4b0:	e001      	b.n	800c4b6 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c4b2:	2303      	movs	r3, #3
 800c4b4:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800c4b6:	88fb      	ldrh	r3, [r7, #6]
 800c4b8:	2b08      	cmp	r3, #8
 800c4ba:	d939      	bls.n	800c530 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	3308      	adds	r3, #8
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	b29a      	uxth	r2, r3
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	3309      	adds	r3, #9
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	021b      	lsls	r3, r3, #8
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	4313      	orrs	r3, r2
 800c4d2:	b29a      	uxth	r2, r3
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	330a      	adds	r3, #10
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	b29a      	uxth	r2, r3
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	330b      	adds	r3, #11
 800c4e4:	781b      	ldrb	r3, [r3, #0]
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	021b      	lsls	r3, r3, #8
 800c4ea:	b29b      	uxth	r3, r3
 800c4ec:	4313      	orrs	r3, r2
 800c4ee:	b29a      	uxth	r2, r3
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	330c      	adds	r3, #12
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	b29a      	uxth	r2, r3
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	330d      	adds	r3, #13
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	b29b      	uxth	r3, r3
 800c504:	021b      	lsls	r3, r3, #8
 800c506:	b29b      	uxth	r3, r3
 800c508:	4313      	orrs	r3, r2
 800c50a:	b29a      	uxth	r2, r3
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	7b9a      	ldrb	r2, [r3, #14]
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	7bda      	ldrb	r2, [r3, #15]
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	7c1a      	ldrb	r2, [r3, #16]
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	7c5a      	ldrb	r2, [r3, #17]
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800c530:	7dfb      	ldrb	r3, [r7, #23]
}
 800c532:	4618      	mov	r0, r3
 800c534:	371c      	adds	r7, #28
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr
 800c53e:	bf00      	nop
 800c540:	01000101 	.word	0x01000101

0800c544 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b08c      	sub	sp, #48	; 0x30
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	4613      	mov	r3, r2
 800c550:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c558:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c55a:	2300      	movs	r3, #0
 800c55c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c560:	2300      	movs	r3, #0
 800c562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c566:	2300      	movs	r3, #0
 800c568:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d101      	bne.n	800c576 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800c572:	2302      	movs	r3, #2
 800c574:	e0db      	b.n	800c72e <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	781a      	ldrb	r2, [r3, #0]
 800c57e:	6a3b      	ldr	r3, [r7, #32]
 800c580:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	785a      	ldrb	r2, [r3, #1]
 800c586:	6a3b      	ldr	r3, [r7, #32]
 800c588:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	3302      	adds	r3, #2
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	b29a      	uxth	r2, r3
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	3303      	adds	r3, #3
 800c596:	781b      	ldrb	r3, [r3, #0]
 800c598:	b29b      	uxth	r3, r3
 800c59a:	021b      	lsls	r3, r3, #8
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	b29b      	uxth	r3, r3
 800c5a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5a6:	bf28      	it	cs
 800c5a8:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800c5ac:	b29a      	uxth	r2, r3
 800c5ae:	6a3b      	ldr	r3, [r7, #32]
 800c5b0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	791a      	ldrb	r2, [r3, #4]
 800c5b6:	6a3b      	ldr	r3, [r7, #32]
 800c5b8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	795a      	ldrb	r2, [r3, #5]
 800c5be:	6a3b      	ldr	r3, [r7, #32]
 800c5c0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	799a      	ldrb	r2, [r3, #6]
 800c5c6:	6a3b      	ldr	r3, [r7, #32]
 800c5c8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	79da      	ldrb	r2, [r3, #7]
 800c5ce:	6a3b      	ldr	r3, [r7, #32]
 800c5d0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	7a1a      	ldrb	r2, [r3, #8]
 800c5d6:	6a3b      	ldr	r3, [r7, #32]
 800c5d8:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800c5da:	6a3b      	ldr	r3, [r7, #32]
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	2b09      	cmp	r3, #9
 800c5e0:	d002      	beq.n	800c5e8 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c5e2:	6a3b      	ldr	r3, [r7, #32]
 800c5e4:	2209      	movs	r2, #9
 800c5e6:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c5e8:	88fb      	ldrh	r3, [r7, #6]
 800c5ea:	2b09      	cmp	r3, #9
 800c5ec:	f240 809d 	bls.w	800c72a <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800c5f0:	2309      	movs	r3, #9
 800c5f2:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c5f8:	e081      	b.n	800c6fe <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c5fa:	f107 0316 	add.w	r3, r7, #22
 800c5fe:	4619      	mov	r1, r3
 800c600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c602:	f000 f9e8 	bl	800c9d6 <USBH_GetNextDesc>
 800c606:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60a:	785b      	ldrb	r3, [r3, #1]
 800c60c:	2b04      	cmp	r3, #4
 800c60e:	d176      	bne.n	800c6fe <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	2b09      	cmp	r3, #9
 800c616:	d002      	beq.n	800c61e <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c61a:	2209      	movs	r2, #9
 800c61c:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c61e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c622:	221a      	movs	r2, #26
 800c624:	fb02 f303 	mul.w	r3, r2, r3
 800c628:	3308      	adds	r3, #8
 800c62a:	6a3a      	ldr	r2, [r7, #32]
 800c62c:	4413      	add	r3, r2
 800c62e:	3302      	adds	r3, #2
 800c630:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c632:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c634:	69f8      	ldr	r0, [r7, #28]
 800c636:	f000 f87e 	bl	800c736 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c63a:	2300      	movs	r3, #0
 800c63c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c640:	2300      	movs	r3, #0
 800c642:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c644:	e043      	b.n	800c6ce <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c646:	f107 0316 	add.w	r3, r7, #22
 800c64a:	4619      	mov	r1, r3
 800c64c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c64e:	f000 f9c2 	bl	800c9d6 <USBH_GetNextDesc>
 800c652:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c656:	785b      	ldrb	r3, [r3, #1]
 800c658:	2b05      	cmp	r3, #5
 800c65a:	d138      	bne.n	800c6ce <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800c65c:	69fb      	ldr	r3, [r7, #28]
 800c65e:	795b      	ldrb	r3, [r3, #5]
 800c660:	2b01      	cmp	r3, #1
 800c662:	d113      	bne.n	800c68c <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c664:	69fb      	ldr	r3, [r7, #28]
 800c666:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800c668:	2b02      	cmp	r3, #2
 800c66a:	d003      	beq.n	800c674 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c66c:	69fb      	ldr	r3, [r7, #28]
 800c66e:	799b      	ldrb	r3, [r3, #6]
 800c670:	2b03      	cmp	r3, #3
 800c672:	d10b      	bne.n	800c68c <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c674:	69fb      	ldr	r3, [r7, #28]
 800c676:	79db      	ldrb	r3, [r3, #7]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d10b      	bne.n	800c694 <USBH_ParseCfgDesc+0x150>
 800c67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	2b09      	cmp	r3, #9
 800c682:	d007      	beq.n	800c694 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800c684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c686:	2209      	movs	r2, #9
 800c688:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c68a:	e003      	b.n	800c694 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c68e:	2207      	movs	r2, #7
 800c690:	701a      	strb	r2, [r3, #0]
 800c692:	e000      	b.n	800c696 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c694:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c69a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c69e:	3201      	adds	r2, #1
 800c6a0:	00d2      	lsls	r2, r2, #3
 800c6a2:	211a      	movs	r1, #26
 800c6a4:	fb01 f303 	mul.w	r3, r1, r3
 800c6a8:	4413      	add	r3, r2
 800c6aa:	3308      	adds	r3, #8
 800c6ac:	6a3a      	ldr	r2, [r7, #32]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	3304      	adds	r3, #4
 800c6b2:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c6b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6b6:	69b9      	ldr	r1, [r7, #24]
 800c6b8:	68f8      	ldr	r0, [r7, #12]
 800c6ba:	f000 f870 	bl	800c79e <USBH_ParseEPDesc>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800c6c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c6ce:	69fb      	ldr	r3, [r7, #28]
 800c6d0:	791b      	ldrb	r3, [r3, #4]
 800c6d2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d204      	bcs.n	800c6e4 <USBH_ParseCfgDesc+0x1a0>
 800c6da:	6a3b      	ldr	r3, [r7, #32]
 800c6dc:	885a      	ldrh	r2, [r3, #2]
 800c6de:	8afb      	ldrh	r3, [r7, #22]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d8b0      	bhi.n	800c646 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c6e4:	69fb      	ldr	r3, [r7, #28]
 800c6e6:	791b      	ldrb	r3, [r3, #4]
 800c6e8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d201      	bcs.n	800c6f4 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800c6f0:	2303      	movs	r3, #3
 800c6f2:	e01c      	b.n	800c72e <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800c6f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c6fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c702:	2b01      	cmp	r3, #1
 800c704:	d805      	bhi.n	800c712 <USBH_ParseCfgDesc+0x1ce>
 800c706:	6a3b      	ldr	r3, [r7, #32]
 800c708:	885a      	ldrh	r2, [r3, #2]
 800c70a:	8afb      	ldrh	r3, [r7, #22]
 800c70c:	429a      	cmp	r2, r3
 800c70e:	f63f af74 	bhi.w	800c5fa <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c712:	6a3b      	ldr	r3, [r7, #32]
 800c714:	791b      	ldrb	r3, [r3, #4]
 800c716:	2b02      	cmp	r3, #2
 800c718:	bf28      	it	cs
 800c71a:	2302      	movcs	r3, #2
 800c71c:	b2db      	uxtb	r3, r3
 800c71e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c722:	429a      	cmp	r2, r3
 800c724:	d201      	bcs.n	800c72a <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800c726:	2303      	movs	r3, #3
 800c728:	e001      	b.n	800c72e <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800c72a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3730      	adds	r7, #48	; 0x30
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}

0800c736 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800c736:	b480      	push	{r7}
 800c738:	b083      	sub	sp, #12
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
 800c73e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	781a      	ldrb	r2, [r3, #0]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	785a      	ldrb	r2, [r3, #1]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	789a      	ldrb	r2, [r3, #2]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	78da      	ldrb	r2, [r3, #3]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	3304      	adds	r3, #4
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	2b02      	cmp	r3, #2
 800c768:	bf28      	it	cs
 800c76a:	2302      	movcs	r3, #2
 800c76c:	b2da      	uxtb	r2, r3
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	795a      	ldrb	r2, [r3, #5]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	799a      	ldrb	r2, [r3, #6]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	79da      	ldrb	r2, [r3, #7]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	7a1a      	ldrb	r2, [r3, #8]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	721a      	strb	r2, [r3, #8]
}
 800c792:	bf00      	nop
 800c794:	370c      	adds	r7, #12
 800c796:	46bd      	mov	sp, r7
 800c798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79c:	4770      	bx	lr

0800c79e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800c79e:	b480      	push	{r7}
 800c7a0:	b087      	sub	sp, #28
 800c7a2:	af00      	add	r7, sp, #0
 800c7a4:	60f8      	str	r0, [r7, #12]
 800c7a6:	60b9      	str	r1, [r7, #8]
 800c7a8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	781a      	ldrb	r2, [r3, #0]
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	785a      	ldrb	r2, [r3, #1]
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	789a      	ldrb	r2, [r3, #2]
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	78da      	ldrb	r2, [r3, #3]
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	3304      	adds	r3, #4
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	b29a      	uxth	r2, r3
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	3305      	adds	r3, #5
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	b29b      	uxth	r3, r3
 800c7de:	021b      	lsls	r3, r3, #8
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	b29a      	uxth	r2, r3
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	799a      	ldrb	r2, [r3, #6]
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	889b      	ldrh	r3, [r3, #4]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d009      	beq.n	800c80e <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c7fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c802:	d804      	bhi.n	800c80e <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c80c:	d901      	bls.n	800c812 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800c80e:	2303      	movs	r3, #3
 800c810:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d136      	bne.n	800c88a <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	78db      	ldrb	r3, [r3, #3]
 800c820:	f003 0303 	and.w	r3, r3, #3
 800c824:	2b02      	cmp	r3, #2
 800c826:	d108      	bne.n	800c83a <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	889b      	ldrh	r3, [r3, #4]
 800c82c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c830:	f240 8097 	bls.w	800c962 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c834:	2303      	movs	r3, #3
 800c836:	75fb      	strb	r3, [r7, #23]
 800c838:	e093      	b.n	800c962 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	78db      	ldrb	r3, [r3, #3]
 800c83e:	f003 0303 	and.w	r3, r3, #3
 800c842:	2b00      	cmp	r3, #0
 800c844:	d107      	bne.n	800c856 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	889b      	ldrh	r3, [r3, #4]
 800c84a:	2b40      	cmp	r3, #64	; 0x40
 800c84c:	f240 8089 	bls.w	800c962 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c850:	2303      	movs	r3, #3
 800c852:	75fb      	strb	r3, [r7, #23]
 800c854:	e085      	b.n	800c962 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	78db      	ldrb	r3, [r3, #3]
 800c85a:	f003 0303 	and.w	r3, r3, #3
 800c85e:	2b01      	cmp	r3, #1
 800c860:	d005      	beq.n	800c86e <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	78db      	ldrb	r3, [r3, #3]
 800c866:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c86a:	2b03      	cmp	r3, #3
 800c86c:	d10a      	bne.n	800c884 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	799b      	ldrb	r3, [r3, #6]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d003      	beq.n	800c87e <USBH_ParseEPDesc+0xe0>
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	799b      	ldrb	r3, [r3, #6]
 800c87a:	2b10      	cmp	r3, #16
 800c87c:	d970      	bls.n	800c960 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c87e:	2303      	movs	r3, #3
 800c880:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c882:	e06d      	b.n	800c960 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c884:	2303      	movs	r3, #3
 800c886:	75fb      	strb	r3, [r7, #23]
 800c888:	e06b      	b.n	800c962 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c890:	2b01      	cmp	r3, #1
 800c892:	d13c      	bne.n	800c90e <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	78db      	ldrb	r3, [r3, #3]
 800c898:	f003 0303 	and.w	r3, r3, #3
 800c89c:	2b02      	cmp	r3, #2
 800c89e:	d005      	beq.n	800c8ac <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	78db      	ldrb	r3, [r3, #3]
 800c8a4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d106      	bne.n	800c8ba <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	889b      	ldrh	r3, [r3, #4]
 800c8b0:	2b40      	cmp	r3, #64	; 0x40
 800c8b2:	d956      	bls.n	800c962 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c8b4:	2303      	movs	r3, #3
 800c8b6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c8b8:	e053      	b.n	800c962 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	78db      	ldrb	r3, [r3, #3]
 800c8be:	f003 0303 	and.w	r3, r3, #3
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d10e      	bne.n	800c8e4 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	799b      	ldrb	r3, [r3, #6]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d007      	beq.n	800c8de <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800c8d2:	2b10      	cmp	r3, #16
 800c8d4:	d803      	bhi.n	800c8de <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800c8da:	2b40      	cmp	r3, #64	; 0x40
 800c8dc:	d941      	bls.n	800c962 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c8de:	2303      	movs	r3, #3
 800c8e0:	75fb      	strb	r3, [r7, #23]
 800c8e2:	e03e      	b.n	800c962 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	78db      	ldrb	r3, [r3, #3]
 800c8e8:	f003 0303 	and.w	r3, r3, #3
 800c8ec:	2b03      	cmp	r3, #3
 800c8ee:	d10b      	bne.n	800c908 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	799b      	ldrb	r3, [r3, #6]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d004      	beq.n	800c902 <USBH_ParseEPDesc+0x164>
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	889b      	ldrh	r3, [r3, #4]
 800c8fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c900:	d32f      	bcc.n	800c962 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c902:	2303      	movs	r3, #3
 800c904:	75fb      	strb	r3, [r7, #23]
 800c906:	e02c      	b.n	800c962 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c908:	2303      	movs	r3, #3
 800c90a:	75fb      	strb	r3, [r7, #23]
 800c90c:	e029      	b.n	800c962 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c914:	2b02      	cmp	r3, #2
 800c916:	d120      	bne.n	800c95a <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	78db      	ldrb	r3, [r3, #3]
 800c91c:	f003 0303 	and.w	r3, r3, #3
 800c920:	2b00      	cmp	r3, #0
 800c922:	d106      	bne.n	800c932 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	889b      	ldrh	r3, [r3, #4]
 800c928:	2b08      	cmp	r3, #8
 800c92a:	d01a      	beq.n	800c962 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c92c:	2303      	movs	r3, #3
 800c92e:	75fb      	strb	r3, [r7, #23]
 800c930:	e017      	b.n	800c962 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	78db      	ldrb	r3, [r3, #3]
 800c936:	f003 0303 	and.w	r3, r3, #3
 800c93a:	2b03      	cmp	r3, #3
 800c93c:	d10a      	bne.n	800c954 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	799b      	ldrb	r3, [r3, #6]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d003      	beq.n	800c94e <USBH_ParseEPDesc+0x1b0>
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	889b      	ldrh	r3, [r3, #4]
 800c94a:	2b08      	cmp	r3, #8
 800c94c:	d909      	bls.n	800c962 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c94e:	2303      	movs	r3, #3
 800c950:	75fb      	strb	r3, [r7, #23]
 800c952:	e006      	b.n	800c962 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c954:	2303      	movs	r3, #3
 800c956:	75fb      	strb	r3, [r7, #23]
 800c958:	e003      	b.n	800c962 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c95a:	2303      	movs	r3, #3
 800c95c:	75fb      	strb	r3, [r7, #23]
 800c95e:	e000      	b.n	800c962 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c960:	bf00      	nop
  }

  return status;
 800c962:	7dfb      	ldrb	r3, [r7, #23]
}
 800c964:	4618      	mov	r0, r3
 800c966:	371c      	adds	r7, #28
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr

0800c970 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c970:	b480      	push	{r7}
 800c972:	b087      	sub	sp, #28
 800c974:	af00      	add	r7, sp, #0
 800c976:	60f8      	str	r0, [r7, #12]
 800c978:	60b9      	str	r1, [r7, #8]
 800c97a:	4613      	mov	r3, r2
 800c97c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	3301      	adds	r3, #1
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	2b03      	cmp	r3, #3
 800c986:	d120      	bne.n	800c9ca <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	1e9a      	subs	r2, r3, #2
 800c98e:	88fb      	ldrh	r3, [r7, #6]
 800c990:	4293      	cmp	r3, r2
 800c992:	bf28      	it	cs
 800c994:	4613      	movcs	r3, r2
 800c996:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	3302      	adds	r3, #2
 800c99c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c99e:	2300      	movs	r3, #0
 800c9a0:	82fb      	strh	r3, [r7, #22]
 800c9a2:	e00b      	b.n	800c9bc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c9a4:	8afb      	ldrh	r3, [r7, #22]
 800c9a6:	68fa      	ldr	r2, [r7, #12]
 800c9a8:	4413      	add	r3, r2
 800c9aa:	781a      	ldrb	r2, [r3, #0]
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c9b6:	8afb      	ldrh	r3, [r7, #22]
 800c9b8:	3302      	adds	r3, #2
 800c9ba:	82fb      	strh	r3, [r7, #22]
 800c9bc:	8afa      	ldrh	r2, [r7, #22]
 800c9be:	8abb      	ldrh	r3, [r7, #20]
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d3ef      	bcc.n	800c9a4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	701a      	strb	r2, [r3, #0]
  }
}
 800c9ca:	bf00      	nop
 800c9cc:	371c      	adds	r7, #28
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d4:	4770      	bx	lr

0800c9d6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c9d6:	b480      	push	{r7}
 800c9d8:	b085      	sub	sp, #20
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	6078      	str	r0, [r7, #4]
 800c9de:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	881a      	ldrh	r2, [r3, #0]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	b29b      	uxth	r3, r3
 800c9ea:	4413      	add	r3, r2
 800c9ec:	b29a      	uxth	r2, r3
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	4413      	add	r3, r2
 800c9fc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c9fe:	68fb      	ldr	r3, [r7, #12]
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3714      	adds	r7, #20
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr

0800ca0c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b086      	sub	sp, #24
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	60f8      	str	r0, [r7, #12]
 800ca14:	60b9      	str	r1, [r7, #8]
 800ca16:	4613      	mov	r3, r2
 800ca18:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	789b      	ldrb	r3, [r3, #2]
 800ca22:	2b01      	cmp	r3, #1
 800ca24:	d002      	beq.n	800ca2c <USBH_CtlReq+0x20>
 800ca26:	2b02      	cmp	r3, #2
 800ca28:	d00f      	beq.n	800ca4a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ca2a:	e027      	b.n	800ca7c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	68ba      	ldr	r2, [r7, #8]
 800ca30:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	88fa      	ldrh	r2, [r7, #6]
 800ca36:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	2202      	movs	r2, #2
 800ca42:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ca44:	2301      	movs	r3, #1
 800ca46:	75fb      	strb	r3, [r7, #23]
      break;
 800ca48:	e018      	b.n	800ca7c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ca4a:	68f8      	ldr	r0, [r7, #12]
 800ca4c:	f000 f81c 	bl	800ca88 <USBH_HandleControl>
 800ca50:	4603      	mov	r3, r0
 800ca52:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ca54:	7dfb      	ldrb	r3, [r7, #23]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d002      	beq.n	800ca60 <USBH_CtlReq+0x54>
 800ca5a:	7dfb      	ldrb	r3, [r7, #23]
 800ca5c:	2b03      	cmp	r3, #3
 800ca5e:	d106      	bne.n	800ca6e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	2201      	movs	r2, #1
 800ca64:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	761a      	strb	r2, [r3, #24]
      break;
 800ca6c:	e005      	b.n	800ca7a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ca6e:	7dfb      	ldrb	r3, [r7, #23]
 800ca70:	2b02      	cmp	r3, #2
 800ca72:	d102      	bne.n	800ca7a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2201      	movs	r2, #1
 800ca78:	709a      	strb	r2, [r3, #2]
      break;
 800ca7a:	bf00      	nop
  }
  return status;
 800ca7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3718      	adds	r7, #24
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
	...

0800ca88 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b086      	sub	sp, #24
 800ca8c:	af02      	add	r7, sp, #8
 800ca8e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ca90:	2301      	movs	r3, #1
 800ca92:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ca94:	2300      	movs	r3, #0
 800ca96:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	7e1b      	ldrb	r3, [r3, #24]
 800ca9c:	3b01      	subs	r3, #1
 800ca9e:	2b0a      	cmp	r3, #10
 800caa0:	f200 8156 	bhi.w	800cd50 <USBH_HandleControl+0x2c8>
 800caa4:	a201      	add	r2, pc, #4	; (adr r2, 800caac <USBH_HandleControl+0x24>)
 800caa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caaa:	bf00      	nop
 800caac:	0800cad9 	.word	0x0800cad9
 800cab0:	0800caf3 	.word	0x0800caf3
 800cab4:	0800cb5d 	.word	0x0800cb5d
 800cab8:	0800cb83 	.word	0x0800cb83
 800cabc:	0800cbbb 	.word	0x0800cbbb
 800cac0:	0800cbe5 	.word	0x0800cbe5
 800cac4:	0800cc37 	.word	0x0800cc37
 800cac8:	0800cc59 	.word	0x0800cc59
 800cacc:	0800cc95 	.word	0x0800cc95
 800cad0:	0800ccbb 	.word	0x0800ccbb
 800cad4:	0800ccf9 	.word	0x0800ccf9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f103 0110 	add.w	r1, r3, #16
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	795b      	ldrb	r3, [r3, #5]
 800cae2:	461a      	mov	r2, r3
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f000 f943 	bl	800cd70 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2202      	movs	r2, #2
 800caee:	761a      	strb	r2, [r3, #24]
      break;
 800caf0:	e139      	b.n	800cd66 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	795b      	ldrb	r3, [r3, #5]
 800caf6:	4619      	mov	r1, r3
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 fcc5 	bl	800d488 <USBH_LL_GetURBState>
 800cafe:	4603      	mov	r3, r0
 800cb00:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800cb02:	7bbb      	ldrb	r3, [r7, #14]
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	d11e      	bne.n	800cb46 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	7c1b      	ldrb	r3, [r3, #16]
 800cb0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cb10:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	8adb      	ldrh	r3, [r3, #22]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d00a      	beq.n	800cb30 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800cb1a:	7b7b      	ldrb	r3, [r7, #13]
 800cb1c:	2b80      	cmp	r3, #128	; 0x80
 800cb1e:	d103      	bne.n	800cb28 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2203      	movs	r2, #3
 800cb24:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cb26:	e115      	b.n	800cd54 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2205      	movs	r2, #5
 800cb2c:	761a      	strb	r2, [r3, #24]
      break;
 800cb2e:	e111      	b.n	800cd54 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800cb30:	7b7b      	ldrb	r3, [r7, #13]
 800cb32:	2b80      	cmp	r3, #128	; 0x80
 800cb34:	d103      	bne.n	800cb3e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2209      	movs	r2, #9
 800cb3a:	761a      	strb	r2, [r3, #24]
      break;
 800cb3c:	e10a      	b.n	800cd54 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2207      	movs	r2, #7
 800cb42:	761a      	strb	r2, [r3, #24]
      break;
 800cb44:	e106      	b.n	800cd54 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800cb46:	7bbb      	ldrb	r3, [r7, #14]
 800cb48:	2b04      	cmp	r3, #4
 800cb4a:	d003      	beq.n	800cb54 <USBH_HandleControl+0xcc>
 800cb4c:	7bbb      	ldrb	r3, [r7, #14]
 800cb4e:	2b02      	cmp	r3, #2
 800cb50:	f040 8100 	bne.w	800cd54 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	220b      	movs	r2, #11
 800cb58:	761a      	strb	r2, [r3, #24]
      break;
 800cb5a:	e0fb      	b.n	800cd54 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cb62:	b29a      	uxth	r2, r3
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6899      	ldr	r1, [r3, #8]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	899a      	ldrh	r2, [r3, #12]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	791b      	ldrb	r3, [r3, #4]
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 f93a 	bl	800cdee <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2204      	movs	r2, #4
 800cb7e:	761a      	strb	r2, [r3, #24]
      break;
 800cb80:	e0f1      	b.n	800cd66 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	791b      	ldrb	r3, [r3, #4]
 800cb86:	4619      	mov	r1, r3
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f000 fc7d 	bl	800d488 <USBH_LL_GetURBState>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800cb92:	7bbb      	ldrb	r3, [r7, #14]
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	d102      	bne.n	800cb9e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2209      	movs	r2, #9
 800cb9c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800cb9e:	7bbb      	ldrb	r3, [r7, #14]
 800cba0:	2b05      	cmp	r3, #5
 800cba2:	d102      	bne.n	800cbaa <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800cba4:	2303      	movs	r3, #3
 800cba6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cba8:	e0d6      	b.n	800cd58 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800cbaa:	7bbb      	ldrb	r3, [r7, #14]
 800cbac:	2b04      	cmp	r3, #4
 800cbae:	f040 80d3 	bne.w	800cd58 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	220b      	movs	r2, #11
 800cbb6:	761a      	strb	r2, [r3, #24]
      break;
 800cbb8:	e0ce      	b.n	800cd58 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6899      	ldr	r1, [r3, #8]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	899a      	ldrh	r2, [r3, #12]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	795b      	ldrb	r3, [r3, #5]
 800cbc6:	2001      	movs	r0, #1
 800cbc8:	9000      	str	r0, [sp, #0]
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f000 f8ea 	bl	800cda4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cbd6:	b29a      	uxth	r2, r3
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2206      	movs	r2, #6
 800cbe0:	761a      	strb	r2, [r3, #24]
      break;
 800cbe2:	e0c0      	b.n	800cd66 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	795b      	ldrb	r3, [r3, #5]
 800cbe8:	4619      	mov	r1, r3
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 fc4c 	bl	800d488 <USBH_LL_GetURBState>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cbf4:	7bbb      	ldrb	r3, [r7, #14]
 800cbf6:	2b01      	cmp	r3, #1
 800cbf8:	d103      	bne.n	800cc02 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2207      	movs	r2, #7
 800cbfe:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cc00:	e0ac      	b.n	800cd5c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800cc02:	7bbb      	ldrb	r3, [r7, #14]
 800cc04:	2b05      	cmp	r3, #5
 800cc06:	d105      	bne.n	800cc14 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	220c      	movs	r2, #12
 800cc0c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800cc0e:	2303      	movs	r3, #3
 800cc10:	73fb      	strb	r3, [r7, #15]
      break;
 800cc12:	e0a3      	b.n	800cd5c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cc14:	7bbb      	ldrb	r3, [r7, #14]
 800cc16:	2b02      	cmp	r3, #2
 800cc18:	d103      	bne.n	800cc22 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2205      	movs	r2, #5
 800cc1e:	761a      	strb	r2, [r3, #24]
      break;
 800cc20:	e09c      	b.n	800cd5c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800cc22:	7bbb      	ldrb	r3, [r7, #14]
 800cc24:	2b04      	cmp	r3, #4
 800cc26:	f040 8099 	bne.w	800cd5c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	220b      	movs	r2, #11
 800cc2e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800cc30:	2302      	movs	r3, #2
 800cc32:	73fb      	strb	r3, [r7, #15]
      break;
 800cc34:	e092      	b.n	800cd5c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	791b      	ldrb	r3, [r3, #4]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	2100      	movs	r1, #0
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 f8d5 	bl	800cdee <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cc4a:	b29a      	uxth	r2, r3
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2208      	movs	r2, #8
 800cc54:	761a      	strb	r2, [r3, #24]

      break;
 800cc56:	e086      	b.n	800cd66 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	791b      	ldrb	r3, [r3, #4]
 800cc5c:	4619      	mov	r1, r3
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f000 fc12 	bl	800d488 <USBH_LL_GetURBState>
 800cc64:	4603      	mov	r3, r0
 800cc66:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cc68:	7bbb      	ldrb	r3, [r7, #14]
 800cc6a:	2b01      	cmp	r3, #1
 800cc6c:	d105      	bne.n	800cc7a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	220d      	movs	r2, #13
 800cc72:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800cc74:	2300      	movs	r3, #0
 800cc76:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cc78:	e072      	b.n	800cd60 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800cc7a:	7bbb      	ldrb	r3, [r7, #14]
 800cc7c:	2b04      	cmp	r3, #4
 800cc7e:	d103      	bne.n	800cc88 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	220b      	movs	r2, #11
 800cc84:	761a      	strb	r2, [r3, #24]
      break;
 800cc86:	e06b      	b.n	800cd60 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800cc88:	7bbb      	ldrb	r3, [r7, #14]
 800cc8a:	2b05      	cmp	r3, #5
 800cc8c:	d168      	bne.n	800cd60 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800cc8e:	2303      	movs	r3, #3
 800cc90:	73fb      	strb	r3, [r7, #15]
      break;
 800cc92:	e065      	b.n	800cd60 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	795b      	ldrb	r3, [r3, #5]
 800cc98:	2201      	movs	r2, #1
 800cc9a:	9200      	str	r2, [sp, #0]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	2100      	movs	r1, #0
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f000 f87f 	bl	800cda4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ccac:	b29a      	uxth	r2, r3
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	220a      	movs	r2, #10
 800ccb6:	761a      	strb	r2, [r3, #24]
      break;
 800ccb8:	e055      	b.n	800cd66 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	795b      	ldrb	r3, [r3, #5]
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f000 fbe1 	bl	800d488 <USBH_LL_GetURBState>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ccca:	7bbb      	ldrb	r3, [r7, #14]
 800cccc:	2b01      	cmp	r3, #1
 800ccce:	d105      	bne.n	800ccdc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	220d      	movs	r2, #13
 800ccd8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ccda:	e043      	b.n	800cd64 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ccdc:	7bbb      	ldrb	r3, [r7, #14]
 800ccde:	2b02      	cmp	r3, #2
 800cce0:	d103      	bne.n	800ccea <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2209      	movs	r2, #9
 800cce6:	761a      	strb	r2, [r3, #24]
      break;
 800cce8:	e03c      	b.n	800cd64 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800ccea:	7bbb      	ldrb	r3, [r7, #14]
 800ccec:	2b04      	cmp	r3, #4
 800ccee:	d139      	bne.n	800cd64 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	220b      	movs	r2, #11
 800ccf4:	761a      	strb	r2, [r3, #24]
      break;
 800ccf6:	e035      	b.n	800cd64 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	7e5b      	ldrb	r3, [r3, #25]
 800ccfc:	3301      	adds	r3, #1
 800ccfe:	b2da      	uxtb	r2, r3
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	765a      	strb	r2, [r3, #25]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	7e5b      	ldrb	r3, [r3, #25]
 800cd08:	2b02      	cmp	r3, #2
 800cd0a:	d806      	bhi.n	800cd1a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2201      	movs	r2, #1
 800cd10:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2201      	movs	r2, #1
 800cd16:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800cd18:	e025      	b.n	800cd66 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cd20:	2106      	movs	r1, #6
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	795b      	ldrb	r3, [r3, #5]
 800cd30:	4619      	mov	r1, r3
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f000 f90c 	bl	800cf50 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	791b      	ldrb	r3, [r3, #4]
 800cd3c:	4619      	mov	r1, r3
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f000 f906 	bl	800cf50 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2200      	movs	r2, #0
 800cd48:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800cd4a:	2302      	movs	r3, #2
 800cd4c:	73fb      	strb	r3, [r7, #15]
      break;
 800cd4e:	e00a      	b.n	800cd66 <USBH_HandleControl+0x2de>

    default:
      break;
 800cd50:	bf00      	nop
 800cd52:	e008      	b.n	800cd66 <USBH_HandleControl+0x2de>
      break;
 800cd54:	bf00      	nop
 800cd56:	e006      	b.n	800cd66 <USBH_HandleControl+0x2de>
      break;
 800cd58:	bf00      	nop
 800cd5a:	e004      	b.n	800cd66 <USBH_HandleControl+0x2de>
      break;
 800cd5c:	bf00      	nop
 800cd5e:	e002      	b.n	800cd66 <USBH_HandleControl+0x2de>
      break;
 800cd60:	bf00      	nop
 800cd62:	e000      	b.n	800cd66 <USBH_HandleControl+0x2de>
      break;
 800cd64:	bf00      	nop
  }

  return status;
 800cd66:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b088      	sub	sp, #32
 800cd74:	af04      	add	r7, sp, #16
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cd7e:	79f9      	ldrb	r1, [r7, #7]
 800cd80:	2300      	movs	r3, #0
 800cd82:	9303      	str	r3, [sp, #12]
 800cd84:	2308      	movs	r3, #8
 800cd86:	9302      	str	r3, [sp, #8]
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	9301      	str	r3, [sp, #4]
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	9300      	str	r3, [sp, #0]
 800cd90:	2300      	movs	r3, #0
 800cd92:	2200      	movs	r2, #0
 800cd94:	68f8      	ldr	r0, [r7, #12]
 800cd96:	f000 fb46 	bl	800d426 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800cd9a:	2300      	movs	r3, #0
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3710      	adds	r7, #16
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b088      	sub	sp, #32
 800cda8:	af04      	add	r7, sp, #16
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	4611      	mov	r1, r2
 800cdb0:	461a      	mov	r2, r3
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	80fb      	strh	r3, [r7, #6]
 800cdb6:	4613      	mov	r3, r2
 800cdb8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d001      	beq.n	800cdc8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cdc8:	7979      	ldrb	r1, [r7, #5]
 800cdca:	7e3b      	ldrb	r3, [r7, #24]
 800cdcc:	9303      	str	r3, [sp, #12]
 800cdce:	88fb      	ldrh	r3, [r7, #6]
 800cdd0:	9302      	str	r3, [sp, #8]
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	9301      	str	r3, [sp, #4]
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	9300      	str	r3, [sp, #0]
 800cdda:	2300      	movs	r3, #0
 800cddc:	2200      	movs	r2, #0
 800cdde:	68f8      	ldr	r0, [r7, #12]
 800cde0:	f000 fb21 	bl	800d426 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800cde4:	2300      	movs	r3, #0
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3710      	adds	r7, #16
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}

0800cdee <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800cdee:	b580      	push	{r7, lr}
 800cdf0:	b088      	sub	sp, #32
 800cdf2:	af04      	add	r7, sp, #16
 800cdf4:	60f8      	str	r0, [r7, #12]
 800cdf6:	60b9      	str	r1, [r7, #8]
 800cdf8:	4611      	mov	r1, r2
 800cdfa:	461a      	mov	r2, r3
 800cdfc:	460b      	mov	r3, r1
 800cdfe:	80fb      	strh	r3, [r7, #6]
 800ce00:	4613      	mov	r3, r2
 800ce02:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ce04:	7979      	ldrb	r1, [r7, #5]
 800ce06:	2300      	movs	r3, #0
 800ce08:	9303      	str	r3, [sp, #12]
 800ce0a:	88fb      	ldrh	r3, [r7, #6]
 800ce0c:	9302      	str	r3, [sp, #8]
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	9301      	str	r3, [sp, #4]
 800ce12:	2301      	movs	r3, #1
 800ce14:	9300      	str	r3, [sp, #0]
 800ce16:	2300      	movs	r3, #0
 800ce18:	2201      	movs	r2, #1
 800ce1a:	68f8      	ldr	r0, [r7, #12]
 800ce1c:	f000 fb03 	bl	800d426 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ce20:	2300      	movs	r3, #0

}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3710      	adds	r7, #16
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}

0800ce2a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ce2a:	b580      	push	{r7, lr}
 800ce2c:	b088      	sub	sp, #32
 800ce2e:	af04      	add	r7, sp, #16
 800ce30:	60f8      	str	r0, [r7, #12]
 800ce32:	60b9      	str	r1, [r7, #8]
 800ce34:	4611      	mov	r1, r2
 800ce36:	461a      	mov	r2, r3
 800ce38:	460b      	mov	r3, r1
 800ce3a:	80fb      	strh	r3, [r7, #6]
 800ce3c:	4613      	mov	r3, r2
 800ce3e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d001      	beq.n	800ce4e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ce4e:	7979      	ldrb	r1, [r7, #5]
 800ce50:	7e3b      	ldrb	r3, [r7, #24]
 800ce52:	9303      	str	r3, [sp, #12]
 800ce54:	88fb      	ldrh	r3, [r7, #6]
 800ce56:	9302      	str	r3, [sp, #8]
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	9301      	str	r3, [sp, #4]
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	9300      	str	r3, [sp, #0]
 800ce60:	2302      	movs	r3, #2
 800ce62:	2200      	movs	r2, #0
 800ce64:	68f8      	ldr	r0, [r7, #12]
 800ce66:	f000 fade 	bl	800d426 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ce6a:	2300      	movs	r3, #0
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3710      	adds	r7, #16
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}

0800ce74 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b088      	sub	sp, #32
 800ce78:	af04      	add	r7, sp, #16
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	4611      	mov	r1, r2
 800ce80:	461a      	mov	r2, r3
 800ce82:	460b      	mov	r3, r1
 800ce84:	80fb      	strh	r3, [r7, #6]
 800ce86:	4613      	mov	r3, r2
 800ce88:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ce8a:	7979      	ldrb	r1, [r7, #5]
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	9303      	str	r3, [sp, #12]
 800ce90:	88fb      	ldrh	r3, [r7, #6]
 800ce92:	9302      	str	r3, [sp, #8]
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	9301      	str	r3, [sp, #4]
 800ce98:	2301      	movs	r3, #1
 800ce9a:	9300      	str	r3, [sp, #0]
 800ce9c:	2302      	movs	r3, #2
 800ce9e:	2201      	movs	r2, #1
 800cea0:	68f8      	ldr	r0, [r7, #12]
 800cea2:	f000 fac0 	bl	800d426 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cea6:	2300      	movs	r3, #0
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3710      	adds	r7, #16
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b086      	sub	sp, #24
 800ceb4:	af04      	add	r7, sp, #16
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	4608      	mov	r0, r1
 800ceba:	4611      	mov	r1, r2
 800cebc:	461a      	mov	r2, r3
 800cebe:	4603      	mov	r3, r0
 800cec0:	70fb      	strb	r3, [r7, #3]
 800cec2:	460b      	mov	r3, r1
 800cec4:	70bb      	strb	r3, [r7, #2]
 800cec6:	4613      	mov	r3, r2
 800cec8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ceca:	7878      	ldrb	r0, [r7, #1]
 800cecc:	78ba      	ldrb	r2, [r7, #2]
 800cece:	78f9      	ldrb	r1, [r7, #3]
 800ced0:	8b3b      	ldrh	r3, [r7, #24]
 800ced2:	9302      	str	r3, [sp, #8]
 800ced4:	7d3b      	ldrb	r3, [r7, #20]
 800ced6:	9301      	str	r3, [sp, #4]
 800ced8:	7c3b      	ldrb	r3, [r7, #16]
 800ceda:	9300      	str	r3, [sp, #0]
 800cedc:	4603      	mov	r3, r0
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f000 fa53 	bl	800d38a <USBH_LL_OpenPipe>

  return USBH_OK;
 800cee4:	2300      	movs	r3, #0
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3708      	adds	r7, #8
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b082      	sub	sp, #8
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
 800cef6:	460b      	mov	r3, r1
 800cef8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800cefa:	78fb      	ldrb	r3, [r7, #3]
 800cefc:	4619      	mov	r1, r3
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f000 fa72 	bl	800d3e8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800cf04:	2300      	movs	r3, #0
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3708      	adds	r7, #8
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}

0800cf0e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800cf0e:	b580      	push	{r7, lr}
 800cf10:	b084      	sub	sp, #16
 800cf12:	af00      	add	r7, sp, #0
 800cf14:	6078      	str	r0, [r7, #4]
 800cf16:	460b      	mov	r3, r1
 800cf18:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f000 f836 	bl	800cf8c <USBH_GetFreePipe>
 800cf20:	4603      	mov	r3, r0
 800cf22:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800cf24:	89fb      	ldrh	r3, [r7, #14]
 800cf26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d00a      	beq.n	800cf44 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800cf2e:	78fa      	ldrb	r2, [r7, #3]
 800cf30:	89fb      	ldrh	r3, [r7, #14]
 800cf32:	f003 030f 	and.w	r3, r3, #15
 800cf36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cf3a:	6879      	ldr	r1, [r7, #4]
 800cf3c:	33e0      	adds	r3, #224	; 0xe0
 800cf3e:	009b      	lsls	r3, r3, #2
 800cf40:	440b      	add	r3, r1
 800cf42:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800cf44:	89fb      	ldrh	r3, [r7, #14]
 800cf46:	b2db      	uxtb	r3, r3
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3710      	adds	r7, #16
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}

0800cf50 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b083      	sub	sp, #12
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	460b      	mov	r3, r1
 800cf5a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800cf5c:	78fb      	ldrb	r3, [r7, #3]
 800cf5e:	2b0f      	cmp	r3, #15
 800cf60:	d80d      	bhi.n	800cf7e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800cf62:	78fb      	ldrb	r3, [r7, #3]
 800cf64:	687a      	ldr	r2, [r7, #4]
 800cf66:	33e0      	adds	r3, #224	; 0xe0
 800cf68:	009b      	lsls	r3, r3, #2
 800cf6a:	4413      	add	r3, r2
 800cf6c:	685a      	ldr	r2, [r3, #4]
 800cf6e:	78fb      	ldrb	r3, [r7, #3]
 800cf70:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800cf74:	6879      	ldr	r1, [r7, #4]
 800cf76:	33e0      	adds	r3, #224	; 0xe0
 800cf78:	009b      	lsls	r3, r3, #2
 800cf7a:	440b      	add	r3, r1
 800cf7c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800cf7e:	2300      	movs	r3, #0
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	370c      	adds	r7, #12
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr

0800cf8c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b085      	sub	sp, #20
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800cf94:	2300      	movs	r3, #0
 800cf96:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800cf98:	2300      	movs	r3, #0
 800cf9a:	73fb      	strb	r3, [r7, #15]
 800cf9c:	e00f      	b.n	800cfbe <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800cf9e:	7bfb      	ldrb	r3, [r7, #15]
 800cfa0:	687a      	ldr	r2, [r7, #4]
 800cfa2:	33e0      	adds	r3, #224	; 0xe0
 800cfa4:	009b      	lsls	r3, r3, #2
 800cfa6:	4413      	add	r3, r2
 800cfa8:	685b      	ldr	r3, [r3, #4]
 800cfaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d102      	bne.n	800cfb8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800cfb2:	7bfb      	ldrb	r3, [r7, #15]
 800cfb4:	b29b      	uxth	r3, r3
 800cfb6:	e007      	b.n	800cfc8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800cfb8:	7bfb      	ldrb	r3, [r7, #15]
 800cfba:	3301      	adds	r3, #1
 800cfbc:	73fb      	strb	r3, [r7, #15]
 800cfbe:	7bfb      	ldrb	r3, [r7, #15]
 800cfc0:	2b0f      	cmp	r3, #15
 800cfc2:	d9ec      	bls.n	800cf9e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800cfc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3714      	adds	r7, #20
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800cfd8:	2201      	movs	r2, #1
 800cfda:	490e      	ldr	r1, [pc, #56]	; (800d014 <MX_USB_HOST_Init+0x40>)
 800cfdc:	480e      	ldr	r0, [pc, #56]	; (800d018 <MX_USB_HOST_Init+0x44>)
 800cfde:	f7fe fb05 	bl	800b5ec <USBH_Init>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d001      	beq.n	800cfec <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800cfe8:	f7f4 fdc8 	bl	8001b7c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800cfec:	490b      	ldr	r1, [pc, #44]	; (800d01c <MX_USB_HOST_Init+0x48>)
 800cfee:	480a      	ldr	r0, [pc, #40]	; (800d018 <MX_USB_HOST_Init+0x44>)
 800cff0:	f7fe fba9 	bl	800b746 <USBH_RegisterClass>
 800cff4:	4603      	mov	r3, r0
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d001      	beq.n	800cffe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800cffa:	f7f4 fdbf 	bl	8001b7c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800cffe:	4806      	ldr	r0, [pc, #24]	; (800d018 <MX_USB_HOST_Init+0x44>)
 800d000:	f7fe fc2d 	bl	800b85e <USBH_Start>
 800d004:	4603      	mov	r3, r0
 800d006:	2b00      	cmp	r3, #0
 800d008:	d001      	beq.n	800d00e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d00a:	f7f4 fdb7 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d00e:	bf00      	nop
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	0800d035 	.word	0x0800d035
 800d018:	200008c8 	.word	0x200008c8
 800d01c:	20000010 	.word	0x20000010

0800d020 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800d024:	4802      	ldr	r0, [pc, #8]	; (800d030 <MX_USB_HOST_Process+0x10>)
 800d026:	f7fe fc2b 	bl	800b880 <USBH_Process>
}
 800d02a:	bf00      	nop
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop
 800d030:	200008c8 	.word	0x200008c8

0800d034 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d034:	b480      	push	{r7}
 800d036:	b083      	sub	sp, #12
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	460b      	mov	r3, r1
 800d03e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d040:	78fb      	ldrb	r3, [r7, #3]
 800d042:	3b01      	subs	r3, #1
 800d044:	2b04      	cmp	r3, #4
 800d046:	d819      	bhi.n	800d07c <USBH_UserProcess+0x48>
 800d048:	a201      	add	r2, pc, #4	; (adr r2, 800d050 <USBH_UserProcess+0x1c>)
 800d04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d04e:	bf00      	nop
 800d050:	0800d07d 	.word	0x0800d07d
 800d054:	0800d06d 	.word	0x0800d06d
 800d058:	0800d07d 	.word	0x0800d07d
 800d05c:	0800d075 	.word	0x0800d075
 800d060:	0800d065 	.word	0x0800d065
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d064:	4b09      	ldr	r3, [pc, #36]	; (800d08c <USBH_UserProcess+0x58>)
 800d066:	2203      	movs	r2, #3
 800d068:	701a      	strb	r2, [r3, #0]
  break;
 800d06a:	e008      	b.n	800d07e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d06c:	4b07      	ldr	r3, [pc, #28]	; (800d08c <USBH_UserProcess+0x58>)
 800d06e:	2202      	movs	r2, #2
 800d070:	701a      	strb	r2, [r3, #0]
  break;
 800d072:	e004      	b.n	800d07e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d074:	4b05      	ldr	r3, [pc, #20]	; (800d08c <USBH_UserProcess+0x58>)
 800d076:	2201      	movs	r2, #1
 800d078:	701a      	strb	r2, [r3, #0]
  break;
 800d07a:	e000      	b.n	800d07e <USBH_UserProcess+0x4a>

  default:
  break;
 800d07c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d07e:	bf00      	nop
 800d080:	370c      	adds	r7, #12
 800d082:	46bd      	mov	sp, r7
 800d084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d088:	4770      	bx	lr
 800d08a:	bf00      	nop
 800d08c:	20000ca0 	.word	0x20000ca0

0800d090 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b08a      	sub	sp, #40	; 0x28
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d098:	f107 0314 	add.w	r3, r7, #20
 800d09c:	2200      	movs	r2, #0
 800d09e:	601a      	str	r2, [r3, #0]
 800d0a0:	605a      	str	r2, [r3, #4]
 800d0a2:	609a      	str	r2, [r3, #8]
 800d0a4:	60da      	str	r2, [r3, #12]
 800d0a6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d0b0:	d147      	bne.n	800d142 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	613b      	str	r3, [r7, #16]
 800d0b6:	4b25      	ldr	r3, [pc, #148]	; (800d14c <HAL_HCD_MspInit+0xbc>)
 800d0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0ba:	4a24      	ldr	r2, [pc, #144]	; (800d14c <HAL_HCD_MspInit+0xbc>)
 800d0bc:	f043 0301 	orr.w	r3, r3, #1
 800d0c0:	6313      	str	r3, [r2, #48]	; 0x30
 800d0c2:	4b22      	ldr	r3, [pc, #136]	; (800d14c <HAL_HCD_MspInit+0xbc>)
 800d0c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0c6:	f003 0301 	and.w	r3, r3, #1
 800d0ca:	613b      	str	r3, [r7, #16]
 800d0cc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800d0ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d0d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800d0dc:	f107 0314 	add.w	r3, r7, #20
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	481b      	ldr	r0, [pc, #108]	; (800d150 <HAL_HCD_MspInit+0xc0>)
 800d0e4:	f7f5 feb4 	bl	8002e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800d0e8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800d0ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d0ee:	2302      	movs	r3, #2
 800d0f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d0fa:	230a      	movs	r3, #10
 800d0fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d0fe:	f107 0314 	add.w	r3, r7, #20
 800d102:	4619      	mov	r1, r3
 800d104:	4812      	ldr	r0, [pc, #72]	; (800d150 <HAL_HCD_MspInit+0xc0>)
 800d106:	f7f5 fea3 	bl	8002e50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d10a:	4b10      	ldr	r3, [pc, #64]	; (800d14c <HAL_HCD_MspInit+0xbc>)
 800d10c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d10e:	4a0f      	ldr	r2, [pc, #60]	; (800d14c <HAL_HCD_MspInit+0xbc>)
 800d110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d114:	6353      	str	r3, [r2, #52]	; 0x34
 800d116:	2300      	movs	r3, #0
 800d118:	60fb      	str	r3, [r7, #12]
 800d11a:	4b0c      	ldr	r3, [pc, #48]	; (800d14c <HAL_HCD_MspInit+0xbc>)
 800d11c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d11e:	4a0b      	ldr	r2, [pc, #44]	; (800d14c <HAL_HCD_MspInit+0xbc>)
 800d120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d124:	6453      	str	r3, [r2, #68]	; 0x44
 800d126:	4b09      	ldr	r3, [pc, #36]	; (800d14c <HAL_HCD_MspInit+0xbc>)
 800d128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d12a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d12e:	60fb      	str	r3, [r7, #12]
 800d130:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d132:	2200      	movs	r2, #0
 800d134:	2100      	movs	r1, #0
 800d136:	2043      	movs	r0, #67	; 0x43
 800d138:	f7f5 fa51 	bl	80025de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d13c:	2043      	movs	r0, #67	; 0x43
 800d13e:	f7f5 fa6a 	bl	8002616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d142:	bf00      	nop
 800d144:	3728      	adds	r7, #40	; 0x28
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
 800d14a:	bf00      	nop
 800d14c:	40023800 	.word	0x40023800
 800d150:	40020000 	.word	0x40020000

0800d154 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b082      	sub	sp, #8
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800d162:	4618      	mov	r0, r3
 800d164:	f7fe ff6b 	bl	800c03e <USBH_LL_IncTimer>
}
 800d168:	bf00      	nop
 800d16a:	3708      	adds	r7, #8
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b082      	sub	sp, #8
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800d17e:	4618      	mov	r0, r3
 800d180:	f7fe ffa3 	bl	800c0ca <USBH_LL_Connect>
}
 800d184:	bf00      	nop
 800d186:	3708      	adds	r7, #8
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b082      	sub	sp, #8
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7fe ffac 	bl	800c0f8 <USBH_LL_Disconnect>
}
 800d1a0:	bf00      	nop
 800d1a2:	3708      	adds	r7, #8
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	460b      	mov	r3, r1
 800d1b2:	70fb      	strb	r3, [r7, #3]
 800d1b4:	4613      	mov	r3, r2
 800d1b6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d1b8:	bf00      	nop
 800d1ba:	370c      	adds	r7, #12
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c2:	4770      	bx	lr

0800d1c4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7fe ff5d 	bl	800c092 <USBH_LL_PortEnabled>
}
 800d1d8:	bf00      	nop
 800d1da:	3708      	adds	r7, #8
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}

0800d1e0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b082      	sub	sp, #8
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f7fe ff5d 	bl	800c0ae <USBH_LL_PortDisabled>
}
 800d1f4:	bf00      	nop
 800d1f6:	3708      	adds	r7, #8
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}

0800d1fc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b082      	sub	sp, #8
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d20a:	2b01      	cmp	r3, #1
 800d20c:	d12a      	bne.n	800d264 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d20e:	4a18      	ldr	r2, [pc, #96]	; (800d270 <USBH_LL_Init+0x74>)
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	4a15      	ldr	r2, [pc, #84]	; (800d270 <USBH_LL_Init+0x74>)
 800d21a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d21e:	4b14      	ldr	r3, [pc, #80]	; (800d270 <USBH_LL_Init+0x74>)
 800d220:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d224:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d226:	4b12      	ldr	r3, [pc, #72]	; (800d270 <USBH_LL_Init+0x74>)
 800d228:	2208      	movs	r2, #8
 800d22a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d22c:	4b10      	ldr	r3, [pc, #64]	; (800d270 <USBH_LL_Init+0x74>)
 800d22e:	2201      	movs	r2, #1
 800d230:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d232:	4b0f      	ldr	r3, [pc, #60]	; (800d270 <USBH_LL_Init+0x74>)
 800d234:	2200      	movs	r2, #0
 800d236:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d238:	4b0d      	ldr	r3, [pc, #52]	; (800d270 <USBH_LL_Init+0x74>)
 800d23a:	2202      	movs	r2, #2
 800d23c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d23e:	4b0c      	ldr	r3, [pc, #48]	; (800d270 <USBH_LL_Init+0x74>)
 800d240:	2200      	movs	r2, #0
 800d242:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d244:	480a      	ldr	r0, [pc, #40]	; (800d270 <USBH_LL_Init+0x74>)
 800d246:	f7f5 ffb8 	bl	80031ba <HAL_HCD_Init>
 800d24a:	4603      	mov	r3, r0
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d001      	beq.n	800d254 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d250:	f7f4 fc94 	bl	8001b7c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d254:	4806      	ldr	r0, [pc, #24]	; (800d270 <USBH_LL_Init+0x74>)
 800d256:	f7f6 fc19 	bl	8003a8c <HAL_HCD_GetCurrentFrame>
 800d25a:	4603      	mov	r3, r0
 800d25c:	4619      	mov	r1, r3
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f7fe fede 	bl	800c020 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d264:	2300      	movs	r3, #0
}
 800d266:	4618      	mov	r0, r3
 800d268:	3708      	adds	r7, #8
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	20000ca4 	.word	0x20000ca4

0800d274 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b084      	sub	sp, #16
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d27c:	2300      	movs	r3, #0
 800d27e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d280:	2300      	movs	r3, #0
 800d282:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7f6 fb86 	bl	800399c <HAL_HCD_Start>
 800d290:	4603      	mov	r3, r0
 800d292:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d294:	7bfb      	ldrb	r3, [r7, #15]
 800d296:	4618      	mov	r0, r3
 800d298:	f000 f95e 	bl	800d558 <USBH_Get_USB_Status>
 800d29c:	4603      	mov	r3, r0
 800d29e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3710      	adds	r7, #16
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}

0800d2aa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d2aa:	b580      	push	{r7, lr}
 800d2ac:	b084      	sub	sp, #16
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7f6 fb8e 	bl	80039e2 <HAL_HCD_Stop>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d2ca:	7bfb      	ldrb	r3, [r7, #15]
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f000 f943 	bl	800d558 <USBH_Get_USB_Status>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3710      	adds	r7, #16
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}

0800d2e0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b084      	sub	sp, #16
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7f6 fbd8 	bl	8003aa8 <HAL_HCD_GetCurrentSpeed>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	2b02      	cmp	r3, #2
 800d2fc:	d00c      	beq.n	800d318 <USBH_LL_GetSpeed+0x38>
 800d2fe:	2b02      	cmp	r3, #2
 800d300:	d80d      	bhi.n	800d31e <USBH_LL_GetSpeed+0x3e>
 800d302:	2b00      	cmp	r3, #0
 800d304:	d002      	beq.n	800d30c <USBH_LL_GetSpeed+0x2c>
 800d306:	2b01      	cmp	r3, #1
 800d308:	d003      	beq.n	800d312 <USBH_LL_GetSpeed+0x32>
 800d30a:	e008      	b.n	800d31e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d30c:	2300      	movs	r3, #0
 800d30e:	73fb      	strb	r3, [r7, #15]
    break;
 800d310:	e008      	b.n	800d324 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d312:	2301      	movs	r3, #1
 800d314:	73fb      	strb	r3, [r7, #15]
    break;
 800d316:	e005      	b.n	800d324 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d318:	2302      	movs	r3, #2
 800d31a:	73fb      	strb	r3, [r7, #15]
    break;
 800d31c:	e002      	b.n	800d324 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d31e:	2301      	movs	r3, #1
 800d320:	73fb      	strb	r3, [r7, #15]
    break;
 800d322:	bf00      	nop
  }
  return  speed;
 800d324:	7bfb      	ldrb	r3, [r7, #15]
}
 800d326:	4618      	mov	r0, r3
 800d328:	3710      	adds	r7, #16
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}

0800d32e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d32e:	b580      	push	{r7, lr}
 800d330:	b084      	sub	sp, #16
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d336:	2300      	movs	r3, #0
 800d338:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d33a:	2300      	movs	r3, #0
 800d33c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d344:	4618      	mov	r0, r3
 800d346:	f7f6 fb69 	bl	8003a1c <HAL_HCD_ResetPort>
 800d34a:	4603      	mov	r3, r0
 800d34c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d34e:	7bfb      	ldrb	r3, [r7, #15]
 800d350:	4618      	mov	r0, r3
 800d352:	f000 f901 	bl	800d558 <USBH_Get_USB_Status>
 800d356:	4603      	mov	r3, r0
 800d358:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d35a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3710      	adds	r7, #16
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b082      	sub	sp, #8
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	460b      	mov	r3, r1
 800d36e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d376:	78fa      	ldrb	r2, [r7, #3]
 800d378:	4611      	mov	r1, r2
 800d37a:	4618      	mov	r0, r3
 800d37c:	f7f6 fb71 	bl	8003a62 <HAL_HCD_HC_GetXferCount>
 800d380:	4603      	mov	r3, r0
}
 800d382:	4618      	mov	r0, r3
 800d384:	3708      	adds	r7, #8
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}

0800d38a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d38a:	b590      	push	{r4, r7, lr}
 800d38c:	b089      	sub	sp, #36	; 0x24
 800d38e:	af04      	add	r7, sp, #16
 800d390:	6078      	str	r0, [r7, #4]
 800d392:	4608      	mov	r0, r1
 800d394:	4611      	mov	r1, r2
 800d396:	461a      	mov	r2, r3
 800d398:	4603      	mov	r3, r0
 800d39a:	70fb      	strb	r3, [r7, #3]
 800d39c:	460b      	mov	r3, r1
 800d39e:	70bb      	strb	r3, [r7, #2]
 800d3a0:	4613      	mov	r3, r2
 800d3a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d3b2:	787c      	ldrb	r4, [r7, #1]
 800d3b4:	78ba      	ldrb	r2, [r7, #2]
 800d3b6:	78f9      	ldrb	r1, [r7, #3]
 800d3b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d3ba:	9302      	str	r3, [sp, #8]
 800d3bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d3c0:	9301      	str	r3, [sp, #4]
 800d3c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d3c6:	9300      	str	r3, [sp, #0]
 800d3c8:	4623      	mov	r3, r4
 800d3ca:	f7f5 ff5d 	bl	8003288 <HAL_HCD_HC_Init>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d3d2:	7bfb      	ldrb	r3, [r7, #15]
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f000 f8bf 	bl	800d558 <USBH_Get_USB_Status>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3de:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3714      	adds	r7, #20
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd90      	pop	{r4, r7, pc}

0800d3e8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	460b      	mov	r3, r1
 800d3f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d402:	78fa      	ldrb	r2, [r7, #3]
 800d404:	4611      	mov	r1, r2
 800d406:	4618      	mov	r0, r3
 800d408:	f7f5 fff6 	bl	80033f8 <HAL_HCD_HC_Halt>
 800d40c:	4603      	mov	r3, r0
 800d40e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d410:	7bfb      	ldrb	r3, [r7, #15]
 800d412:	4618      	mov	r0, r3
 800d414:	f000 f8a0 	bl	800d558 <USBH_Get_USB_Status>
 800d418:	4603      	mov	r3, r0
 800d41a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d41c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3710      	adds	r7, #16
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}

0800d426 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d426:	b590      	push	{r4, r7, lr}
 800d428:	b089      	sub	sp, #36	; 0x24
 800d42a:	af04      	add	r7, sp, #16
 800d42c:	6078      	str	r0, [r7, #4]
 800d42e:	4608      	mov	r0, r1
 800d430:	4611      	mov	r1, r2
 800d432:	461a      	mov	r2, r3
 800d434:	4603      	mov	r3, r0
 800d436:	70fb      	strb	r3, [r7, #3]
 800d438:	460b      	mov	r3, r1
 800d43a:	70bb      	strb	r3, [r7, #2]
 800d43c:	4613      	mov	r3, r2
 800d43e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d440:	2300      	movs	r3, #0
 800d442:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d444:	2300      	movs	r3, #0
 800d446:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d44e:	787c      	ldrb	r4, [r7, #1]
 800d450:	78ba      	ldrb	r2, [r7, #2]
 800d452:	78f9      	ldrb	r1, [r7, #3]
 800d454:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d458:	9303      	str	r3, [sp, #12]
 800d45a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d45c:	9302      	str	r3, [sp, #8]
 800d45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d460:	9301      	str	r3, [sp, #4]
 800d462:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d466:	9300      	str	r3, [sp, #0]
 800d468:	4623      	mov	r3, r4
 800d46a:	f7f5 ffe9 	bl	8003440 <HAL_HCD_HC_SubmitRequest>
 800d46e:	4603      	mov	r3, r0
 800d470:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d472:	7bfb      	ldrb	r3, [r7, #15]
 800d474:	4618      	mov	r0, r3
 800d476:	f000 f86f 	bl	800d558 <USBH_Get_USB_Status>
 800d47a:	4603      	mov	r3, r0
 800d47c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d47e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d480:	4618      	mov	r0, r3
 800d482:	3714      	adds	r7, #20
 800d484:	46bd      	mov	sp, r7
 800d486:	bd90      	pop	{r4, r7, pc}

0800d488 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	460b      	mov	r3, r1
 800d492:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d49a:	78fa      	ldrb	r2, [r7, #3]
 800d49c:	4611      	mov	r1, r2
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f7f6 faca 	bl	8003a38 <HAL_HCD_HC_GetURBState>
 800d4a4:	4603      	mov	r3, r0
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3708      	adds	r7, #8
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}

0800d4ae <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d4ae:	b580      	push	{r7, lr}
 800d4b0:	b082      	sub	sp, #8
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	6078      	str	r0, [r7, #4]
 800d4b6:	460b      	mov	r3, r1
 800d4b8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d4c0:	2b01      	cmp	r3, #1
 800d4c2:	d103      	bne.n	800d4cc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800d4c4:	78fb      	ldrb	r3, [r7, #3]
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f000 f872 	bl	800d5b0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d4cc:	20c8      	movs	r0, #200	; 0xc8
 800d4ce:	f7f4 ff87 	bl	80023e0 <HAL_Delay>
  return USBH_OK;
 800d4d2:	2300      	movs	r3, #0
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3708      	adds	r7, #8
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}

0800d4dc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b085      	sub	sp, #20
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	460b      	mov	r3, r1
 800d4e6:	70fb      	strb	r3, [r7, #3]
 800d4e8:	4613      	mov	r3, r2
 800d4ea:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d4f2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d4f4:	78fa      	ldrb	r2, [r7, #3]
 800d4f6:	68f9      	ldr	r1, [r7, #12]
 800d4f8:	4613      	mov	r3, r2
 800d4fa:	011b      	lsls	r3, r3, #4
 800d4fc:	1a9b      	subs	r3, r3, r2
 800d4fe:	009b      	lsls	r3, r3, #2
 800d500:	440b      	add	r3, r1
 800d502:	3317      	adds	r3, #23
 800d504:	781b      	ldrb	r3, [r3, #0]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d00a      	beq.n	800d520 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d50a:	78fa      	ldrb	r2, [r7, #3]
 800d50c:	68f9      	ldr	r1, [r7, #12]
 800d50e:	4613      	mov	r3, r2
 800d510:	011b      	lsls	r3, r3, #4
 800d512:	1a9b      	subs	r3, r3, r2
 800d514:	009b      	lsls	r3, r3, #2
 800d516:	440b      	add	r3, r1
 800d518:	333c      	adds	r3, #60	; 0x3c
 800d51a:	78ba      	ldrb	r2, [r7, #2]
 800d51c:	701a      	strb	r2, [r3, #0]
 800d51e:	e009      	b.n	800d534 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d520:	78fa      	ldrb	r2, [r7, #3]
 800d522:	68f9      	ldr	r1, [r7, #12]
 800d524:	4613      	mov	r3, r2
 800d526:	011b      	lsls	r3, r3, #4
 800d528:	1a9b      	subs	r3, r3, r2
 800d52a:	009b      	lsls	r3, r3, #2
 800d52c:	440b      	add	r3, r1
 800d52e:	333d      	adds	r3, #61	; 0x3d
 800d530:	78ba      	ldrb	r2, [r7, #2]
 800d532:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d534:	2300      	movs	r3, #0
}
 800d536:	4618      	mov	r0, r3
 800d538:	3714      	adds	r7, #20
 800d53a:	46bd      	mov	sp, r7
 800d53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d540:	4770      	bx	lr

0800d542 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d542:	b580      	push	{r7, lr}
 800d544:	b082      	sub	sp, #8
 800d546:	af00      	add	r7, sp, #0
 800d548:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f7f4 ff48 	bl	80023e0 <HAL_Delay>
}
 800d550:	bf00      	nop
 800d552:	3708      	adds	r7, #8
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}

0800d558 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d558:	b480      	push	{r7}
 800d55a:	b085      	sub	sp, #20
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	4603      	mov	r3, r0
 800d560:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d562:	2300      	movs	r3, #0
 800d564:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d566:	79fb      	ldrb	r3, [r7, #7]
 800d568:	2b03      	cmp	r3, #3
 800d56a:	d817      	bhi.n	800d59c <USBH_Get_USB_Status+0x44>
 800d56c:	a201      	add	r2, pc, #4	; (adr r2, 800d574 <USBH_Get_USB_Status+0x1c>)
 800d56e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d572:	bf00      	nop
 800d574:	0800d585 	.word	0x0800d585
 800d578:	0800d58b 	.word	0x0800d58b
 800d57c:	0800d591 	.word	0x0800d591
 800d580:	0800d597 	.word	0x0800d597
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d584:	2300      	movs	r3, #0
 800d586:	73fb      	strb	r3, [r7, #15]
    break;
 800d588:	e00b      	b.n	800d5a2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d58a:	2302      	movs	r3, #2
 800d58c:	73fb      	strb	r3, [r7, #15]
    break;
 800d58e:	e008      	b.n	800d5a2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d590:	2301      	movs	r3, #1
 800d592:	73fb      	strb	r3, [r7, #15]
    break;
 800d594:	e005      	b.n	800d5a2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d596:	2302      	movs	r3, #2
 800d598:	73fb      	strb	r3, [r7, #15]
    break;
 800d59a:	e002      	b.n	800d5a2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d59c:	2302      	movs	r3, #2
 800d59e:	73fb      	strb	r3, [r7, #15]
    break;
 800d5a0:	bf00      	nop
  }
  return usb_status;
 800d5a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3714      	adds	r7, #20
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ae:	4770      	bx	lr

0800d5b0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d5ba:	79fb      	ldrb	r3, [r7, #7]
 800d5bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800d5be:	79fb      	ldrb	r3, [r7, #7]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d102      	bne.n	800d5ca <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	73fb      	strb	r3, [r7, #15]
 800d5c8:	e001      	b.n	800d5ce <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800d5ce:	7bfb      	ldrb	r3, [r7, #15]
 800d5d0:	461a      	mov	r2, r3
 800d5d2:	2101      	movs	r1, #1
 800d5d4:	4803      	ldr	r0, [pc, #12]	; (800d5e4 <MX_DriverVbusFS+0x34>)
 800d5d6:	f7f5 fdd7 	bl	8003188 <HAL_GPIO_WritePin>
}
 800d5da:	bf00      	nop
 800d5dc:	3710      	adds	r7, #16
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	40020800 	.word	0x40020800

0800d5e8 <atof>:
 800d5e8:	2100      	movs	r1, #0
 800d5ea:	f000 becf 	b.w	800e38c <strtod>
	...

0800d5f0 <malloc>:
 800d5f0:	4b02      	ldr	r3, [pc, #8]	; (800d5fc <malloc+0xc>)
 800d5f2:	4601      	mov	r1, r0
 800d5f4:	6818      	ldr	r0, [r3, #0]
 800d5f6:	f000 b82b 	b.w	800d650 <_malloc_r>
 800d5fa:	bf00      	nop
 800d5fc:	200001f4 	.word	0x200001f4

0800d600 <free>:
 800d600:	4b02      	ldr	r3, [pc, #8]	; (800d60c <free+0xc>)
 800d602:	4601      	mov	r1, r0
 800d604:	6818      	ldr	r0, [r3, #0]
 800d606:	f002 bde5 	b.w	80101d4 <_free_r>
 800d60a:	bf00      	nop
 800d60c:	200001f4 	.word	0x200001f4

0800d610 <sbrk_aligned>:
 800d610:	b570      	push	{r4, r5, r6, lr}
 800d612:	4e0e      	ldr	r6, [pc, #56]	; (800d64c <sbrk_aligned+0x3c>)
 800d614:	460c      	mov	r4, r1
 800d616:	6831      	ldr	r1, [r6, #0]
 800d618:	4605      	mov	r5, r0
 800d61a:	b911      	cbnz	r1, 800d622 <sbrk_aligned+0x12>
 800d61c:	f001 fef2 	bl	800f404 <_sbrk_r>
 800d620:	6030      	str	r0, [r6, #0]
 800d622:	4621      	mov	r1, r4
 800d624:	4628      	mov	r0, r5
 800d626:	f001 feed 	bl	800f404 <_sbrk_r>
 800d62a:	1c43      	adds	r3, r0, #1
 800d62c:	d00a      	beq.n	800d644 <sbrk_aligned+0x34>
 800d62e:	1cc4      	adds	r4, r0, #3
 800d630:	f024 0403 	bic.w	r4, r4, #3
 800d634:	42a0      	cmp	r0, r4
 800d636:	d007      	beq.n	800d648 <sbrk_aligned+0x38>
 800d638:	1a21      	subs	r1, r4, r0
 800d63a:	4628      	mov	r0, r5
 800d63c:	f001 fee2 	bl	800f404 <_sbrk_r>
 800d640:	3001      	adds	r0, #1
 800d642:	d101      	bne.n	800d648 <sbrk_aligned+0x38>
 800d644:	f04f 34ff 	mov.w	r4, #4294967295
 800d648:	4620      	mov	r0, r4
 800d64a:	bd70      	pop	{r4, r5, r6, pc}
 800d64c:	20001088 	.word	0x20001088

0800d650 <_malloc_r>:
 800d650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d654:	1ccd      	adds	r5, r1, #3
 800d656:	f025 0503 	bic.w	r5, r5, #3
 800d65a:	3508      	adds	r5, #8
 800d65c:	2d0c      	cmp	r5, #12
 800d65e:	bf38      	it	cc
 800d660:	250c      	movcc	r5, #12
 800d662:	2d00      	cmp	r5, #0
 800d664:	4607      	mov	r7, r0
 800d666:	db01      	blt.n	800d66c <_malloc_r+0x1c>
 800d668:	42a9      	cmp	r1, r5
 800d66a:	d905      	bls.n	800d678 <_malloc_r+0x28>
 800d66c:	230c      	movs	r3, #12
 800d66e:	603b      	str	r3, [r7, #0]
 800d670:	2600      	movs	r6, #0
 800d672:	4630      	mov	r0, r6
 800d674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d678:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d74c <_malloc_r+0xfc>
 800d67c:	f000 f868 	bl	800d750 <__malloc_lock>
 800d680:	f8d8 3000 	ldr.w	r3, [r8]
 800d684:	461c      	mov	r4, r3
 800d686:	bb5c      	cbnz	r4, 800d6e0 <_malloc_r+0x90>
 800d688:	4629      	mov	r1, r5
 800d68a:	4638      	mov	r0, r7
 800d68c:	f7ff ffc0 	bl	800d610 <sbrk_aligned>
 800d690:	1c43      	adds	r3, r0, #1
 800d692:	4604      	mov	r4, r0
 800d694:	d155      	bne.n	800d742 <_malloc_r+0xf2>
 800d696:	f8d8 4000 	ldr.w	r4, [r8]
 800d69a:	4626      	mov	r6, r4
 800d69c:	2e00      	cmp	r6, #0
 800d69e:	d145      	bne.n	800d72c <_malloc_r+0xdc>
 800d6a0:	2c00      	cmp	r4, #0
 800d6a2:	d048      	beq.n	800d736 <_malloc_r+0xe6>
 800d6a4:	6823      	ldr	r3, [r4, #0]
 800d6a6:	4631      	mov	r1, r6
 800d6a8:	4638      	mov	r0, r7
 800d6aa:	eb04 0903 	add.w	r9, r4, r3
 800d6ae:	f001 fea9 	bl	800f404 <_sbrk_r>
 800d6b2:	4581      	cmp	r9, r0
 800d6b4:	d13f      	bne.n	800d736 <_malloc_r+0xe6>
 800d6b6:	6821      	ldr	r1, [r4, #0]
 800d6b8:	1a6d      	subs	r5, r5, r1
 800d6ba:	4629      	mov	r1, r5
 800d6bc:	4638      	mov	r0, r7
 800d6be:	f7ff ffa7 	bl	800d610 <sbrk_aligned>
 800d6c2:	3001      	adds	r0, #1
 800d6c4:	d037      	beq.n	800d736 <_malloc_r+0xe6>
 800d6c6:	6823      	ldr	r3, [r4, #0]
 800d6c8:	442b      	add	r3, r5
 800d6ca:	6023      	str	r3, [r4, #0]
 800d6cc:	f8d8 3000 	ldr.w	r3, [r8]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d038      	beq.n	800d746 <_malloc_r+0xf6>
 800d6d4:	685a      	ldr	r2, [r3, #4]
 800d6d6:	42a2      	cmp	r2, r4
 800d6d8:	d12b      	bne.n	800d732 <_malloc_r+0xe2>
 800d6da:	2200      	movs	r2, #0
 800d6dc:	605a      	str	r2, [r3, #4]
 800d6de:	e00f      	b.n	800d700 <_malloc_r+0xb0>
 800d6e0:	6822      	ldr	r2, [r4, #0]
 800d6e2:	1b52      	subs	r2, r2, r5
 800d6e4:	d41f      	bmi.n	800d726 <_malloc_r+0xd6>
 800d6e6:	2a0b      	cmp	r2, #11
 800d6e8:	d917      	bls.n	800d71a <_malloc_r+0xca>
 800d6ea:	1961      	adds	r1, r4, r5
 800d6ec:	42a3      	cmp	r3, r4
 800d6ee:	6025      	str	r5, [r4, #0]
 800d6f0:	bf18      	it	ne
 800d6f2:	6059      	strne	r1, [r3, #4]
 800d6f4:	6863      	ldr	r3, [r4, #4]
 800d6f6:	bf08      	it	eq
 800d6f8:	f8c8 1000 	streq.w	r1, [r8]
 800d6fc:	5162      	str	r2, [r4, r5]
 800d6fe:	604b      	str	r3, [r1, #4]
 800d700:	4638      	mov	r0, r7
 800d702:	f104 060b 	add.w	r6, r4, #11
 800d706:	f000 f829 	bl	800d75c <__malloc_unlock>
 800d70a:	f026 0607 	bic.w	r6, r6, #7
 800d70e:	1d23      	adds	r3, r4, #4
 800d710:	1af2      	subs	r2, r6, r3
 800d712:	d0ae      	beq.n	800d672 <_malloc_r+0x22>
 800d714:	1b9b      	subs	r3, r3, r6
 800d716:	50a3      	str	r3, [r4, r2]
 800d718:	e7ab      	b.n	800d672 <_malloc_r+0x22>
 800d71a:	42a3      	cmp	r3, r4
 800d71c:	6862      	ldr	r2, [r4, #4]
 800d71e:	d1dd      	bne.n	800d6dc <_malloc_r+0x8c>
 800d720:	f8c8 2000 	str.w	r2, [r8]
 800d724:	e7ec      	b.n	800d700 <_malloc_r+0xb0>
 800d726:	4623      	mov	r3, r4
 800d728:	6864      	ldr	r4, [r4, #4]
 800d72a:	e7ac      	b.n	800d686 <_malloc_r+0x36>
 800d72c:	4634      	mov	r4, r6
 800d72e:	6876      	ldr	r6, [r6, #4]
 800d730:	e7b4      	b.n	800d69c <_malloc_r+0x4c>
 800d732:	4613      	mov	r3, r2
 800d734:	e7cc      	b.n	800d6d0 <_malloc_r+0x80>
 800d736:	230c      	movs	r3, #12
 800d738:	603b      	str	r3, [r7, #0]
 800d73a:	4638      	mov	r0, r7
 800d73c:	f000 f80e 	bl	800d75c <__malloc_unlock>
 800d740:	e797      	b.n	800d672 <_malloc_r+0x22>
 800d742:	6025      	str	r5, [r4, #0]
 800d744:	e7dc      	b.n	800d700 <_malloc_r+0xb0>
 800d746:	605b      	str	r3, [r3, #4]
 800d748:	deff      	udf	#255	; 0xff
 800d74a:	bf00      	nop
 800d74c:	20001084 	.word	0x20001084

0800d750 <__malloc_lock>:
 800d750:	4801      	ldr	r0, [pc, #4]	; (800d758 <__malloc_lock+0x8>)
 800d752:	f001 bea4 	b.w	800f49e <__retarget_lock_acquire_recursive>
 800d756:	bf00      	nop
 800d758:	200011cc 	.word	0x200011cc

0800d75c <__malloc_unlock>:
 800d75c:	4801      	ldr	r0, [pc, #4]	; (800d764 <__malloc_unlock+0x8>)
 800d75e:	f001 be9f 	b.w	800f4a0 <__retarget_lock_release_recursive>
 800d762:	bf00      	nop
 800d764:	200011cc 	.word	0x200011cc

0800d768 <sulp>:
 800d768:	b570      	push	{r4, r5, r6, lr}
 800d76a:	4604      	mov	r4, r0
 800d76c:	460d      	mov	r5, r1
 800d76e:	ec45 4b10 	vmov	d0, r4, r5
 800d772:	4616      	mov	r6, r2
 800d774:	f003 fc50 	bl	8011018 <__ulp>
 800d778:	ec51 0b10 	vmov	r0, r1, d0
 800d77c:	b17e      	cbz	r6, 800d79e <sulp+0x36>
 800d77e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d782:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d786:	2b00      	cmp	r3, #0
 800d788:	dd09      	ble.n	800d79e <sulp+0x36>
 800d78a:	051b      	lsls	r3, r3, #20
 800d78c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d790:	2400      	movs	r4, #0
 800d792:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d796:	4622      	mov	r2, r4
 800d798:	462b      	mov	r3, r5
 800d79a:	f7f2 ff2d 	bl	80005f8 <__aeabi_dmul>
 800d79e:	bd70      	pop	{r4, r5, r6, pc}

0800d7a0 <_strtod_l>:
 800d7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a4:	ed2d 8b02 	vpush	{d8}
 800d7a8:	b09b      	sub	sp, #108	; 0x6c
 800d7aa:	4604      	mov	r4, r0
 800d7ac:	9213      	str	r2, [sp, #76]	; 0x4c
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	9216      	str	r2, [sp, #88]	; 0x58
 800d7b2:	460d      	mov	r5, r1
 800d7b4:	f04f 0800 	mov.w	r8, #0
 800d7b8:	f04f 0900 	mov.w	r9, #0
 800d7bc:	460a      	mov	r2, r1
 800d7be:	9215      	str	r2, [sp, #84]	; 0x54
 800d7c0:	7811      	ldrb	r1, [r2, #0]
 800d7c2:	292b      	cmp	r1, #43	; 0x2b
 800d7c4:	d04c      	beq.n	800d860 <_strtod_l+0xc0>
 800d7c6:	d83a      	bhi.n	800d83e <_strtod_l+0x9e>
 800d7c8:	290d      	cmp	r1, #13
 800d7ca:	d834      	bhi.n	800d836 <_strtod_l+0x96>
 800d7cc:	2908      	cmp	r1, #8
 800d7ce:	d834      	bhi.n	800d83a <_strtod_l+0x9a>
 800d7d0:	2900      	cmp	r1, #0
 800d7d2:	d03d      	beq.n	800d850 <_strtod_l+0xb0>
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	920a      	str	r2, [sp, #40]	; 0x28
 800d7d8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800d7da:	7832      	ldrb	r2, [r6, #0]
 800d7dc:	2a30      	cmp	r2, #48	; 0x30
 800d7de:	f040 80b4 	bne.w	800d94a <_strtod_l+0x1aa>
 800d7e2:	7872      	ldrb	r2, [r6, #1]
 800d7e4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800d7e8:	2a58      	cmp	r2, #88	; 0x58
 800d7ea:	d170      	bne.n	800d8ce <_strtod_l+0x12e>
 800d7ec:	9302      	str	r3, [sp, #8]
 800d7ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7f0:	9301      	str	r3, [sp, #4]
 800d7f2:	ab16      	add	r3, sp, #88	; 0x58
 800d7f4:	9300      	str	r3, [sp, #0]
 800d7f6:	4a8e      	ldr	r2, [pc, #568]	; (800da30 <_strtod_l+0x290>)
 800d7f8:	ab17      	add	r3, sp, #92	; 0x5c
 800d7fa:	a915      	add	r1, sp, #84	; 0x54
 800d7fc:	4620      	mov	r0, r4
 800d7fe:	f002 fd9d 	bl	801033c <__gethex>
 800d802:	f010 070f 	ands.w	r7, r0, #15
 800d806:	4605      	mov	r5, r0
 800d808:	d005      	beq.n	800d816 <_strtod_l+0x76>
 800d80a:	2f06      	cmp	r7, #6
 800d80c:	d12a      	bne.n	800d864 <_strtod_l+0xc4>
 800d80e:	3601      	adds	r6, #1
 800d810:	2300      	movs	r3, #0
 800d812:	9615      	str	r6, [sp, #84]	; 0x54
 800d814:	930a      	str	r3, [sp, #40]	; 0x28
 800d816:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d818:	2b00      	cmp	r3, #0
 800d81a:	f040 857f 	bne.w	800e31c <_strtod_l+0xb7c>
 800d81e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d820:	b1db      	cbz	r3, 800d85a <_strtod_l+0xba>
 800d822:	4642      	mov	r2, r8
 800d824:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d828:	ec43 2b10 	vmov	d0, r2, r3
 800d82c:	b01b      	add	sp, #108	; 0x6c
 800d82e:	ecbd 8b02 	vpop	{d8}
 800d832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d836:	2920      	cmp	r1, #32
 800d838:	d1cc      	bne.n	800d7d4 <_strtod_l+0x34>
 800d83a:	3201      	adds	r2, #1
 800d83c:	e7bf      	b.n	800d7be <_strtod_l+0x1e>
 800d83e:	292d      	cmp	r1, #45	; 0x2d
 800d840:	d1c8      	bne.n	800d7d4 <_strtod_l+0x34>
 800d842:	2101      	movs	r1, #1
 800d844:	910a      	str	r1, [sp, #40]	; 0x28
 800d846:	1c51      	adds	r1, r2, #1
 800d848:	9115      	str	r1, [sp, #84]	; 0x54
 800d84a:	7852      	ldrb	r2, [r2, #1]
 800d84c:	2a00      	cmp	r2, #0
 800d84e:	d1c3      	bne.n	800d7d8 <_strtod_l+0x38>
 800d850:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d852:	9515      	str	r5, [sp, #84]	; 0x54
 800d854:	2b00      	cmp	r3, #0
 800d856:	f040 855f 	bne.w	800e318 <_strtod_l+0xb78>
 800d85a:	4642      	mov	r2, r8
 800d85c:	464b      	mov	r3, r9
 800d85e:	e7e3      	b.n	800d828 <_strtod_l+0x88>
 800d860:	2100      	movs	r1, #0
 800d862:	e7ef      	b.n	800d844 <_strtod_l+0xa4>
 800d864:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d866:	b13a      	cbz	r2, 800d878 <_strtod_l+0xd8>
 800d868:	2135      	movs	r1, #53	; 0x35
 800d86a:	a818      	add	r0, sp, #96	; 0x60
 800d86c:	f003 fcd1 	bl	8011212 <__copybits>
 800d870:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d872:	4620      	mov	r0, r4
 800d874:	f003 f8a4 	bl	80109c0 <_Bfree>
 800d878:	3f01      	subs	r7, #1
 800d87a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d87c:	2f04      	cmp	r7, #4
 800d87e:	d806      	bhi.n	800d88e <_strtod_l+0xee>
 800d880:	e8df f007 	tbb	[pc, r7]
 800d884:	201d0314 	.word	0x201d0314
 800d888:	14          	.byte	0x14
 800d889:	00          	.byte	0x00
 800d88a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800d88e:	05e9      	lsls	r1, r5, #23
 800d890:	bf48      	it	mi
 800d892:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800d896:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d89a:	0d1b      	lsrs	r3, r3, #20
 800d89c:	051b      	lsls	r3, r3, #20
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d1b9      	bne.n	800d816 <_strtod_l+0x76>
 800d8a2:	f001 fdd1 	bl	800f448 <__errno>
 800d8a6:	2322      	movs	r3, #34	; 0x22
 800d8a8:	6003      	str	r3, [r0, #0]
 800d8aa:	e7b4      	b.n	800d816 <_strtod_l+0x76>
 800d8ac:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800d8b0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d8b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d8b8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800d8bc:	e7e7      	b.n	800d88e <_strtod_l+0xee>
 800d8be:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800da38 <_strtod_l+0x298>
 800d8c2:	e7e4      	b.n	800d88e <_strtod_l+0xee>
 800d8c4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800d8c8:	f04f 38ff 	mov.w	r8, #4294967295
 800d8cc:	e7df      	b.n	800d88e <_strtod_l+0xee>
 800d8ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d8d0:	1c5a      	adds	r2, r3, #1
 800d8d2:	9215      	str	r2, [sp, #84]	; 0x54
 800d8d4:	785b      	ldrb	r3, [r3, #1]
 800d8d6:	2b30      	cmp	r3, #48	; 0x30
 800d8d8:	d0f9      	beq.n	800d8ce <_strtod_l+0x12e>
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d09b      	beq.n	800d816 <_strtod_l+0x76>
 800d8de:	2301      	movs	r3, #1
 800d8e0:	f04f 0a00 	mov.w	sl, #0
 800d8e4:	9304      	str	r3, [sp, #16]
 800d8e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d8e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800d8ea:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d8ee:	46d3      	mov	fp, sl
 800d8f0:	220a      	movs	r2, #10
 800d8f2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800d8f4:	7806      	ldrb	r6, [r0, #0]
 800d8f6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d8fa:	b2d9      	uxtb	r1, r3
 800d8fc:	2909      	cmp	r1, #9
 800d8fe:	d926      	bls.n	800d94e <_strtod_l+0x1ae>
 800d900:	494c      	ldr	r1, [pc, #304]	; (800da34 <_strtod_l+0x294>)
 800d902:	2201      	movs	r2, #1
 800d904:	f001 fcf1 	bl	800f2ea <strncmp>
 800d908:	2800      	cmp	r0, #0
 800d90a:	d030      	beq.n	800d96e <_strtod_l+0x1ce>
 800d90c:	2000      	movs	r0, #0
 800d90e:	4632      	mov	r2, r6
 800d910:	9005      	str	r0, [sp, #20]
 800d912:	465e      	mov	r6, fp
 800d914:	4603      	mov	r3, r0
 800d916:	2a65      	cmp	r2, #101	; 0x65
 800d918:	d001      	beq.n	800d91e <_strtod_l+0x17e>
 800d91a:	2a45      	cmp	r2, #69	; 0x45
 800d91c:	d113      	bne.n	800d946 <_strtod_l+0x1a6>
 800d91e:	b91e      	cbnz	r6, 800d928 <_strtod_l+0x188>
 800d920:	9a04      	ldr	r2, [sp, #16]
 800d922:	4302      	orrs	r2, r0
 800d924:	d094      	beq.n	800d850 <_strtod_l+0xb0>
 800d926:	2600      	movs	r6, #0
 800d928:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800d92a:	1c6a      	adds	r2, r5, #1
 800d92c:	9215      	str	r2, [sp, #84]	; 0x54
 800d92e:	786a      	ldrb	r2, [r5, #1]
 800d930:	2a2b      	cmp	r2, #43	; 0x2b
 800d932:	d074      	beq.n	800da1e <_strtod_l+0x27e>
 800d934:	2a2d      	cmp	r2, #45	; 0x2d
 800d936:	d078      	beq.n	800da2a <_strtod_l+0x28a>
 800d938:	f04f 0c00 	mov.w	ip, #0
 800d93c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d940:	2909      	cmp	r1, #9
 800d942:	d97f      	bls.n	800da44 <_strtod_l+0x2a4>
 800d944:	9515      	str	r5, [sp, #84]	; 0x54
 800d946:	2700      	movs	r7, #0
 800d948:	e09e      	b.n	800da88 <_strtod_l+0x2e8>
 800d94a:	2300      	movs	r3, #0
 800d94c:	e7c8      	b.n	800d8e0 <_strtod_l+0x140>
 800d94e:	f1bb 0f08 	cmp.w	fp, #8
 800d952:	bfd8      	it	le
 800d954:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800d956:	f100 0001 	add.w	r0, r0, #1
 800d95a:	bfda      	itte	le
 800d95c:	fb02 3301 	mlale	r3, r2, r1, r3
 800d960:	9309      	strle	r3, [sp, #36]	; 0x24
 800d962:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800d966:	f10b 0b01 	add.w	fp, fp, #1
 800d96a:	9015      	str	r0, [sp, #84]	; 0x54
 800d96c:	e7c1      	b.n	800d8f2 <_strtod_l+0x152>
 800d96e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d970:	1c5a      	adds	r2, r3, #1
 800d972:	9215      	str	r2, [sp, #84]	; 0x54
 800d974:	785a      	ldrb	r2, [r3, #1]
 800d976:	f1bb 0f00 	cmp.w	fp, #0
 800d97a:	d037      	beq.n	800d9ec <_strtod_l+0x24c>
 800d97c:	9005      	str	r0, [sp, #20]
 800d97e:	465e      	mov	r6, fp
 800d980:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d984:	2b09      	cmp	r3, #9
 800d986:	d912      	bls.n	800d9ae <_strtod_l+0x20e>
 800d988:	2301      	movs	r3, #1
 800d98a:	e7c4      	b.n	800d916 <_strtod_l+0x176>
 800d98c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d98e:	1c5a      	adds	r2, r3, #1
 800d990:	9215      	str	r2, [sp, #84]	; 0x54
 800d992:	785a      	ldrb	r2, [r3, #1]
 800d994:	3001      	adds	r0, #1
 800d996:	2a30      	cmp	r2, #48	; 0x30
 800d998:	d0f8      	beq.n	800d98c <_strtod_l+0x1ec>
 800d99a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d99e:	2b08      	cmp	r3, #8
 800d9a0:	f200 84c1 	bhi.w	800e326 <_strtod_l+0xb86>
 800d9a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d9a6:	9005      	str	r0, [sp, #20]
 800d9a8:	2000      	movs	r0, #0
 800d9aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800d9ac:	4606      	mov	r6, r0
 800d9ae:	3a30      	subs	r2, #48	; 0x30
 800d9b0:	f100 0301 	add.w	r3, r0, #1
 800d9b4:	d014      	beq.n	800d9e0 <_strtod_l+0x240>
 800d9b6:	9905      	ldr	r1, [sp, #20]
 800d9b8:	4419      	add	r1, r3
 800d9ba:	9105      	str	r1, [sp, #20]
 800d9bc:	4633      	mov	r3, r6
 800d9be:	eb00 0c06 	add.w	ip, r0, r6
 800d9c2:	210a      	movs	r1, #10
 800d9c4:	4563      	cmp	r3, ip
 800d9c6:	d113      	bne.n	800d9f0 <_strtod_l+0x250>
 800d9c8:	1833      	adds	r3, r6, r0
 800d9ca:	2b08      	cmp	r3, #8
 800d9cc:	f106 0601 	add.w	r6, r6, #1
 800d9d0:	4406      	add	r6, r0
 800d9d2:	dc1a      	bgt.n	800da0a <_strtod_l+0x26a>
 800d9d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d9d6:	230a      	movs	r3, #10
 800d9d8:	fb03 2301 	mla	r3, r3, r1, r2
 800d9dc:	9309      	str	r3, [sp, #36]	; 0x24
 800d9de:	2300      	movs	r3, #0
 800d9e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d9e2:	1c51      	adds	r1, r2, #1
 800d9e4:	9115      	str	r1, [sp, #84]	; 0x54
 800d9e6:	7852      	ldrb	r2, [r2, #1]
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	e7c9      	b.n	800d980 <_strtod_l+0x1e0>
 800d9ec:	4658      	mov	r0, fp
 800d9ee:	e7d2      	b.n	800d996 <_strtod_l+0x1f6>
 800d9f0:	2b08      	cmp	r3, #8
 800d9f2:	f103 0301 	add.w	r3, r3, #1
 800d9f6:	dc03      	bgt.n	800da00 <_strtod_l+0x260>
 800d9f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d9fa:	434f      	muls	r7, r1
 800d9fc:	9709      	str	r7, [sp, #36]	; 0x24
 800d9fe:	e7e1      	b.n	800d9c4 <_strtod_l+0x224>
 800da00:	2b10      	cmp	r3, #16
 800da02:	bfd8      	it	le
 800da04:	fb01 fa0a 	mulle.w	sl, r1, sl
 800da08:	e7dc      	b.n	800d9c4 <_strtod_l+0x224>
 800da0a:	2e10      	cmp	r6, #16
 800da0c:	bfdc      	itt	le
 800da0e:	230a      	movle	r3, #10
 800da10:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800da14:	e7e3      	b.n	800d9de <_strtod_l+0x23e>
 800da16:	2300      	movs	r3, #0
 800da18:	9305      	str	r3, [sp, #20]
 800da1a:	2301      	movs	r3, #1
 800da1c:	e780      	b.n	800d920 <_strtod_l+0x180>
 800da1e:	f04f 0c00 	mov.w	ip, #0
 800da22:	1caa      	adds	r2, r5, #2
 800da24:	9215      	str	r2, [sp, #84]	; 0x54
 800da26:	78aa      	ldrb	r2, [r5, #2]
 800da28:	e788      	b.n	800d93c <_strtod_l+0x19c>
 800da2a:	f04f 0c01 	mov.w	ip, #1
 800da2e:	e7f8      	b.n	800da22 <_strtod_l+0x282>
 800da30:	08011ef4 	.word	0x08011ef4
 800da34:	08011ef0 	.word	0x08011ef0
 800da38:	7ff00000 	.word	0x7ff00000
 800da3c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800da3e:	1c51      	adds	r1, r2, #1
 800da40:	9115      	str	r1, [sp, #84]	; 0x54
 800da42:	7852      	ldrb	r2, [r2, #1]
 800da44:	2a30      	cmp	r2, #48	; 0x30
 800da46:	d0f9      	beq.n	800da3c <_strtod_l+0x29c>
 800da48:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800da4c:	2908      	cmp	r1, #8
 800da4e:	f63f af7a 	bhi.w	800d946 <_strtod_l+0x1a6>
 800da52:	3a30      	subs	r2, #48	; 0x30
 800da54:	9208      	str	r2, [sp, #32]
 800da56:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800da58:	920c      	str	r2, [sp, #48]	; 0x30
 800da5a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800da5c:	1c57      	adds	r7, r2, #1
 800da5e:	9715      	str	r7, [sp, #84]	; 0x54
 800da60:	7852      	ldrb	r2, [r2, #1]
 800da62:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800da66:	f1be 0f09 	cmp.w	lr, #9
 800da6a:	d938      	bls.n	800dade <_strtod_l+0x33e>
 800da6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800da6e:	1a7f      	subs	r7, r7, r1
 800da70:	2f08      	cmp	r7, #8
 800da72:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800da76:	dc03      	bgt.n	800da80 <_strtod_l+0x2e0>
 800da78:	9908      	ldr	r1, [sp, #32]
 800da7a:	428f      	cmp	r7, r1
 800da7c:	bfa8      	it	ge
 800da7e:	460f      	movge	r7, r1
 800da80:	f1bc 0f00 	cmp.w	ip, #0
 800da84:	d000      	beq.n	800da88 <_strtod_l+0x2e8>
 800da86:	427f      	negs	r7, r7
 800da88:	2e00      	cmp	r6, #0
 800da8a:	d14f      	bne.n	800db2c <_strtod_l+0x38c>
 800da8c:	9904      	ldr	r1, [sp, #16]
 800da8e:	4301      	orrs	r1, r0
 800da90:	f47f aec1 	bne.w	800d816 <_strtod_l+0x76>
 800da94:	2b00      	cmp	r3, #0
 800da96:	f47f aedb 	bne.w	800d850 <_strtod_l+0xb0>
 800da9a:	2a69      	cmp	r2, #105	; 0x69
 800da9c:	d029      	beq.n	800daf2 <_strtod_l+0x352>
 800da9e:	dc26      	bgt.n	800daee <_strtod_l+0x34e>
 800daa0:	2a49      	cmp	r2, #73	; 0x49
 800daa2:	d026      	beq.n	800daf2 <_strtod_l+0x352>
 800daa4:	2a4e      	cmp	r2, #78	; 0x4e
 800daa6:	f47f aed3 	bne.w	800d850 <_strtod_l+0xb0>
 800daaa:	499b      	ldr	r1, [pc, #620]	; (800dd18 <_strtod_l+0x578>)
 800daac:	a815      	add	r0, sp, #84	; 0x54
 800daae:	f002 fe85 	bl	80107bc <__match>
 800dab2:	2800      	cmp	r0, #0
 800dab4:	f43f aecc 	beq.w	800d850 <_strtod_l+0xb0>
 800dab8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	2b28      	cmp	r3, #40	; 0x28
 800dabe:	d12f      	bne.n	800db20 <_strtod_l+0x380>
 800dac0:	4996      	ldr	r1, [pc, #600]	; (800dd1c <_strtod_l+0x57c>)
 800dac2:	aa18      	add	r2, sp, #96	; 0x60
 800dac4:	a815      	add	r0, sp, #84	; 0x54
 800dac6:	f002 fe8d 	bl	80107e4 <__hexnan>
 800daca:	2805      	cmp	r0, #5
 800dacc:	d128      	bne.n	800db20 <_strtod_l+0x380>
 800dace:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dad0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dad4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800dad8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800dadc:	e69b      	b.n	800d816 <_strtod_l+0x76>
 800dade:	9f08      	ldr	r7, [sp, #32]
 800dae0:	210a      	movs	r1, #10
 800dae2:	fb01 2107 	mla	r1, r1, r7, r2
 800dae6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800daea:	9208      	str	r2, [sp, #32]
 800daec:	e7b5      	b.n	800da5a <_strtod_l+0x2ba>
 800daee:	2a6e      	cmp	r2, #110	; 0x6e
 800daf0:	e7d9      	b.n	800daa6 <_strtod_l+0x306>
 800daf2:	498b      	ldr	r1, [pc, #556]	; (800dd20 <_strtod_l+0x580>)
 800daf4:	a815      	add	r0, sp, #84	; 0x54
 800daf6:	f002 fe61 	bl	80107bc <__match>
 800dafa:	2800      	cmp	r0, #0
 800dafc:	f43f aea8 	beq.w	800d850 <_strtod_l+0xb0>
 800db00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db02:	4988      	ldr	r1, [pc, #544]	; (800dd24 <_strtod_l+0x584>)
 800db04:	3b01      	subs	r3, #1
 800db06:	a815      	add	r0, sp, #84	; 0x54
 800db08:	9315      	str	r3, [sp, #84]	; 0x54
 800db0a:	f002 fe57 	bl	80107bc <__match>
 800db0e:	b910      	cbnz	r0, 800db16 <_strtod_l+0x376>
 800db10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db12:	3301      	adds	r3, #1
 800db14:	9315      	str	r3, [sp, #84]	; 0x54
 800db16:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800dd34 <_strtod_l+0x594>
 800db1a:	f04f 0800 	mov.w	r8, #0
 800db1e:	e67a      	b.n	800d816 <_strtod_l+0x76>
 800db20:	4881      	ldr	r0, [pc, #516]	; (800dd28 <_strtod_l+0x588>)
 800db22:	f001 fccd 	bl	800f4c0 <nan>
 800db26:	ec59 8b10 	vmov	r8, r9, d0
 800db2a:	e674      	b.n	800d816 <_strtod_l+0x76>
 800db2c:	9b05      	ldr	r3, [sp, #20]
 800db2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db30:	1afb      	subs	r3, r7, r3
 800db32:	f1bb 0f00 	cmp.w	fp, #0
 800db36:	bf08      	it	eq
 800db38:	46b3      	moveq	fp, r6
 800db3a:	2e10      	cmp	r6, #16
 800db3c:	9308      	str	r3, [sp, #32]
 800db3e:	4635      	mov	r5, r6
 800db40:	bfa8      	it	ge
 800db42:	2510      	movge	r5, #16
 800db44:	f7f2 fcde 	bl	8000504 <__aeabi_ui2d>
 800db48:	2e09      	cmp	r6, #9
 800db4a:	4680      	mov	r8, r0
 800db4c:	4689      	mov	r9, r1
 800db4e:	dd13      	ble.n	800db78 <_strtod_l+0x3d8>
 800db50:	4b76      	ldr	r3, [pc, #472]	; (800dd2c <_strtod_l+0x58c>)
 800db52:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800db56:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800db5a:	f7f2 fd4d 	bl	80005f8 <__aeabi_dmul>
 800db5e:	4680      	mov	r8, r0
 800db60:	4650      	mov	r0, sl
 800db62:	4689      	mov	r9, r1
 800db64:	f7f2 fcce 	bl	8000504 <__aeabi_ui2d>
 800db68:	4602      	mov	r2, r0
 800db6a:	460b      	mov	r3, r1
 800db6c:	4640      	mov	r0, r8
 800db6e:	4649      	mov	r1, r9
 800db70:	f7f2 fb8c 	bl	800028c <__adddf3>
 800db74:	4680      	mov	r8, r0
 800db76:	4689      	mov	r9, r1
 800db78:	2e0f      	cmp	r6, #15
 800db7a:	dc38      	bgt.n	800dbee <_strtod_l+0x44e>
 800db7c:	9b08      	ldr	r3, [sp, #32]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	f43f ae49 	beq.w	800d816 <_strtod_l+0x76>
 800db84:	dd24      	ble.n	800dbd0 <_strtod_l+0x430>
 800db86:	2b16      	cmp	r3, #22
 800db88:	dc0b      	bgt.n	800dba2 <_strtod_l+0x402>
 800db8a:	4968      	ldr	r1, [pc, #416]	; (800dd2c <_strtod_l+0x58c>)
 800db8c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800db90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db94:	4642      	mov	r2, r8
 800db96:	464b      	mov	r3, r9
 800db98:	f7f2 fd2e 	bl	80005f8 <__aeabi_dmul>
 800db9c:	4680      	mov	r8, r0
 800db9e:	4689      	mov	r9, r1
 800dba0:	e639      	b.n	800d816 <_strtod_l+0x76>
 800dba2:	9a08      	ldr	r2, [sp, #32]
 800dba4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	db20      	blt.n	800dbee <_strtod_l+0x44e>
 800dbac:	4c5f      	ldr	r4, [pc, #380]	; (800dd2c <_strtod_l+0x58c>)
 800dbae:	f1c6 060f 	rsb	r6, r6, #15
 800dbb2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800dbb6:	4642      	mov	r2, r8
 800dbb8:	464b      	mov	r3, r9
 800dbba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbbe:	f7f2 fd1b 	bl	80005f8 <__aeabi_dmul>
 800dbc2:	9b08      	ldr	r3, [sp, #32]
 800dbc4:	1b9e      	subs	r6, r3, r6
 800dbc6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800dbca:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dbce:	e7e3      	b.n	800db98 <_strtod_l+0x3f8>
 800dbd0:	9b08      	ldr	r3, [sp, #32]
 800dbd2:	3316      	adds	r3, #22
 800dbd4:	db0b      	blt.n	800dbee <_strtod_l+0x44e>
 800dbd6:	9b05      	ldr	r3, [sp, #20]
 800dbd8:	1bdf      	subs	r7, r3, r7
 800dbda:	4b54      	ldr	r3, [pc, #336]	; (800dd2c <_strtod_l+0x58c>)
 800dbdc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800dbe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbe4:	4640      	mov	r0, r8
 800dbe6:	4649      	mov	r1, r9
 800dbe8:	f7f2 fe30 	bl	800084c <__aeabi_ddiv>
 800dbec:	e7d6      	b.n	800db9c <_strtod_l+0x3fc>
 800dbee:	9b08      	ldr	r3, [sp, #32]
 800dbf0:	1b75      	subs	r5, r6, r5
 800dbf2:	441d      	add	r5, r3
 800dbf4:	2d00      	cmp	r5, #0
 800dbf6:	dd70      	ble.n	800dcda <_strtod_l+0x53a>
 800dbf8:	f015 030f 	ands.w	r3, r5, #15
 800dbfc:	d00a      	beq.n	800dc14 <_strtod_l+0x474>
 800dbfe:	494b      	ldr	r1, [pc, #300]	; (800dd2c <_strtod_l+0x58c>)
 800dc00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dc04:	4642      	mov	r2, r8
 800dc06:	464b      	mov	r3, r9
 800dc08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc0c:	f7f2 fcf4 	bl	80005f8 <__aeabi_dmul>
 800dc10:	4680      	mov	r8, r0
 800dc12:	4689      	mov	r9, r1
 800dc14:	f035 050f 	bics.w	r5, r5, #15
 800dc18:	d04d      	beq.n	800dcb6 <_strtod_l+0x516>
 800dc1a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800dc1e:	dd22      	ble.n	800dc66 <_strtod_l+0x4c6>
 800dc20:	2500      	movs	r5, #0
 800dc22:	46ab      	mov	fp, r5
 800dc24:	9509      	str	r5, [sp, #36]	; 0x24
 800dc26:	9505      	str	r5, [sp, #20]
 800dc28:	2322      	movs	r3, #34	; 0x22
 800dc2a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800dd34 <_strtod_l+0x594>
 800dc2e:	6023      	str	r3, [r4, #0]
 800dc30:	f04f 0800 	mov.w	r8, #0
 800dc34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	f43f aded 	beq.w	800d816 <_strtod_l+0x76>
 800dc3c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800dc3e:	4620      	mov	r0, r4
 800dc40:	f002 febe 	bl	80109c0 <_Bfree>
 800dc44:	9905      	ldr	r1, [sp, #20]
 800dc46:	4620      	mov	r0, r4
 800dc48:	f002 feba 	bl	80109c0 <_Bfree>
 800dc4c:	4659      	mov	r1, fp
 800dc4e:	4620      	mov	r0, r4
 800dc50:	f002 feb6 	bl	80109c0 <_Bfree>
 800dc54:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc56:	4620      	mov	r0, r4
 800dc58:	f002 feb2 	bl	80109c0 <_Bfree>
 800dc5c:	4629      	mov	r1, r5
 800dc5e:	4620      	mov	r0, r4
 800dc60:	f002 feae 	bl	80109c0 <_Bfree>
 800dc64:	e5d7      	b.n	800d816 <_strtod_l+0x76>
 800dc66:	4b32      	ldr	r3, [pc, #200]	; (800dd30 <_strtod_l+0x590>)
 800dc68:	9304      	str	r3, [sp, #16]
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	112d      	asrs	r5, r5, #4
 800dc6e:	4640      	mov	r0, r8
 800dc70:	4649      	mov	r1, r9
 800dc72:	469a      	mov	sl, r3
 800dc74:	2d01      	cmp	r5, #1
 800dc76:	dc21      	bgt.n	800dcbc <_strtod_l+0x51c>
 800dc78:	b10b      	cbz	r3, 800dc7e <_strtod_l+0x4de>
 800dc7a:	4680      	mov	r8, r0
 800dc7c:	4689      	mov	r9, r1
 800dc7e:	492c      	ldr	r1, [pc, #176]	; (800dd30 <_strtod_l+0x590>)
 800dc80:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800dc84:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800dc88:	4642      	mov	r2, r8
 800dc8a:	464b      	mov	r3, r9
 800dc8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc90:	f7f2 fcb2 	bl	80005f8 <__aeabi_dmul>
 800dc94:	4b27      	ldr	r3, [pc, #156]	; (800dd34 <_strtod_l+0x594>)
 800dc96:	460a      	mov	r2, r1
 800dc98:	400b      	ands	r3, r1
 800dc9a:	4927      	ldr	r1, [pc, #156]	; (800dd38 <_strtod_l+0x598>)
 800dc9c:	428b      	cmp	r3, r1
 800dc9e:	4680      	mov	r8, r0
 800dca0:	d8be      	bhi.n	800dc20 <_strtod_l+0x480>
 800dca2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800dca6:	428b      	cmp	r3, r1
 800dca8:	bf86      	itte	hi
 800dcaa:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800dd3c <_strtod_l+0x59c>
 800dcae:	f04f 38ff 	movhi.w	r8, #4294967295
 800dcb2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	9304      	str	r3, [sp, #16]
 800dcba:	e07b      	b.n	800ddb4 <_strtod_l+0x614>
 800dcbc:	07ea      	lsls	r2, r5, #31
 800dcbe:	d505      	bpl.n	800dccc <_strtod_l+0x52c>
 800dcc0:	9b04      	ldr	r3, [sp, #16]
 800dcc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc6:	f7f2 fc97 	bl	80005f8 <__aeabi_dmul>
 800dcca:	2301      	movs	r3, #1
 800dccc:	9a04      	ldr	r2, [sp, #16]
 800dcce:	3208      	adds	r2, #8
 800dcd0:	f10a 0a01 	add.w	sl, sl, #1
 800dcd4:	106d      	asrs	r5, r5, #1
 800dcd6:	9204      	str	r2, [sp, #16]
 800dcd8:	e7cc      	b.n	800dc74 <_strtod_l+0x4d4>
 800dcda:	d0ec      	beq.n	800dcb6 <_strtod_l+0x516>
 800dcdc:	426d      	negs	r5, r5
 800dcde:	f015 020f 	ands.w	r2, r5, #15
 800dce2:	d00a      	beq.n	800dcfa <_strtod_l+0x55a>
 800dce4:	4b11      	ldr	r3, [pc, #68]	; (800dd2c <_strtod_l+0x58c>)
 800dce6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dcea:	4640      	mov	r0, r8
 800dcec:	4649      	mov	r1, r9
 800dcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf2:	f7f2 fdab 	bl	800084c <__aeabi_ddiv>
 800dcf6:	4680      	mov	r8, r0
 800dcf8:	4689      	mov	r9, r1
 800dcfa:	112d      	asrs	r5, r5, #4
 800dcfc:	d0db      	beq.n	800dcb6 <_strtod_l+0x516>
 800dcfe:	2d1f      	cmp	r5, #31
 800dd00:	dd1e      	ble.n	800dd40 <_strtod_l+0x5a0>
 800dd02:	2500      	movs	r5, #0
 800dd04:	46ab      	mov	fp, r5
 800dd06:	9509      	str	r5, [sp, #36]	; 0x24
 800dd08:	9505      	str	r5, [sp, #20]
 800dd0a:	2322      	movs	r3, #34	; 0x22
 800dd0c:	f04f 0800 	mov.w	r8, #0
 800dd10:	f04f 0900 	mov.w	r9, #0
 800dd14:	6023      	str	r3, [r4, #0]
 800dd16:	e78d      	b.n	800dc34 <_strtod_l+0x494>
 800dd18:	08011f55 	.word	0x08011f55
 800dd1c:	08011f08 	.word	0x08011f08
 800dd20:	08011f4d 	.word	0x08011f4d
 800dd24:	08011f8c 	.word	0x08011f8c
 800dd28:	08012319 	.word	0x08012319
 800dd2c:	080120f8 	.word	0x080120f8
 800dd30:	080120d0 	.word	0x080120d0
 800dd34:	7ff00000 	.word	0x7ff00000
 800dd38:	7ca00000 	.word	0x7ca00000
 800dd3c:	7fefffff 	.word	0x7fefffff
 800dd40:	f015 0310 	ands.w	r3, r5, #16
 800dd44:	bf18      	it	ne
 800dd46:	236a      	movne	r3, #106	; 0x6a
 800dd48:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800e0ec <_strtod_l+0x94c>
 800dd4c:	9304      	str	r3, [sp, #16]
 800dd4e:	4640      	mov	r0, r8
 800dd50:	4649      	mov	r1, r9
 800dd52:	2300      	movs	r3, #0
 800dd54:	07ea      	lsls	r2, r5, #31
 800dd56:	d504      	bpl.n	800dd62 <_strtod_l+0x5c2>
 800dd58:	e9da 2300 	ldrd	r2, r3, [sl]
 800dd5c:	f7f2 fc4c 	bl	80005f8 <__aeabi_dmul>
 800dd60:	2301      	movs	r3, #1
 800dd62:	106d      	asrs	r5, r5, #1
 800dd64:	f10a 0a08 	add.w	sl, sl, #8
 800dd68:	d1f4      	bne.n	800dd54 <_strtod_l+0x5b4>
 800dd6a:	b10b      	cbz	r3, 800dd70 <_strtod_l+0x5d0>
 800dd6c:	4680      	mov	r8, r0
 800dd6e:	4689      	mov	r9, r1
 800dd70:	9b04      	ldr	r3, [sp, #16]
 800dd72:	b1bb      	cbz	r3, 800dda4 <_strtod_l+0x604>
 800dd74:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800dd78:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	4649      	mov	r1, r9
 800dd80:	dd10      	ble.n	800dda4 <_strtod_l+0x604>
 800dd82:	2b1f      	cmp	r3, #31
 800dd84:	f340 811e 	ble.w	800dfc4 <_strtod_l+0x824>
 800dd88:	2b34      	cmp	r3, #52	; 0x34
 800dd8a:	bfde      	ittt	le
 800dd8c:	f04f 33ff 	movle.w	r3, #4294967295
 800dd90:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800dd94:	4093      	lslle	r3, r2
 800dd96:	f04f 0800 	mov.w	r8, #0
 800dd9a:	bfcc      	ite	gt
 800dd9c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800dda0:	ea03 0901 	andle.w	r9, r3, r1
 800dda4:	2200      	movs	r2, #0
 800dda6:	2300      	movs	r3, #0
 800dda8:	4640      	mov	r0, r8
 800ddaa:	4649      	mov	r1, r9
 800ddac:	f7f2 fe8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ddb0:	2800      	cmp	r0, #0
 800ddb2:	d1a6      	bne.n	800dd02 <_strtod_l+0x562>
 800ddb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddb6:	9300      	str	r3, [sp, #0]
 800ddb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ddba:	4633      	mov	r3, r6
 800ddbc:	465a      	mov	r2, fp
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	f002 fe66 	bl	8010a90 <__s2b>
 800ddc4:	9009      	str	r0, [sp, #36]	; 0x24
 800ddc6:	2800      	cmp	r0, #0
 800ddc8:	f43f af2a 	beq.w	800dc20 <_strtod_l+0x480>
 800ddcc:	9a08      	ldr	r2, [sp, #32]
 800ddce:	9b05      	ldr	r3, [sp, #20]
 800ddd0:	2a00      	cmp	r2, #0
 800ddd2:	eba3 0307 	sub.w	r3, r3, r7
 800ddd6:	bfa8      	it	ge
 800ddd8:	2300      	movge	r3, #0
 800ddda:	930c      	str	r3, [sp, #48]	; 0x30
 800dddc:	2500      	movs	r5, #0
 800ddde:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800dde2:	9312      	str	r3, [sp, #72]	; 0x48
 800dde4:	46ab      	mov	fp, r5
 800dde6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dde8:	4620      	mov	r0, r4
 800ddea:	6859      	ldr	r1, [r3, #4]
 800ddec:	f002 fda8 	bl	8010940 <_Balloc>
 800ddf0:	9005      	str	r0, [sp, #20]
 800ddf2:	2800      	cmp	r0, #0
 800ddf4:	f43f af18 	beq.w	800dc28 <_strtod_l+0x488>
 800ddf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddfa:	691a      	ldr	r2, [r3, #16]
 800ddfc:	3202      	adds	r2, #2
 800ddfe:	f103 010c 	add.w	r1, r3, #12
 800de02:	0092      	lsls	r2, r2, #2
 800de04:	300c      	adds	r0, #12
 800de06:	f001 fb4c 	bl	800f4a2 <memcpy>
 800de0a:	ec49 8b10 	vmov	d0, r8, r9
 800de0e:	aa18      	add	r2, sp, #96	; 0x60
 800de10:	a917      	add	r1, sp, #92	; 0x5c
 800de12:	4620      	mov	r0, r4
 800de14:	f003 f970 	bl	80110f8 <__d2b>
 800de18:	ec49 8b18 	vmov	d8, r8, r9
 800de1c:	9016      	str	r0, [sp, #88]	; 0x58
 800de1e:	2800      	cmp	r0, #0
 800de20:	f43f af02 	beq.w	800dc28 <_strtod_l+0x488>
 800de24:	2101      	movs	r1, #1
 800de26:	4620      	mov	r0, r4
 800de28:	f002 feca 	bl	8010bc0 <__i2b>
 800de2c:	4683      	mov	fp, r0
 800de2e:	2800      	cmp	r0, #0
 800de30:	f43f aefa 	beq.w	800dc28 <_strtod_l+0x488>
 800de34:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800de36:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800de38:	2e00      	cmp	r6, #0
 800de3a:	bfab      	itete	ge
 800de3c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800de3e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800de40:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800de42:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800de46:	bfac      	ite	ge
 800de48:	eb06 0a03 	addge.w	sl, r6, r3
 800de4c:	1b9f      	sublt	r7, r3, r6
 800de4e:	9b04      	ldr	r3, [sp, #16]
 800de50:	1af6      	subs	r6, r6, r3
 800de52:	4416      	add	r6, r2
 800de54:	4ba0      	ldr	r3, [pc, #640]	; (800e0d8 <_strtod_l+0x938>)
 800de56:	3e01      	subs	r6, #1
 800de58:	429e      	cmp	r6, r3
 800de5a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800de5e:	f280 80c4 	bge.w	800dfea <_strtod_l+0x84a>
 800de62:	1b9b      	subs	r3, r3, r6
 800de64:	2b1f      	cmp	r3, #31
 800de66:	eba2 0203 	sub.w	r2, r2, r3
 800de6a:	f04f 0101 	mov.w	r1, #1
 800de6e:	f300 80b0 	bgt.w	800dfd2 <_strtod_l+0x832>
 800de72:	fa01 f303 	lsl.w	r3, r1, r3
 800de76:	930e      	str	r3, [sp, #56]	; 0x38
 800de78:	2300      	movs	r3, #0
 800de7a:	930d      	str	r3, [sp, #52]	; 0x34
 800de7c:	eb0a 0602 	add.w	r6, sl, r2
 800de80:	9b04      	ldr	r3, [sp, #16]
 800de82:	45b2      	cmp	sl, r6
 800de84:	4417      	add	r7, r2
 800de86:	441f      	add	r7, r3
 800de88:	4653      	mov	r3, sl
 800de8a:	bfa8      	it	ge
 800de8c:	4633      	movge	r3, r6
 800de8e:	42bb      	cmp	r3, r7
 800de90:	bfa8      	it	ge
 800de92:	463b      	movge	r3, r7
 800de94:	2b00      	cmp	r3, #0
 800de96:	bfc2      	ittt	gt
 800de98:	1af6      	subgt	r6, r6, r3
 800de9a:	1aff      	subgt	r7, r7, r3
 800de9c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800dea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	dd17      	ble.n	800ded6 <_strtod_l+0x736>
 800dea6:	4659      	mov	r1, fp
 800dea8:	461a      	mov	r2, r3
 800deaa:	4620      	mov	r0, r4
 800deac:	f002 ff48 	bl	8010d40 <__pow5mult>
 800deb0:	4683      	mov	fp, r0
 800deb2:	2800      	cmp	r0, #0
 800deb4:	f43f aeb8 	beq.w	800dc28 <_strtod_l+0x488>
 800deb8:	4601      	mov	r1, r0
 800deba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800debc:	4620      	mov	r0, r4
 800debe:	f002 fe95 	bl	8010bec <__multiply>
 800dec2:	900b      	str	r0, [sp, #44]	; 0x2c
 800dec4:	2800      	cmp	r0, #0
 800dec6:	f43f aeaf 	beq.w	800dc28 <_strtod_l+0x488>
 800deca:	9916      	ldr	r1, [sp, #88]	; 0x58
 800decc:	4620      	mov	r0, r4
 800dece:	f002 fd77 	bl	80109c0 <_Bfree>
 800ded2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ded4:	9316      	str	r3, [sp, #88]	; 0x58
 800ded6:	2e00      	cmp	r6, #0
 800ded8:	f300 808c 	bgt.w	800dff4 <_strtod_l+0x854>
 800dedc:	9b08      	ldr	r3, [sp, #32]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	dd08      	ble.n	800def4 <_strtod_l+0x754>
 800dee2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dee4:	9905      	ldr	r1, [sp, #20]
 800dee6:	4620      	mov	r0, r4
 800dee8:	f002 ff2a 	bl	8010d40 <__pow5mult>
 800deec:	9005      	str	r0, [sp, #20]
 800deee:	2800      	cmp	r0, #0
 800def0:	f43f ae9a 	beq.w	800dc28 <_strtod_l+0x488>
 800def4:	2f00      	cmp	r7, #0
 800def6:	dd08      	ble.n	800df0a <_strtod_l+0x76a>
 800def8:	9905      	ldr	r1, [sp, #20]
 800defa:	463a      	mov	r2, r7
 800defc:	4620      	mov	r0, r4
 800defe:	f002 ff79 	bl	8010df4 <__lshift>
 800df02:	9005      	str	r0, [sp, #20]
 800df04:	2800      	cmp	r0, #0
 800df06:	f43f ae8f 	beq.w	800dc28 <_strtod_l+0x488>
 800df0a:	f1ba 0f00 	cmp.w	sl, #0
 800df0e:	dd08      	ble.n	800df22 <_strtod_l+0x782>
 800df10:	4659      	mov	r1, fp
 800df12:	4652      	mov	r2, sl
 800df14:	4620      	mov	r0, r4
 800df16:	f002 ff6d 	bl	8010df4 <__lshift>
 800df1a:	4683      	mov	fp, r0
 800df1c:	2800      	cmp	r0, #0
 800df1e:	f43f ae83 	beq.w	800dc28 <_strtod_l+0x488>
 800df22:	9a05      	ldr	r2, [sp, #20]
 800df24:	9916      	ldr	r1, [sp, #88]	; 0x58
 800df26:	4620      	mov	r0, r4
 800df28:	f002 ffec 	bl	8010f04 <__mdiff>
 800df2c:	4605      	mov	r5, r0
 800df2e:	2800      	cmp	r0, #0
 800df30:	f43f ae7a 	beq.w	800dc28 <_strtod_l+0x488>
 800df34:	68c3      	ldr	r3, [r0, #12]
 800df36:	930b      	str	r3, [sp, #44]	; 0x2c
 800df38:	2300      	movs	r3, #0
 800df3a:	60c3      	str	r3, [r0, #12]
 800df3c:	4659      	mov	r1, fp
 800df3e:	f002 ffc5 	bl	8010ecc <__mcmp>
 800df42:	2800      	cmp	r0, #0
 800df44:	da60      	bge.n	800e008 <_strtod_l+0x868>
 800df46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df48:	ea53 0308 	orrs.w	r3, r3, r8
 800df4c:	f040 8084 	bne.w	800e058 <_strtod_l+0x8b8>
 800df50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800df54:	2b00      	cmp	r3, #0
 800df56:	d17f      	bne.n	800e058 <_strtod_l+0x8b8>
 800df58:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800df5c:	0d1b      	lsrs	r3, r3, #20
 800df5e:	051b      	lsls	r3, r3, #20
 800df60:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800df64:	d978      	bls.n	800e058 <_strtod_l+0x8b8>
 800df66:	696b      	ldr	r3, [r5, #20]
 800df68:	b913      	cbnz	r3, 800df70 <_strtod_l+0x7d0>
 800df6a:	692b      	ldr	r3, [r5, #16]
 800df6c:	2b01      	cmp	r3, #1
 800df6e:	dd73      	ble.n	800e058 <_strtod_l+0x8b8>
 800df70:	4629      	mov	r1, r5
 800df72:	2201      	movs	r2, #1
 800df74:	4620      	mov	r0, r4
 800df76:	f002 ff3d 	bl	8010df4 <__lshift>
 800df7a:	4659      	mov	r1, fp
 800df7c:	4605      	mov	r5, r0
 800df7e:	f002 ffa5 	bl	8010ecc <__mcmp>
 800df82:	2800      	cmp	r0, #0
 800df84:	dd68      	ble.n	800e058 <_strtod_l+0x8b8>
 800df86:	9904      	ldr	r1, [sp, #16]
 800df88:	4a54      	ldr	r2, [pc, #336]	; (800e0dc <_strtod_l+0x93c>)
 800df8a:	464b      	mov	r3, r9
 800df8c:	2900      	cmp	r1, #0
 800df8e:	f000 8084 	beq.w	800e09a <_strtod_l+0x8fa>
 800df92:	ea02 0109 	and.w	r1, r2, r9
 800df96:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800df9a:	dc7e      	bgt.n	800e09a <_strtod_l+0x8fa>
 800df9c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800dfa0:	f77f aeb3 	ble.w	800dd0a <_strtod_l+0x56a>
 800dfa4:	4b4e      	ldr	r3, [pc, #312]	; (800e0e0 <_strtod_l+0x940>)
 800dfa6:	4640      	mov	r0, r8
 800dfa8:	4649      	mov	r1, r9
 800dfaa:	2200      	movs	r2, #0
 800dfac:	f7f2 fb24 	bl	80005f8 <__aeabi_dmul>
 800dfb0:	4b4a      	ldr	r3, [pc, #296]	; (800e0dc <_strtod_l+0x93c>)
 800dfb2:	400b      	ands	r3, r1
 800dfb4:	4680      	mov	r8, r0
 800dfb6:	4689      	mov	r9, r1
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	f47f ae3f 	bne.w	800dc3c <_strtod_l+0x49c>
 800dfbe:	2322      	movs	r3, #34	; 0x22
 800dfc0:	6023      	str	r3, [r4, #0]
 800dfc2:	e63b      	b.n	800dc3c <_strtod_l+0x49c>
 800dfc4:	f04f 32ff 	mov.w	r2, #4294967295
 800dfc8:	fa02 f303 	lsl.w	r3, r2, r3
 800dfcc:	ea03 0808 	and.w	r8, r3, r8
 800dfd0:	e6e8      	b.n	800dda4 <_strtod_l+0x604>
 800dfd2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800dfd6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800dfda:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800dfde:	36e2      	adds	r6, #226	; 0xe2
 800dfe0:	fa01 f306 	lsl.w	r3, r1, r6
 800dfe4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800dfe8:	e748      	b.n	800de7c <_strtod_l+0x6dc>
 800dfea:	2100      	movs	r1, #0
 800dfec:	2301      	movs	r3, #1
 800dfee:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800dff2:	e743      	b.n	800de7c <_strtod_l+0x6dc>
 800dff4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800dff6:	4632      	mov	r2, r6
 800dff8:	4620      	mov	r0, r4
 800dffa:	f002 fefb 	bl	8010df4 <__lshift>
 800dffe:	9016      	str	r0, [sp, #88]	; 0x58
 800e000:	2800      	cmp	r0, #0
 800e002:	f47f af6b 	bne.w	800dedc <_strtod_l+0x73c>
 800e006:	e60f      	b.n	800dc28 <_strtod_l+0x488>
 800e008:	46ca      	mov	sl, r9
 800e00a:	d171      	bne.n	800e0f0 <_strtod_l+0x950>
 800e00c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e00e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e012:	b352      	cbz	r2, 800e06a <_strtod_l+0x8ca>
 800e014:	4a33      	ldr	r2, [pc, #204]	; (800e0e4 <_strtod_l+0x944>)
 800e016:	4293      	cmp	r3, r2
 800e018:	d12a      	bne.n	800e070 <_strtod_l+0x8d0>
 800e01a:	9b04      	ldr	r3, [sp, #16]
 800e01c:	4641      	mov	r1, r8
 800e01e:	b1fb      	cbz	r3, 800e060 <_strtod_l+0x8c0>
 800e020:	4b2e      	ldr	r3, [pc, #184]	; (800e0dc <_strtod_l+0x93c>)
 800e022:	ea09 0303 	and.w	r3, r9, r3
 800e026:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e02a:	f04f 32ff 	mov.w	r2, #4294967295
 800e02e:	d81a      	bhi.n	800e066 <_strtod_l+0x8c6>
 800e030:	0d1b      	lsrs	r3, r3, #20
 800e032:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e036:	fa02 f303 	lsl.w	r3, r2, r3
 800e03a:	4299      	cmp	r1, r3
 800e03c:	d118      	bne.n	800e070 <_strtod_l+0x8d0>
 800e03e:	4b2a      	ldr	r3, [pc, #168]	; (800e0e8 <_strtod_l+0x948>)
 800e040:	459a      	cmp	sl, r3
 800e042:	d102      	bne.n	800e04a <_strtod_l+0x8aa>
 800e044:	3101      	adds	r1, #1
 800e046:	f43f adef 	beq.w	800dc28 <_strtod_l+0x488>
 800e04a:	4b24      	ldr	r3, [pc, #144]	; (800e0dc <_strtod_l+0x93c>)
 800e04c:	ea0a 0303 	and.w	r3, sl, r3
 800e050:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800e054:	f04f 0800 	mov.w	r8, #0
 800e058:	9b04      	ldr	r3, [sp, #16]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d1a2      	bne.n	800dfa4 <_strtod_l+0x804>
 800e05e:	e5ed      	b.n	800dc3c <_strtod_l+0x49c>
 800e060:	f04f 33ff 	mov.w	r3, #4294967295
 800e064:	e7e9      	b.n	800e03a <_strtod_l+0x89a>
 800e066:	4613      	mov	r3, r2
 800e068:	e7e7      	b.n	800e03a <_strtod_l+0x89a>
 800e06a:	ea53 0308 	orrs.w	r3, r3, r8
 800e06e:	d08a      	beq.n	800df86 <_strtod_l+0x7e6>
 800e070:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e072:	b1e3      	cbz	r3, 800e0ae <_strtod_l+0x90e>
 800e074:	ea13 0f0a 	tst.w	r3, sl
 800e078:	d0ee      	beq.n	800e058 <_strtod_l+0x8b8>
 800e07a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e07c:	9a04      	ldr	r2, [sp, #16]
 800e07e:	4640      	mov	r0, r8
 800e080:	4649      	mov	r1, r9
 800e082:	b1c3      	cbz	r3, 800e0b6 <_strtod_l+0x916>
 800e084:	f7ff fb70 	bl	800d768 <sulp>
 800e088:	4602      	mov	r2, r0
 800e08a:	460b      	mov	r3, r1
 800e08c:	ec51 0b18 	vmov	r0, r1, d8
 800e090:	f7f2 f8fc 	bl	800028c <__adddf3>
 800e094:	4680      	mov	r8, r0
 800e096:	4689      	mov	r9, r1
 800e098:	e7de      	b.n	800e058 <_strtod_l+0x8b8>
 800e09a:	4013      	ands	r3, r2
 800e09c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e0a0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e0a4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e0a8:	f04f 38ff 	mov.w	r8, #4294967295
 800e0ac:	e7d4      	b.n	800e058 <_strtod_l+0x8b8>
 800e0ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0b0:	ea13 0f08 	tst.w	r3, r8
 800e0b4:	e7e0      	b.n	800e078 <_strtod_l+0x8d8>
 800e0b6:	f7ff fb57 	bl	800d768 <sulp>
 800e0ba:	4602      	mov	r2, r0
 800e0bc:	460b      	mov	r3, r1
 800e0be:	ec51 0b18 	vmov	r0, r1, d8
 800e0c2:	f7f2 f8e1 	bl	8000288 <__aeabi_dsub>
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	4680      	mov	r8, r0
 800e0cc:	4689      	mov	r9, r1
 800e0ce:	f7f2 fcfb 	bl	8000ac8 <__aeabi_dcmpeq>
 800e0d2:	2800      	cmp	r0, #0
 800e0d4:	d0c0      	beq.n	800e058 <_strtod_l+0x8b8>
 800e0d6:	e618      	b.n	800dd0a <_strtod_l+0x56a>
 800e0d8:	fffffc02 	.word	0xfffffc02
 800e0dc:	7ff00000 	.word	0x7ff00000
 800e0e0:	39500000 	.word	0x39500000
 800e0e4:	000fffff 	.word	0x000fffff
 800e0e8:	7fefffff 	.word	0x7fefffff
 800e0ec:	08011f20 	.word	0x08011f20
 800e0f0:	4659      	mov	r1, fp
 800e0f2:	4628      	mov	r0, r5
 800e0f4:	f003 f85a 	bl	80111ac <__ratio>
 800e0f8:	ec57 6b10 	vmov	r6, r7, d0
 800e0fc:	ee10 0a10 	vmov	r0, s0
 800e100:	2200      	movs	r2, #0
 800e102:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e106:	4639      	mov	r1, r7
 800e108:	f7f2 fcf2 	bl	8000af0 <__aeabi_dcmple>
 800e10c:	2800      	cmp	r0, #0
 800e10e:	d071      	beq.n	800e1f4 <_strtod_l+0xa54>
 800e110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e112:	2b00      	cmp	r3, #0
 800e114:	d17c      	bne.n	800e210 <_strtod_l+0xa70>
 800e116:	f1b8 0f00 	cmp.w	r8, #0
 800e11a:	d15a      	bne.n	800e1d2 <_strtod_l+0xa32>
 800e11c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e120:	2b00      	cmp	r3, #0
 800e122:	d15d      	bne.n	800e1e0 <_strtod_l+0xa40>
 800e124:	4b90      	ldr	r3, [pc, #576]	; (800e368 <_strtod_l+0xbc8>)
 800e126:	2200      	movs	r2, #0
 800e128:	4630      	mov	r0, r6
 800e12a:	4639      	mov	r1, r7
 800e12c:	f7f2 fcd6 	bl	8000adc <__aeabi_dcmplt>
 800e130:	2800      	cmp	r0, #0
 800e132:	d15c      	bne.n	800e1ee <_strtod_l+0xa4e>
 800e134:	4630      	mov	r0, r6
 800e136:	4639      	mov	r1, r7
 800e138:	4b8c      	ldr	r3, [pc, #560]	; (800e36c <_strtod_l+0xbcc>)
 800e13a:	2200      	movs	r2, #0
 800e13c:	f7f2 fa5c 	bl	80005f8 <__aeabi_dmul>
 800e140:	4606      	mov	r6, r0
 800e142:	460f      	mov	r7, r1
 800e144:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800e148:	9606      	str	r6, [sp, #24]
 800e14a:	9307      	str	r3, [sp, #28]
 800e14c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e150:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800e154:	4b86      	ldr	r3, [pc, #536]	; (800e370 <_strtod_l+0xbd0>)
 800e156:	ea0a 0303 	and.w	r3, sl, r3
 800e15a:	930d      	str	r3, [sp, #52]	; 0x34
 800e15c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e15e:	4b85      	ldr	r3, [pc, #532]	; (800e374 <_strtod_l+0xbd4>)
 800e160:	429a      	cmp	r2, r3
 800e162:	f040 8090 	bne.w	800e286 <_strtod_l+0xae6>
 800e166:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800e16a:	ec49 8b10 	vmov	d0, r8, r9
 800e16e:	f002 ff53 	bl	8011018 <__ulp>
 800e172:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e176:	ec51 0b10 	vmov	r0, r1, d0
 800e17a:	f7f2 fa3d 	bl	80005f8 <__aeabi_dmul>
 800e17e:	4642      	mov	r2, r8
 800e180:	464b      	mov	r3, r9
 800e182:	f7f2 f883 	bl	800028c <__adddf3>
 800e186:	460b      	mov	r3, r1
 800e188:	4979      	ldr	r1, [pc, #484]	; (800e370 <_strtod_l+0xbd0>)
 800e18a:	4a7b      	ldr	r2, [pc, #492]	; (800e378 <_strtod_l+0xbd8>)
 800e18c:	4019      	ands	r1, r3
 800e18e:	4291      	cmp	r1, r2
 800e190:	4680      	mov	r8, r0
 800e192:	d944      	bls.n	800e21e <_strtod_l+0xa7e>
 800e194:	ee18 2a90 	vmov	r2, s17
 800e198:	4b78      	ldr	r3, [pc, #480]	; (800e37c <_strtod_l+0xbdc>)
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d104      	bne.n	800e1a8 <_strtod_l+0xa08>
 800e19e:	ee18 3a10 	vmov	r3, s16
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	f43f ad40 	beq.w	800dc28 <_strtod_l+0x488>
 800e1a8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800e37c <_strtod_l+0xbdc>
 800e1ac:	f04f 38ff 	mov.w	r8, #4294967295
 800e1b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	f002 fc04 	bl	80109c0 <_Bfree>
 800e1b8:	9905      	ldr	r1, [sp, #20]
 800e1ba:	4620      	mov	r0, r4
 800e1bc:	f002 fc00 	bl	80109c0 <_Bfree>
 800e1c0:	4659      	mov	r1, fp
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	f002 fbfc 	bl	80109c0 <_Bfree>
 800e1c8:	4629      	mov	r1, r5
 800e1ca:	4620      	mov	r0, r4
 800e1cc:	f002 fbf8 	bl	80109c0 <_Bfree>
 800e1d0:	e609      	b.n	800dde6 <_strtod_l+0x646>
 800e1d2:	f1b8 0f01 	cmp.w	r8, #1
 800e1d6:	d103      	bne.n	800e1e0 <_strtod_l+0xa40>
 800e1d8:	f1b9 0f00 	cmp.w	r9, #0
 800e1dc:	f43f ad95 	beq.w	800dd0a <_strtod_l+0x56a>
 800e1e0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800e338 <_strtod_l+0xb98>
 800e1e4:	4f60      	ldr	r7, [pc, #384]	; (800e368 <_strtod_l+0xbc8>)
 800e1e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e1ea:	2600      	movs	r6, #0
 800e1ec:	e7ae      	b.n	800e14c <_strtod_l+0x9ac>
 800e1ee:	4f5f      	ldr	r7, [pc, #380]	; (800e36c <_strtod_l+0xbcc>)
 800e1f0:	2600      	movs	r6, #0
 800e1f2:	e7a7      	b.n	800e144 <_strtod_l+0x9a4>
 800e1f4:	4b5d      	ldr	r3, [pc, #372]	; (800e36c <_strtod_l+0xbcc>)
 800e1f6:	4630      	mov	r0, r6
 800e1f8:	4639      	mov	r1, r7
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	f7f2 f9fc 	bl	80005f8 <__aeabi_dmul>
 800e200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e202:	4606      	mov	r6, r0
 800e204:	460f      	mov	r7, r1
 800e206:	2b00      	cmp	r3, #0
 800e208:	d09c      	beq.n	800e144 <_strtod_l+0x9a4>
 800e20a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e20e:	e79d      	b.n	800e14c <_strtod_l+0x9ac>
 800e210:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800e340 <_strtod_l+0xba0>
 800e214:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e218:	ec57 6b17 	vmov	r6, r7, d7
 800e21c:	e796      	b.n	800e14c <_strtod_l+0x9ac>
 800e21e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e222:	9b04      	ldr	r3, [sp, #16]
 800e224:	46ca      	mov	sl, r9
 800e226:	2b00      	cmp	r3, #0
 800e228:	d1c2      	bne.n	800e1b0 <_strtod_l+0xa10>
 800e22a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e22e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e230:	0d1b      	lsrs	r3, r3, #20
 800e232:	051b      	lsls	r3, r3, #20
 800e234:	429a      	cmp	r2, r3
 800e236:	d1bb      	bne.n	800e1b0 <_strtod_l+0xa10>
 800e238:	4630      	mov	r0, r6
 800e23a:	4639      	mov	r1, r7
 800e23c:	f7f2 fd3c 	bl	8000cb8 <__aeabi_d2lz>
 800e240:	f7f2 f9ac 	bl	800059c <__aeabi_l2d>
 800e244:	4602      	mov	r2, r0
 800e246:	460b      	mov	r3, r1
 800e248:	4630      	mov	r0, r6
 800e24a:	4639      	mov	r1, r7
 800e24c:	f7f2 f81c 	bl	8000288 <__aeabi_dsub>
 800e250:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e252:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e256:	ea43 0308 	orr.w	r3, r3, r8
 800e25a:	4313      	orrs	r3, r2
 800e25c:	4606      	mov	r6, r0
 800e25e:	460f      	mov	r7, r1
 800e260:	d054      	beq.n	800e30c <_strtod_l+0xb6c>
 800e262:	a339      	add	r3, pc, #228	; (adr r3, 800e348 <_strtod_l+0xba8>)
 800e264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e268:	f7f2 fc38 	bl	8000adc <__aeabi_dcmplt>
 800e26c:	2800      	cmp	r0, #0
 800e26e:	f47f ace5 	bne.w	800dc3c <_strtod_l+0x49c>
 800e272:	a337      	add	r3, pc, #220	; (adr r3, 800e350 <_strtod_l+0xbb0>)
 800e274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e278:	4630      	mov	r0, r6
 800e27a:	4639      	mov	r1, r7
 800e27c:	f7f2 fc4c 	bl	8000b18 <__aeabi_dcmpgt>
 800e280:	2800      	cmp	r0, #0
 800e282:	d095      	beq.n	800e1b0 <_strtod_l+0xa10>
 800e284:	e4da      	b.n	800dc3c <_strtod_l+0x49c>
 800e286:	9b04      	ldr	r3, [sp, #16]
 800e288:	b333      	cbz	r3, 800e2d8 <_strtod_l+0xb38>
 800e28a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e28c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e290:	d822      	bhi.n	800e2d8 <_strtod_l+0xb38>
 800e292:	a331      	add	r3, pc, #196	; (adr r3, 800e358 <_strtod_l+0xbb8>)
 800e294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e298:	4630      	mov	r0, r6
 800e29a:	4639      	mov	r1, r7
 800e29c:	f7f2 fc28 	bl	8000af0 <__aeabi_dcmple>
 800e2a0:	b1a0      	cbz	r0, 800e2cc <_strtod_l+0xb2c>
 800e2a2:	4639      	mov	r1, r7
 800e2a4:	4630      	mov	r0, r6
 800e2a6:	f7f2 fc7f 	bl	8000ba8 <__aeabi_d2uiz>
 800e2aa:	2801      	cmp	r0, #1
 800e2ac:	bf38      	it	cc
 800e2ae:	2001      	movcc	r0, #1
 800e2b0:	f7f2 f928 	bl	8000504 <__aeabi_ui2d>
 800e2b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2b6:	4606      	mov	r6, r0
 800e2b8:	460f      	mov	r7, r1
 800e2ba:	bb23      	cbnz	r3, 800e306 <_strtod_l+0xb66>
 800e2bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2c0:	9010      	str	r0, [sp, #64]	; 0x40
 800e2c2:	9311      	str	r3, [sp, #68]	; 0x44
 800e2c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e2c8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800e2cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e2ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e2d0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e2d4:	1a9b      	subs	r3, r3, r2
 800e2d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e2d8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e2dc:	eeb0 0a48 	vmov.f32	s0, s16
 800e2e0:	eef0 0a68 	vmov.f32	s1, s17
 800e2e4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e2e8:	f002 fe96 	bl	8011018 <__ulp>
 800e2ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e2f0:	ec53 2b10 	vmov	r2, r3, d0
 800e2f4:	f7f2 f980 	bl	80005f8 <__aeabi_dmul>
 800e2f8:	ec53 2b18 	vmov	r2, r3, d8
 800e2fc:	f7f1 ffc6 	bl	800028c <__adddf3>
 800e300:	4680      	mov	r8, r0
 800e302:	4689      	mov	r9, r1
 800e304:	e78d      	b.n	800e222 <_strtod_l+0xa82>
 800e306:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800e30a:	e7db      	b.n	800e2c4 <_strtod_l+0xb24>
 800e30c:	a314      	add	r3, pc, #80	; (adr r3, 800e360 <_strtod_l+0xbc0>)
 800e30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e312:	f7f2 fbe3 	bl	8000adc <__aeabi_dcmplt>
 800e316:	e7b3      	b.n	800e280 <_strtod_l+0xae0>
 800e318:	2300      	movs	r3, #0
 800e31a:	930a      	str	r3, [sp, #40]	; 0x28
 800e31c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e31e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e320:	6013      	str	r3, [r2, #0]
 800e322:	f7ff ba7c 	b.w	800d81e <_strtod_l+0x7e>
 800e326:	2a65      	cmp	r2, #101	; 0x65
 800e328:	f43f ab75 	beq.w	800da16 <_strtod_l+0x276>
 800e32c:	2a45      	cmp	r2, #69	; 0x45
 800e32e:	f43f ab72 	beq.w	800da16 <_strtod_l+0x276>
 800e332:	2301      	movs	r3, #1
 800e334:	f7ff bbaa 	b.w	800da8c <_strtod_l+0x2ec>
 800e338:	00000000 	.word	0x00000000
 800e33c:	bff00000 	.word	0xbff00000
 800e340:	00000000 	.word	0x00000000
 800e344:	3ff00000 	.word	0x3ff00000
 800e348:	94a03595 	.word	0x94a03595
 800e34c:	3fdfffff 	.word	0x3fdfffff
 800e350:	35afe535 	.word	0x35afe535
 800e354:	3fe00000 	.word	0x3fe00000
 800e358:	ffc00000 	.word	0xffc00000
 800e35c:	41dfffff 	.word	0x41dfffff
 800e360:	94a03595 	.word	0x94a03595
 800e364:	3fcfffff 	.word	0x3fcfffff
 800e368:	3ff00000 	.word	0x3ff00000
 800e36c:	3fe00000 	.word	0x3fe00000
 800e370:	7ff00000 	.word	0x7ff00000
 800e374:	7fe00000 	.word	0x7fe00000
 800e378:	7c9fffff 	.word	0x7c9fffff
 800e37c:	7fefffff 	.word	0x7fefffff

0800e380 <_strtod_r>:
 800e380:	4b01      	ldr	r3, [pc, #4]	; (800e388 <_strtod_r+0x8>)
 800e382:	f7ff ba0d 	b.w	800d7a0 <_strtod_l>
 800e386:	bf00      	nop
 800e388:	2000003c 	.word	0x2000003c

0800e38c <strtod>:
 800e38c:	460a      	mov	r2, r1
 800e38e:	4601      	mov	r1, r0
 800e390:	4802      	ldr	r0, [pc, #8]	; (800e39c <strtod+0x10>)
 800e392:	4b03      	ldr	r3, [pc, #12]	; (800e3a0 <strtod+0x14>)
 800e394:	6800      	ldr	r0, [r0, #0]
 800e396:	f7ff ba03 	b.w	800d7a0 <_strtod_l>
 800e39a:	bf00      	nop
 800e39c:	200001f4 	.word	0x200001f4
 800e3a0:	2000003c 	.word	0x2000003c

0800e3a4 <__cvt>:
 800e3a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e3a8:	ec55 4b10 	vmov	r4, r5, d0
 800e3ac:	2d00      	cmp	r5, #0
 800e3ae:	460e      	mov	r6, r1
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	462b      	mov	r3, r5
 800e3b4:	bfbb      	ittet	lt
 800e3b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e3ba:	461d      	movlt	r5, r3
 800e3bc:	2300      	movge	r3, #0
 800e3be:	232d      	movlt	r3, #45	; 0x2d
 800e3c0:	700b      	strb	r3, [r1, #0]
 800e3c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e3c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e3c8:	4691      	mov	r9, r2
 800e3ca:	f023 0820 	bic.w	r8, r3, #32
 800e3ce:	bfbc      	itt	lt
 800e3d0:	4622      	movlt	r2, r4
 800e3d2:	4614      	movlt	r4, r2
 800e3d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e3d8:	d005      	beq.n	800e3e6 <__cvt+0x42>
 800e3da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e3de:	d100      	bne.n	800e3e2 <__cvt+0x3e>
 800e3e0:	3601      	adds	r6, #1
 800e3e2:	2102      	movs	r1, #2
 800e3e4:	e000      	b.n	800e3e8 <__cvt+0x44>
 800e3e6:	2103      	movs	r1, #3
 800e3e8:	ab03      	add	r3, sp, #12
 800e3ea:	9301      	str	r3, [sp, #4]
 800e3ec:	ab02      	add	r3, sp, #8
 800e3ee:	9300      	str	r3, [sp, #0]
 800e3f0:	ec45 4b10 	vmov	d0, r4, r5
 800e3f4:	4653      	mov	r3, sl
 800e3f6:	4632      	mov	r2, r6
 800e3f8:	f001 f8fa 	bl	800f5f0 <_dtoa_r>
 800e3fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e400:	4607      	mov	r7, r0
 800e402:	d102      	bne.n	800e40a <__cvt+0x66>
 800e404:	f019 0f01 	tst.w	r9, #1
 800e408:	d022      	beq.n	800e450 <__cvt+0xac>
 800e40a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e40e:	eb07 0906 	add.w	r9, r7, r6
 800e412:	d110      	bne.n	800e436 <__cvt+0x92>
 800e414:	783b      	ldrb	r3, [r7, #0]
 800e416:	2b30      	cmp	r3, #48	; 0x30
 800e418:	d10a      	bne.n	800e430 <__cvt+0x8c>
 800e41a:	2200      	movs	r2, #0
 800e41c:	2300      	movs	r3, #0
 800e41e:	4620      	mov	r0, r4
 800e420:	4629      	mov	r1, r5
 800e422:	f7f2 fb51 	bl	8000ac8 <__aeabi_dcmpeq>
 800e426:	b918      	cbnz	r0, 800e430 <__cvt+0x8c>
 800e428:	f1c6 0601 	rsb	r6, r6, #1
 800e42c:	f8ca 6000 	str.w	r6, [sl]
 800e430:	f8da 3000 	ldr.w	r3, [sl]
 800e434:	4499      	add	r9, r3
 800e436:	2200      	movs	r2, #0
 800e438:	2300      	movs	r3, #0
 800e43a:	4620      	mov	r0, r4
 800e43c:	4629      	mov	r1, r5
 800e43e:	f7f2 fb43 	bl	8000ac8 <__aeabi_dcmpeq>
 800e442:	b108      	cbz	r0, 800e448 <__cvt+0xa4>
 800e444:	f8cd 900c 	str.w	r9, [sp, #12]
 800e448:	2230      	movs	r2, #48	; 0x30
 800e44a:	9b03      	ldr	r3, [sp, #12]
 800e44c:	454b      	cmp	r3, r9
 800e44e:	d307      	bcc.n	800e460 <__cvt+0xbc>
 800e450:	9b03      	ldr	r3, [sp, #12]
 800e452:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e454:	1bdb      	subs	r3, r3, r7
 800e456:	4638      	mov	r0, r7
 800e458:	6013      	str	r3, [r2, #0]
 800e45a:	b004      	add	sp, #16
 800e45c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e460:	1c59      	adds	r1, r3, #1
 800e462:	9103      	str	r1, [sp, #12]
 800e464:	701a      	strb	r2, [r3, #0]
 800e466:	e7f0      	b.n	800e44a <__cvt+0xa6>

0800e468 <__exponent>:
 800e468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e46a:	4603      	mov	r3, r0
 800e46c:	2900      	cmp	r1, #0
 800e46e:	bfb8      	it	lt
 800e470:	4249      	neglt	r1, r1
 800e472:	f803 2b02 	strb.w	r2, [r3], #2
 800e476:	bfb4      	ite	lt
 800e478:	222d      	movlt	r2, #45	; 0x2d
 800e47a:	222b      	movge	r2, #43	; 0x2b
 800e47c:	2909      	cmp	r1, #9
 800e47e:	7042      	strb	r2, [r0, #1]
 800e480:	dd2a      	ble.n	800e4d8 <__exponent+0x70>
 800e482:	f10d 0207 	add.w	r2, sp, #7
 800e486:	4617      	mov	r7, r2
 800e488:	260a      	movs	r6, #10
 800e48a:	4694      	mov	ip, r2
 800e48c:	fb91 f5f6 	sdiv	r5, r1, r6
 800e490:	fb06 1415 	mls	r4, r6, r5, r1
 800e494:	3430      	adds	r4, #48	; 0x30
 800e496:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800e49a:	460c      	mov	r4, r1
 800e49c:	2c63      	cmp	r4, #99	; 0x63
 800e49e:	f102 32ff 	add.w	r2, r2, #4294967295
 800e4a2:	4629      	mov	r1, r5
 800e4a4:	dcf1      	bgt.n	800e48a <__exponent+0x22>
 800e4a6:	3130      	adds	r1, #48	; 0x30
 800e4a8:	f1ac 0402 	sub.w	r4, ip, #2
 800e4ac:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e4b0:	1c41      	adds	r1, r0, #1
 800e4b2:	4622      	mov	r2, r4
 800e4b4:	42ba      	cmp	r2, r7
 800e4b6:	d30a      	bcc.n	800e4ce <__exponent+0x66>
 800e4b8:	f10d 0209 	add.w	r2, sp, #9
 800e4bc:	eba2 020c 	sub.w	r2, r2, ip
 800e4c0:	42bc      	cmp	r4, r7
 800e4c2:	bf88      	it	hi
 800e4c4:	2200      	movhi	r2, #0
 800e4c6:	4413      	add	r3, r2
 800e4c8:	1a18      	subs	r0, r3, r0
 800e4ca:	b003      	add	sp, #12
 800e4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4ce:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e4d2:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e4d6:	e7ed      	b.n	800e4b4 <__exponent+0x4c>
 800e4d8:	2330      	movs	r3, #48	; 0x30
 800e4da:	3130      	adds	r1, #48	; 0x30
 800e4dc:	7083      	strb	r3, [r0, #2]
 800e4de:	70c1      	strb	r1, [r0, #3]
 800e4e0:	1d03      	adds	r3, r0, #4
 800e4e2:	e7f1      	b.n	800e4c8 <__exponent+0x60>

0800e4e4 <_printf_float>:
 800e4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4e8:	ed2d 8b02 	vpush	{d8}
 800e4ec:	b08d      	sub	sp, #52	; 0x34
 800e4ee:	460c      	mov	r4, r1
 800e4f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e4f4:	4616      	mov	r6, r2
 800e4f6:	461f      	mov	r7, r3
 800e4f8:	4605      	mov	r5, r0
 800e4fa:	f000 ff4b 	bl	800f394 <_localeconv_r>
 800e4fe:	f8d0 a000 	ldr.w	sl, [r0]
 800e502:	4650      	mov	r0, sl
 800e504:	f7f1 feb4 	bl	8000270 <strlen>
 800e508:	2300      	movs	r3, #0
 800e50a:	930a      	str	r3, [sp, #40]	; 0x28
 800e50c:	6823      	ldr	r3, [r4, #0]
 800e50e:	9305      	str	r3, [sp, #20]
 800e510:	f8d8 3000 	ldr.w	r3, [r8]
 800e514:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e518:	3307      	adds	r3, #7
 800e51a:	f023 0307 	bic.w	r3, r3, #7
 800e51e:	f103 0208 	add.w	r2, r3, #8
 800e522:	f8c8 2000 	str.w	r2, [r8]
 800e526:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e52a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e52e:	9307      	str	r3, [sp, #28]
 800e530:	f8cd 8018 	str.w	r8, [sp, #24]
 800e534:	ee08 0a10 	vmov	s16, r0
 800e538:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800e53c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e540:	4b9e      	ldr	r3, [pc, #632]	; (800e7bc <_printf_float+0x2d8>)
 800e542:	f04f 32ff 	mov.w	r2, #4294967295
 800e546:	f7f2 faf1 	bl	8000b2c <__aeabi_dcmpun>
 800e54a:	bb88      	cbnz	r0, 800e5b0 <_printf_float+0xcc>
 800e54c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e550:	4b9a      	ldr	r3, [pc, #616]	; (800e7bc <_printf_float+0x2d8>)
 800e552:	f04f 32ff 	mov.w	r2, #4294967295
 800e556:	f7f2 facb 	bl	8000af0 <__aeabi_dcmple>
 800e55a:	bb48      	cbnz	r0, 800e5b0 <_printf_float+0xcc>
 800e55c:	2200      	movs	r2, #0
 800e55e:	2300      	movs	r3, #0
 800e560:	4640      	mov	r0, r8
 800e562:	4649      	mov	r1, r9
 800e564:	f7f2 faba 	bl	8000adc <__aeabi_dcmplt>
 800e568:	b110      	cbz	r0, 800e570 <_printf_float+0x8c>
 800e56a:	232d      	movs	r3, #45	; 0x2d
 800e56c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e570:	4a93      	ldr	r2, [pc, #588]	; (800e7c0 <_printf_float+0x2dc>)
 800e572:	4b94      	ldr	r3, [pc, #592]	; (800e7c4 <_printf_float+0x2e0>)
 800e574:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e578:	bf94      	ite	ls
 800e57a:	4690      	movls	r8, r2
 800e57c:	4698      	movhi	r8, r3
 800e57e:	2303      	movs	r3, #3
 800e580:	6123      	str	r3, [r4, #16]
 800e582:	9b05      	ldr	r3, [sp, #20]
 800e584:	f023 0304 	bic.w	r3, r3, #4
 800e588:	6023      	str	r3, [r4, #0]
 800e58a:	f04f 0900 	mov.w	r9, #0
 800e58e:	9700      	str	r7, [sp, #0]
 800e590:	4633      	mov	r3, r6
 800e592:	aa0b      	add	r2, sp, #44	; 0x2c
 800e594:	4621      	mov	r1, r4
 800e596:	4628      	mov	r0, r5
 800e598:	f000 f9da 	bl	800e950 <_printf_common>
 800e59c:	3001      	adds	r0, #1
 800e59e:	f040 8090 	bne.w	800e6c2 <_printf_float+0x1de>
 800e5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800e5a6:	b00d      	add	sp, #52	; 0x34
 800e5a8:	ecbd 8b02 	vpop	{d8}
 800e5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5b0:	4642      	mov	r2, r8
 800e5b2:	464b      	mov	r3, r9
 800e5b4:	4640      	mov	r0, r8
 800e5b6:	4649      	mov	r1, r9
 800e5b8:	f7f2 fab8 	bl	8000b2c <__aeabi_dcmpun>
 800e5bc:	b140      	cbz	r0, 800e5d0 <_printf_float+0xec>
 800e5be:	464b      	mov	r3, r9
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	bfbc      	itt	lt
 800e5c4:	232d      	movlt	r3, #45	; 0x2d
 800e5c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e5ca:	4a7f      	ldr	r2, [pc, #508]	; (800e7c8 <_printf_float+0x2e4>)
 800e5cc:	4b7f      	ldr	r3, [pc, #508]	; (800e7cc <_printf_float+0x2e8>)
 800e5ce:	e7d1      	b.n	800e574 <_printf_float+0x90>
 800e5d0:	6863      	ldr	r3, [r4, #4]
 800e5d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e5d6:	9206      	str	r2, [sp, #24]
 800e5d8:	1c5a      	adds	r2, r3, #1
 800e5da:	d13f      	bne.n	800e65c <_printf_float+0x178>
 800e5dc:	2306      	movs	r3, #6
 800e5de:	6063      	str	r3, [r4, #4]
 800e5e0:	9b05      	ldr	r3, [sp, #20]
 800e5e2:	6861      	ldr	r1, [r4, #4]
 800e5e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	9303      	str	r3, [sp, #12]
 800e5ec:	ab0a      	add	r3, sp, #40	; 0x28
 800e5ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e5f2:	ab09      	add	r3, sp, #36	; 0x24
 800e5f4:	ec49 8b10 	vmov	d0, r8, r9
 800e5f8:	9300      	str	r3, [sp, #0]
 800e5fa:	6022      	str	r2, [r4, #0]
 800e5fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e600:	4628      	mov	r0, r5
 800e602:	f7ff fecf 	bl	800e3a4 <__cvt>
 800e606:	9b06      	ldr	r3, [sp, #24]
 800e608:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e60a:	2b47      	cmp	r3, #71	; 0x47
 800e60c:	4680      	mov	r8, r0
 800e60e:	d108      	bne.n	800e622 <_printf_float+0x13e>
 800e610:	1cc8      	adds	r0, r1, #3
 800e612:	db02      	blt.n	800e61a <_printf_float+0x136>
 800e614:	6863      	ldr	r3, [r4, #4]
 800e616:	4299      	cmp	r1, r3
 800e618:	dd41      	ble.n	800e69e <_printf_float+0x1ba>
 800e61a:	f1ab 0302 	sub.w	r3, fp, #2
 800e61e:	fa5f fb83 	uxtb.w	fp, r3
 800e622:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e626:	d820      	bhi.n	800e66a <_printf_float+0x186>
 800e628:	3901      	subs	r1, #1
 800e62a:	465a      	mov	r2, fp
 800e62c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e630:	9109      	str	r1, [sp, #36]	; 0x24
 800e632:	f7ff ff19 	bl	800e468 <__exponent>
 800e636:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e638:	1813      	adds	r3, r2, r0
 800e63a:	2a01      	cmp	r2, #1
 800e63c:	4681      	mov	r9, r0
 800e63e:	6123      	str	r3, [r4, #16]
 800e640:	dc02      	bgt.n	800e648 <_printf_float+0x164>
 800e642:	6822      	ldr	r2, [r4, #0]
 800e644:	07d2      	lsls	r2, r2, #31
 800e646:	d501      	bpl.n	800e64c <_printf_float+0x168>
 800e648:	3301      	adds	r3, #1
 800e64a:	6123      	str	r3, [r4, #16]
 800e64c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e650:	2b00      	cmp	r3, #0
 800e652:	d09c      	beq.n	800e58e <_printf_float+0xaa>
 800e654:	232d      	movs	r3, #45	; 0x2d
 800e656:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e65a:	e798      	b.n	800e58e <_printf_float+0xaa>
 800e65c:	9a06      	ldr	r2, [sp, #24]
 800e65e:	2a47      	cmp	r2, #71	; 0x47
 800e660:	d1be      	bne.n	800e5e0 <_printf_float+0xfc>
 800e662:	2b00      	cmp	r3, #0
 800e664:	d1bc      	bne.n	800e5e0 <_printf_float+0xfc>
 800e666:	2301      	movs	r3, #1
 800e668:	e7b9      	b.n	800e5de <_printf_float+0xfa>
 800e66a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e66e:	d118      	bne.n	800e6a2 <_printf_float+0x1be>
 800e670:	2900      	cmp	r1, #0
 800e672:	6863      	ldr	r3, [r4, #4]
 800e674:	dd0b      	ble.n	800e68e <_printf_float+0x1aa>
 800e676:	6121      	str	r1, [r4, #16]
 800e678:	b913      	cbnz	r3, 800e680 <_printf_float+0x19c>
 800e67a:	6822      	ldr	r2, [r4, #0]
 800e67c:	07d0      	lsls	r0, r2, #31
 800e67e:	d502      	bpl.n	800e686 <_printf_float+0x1a2>
 800e680:	3301      	adds	r3, #1
 800e682:	440b      	add	r3, r1
 800e684:	6123      	str	r3, [r4, #16]
 800e686:	65a1      	str	r1, [r4, #88]	; 0x58
 800e688:	f04f 0900 	mov.w	r9, #0
 800e68c:	e7de      	b.n	800e64c <_printf_float+0x168>
 800e68e:	b913      	cbnz	r3, 800e696 <_printf_float+0x1b2>
 800e690:	6822      	ldr	r2, [r4, #0]
 800e692:	07d2      	lsls	r2, r2, #31
 800e694:	d501      	bpl.n	800e69a <_printf_float+0x1b6>
 800e696:	3302      	adds	r3, #2
 800e698:	e7f4      	b.n	800e684 <_printf_float+0x1a0>
 800e69a:	2301      	movs	r3, #1
 800e69c:	e7f2      	b.n	800e684 <_printf_float+0x1a0>
 800e69e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e6a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6a4:	4299      	cmp	r1, r3
 800e6a6:	db05      	blt.n	800e6b4 <_printf_float+0x1d0>
 800e6a8:	6823      	ldr	r3, [r4, #0]
 800e6aa:	6121      	str	r1, [r4, #16]
 800e6ac:	07d8      	lsls	r0, r3, #31
 800e6ae:	d5ea      	bpl.n	800e686 <_printf_float+0x1a2>
 800e6b0:	1c4b      	adds	r3, r1, #1
 800e6b2:	e7e7      	b.n	800e684 <_printf_float+0x1a0>
 800e6b4:	2900      	cmp	r1, #0
 800e6b6:	bfd4      	ite	le
 800e6b8:	f1c1 0202 	rsble	r2, r1, #2
 800e6bc:	2201      	movgt	r2, #1
 800e6be:	4413      	add	r3, r2
 800e6c0:	e7e0      	b.n	800e684 <_printf_float+0x1a0>
 800e6c2:	6823      	ldr	r3, [r4, #0]
 800e6c4:	055a      	lsls	r2, r3, #21
 800e6c6:	d407      	bmi.n	800e6d8 <_printf_float+0x1f4>
 800e6c8:	6923      	ldr	r3, [r4, #16]
 800e6ca:	4642      	mov	r2, r8
 800e6cc:	4631      	mov	r1, r6
 800e6ce:	4628      	mov	r0, r5
 800e6d0:	47b8      	blx	r7
 800e6d2:	3001      	adds	r0, #1
 800e6d4:	d12c      	bne.n	800e730 <_printf_float+0x24c>
 800e6d6:	e764      	b.n	800e5a2 <_printf_float+0xbe>
 800e6d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e6dc:	f240 80e0 	bls.w	800e8a0 <_printf_float+0x3bc>
 800e6e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	f7f2 f9ee 	bl	8000ac8 <__aeabi_dcmpeq>
 800e6ec:	2800      	cmp	r0, #0
 800e6ee:	d034      	beq.n	800e75a <_printf_float+0x276>
 800e6f0:	4a37      	ldr	r2, [pc, #220]	; (800e7d0 <_printf_float+0x2ec>)
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	4631      	mov	r1, r6
 800e6f6:	4628      	mov	r0, r5
 800e6f8:	47b8      	blx	r7
 800e6fa:	3001      	adds	r0, #1
 800e6fc:	f43f af51 	beq.w	800e5a2 <_printf_float+0xbe>
 800e700:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e704:	429a      	cmp	r2, r3
 800e706:	db02      	blt.n	800e70e <_printf_float+0x22a>
 800e708:	6823      	ldr	r3, [r4, #0]
 800e70a:	07d8      	lsls	r0, r3, #31
 800e70c:	d510      	bpl.n	800e730 <_printf_float+0x24c>
 800e70e:	ee18 3a10 	vmov	r3, s16
 800e712:	4652      	mov	r2, sl
 800e714:	4631      	mov	r1, r6
 800e716:	4628      	mov	r0, r5
 800e718:	47b8      	blx	r7
 800e71a:	3001      	adds	r0, #1
 800e71c:	f43f af41 	beq.w	800e5a2 <_printf_float+0xbe>
 800e720:	f04f 0800 	mov.w	r8, #0
 800e724:	f104 091a 	add.w	r9, r4, #26
 800e728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e72a:	3b01      	subs	r3, #1
 800e72c:	4543      	cmp	r3, r8
 800e72e:	dc09      	bgt.n	800e744 <_printf_float+0x260>
 800e730:	6823      	ldr	r3, [r4, #0]
 800e732:	079b      	lsls	r3, r3, #30
 800e734:	f100 8107 	bmi.w	800e946 <_printf_float+0x462>
 800e738:	68e0      	ldr	r0, [r4, #12]
 800e73a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e73c:	4298      	cmp	r0, r3
 800e73e:	bfb8      	it	lt
 800e740:	4618      	movlt	r0, r3
 800e742:	e730      	b.n	800e5a6 <_printf_float+0xc2>
 800e744:	2301      	movs	r3, #1
 800e746:	464a      	mov	r2, r9
 800e748:	4631      	mov	r1, r6
 800e74a:	4628      	mov	r0, r5
 800e74c:	47b8      	blx	r7
 800e74e:	3001      	adds	r0, #1
 800e750:	f43f af27 	beq.w	800e5a2 <_printf_float+0xbe>
 800e754:	f108 0801 	add.w	r8, r8, #1
 800e758:	e7e6      	b.n	800e728 <_printf_float+0x244>
 800e75a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	dc39      	bgt.n	800e7d4 <_printf_float+0x2f0>
 800e760:	4a1b      	ldr	r2, [pc, #108]	; (800e7d0 <_printf_float+0x2ec>)
 800e762:	2301      	movs	r3, #1
 800e764:	4631      	mov	r1, r6
 800e766:	4628      	mov	r0, r5
 800e768:	47b8      	blx	r7
 800e76a:	3001      	adds	r0, #1
 800e76c:	f43f af19 	beq.w	800e5a2 <_printf_float+0xbe>
 800e770:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e774:	4313      	orrs	r3, r2
 800e776:	d102      	bne.n	800e77e <_printf_float+0x29a>
 800e778:	6823      	ldr	r3, [r4, #0]
 800e77a:	07d9      	lsls	r1, r3, #31
 800e77c:	d5d8      	bpl.n	800e730 <_printf_float+0x24c>
 800e77e:	ee18 3a10 	vmov	r3, s16
 800e782:	4652      	mov	r2, sl
 800e784:	4631      	mov	r1, r6
 800e786:	4628      	mov	r0, r5
 800e788:	47b8      	blx	r7
 800e78a:	3001      	adds	r0, #1
 800e78c:	f43f af09 	beq.w	800e5a2 <_printf_float+0xbe>
 800e790:	f04f 0900 	mov.w	r9, #0
 800e794:	f104 0a1a 	add.w	sl, r4, #26
 800e798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e79a:	425b      	negs	r3, r3
 800e79c:	454b      	cmp	r3, r9
 800e79e:	dc01      	bgt.n	800e7a4 <_printf_float+0x2c0>
 800e7a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7a2:	e792      	b.n	800e6ca <_printf_float+0x1e6>
 800e7a4:	2301      	movs	r3, #1
 800e7a6:	4652      	mov	r2, sl
 800e7a8:	4631      	mov	r1, r6
 800e7aa:	4628      	mov	r0, r5
 800e7ac:	47b8      	blx	r7
 800e7ae:	3001      	adds	r0, #1
 800e7b0:	f43f aef7 	beq.w	800e5a2 <_printf_float+0xbe>
 800e7b4:	f109 0901 	add.w	r9, r9, #1
 800e7b8:	e7ee      	b.n	800e798 <_printf_float+0x2b4>
 800e7ba:	bf00      	nop
 800e7bc:	7fefffff 	.word	0x7fefffff
 800e7c0:	08011f48 	.word	0x08011f48
 800e7c4:	08011f4c 	.word	0x08011f4c
 800e7c8:	08011f50 	.word	0x08011f50
 800e7cc:	08011f54 	.word	0x08011f54
 800e7d0:	08011f58 	.word	0x08011f58
 800e7d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e7d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	bfa8      	it	ge
 800e7dc:	461a      	movge	r2, r3
 800e7de:	2a00      	cmp	r2, #0
 800e7e0:	4691      	mov	r9, r2
 800e7e2:	dc37      	bgt.n	800e854 <_printf_float+0x370>
 800e7e4:	f04f 0b00 	mov.w	fp, #0
 800e7e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e7ec:	f104 021a 	add.w	r2, r4, #26
 800e7f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e7f2:	9305      	str	r3, [sp, #20]
 800e7f4:	eba3 0309 	sub.w	r3, r3, r9
 800e7f8:	455b      	cmp	r3, fp
 800e7fa:	dc33      	bgt.n	800e864 <_printf_float+0x380>
 800e7fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e800:	429a      	cmp	r2, r3
 800e802:	db3b      	blt.n	800e87c <_printf_float+0x398>
 800e804:	6823      	ldr	r3, [r4, #0]
 800e806:	07da      	lsls	r2, r3, #31
 800e808:	d438      	bmi.n	800e87c <_printf_float+0x398>
 800e80a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e80e:	eba2 0903 	sub.w	r9, r2, r3
 800e812:	9b05      	ldr	r3, [sp, #20]
 800e814:	1ad2      	subs	r2, r2, r3
 800e816:	4591      	cmp	r9, r2
 800e818:	bfa8      	it	ge
 800e81a:	4691      	movge	r9, r2
 800e81c:	f1b9 0f00 	cmp.w	r9, #0
 800e820:	dc35      	bgt.n	800e88e <_printf_float+0x3aa>
 800e822:	f04f 0800 	mov.w	r8, #0
 800e826:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e82a:	f104 0a1a 	add.w	sl, r4, #26
 800e82e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e832:	1a9b      	subs	r3, r3, r2
 800e834:	eba3 0309 	sub.w	r3, r3, r9
 800e838:	4543      	cmp	r3, r8
 800e83a:	f77f af79 	ble.w	800e730 <_printf_float+0x24c>
 800e83e:	2301      	movs	r3, #1
 800e840:	4652      	mov	r2, sl
 800e842:	4631      	mov	r1, r6
 800e844:	4628      	mov	r0, r5
 800e846:	47b8      	blx	r7
 800e848:	3001      	adds	r0, #1
 800e84a:	f43f aeaa 	beq.w	800e5a2 <_printf_float+0xbe>
 800e84e:	f108 0801 	add.w	r8, r8, #1
 800e852:	e7ec      	b.n	800e82e <_printf_float+0x34a>
 800e854:	4613      	mov	r3, r2
 800e856:	4631      	mov	r1, r6
 800e858:	4642      	mov	r2, r8
 800e85a:	4628      	mov	r0, r5
 800e85c:	47b8      	blx	r7
 800e85e:	3001      	adds	r0, #1
 800e860:	d1c0      	bne.n	800e7e4 <_printf_float+0x300>
 800e862:	e69e      	b.n	800e5a2 <_printf_float+0xbe>
 800e864:	2301      	movs	r3, #1
 800e866:	4631      	mov	r1, r6
 800e868:	4628      	mov	r0, r5
 800e86a:	9205      	str	r2, [sp, #20]
 800e86c:	47b8      	blx	r7
 800e86e:	3001      	adds	r0, #1
 800e870:	f43f ae97 	beq.w	800e5a2 <_printf_float+0xbe>
 800e874:	9a05      	ldr	r2, [sp, #20]
 800e876:	f10b 0b01 	add.w	fp, fp, #1
 800e87a:	e7b9      	b.n	800e7f0 <_printf_float+0x30c>
 800e87c:	ee18 3a10 	vmov	r3, s16
 800e880:	4652      	mov	r2, sl
 800e882:	4631      	mov	r1, r6
 800e884:	4628      	mov	r0, r5
 800e886:	47b8      	blx	r7
 800e888:	3001      	adds	r0, #1
 800e88a:	d1be      	bne.n	800e80a <_printf_float+0x326>
 800e88c:	e689      	b.n	800e5a2 <_printf_float+0xbe>
 800e88e:	9a05      	ldr	r2, [sp, #20]
 800e890:	464b      	mov	r3, r9
 800e892:	4442      	add	r2, r8
 800e894:	4631      	mov	r1, r6
 800e896:	4628      	mov	r0, r5
 800e898:	47b8      	blx	r7
 800e89a:	3001      	adds	r0, #1
 800e89c:	d1c1      	bne.n	800e822 <_printf_float+0x33e>
 800e89e:	e680      	b.n	800e5a2 <_printf_float+0xbe>
 800e8a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e8a2:	2a01      	cmp	r2, #1
 800e8a4:	dc01      	bgt.n	800e8aa <_printf_float+0x3c6>
 800e8a6:	07db      	lsls	r3, r3, #31
 800e8a8:	d53a      	bpl.n	800e920 <_printf_float+0x43c>
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	4642      	mov	r2, r8
 800e8ae:	4631      	mov	r1, r6
 800e8b0:	4628      	mov	r0, r5
 800e8b2:	47b8      	blx	r7
 800e8b4:	3001      	adds	r0, #1
 800e8b6:	f43f ae74 	beq.w	800e5a2 <_printf_float+0xbe>
 800e8ba:	ee18 3a10 	vmov	r3, s16
 800e8be:	4652      	mov	r2, sl
 800e8c0:	4631      	mov	r1, r6
 800e8c2:	4628      	mov	r0, r5
 800e8c4:	47b8      	blx	r7
 800e8c6:	3001      	adds	r0, #1
 800e8c8:	f43f ae6b 	beq.w	800e5a2 <_printf_float+0xbe>
 800e8cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800e8d8:	f7f2 f8f6 	bl	8000ac8 <__aeabi_dcmpeq>
 800e8dc:	b9d8      	cbnz	r0, 800e916 <_printf_float+0x432>
 800e8de:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e8e2:	f108 0201 	add.w	r2, r8, #1
 800e8e6:	4631      	mov	r1, r6
 800e8e8:	4628      	mov	r0, r5
 800e8ea:	47b8      	blx	r7
 800e8ec:	3001      	adds	r0, #1
 800e8ee:	d10e      	bne.n	800e90e <_printf_float+0x42a>
 800e8f0:	e657      	b.n	800e5a2 <_printf_float+0xbe>
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	4652      	mov	r2, sl
 800e8f6:	4631      	mov	r1, r6
 800e8f8:	4628      	mov	r0, r5
 800e8fa:	47b8      	blx	r7
 800e8fc:	3001      	adds	r0, #1
 800e8fe:	f43f ae50 	beq.w	800e5a2 <_printf_float+0xbe>
 800e902:	f108 0801 	add.w	r8, r8, #1
 800e906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e908:	3b01      	subs	r3, #1
 800e90a:	4543      	cmp	r3, r8
 800e90c:	dcf1      	bgt.n	800e8f2 <_printf_float+0x40e>
 800e90e:	464b      	mov	r3, r9
 800e910:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e914:	e6da      	b.n	800e6cc <_printf_float+0x1e8>
 800e916:	f04f 0800 	mov.w	r8, #0
 800e91a:	f104 0a1a 	add.w	sl, r4, #26
 800e91e:	e7f2      	b.n	800e906 <_printf_float+0x422>
 800e920:	2301      	movs	r3, #1
 800e922:	4642      	mov	r2, r8
 800e924:	e7df      	b.n	800e8e6 <_printf_float+0x402>
 800e926:	2301      	movs	r3, #1
 800e928:	464a      	mov	r2, r9
 800e92a:	4631      	mov	r1, r6
 800e92c:	4628      	mov	r0, r5
 800e92e:	47b8      	blx	r7
 800e930:	3001      	adds	r0, #1
 800e932:	f43f ae36 	beq.w	800e5a2 <_printf_float+0xbe>
 800e936:	f108 0801 	add.w	r8, r8, #1
 800e93a:	68e3      	ldr	r3, [r4, #12]
 800e93c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e93e:	1a5b      	subs	r3, r3, r1
 800e940:	4543      	cmp	r3, r8
 800e942:	dcf0      	bgt.n	800e926 <_printf_float+0x442>
 800e944:	e6f8      	b.n	800e738 <_printf_float+0x254>
 800e946:	f04f 0800 	mov.w	r8, #0
 800e94a:	f104 0919 	add.w	r9, r4, #25
 800e94e:	e7f4      	b.n	800e93a <_printf_float+0x456>

0800e950 <_printf_common>:
 800e950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e954:	4616      	mov	r6, r2
 800e956:	4699      	mov	r9, r3
 800e958:	688a      	ldr	r2, [r1, #8]
 800e95a:	690b      	ldr	r3, [r1, #16]
 800e95c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e960:	4293      	cmp	r3, r2
 800e962:	bfb8      	it	lt
 800e964:	4613      	movlt	r3, r2
 800e966:	6033      	str	r3, [r6, #0]
 800e968:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e96c:	4607      	mov	r7, r0
 800e96e:	460c      	mov	r4, r1
 800e970:	b10a      	cbz	r2, 800e976 <_printf_common+0x26>
 800e972:	3301      	adds	r3, #1
 800e974:	6033      	str	r3, [r6, #0]
 800e976:	6823      	ldr	r3, [r4, #0]
 800e978:	0699      	lsls	r1, r3, #26
 800e97a:	bf42      	ittt	mi
 800e97c:	6833      	ldrmi	r3, [r6, #0]
 800e97e:	3302      	addmi	r3, #2
 800e980:	6033      	strmi	r3, [r6, #0]
 800e982:	6825      	ldr	r5, [r4, #0]
 800e984:	f015 0506 	ands.w	r5, r5, #6
 800e988:	d106      	bne.n	800e998 <_printf_common+0x48>
 800e98a:	f104 0a19 	add.w	sl, r4, #25
 800e98e:	68e3      	ldr	r3, [r4, #12]
 800e990:	6832      	ldr	r2, [r6, #0]
 800e992:	1a9b      	subs	r3, r3, r2
 800e994:	42ab      	cmp	r3, r5
 800e996:	dc26      	bgt.n	800e9e6 <_printf_common+0x96>
 800e998:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e99c:	1e13      	subs	r3, r2, #0
 800e99e:	6822      	ldr	r2, [r4, #0]
 800e9a0:	bf18      	it	ne
 800e9a2:	2301      	movne	r3, #1
 800e9a4:	0692      	lsls	r2, r2, #26
 800e9a6:	d42b      	bmi.n	800ea00 <_printf_common+0xb0>
 800e9a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e9ac:	4649      	mov	r1, r9
 800e9ae:	4638      	mov	r0, r7
 800e9b0:	47c0      	blx	r8
 800e9b2:	3001      	adds	r0, #1
 800e9b4:	d01e      	beq.n	800e9f4 <_printf_common+0xa4>
 800e9b6:	6823      	ldr	r3, [r4, #0]
 800e9b8:	6922      	ldr	r2, [r4, #16]
 800e9ba:	f003 0306 	and.w	r3, r3, #6
 800e9be:	2b04      	cmp	r3, #4
 800e9c0:	bf02      	ittt	eq
 800e9c2:	68e5      	ldreq	r5, [r4, #12]
 800e9c4:	6833      	ldreq	r3, [r6, #0]
 800e9c6:	1aed      	subeq	r5, r5, r3
 800e9c8:	68a3      	ldr	r3, [r4, #8]
 800e9ca:	bf0c      	ite	eq
 800e9cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e9d0:	2500      	movne	r5, #0
 800e9d2:	4293      	cmp	r3, r2
 800e9d4:	bfc4      	itt	gt
 800e9d6:	1a9b      	subgt	r3, r3, r2
 800e9d8:	18ed      	addgt	r5, r5, r3
 800e9da:	2600      	movs	r6, #0
 800e9dc:	341a      	adds	r4, #26
 800e9de:	42b5      	cmp	r5, r6
 800e9e0:	d11a      	bne.n	800ea18 <_printf_common+0xc8>
 800e9e2:	2000      	movs	r0, #0
 800e9e4:	e008      	b.n	800e9f8 <_printf_common+0xa8>
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	4652      	mov	r2, sl
 800e9ea:	4649      	mov	r1, r9
 800e9ec:	4638      	mov	r0, r7
 800e9ee:	47c0      	blx	r8
 800e9f0:	3001      	adds	r0, #1
 800e9f2:	d103      	bne.n	800e9fc <_printf_common+0xac>
 800e9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e9f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9fc:	3501      	adds	r5, #1
 800e9fe:	e7c6      	b.n	800e98e <_printf_common+0x3e>
 800ea00:	18e1      	adds	r1, r4, r3
 800ea02:	1c5a      	adds	r2, r3, #1
 800ea04:	2030      	movs	r0, #48	; 0x30
 800ea06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ea0a:	4422      	add	r2, r4
 800ea0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ea10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ea14:	3302      	adds	r3, #2
 800ea16:	e7c7      	b.n	800e9a8 <_printf_common+0x58>
 800ea18:	2301      	movs	r3, #1
 800ea1a:	4622      	mov	r2, r4
 800ea1c:	4649      	mov	r1, r9
 800ea1e:	4638      	mov	r0, r7
 800ea20:	47c0      	blx	r8
 800ea22:	3001      	adds	r0, #1
 800ea24:	d0e6      	beq.n	800e9f4 <_printf_common+0xa4>
 800ea26:	3601      	adds	r6, #1
 800ea28:	e7d9      	b.n	800e9de <_printf_common+0x8e>
	...

0800ea2c <_printf_i>:
 800ea2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea30:	7e0f      	ldrb	r7, [r1, #24]
 800ea32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ea34:	2f78      	cmp	r7, #120	; 0x78
 800ea36:	4691      	mov	r9, r2
 800ea38:	4680      	mov	r8, r0
 800ea3a:	460c      	mov	r4, r1
 800ea3c:	469a      	mov	sl, r3
 800ea3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ea42:	d807      	bhi.n	800ea54 <_printf_i+0x28>
 800ea44:	2f62      	cmp	r7, #98	; 0x62
 800ea46:	d80a      	bhi.n	800ea5e <_printf_i+0x32>
 800ea48:	2f00      	cmp	r7, #0
 800ea4a:	f000 80d4 	beq.w	800ebf6 <_printf_i+0x1ca>
 800ea4e:	2f58      	cmp	r7, #88	; 0x58
 800ea50:	f000 80c0 	beq.w	800ebd4 <_printf_i+0x1a8>
 800ea54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ea5c:	e03a      	b.n	800ead4 <_printf_i+0xa8>
 800ea5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ea62:	2b15      	cmp	r3, #21
 800ea64:	d8f6      	bhi.n	800ea54 <_printf_i+0x28>
 800ea66:	a101      	add	r1, pc, #4	; (adr r1, 800ea6c <_printf_i+0x40>)
 800ea68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ea6c:	0800eac5 	.word	0x0800eac5
 800ea70:	0800ead9 	.word	0x0800ead9
 800ea74:	0800ea55 	.word	0x0800ea55
 800ea78:	0800ea55 	.word	0x0800ea55
 800ea7c:	0800ea55 	.word	0x0800ea55
 800ea80:	0800ea55 	.word	0x0800ea55
 800ea84:	0800ead9 	.word	0x0800ead9
 800ea88:	0800ea55 	.word	0x0800ea55
 800ea8c:	0800ea55 	.word	0x0800ea55
 800ea90:	0800ea55 	.word	0x0800ea55
 800ea94:	0800ea55 	.word	0x0800ea55
 800ea98:	0800ebdd 	.word	0x0800ebdd
 800ea9c:	0800eb05 	.word	0x0800eb05
 800eaa0:	0800eb97 	.word	0x0800eb97
 800eaa4:	0800ea55 	.word	0x0800ea55
 800eaa8:	0800ea55 	.word	0x0800ea55
 800eaac:	0800ebff 	.word	0x0800ebff
 800eab0:	0800ea55 	.word	0x0800ea55
 800eab4:	0800eb05 	.word	0x0800eb05
 800eab8:	0800ea55 	.word	0x0800ea55
 800eabc:	0800ea55 	.word	0x0800ea55
 800eac0:	0800eb9f 	.word	0x0800eb9f
 800eac4:	682b      	ldr	r3, [r5, #0]
 800eac6:	1d1a      	adds	r2, r3, #4
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	602a      	str	r2, [r5, #0]
 800eacc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ead0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ead4:	2301      	movs	r3, #1
 800ead6:	e09f      	b.n	800ec18 <_printf_i+0x1ec>
 800ead8:	6820      	ldr	r0, [r4, #0]
 800eada:	682b      	ldr	r3, [r5, #0]
 800eadc:	0607      	lsls	r7, r0, #24
 800eade:	f103 0104 	add.w	r1, r3, #4
 800eae2:	6029      	str	r1, [r5, #0]
 800eae4:	d501      	bpl.n	800eaea <_printf_i+0xbe>
 800eae6:	681e      	ldr	r6, [r3, #0]
 800eae8:	e003      	b.n	800eaf2 <_printf_i+0xc6>
 800eaea:	0646      	lsls	r6, r0, #25
 800eaec:	d5fb      	bpl.n	800eae6 <_printf_i+0xba>
 800eaee:	f9b3 6000 	ldrsh.w	r6, [r3]
 800eaf2:	2e00      	cmp	r6, #0
 800eaf4:	da03      	bge.n	800eafe <_printf_i+0xd2>
 800eaf6:	232d      	movs	r3, #45	; 0x2d
 800eaf8:	4276      	negs	r6, r6
 800eafa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eafe:	485a      	ldr	r0, [pc, #360]	; (800ec68 <_printf_i+0x23c>)
 800eb00:	230a      	movs	r3, #10
 800eb02:	e012      	b.n	800eb2a <_printf_i+0xfe>
 800eb04:	682b      	ldr	r3, [r5, #0]
 800eb06:	6820      	ldr	r0, [r4, #0]
 800eb08:	1d19      	adds	r1, r3, #4
 800eb0a:	6029      	str	r1, [r5, #0]
 800eb0c:	0605      	lsls	r5, r0, #24
 800eb0e:	d501      	bpl.n	800eb14 <_printf_i+0xe8>
 800eb10:	681e      	ldr	r6, [r3, #0]
 800eb12:	e002      	b.n	800eb1a <_printf_i+0xee>
 800eb14:	0641      	lsls	r1, r0, #25
 800eb16:	d5fb      	bpl.n	800eb10 <_printf_i+0xe4>
 800eb18:	881e      	ldrh	r6, [r3, #0]
 800eb1a:	4853      	ldr	r0, [pc, #332]	; (800ec68 <_printf_i+0x23c>)
 800eb1c:	2f6f      	cmp	r7, #111	; 0x6f
 800eb1e:	bf0c      	ite	eq
 800eb20:	2308      	moveq	r3, #8
 800eb22:	230a      	movne	r3, #10
 800eb24:	2100      	movs	r1, #0
 800eb26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eb2a:	6865      	ldr	r5, [r4, #4]
 800eb2c:	60a5      	str	r5, [r4, #8]
 800eb2e:	2d00      	cmp	r5, #0
 800eb30:	bfa2      	ittt	ge
 800eb32:	6821      	ldrge	r1, [r4, #0]
 800eb34:	f021 0104 	bicge.w	r1, r1, #4
 800eb38:	6021      	strge	r1, [r4, #0]
 800eb3a:	b90e      	cbnz	r6, 800eb40 <_printf_i+0x114>
 800eb3c:	2d00      	cmp	r5, #0
 800eb3e:	d04b      	beq.n	800ebd8 <_printf_i+0x1ac>
 800eb40:	4615      	mov	r5, r2
 800eb42:	fbb6 f1f3 	udiv	r1, r6, r3
 800eb46:	fb03 6711 	mls	r7, r3, r1, r6
 800eb4a:	5dc7      	ldrb	r7, [r0, r7]
 800eb4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eb50:	4637      	mov	r7, r6
 800eb52:	42bb      	cmp	r3, r7
 800eb54:	460e      	mov	r6, r1
 800eb56:	d9f4      	bls.n	800eb42 <_printf_i+0x116>
 800eb58:	2b08      	cmp	r3, #8
 800eb5a:	d10b      	bne.n	800eb74 <_printf_i+0x148>
 800eb5c:	6823      	ldr	r3, [r4, #0]
 800eb5e:	07de      	lsls	r6, r3, #31
 800eb60:	d508      	bpl.n	800eb74 <_printf_i+0x148>
 800eb62:	6923      	ldr	r3, [r4, #16]
 800eb64:	6861      	ldr	r1, [r4, #4]
 800eb66:	4299      	cmp	r1, r3
 800eb68:	bfde      	ittt	le
 800eb6a:	2330      	movle	r3, #48	; 0x30
 800eb6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eb70:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eb74:	1b52      	subs	r2, r2, r5
 800eb76:	6122      	str	r2, [r4, #16]
 800eb78:	f8cd a000 	str.w	sl, [sp]
 800eb7c:	464b      	mov	r3, r9
 800eb7e:	aa03      	add	r2, sp, #12
 800eb80:	4621      	mov	r1, r4
 800eb82:	4640      	mov	r0, r8
 800eb84:	f7ff fee4 	bl	800e950 <_printf_common>
 800eb88:	3001      	adds	r0, #1
 800eb8a:	d14a      	bne.n	800ec22 <_printf_i+0x1f6>
 800eb8c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb90:	b004      	add	sp, #16
 800eb92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb96:	6823      	ldr	r3, [r4, #0]
 800eb98:	f043 0320 	orr.w	r3, r3, #32
 800eb9c:	6023      	str	r3, [r4, #0]
 800eb9e:	4833      	ldr	r0, [pc, #204]	; (800ec6c <_printf_i+0x240>)
 800eba0:	2778      	movs	r7, #120	; 0x78
 800eba2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800eba6:	6823      	ldr	r3, [r4, #0]
 800eba8:	6829      	ldr	r1, [r5, #0]
 800ebaa:	061f      	lsls	r7, r3, #24
 800ebac:	f851 6b04 	ldr.w	r6, [r1], #4
 800ebb0:	d402      	bmi.n	800ebb8 <_printf_i+0x18c>
 800ebb2:	065f      	lsls	r7, r3, #25
 800ebb4:	bf48      	it	mi
 800ebb6:	b2b6      	uxthmi	r6, r6
 800ebb8:	07df      	lsls	r7, r3, #31
 800ebba:	bf48      	it	mi
 800ebbc:	f043 0320 	orrmi.w	r3, r3, #32
 800ebc0:	6029      	str	r1, [r5, #0]
 800ebc2:	bf48      	it	mi
 800ebc4:	6023      	strmi	r3, [r4, #0]
 800ebc6:	b91e      	cbnz	r6, 800ebd0 <_printf_i+0x1a4>
 800ebc8:	6823      	ldr	r3, [r4, #0]
 800ebca:	f023 0320 	bic.w	r3, r3, #32
 800ebce:	6023      	str	r3, [r4, #0]
 800ebd0:	2310      	movs	r3, #16
 800ebd2:	e7a7      	b.n	800eb24 <_printf_i+0xf8>
 800ebd4:	4824      	ldr	r0, [pc, #144]	; (800ec68 <_printf_i+0x23c>)
 800ebd6:	e7e4      	b.n	800eba2 <_printf_i+0x176>
 800ebd8:	4615      	mov	r5, r2
 800ebda:	e7bd      	b.n	800eb58 <_printf_i+0x12c>
 800ebdc:	682b      	ldr	r3, [r5, #0]
 800ebde:	6826      	ldr	r6, [r4, #0]
 800ebe0:	6961      	ldr	r1, [r4, #20]
 800ebe2:	1d18      	adds	r0, r3, #4
 800ebe4:	6028      	str	r0, [r5, #0]
 800ebe6:	0635      	lsls	r5, r6, #24
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	d501      	bpl.n	800ebf0 <_printf_i+0x1c4>
 800ebec:	6019      	str	r1, [r3, #0]
 800ebee:	e002      	b.n	800ebf6 <_printf_i+0x1ca>
 800ebf0:	0670      	lsls	r0, r6, #25
 800ebf2:	d5fb      	bpl.n	800ebec <_printf_i+0x1c0>
 800ebf4:	8019      	strh	r1, [r3, #0]
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	6123      	str	r3, [r4, #16]
 800ebfa:	4615      	mov	r5, r2
 800ebfc:	e7bc      	b.n	800eb78 <_printf_i+0x14c>
 800ebfe:	682b      	ldr	r3, [r5, #0]
 800ec00:	1d1a      	adds	r2, r3, #4
 800ec02:	602a      	str	r2, [r5, #0]
 800ec04:	681d      	ldr	r5, [r3, #0]
 800ec06:	6862      	ldr	r2, [r4, #4]
 800ec08:	2100      	movs	r1, #0
 800ec0a:	4628      	mov	r0, r5
 800ec0c:	f7f1 fae0 	bl	80001d0 <memchr>
 800ec10:	b108      	cbz	r0, 800ec16 <_printf_i+0x1ea>
 800ec12:	1b40      	subs	r0, r0, r5
 800ec14:	6060      	str	r0, [r4, #4]
 800ec16:	6863      	ldr	r3, [r4, #4]
 800ec18:	6123      	str	r3, [r4, #16]
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec20:	e7aa      	b.n	800eb78 <_printf_i+0x14c>
 800ec22:	6923      	ldr	r3, [r4, #16]
 800ec24:	462a      	mov	r2, r5
 800ec26:	4649      	mov	r1, r9
 800ec28:	4640      	mov	r0, r8
 800ec2a:	47d0      	blx	sl
 800ec2c:	3001      	adds	r0, #1
 800ec2e:	d0ad      	beq.n	800eb8c <_printf_i+0x160>
 800ec30:	6823      	ldr	r3, [r4, #0]
 800ec32:	079b      	lsls	r3, r3, #30
 800ec34:	d413      	bmi.n	800ec5e <_printf_i+0x232>
 800ec36:	68e0      	ldr	r0, [r4, #12]
 800ec38:	9b03      	ldr	r3, [sp, #12]
 800ec3a:	4298      	cmp	r0, r3
 800ec3c:	bfb8      	it	lt
 800ec3e:	4618      	movlt	r0, r3
 800ec40:	e7a6      	b.n	800eb90 <_printf_i+0x164>
 800ec42:	2301      	movs	r3, #1
 800ec44:	4632      	mov	r2, r6
 800ec46:	4649      	mov	r1, r9
 800ec48:	4640      	mov	r0, r8
 800ec4a:	47d0      	blx	sl
 800ec4c:	3001      	adds	r0, #1
 800ec4e:	d09d      	beq.n	800eb8c <_printf_i+0x160>
 800ec50:	3501      	adds	r5, #1
 800ec52:	68e3      	ldr	r3, [r4, #12]
 800ec54:	9903      	ldr	r1, [sp, #12]
 800ec56:	1a5b      	subs	r3, r3, r1
 800ec58:	42ab      	cmp	r3, r5
 800ec5a:	dcf2      	bgt.n	800ec42 <_printf_i+0x216>
 800ec5c:	e7eb      	b.n	800ec36 <_printf_i+0x20a>
 800ec5e:	2500      	movs	r5, #0
 800ec60:	f104 0619 	add.w	r6, r4, #25
 800ec64:	e7f5      	b.n	800ec52 <_printf_i+0x226>
 800ec66:	bf00      	nop
 800ec68:	08011f5a 	.word	0x08011f5a
 800ec6c:	08011f6b 	.word	0x08011f6b

0800ec70 <_scanf_float>:
 800ec70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec74:	b087      	sub	sp, #28
 800ec76:	4617      	mov	r7, r2
 800ec78:	9303      	str	r3, [sp, #12]
 800ec7a:	688b      	ldr	r3, [r1, #8]
 800ec7c:	1e5a      	subs	r2, r3, #1
 800ec7e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ec82:	bf83      	ittte	hi
 800ec84:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ec88:	195b      	addhi	r3, r3, r5
 800ec8a:	9302      	strhi	r3, [sp, #8]
 800ec8c:	2300      	movls	r3, #0
 800ec8e:	bf86      	itte	hi
 800ec90:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ec94:	608b      	strhi	r3, [r1, #8]
 800ec96:	9302      	strls	r3, [sp, #8]
 800ec98:	680b      	ldr	r3, [r1, #0]
 800ec9a:	468b      	mov	fp, r1
 800ec9c:	2500      	movs	r5, #0
 800ec9e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800eca2:	f84b 3b1c 	str.w	r3, [fp], #28
 800eca6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ecaa:	4680      	mov	r8, r0
 800ecac:	460c      	mov	r4, r1
 800ecae:	465e      	mov	r6, fp
 800ecb0:	46aa      	mov	sl, r5
 800ecb2:	46a9      	mov	r9, r5
 800ecb4:	9501      	str	r5, [sp, #4]
 800ecb6:	68a2      	ldr	r2, [r4, #8]
 800ecb8:	b152      	cbz	r2, 800ecd0 <_scanf_float+0x60>
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	781b      	ldrb	r3, [r3, #0]
 800ecbe:	2b4e      	cmp	r3, #78	; 0x4e
 800ecc0:	d864      	bhi.n	800ed8c <_scanf_float+0x11c>
 800ecc2:	2b40      	cmp	r3, #64	; 0x40
 800ecc4:	d83c      	bhi.n	800ed40 <_scanf_float+0xd0>
 800ecc6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ecca:	b2c8      	uxtb	r0, r1
 800eccc:	280e      	cmp	r0, #14
 800ecce:	d93a      	bls.n	800ed46 <_scanf_float+0xd6>
 800ecd0:	f1b9 0f00 	cmp.w	r9, #0
 800ecd4:	d003      	beq.n	800ecde <_scanf_float+0x6e>
 800ecd6:	6823      	ldr	r3, [r4, #0]
 800ecd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ecdc:	6023      	str	r3, [r4, #0]
 800ecde:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ece2:	f1ba 0f01 	cmp.w	sl, #1
 800ece6:	f200 8113 	bhi.w	800ef10 <_scanf_float+0x2a0>
 800ecea:	455e      	cmp	r6, fp
 800ecec:	f200 8105 	bhi.w	800eefa <_scanf_float+0x28a>
 800ecf0:	2501      	movs	r5, #1
 800ecf2:	4628      	mov	r0, r5
 800ecf4:	b007      	add	sp, #28
 800ecf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecfa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ecfe:	2a0d      	cmp	r2, #13
 800ed00:	d8e6      	bhi.n	800ecd0 <_scanf_float+0x60>
 800ed02:	a101      	add	r1, pc, #4	; (adr r1, 800ed08 <_scanf_float+0x98>)
 800ed04:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ed08:	0800ee47 	.word	0x0800ee47
 800ed0c:	0800ecd1 	.word	0x0800ecd1
 800ed10:	0800ecd1 	.word	0x0800ecd1
 800ed14:	0800ecd1 	.word	0x0800ecd1
 800ed18:	0800eea7 	.word	0x0800eea7
 800ed1c:	0800ee7f 	.word	0x0800ee7f
 800ed20:	0800ecd1 	.word	0x0800ecd1
 800ed24:	0800ecd1 	.word	0x0800ecd1
 800ed28:	0800ee55 	.word	0x0800ee55
 800ed2c:	0800ecd1 	.word	0x0800ecd1
 800ed30:	0800ecd1 	.word	0x0800ecd1
 800ed34:	0800ecd1 	.word	0x0800ecd1
 800ed38:	0800ecd1 	.word	0x0800ecd1
 800ed3c:	0800ee0d 	.word	0x0800ee0d
 800ed40:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ed44:	e7db      	b.n	800ecfe <_scanf_float+0x8e>
 800ed46:	290e      	cmp	r1, #14
 800ed48:	d8c2      	bhi.n	800ecd0 <_scanf_float+0x60>
 800ed4a:	a001      	add	r0, pc, #4	; (adr r0, 800ed50 <_scanf_float+0xe0>)
 800ed4c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ed50:	0800edff 	.word	0x0800edff
 800ed54:	0800ecd1 	.word	0x0800ecd1
 800ed58:	0800edff 	.word	0x0800edff
 800ed5c:	0800ee93 	.word	0x0800ee93
 800ed60:	0800ecd1 	.word	0x0800ecd1
 800ed64:	0800edad 	.word	0x0800edad
 800ed68:	0800ede9 	.word	0x0800ede9
 800ed6c:	0800ede9 	.word	0x0800ede9
 800ed70:	0800ede9 	.word	0x0800ede9
 800ed74:	0800ede9 	.word	0x0800ede9
 800ed78:	0800ede9 	.word	0x0800ede9
 800ed7c:	0800ede9 	.word	0x0800ede9
 800ed80:	0800ede9 	.word	0x0800ede9
 800ed84:	0800ede9 	.word	0x0800ede9
 800ed88:	0800ede9 	.word	0x0800ede9
 800ed8c:	2b6e      	cmp	r3, #110	; 0x6e
 800ed8e:	d809      	bhi.n	800eda4 <_scanf_float+0x134>
 800ed90:	2b60      	cmp	r3, #96	; 0x60
 800ed92:	d8b2      	bhi.n	800ecfa <_scanf_float+0x8a>
 800ed94:	2b54      	cmp	r3, #84	; 0x54
 800ed96:	d077      	beq.n	800ee88 <_scanf_float+0x218>
 800ed98:	2b59      	cmp	r3, #89	; 0x59
 800ed9a:	d199      	bne.n	800ecd0 <_scanf_float+0x60>
 800ed9c:	2d07      	cmp	r5, #7
 800ed9e:	d197      	bne.n	800ecd0 <_scanf_float+0x60>
 800eda0:	2508      	movs	r5, #8
 800eda2:	e029      	b.n	800edf8 <_scanf_float+0x188>
 800eda4:	2b74      	cmp	r3, #116	; 0x74
 800eda6:	d06f      	beq.n	800ee88 <_scanf_float+0x218>
 800eda8:	2b79      	cmp	r3, #121	; 0x79
 800edaa:	e7f6      	b.n	800ed9a <_scanf_float+0x12a>
 800edac:	6821      	ldr	r1, [r4, #0]
 800edae:	05c8      	lsls	r0, r1, #23
 800edb0:	d51a      	bpl.n	800ede8 <_scanf_float+0x178>
 800edb2:	9b02      	ldr	r3, [sp, #8]
 800edb4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800edb8:	6021      	str	r1, [r4, #0]
 800edba:	f109 0901 	add.w	r9, r9, #1
 800edbe:	b11b      	cbz	r3, 800edc8 <_scanf_float+0x158>
 800edc0:	3b01      	subs	r3, #1
 800edc2:	3201      	adds	r2, #1
 800edc4:	9302      	str	r3, [sp, #8]
 800edc6:	60a2      	str	r2, [r4, #8]
 800edc8:	68a3      	ldr	r3, [r4, #8]
 800edca:	3b01      	subs	r3, #1
 800edcc:	60a3      	str	r3, [r4, #8]
 800edce:	6923      	ldr	r3, [r4, #16]
 800edd0:	3301      	adds	r3, #1
 800edd2:	6123      	str	r3, [r4, #16]
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	3b01      	subs	r3, #1
 800edd8:	2b00      	cmp	r3, #0
 800edda:	607b      	str	r3, [r7, #4]
 800eddc:	f340 8084 	ble.w	800eee8 <_scanf_float+0x278>
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	3301      	adds	r3, #1
 800ede4:	603b      	str	r3, [r7, #0]
 800ede6:	e766      	b.n	800ecb6 <_scanf_float+0x46>
 800ede8:	eb1a 0f05 	cmn.w	sl, r5
 800edec:	f47f af70 	bne.w	800ecd0 <_scanf_float+0x60>
 800edf0:	6822      	ldr	r2, [r4, #0]
 800edf2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800edf6:	6022      	str	r2, [r4, #0]
 800edf8:	f806 3b01 	strb.w	r3, [r6], #1
 800edfc:	e7e4      	b.n	800edc8 <_scanf_float+0x158>
 800edfe:	6822      	ldr	r2, [r4, #0]
 800ee00:	0610      	lsls	r0, r2, #24
 800ee02:	f57f af65 	bpl.w	800ecd0 <_scanf_float+0x60>
 800ee06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ee0a:	e7f4      	b.n	800edf6 <_scanf_float+0x186>
 800ee0c:	f1ba 0f00 	cmp.w	sl, #0
 800ee10:	d10e      	bne.n	800ee30 <_scanf_float+0x1c0>
 800ee12:	f1b9 0f00 	cmp.w	r9, #0
 800ee16:	d10e      	bne.n	800ee36 <_scanf_float+0x1c6>
 800ee18:	6822      	ldr	r2, [r4, #0]
 800ee1a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ee1e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ee22:	d108      	bne.n	800ee36 <_scanf_float+0x1c6>
 800ee24:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ee28:	6022      	str	r2, [r4, #0]
 800ee2a:	f04f 0a01 	mov.w	sl, #1
 800ee2e:	e7e3      	b.n	800edf8 <_scanf_float+0x188>
 800ee30:	f1ba 0f02 	cmp.w	sl, #2
 800ee34:	d055      	beq.n	800eee2 <_scanf_float+0x272>
 800ee36:	2d01      	cmp	r5, #1
 800ee38:	d002      	beq.n	800ee40 <_scanf_float+0x1d0>
 800ee3a:	2d04      	cmp	r5, #4
 800ee3c:	f47f af48 	bne.w	800ecd0 <_scanf_float+0x60>
 800ee40:	3501      	adds	r5, #1
 800ee42:	b2ed      	uxtb	r5, r5
 800ee44:	e7d8      	b.n	800edf8 <_scanf_float+0x188>
 800ee46:	f1ba 0f01 	cmp.w	sl, #1
 800ee4a:	f47f af41 	bne.w	800ecd0 <_scanf_float+0x60>
 800ee4e:	f04f 0a02 	mov.w	sl, #2
 800ee52:	e7d1      	b.n	800edf8 <_scanf_float+0x188>
 800ee54:	b97d      	cbnz	r5, 800ee76 <_scanf_float+0x206>
 800ee56:	f1b9 0f00 	cmp.w	r9, #0
 800ee5a:	f47f af3c 	bne.w	800ecd6 <_scanf_float+0x66>
 800ee5e:	6822      	ldr	r2, [r4, #0]
 800ee60:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ee64:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ee68:	f47f af39 	bne.w	800ecde <_scanf_float+0x6e>
 800ee6c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ee70:	6022      	str	r2, [r4, #0]
 800ee72:	2501      	movs	r5, #1
 800ee74:	e7c0      	b.n	800edf8 <_scanf_float+0x188>
 800ee76:	2d03      	cmp	r5, #3
 800ee78:	d0e2      	beq.n	800ee40 <_scanf_float+0x1d0>
 800ee7a:	2d05      	cmp	r5, #5
 800ee7c:	e7de      	b.n	800ee3c <_scanf_float+0x1cc>
 800ee7e:	2d02      	cmp	r5, #2
 800ee80:	f47f af26 	bne.w	800ecd0 <_scanf_float+0x60>
 800ee84:	2503      	movs	r5, #3
 800ee86:	e7b7      	b.n	800edf8 <_scanf_float+0x188>
 800ee88:	2d06      	cmp	r5, #6
 800ee8a:	f47f af21 	bne.w	800ecd0 <_scanf_float+0x60>
 800ee8e:	2507      	movs	r5, #7
 800ee90:	e7b2      	b.n	800edf8 <_scanf_float+0x188>
 800ee92:	6822      	ldr	r2, [r4, #0]
 800ee94:	0591      	lsls	r1, r2, #22
 800ee96:	f57f af1b 	bpl.w	800ecd0 <_scanf_float+0x60>
 800ee9a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ee9e:	6022      	str	r2, [r4, #0]
 800eea0:	f8cd 9004 	str.w	r9, [sp, #4]
 800eea4:	e7a8      	b.n	800edf8 <_scanf_float+0x188>
 800eea6:	6822      	ldr	r2, [r4, #0]
 800eea8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800eeac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800eeb0:	d006      	beq.n	800eec0 <_scanf_float+0x250>
 800eeb2:	0550      	lsls	r0, r2, #21
 800eeb4:	f57f af0c 	bpl.w	800ecd0 <_scanf_float+0x60>
 800eeb8:	f1b9 0f00 	cmp.w	r9, #0
 800eebc:	f43f af0f 	beq.w	800ecde <_scanf_float+0x6e>
 800eec0:	0591      	lsls	r1, r2, #22
 800eec2:	bf58      	it	pl
 800eec4:	9901      	ldrpl	r1, [sp, #4]
 800eec6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800eeca:	bf58      	it	pl
 800eecc:	eba9 0101 	subpl.w	r1, r9, r1
 800eed0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800eed4:	bf58      	it	pl
 800eed6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800eeda:	6022      	str	r2, [r4, #0]
 800eedc:	f04f 0900 	mov.w	r9, #0
 800eee0:	e78a      	b.n	800edf8 <_scanf_float+0x188>
 800eee2:	f04f 0a03 	mov.w	sl, #3
 800eee6:	e787      	b.n	800edf8 <_scanf_float+0x188>
 800eee8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800eeec:	4639      	mov	r1, r7
 800eeee:	4640      	mov	r0, r8
 800eef0:	4798      	blx	r3
 800eef2:	2800      	cmp	r0, #0
 800eef4:	f43f aedf 	beq.w	800ecb6 <_scanf_float+0x46>
 800eef8:	e6ea      	b.n	800ecd0 <_scanf_float+0x60>
 800eefa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eefe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ef02:	463a      	mov	r2, r7
 800ef04:	4640      	mov	r0, r8
 800ef06:	4798      	blx	r3
 800ef08:	6923      	ldr	r3, [r4, #16]
 800ef0a:	3b01      	subs	r3, #1
 800ef0c:	6123      	str	r3, [r4, #16]
 800ef0e:	e6ec      	b.n	800ecea <_scanf_float+0x7a>
 800ef10:	1e6b      	subs	r3, r5, #1
 800ef12:	2b06      	cmp	r3, #6
 800ef14:	d825      	bhi.n	800ef62 <_scanf_float+0x2f2>
 800ef16:	2d02      	cmp	r5, #2
 800ef18:	d836      	bhi.n	800ef88 <_scanf_float+0x318>
 800ef1a:	455e      	cmp	r6, fp
 800ef1c:	f67f aee8 	bls.w	800ecf0 <_scanf_float+0x80>
 800ef20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ef24:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ef28:	463a      	mov	r2, r7
 800ef2a:	4640      	mov	r0, r8
 800ef2c:	4798      	blx	r3
 800ef2e:	6923      	ldr	r3, [r4, #16]
 800ef30:	3b01      	subs	r3, #1
 800ef32:	6123      	str	r3, [r4, #16]
 800ef34:	e7f1      	b.n	800ef1a <_scanf_float+0x2aa>
 800ef36:	9802      	ldr	r0, [sp, #8]
 800ef38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ef3c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ef40:	9002      	str	r0, [sp, #8]
 800ef42:	463a      	mov	r2, r7
 800ef44:	4640      	mov	r0, r8
 800ef46:	4798      	blx	r3
 800ef48:	6923      	ldr	r3, [r4, #16]
 800ef4a:	3b01      	subs	r3, #1
 800ef4c:	6123      	str	r3, [r4, #16]
 800ef4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ef52:	fa5f fa8a 	uxtb.w	sl, sl
 800ef56:	f1ba 0f02 	cmp.w	sl, #2
 800ef5a:	d1ec      	bne.n	800ef36 <_scanf_float+0x2c6>
 800ef5c:	3d03      	subs	r5, #3
 800ef5e:	b2ed      	uxtb	r5, r5
 800ef60:	1b76      	subs	r6, r6, r5
 800ef62:	6823      	ldr	r3, [r4, #0]
 800ef64:	05da      	lsls	r2, r3, #23
 800ef66:	d52f      	bpl.n	800efc8 <_scanf_float+0x358>
 800ef68:	055b      	lsls	r3, r3, #21
 800ef6a:	d510      	bpl.n	800ef8e <_scanf_float+0x31e>
 800ef6c:	455e      	cmp	r6, fp
 800ef6e:	f67f aebf 	bls.w	800ecf0 <_scanf_float+0x80>
 800ef72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ef76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ef7a:	463a      	mov	r2, r7
 800ef7c:	4640      	mov	r0, r8
 800ef7e:	4798      	blx	r3
 800ef80:	6923      	ldr	r3, [r4, #16]
 800ef82:	3b01      	subs	r3, #1
 800ef84:	6123      	str	r3, [r4, #16]
 800ef86:	e7f1      	b.n	800ef6c <_scanf_float+0x2fc>
 800ef88:	46aa      	mov	sl, r5
 800ef8a:	9602      	str	r6, [sp, #8]
 800ef8c:	e7df      	b.n	800ef4e <_scanf_float+0x2de>
 800ef8e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ef92:	6923      	ldr	r3, [r4, #16]
 800ef94:	2965      	cmp	r1, #101	; 0x65
 800ef96:	f103 33ff 	add.w	r3, r3, #4294967295
 800ef9a:	f106 35ff 	add.w	r5, r6, #4294967295
 800ef9e:	6123      	str	r3, [r4, #16]
 800efa0:	d00c      	beq.n	800efbc <_scanf_float+0x34c>
 800efa2:	2945      	cmp	r1, #69	; 0x45
 800efa4:	d00a      	beq.n	800efbc <_scanf_float+0x34c>
 800efa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800efaa:	463a      	mov	r2, r7
 800efac:	4640      	mov	r0, r8
 800efae:	4798      	blx	r3
 800efb0:	6923      	ldr	r3, [r4, #16]
 800efb2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800efb6:	3b01      	subs	r3, #1
 800efb8:	1eb5      	subs	r5, r6, #2
 800efba:	6123      	str	r3, [r4, #16]
 800efbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800efc0:	463a      	mov	r2, r7
 800efc2:	4640      	mov	r0, r8
 800efc4:	4798      	blx	r3
 800efc6:	462e      	mov	r6, r5
 800efc8:	6825      	ldr	r5, [r4, #0]
 800efca:	f015 0510 	ands.w	r5, r5, #16
 800efce:	d158      	bne.n	800f082 <_scanf_float+0x412>
 800efd0:	7035      	strb	r5, [r6, #0]
 800efd2:	6823      	ldr	r3, [r4, #0]
 800efd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800efd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800efdc:	d11c      	bne.n	800f018 <_scanf_float+0x3a8>
 800efde:	9b01      	ldr	r3, [sp, #4]
 800efe0:	454b      	cmp	r3, r9
 800efe2:	eba3 0209 	sub.w	r2, r3, r9
 800efe6:	d124      	bne.n	800f032 <_scanf_float+0x3c2>
 800efe8:	2200      	movs	r2, #0
 800efea:	4659      	mov	r1, fp
 800efec:	4640      	mov	r0, r8
 800efee:	f7ff f9c7 	bl	800e380 <_strtod_r>
 800eff2:	9b03      	ldr	r3, [sp, #12]
 800eff4:	6821      	ldr	r1, [r4, #0]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	f011 0f02 	tst.w	r1, #2
 800effc:	ec57 6b10 	vmov	r6, r7, d0
 800f000:	f103 0204 	add.w	r2, r3, #4
 800f004:	d020      	beq.n	800f048 <_scanf_float+0x3d8>
 800f006:	9903      	ldr	r1, [sp, #12]
 800f008:	600a      	str	r2, [r1, #0]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	e9c3 6700 	strd	r6, r7, [r3]
 800f010:	68e3      	ldr	r3, [r4, #12]
 800f012:	3301      	adds	r3, #1
 800f014:	60e3      	str	r3, [r4, #12]
 800f016:	e66c      	b.n	800ecf2 <_scanf_float+0x82>
 800f018:	9b04      	ldr	r3, [sp, #16]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d0e4      	beq.n	800efe8 <_scanf_float+0x378>
 800f01e:	9905      	ldr	r1, [sp, #20]
 800f020:	230a      	movs	r3, #10
 800f022:	462a      	mov	r2, r5
 800f024:	3101      	adds	r1, #1
 800f026:	4640      	mov	r0, r8
 800f028:	f002 f9ba 	bl	80113a0 <_strtol_r>
 800f02c:	9b04      	ldr	r3, [sp, #16]
 800f02e:	9e05      	ldr	r6, [sp, #20]
 800f030:	1ac2      	subs	r2, r0, r3
 800f032:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f036:	429e      	cmp	r6, r3
 800f038:	bf28      	it	cs
 800f03a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f03e:	4912      	ldr	r1, [pc, #72]	; (800f088 <_scanf_float+0x418>)
 800f040:	4630      	mov	r0, r6
 800f042:	f000 f8e7 	bl	800f214 <siprintf>
 800f046:	e7cf      	b.n	800efe8 <_scanf_float+0x378>
 800f048:	f011 0f04 	tst.w	r1, #4
 800f04c:	9903      	ldr	r1, [sp, #12]
 800f04e:	600a      	str	r2, [r1, #0]
 800f050:	d1db      	bne.n	800f00a <_scanf_float+0x39a>
 800f052:	f8d3 8000 	ldr.w	r8, [r3]
 800f056:	ee10 2a10 	vmov	r2, s0
 800f05a:	ee10 0a10 	vmov	r0, s0
 800f05e:	463b      	mov	r3, r7
 800f060:	4639      	mov	r1, r7
 800f062:	f7f1 fd63 	bl	8000b2c <__aeabi_dcmpun>
 800f066:	b128      	cbz	r0, 800f074 <_scanf_float+0x404>
 800f068:	4808      	ldr	r0, [pc, #32]	; (800f08c <_scanf_float+0x41c>)
 800f06a:	f000 fa31 	bl	800f4d0 <nanf>
 800f06e:	ed88 0a00 	vstr	s0, [r8]
 800f072:	e7cd      	b.n	800f010 <_scanf_float+0x3a0>
 800f074:	4630      	mov	r0, r6
 800f076:	4639      	mov	r1, r7
 800f078:	f7f1 fdb6 	bl	8000be8 <__aeabi_d2f>
 800f07c:	f8c8 0000 	str.w	r0, [r8]
 800f080:	e7c6      	b.n	800f010 <_scanf_float+0x3a0>
 800f082:	2500      	movs	r5, #0
 800f084:	e635      	b.n	800ecf2 <_scanf_float+0x82>
 800f086:	bf00      	nop
 800f088:	08011f7c 	.word	0x08011f7c
 800f08c:	08012319 	.word	0x08012319

0800f090 <std>:
 800f090:	2300      	movs	r3, #0
 800f092:	b510      	push	{r4, lr}
 800f094:	4604      	mov	r4, r0
 800f096:	e9c0 3300 	strd	r3, r3, [r0]
 800f09a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f09e:	6083      	str	r3, [r0, #8]
 800f0a0:	8181      	strh	r1, [r0, #12]
 800f0a2:	6643      	str	r3, [r0, #100]	; 0x64
 800f0a4:	81c2      	strh	r2, [r0, #14]
 800f0a6:	6183      	str	r3, [r0, #24]
 800f0a8:	4619      	mov	r1, r3
 800f0aa:	2208      	movs	r2, #8
 800f0ac:	305c      	adds	r0, #92	; 0x5c
 800f0ae:	f000 f914 	bl	800f2da <memset>
 800f0b2:	4b0d      	ldr	r3, [pc, #52]	; (800f0e8 <std+0x58>)
 800f0b4:	6263      	str	r3, [r4, #36]	; 0x24
 800f0b6:	4b0d      	ldr	r3, [pc, #52]	; (800f0ec <std+0x5c>)
 800f0b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800f0ba:	4b0d      	ldr	r3, [pc, #52]	; (800f0f0 <std+0x60>)
 800f0bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f0be:	4b0d      	ldr	r3, [pc, #52]	; (800f0f4 <std+0x64>)
 800f0c0:	6323      	str	r3, [r4, #48]	; 0x30
 800f0c2:	4b0d      	ldr	r3, [pc, #52]	; (800f0f8 <std+0x68>)
 800f0c4:	6224      	str	r4, [r4, #32]
 800f0c6:	429c      	cmp	r4, r3
 800f0c8:	d006      	beq.n	800f0d8 <std+0x48>
 800f0ca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f0ce:	4294      	cmp	r4, r2
 800f0d0:	d002      	beq.n	800f0d8 <std+0x48>
 800f0d2:	33d0      	adds	r3, #208	; 0xd0
 800f0d4:	429c      	cmp	r4, r3
 800f0d6:	d105      	bne.n	800f0e4 <std+0x54>
 800f0d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f0dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0e0:	f000 b9dc 	b.w	800f49c <__retarget_lock_init_recursive>
 800f0e4:	bd10      	pop	{r4, pc}
 800f0e6:	bf00      	nop
 800f0e8:	0800f255 	.word	0x0800f255
 800f0ec:	0800f277 	.word	0x0800f277
 800f0f0:	0800f2af 	.word	0x0800f2af
 800f0f4:	0800f2d3 	.word	0x0800f2d3
 800f0f8:	2000108c 	.word	0x2000108c

0800f0fc <stdio_exit_handler>:
 800f0fc:	4a02      	ldr	r2, [pc, #8]	; (800f108 <stdio_exit_handler+0xc>)
 800f0fe:	4903      	ldr	r1, [pc, #12]	; (800f10c <stdio_exit_handler+0x10>)
 800f100:	4803      	ldr	r0, [pc, #12]	; (800f110 <stdio_exit_handler+0x14>)
 800f102:	f000 b869 	b.w	800f1d8 <_fwalk_sglue>
 800f106:	bf00      	nop
 800f108:	20000030 	.word	0x20000030
 800f10c:	0801177d 	.word	0x0801177d
 800f110:	200001a8 	.word	0x200001a8

0800f114 <cleanup_stdio>:
 800f114:	6841      	ldr	r1, [r0, #4]
 800f116:	4b0c      	ldr	r3, [pc, #48]	; (800f148 <cleanup_stdio+0x34>)
 800f118:	4299      	cmp	r1, r3
 800f11a:	b510      	push	{r4, lr}
 800f11c:	4604      	mov	r4, r0
 800f11e:	d001      	beq.n	800f124 <cleanup_stdio+0x10>
 800f120:	f002 fb2c 	bl	801177c <_fflush_r>
 800f124:	68a1      	ldr	r1, [r4, #8]
 800f126:	4b09      	ldr	r3, [pc, #36]	; (800f14c <cleanup_stdio+0x38>)
 800f128:	4299      	cmp	r1, r3
 800f12a:	d002      	beq.n	800f132 <cleanup_stdio+0x1e>
 800f12c:	4620      	mov	r0, r4
 800f12e:	f002 fb25 	bl	801177c <_fflush_r>
 800f132:	68e1      	ldr	r1, [r4, #12]
 800f134:	4b06      	ldr	r3, [pc, #24]	; (800f150 <cleanup_stdio+0x3c>)
 800f136:	4299      	cmp	r1, r3
 800f138:	d004      	beq.n	800f144 <cleanup_stdio+0x30>
 800f13a:	4620      	mov	r0, r4
 800f13c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f140:	f002 bb1c 	b.w	801177c <_fflush_r>
 800f144:	bd10      	pop	{r4, pc}
 800f146:	bf00      	nop
 800f148:	2000108c 	.word	0x2000108c
 800f14c:	200010f4 	.word	0x200010f4
 800f150:	2000115c 	.word	0x2000115c

0800f154 <global_stdio_init.part.0>:
 800f154:	b510      	push	{r4, lr}
 800f156:	4b0b      	ldr	r3, [pc, #44]	; (800f184 <global_stdio_init.part.0+0x30>)
 800f158:	4c0b      	ldr	r4, [pc, #44]	; (800f188 <global_stdio_init.part.0+0x34>)
 800f15a:	4a0c      	ldr	r2, [pc, #48]	; (800f18c <global_stdio_init.part.0+0x38>)
 800f15c:	601a      	str	r2, [r3, #0]
 800f15e:	4620      	mov	r0, r4
 800f160:	2200      	movs	r2, #0
 800f162:	2104      	movs	r1, #4
 800f164:	f7ff ff94 	bl	800f090 <std>
 800f168:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f16c:	2201      	movs	r2, #1
 800f16e:	2109      	movs	r1, #9
 800f170:	f7ff ff8e 	bl	800f090 <std>
 800f174:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f178:	2202      	movs	r2, #2
 800f17a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f17e:	2112      	movs	r1, #18
 800f180:	f7ff bf86 	b.w	800f090 <std>
 800f184:	200011c4 	.word	0x200011c4
 800f188:	2000108c 	.word	0x2000108c
 800f18c:	0800f0fd 	.word	0x0800f0fd

0800f190 <__sfp_lock_acquire>:
 800f190:	4801      	ldr	r0, [pc, #4]	; (800f198 <__sfp_lock_acquire+0x8>)
 800f192:	f000 b984 	b.w	800f49e <__retarget_lock_acquire_recursive>
 800f196:	bf00      	nop
 800f198:	200011cd 	.word	0x200011cd

0800f19c <__sfp_lock_release>:
 800f19c:	4801      	ldr	r0, [pc, #4]	; (800f1a4 <__sfp_lock_release+0x8>)
 800f19e:	f000 b97f 	b.w	800f4a0 <__retarget_lock_release_recursive>
 800f1a2:	bf00      	nop
 800f1a4:	200011cd 	.word	0x200011cd

0800f1a8 <__sinit>:
 800f1a8:	b510      	push	{r4, lr}
 800f1aa:	4604      	mov	r4, r0
 800f1ac:	f7ff fff0 	bl	800f190 <__sfp_lock_acquire>
 800f1b0:	6a23      	ldr	r3, [r4, #32]
 800f1b2:	b11b      	cbz	r3, 800f1bc <__sinit+0x14>
 800f1b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1b8:	f7ff bff0 	b.w	800f19c <__sfp_lock_release>
 800f1bc:	4b04      	ldr	r3, [pc, #16]	; (800f1d0 <__sinit+0x28>)
 800f1be:	6223      	str	r3, [r4, #32]
 800f1c0:	4b04      	ldr	r3, [pc, #16]	; (800f1d4 <__sinit+0x2c>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d1f5      	bne.n	800f1b4 <__sinit+0xc>
 800f1c8:	f7ff ffc4 	bl	800f154 <global_stdio_init.part.0>
 800f1cc:	e7f2      	b.n	800f1b4 <__sinit+0xc>
 800f1ce:	bf00      	nop
 800f1d0:	0800f115 	.word	0x0800f115
 800f1d4:	200011c4 	.word	0x200011c4

0800f1d8 <_fwalk_sglue>:
 800f1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1dc:	4607      	mov	r7, r0
 800f1de:	4688      	mov	r8, r1
 800f1e0:	4614      	mov	r4, r2
 800f1e2:	2600      	movs	r6, #0
 800f1e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f1e8:	f1b9 0901 	subs.w	r9, r9, #1
 800f1ec:	d505      	bpl.n	800f1fa <_fwalk_sglue+0x22>
 800f1ee:	6824      	ldr	r4, [r4, #0]
 800f1f0:	2c00      	cmp	r4, #0
 800f1f2:	d1f7      	bne.n	800f1e4 <_fwalk_sglue+0xc>
 800f1f4:	4630      	mov	r0, r6
 800f1f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1fa:	89ab      	ldrh	r3, [r5, #12]
 800f1fc:	2b01      	cmp	r3, #1
 800f1fe:	d907      	bls.n	800f210 <_fwalk_sglue+0x38>
 800f200:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f204:	3301      	adds	r3, #1
 800f206:	d003      	beq.n	800f210 <_fwalk_sglue+0x38>
 800f208:	4629      	mov	r1, r5
 800f20a:	4638      	mov	r0, r7
 800f20c:	47c0      	blx	r8
 800f20e:	4306      	orrs	r6, r0
 800f210:	3568      	adds	r5, #104	; 0x68
 800f212:	e7e9      	b.n	800f1e8 <_fwalk_sglue+0x10>

0800f214 <siprintf>:
 800f214:	b40e      	push	{r1, r2, r3}
 800f216:	b500      	push	{lr}
 800f218:	b09c      	sub	sp, #112	; 0x70
 800f21a:	ab1d      	add	r3, sp, #116	; 0x74
 800f21c:	9002      	str	r0, [sp, #8]
 800f21e:	9006      	str	r0, [sp, #24]
 800f220:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f224:	4809      	ldr	r0, [pc, #36]	; (800f24c <siprintf+0x38>)
 800f226:	9107      	str	r1, [sp, #28]
 800f228:	9104      	str	r1, [sp, #16]
 800f22a:	4909      	ldr	r1, [pc, #36]	; (800f250 <siprintf+0x3c>)
 800f22c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f230:	9105      	str	r1, [sp, #20]
 800f232:	6800      	ldr	r0, [r0, #0]
 800f234:	9301      	str	r3, [sp, #4]
 800f236:	a902      	add	r1, sp, #8
 800f238:	f002 f91c 	bl	8011474 <_svfiprintf_r>
 800f23c:	9b02      	ldr	r3, [sp, #8]
 800f23e:	2200      	movs	r2, #0
 800f240:	701a      	strb	r2, [r3, #0]
 800f242:	b01c      	add	sp, #112	; 0x70
 800f244:	f85d eb04 	ldr.w	lr, [sp], #4
 800f248:	b003      	add	sp, #12
 800f24a:	4770      	bx	lr
 800f24c:	200001f4 	.word	0x200001f4
 800f250:	ffff0208 	.word	0xffff0208

0800f254 <__sread>:
 800f254:	b510      	push	{r4, lr}
 800f256:	460c      	mov	r4, r1
 800f258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f25c:	f000 f8c0 	bl	800f3e0 <_read_r>
 800f260:	2800      	cmp	r0, #0
 800f262:	bfab      	itete	ge
 800f264:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f266:	89a3      	ldrhlt	r3, [r4, #12]
 800f268:	181b      	addge	r3, r3, r0
 800f26a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f26e:	bfac      	ite	ge
 800f270:	6563      	strge	r3, [r4, #84]	; 0x54
 800f272:	81a3      	strhlt	r3, [r4, #12]
 800f274:	bd10      	pop	{r4, pc}

0800f276 <__swrite>:
 800f276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f27a:	461f      	mov	r7, r3
 800f27c:	898b      	ldrh	r3, [r1, #12]
 800f27e:	05db      	lsls	r3, r3, #23
 800f280:	4605      	mov	r5, r0
 800f282:	460c      	mov	r4, r1
 800f284:	4616      	mov	r6, r2
 800f286:	d505      	bpl.n	800f294 <__swrite+0x1e>
 800f288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f28c:	2302      	movs	r3, #2
 800f28e:	2200      	movs	r2, #0
 800f290:	f000 f894 	bl	800f3bc <_lseek_r>
 800f294:	89a3      	ldrh	r3, [r4, #12]
 800f296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f29a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f29e:	81a3      	strh	r3, [r4, #12]
 800f2a0:	4632      	mov	r2, r6
 800f2a2:	463b      	mov	r3, r7
 800f2a4:	4628      	mov	r0, r5
 800f2a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2aa:	f000 b8bb 	b.w	800f424 <_write_r>

0800f2ae <__sseek>:
 800f2ae:	b510      	push	{r4, lr}
 800f2b0:	460c      	mov	r4, r1
 800f2b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2b6:	f000 f881 	bl	800f3bc <_lseek_r>
 800f2ba:	1c43      	adds	r3, r0, #1
 800f2bc:	89a3      	ldrh	r3, [r4, #12]
 800f2be:	bf15      	itete	ne
 800f2c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f2c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f2c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f2ca:	81a3      	strheq	r3, [r4, #12]
 800f2cc:	bf18      	it	ne
 800f2ce:	81a3      	strhne	r3, [r4, #12]
 800f2d0:	bd10      	pop	{r4, pc}

0800f2d2 <__sclose>:
 800f2d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2d6:	f000 b861 	b.w	800f39c <_close_r>

0800f2da <memset>:
 800f2da:	4402      	add	r2, r0
 800f2dc:	4603      	mov	r3, r0
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	d100      	bne.n	800f2e4 <memset+0xa>
 800f2e2:	4770      	bx	lr
 800f2e4:	f803 1b01 	strb.w	r1, [r3], #1
 800f2e8:	e7f9      	b.n	800f2de <memset+0x4>

0800f2ea <strncmp>:
 800f2ea:	b510      	push	{r4, lr}
 800f2ec:	b16a      	cbz	r2, 800f30a <strncmp+0x20>
 800f2ee:	3901      	subs	r1, #1
 800f2f0:	1884      	adds	r4, r0, r2
 800f2f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2f6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	d103      	bne.n	800f306 <strncmp+0x1c>
 800f2fe:	42a0      	cmp	r0, r4
 800f300:	d001      	beq.n	800f306 <strncmp+0x1c>
 800f302:	2a00      	cmp	r2, #0
 800f304:	d1f5      	bne.n	800f2f2 <strncmp+0x8>
 800f306:	1ad0      	subs	r0, r2, r3
 800f308:	bd10      	pop	{r4, pc}
 800f30a:	4610      	mov	r0, r2
 800f30c:	e7fc      	b.n	800f308 <strncmp+0x1e>

0800f30e <strnstr>:
 800f30e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f310:	460c      	mov	r4, r1
 800f312:	4605      	mov	r5, r0
 800f314:	4611      	mov	r1, r2
 800f316:	4620      	mov	r0, r4
 800f318:	9201      	str	r2, [sp, #4]
 800f31a:	f002 fa71 	bl	8011800 <strnlen>
 800f31e:	9901      	ldr	r1, [sp, #4]
 800f320:	4281      	cmp	r1, r0
 800f322:	4603      	mov	r3, r0
 800f324:	d805      	bhi.n	800f332 <strnstr+0x24>
 800f326:	5c22      	ldrb	r2, [r4, r0]
 800f328:	b11a      	cbz	r2, 800f332 <strnstr+0x24>
 800f32a:	2400      	movs	r4, #0
 800f32c:	4620      	mov	r0, r4
 800f32e:	b003      	add	sp, #12
 800f330:	bd30      	pop	{r4, r5, pc}
 800f332:	4622      	mov	r2, r4
 800f334:	4628      	mov	r0, r5
 800f336:	f000 f80b 	bl	800f350 <memmem>
 800f33a:	4604      	mov	r4, r0
 800f33c:	2800      	cmp	r0, #0
 800f33e:	d0f4      	beq.n	800f32a <strnstr+0x1c>
 800f340:	1b42      	subs	r2, r0, r5
 800f342:	2100      	movs	r1, #0
 800f344:	4628      	mov	r0, r5
 800f346:	f7f0 ff43 	bl	80001d0 <memchr>
 800f34a:	2800      	cmp	r0, #0
 800f34c:	d1ed      	bne.n	800f32a <strnstr+0x1c>
 800f34e:	e7ed      	b.n	800f32c <strnstr+0x1e>

0800f350 <memmem>:
 800f350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f354:	b1a3      	cbz	r3, 800f380 <memmem+0x30>
 800f356:	1ac9      	subs	r1, r1, r3
 800f358:	7817      	ldrb	r7, [r2, #0]
 800f35a:	4401      	add	r1, r0
 800f35c:	4604      	mov	r4, r0
 800f35e:	f103 3cff 	add.w	ip, r3, #4294967295
 800f362:	428c      	cmp	r4, r1
 800f364:	4620      	mov	r0, r4
 800f366:	d901      	bls.n	800f36c <memmem+0x1c>
 800f368:	2000      	movs	r0, #0
 800f36a:	e009      	b.n	800f380 <memmem+0x30>
 800f36c:	7805      	ldrb	r5, [r0, #0]
 800f36e:	42bd      	cmp	r5, r7
 800f370:	f104 0401 	add.w	r4, r4, #1
 800f374:	d1f5      	bne.n	800f362 <memmem+0x12>
 800f376:	eb0c 0504 	add.w	r5, ip, r4
 800f37a:	18d6      	adds	r6, r2, r3
 800f37c:	42a5      	cmp	r5, r4
 800f37e:	d101      	bne.n	800f384 <memmem+0x34>
 800f380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f384:	f815 8d01 	ldrb.w	r8, [r5, #-1]!
 800f388:	f816 ed01 	ldrb.w	lr, [r6, #-1]!
 800f38c:	45f0      	cmp	r8, lr
 800f38e:	d0f5      	beq.n	800f37c <memmem+0x2c>
 800f390:	e7e7      	b.n	800f362 <memmem+0x12>
	...

0800f394 <_localeconv_r>:
 800f394:	4800      	ldr	r0, [pc, #0]	; (800f398 <_localeconv_r+0x4>)
 800f396:	4770      	bx	lr
 800f398:	2000012c 	.word	0x2000012c

0800f39c <_close_r>:
 800f39c:	b538      	push	{r3, r4, r5, lr}
 800f39e:	4d06      	ldr	r5, [pc, #24]	; (800f3b8 <_close_r+0x1c>)
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	4604      	mov	r4, r0
 800f3a4:	4608      	mov	r0, r1
 800f3a6:	602b      	str	r3, [r5, #0]
 800f3a8:	f7f2 ff01 	bl	80021ae <_close>
 800f3ac:	1c43      	adds	r3, r0, #1
 800f3ae:	d102      	bne.n	800f3b6 <_close_r+0x1a>
 800f3b0:	682b      	ldr	r3, [r5, #0]
 800f3b2:	b103      	cbz	r3, 800f3b6 <_close_r+0x1a>
 800f3b4:	6023      	str	r3, [r4, #0]
 800f3b6:	bd38      	pop	{r3, r4, r5, pc}
 800f3b8:	200011c8 	.word	0x200011c8

0800f3bc <_lseek_r>:
 800f3bc:	b538      	push	{r3, r4, r5, lr}
 800f3be:	4d07      	ldr	r5, [pc, #28]	; (800f3dc <_lseek_r+0x20>)
 800f3c0:	4604      	mov	r4, r0
 800f3c2:	4608      	mov	r0, r1
 800f3c4:	4611      	mov	r1, r2
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	602a      	str	r2, [r5, #0]
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	f7f2 ff16 	bl	80021fc <_lseek>
 800f3d0:	1c43      	adds	r3, r0, #1
 800f3d2:	d102      	bne.n	800f3da <_lseek_r+0x1e>
 800f3d4:	682b      	ldr	r3, [r5, #0]
 800f3d6:	b103      	cbz	r3, 800f3da <_lseek_r+0x1e>
 800f3d8:	6023      	str	r3, [r4, #0]
 800f3da:	bd38      	pop	{r3, r4, r5, pc}
 800f3dc:	200011c8 	.word	0x200011c8

0800f3e0 <_read_r>:
 800f3e0:	b538      	push	{r3, r4, r5, lr}
 800f3e2:	4d07      	ldr	r5, [pc, #28]	; (800f400 <_read_r+0x20>)
 800f3e4:	4604      	mov	r4, r0
 800f3e6:	4608      	mov	r0, r1
 800f3e8:	4611      	mov	r1, r2
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	602a      	str	r2, [r5, #0]
 800f3ee:	461a      	mov	r2, r3
 800f3f0:	f7f2 fea4 	bl	800213c <_read>
 800f3f4:	1c43      	adds	r3, r0, #1
 800f3f6:	d102      	bne.n	800f3fe <_read_r+0x1e>
 800f3f8:	682b      	ldr	r3, [r5, #0]
 800f3fa:	b103      	cbz	r3, 800f3fe <_read_r+0x1e>
 800f3fc:	6023      	str	r3, [r4, #0]
 800f3fe:	bd38      	pop	{r3, r4, r5, pc}
 800f400:	200011c8 	.word	0x200011c8

0800f404 <_sbrk_r>:
 800f404:	b538      	push	{r3, r4, r5, lr}
 800f406:	4d06      	ldr	r5, [pc, #24]	; (800f420 <_sbrk_r+0x1c>)
 800f408:	2300      	movs	r3, #0
 800f40a:	4604      	mov	r4, r0
 800f40c:	4608      	mov	r0, r1
 800f40e:	602b      	str	r3, [r5, #0]
 800f410:	f7f2 ff02 	bl	8002218 <_sbrk>
 800f414:	1c43      	adds	r3, r0, #1
 800f416:	d102      	bne.n	800f41e <_sbrk_r+0x1a>
 800f418:	682b      	ldr	r3, [r5, #0]
 800f41a:	b103      	cbz	r3, 800f41e <_sbrk_r+0x1a>
 800f41c:	6023      	str	r3, [r4, #0]
 800f41e:	bd38      	pop	{r3, r4, r5, pc}
 800f420:	200011c8 	.word	0x200011c8

0800f424 <_write_r>:
 800f424:	b538      	push	{r3, r4, r5, lr}
 800f426:	4d07      	ldr	r5, [pc, #28]	; (800f444 <_write_r+0x20>)
 800f428:	4604      	mov	r4, r0
 800f42a:	4608      	mov	r0, r1
 800f42c:	4611      	mov	r1, r2
 800f42e:	2200      	movs	r2, #0
 800f430:	602a      	str	r2, [r5, #0]
 800f432:	461a      	mov	r2, r3
 800f434:	f7f2 fe9f 	bl	8002176 <_write>
 800f438:	1c43      	adds	r3, r0, #1
 800f43a:	d102      	bne.n	800f442 <_write_r+0x1e>
 800f43c:	682b      	ldr	r3, [r5, #0]
 800f43e:	b103      	cbz	r3, 800f442 <_write_r+0x1e>
 800f440:	6023      	str	r3, [r4, #0]
 800f442:	bd38      	pop	{r3, r4, r5, pc}
 800f444:	200011c8 	.word	0x200011c8

0800f448 <__errno>:
 800f448:	4b01      	ldr	r3, [pc, #4]	; (800f450 <__errno+0x8>)
 800f44a:	6818      	ldr	r0, [r3, #0]
 800f44c:	4770      	bx	lr
 800f44e:	bf00      	nop
 800f450:	200001f4 	.word	0x200001f4

0800f454 <__libc_init_array>:
 800f454:	b570      	push	{r4, r5, r6, lr}
 800f456:	4d0d      	ldr	r5, [pc, #52]	; (800f48c <__libc_init_array+0x38>)
 800f458:	4c0d      	ldr	r4, [pc, #52]	; (800f490 <__libc_init_array+0x3c>)
 800f45a:	1b64      	subs	r4, r4, r5
 800f45c:	10a4      	asrs	r4, r4, #2
 800f45e:	2600      	movs	r6, #0
 800f460:	42a6      	cmp	r6, r4
 800f462:	d109      	bne.n	800f478 <__libc_init_array+0x24>
 800f464:	4d0b      	ldr	r5, [pc, #44]	; (800f494 <__libc_init_array+0x40>)
 800f466:	4c0c      	ldr	r4, [pc, #48]	; (800f498 <__libc_init_array+0x44>)
 800f468:	f002 fcfc 	bl	8011e64 <_init>
 800f46c:	1b64      	subs	r4, r4, r5
 800f46e:	10a4      	asrs	r4, r4, #2
 800f470:	2600      	movs	r6, #0
 800f472:	42a6      	cmp	r6, r4
 800f474:	d105      	bne.n	800f482 <__libc_init_array+0x2e>
 800f476:	bd70      	pop	{r4, r5, r6, pc}
 800f478:	f855 3b04 	ldr.w	r3, [r5], #4
 800f47c:	4798      	blx	r3
 800f47e:	3601      	adds	r6, #1
 800f480:	e7ee      	b.n	800f460 <__libc_init_array+0xc>
 800f482:	f855 3b04 	ldr.w	r3, [r5], #4
 800f486:	4798      	blx	r3
 800f488:	3601      	adds	r6, #1
 800f48a:	e7f2      	b.n	800f472 <__libc_init_array+0x1e>
 800f48c:	08012324 	.word	0x08012324
 800f490:	08012324 	.word	0x08012324
 800f494:	08012324 	.word	0x08012324
 800f498:	08012328 	.word	0x08012328

0800f49c <__retarget_lock_init_recursive>:
 800f49c:	4770      	bx	lr

0800f49e <__retarget_lock_acquire_recursive>:
 800f49e:	4770      	bx	lr

0800f4a0 <__retarget_lock_release_recursive>:
 800f4a0:	4770      	bx	lr

0800f4a2 <memcpy>:
 800f4a2:	440a      	add	r2, r1
 800f4a4:	4291      	cmp	r1, r2
 800f4a6:	f100 33ff 	add.w	r3, r0, #4294967295
 800f4aa:	d100      	bne.n	800f4ae <memcpy+0xc>
 800f4ac:	4770      	bx	lr
 800f4ae:	b510      	push	{r4, lr}
 800f4b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f4b8:	4291      	cmp	r1, r2
 800f4ba:	d1f9      	bne.n	800f4b0 <memcpy+0xe>
 800f4bc:	bd10      	pop	{r4, pc}
	...

0800f4c0 <nan>:
 800f4c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f4c8 <nan+0x8>
 800f4c4:	4770      	bx	lr
 800f4c6:	bf00      	nop
 800f4c8:	00000000 	.word	0x00000000
 800f4cc:	7ff80000 	.word	0x7ff80000

0800f4d0 <nanf>:
 800f4d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f4d8 <nanf+0x8>
 800f4d4:	4770      	bx	lr
 800f4d6:	bf00      	nop
 800f4d8:	7fc00000 	.word	0x7fc00000

0800f4dc <quorem>:
 800f4dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e0:	6903      	ldr	r3, [r0, #16]
 800f4e2:	690c      	ldr	r4, [r1, #16]
 800f4e4:	42a3      	cmp	r3, r4
 800f4e6:	4607      	mov	r7, r0
 800f4e8:	db7e      	blt.n	800f5e8 <quorem+0x10c>
 800f4ea:	3c01      	subs	r4, #1
 800f4ec:	f101 0814 	add.w	r8, r1, #20
 800f4f0:	f100 0514 	add.w	r5, r0, #20
 800f4f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f4f8:	9301      	str	r3, [sp, #4]
 800f4fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f4fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f502:	3301      	adds	r3, #1
 800f504:	429a      	cmp	r2, r3
 800f506:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f50a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f50e:	fbb2 f6f3 	udiv	r6, r2, r3
 800f512:	d331      	bcc.n	800f578 <quorem+0x9c>
 800f514:	f04f 0e00 	mov.w	lr, #0
 800f518:	4640      	mov	r0, r8
 800f51a:	46ac      	mov	ip, r5
 800f51c:	46f2      	mov	sl, lr
 800f51e:	f850 2b04 	ldr.w	r2, [r0], #4
 800f522:	b293      	uxth	r3, r2
 800f524:	fb06 e303 	mla	r3, r6, r3, lr
 800f528:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f52c:	0c1a      	lsrs	r2, r3, #16
 800f52e:	b29b      	uxth	r3, r3
 800f530:	ebaa 0303 	sub.w	r3, sl, r3
 800f534:	f8dc a000 	ldr.w	sl, [ip]
 800f538:	fa13 f38a 	uxtah	r3, r3, sl
 800f53c:	fb06 220e 	mla	r2, r6, lr, r2
 800f540:	9300      	str	r3, [sp, #0]
 800f542:	9b00      	ldr	r3, [sp, #0]
 800f544:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f548:	b292      	uxth	r2, r2
 800f54a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f54e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f552:	f8bd 3000 	ldrh.w	r3, [sp]
 800f556:	4581      	cmp	r9, r0
 800f558:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f55c:	f84c 3b04 	str.w	r3, [ip], #4
 800f560:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f564:	d2db      	bcs.n	800f51e <quorem+0x42>
 800f566:	f855 300b 	ldr.w	r3, [r5, fp]
 800f56a:	b92b      	cbnz	r3, 800f578 <quorem+0x9c>
 800f56c:	9b01      	ldr	r3, [sp, #4]
 800f56e:	3b04      	subs	r3, #4
 800f570:	429d      	cmp	r5, r3
 800f572:	461a      	mov	r2, r3
 800f574:	d32c      	bcc.n	800f5d0 <quorem+0xf4>
 800f576:	613c      	str	r4, [r7, #16]
 800f578:	4638      	mov	r0, r7
 800f57a:	f001 fca7 	bl	8010ecc <__mcmp>
 800f57e:	2800      	cmp	r0, #0
 800f580:	db22      	blt.n	800f5c8 <quorem+0xec>
 800f582:	3601      	adds	r6, #1
 800f584:	4629      	mov	r1, r5
 800f586:	2000      	movs	r0, #0
 800f588:	f858 2b04 	ldr.w	r2, [r8], #4
 800f58c:	f8d1 c000 	ldr.w	ip, [r1]
 800f590:	b293      	uxth	r3, r2
 800f592:	1ac3      	subs	r3, r0, r3
 800f594:	0c12      	lsrs	r2, r2, #16
 800f596:	fa13 f38c 	uxtah	r3, r3, ip
 800f59a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f59e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f5a2:	b29b      	uxth	r3, r3
 800f5a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f5a8:	45c1      	cmp	r9, r8
 800f5aa:	f841 3b04 	str.w	r3, [r1], #4
 800f5ae:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f5b2:	d2e9      	bcs.n	800f588 <quorem+0xac>
 800f5b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f5b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f5bc:	b922      	cbnz	r2, 800f5c8 <quorem+0xec>
 800f5be:	3b04      	subs	r3, #4
 800f5c0:	429d      	cmp	r5, r3
 800f5c2:	461a      	mov	r2, r3
 800f5c4:	d30a      	bcc.n	800f5dc <quorem+0x100>
 800f5c6:	613c      	str	r4, [r7, #16]
 800f5c8:	4630      	mov	r0, r6
 800f5ca:	b003      	add	sp, #12
 800f5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5d0:	6812      	ldr	r2, [r2, #0]
 800f5d2:	3b04      	subs	r3, #4
 800f5d4:	2a00      	cmp	r2, #0
 800f5d6:	d1ce      	bne.n	800f576 <quorem+0x9a>
 800f5d8:	3c01      	subs	r4, #1
 800f5da:	e7c9      	b.n	800f570 <quorem+0x94>
 800f5dc:	6812      	ldr	r2, [r2, #0]
 800f5de:	3b04      	subs	r3, #4
 800f5e0:	2a00      	cmp	r2, #0
 800f5e2:	d1f0      	bne.n	800f5c6 <quorem+0xea>
 800f5e4:	3c01      	subs	r4, #1
 800f5e6:	e7eb      	b.n	800f5c0 <quorem+0xe4>
 800f5e8:	2000      	movs	r0, #0
 800f5ea:	e7ee      	b.n	800f5ca <quorem+0xee>
 800f5ec:	0000      	movs	r0, r0
	...

0800f5f0 <_dtoa_r>:
 800f5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5f4:	ed2d 8b04 	vpush	{d8-d9}
 800f5f8:	69c5      	ldr	r5, [r0, #28]
 800f5fa:	b093      	sub	sp, #76	; 0x4c
 800f5fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f600:	ec57 6b10 	vmov	r6, r7, d0
 800f604:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f608:	9107      	str	r1, [sp, #28]
 800f60a:	4604      	mov	r4, r0
 800f60c:	920a      	str	r2, [sp, #40]	; 0x28
 800f60e:	930d      	str	r3, [sp, #52]	; 0x34
 800f610:	b975      	cbnz	r5, 800f630 <_dtoa_r+0x40>
 800f612:	2010      	movs	r0, #16
 800f614:	f7fd ffec 	bl	800d5f0 <malloc>
 800f618:	4602      	mov	r2, r0
 800f61a:	61e0      	str	r0, [r4, #28]
 800f61c:	b920      	cbnz	r0, 800f628 <_dtoa_r+0x38>
 800f61e:	4bae      	ldr	r3, [pc, #696]	; (800f8d8 <_dtoa_r+0x2e8>)
 800f620:	21ef      	movs	r1, #239	; 0xef
 800f622:	48ae      	ldr	r0, [pc, #696]	; (800f8dc <_dtoa_r+0x2ec>)
 800f624:	f002 f8f8 	bl	8011818 <__assert_func>
 800f628:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f62c:	6005      	str	r5, [r0, #0]
 800f62e:	60c5      	str	r5, [r0, #12]
 800f630:	69e3      	ldr	r3, [r4, #28]
 800f632:	6819      	ldr	r1, [r3, #0]
 800f634:	b151      	cbz	r1, 800f64c <_dtoa_r+0x5c>
 800f636:	685a      	ldr	r2, [r3, #4]
 800f638:	604a      	str	r2, [r1, #4]
 800f63a:	2301      	movs	r3, #1
 800f63c:	4093      	lsls	r3, r2
 800f63e:	608b      	str	r3, [r1, #8]
 800f640:	4620      	mov	r0, r4
 800f642:	f001 f9bd 	bl	80109c0 <_Bfree>
 800f646:	69e3      	ldr	r3, [r4, #28]
 800f648:	2200      	movs	r2, #0
 800f64a:	601a      	str	r2, [r3, #0]
 800f64c:	1e3b      	subs	r3, r7, #0
 800f64e:	bfbb      	ittet	lt
 800f650:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f654:	9303      	strlt	r3, [sp, #12]
 800f656:	2300      	movge	r3, #0
 800f658:	2201      	movlt	r2, #1
 800f65a:	bfac      	ite	ge
 800f65c:	f8c8 3000 	strge.w	r3, [r8]
 800f660:	f8c8 2000 	strlt.w	r2, [r8]
 800f664:	4b9e      	ldr	r3, [pc, #632]	; (800f8e0 <_dtoa_r+0x2f0>)
 800f666:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f66a:	ea33 0308 	bics.w	r3, r3, r8
 800f66e:	d11b      	bne.n	800f6a8 <_dtoa_r+0xb8>
 800f670:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f672:	f242 730f 	movw	r3, #9999	; 0x270f
 800f676:	6013      	str	r3, [r2, #0]
 800f678:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f67c:	4333      	orrs	r3, r6
 800f67e:	f000 8593 	beq.w	80101a8 <_dtoa_r+0xbb8>
 800f682:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f684:	b963      	cbnz	r3, 800f6a0 <_dtoa_r+0xb0>
 800f686:	4b97      	ldr	r3, [pc, #604]	; (800f8e4 <_dtoa_r+0x2f4>)
 800f688:	e027      	b.n	800f6da <_dtoa_r+0xea>
 800f68a:	4b97      	ldr	r3, [pc, #604]	; (800f8e8 <_dtoa_r+0x2f8>)
 800f68c:	9300      	str	r3, [sp, #0]
 800f68e:	3308      	adds	r3, #8
 800f690:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f692:	6013      	str	r3, [r2, #0]
 800f694:	9800      	ldr	r0, [sp, #0]
 800f696:	b013      	add	sp, #76	; 0x4c
 800f698:	ecbd 8b04 	vpop	{d8-d9}
 800f69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6a0:	4b90      	ldr	r3, [pc, #576]	; (800f8e4 <_dtoa_r+0x2f4>)
 800f6a2:	9300      	str	r3, [sp, #0]
 800f6a4:	3303      	adds	r3, #3
 800f6a6:	e7f3      	b.n	800f690 <_dtoa_r+0xa0>
 800f6a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	ec51 0b17 	vmov	r0, r1, d7
 800f6b2:	eeb0 8a47 	vmov.f32	s16, s14
 800f6b6:	eef0 8a67 	vmov.f32	s17, s15
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	f7f1 fa04 	bl	8000ac8 <__aeabi_dcmpeq>
 800f6c0:	4681      	mov	r9, r0
 800f6c2:	b160      	cbz	r0, 800f6de <_dtoa_r+0xee>
 800f6c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	6013      	str	r3, [r2, #0]
 800f6ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	f000 8568 	beq.w	80101a2 <_dtoa_r+0xbb2>
 800f6d2:	4b86      	ldr	r3, [pc, #536]	; (800f8ec <_dtoa_r+0x2fc>)
 800f6d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f6d6:	6013      	str	r3, [r2, #0]
 800f6d8:	3b01      	subs	r3, #1
 800f6da:	9300      	str	r3, [sp, #0]
 800f6dc:	e7da      	b.n	800f694 <_dtoa_r+0xa4>
 800f6de:	aa10      	add	r2, sp, #64	; 0x40
 800f6e0:	a911      	add	r1, sp, #68	; 0x44
 800f6e2:	4620      	mov	r0, r4
 800f6e4:	eeb0 0a48 	vmov.f32	s0, s16
 800f6e8:	eef0 0a68 	vmov.f32	s1, s17
 800f6ec:	f001 fd04 	bl	80110f8 <__d2b>
 800f6f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f6f4:	4682      	mov	sl, r0
 800f6f6:	2d00      	cmp	r5, #0
 800f6f8:	d07f      	beq.n	800f7fa <_dtoa_r+0x20a>
 800f6fa:	ee18 3a90 	vmov	r3, s17
 800f6fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f702:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f706:	ec51 0b18 	vmov	r0, r1, d8
 800f70a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f70e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f712:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f716:	4619      	mov	r1, r3
 800f718:	2200      	movs	r2, #0
 800f71a:	4b75      	ldr	r3, [pc, #468]	; (800f8f0 <_dtoa_r+0x300>)
 800f71c:	f7f0 fdb4 	bl	8000288 <__aeabi_dsub>
 800f720:	a367      	add	r3, pc, #412	; (adr r3, 800f8c0 <_dtoa_r+0x2d0>)
 800f722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f726:	f7f0 ff67 	bl	80005f8 <__aeabi_dmul>
 800f72a:	a367      	add	r3, pc, #412	; (adr r3, 800f8c8 <_dtoa_r+0x2d8>)
 800f72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f730:	f7f0 fdac 	bl	800028c <__adddf3>
 800f734:	4606      	mov	r6, r0
 800f736:	4628      	mov	r0, r5
 800f738:	460f      	mov	r7, r1
 800f73a:	f7f0 fef3 	bl	8000524 <__aeabi_i2d>
 800f73e:	a364      	add	r3, pc, #400	; (adr r3, 800f8d0 <_dtoa_r+0x2e0>)
 800f740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f744:	f7f0 ff58 	bl	80005f8 <__aeabi_dmul>
 800f748:	4602      	mov	r2, r0
 800f74a:	460b      	mov	r3, r1
 800f74c:	4630      	mov	r0, r6
 800f74e:	4639      	mov	r1, r7
 800f750:	f7f0 fd9c 	bl	800028c <__adddf3>
 800f754:	4606      	mov	r6, r0
 800f756:	460f      	mov	r7, r1
 800f758:	f7f1 f9fe 	bl	8000b58 <__aeabi_d2iz>
 800f75c:	2200      	movs	r2, #0
 800f75e:	4683      	mov	fp, r0
 800f760:	2300      	movs	r3, #0
 800f762:	4630      	mov	r0, r6
 800f764:	4639      	mov	r1, r7
 800f766:	f7f1 f9b9 	bl	8000adc <__aeabi_dcmplt>
 800f76a:	b148      	cbz	r0, 800f780 <_dtoa_r+0x190>
 800f76c:	4658      	mov	r0, fp
 800f76e:	f7f0 fed9 	bl	8000524 <__aeabi_i2d>
 800f772:	4632      	mov	r2, r6
 800f774:	463b      	mov	r3, r7
 800f776:	f7f1 f9a7 	bl	8000ac8 <__aeabi_dcmpeq>
 800f77a:	b908      	cbnz	r0, 800f780 <_dtoa_r+0x190>
 800f77c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f780:	f1bb 0f16 	cmp.w	fp, #22
 800f784:	d857      	bhi.n	800f836 <_dtoa_r+0x246>
 800f786:	4b5b      	ldr	r3, [pc, #364]	; (800f8f4 <_dtoa_r+0x304>)
 800f788:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f790:	ec51 0b18 	vmov	r0, r1, d8
 800f794:	f7f1 f9a2 	bl	8000adc <__aeabi_dcmplt>
 800f798:	2800      	cmp	r0, #0
 800f79a:	d04e      	beq.n	800f83a <_dtoa_r+0x24a>
 800f79c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	930c      	str	r3, [sp, #48]	; 0x30
 800f7a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f7a6:	1b5b      	subs	r3, r3, r5
 800f7a8:	1e5a      	subs	r2, r3, #1
 800f7aa:	bf45      	ittet	mi
 800f7ac:	f1c3 0301 	rsbmi	r3, r3, #1
 800f7b0:	9305      	strmi	r3, [sp, #20]
 800f7b2:	2300      	movpl	r3, #0
 800f7b4:	2300      	movmi	r3, #0
 800f7b6:	9206      	str	r2, [sp, #24]
 800f7b8:	bf54      	ite	pl
 800f7ba:	9305      	strpl	r3, [sp, #20]
 800f7bc:	9306      	strmi	r3, [sp, #24]
 800f7be:	f1bb 0f00 	cmp.w	fp, #0
 800f7c2:	db3c      	blt.n	800f83e <_dtoa_r+0x24e>
 800f7c4:	9b06      	ldr	r3, [sp, #24]
 800f7c6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f7ca:	445b      	add	r3, fp
 800f7cc:	9306      	str	r3, [sp, #24]
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	9308      	str	r3, [sp, #32]
 800f7d2:	9b07      	ldr	r3, [sp, #28]
 800f7d4:	2b09      	cmp	r3, #9
 800f7d6:	d868      	bhi.n	800f8aa <_dtoa_r+0x2ba>
 800f7d8:	2b05      	cmp	r3, #5
 800f7da:	bfc4      	itt	gt
 800f7dc:	3b04      	subgt	r3, #4
 800f7de:	9307      	strgt	r3, [sp, #28]
 800f7e0:	9b07      	ldr	r3, [sp, #28]
 800f7e2:	f1a3 0302 	sub.w	r3, r3, #2
 800f7e6:	bfcc      	ite	gt
 800f7e8:	2500      	movgt	r5, #0
 800f7ea:	2501      	movle	r5, #1
 800f7ec:	2b03      	cmp	r3, #3
 800f7ee:	f200 8085 	bhi.w	800f8fc <_dtoa_r+0x30c>
 800f7f2:	e8df f003 	tbb	[pc, r3]
 800f7f6:	3b2e      	.short	0x3b2e
 800f7f8:	5839      	.short	0x5839
 800f7fa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f7fe:	441d      	add	r5, r3
 800f800:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f804:	2b20      	cmp	r3, #32
 800f806:	bfc1      	itttt	gt
 800f808:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f80c:	fa08 f803 	lslgt.w	r8, r8, r3
 800f810:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f814:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f818:	bfd6      	itet	le
 800f81a:	f1c3 0320 	rsble	r3, r3, #32
 800f81e:	ea48 0003 	orrgt.w	r0, r8, r3
 800f822:	fa06 f003 	lslle.w	r0, r6, r3
 800f826:	f7f0 fe6d 	bl	8000504 <__aeabi_ui2d>
 800f82a:	2201      	movs	r2, #1
 800f82c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f830:	3d01      	subs	r5, #1
 800f832:	920e      	str	r2, [sp, #56]	; 0x38
 800f834:	e76f      	b.n	800f716 <_dtoa_r+0x126>
 800f836:	2301      	movs	r3, #1
 800f838:	e7b3      	b.n	800f7a2 <_dtoa_r+0x1b2>
 800f83a:	900c      	str	r0, [sp, #48]	; 0x30
 800f83c:	e7b2      	b.n	800f7a4 <_dtoa_r+0x1b4>
 800f83e:	9b05      	ldr	r3, [sp, #20]
 800f840:	eba3 030b 	sub.w	r3, r3, fp
 800f844:	9305      	str	r3, [sp, #20]
 800f846:	f1cb 0300 	rsb	r3, fp, #0
 800f84a:	9308      	str	r3, [sp, #32]
 800f84c:	2300      	movs	r3, #0
 800f84e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f850:	e7bf      	b.n	800f7d2 <_dtoa_r+0x1e2>
 800f852:	2300      	movs	r3, #0
 800f854:	9309      	str	r3, [sp, #36]	; 0x24
 800f856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f858:	2b00      	cmp	r3, #0
 800f85a:	dc52      	bgt.n	800f902 <_dtoa_r+0x312>
 800f85c:	2301      	movs	r3, #1
 800f85e:	9301      	str	r3, [sp, #4]
 800f860:	9304      	str	r3, [sp, #16]
 800f862:	461a      	mov	r2, r3
 800f864:	920a      	str	r2, [sp, #40]	; 0x28
 800f866:	e00b      	b.n	800f880 <_dtoa_r+0x290>
 800f868:	2301      	movs	r3, #1
 800f86a:	e7f3      	b.n	800f854 <_dtoa_r+0x264>
 800f86c:	2300      	movs	r3, #0
 800f86e:	9309      	str	r3, [sp, #36]	; 0x24
 800f870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f872:	445b      	add	r3, fp
 800f874:	9301      	str	r3, [sp, #4]
 800f876:	3301      	adds	r3, #1
 800f878:	2b01      	cmp	r3, #1
 800f87a:	9304      	str	r3, [sp, #16]
 800f87c:	bfb8      	it	lt
 800f87e:	2301      	movlt	r3, #1
 800f880:	69e0      	ldr	r0, [r4, #28]
 800f882:	2100      	movs	r1, #0
 800f884:	2204      	movs	r2, #4
 800f886:	f102 0614 	add.w	r6, r2, #20
 800f88a:	429e      	cmp	r6, r3
 800f88c:	d93d      	bls.n	800f90a <_dtoa_r+0x31a>
 800f88e:	6041      	str	r1, [r0, #4]
 800f890:	4620      	mov	r0, r4
 800f892:	f001 f855 	bl	8010940 <_Balloc>
 800f896:	9000      	str	r0, [sp, #0]
 800f898:	2800      	cmp	r0, #0
 800f89a:	d139      	bne.n	800f910 <_dtoa_r+0x320>
 800f89c:	4b16      	ldr	r3, [pc, #88]	; (800f8f8 <_dtoa_r+0x308>)
 800f89e:	4602      	mov	r2, r0
 800f8a0:	f240 11af 	movw	r1, #431	; 0x1af
 800f8a4:	e6bd      	b.n	800f622 <_dtoa_r+0x32>
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	e7e1      	b.n	800f86e <_dtoa_r+0x27e>
 800f8aa:	2501      	movs	r5, #1
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	9307      	str	r3, [sp, #28]
 800f8b0:	9509      	str	r5, [sp, #36]	; 0x24
 800f8b2:	f04f 33ff 	mov.w	r3, #4294967295
 800f8b6:	9301      	str	r3, [sp, #4]
 800f8b8:	9304      	str	r3, [sp, #16]
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	2312      	movs	r3, #18
 800f8be:	e7d1      	b.n	800f864 <_dtoa_r+0x274>
 800f8c0:	636f4361 	.word	0x636f4361
 800f8c4:	3fd287a7 	.word	0x3fd287a7
 800f8c8:	8b60c8b3 	.word	0x8b60c8b3
 800f8cc:	3fc68a28 	.word	0x3fc68a28
 800f8d0:	509f79fb 	.word	0x509f79fb
 800f8d4:	3fd34413 	.word	0x3fd34413
 800f8d8:	08011f96 	.word	0x08011f96
 800f8dc:	08011fad 	.word	0x08011fad
 800f8e0:	7ff00000 	.word	0x7ff00000
 800f8e4:	08011f92 	.word	0x08011f92
 800f8e8:	08011f89 	.word	0x08011f89
 800f8ec:	08011f59 	.word	0x08011f59
 800f8f0:	3ff80000 	.word	0x3ff80000
 800f8f4:	080120f8 	.word	0x080120f8
 800f8f8:	08012005 	.word	0x08012005
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	9309      	str	r3, [sp, #36]	; 0x24
 800f900:	e7d7      	b.n	800f8b2 <_dtoa_r+0x2c2>
 800f902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f904:	9301      	str	r3, [sp, #4]
 800f906:	9304      	str	r3, [sp, #16]
 800f908:	e7ba      	b.n	800f880 <_dtoa_r+0x290>
 800f90a:	3101      	adds	r1, #1
 800f90c:	0052      	lsls	r2, r2, #1
 800f90e:	e7ba      	b.n	800f886 <_dtoa_r+0x296>
 800f910:	69e3      	ldr	r3, [r4, #28]
 800f912:	9a00      	ldr	r2, [sp, #0]
 800f914:	601a      	str	r2, [r3, #0]
 800f916:	9b04      	ldr	r3, [sp, #16]
 800f918:	2b0e      	cmp	r3, #14
 800f91a:	f200 80a8 	bhi.w	800fa6e <_dtoa_r+0x47e>
 800f91e:	2d00      	cmp	r5, #0
 800f920:	f000 80a5 	beq.w	800fa6e <_dtoa_r+0x47e>
 800f924:	f1bb 0f00 	cmp.w	fp, #0
 800f928:	dd38      	ble.n	800f99c <_dtoa_r+0x3ac>
 800f92a:	4bc0      	ldr	r3, [pc, #768]	; (800fc2c <_dtoa_r+0x63c>)
 800f92c:	f00b 020f 	and.w	r2, fp, #15
 800f930:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f934:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f938:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f93c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800f940:	d019      	beq.n	800f976 <_dtoa_r+0x386>
 800f942:	4bbb      	ldr	r3, [pc, #748]	; (800fc30 <_dtoa_r+0x640>)
 800f944:	ec51 0b18 	vmov	r0, r1, d8
 800f948:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f94c:	f7f0 ff7e 	bl	800084c <__aeabi_ddiv>
 800f950:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f954:	f008 080f 	and.w	r8, r8, #15
 800f958:	2503      	movs	r5, #3
 800f95a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800fc30 <_dtoa_r+0x640>
 800f95e:	f1b8 0f00 	cmp.w	r8, #0
 800f962:	d10a      	bne.n	800f97a <_dtoa_r+0x38a>
 800f964:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f968:	4632      	mov	r2, r6
 800f96a:	463b      	mov	r3, r7
 800f96c:	f7f0 ff6e 	bl	800084c <__aeabi_ddiv>
 800f970:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f974:	e02b      	b.n	800f9ce <_dtoa_r+0x3de>
 800f976:	2502      	movs	r5, #2
 800f978:	e7ef      	b.n	800f95a <_dtoa_r+0x36a>
 800f97a:	f018 0f01 	tst.w	r8, #1
 800f97e:	d008      	beq.n	800f992 <_dtoa_r+0x3a2>
 800f980:	4630      	mov	r0, r6
 800f982:	4639      	mov	r1, r7
 800f984:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f988:	f7f0 fe36 	bl	80005f8 <__aeabi_dmul>
 800f98c:	3501      	adds	r5, #1
 800f98e:	4606      	mov	r6, r0
 800f990:	460f      	mov	r7, r1
 800f992:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f996:	f109 0908 	add.w	r9, r9, #8
 800f99a:	e7e0      	b.n	800f95e <_dtoa_r+0x36e>
 800f99c:	f000 809f 	beq.w	800fade <_dtoa_r+0x4ee>
 800f9a0:	f1cb 0600 	rsb	r6, fp, #0
 800f9a4:	4ba1      	ldr	r3, [pc, #644]	; (800fc2c <_dtoa_r+0x63c>)
 800f9a6:	4fa2      	ldr	r7, [pc, #648]	; (800fc30 <_dtoa_r+0x640>)
 800f9a8:	f006 020f 	and.w	r2, r6, #15
 800f9ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b4:	ec51 0b18 	vmov	r0, r1, d8
 800f9b8:	f7f0 fe1e 	bl	80005f8 <__aeabi_dmul>
 800f9bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f9c0:	1136      	asrs	r6, r6, #4
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	2502      	movs	r5, #2
 800f9c6:	2e00      	cmp	r6, #0
 800f9c8:	d17e      	bne.n	800fac8 <_dtoa_r+0x4d8>
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d1d0      	bne.n	800f970 <_dtoa_r+0x380>
 800f9ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f9d0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	f000 8084 	beq.w	800fae2 <_dtoa_r+0x4f2>
 800f9da:	4b96      	ldr	r3, [pc, #600]	; (800fc34 <_dtoa_r+0x644>)
 800f9dc:	2200      	movs	r2, #0
 800f9de:	4640      	mov	r0, r8
 800f9e0:	4649      	mov	r1, r9
 800f9e2:	f7f1 f87b 	bl	8000adc <__aeabi_dcmplt>
 800f9e6:	2800      	cmp	r0, #0
 800f9e8:	d07b      	beq.n	800fae2 <_dtoa_r+0x4f2>
 800f9ea:	9b04      	ldr	r3, [sp, #16]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d078      	beq.n	800fae2 <_dtoa_r+0x4f2>
 800f9f0:	9b01      	ldr	r3, [sp, #4]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	dd39      	ble.n	800fa6a <_dtoa_r+0x47a>
 800f9f6:	4b90      	ldr	r3, [pc, #576]	; (800fc38 <_dtoa_r+0x648>)
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	4640      	mov	r0, r8
 800f9fc:	4649      	mov	r1, r9
 800f9fe:	f7f0 fdfb 	bl	80005f8 <__aeabi_dmul>
 800fa02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fa06:	9e01      	ldr	r6, [sp, #4]
 800fa08:	f10b 37ff 	add.w	r7, fp, #4294967295
 800fa0c:	3501      	adds	r5, #1
 800fa0e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fa12:	4628      	mov	r0, r5
 800fa14:	f7f0 fd86 	bl	8000524 <__aeabi_i2d>
 800fa18:	4642      	mov	r2, r8
 800fa1a:	464b      	mov	r3, r9
 800fa1c:	f7f0 fdec 	bl	80005f8 <__aeabi_dmul>
 800fa20:	4b86      	ldr	r3, [pc, #536]	; (800fc3c <_dtoa_r+0x64c>)
 800fa22:	2200      	movs	r2, #0
 800fa24:	f7f0 fc32 	bl	800028c <__adddf3>
 800fa28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800fa2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fa30:	9303      	str	r3, [sp, #12]
 800fa32:	2e00      	cmp	r6, #0
 800fa34:	d158      	bne.n	800fae8 <_dtoa_r+0x4f8>
 800fa36:	4b82      	ldr	r3, [pc, #520]	; (800fc40 <_dtoa_r+0x650>)
 800fa38:	2200      	movs	r2, #0
 800fa3a:	4640      	mov	r0, r8
 800fa3c:	4649      	mov	r1, r9
 800fa3e:	f7f0 fc23 	bl	8000288 <__aeabi_dsub>
 800fa42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fa46:	4680      	mov	r8, r0
 800fa48:	4689      	mov	r9, r1
 800fa4a:	f7f1 f865 	bl	8000b18 <__aeabi_dcmpgt>
 800fa4e:	2800      	cmp	r0, #0
 800fa50:	f040 8296 	bne.w	800ff80 <_dtoa_r+0x990>
 800fa54:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fa58:	4640      	mov	r0, r8
 800fa5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa5e:	4649      	mov	r1, r9
 800fa60:	f7f1 f83c 	bl	8000adc <__aeabi_dcmplt>
 800fa64:	2800      	cmp	r0, #0
 800fa66:	f040 8289 	bne.w	800ff7c <_dtoa_r+0x98c>
 800fa6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800fa6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	f2c0 814e 	blt.w	800fd12 <_dtoa_r+0x722>
 800fa76:	f1bb 0f0e 	cmp.w	fp, #14
 800fa7a:	f300 814a 	bgt.w	800fd12 <_dtoa_r+0x722>
 800fa7e:	4b6b      	ldr	r3, [pc, #428]	; (800fc2c <_dtoa_r+0x63c>)
 800fa80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fa84:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fa88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	f280 80dc 	bge.w	800fc48 <_dtoa_r+0x658>
 800fa90:	9b04      	ldr	r3, [sp, #16]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	f300 80d8 	bgt.w	800fc48 <_dtoa_r+0x658>
 800fa98:	f040 826f 	bne.w	800ff7a <_dtoa_r+0x98a>
 800fa9c:	4b68      	ldr	r3, [pc, #416]	; (800fc40 <_dtoa_r+0x650>)
 800fa9e:	2200      	movs	r2, #0
 800faa0:	4640      	mov	r0, r8
 800faa2:	4649      	mov	r1, r9
 800faa4:	f7f0 fda8 	bl	80005f8 <__aeabi_dmul>
 800faa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800faac:	f7f1 f82a 	bl	8000b04 <__aeabi_dcmpge>
 800fab0:	9e04      	ldr	r6, [sp, #16]
 800fab2:	4637      	mov	r7, r6
 800fab4:	2800      	cmp	r0, #0
 800fab6:	f040 8245 	bne.w	800ff44 <_dtoa_r+0x954>
 800faba:	9d00      	ldr	r5, [sp, #0]
 800fabc:	2331      	movs	r3, #49	; 0x31
 800fabe:	f805 3b01 	strb.w	r3, [r5], #1
 800fac2:	f10b 0b01 	add.w	fp, fp, #1
 800fac6:	e241      	b.n	800ff4c <_dtoa_r+0x95c>
 800fac8:	07f2      	lsls	r2, r6, #31
 800faca:	d505      	bpl.n	800fad8 <_dtoa_r+0x4e8>
 800facc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fad0:	f7f0 fd92 	bl	80005f8 <__aeabi_dmul>
 800fad4:	3501      	adds	r5, #1
 800fad6:	2301      	movs	r3, #1
 800fad8:	1076      	asrs	r6, r6, #1
 800fada:	3708      	adds	r7, #8
 800fadc:	e773      	b.n	800f9c6 <_dtoa_r+0x3d6>
 800fade:	2502      	movs	r5, #2
 800fae0:	e775      	b.n	800f9ce <_dtoa_r+0x3de>
 800fae2:	9e04      	ldr	r6, [sp, #16]
 800fae4:	465f      	mov	r7, fp
 800fae6:	e792      	b.n	800fa0e <_dtoa_r+0x41e>
 800fae8:	9900      	ldr	r1, [sp, #0]
 800faea:	4b50      	ldr	r3, [pc, #320]	; (800fc2c <_dtoa_r+0x63c>)
 800faec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800faf0:	4431      	add	r1, r6
 800faf2:	9102      	str	r1, [sp, #8]
 800faf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800faf6:	eeb0 9a47 	vmov.f32	s18, s14
 800fafa:	eef0 9a67 	vmov.f32	s19, s15
 800fafe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fb02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fb06:	2900      	cmp	r1, #0
 800fb08:	d044      	beq.n	800fb94 <_dtoa_r+0x5a4>
 800fb0a:	494e      	ldr	r1, [pc, #312]	; (800fc44 <_dtoa_r+0x654>)
 800fb0c:	2000      	movs	r0, #0
 800fb0e:	f7f0 fe9d 	bl	800084c <__aeabi_ddiv>
 800fb12:	ec53 2b19 	vmov	r2, r3, d9
 800fb16:	f7f0 fbb7 	bl	8000288 <__aeabi_dsub>
 800fb1a:	9d00      	ldr	r5, [sp, #0]
 800fb1c:	ec41 0b19 	vmov	d9, r0, r1
 800fb20:	4649      	mov	r1, r9
 800fb22:	4640      	mov	r0, r8
 800fb24:	f7f1 f818 	bl	8000b58 <__aeabi_d2iz>
 800fb28:	4606      	mov	r6, r0
 800fb2a:	f7f0 fcfb 	bl	8000524 <__aeabi_i2d>
 800fb2e:	4602      	mov	r2, r0
 800fb30:	460b      	mov	r3, r1
 800fb32:	4640      	mov	r0, r8
 800fb34:	4649      	mov	r1, r9
 800fb36:	f7f0 fba7 	bl	8000288 <__aeabi_dsub>
 800fb3a:	3630      	adds	r6, #48	; 0x30
 800fb3c:	f805 6b01 	strb.w	r6, [r5], #1
 800fb40:	ec53 2b19 	vmov	r2, r3, d9
 800fb44:	4680      	mov	r8, r0
 800fb46:	4689      	mov	r9, r1
 800fb48:	f7f0 ffc8 	bl	8000adc <__aeabi_dcmplt>
 800fb4c:	2800      	cmp	r0, #0
 800fb4e:	d164      	bne.n	800fc1a <_dtoa_r+0x62a>
 800fb50:	4642      	mov	r2, r8
 800fb52:	464b      	mov	r3, r9
 800fb54:	4937      	ldr	r1, [pc, #220]	; (800fc34 <_dtoa_r+0x644>)
 800fb56:	2000      	movs	r0, #0
 800fb58:	f7f0 fb96 	bl	8000288 <__aeabi_dsub>
 800fb5c:	ec53 2b19 	vmov	r2, r3, d9
 800fb60:	f7f0 ffbc 	bl	8000adc <__aeabi_dcmplt>
 800fb64:	2800      	cmp	r0, #0
 800fb66:	f040 80b6 	bne.w	800fcd6 <_dtoa_r+0x6e6>
 800fb6a:	9b02      	ldr	r3, [sp, #8]
 800fb6c:	429d      	cmp	r5, r3
 800fb6e:	f43f af7c 	beq.w	800fa6a <_dtoa_r+0x47a>
 800fb72:	4b31      	ldr	r3, [pc, #196]	; (800fc38 <_dtoa_r+0x648>)
 800fb74:	ec51 0b19 	vmov	r0, r1, d9
 800fb78:	2200      	movs	r2, #0
 800fb7a:	f7f0 fd3d 	bl	80005f8 <__aeabi_dmul>
 800fb7e:	4b2e      	ldr	r3, [pc, #184]	; (800fc38 <_dtoa_r+0x648>)
 800fb80:	ec41 0b19 	vmov	d9, r0, r1
 800fb84:	2200      	movs	r2, #0
 800fb86:	4640      	mov	r0, r8
 800fb88:	4649      	mov	r1, r9
 800fb8a:	f7f0 fd35 	bl	80005f8 <__aeabi_dmul>
 800fb8e:	4680      	mov	r8, r0
 800fb90:	4689      	mov	r9, r1
 800fb92:	e7c5      	b.n	800fb20 <_dtoa_r+0x530>
 800fb94:	ec51 0b17 	vmov	r0, r1, d7
 800fb98:	f7f0 fd2e 	bl	80005f8 <__aeabi_dmul>
 800fb9c:	9b02      	ldr	r3, [sp, #8]
 800fb9e:	9d00      	ldr	r5, [sp, #0]
 800fba0:	930f      	str	r3, [sp, #60]	; 0x3c
 800fba2:	ec41 0b19 	vmov	d9, r0, r1
 800fba6:	4649      	mov	r1, r9
 800fba8:	4640      	mov	r0, r8
 800fbaa:	f7f0 ffd5 	bl	8000b58 <__aeabi_d2iz>
 800fbae:	4606      	mov	r6, r0
 800fbb0:	f7f0 fcb8 	bl	8000524 <__aeabi_i2d>
 800fbb4:	3630      	adds	r6, #48	; 0x30
 800fbb6:	4602      	mov	r2, r0
 800fbb8:	460b      	mov	r3, r1
 800fbba:	4640      	mov	r0, r8
 800fbbc:	4649      	mov	r1, r9
 800fbbe:	f7f0 fb63 	bl	8000288 <__aeabi_dsub>
 800fbc2:	f805 6b01 	strb.w	r6, [r5], #1
 800fbc6:	9b02      	ldr	r3, [sp, #8]
 800fbc8:	429d      	cmp	r5, r3
 800fbca:	4680      	mov	r8, r0
 800fbcc:	4689      	mov	r9, r1
 800fbce:	f04f 0200 	mov.w	r2, #0
 800fbd2:	d124      	bne.n	800fc1e <_dtoa_r+0x62e>
 800fbd4:	4b1b      	ldr	r3, [pc, #108]	; (800fc44 <_dtoa_r+0x654>)
 800fbd6:	ec51 0b19 	vmov	r0, r1, d9
 800fbda:	f7f0 fb57 	bl	800028c <__adddf3>
 800fbde:	4602      	mov	r2, r0
 800fbe0:	460b      	mov	r3, r1
 800fbe2:	4640      	mov	r0, r8
 800fbe4:	4649      	mov	r1, r9
 800fbe6:	f7f0 ff97 	bl	8000b18 <__aeabi_dcmpgt>
 800fbea:	2800      	cmp	r0, #0
 800fbec:	d173      	bne.n	800fcd6 <_dtoa_r+0x6e6>
 800fbee:	ec53 2b19 	vmov	r2, r3, d9
 800fbf2:	4914      	ldr	r1, [pc, #80]	; (800fc44 <_dtoa_r+0x654>)
 800fbf4:	2000      	movs	r0, #0
 800fbf6:	f7f0 fb47 	bl	8000288 <__aeabi_dsub>
 800fbfa:	4602      	mov	r2, r0
 800fbfc:	460b      	mov	r3, r1
 800fbfe:	4640      	mov	r0, r8
 800fc00:	4649      	mov	r1, r9
 800fc02:	f7f0 ff6b 	bl	8000adc <__aeabi_dcmplt>
 800fc06:	2800      	cmp	r0, #0
 800fc08:	f43f af2f 	beq.w	800fa6a <_dtoa_r+0x47a>
 800fc0c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fc0e:	1e6b      	subs	r3, r5, #1
 800fc10:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fc16:	2b30      	cmp	r3, #48	; 0x30
 800fc18:	d0f8      	beq.n	800fc0c <_dtoa_r+0x61c>
 800fc1a:	46bb      	mov	fp, r7
 800fc1c:	e04a      	b.n	800fcb4 <_dtoa_r+0x6c4>
 800fc1e:	4b06      	ldr	r3, [pc, #24]	; (800fc38 <_dtoa_r+0x648>)
 800fc20:	f7f0 fcea 	bl	80005f8 <__aeabi_dmul>
 800fc24:	4680      	mov	r8, r0
 800fc26:	4689      	mov	r9, r1
 800fc28:	e7bd      	b.n	800fba6 <_dtoa_r+0x5b6>
 800fc2a:	bf00      	nop
 800fc2c:	080120f8 	.word	0x080120f8
 800fc30:	080120d0 	.word	0x080120d0
 800fc34:	3ff00000 	.word	0x3ff00000
 800fc38:	40240000 	.word	0x40240000
 800fc3c:	401c0000 	.word	0x401c0000
 800fc40:	40140000 	.word	0x40140000
 800fc44:	3fe00000 	.word	0x3fe00000
 800fc48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fc4c:	9d00      	ldr	r5, [sp, #0]
 800fc4e:	4642      	mov	r2, r8
 800fc50:	464b      	mov	r3, r9
 800fc52:	4630      	mov	r0, r6
 800fc54:	4639      	mov	r1, r7
 800fc56:	f7f0 fdf9 	bl	800084c <__aeabi_ddiv>
 800fc5a:	f7f0 ff7d 	bl	8000b58 <__aeabi_d2iz>
 800fc5e:	9001      	str	r0, [sp, #4]
 800fc60:	f7f0 fc60 	bl	8000524 <__aeabi_i2d>
 800fc64:	4642      	mov	r2, r8
 800fc66:	464b      	mov	r3, r9
 800fc68:	f7f0 fcc6 	bl	80005f8 <__aeabi_dmul>
 800fc6c:	4602      	mov	r2, r0
 800fc6e:	460b      	mov	r3, r1
 800fc70:	4630      	mov	r0, r6
 800fc72:	4639      	mov	r1, r7
 800fc74:	f7f0 fb08 	bl	8000288 <__aeabi_dsub>
 800fc78:	9e01      	ldr	r6, [sp, #4]
 800fc7a:	9f04      	ldr	r7, [sp, #16]
 800fc7c:	3630      	adds	r6, #48	; 0x30
 800fc7e:	f805 6b01 	strb.w	r6, [r5], #1
 800fc82:	9e00      	ldr	r6, [sp, #0]
 800fc84:	1bae      	subs	r6, r5, r6
 800fc86:	42b7      	cmp	r7, r6
 800fc88:	4602      	mov	r2, r0
 800fc8a:	460b      	mov	r3, r1
 800fc8c:	d134      	bne.n	800fcf8 <_dtoa_r+0x708>
 800fc8e:	f7f0 fafd 	bl	800028c <__adddf3>
 800fc92:	4642      	mov	r2, r8
 800fc94:	464b      	mov	r3, r9
 800fc96:	4606      	mov	r6, r0
 800fc98:	460f      	mov	r7, r1
 800fc9a:	f7f0 ff3d 	bl	8000b18 <__aeabi_dcmpgt>
 800fc9e:	b9c8      	cbnz	r0, 800fcd4 <_dtoa_r+0x6e4>
 800fca0:	4642      	mov	r2, r8
 800fca2:	464b      	mov	r3, r9
 800fca4:	4630      	mov	r0, r6
 800fca6:	4639      	mov	r1, r7
 800fca8:	f7f0 ff0e 	bl	8000ac8 <__aeabi_dcmpeq>
 800fcac:	b110      	cbz	r0, 800fcb4 <_dtoa_r+0x6c4>
 800fcae:	9b01      	ldr	r3, [sp, #4]
 800fcb0:	07db      	lsls	r3, r3, #31
 800fcb2:	d40f      	bmi.n	800fcd4 <_dtoa_r+0x6e4>
 800fcb4:	4651      	mov	r1, sl
 800fcb6:	4620      	mov	r0, r4
 800fcb8:	f000 fe82 	bl	80109c0 <_Bfree>
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fcc0:	702b      	strb	r3, [r5, #0]
 800fcc2:	f10b 0301 	add.w	r3, fp, #1
 800fcc6:	6013      	str	r3, [r2, #0]
 800fcc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	f43f ace2 	beq.w	800f694 <_dtoa_r+0xa4>
 800fcd0:	601d      	str	r5, [r3, #0]
 800fcd2:	e4df      	b.n	800f694 <_dtoa_r+0xa4>
 800fcd4:	465f      	mov	r7, fp
 800fcd6:	462b      	mov	r3, r5
 800fcd8:	461d      	mov	r5, r3
 800fcda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fcde:	2a39      	cmp	r2, #57	; 0x39
 800fce0:	d106      	bne.n	800fcf0 <_dtoa_r+0x700>
 800fce2:	9a00      	ldr	r2, [sp, #0]
 800fce4:	429a      	cmp	r2, r3
 800fce6:	d1f7      	bne.n	800fcd8 <_dtoa_r+0x6e8>
 800fce8:	9900      	ldr	r1, [sp, #0]
 800fcea:	2230      	movs	r2, #48	; 0x30
 800fcec:	3701      	adds	r7, #1
 800fcee:	700a      	strb	r2, [r1, #0]
 800fcf0:	781a      	ldrb	r2, [r3, #0]
 800fcf2:	3201      	adds	r2, #1
 800fcf4:	701a      	strb	r2, [r3, #0]
 800fcf6:	e790      	b.n	800fc1a <_dtoa_r+0x62a>
 800fcf8:	4ba3      	ldr	r3, [pc, #652]	; (800ff88 <_dtoa_r+0x998>)
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	f7f0 fc7c 	bl	80005f8 <__aeabi_dmul>
 800fd00:	2200      	movs	r2, #0
 800fd02:	2300      	movs	r3, #0
 800fd04:	4606      	mov	r6, r0
 800fd06:	460f      	mov	r7, r1
 800fd08:	f7f0 fede 	bl	8000ac8 <__aeabi_dcmpeq>
 800fd0c:	2800      	cmp	r0, #0
 800fd0e:	d09e      	beq.n	800fc4e <_dtoa_r+0x65e>
 800fd10:	e7d0      	b.n	800fcb4 <_dtoa_r+0x6c4>
 800fd12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd14:	2a00      	cmp	r2, #0
 800fd16:	f000 80ca 	beq.w	800feae <_dtoa_r+0x8be>
 800fd1a:	9a07      	ldr	r2, [sp, #28]
 800fd1c:	2a01      	cmp	r2, #1
 800fd1e:	f300 80ad 	bgt.w	800fe7c <_dtoa_r+0x88c>
 800fd22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fd24:	2a00      	cmp	r2, #0
 800fd26:	f000 80a5 	beq.w	800fe74 <_dtoa_r+0x884>
 800fd2a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fd2e:	9e08      	ldr	r6, [sp, #32]
 800fd30:	9d05      	ldr	r5, [sp, #20]
 800fd32:	9a05      	ldr	r2, [sp, #20]
 800fd34:	441a      	add	r2, r3
 800fd36:	9205      	str	r2, [sp, #20]
 800fd38:	9a06      	ldr	r2, [sp, #24]
 800fd3a:	2101      	movs	r1, #1
 800fd3c:	441a      	add	r2, r3
 800fd3e:	4620      	mov	r0, r4
 800fd40:	9206      	str	r2, [sp, #24]
 800fd42:	f000 ff3d 	bl	8010bc0 <__i2b>
 800fd46:	4607      	mov	r7, r0
 800fd48:	b165      	cbz	r5, 800fd64 <_dtoa_r+0x774>
 800fd4a:	9b06      	ldr	r3, [sp, #24]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	dd09      	ble.n	800fd64 <_dtoa_r+0x774>
 800fd50:	42ab      	cmp	r3, r5
 800fd52:	9a05      	ldr	r2, [sp, #20]
 800fd54:	bfa8      	it	ge
 800fd56:	462b      	movge	r3, r5
 800fd58:	1ad2      	subs	r2, r2, r3
 800fd5a:	9205      	str	r2, [sp, #20]
 800fd5c:	9a06      	ldr	r2, [sp, #24]
 800fd5e:	1aed      	subs	r5, r5, r3
 800fd60:	1ad3      	subs	r3, r2, r3
 800fd62:	9306      	str	r3, [sp, #24]
 800fd64:	9b08      	ldr	r3, [sp, #32]
 800fd66:	b1f3      	cbz	r3, 800fda6 <_dtoa_r+0x7b6>
 800fd68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	f000 80a3 	beq.w	800feb6 <_dtoa_r+0x8c6>
 800fd70:	2e00      	cmp	r6, #0
 800fd72:	dd10      	ble.n	800fd96 <_dtoa_r+0x7a6>
 800fd74:	4639      	mov	r1, r7
 800fd76:	4632      	mov	r2, r6
 800fd78:	4620      	mov	r0, r4
 800fd7a:	f000 ffe1 	bl	8010d40 <__pow5mult>
 800fd7e:	4652      	mov	r2, sl
 800fd80:	4601      	mov	r1, r0
 800fd82:	4607      	mov	r7, r0
 800fd84:	4620      	mov	r0, r4
 800fd86:	f000 ff31 	bl	8010bec <__multiply>
 800fd8a:	4651      	mov	r1, sl
 800fd8c:	4680      	mov	r8, r0
 800fd8e:	4620      	mov	r0, r4
 800fd90:	f000 fe16 	bl	80109c0 <_Bfree>
 800fd94:	46c2      	mov	sl, r8
 800fd96:	9b08      	ldr	r3, [sp, #32]
 800fd98:	1b9a      	subs	r2, r3, r6
 800fd9a:	d004      	beq.n	800fda6 <_dtoa_r+0x7b6>
 800fd9c:	4651      	mov	r1, sl
 800fd9e:	4620      	mov	r0, r4
 800fda0:	f000 ffce 	bl	8010d40 <__pow5mult>
 800fda4:	4682      	mov	sl, r0
 800fda6:	2101      	movs	r1, #1
 800fda8:	4620      	mov	r0, r4
 800fdaa:	f000 ff09 	bl	8010bc0 <__i2b>
 800fdae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	4606      	mov	r6, r0
 800fdb4:	f340 8081 	ble.w	800feba <_dtoa_r+0x8ca>
 800fdb8:	461a      	mov	r2, r3
 800fdba:	4601      	mov	r1, r0
 800fdbc:	4620      	mov	r0, r4
 800fdbe:	f000 ffbf 	bl	8010d40 <__pow5mult>
 800fdc2:	9b07      	ldr	r3, [sp, #28]
 800fdc4:	2b01      	cmp	r3, #1
 800fdc6:	4606      	mov	r6, r0
 800fdc8:	dd7a      	ble.n	800fec0 <_dtoa_r+0x8d0>
 800fdca:	f04f 0800 	mov.w	r8, #0
 800fdce:	6933      	ldr	r3, [r6, #16]
 800fdd0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fdd4:	6918      	ldr	r0, [r3, #16]
 800fdd6:	f000 fea5 	bl	8010b24 <__hi0bits>
 800fdda:	f1c0 0020 	rsb	r0, r0, #32
 800fdde:	9b06      	ldr	r3, [sp, #24]
 800fde0:	4418      	add	r0, r3
 800fde2:	f010 001f 	ands.w	r0, r0, #31
 800fde6:	f000 8094 	beq.w	800ff12 <_dtoa_r+0x922>
 800fdea:	f1c0 0320 	rsb	r3, r0, #32
 800fdee:	2b04      	cmp	r3, #4
 800fdf0:	f340 8085 	ble.w	800fefe <_dtoa_r+0x90e>
 800fdf4:	9b05      	ldr	r3, [sp, #20]
 800fdf6:	f1c0 001c 	rsb	r0, r0, #28
 800fdfa:	4403      	add	r3, r0
 800fdfc:	9305      	str	r3, [sp, #20]
 800fdfe:	9b06      	ldr	r3, [sp, #24]
 800fe00:	4403      	add	r3, r0
 800fe02:	4405      	add	r5, r0
 800fe04:	9306      	str	r3, [sp, #24]
 800fe06:	9b05      	ldr	r3, [sp, #20]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	dd05      	ble.n	800fe18 <_dtoa_r+0x828>
 800fe0c:	4651      	mov	r1, sl
 800fe0e:	461a      	mov	r2, r3
 800fe10:	4620      	mov	r0, r4
 800fe12:	f000 ffef 	bl	8010df4 <__lshift>
 800fe16:	4682      	mov	sl, r0
 800fe18:	9b06      	ldr	r3, [sp, #24]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	dd05      	ble.n	800fe2a <_dtoa_r+0x83a>
 800fe1e:	4631      	mov	r1, r6
 800fe20:	461a      	mov	r2, r3
 800fe22:	4620      	mov	r0, r4
 800fe24:	f000 ffe6 	bl	8010df4 <__lshift>
 800fe28:	4606      	mov	r6, r0
 800fe2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d072      	beq.n	800ff16 <_dtoa_r+0x926>
 800fe30:	4631      	mov	r1, r6
 800fe32:	4650      	mov	r0, sl
 800fe34:	f001 f84a 	bl	8010ecc <__mcmp>
 800fe38:	2800      	cmp	r0, #0
 800fe3a:	da6c      	bge.n	800ff16 <_dtoa_r+0x926>
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	4651      	mov	r1, sl
 800fe40:	220a      	movs	r2, #10
 800fe42:	4620      	mov	r0, r4
 800fe44:	f000 fdde 	bl	8010a04 <__multadd>
 800fe48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fe4e:	4682      	mov	sl, r0
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	f000 81b0 	beq.w	80101b6 <_dtoa_r+0xbc6>
 800fe56:	2300      	movs	r3, #0
 800fe58:	4639      	mov	r1, r7
 800fe5a:	220a      	movs	r2, #10
 800fe5c:	4620      	mov	r0, r4
 800fe5e:	f000 fdd1 	bl	8010a04 <__multadd>
 800fe62:	9b01      	ldr	r3, [sp, #4]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	4607      	mov	r7, r0
 800fe68:	f300 8096 	bgt.w	800ff98 <_dtoa_r+0x9a8>
 800fe6c:	9b07      	ldr	r3, [sp, #28]
 800fe6e:	2b02      	cmp	r3, #2
 800fe70:	dc59      	bgt.n	800ff26 <_dtoa_r+0x936>
 800fe72:	e091      	b.n	800ff98 <_dtoa_r+0x9a8>
 800fe74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fe76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fe7a:	e758      	b.n	800fd2e <_dtoa_r+0x73e>
 800fe7c:	9b04      	ldr	r3, [sp, #16]
 800fe7e:	1e5e      	subs	r6, r3, #1
 800fe80:	9b08      	ldr	r3, [sp, #32]
 800fe82:	42b3      	cmp	r3, r6
 800fe84:	bfbf      	itttt	lt
 800fe86:	9b08      	ldrlt	r3, [sp, #32]
 800fe88:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800fe8a:	9608      	strlt	r6, [sp, #32]
 800fe8c:	1af3      	sublt	r3, r6, r3
 800fe8e:	bfb4      	ite	lt
 800fe90:	18d2      	addlt	r2, r2, r3
 800fe92:	1b9e      	subge	r6, r3, r6
 800fe94:	9b04      	ldr	r3, [sp, #16]
 800fe96:	bfbc      	itt	lt
 800fe98:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800fe9a:	2600      	movlt	r6, #0
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	bfb7      	itett	lt
 800fea0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800fea4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800fea8:	1a9d      	sublt	r5, r3, r2
 800feaa:	2300      	movlt	r3, #0
 800feac:	e741      	b.n	800fd32 <_dtoa_r+0x742>
 800feae:	9e08      	ldr	r6, [sp, #32]
 800feb0:	9d05      	ldr	r5, [sp, #20]
 800feb2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800feb4:	e748      	b.n	800fd48 <_dtoa_r+0x758>
 800feb6:	9a08      	ldr	r2, [sp, #32]
 800feb8:	e770      	b.n	800fd9c <_dtoa_r+0x7ac>
 800feba:	9b07      	ldr	r3, [sp, #28]
 800febc:	2b01      	cmp	r3, #1
 800febe:	dc19      	bgt.n	800fef4 <_dtoa_r+0x904>
 800fec0:	9b02      	ldr	r3, [sp, #8]
 800fec2:	b9bb      	cbnz	r3, 800fef4 <_dtoa_r+0x904>
 800fec4:	9b03      	ldr	r3, [sp, #12]
 800fec6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800feca:	b99b      	cbnz	r3, 800fef4 <_dtoa_r+0x904>
 800fecc:	9b03      	ldr	r3, [sp, #12]
 800fece:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fed2:	0d1b      	lsrs	r3, r3, #20
 800fed4:	051b      	lsls	r3, r3, #20
 800fed6:	b183      	cbz	r3, 800fefa <_dtoa_r+0x90a>
 800fed8:	9b05      	ldr	r3, [sp, #20]
 800feda:	3301      	adds	r3, #1
 800fedc:	9305      	str	r3, [sp, #20]
 800fede:	9b06      	ldr	r3, [sp, #24]
 800fee0:	3301      	adds	r3, #1
 800fee2:	9306      	str	r3, [sp, #24]
 800fee4:	f04f 0801 	mov.w	r8, #1
 800fee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800feea:	2b00      	cmp	r3, #0
 800feec:	f47f af6f 	bne.w	800fdce <_dtoa_r+0x7de>
 800fef0:	2001      	movs	r0, #1
 800fef2:	e774      	b.n	800fdde <_dtoa_r+0x7ee>
 800fef4:	f04f 0800 	mov.w	r8, #0
 800fef8:	e7f6      	b.n	800fee8 <_dtoa_r+0x8f8>
 800fefa:	4698      	mov	r8, r3
 800fefc:	e7f4      	b.n	800fee8 <_dtoa_r+0x8f8>
 800fefe:	d082      	beq.n	800fe06 <_dtoa_r+0x816>
 800ff00:	9a05      	ldr	r2, [sp, #20]
 800ff02:	331c      	adds	r3, #28
 800ff04:	441a      	add	r2, r3
 800ff06:	9205      	str	r2, [sp, #20]
 800ff08:	9a06      	ldr	r2, [sp, #24]
 800ff0a:	441a      	add	r2, r3
 800ff0c:	441d      	add	r5, r3
 800ff0e:	9206      	str	r2, [sp, #24]
 800ff10:	e779      	b.n	800fe06 <_dtoa_r+0x816>
 800ff12:	4603      	mov	r3, r0
 800ff14:	e7f4      	b.n	800ff00 <_dtoa_r+0x910>
 800ff16:	9b04      	ldr	r3, [sp, #16]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	dc37      	bgt.n	800ff8c <_dtoa_r+0x99c>
 800ff1c:	9b07      	ldr	r3, [sp, #28]
 800ff1e:	2b02      	cmp	r3, #2
 800ff20:	dd34      	ble.n	800ff8c <_dtoa_r+0x99c>
 800ff22:	9b04      	ldr	r3, [sp, #16]
 800ff24:	9301      	str	r3, [sp, #4]
 800ff26:	9b01      	ldr	r3, [sp, #4]
 800ff28:	b963      	cbnz	r3, 800ff44 <_dtoa_r+0x954>
 800ff2a:	4631      	mov	r1, r6
 800ff2c:	2205      	movs	r2, #5
 800ff2e:	4620      	mov	r0, r4
 800ff30:	f000 fd68 	bl	8010a04 <__multadd>
 800ff34:	4601      	mov	r1, r0
 800ff36:	4606      	mov	r6, r0
 800ff38:	4650      	mov	r0, sl
 800ff3a:	f000 ffc7 	bl	8010ecc <__mcmp>
 800ff3e:	2800      	cmp	r0, #0
 800ff40:	f73f adbb 	bgt.w	800faba <_dtoa_r+0x4ca>
 800ff44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff46:	9d00      	ldr	r5, [sp, #0]
 800ff48:	ea6f 0b03 	mvn.w	fp, r3
 800ff4c:	f04f 0800 	mov.w	r8, #0
 800ff50:	4631      	mov	r1, r6
 800ff52:	4620      	mov	r0, r4
 800ff54:	f000 fd34 	bl	80109c0 <_Bfree>
 800ff58:	2f00      	cmp	r7, #0
 800ff5a:	f43f aeab 	beq.w	800fcb4 <_dtoa_r+0x6c4>
 800ff5e:	f1b8 0f00 	cmp.w	r8, #0
 800ff62:	d005      	beq.n	800ff70 <_dtoa_r+0x980>
 800ff64:	45b8      	cmp	r8, r7
 800ff66:	d003      	beq.n	800ff70 <_dtoa_r+0x980>
 800ff68:	4641      	mov	r1, r8
 800ff6a:	4620      	mov	r0, r4
 800ff6c:	f000 fd28 	bl	80109c0 <_Bfree>
 800ff70:	4639      	mov	r1, r7
 800ff72:	4620      	mov	r0, r4
 800ff74:	f000 fd24 	bl	80109c0 <_Bfree>
 800ff78:	e69c      	b.n	800fcb4 <_dtoa_r+0x6c4>
 800ff7a:	2600      	movs	r6, #0
 800ff7c:	4637      	mov	r7, r6
 800ff7e:	e7e1      	b.n	800ff44 <_dtoa_r+0x954>
 800ff80:	46bb      	mov	fp, r7
 800ff82:	4637      	mov	r7, r6
 800ff84:	e599      	b.n	800faba <_dtoa_r+0x4ca>
 800ff86:	bf00      	nop
 800ff88:	40240000 	.word	0x40240000
 800ff8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	f000 80c8 	beq.w	8010124 <_dtoa_r+0xb34>
 800ff94:	9b04      	ldr	r3, [sp, #16]
 800ff96:	9301      	str	r3, [sp, #4]
 800ff98:	2d00      	cmp	r5, #0
 800ff9a:	dd05      	ble.n	800ffa8 <_dtoa_r+0x9b8>
 800ff9c:	4639      	mov	r1, r7
 800ff9e:	462a      	mov	r2, r5
 800ffa0:	4620      	mov	r0, r4
 800ffa2:	f000 ff27 	bl	8010df4 <__lshift>
 800ffa6:	4607      	mov	r7, r0
 800ffa8:	f1b8 0f00 	cmp.w	r8, #0
 800ffac:	d05b      	beq.n	8010066 <_dtoa_r+0xa76>
 800ffae:	6879      	ldr	r1, [r7, #4]
 800ffb0:	4620      	mov	r0, r4
 800ffb2:	f000 fcc5 	bl	8010940 <_Balloc>
 800ffb6:	4605      	mov	r5, r0
 800ffb8:	b928      	cbnz	r0, 800ffc6 <_dtoa_r+0x9d6>
 800ffba:	4b83      	ldr	r3, [pc, #524]	; (80101c8 <_dtoa_r+0xbd8>)
 800ffbc:	4602      	mov	r2, r0
 800ffbe:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ffc2:	f7ff bb2e 	b.w	800f622 <_dtoa_r+0x32>
 800ffc6:	693a      	ldr	r2, [r7, #16]
 800ffc8:	3202      	adds	r2, #2
 800ffca:	0092      	lsls	r2, r2, #2
 800ffcc:	f107 010c 	add.w	r1, r7, #12
 800ffd0:	300c      	adds	r0, #12
 800ffd2:	f7ff fa66 	bl	800f4a2 <memcpy>
 800ffd6:	2201      	movs	r2, #1
 800ffd8:	4629      	mov	r1, r5
 800ffda:	4620      	mov	r0, r4
 800ffdc:	f000 ff0a 	bl	8010df4 <__lshift>
 800ffe0:	9b00      	ldr	r3, [sp, #0]
 800ffe2:	3301      	adds	r3, #1
 800ffe4:	9304      	str	r3, [sp, #16]
 800ffe6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ffea:	4413      	add	r3, r2
 800ffec:	9308      	str	r3, [sp, #32]
 800ffee:	9b02      	ldr	r3, [sp, #8]
 800fff0:	f003 0301 	and.w	r3, r3, #1
 800fff4:	46b8      	mov	r8, r7
 800fff6:	9306      	str	r3, [sp, #24]
 800fff8:	4607      	mov	r7, r0
 800fffa:	9b04      	ldr	r3, [sp, #16]
 800fffc:	4631      	mov	r1, r6
 800fffe:	3b01      	subs	r3, #1
 8010000:	4650      	mov	r0, sl
 8010002:	9301      	str	r3, [sp, #4]
 8010004:	f7ff fa6a 	bl	800f4dc <quorem>
 8010008:	4641      	mov	r1, r8
 801000a:	9002      	str	r0, [sp, #8]
 801000c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010010:	4650      	mov	r0, sl
 8010012:	f000 ff5b 	bl	8010ecc <__mcmp>
 8010016:	463a      	mov	r2, r7
 8010018:	9005      	str	r0, [sp, #20]
 801001a:	4631      	mov	r1, r6
 801001c:	4620      	mov	r0, r4
 801001e:	f000 ff71 	bl	8010f04 <__mdiff>
 8010022:	68c2      	ldr	r2, [r0, #12]
 8010024:	4605      	mov	r5, r0
 8010026:	bb02      	cbnz	r2, 801006a <_dtoa_r+0xa7a>
 8010028:	4601      	mov	r1, r0
 801002a:	4650      	mov	r0, sl
 801002c:	f000 ff4e 	bl	8010ecc <__mcmp>
 8010030:	4602      	mov	r2, r0
 8010032:	4629      	mov	r1, r5
 8010034:	4620      	mov	r0, r4
 8010036:	9209      	str	r2, [sp, #36]	; 0x24
 8010038:	f000 fcc2 	bl	80109c0 <_Bfree>
 801003c:	9b07      	ldr	r3, [sp, #28]
 801003e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010040:	9d04      	ldr	r5, [sp, #16]
 8010042:	ea43 0102 	orr.w	r1, r3, r2
 8010046:	9b06      	ldr	r3, [sp, #24]
 8010048:	4319      	orrs	r1, r3
 801004a:	d110      	bne.n	801006e <_dtoa_r+0xa7e>
 801004c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010050:	d029      	beq.n	80100a6 <_dtoa_r+0xab6>
 8010052:	9b05      	ldr	r3, [sp, #20]
 8010054:	2b00      	cmp	r3, #0
 8010056:	dd02      	ble.n	801005e <_dtoa_r+0xa6e>
 8010058:	9b02      	ldr	r3, [sp, #8]
 801005a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801005e:	9b01      	ldr	r3, [sp, #4]
 8010060:	f883 9000 	strb.w	r9, [r3]
 8010064:	e774      	b.n	800ff50 <_dtoa_r+0x960>
 8010066:	4638      	mov	r0, r7
 8010068:	e7ba      	b.n	800ffe0 <_dtoa_r+0x9f0>
 801006a:	2201      	movs	r2, #1
 801006c:	e7e1      	b.n	8010032 <_dtoa_r+0xa42>
 801006e:	9b05      	ldr	r3, [sp, #20]
 8010070:	2b00      	cmp	r3, #0
 8010072:	db04      	blt.n	801007e <_dtoa_r+0xa8e>
 8010074:	9907      	ldr	r1, [sp, #28]
 8010076:	430b      	orrs	r3, r1
 8010078:	9906      	ldr	r1, [sp, #24]
 801007a:	430b      	orrs	r3, r1
 801007c:	d120      	bne.n	80100c0 <_dtoa_r+0xad0>
 801007e:	2a00      	cmp	r2, #0
 8010080:	dded      	ble.n	801005e <_dtoa_r+0xa6e>
 8010082:	4651      	mov	r1, sl
 8010084:	2201      	movs	r2, #1
 8010086:	4620      	mov	r0, r4
 8010088:	f000 feb4 	bl	8010df4 <__lshift>
 801008c:	4631      	mov	r1, r6
 801008e:	4682      	mov	sl, r0
 8010090:	f000 ff1c 	bl	8010ecc <__mcmp>
 8010094:	2800      	cmp	r0, #0
 8010096:	dc03      	bgt.n	80100a0 <_dtoa_r+0xab0>
 8010098:	d1e1      	bne.n	801005e <_dtoa_r+0xa6e>
 801009a:	f019 0f01 	tst.w	r9, #1
 801009e:	d0de      	beq.n	801005e <_dtoa_r+0xa6e>
 80100a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80100a4:	d1d8      	bne.n	8010058 <_dtoa_r+0xa68>
 80100a6:	9a01      	ldr	r2, [sp, #4]
 80100a8:	2339      	movs	r3, #57	; 0x39
 80100aa:	7013      	strb	r3, [r2, #0]
 80100ac:	462b      	mov	r3, r5
 80100ae:	461d      	mov	r5, r3
 80100b0:	3b01      	subs	r3, #1
 80100b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80100b6:	2a39      	cmp	r2, #57	; 0x39
 80100b8:	d06c      	beq.n	8010194 <_dtoa_r+0xba4>
 80100ba:	3201      	adds	r2, #1
 80100bc:	701a      	strb	r2, [r3, #0]
 80100be:	e747      	b.n	800ff50 <_dtoa_r+0x960>
 80100c0:	2a00      	cmp	r2, #0
 80100c2:	dd07      	ble.n	80100d4 <_dtoa_r+0xae4>
 80100c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80100c8:	d0ed      	beq.n	80100a6 <_dtoa_r+0xab6>
 80100ca:	9a01      	ldr	r2, [sp, #4]
 80100cc:	f109 0301 	add.w	r3, r9, #1
 80100d0:	7013      	strb	r3, [r2, #0]
 80100d2:	e73d      	b.n	800ff50 <_dtoa_r+0x960>
 80100d4:	9b04      	ldr	r3, [sp, #16]
 80100d6:	9a08      	ldr	r2, [sp, #32]
 80100d8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80100dc:	4293      	cmp	r3, r2
 80100de:	d043      	beq.n	8010168 <_dtoa_r+0xb78>
 80100e0:	4651      	mov	r1, sl
 80100e2:	2300      	movs	r3, #0
 80100e4:	220a      	movs	r2, #10
 80100e6:	4620      	mov	r0, r4
 80100e8:	f000 fc8c 	bl	8010a04 <__multadd>
 80100ec:	45b8      	cmp	r8, r7
 80100ee:	4682      	mov	sl, r0
 80100f0:	f04f 0300 	mov.w	r3, #0
 80100f4:	f04f 020a 	mov.w	r2, #10
 80100f8:	4641      	mov	r1, r8
 80100fa:	4620      	mov	r0, r4
 80100fc:	d107      	bne.n	801010e <_dtoa_r+0xb1e>
 80100fe:	f000 fc81 	bl	8010a04 <__multadd>
 8010102:	4680      	mov	r8, r0
 8010104:	4607      	mov	r7, r0
 8010106:	9b04      	ldr	r3, [sp, #16]
 8010108:	3301      	adds	r3, #1
 801010a:	9304      	str	r3, [sp, #16]
 801010c:	e775      	b.n	800fffa <_dtoa_r+0xa0a>
 801010e:	f000 fc79 	bl	8010a04 <__multadd>
 8010112:	4639      	mov	r1, r7
 8010114:	4680      	mov	r8, r0
 8010116:	2300      	movs	r3, #0
 8010118:	220a      	movs	r2, #10
 801011a:	4620      	mov	r0, r4
 801011c:	f000 fc72 	bl	8010a04 <__multadd>
 8010120:	4607      	mov	r7, r0
 8010122:	e7f0      	b.n	8010106 <_dtoa_r+0xb16>
 8010124:	9b04      	ldr	r3, [sp, #16]
 8010126:	9301      	str	r3, [sp, #4]
 8010128:	9d00      	ldr	r5, [sp, #0]
 801012a:	4631      	mov	r1, r6
 801012c:	4650      	mov	r0, sl
 801012e:	f7ff f9d5 	bl	800f4dc <quorem>
 8010132:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010136:	9b00      	ldr	r3, [sp, #0]
 8010138:	f805 9b01 	strb.w	r9, [r5], #1
 801013c:	1aea      	subs	r2, r5, r3
 801013e:	9b01      	ldr	r3, [sp, #4]
 8010140:	4293      	cmp	r3, r2
 8010142:	dd07      	ble.n	8010154 <_dtoa_r+0xb64>
 8010144:	4651      	mov	r1, sl
 8010146:	2300      	movs	r3, #0
 8010148:	220a      	movs	r2, #10
 801014a:	4620      	mov	r0, r4
 801014c:	f000 fc5a 	bl	8010a04 <__multadd>
 8010150:	4682      	mov	sl, r0
 8010152:	e7ea      	b.n	801012a <_dtoa_r+0xb3a>
 8010154:	9b01      	ldr	r3, [sp, #4]
 8010156:	2b00      	cmp	r3, #0
 8010158:	bfc8      	it	gt
 801015a:	461d      	movgt	r5, r3
 801015c:	9b00      	ldr	r3, [sp, #0]
 801015e:	bfd8      	it	le
 8010160:	2501      	movle	r5, #1
 8010162:	441d      	add	r5, r3
 8010164:	f04f 0800 	mov.w	r8, #0
 8010168:	4651      	mov	r1, sl
 801016a:	2201      	movs	r2, #1
 801016c:	4620      	mov	r0, r4
 801016e:	f000 fe41 	bl	8010df4 <__lshift>
 8010172:	4631      	mov	r1, r6
 8010174:	4682      	mov	sl, r0
 8010176:	f000 fea9 	bl	8010ecc <__mcmp>
 801017a:	2800      	cmp	r0, #0
 801017c:	dc96      	bgt.n	80100ac <_dtoa_r+0xabc>
 801017e:	d102      	bne.n	8010186 <_dtoa_r+0xb96>
 8010180:	f019 0f01 	tst.w	r9, #1
 8010184:	d192      	bne.n	80100ac <_dtoa_r+0xabc>
 8010186:	462b      	mov	r3, r5
 8010188:	461d      	mov	r5, r3
 801018a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801018e:	2a30      	cmp	r2, #48	; 0x30
 8010190:	d0fa      	beq.n	8010188 <_dtoa_r+0xb98>
 8010192:	e6dd      	b.n	800ff50 <_dtoa_r+0x960>
 8010194:	9a00      	ldr	r2, [sp, #0]
 8010196:	429a      	cmp	r2, r3
 8010198:	d189      	bne.n	80100ae <_dtoa_r+0xabe>
 801019a:	f10b 0b01 	add.w	fp, fp, #1
 801019e:	2331      	movs	r3, #49	; 0x31
 80101a0:	e796      	b.n	80100d0 <_dtoa_r+0xae0>
 80101a2:	4b0a      	ldr	r3, [pc, #40]	; (80101cc <_dtoa_r+0xbdc>)
 80101a4:	f7ff ba99 	b.w	800f6da <_dtoa_r+0xea>
 80101a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	f47f aa6d 	bne.w	800f68a <_dtoa_r+0x9a>
 80101b0:	4b07      	ldr	r3, [pc, #28]	; (80101d0 <_dtoa_r+0xbe0>)
 80101b2:	f7ff ba92 	b.w	800f6da <_dtoa_r+0xea>
 80101b6:	9b01      	ldr	r3, [sp, #4]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	dcb5      	bgt.n	8010128 <_dtoa_r+0xb38>
 80101bc:	9b07      	ldr	r3, [sp, #28]
 80101be:	2b02      	cmp	r3, #2
 80101c0:	f73f aeb1 	bgt.w	800ff26 <_dtoa_r+0x936>
 80101c4:	e7b0      	b.n	8010128 <_dtoa_r+0xb38>
 80101c6:	bf00      	nop
 80101c8:	08012005 	.word	0x08012005
 80101cc:	08011f58 	.word	0x08011f58
 80101d0:	08011f89 	.word	0x08011f89

080101d4 <_free_r>:
 80101d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80101d6:	2900      	cmp	r1, #0
 80101d8:	d044      	beq.n	8010264 <_free_r+0x90>
 80101da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101de:	9001      	str	r0, [sp, #4]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	f1a1 0404 	sub.w	r4, r1, #4
 80101e6:	bfb8      	it	lt
 80101e8:	18e4      	addlt	r4, r4, r3
 80101ea:	f7fd fab1 	bl	800d750 <__malloc_lock>
 80101ee:	4a1e      	ldr	r2, [pc, #120]	; (8010268 <_free_r+0x94>)
 80101f0:	9801      	ldr	r0, [sp, #4]
 80101f2:	6813      	ldr	r3, [r2, #0]
 80101f4:	b933      	cbnz	r3, 8010204 <_free_r+0x30>
 80101f6:	6063      	str	r3, [r4, #4]
 80101f8:	6014      	str	r4, [r2, #0]
 80101fa:	b003      	add	sp, #12
 80101fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010200:	f7fd baac 	b.w	800d75c <__malloc_unlock>
 8010204:	42a3      	cmp	r3, r4
 8010206:	d908      	bls.n	801021a <_free_r+0x46>
 8010208:	6825      	ldr	r5, [r4, #0]
 801020a:	1961      	adds	r1, r4, r5
 801020c:	428b      	cmp	r3, r1
 801020e:	bf01      	itttt	eq
 8010210:	6819      	ldreq	r1, [r3, #0]
 8010212:	685b      	ldreq	r3, [r3, #4]
 8010214:	1949      	addeq	r1, r1, r5
 8010216:	6021      	streq	r1, [r4, #0]
 8010218:	e7ed      	b.n	80101f6 <_free_r+0x22>
 801021a:	461a      	mov	r2, r3
 801021c:	685b      	ldr	r3, [r3, #4]
 801021e:	b10b      	cbz	r3, 8010224 <_free_r+0x50>
 8010220:	42a3      	cmp	r3, r4
 8010222:	d9fa      	bls.n	801021a <_free_r+0x46>
 8010224:	6811      	ldr	r1, [r2, #0]
 8010226:	1855      	adds	r5, r2, r1
 8010228:	42a5      	cmp	r5, r4
 801022a:	d10b      	bne.n	8010244 <_free_r+0x70>
 801022c:	6824      	ldr	r4, [r4, #0]
 801022e:	4421      	add	r1, r4
 8010230:	1854      	adds	r4, r2, r1
 8010232:	42a3      	cmp	r3, r4
 8010234:	6011      	str	r1, [r2, #0]
 8010236:	d1e0      	bne.n	80101fa <_free_r+0x26>
 8010238:	681c      	ldr	r4, [r3, #0]
 801023a:	685b      	ldr	r3, [r3, #4]
 801023c:	6053      	str	r3, [r2, #4]
 801023e:	440c      	add	r4, r1
 8010240:	6014      	str	r4, [r2, #0]
 8010242:	e7da      	b.n	80101fa <_free_r+0x26>
 8010244:	d902      	bls.n	801024c <_free_r+0x78>
 8010246:	230c      	movs	r3, #12
 8010248:	6003      	str	r3, [r0, #0]
 801024a:	e7d6      	b.n	80101fa <_free_r+0x26>
 801024c:	6825      	ldr	r5, [r4, #0]
 801024e:	1961      	adds	r1, r4, r5
 8010250:	428b      	cmp	r3, r1
 8010252:	bf04      	itt	eq
 8010254:	6819      	ldreq	r1, [r3, #0]
 8010256:	685b      	ldreq	r3, [r3, #4]
 8010258:	6063      	str	r3, [r4, #4]
 801025a:	bf04      	itt	eq
 801025c:	1949      	addeq	r1, r1, r5
 801025e:	6021      	streq	r1, [r4, #0]
 8010260:	6054      	str	r4, [r2, #4]
 8010262:	e7ca      	b.n	80101fa <_free_r+0x26>
 8010264:	b003      	add	sp, #12
 8010266:	bd30      	pop	{r4, r5, pc}
 8010268:	20001084 	.word	0x20001084

0801026c <rshift>:
 801026c:	6903      	ldr	r3, [r0, #16]
 801026e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010272:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010276:	ea4f 1261 	mov.w	r2, r1, asr #5
 801027a:	f100 0414 	add.w	r4, r0, #20
 801027e:	dd45      	ble.n	801030c <rshift+0xa0>
 8010280:	f011 011f 	ands.w	r1, r1, #31
 8010284:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010288:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801028c:	d10c      	bne.n	80102a8 <rshift+0x3c>
 801028e:	f100 0710 	add.w	r7, r0, #16
 8010292:	4629      	mov	r1, r5
 8010294:	42b1      	cmp	r1, r6
 8010296:	d334      	bcc.n	8010302 <rshift+0x96>
 8010298:	1a9b      	subs	r3, r3, r2
 801029a:	009b      	lsls	r3, r3, #2
 801029c:	1eea      	subs	r2, r5, #3
 801029e:	4296      	cmp	r6, r2
 80102a0:	bf38      	it	cc
 80102a2:	2300      	movcc	r3, #0
 80102a4:	4423      	add	r3, r4
 80102a6:	e015      	b.n	80102d4 <rshift+0x68>
 80102a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80102ac:	f1c1 0820 	rsb	r8, r1, #32
 80102b0:	40cf      	lsrs	r7, r1
 80102b2:	f105 0e04 	add.w	lr, r5, #4
 80102b6:	46a1      	mov	r9, r4
 80102b8:	4576      	cmp	r6, lr
 80102ba:	46f4      	mov	ip, lr
 80102bc:	d815      	bhi.n	80102ea <rshift+0x7e>
 80102be:	1a9a      	subs	r2, r3, r2
 80102c0:	0092      	lsls	r2, r2, #2
 80102c2:	3a04      	subs	r2, #4
 80102c4:	3501      	adds	r5, #1
 80102c6:	42ae      	cmp	r6, r5
 80102c8:	bf38      	it	cc
 80102ca:	2200      	movcc	r2, #0
 80102cc:	18a3      	adds	r3, r4, r2
 80102ce:	50a7      	str	r7, [r4, r2]
 80102d0:	b107      	cbz	r7, 80102d4 <rshift+0x68>
 80102d2:	3304      	adds	r3, #4
 80102d4:	1b1a      	subs	r2, r3, r4
 80102d6:	42a3      	cmp	r3, r4
 80102d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80102dc:	bf08      	it	eq
 80102de:	2300      	moveq	r3, #0
 80102e0:	6102      	str	r2, [r0, #16]
 80102e2:	bf08      	it	eq
 80102e4:	6143      	streq	r3, [r0, #20]
 80102e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102ea:	f8dc c000 	ldr.w	ip, [ip]
 80102ee:	fa0c fc08 	lsl.w	ip, ip, r8
 80102f2:	ea4c 0707 	orr.w	r7, ip, r7
 80102f6:	f849 7b04 	str.w	r7, [r9], #4
 80102fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80102fe:	40cf      	lsrs	r7, r1
 8010300:	e7da      	b.n	80102b8 <rshift+0x4c>
 8010302:	f851 cb04 	ldr.w	ip, [r1], #4
 8010306:	f847 cf04 	str.w	ip, [r7, #4]!
 801030a:	e7c3      	b.n	8010294 <rshift+0x28>
 801030c:	4623      	mov	r3, r4
 801030e:	e7e1      	b.n	80102d4 <rshift+0x68>

08010310 <__hexdig_fun>:
 8010310:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010314:	2b09      	cmp	r3, #9
 8010316:	d802      	bhi.n	801031e <__hexdig_fun+0xe>
 8010318:	3820      	subs	r0, #32
 801031a:	b2c0      	uxtb	r0, r0
 801031c:	4770      	bx	lr
 801031e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010322:	2b05      	cmp	r3, #5
 8010324:	d801      	bhi.n	801032a <__hexdig_fun+0x1a>
 8010326:	3847      	subs	r0, #71	; 0x47
 8010328:	e7f7      	b.n	801031a <__hexdig_fun+0xa>
 801032a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801032e:	2b05      	cmp	r3, #5
 8010330:	d801      	bhi.n	8010336 <__hexdig_fun+0x26>
 8010332:	3827      	subs	r0, #39	; 0x27
 8010334:	e7f1      	b.n	801031a <__hexdig_fun+0xa>
 8010336:	2000      	movs	r0, #0
 8010338:	4770      	bx	lr
	...

0801033c <__gethex>:
 801033c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010340:	4617      	mov	r7, r2
 8010342:	680a      	ldr	r2, [r1, #0]
 8010344:	b085      	sub	sp, #20
 8010346:	f102 0b02 	add.w	fp, r2, #2
 801034a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801034e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010352:	4681      	mov	r9, r0
 8010354:	468a      	mov	sl, r1
 8010356:	9302      	str	r3, [sp, #8]
 8010358:	32fe      	adds	r2, #254	; 0xfe
 801035a:	eb02 030b 	add.w	r3, r2, fp
 801035e:	46d8      	mov	r8, fp
 8010360:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8010364:	9301      	str	r3, [sp, #4]
 8010366:	2830      	cmp	r0, #48	; 0x30
 8010368:	d0f7      	beq.n	801035a <__gethex+0x1e>
 801036a:	f7ff ffd1 	bl	8010310 <__hexdig_fun>
 801036e:	4604      	mov	r4, r0
 8010370:	2800      	cmp	r0, #0
 8010372:	d138      	bne.n	80103e6 <__gethex+0xaa>
 8010374:	49a7      	ldr	r1, [pc, #668]	; (8010614 <__gethex+0x2d8>)
 8010376:	2201      	movs	r2, #1
 8010378:	4640      	mov	r0, r8
 801037a:	f7fe ffb6 	bl	800f2ea <strncmp>
 801037e:	4606      	mov	r6, r0
 8010380:	2800      	cmp	r0, #0
 8010382:	d169      	bne.n	8010458 <__gethex+0x11c>
 8010384:	f898 0001 	ldrb.w	r0, [r8, #1]
 8010388:	465d      	mov	r5, fp
 801038a:	f7ff ffc1 	bl	8010310 <__hexdig_fun>
 801038e:	2800      	cmp	r0, #0
 8010390:	d064      	beq.n	801045c <__gethex+0x120>
 8010392:	465a      	mov	r2, fp
 8010394:	7810      	ldrb	r0, [r2, #0]
 8010396:	2830      	cmp	r0, #48	; 0x30
 8010398:	4690      	mov	r8, r2
 801039a:	f102 0201 	add.w	r2, r2, #1
 801039e:	d0f9      	beq.n	8010394 <__gethex+0x58>
 80103a0:	f7ff ffb6 	bl	8010310 <__hexdig_fun>
 80103a4:	2301      	movs	r3, #1
 80103a6:	fab0 f480 	clz	r4, r0
 80103aa:	0964      	lsrs	r4, r4, #5
 80103ac:	465e      	mov	r6, fp
 80103ae:	9301      	str	r3, [sp, #4]
 80103b0:	4642      	mov	r2, r8
 80103b2:	4615      	mov	r5, r2
 80103b4:	3201      	adds	r2, #1
 80103b6:	7828      	ldrb	r0, [r5, #0]
 80103b8:	f7ff ffaa 	bl	8010310 <__hexdig_fun>
 80103bc:	2800      	cmp	r0, #0
 80103be:	d1f8      	bne.n	80103b2 <__gethex+0x76>
 80103c0:	4994      	ldr	r1, [pc, #592]	; (8010614 <__gethex+0x2d8>)
 80103c2:	2201      	movs	r2, #1
 80103c4:	4628      	mov	r0, r5
 80103c6:	f7fe ff90 	bl	800f2ea <strncmp>
 80103ca:	b978      	cbnz	r0, 80103ec <__gethex+0xb0>
 80103cc:	b946      	cbnz	r6, 80103e0 <__gethex+0xa4>
 80103ce:	1c6e      	adds	r6, r5, #1
 80103d0:	4632      	mov	r2, r6
 80103d2:	4615      	mov	r5, r2
 80103d4:	3201      	adds	r2, #1
 80103d6:	7828      	ldrb	r0, [r5, #0]
 80103d8:	f7ff ff9a 	bl	8010310 <__hexdig_fun>
 80103dc:	2800      	cmp	r0, #0
 80103de:	d1f8      	bne.n	80103d2 <__gethex+0x96>
 80103e0:	1b73      	subs	r3, r6, r5
 80103e2:	009e      	lsls	r6, r3, #2
 80103e4:	e004      	b.n	80103f0 <__gethex+0xb4>
 80103e6:	2400      	movs	r4, #0
 80103e8:	4626      	mov	r6, r4
 80103ea:	e7e1      	b.n	80103b0 <__gethex+0x74>
 80103ec:	2e00      	cmp	r6, #0
 80103ee:	d1f7      	bne.n	80103e0 <__gethex+0xa4>
 80103f0:	782b      	ldrb	r3, [r5, #0]
 80103f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80103f6:	2b50      	cmp	r3, #80	; 0x50
 80103f8:	d13d      	bne.n	8010476 <__gethex+0x13a>
 80103fa:	786b      	ldrb	r3, [r5, #1]
 80103fc:	2b2b      	cmp	r3, #43	; 0x2b
 80103fe:	d02f      	beq.n	8010460 <__gethex+0x124>
 8010400:	2b2d      	cmp	r3, #45	; 0x2d
 8010402:	d031      	beq.n	8010468 <__gethex+0x12c>
 8010404:	1c69      	adds	r1, r5, #1
 8010406:	f04f 0b00 	mov.w	fp, #0
 801040a:	7808      	ldrb	r0, [r1, #0]
 801040c:	f7ff ff80 	bl	8010310 <__hexdig_fun>
 8010410:	1e42      	subs	r2, r0, #1
 8010412:	b2d2      	uxtb	r2, r2
 8010414:	2a18      	cmp	r2, #24
 8010416:	d82e      	bhi.n	8010476 <__gethex+0x13a>
 8010418:	f1a0 0210 	sub.w	r2, r0, #16
 801041c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010420:	f7ff ff76 	bl	8010310 <__hexdig_fun>
 8010424:	f100 3cff 	add.w	ip, r0, #4294967295
 8010428:	fa5f fc8c 	uxtb.w	ip, ip
 801042c:	f1bc 0f18 	cmp.w	ip, #24
 8010430:	d91d      	bls.n	801046e <__gethex+0x132>
 8010432:	f1bb 0f00 	cmp.w	fp, #0
 8010436:	d000      	beq.n	801043a <__gethex+0xfe>
 8010438:	4252      	negs	r2, r2
 801043a:	4416      	add	r6, r2
 801043c:	f8ca 1000 	str.w	r1, [sl]
 8010440:	b1dc      	cbz	r4, 801047a <__gethex+0x13e>
 8010442:	9b01      	ldr	r3, [sp, #4]
 8010444:	2b00      	cmp	r3, #0
 8010446:	bf14      	ite	ne
 8010448:	f04f 0800 	movne.w	r8, #0
 801044c:	f04f 0806 	moveq.w	r8, #6
 8010450:	4640      	mov	r0, r8
 8010452:	b005      	add	sp, #20
 8010454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010458:	4645      	mov	r5, r8
 801045a:	4626      	mov	r6, r4
 801045c:	2401      	movs	r4, #1
 801045e:	e7c7      	b.n	80103f0 <__gethex+0xb4>
 8010460:	f04f 0b00 	mov.w	fp, #0
 8010464:	1ca9      	adds	r1, r5, #2
 8010466:	e7d0      	b.n	801040a <__gethex+0xce>
 8010468:	f04f 0b01 	mov.w	fp, #1
 801046c:	e7fa      	b.n	8010464 <__gethex+0x128>
 801046e:	230a      	movs	r3, #10
 8010470:	fb03 0002 	mla	r0, r3, r2, r0
 8010474:	e7d0      	b.n	8010418 <__gethex+0xdc>
 8010476:	4629      	mov	r1, r5
 8010478:	e7e0      	b.n	801043c <__gethex+0x100>
 801047a:	eba5 0308 	sub.w	r3, r5, r8
 801047e:	3b01      	subs	r3, #1
 8010480:	4621      	mov	r1, r4
 8010482:	2b07      	cmp	r3, #7
 8010484:	dc0a      	bgt.n	801049c <__gethex+0x160>
 8010486:	4648      	mov	r0, r9
 8010488:	f000 fa5a 	bl	8010940 <_Balloc>
 801048c:	4604      	mov	r4, r0
 801048e:	b940      	cbnz	r0, 80104a2 <__gethex+0x166>
 8010490:	4b61      	ldr	r3, [pc, #388]	; (8010618 <__gethex+0x2dc>)
 8010492:	4602      	mov	r2, r0
 8010494:	21e4      	movs	r1, #228	; 0xe4
 8010496:	4861      	ldr	r0, [pc, #388]	; (801061c <__gethex+0x2e0>)
 8010498:	f001 f9be 	bl	8011818 <__assert_func>
 801049c:	3101      	adds	r1, #1
 801049e:	105b      	asrs	r3, r3, #1
 80104a0:	e7ef      	b.n	8010482 <__gethex+0x146>
 80104a2:	f100 0a14 	add.w	sl, r0, #20
 80104a6:	2300      	movs	r3, #0
 80104a8:	495a      	ldr	r1, [pc, #360]	; (8010614 <__gethex+0x2d8>)
 80104aa:	f8cd a004 	str.w	sl, [sp, #4]
 80104ae:	469b      	mov	fp, r3
 80104b0:	45a8      	cmp	r8, r5
 80104b2:	d342      	bcc.n	801053a <__gethex+0x1fe>
 80104b4:	9801      	ldr	r0, [sp, #4]
 80104b6:	f840 bb04 	str.w	fp, [r0], #4
 80104ba:	eba0 000a 	sub.w	r0, r0, sl
 80104be:	1080      	asrs	r0, r0, #2
 80104c0:	6120      	str	r0, [r4, #16]
 80104c2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80104c6:	4658      	mov	r0, fp
 80104c8:	f000 fb2c 	bl	8010b24 <__hi0bits>
 80104cc:	683d      	ldr	r5, [r7, #0]
 80104ce:	eba8 0000 	sub.w	r0, r8, r0
 80104d2:	42a8      	cmp	r0, r5
 80104d4:	dd59      	ble.n	801058a <__gethex+0x24e>
 80104d6:	eba0 0805 	sub.w	r8, r0, r5
 80104da:	4641      	mov	r1, r8
 80104dc:	4620      	mov	r0, r4
 80104de:	f000 febb 	bl	8011258 <__any_on>
 80104e2:	4683      	mov	fp, r0
 80104e4:	b1b8      	cbz	r0, 8010516 <__gethex+0x1da>
 80104e6:	f108 33ff 	add.w	r3, r8, #4294967295
 80104ea:	1159      	asrs	r1, r3, #5
 80104ec:	f003 021f 	and.w	r2, r3, #31
 80104f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80104f4:	f04f 0b01 	mov.w	fp, #1
 80104f8:	fa0b f202 	lsl.w	r2, fp, r2
 80104fc:	420a      	tst	r2, r1
 80104fe:	d00a      	beq.n	8010516 <__gethex+0x1da>
 8010500:	455b      	cmp	r3, fp
 8010502:	dd06      	ble.n	8010512 <__gethex+0x1d6>
 8010504:	f1a8 0102 	sub.w	r1, r8, #2
 8010508:	4620      	mov	r0, r4
 801050a:	f000 fea5 	bl	8011258 <__any_on>
 801050e:	2800      	cmp	r0, #0
 8010510:	d138      	bne.n	8010584 <__gethex+0x248>
 8010512:	f04f 0b02 	mov.w	fp, #2
 8010516:	4641      	mov	r1, r8
 8010518:	4620      	mov	r0, r4
 801051a:	f7ff fea7 	bl	801026c <rshift>
 801051e:	4446      	add	r6, r8
 8010520:	68bb      	ldr	r3, [r7, #8]
 8010522:	42b3      	cmp	r3, r6
 8010524:	da41      	bge.n	80105aa <__gethex+0x26e>
 8010526:	4621      	mov	r1, r4
 8010528:	4648      	mov	r0, r9
 801052a:	f000 fa49 	bl	80109c0 <_Bfree>
 801052e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010530:	2300      	movs	r3, #0
 8010532:	6013      	str	r3, [r2, #0]
 8010534:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8010538:	e78a      	b.n	8010450 <__gethex+0x114>
 801053a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801053e:	2a2e      	cmp	r2, #46	; 0x2e
 8010540:	d014      	beq.n	801056c <__gethex+0x230>
 8010542:	2b20      	cmp	r3, #32
 8010544:	d106      	bne.n	8010554 <__gethex+0x218>
 8010546:	9b01      	ldr	r3, [sp, #4]
 8010548:	f843 bb04 	str.w	fp, [r3], #4
 801054c:	f04f 0b00 	mov.w	fp, #0
 8010550:	9301      	str	r3, [sp, #4]
 8010552:	465b      	mov	r3, fp
 8010554:	7828      	ldrb	r0, [r5, #0]
 8010556:	9303      	str	r3, [sp, #12]
 8010558:	f7ff feda 	bl	8010310 <__hexdig_fun>
 801055c:	9b03      	ldr	r3, [sp, #12]
 801055e:	f000 000f 	and.w	r0, r0, #15
 8010562:	4098      	lsls	r0, r3
 8010564:	ea4b 0b00 	orr.w	fp, fp, r0
 8010568:	3304      	adds	r3, #4
 801056a:	e7a1      	b.n	80104b0 <__gethex+0x174>
 801056c:	45a8      	cmp	r8, r5
 801056e:	d8e8      	bhi.n	8010542 <__gethex+0x206>
 8010570:	2201      	movs	r2, #1
 8010572:	4628      	mov	r0, r5
 8010574:	9303      	str	r3, [sp, #12]
 8010576:	f7fe feb8 	bl	800f2ea <strncmp>
 801057a:	4926      	ldr	r1, [pc, #152]	; (8010614 <__gethex+0x2d8>)
 801057c:	9b03      	ldr	r3, [sp, #12]
 801057e:	2800      	cmp	r0, #0
 8010580:	d1df      	bne.n	8010542 <__gethex+0x206>
 8010582:	e795      	b.n	80104b0 <__gethex+0x174>
 8010584:	f04f 0b03 	mov.w	fp, #3
 8010588:	e7c5      	b.n	8010516 <__gethex+0x1da>
 801058a:	da0b      	bge.n	80105a4 <__gethex+0x268>
 801058c:	eba5 0800 	sub.w	r8, r5, r0
 8010590:	4621      	mov	r1, r4
 8010592:	4642      	mov	r2, r8
 8010594:	4648      	mov	r0, r9
 8010596:	f000 fc2d 	bl	8010df4 <__lshift>
 801059a:	eba6 0608 	sub.w	r6, r6, r8
 801059e:	4604      	mov	r4, r0
 80105a0:	f100 0a14 	add.w	sl, r0, #20
 80105a4:	f04f 0b00 	mov.w	fp, #0
 80105a8:	e7ba      	b.n	8010520 <__gethex+0x1e4>
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	42b3      	cmp	r3, r6
 80105ae:	dd73      	ble.n	8010698 <__gethex+0x35c>
 80105b0:	1b9e      	subs	r6, r3, r6
 80105b2:	42b5      	cmp	r5, r6
 80105b4:	dc34      	bgt.n	8010620 <__gethex+0x2e4>
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	2b02      	cmp	r3, #2
 80105ba:	d023      	beq.n	8010604 <__gethex+0x2c8>
 80105bc:	2b03      	cmp	r3, #3
 80105be:	d025      	beq.n	801060c <__gethex+0x2d0>
 80105c0:	2b01      	cmp	r3, #1
 80105c2:	d115      	bne.n	80105f0 <__gethex+0x2b4>
 80105c4:	42b5      	cmp	r5, r6
 80105c6:	d113      	bne.n	80105f0 <__gethex+0x2b4>
 80105c8:	2d01      	cmp	r5, #1
 80105ca:	d10b      	bne.n	80105e4 <__gethex+0x2a8>
 80105cc:	9a02      	ldr	r2, [sp, #8]
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	6013      	str	r3, [r2, #0]
 80105d2:	2301      	movs	r3, #1
 80105d4:	6123      	str	r3, [r4, #16]
 80105d6:	f8ca 3000 	str.w	r3, [sl]
 80105da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80105dc:	f04f 0862 	mov.w	r8, #98	; 0x62
 80105e0:	601c      	str	r4, [r3, #0]
 80105e2:	e735      	b.n	8010450 <__gethex+0x114>
 80105e4:	1e69      	subs	r1, r5, #1
 80105e6:	4620      	mov	r0, r4
 80105e8:	f000 fe36 	bl	8011258 <__any_on>
 80105ec:	2800      	cmp	r0, #0
 80105ee:	d1ed      	bne.n	80105cc <__gethex+0x290>
 80105f0:	4621      	mov	r1, r4
 80105f2:	4648      	mov	r0, r9
 80105f4:	f000 f9e4 	bl	80109c0 <_Bfree>
 80105f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80105fa:	2300      	movs	r3, #0
 80105fc:	6013      	str	r3, [r2, #0]
 80105fe:	f04f 0850 	mov.w	r8, #80	; 0x50
 8010602:	e725      	b.n	8010450 <__gethex+0x114>
 8010604:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010606:	2b00      	cmp	r3, #0
 8010608:	d1f2      	bne.n	80105f0 <__gethex+0x2b4>
 801060a:	e7df      	b.n	80105cc <__gethex+0x290>
 801060c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801060e:	2b00      	cmp	r3, #0
 8010610:	d1dc      	bne.n	80105cc <__gethex+0x290>
 8010612:	e7ed      	b.n	80105f0 <__gethex+0x2b4>
 8010614:	08011ef0 	.word	0x08011ef0
 8010618:	08012005 	.word	0x08012005
 801061c:	08012016 	.word	0x08012016
 8010620:	f106 38ff 	add.w	r8, r6, #4294967295
 8010624:	f1bb 0f00 	cmp.w	fp, #0
 8010628:	d133      	bne.n	8010692 <__gethex+0x356>
 801062a:	f1b8 0f00 	cmp.w	r8, #0
 801062e:	d004      	beq.n	801063a <__gethex+0x2fe>
 8010630:	4641      	mov	r1, r8
 8010632:	4620      	mov	r0, r4
 8010634:	f000 fe10 	bl	8011258 <__any_on>
 8010638:	4683      	mov	fp, r0
 801063a:	ea4f 1268 	mov.w	r2, r8, asr #5
 801063e:	2301      	movs	r3, #1
 8010640:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010644:	f008 081f 	and.w	r8, r8, #31
 8010648:	fa03 f308 	lsl.w	r3, r3, r8
 801064c:	4213      	tst	r3, r2
 801064e:	4631      	mov	r1, r6
 8010650:	4620      	mov	r0, r4
 8010652:	bf18      	it	ne
 8010654:	f04b 0b02 	orrne.w	fp, fp, #2
 8010658:	1bad      	subs	r5, r5, r6
 801065a:	f7ff fe07 	bl	801026c <rshift>
 801065e:	687e      	ldr	r6, [r7, #4]
 8010660:	f04f 0802 	mov.w	r8, #2
 8010664:	f1bb 0f00 	cmp.w	fp, #0
 8010668:	d04a      	beq.n	8010700 <__gethex+0x3c4>
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	2b02      	cmp	r3, #2
 801066e:	d016      	beq.n	801069e <__gethex+0x362>
 8010670:	2b03      	cmp	r3, #3
 8010672:	d018      	beq.n	80106a6 <__gethex+0x36a>
 8010674:	2b01      	cmp	r3, #1
 8010676:	d109      	bne.n	801068c <__gethex+0x350>
 8010678:	f01b 0f02 	tst.w	fp, #2
 801067c:	d006      	beq.n	801068c <__gethex+0x350>
 801067e:	f8da 3000 	ldr.w	r3, [sl]
 8010682:	ea4b 0b03 	orr.w	fp, fp, r3
 8010686:	f01b 0f01 	tst.w	fp, #1
 801068a:	d10f      	bne.n	80106ac <__gethex+0x370>
 801068c:	f048 0810 	orr.w	r8, r8, #16
 8010690:	e036      	b.n	8010700 <__gethex+0x3c4>
 8010692:	f04f 0b01 	mov.w	fp, #1
 8010696:	e7d0      	b.n	801063a <__gethex+0x2fe>
 8010698:	f04f 0801 	mov.w	r8, #1
 801069c:	e7e2      	b.n	8010664 <__gethex+0x328>
 801069e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80106a0:	f1c3 0301 	rsb	r3, r3, #1
 80106a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80106a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d0ef      	beq.n	801068c <__gethex+0x350>
 80106ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80106b0:	f104 0214 	add.w	r2, r4, #20
 80106b4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80106b8:	9301      	str	r3, [sp, #4]
 80106ba:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80106be:	2300      	movs	r3, #0
 80106c0:	4694      	mov	ip, r2
 80106c2:	f852 1b04 	ldr.w	r1, [r2], #4
 80106c6:	f1b1 3fff 	cmp.w	r1, #4294967295
 80106ca:	d01e      	beq.n	801070a <__gethex+0x3ce>
 80106cc:	3101      	adds	r1, #1
 80106ce:	f8cc 1000 	str.w	r1, [ip]
 80106d2:	f1b8 0f02 	cmp.w	r8, #2
 80106d6:	f104 0214 	add.w	r2, r4, #20
 80106da:	d13d      	bne.n	8010758 <__gethex+0x41c>
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	3b01      	subs	r3, #1
 80106e0:	42ab      	cmp	r3, r5
 80106e2:	d10b      	bne.n	80106fc <__gethex+0x3c0>
 80106e4:	1169      	asrs	r1, r5, #5
 80106e6:	2301      	movs	r3, #1
 80106e8:	f005 051f 	and.w	r5, r5, #31
 80106ec:	fa03 f505 	lsl.w	r5, r3, r5
 80106f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80106f4:	421d      	tst	r5, r3
 80106f6:	bf18      	it	ne
 80106f8:	f04f 0801 	movne.w	r8, #1
 80106fc:	f048 0820 	orr.w	r8, r8, #32
 8010700:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010702:	601c      	str	r4, [r3, #0]
 8010704:	9b02      	ldr	r3, [sp, #8]
 8010706:	601e      	str	r6, [r3, #0]
 8010708:	e6a2      	b.n	8010450 <__gethex+0x114>
 801070a:	4290      	cmp	r0, r2
 801070c:	f842 3c04 	str.w	r3, [r2, #-4]
 8010710:	d8d6      	bhi.n	80106c0 <__gethex+0x384>
 8010712:	68a2      	ldr	r2, [r4, #8]
 8010714:	4593      	cmp	fp, r2
 8010716:	db17      	blt.n	8010748 <__gethex+0x40c>
 8010718:	6861      	ldr	r1, [r4, #4]
 801071a:	4648      	mov	r0, r9
 801071c:	3101      	adds	r1, #1
 801071e:	f000 f90f 	bl	8010940 <_Balloc>
 8010722:	4682      	mov	sl, r0
 8010724:	b918      	cbnz	r0, 801072e <__gethex+0x3f2>
 8010726:	4b1b      	ldr	r3, [pc, #108]	; (8010794 <__gethex+0x458>)
 8010728:	4602      	mov	r2, r0
 801072a:	2184      	movs	r1, #132	; 0x84
 801072c:	e6b3      	b.n	8010496 <__gethex+0x15a>
 801072e:	6922      	ldr	r2, [r4, #16]
 8010730:	3202      	adds	r2, #2
 8010732:	f104 010c 	add.w	r1, r4, #12
 8010736:	0092      	lsls	r2, r2, #2
 8010738:	300c      	adds	r0, #12
 801073a:	f7fe feb2 	bl	800f4a2 <memcpy>
 801073e:	4621      	mov	r1, r4
 8010740:	4648      	mov	r0, r9
 8010742:	f000 f93d 	bl	80109c0 <_Bfree>
 8010746:	4654      	mov	r4, sl
 8010748:	6922      	ldr	r2, [r4, #16]
 801074a:	1c51      	adds	r1, r2, #1
 801074c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010750:	6121      	str	r1, [r4, #16]
 8010752:	2101      	movs	r1, #1
 8010754:	6151      	str	r1, [r2, #20]
 8010756:	e7bc      	b.n	80106d2 <__gethex+0x396>
 8010758:	6921      	ldr	r1, [r4, #16]
 801075a:	4559      	cmp	r1, fp
 801075c:	dd0b      	ble.n	8010776 <__gethex+0x43a>
 801075e:	2101      	movs	r1, #1
 8010760:	4620      	mov	r0, r4
 8010762:	f7ff fd83 	bl	801026c <rshift>
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	3601      	adds	r6, #1
 801076a:	42b3      	cmp	r3, r6
 801076c:	f6ff aedb 	blt.w	8010526 <__gethex+0x1ea>
 8010770:	f04f 0801 	mov.w	r8, #1
 8010774:	e7c2      	b.n	80106fc <__gethex+0x3c0>
 8010776:	f015 051f 	ands.w	r5, r5, #31
 801077a:	d0f9      	beq.n	8010770 <__gethex+0x434>
 801077c:	9b01      	ldr	r3, [sp, #4]
 801077e:	441a      	add	r2, r3
 8010780:	f1c5 0520 	rsb	r5, r5, #32
 8010784:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8010788:	f000 f9cc 	bl	8010b24 <__hi0bits>
 801078c:	42a8      	cmp	r0, r5
 801078e:	dbe6      	blt.n	801075e <__gethex+0x422>
 8010790:	e7ee      	b.n	8010770 <__gethex+0x434>
 8010792:	bf00      	nop
 8010794:	08012005 	.word	0x08012005

08010798 <L_shift>:
 8010798:	f1c2 0208 	rsb	r2, r2, #8
 801079c:	0092      	lsls	r2, r2, #2
 801079e:	b570      	push	{r4, r5, r6, lr}
 80107a0:	f1c2 0620 	rsb	r6, r2, #32
 80107a4:	6843      	ldr	r3, [r0, #4]
 80107a6:	6804      	ldr	r4, [r0, #0]
 80107a8:	fa03 f506 	lsl.w	r5, r3, r6
 80107ac:	432c      	orrs	r4, r5
 80107ae:	40d3      	lsrs	r3, r2
 80107b0:	6004      	str	r4, [r0, #0]
 80107b2:	f840 3f04 	str.w	r3, [r0, #4]!
 80107b6:	4288      	cmp	r0, r1
 80107b8:	d3f4      	bcc.n	80107a4 <L_shift+0xc>
 80107ba:	bd70      	pop	{r4, r5, r6, pc}

080107bc <__match>:
 80107bc:	b530      	push	{r4, r5, lr}
 80107be:	6803      	ldr	r3, [r0, #0]
 80107c0:	3301      	adds	r3, #1
 80107c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80107c6:	b914      	cbnz	r4, 80107ce <__match+0x12>
 80107c8:	6003      	str	r3, [r0, #0]
 80107ca:	2001      	movs	r0, #1
 80107cc:	bd30      	pop	{r4, r5, pc}
 80107ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80107d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80107d6:	2d19      	cmp	r5, #25
 80107d8:	bf98      	it	ls
 80107da:	3220      	addls	r2, #32
 80107dc:	42a2      	cmp	r2, r4
 80107de:	d0f0      	beq.n	80107c2 <__match+0x6>
 80107e0:	2000      	movs	r0, #0
 80107e2:	e7f3      	b.n	80107cc <__match+0x10>

080107e4 <__hexnan>:
 80107e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107e8:	680b      	ldr	r3, [r1, #0]
 80107ea:	6801      	ldr	r1, [r0, #0]
 80107ec:	115e      	asrs	r6, r3, #5
 80107ee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80107f2:	f013 031f 	ands.w	r3, r3, #31
 80107f6:	b087      	sub	sp, #28
 80107f8:	bf18      	it	ne
 80107fa:	3604      	addne	r6, #4
 80107fc:	2500      	movs	r5, #0
 80107fe:	1f37      	subs	r7, r6, #4
 8010800:	4682      	mov	sl, r0
 8010802:	4690      	mov	r8, r2
 8010804:	9301      	str	r3, [sp, #4]
 8010806:	f846 5c04 	str.w	r5, [r6, #-4]
 801080a:	46b9      	mov	r9, r7
 801080c:	463c      	mov	r4, r7
 801080e:	9502      	str	r5, [sp, #8]
 8010810:	46ab      	mov	fp, r5
 8010812:	784a      	ldrb	r2, [r1, #1]
 8010814:	1c4b      	adds	r3, r1, #1
 8010816:	9303      	str	r3, [sp, #12]
 8010818:	b342      	cbz	r2, 801086c <__hexnan+0x88>
 801081a:	4610      	mov	r0, r2
 801081c:	9105      	str	r1, [sp, #20]
 801081e:	9204      	str	r2, [sp, #16]
 8010820:	f7ff fd76 	bl	8010310 <__hexdig_fun>
 8010824:	2800      	cmp	r0, #0
 8010826:	d14f      	bne.n	80108c8 <__hexnan+0xe4>
 8010828:	9a04      	ldr	r2, [sp, #16]
 801082a:	9905      	ldr	r1, [sp, #20]
 801082c:	2a20      	cmp	r2, #32
 801082e:	d818      	bhi.n	8010862 <__hexnan+0x7e>
 8010830:	9b02      	ldr	r3, [sp, #8]
 8010832:	459b      	cmp	fp, r3
 8010834:	dd13      	ble.n	801085e <__hexnan+0x7a>
 8010836:	454c      	cmp	r4, r9
 8010838:	d206      	bcs.n	8010848 <__hexnan+0x64>
 801083a:	2d07      	cmp	r5, #7
 801083c:	dc04      	bgt.n	8010848 <__hexnan+0x64>
 801083e:	462a      	mov	r2, r5
 8010840:	4649      	mov	r1, r9
 8010842:	4620      	mov	r0, r4
 8010844:	f7ff ffa8 	bl	8010798 <L_shift>
 8010848:	4544      	cmp	r4, r8
 801084a:	d950      	bls.n	80108ee <__hexnan+0x10a>
 801084c:	2300      	movs	r3, #0
 801084e:	f1a4 0904 	sub.w	r9, r4, #4
 8010852:	f844 3c04 	str.w	r3, [r4, #-4]
 8010856:	f8cd b008 	str.w	fp, [sp, #8]
 801085a:	464c      	mov	r4, r9
 801085c:	461d      	mov	r5, r3
 801085e:	9903      	ldr	r1, [sp, #12]
 8010860:	e7d7      	b.n	8010812 <__hexnan+0x2e>
 8010862:	2a29      	cmp	r2, #41	; 0x29
 8010864:	d155      	bne.n	8010912 <__hexnan+0x12e>
 8010866:	3102      	adds	r1, #2
 8010868:	f8ca 1000 	str.w	r1, [sl]
 801086c:	f1bb 0f00 	cmp.w	fp, #0
 8010870:	d04f      	beq.n	8010912 <__hexnan+0x12e>
 8010872:	454c      	cmp	r4, r9
 8010874:	d206      	bcs.n	8010884 <__hexnan+0xa0>
 8010876:	2d07      	cmp	r5, #7
 8010878:	dc04      	bgt.n	8010884 <__hexnan+0xa0>
 801087a:	462a      	mov	r2, r5
 801087c:	4649      	mov	r1, r9
 801087e:	4620      	mov	r0, r4
 8010880:	f7ff ff8a 	bl	8010798 <L_shift>
 8010884:	4544      	cmp	r4, r8
 8010886:	d934      	bls.n	80108f2 <__hexnan+0x10e>
 8010888:	f1a8 0204 	sub.w	r2, r8, #4
 801088c:	4623      	mov	r3, r4
 801088e:	f853 1b04 	ldr.w	r1, [r3], #4
 8010892:	f842 1f04 	str.w	r1, [r2, #4]!
 8010896:	429f      	cmp	r7, r3
 8010898:	d2f9      	bcs.n	801088e <__hexnan+0xaa>
 801089a:	1b3b      	subs	r3, r7, r4
 801089c:	f023 0303 	bic.w	r3, r3, #3
 80108a0:	3304      	adds	r3, #4
 80108a2:	3e03      	subs	r6, #3
 80108a4:	3401      	adds	r4, #1
 80108a6:	42a6      	cmp	r6, r4
 80108a8:	bf38      	it	cc
 80108aa:	2304      	movcc	r3, #4
 80108ac:	4443      	add	r3, r8
 80108ae:	2200      	movs	r2, #0
 80108b0:	f843 2b04 	str.w	r2, [r3], #4
 80108b4:	429f      	cmp	r7, r3
 80108b6:	d2fb      	bcs.n	80108b0 <__hexnan+0xcc>
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	b91b      	cbnz	r3, 80108c4 <__hexnan+0xe0>
 80108bc:	4547      	cmp	r7, r8
 80108be:	d126      	bne.n	801090e <__hexnan+0x12a>
 80108c0:	2301      	movs	r3, #1
 80108c2:	603b      	str	r3, [r7, #0]
 80108c4:	2005      	movs	r0, #5
 80108c6:	e025      	b.n	8010914 <__hexnan+0x130>
 80108c8:	3501      	adds	r5, #1
 80108ca:	2d08      	cmp	r5, #8
 80108cc:	f10b 0b01 	add.w	fp, fp, #1
 80108d0:	dd06      	ble.n	80108e0 <__hexnan+0xfc>
 80108d2:	4544      	cmp	r4, r8
 80108d4:	d9c3      	bls.n	801085e <__hexnan+0x7a>
 80108d6:	2300      	movs	r3, #0
 80108d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80108dc:	2501      	movs	r5, #1
 80108de:	3c04      	subs	r4, #4
 80108e0:	6822      	ldr	r2, [r4, #0]
 80108e2:	f000 000f 	and.w	r0, r0, #15
 80108e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80108ea:	6020      	str	r0, [r4, #0]
 80108ec:	e7b7      	b.n	801085e <__hexnan+0x7a>
 80108ee:	2508      	movs	r5, #8
 80108f0:	e7b5      	b.n	801085e <__hexnan+0x7a>
 80108f2:	9b01      	ldr	r3, [sp, #4]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d0df      	beq.n	80108b8 <__hexnan+0xd4>
 80108f8:	f1c3 0320 	rsb	r3, r3, #32
 80108fc:	f04f 32ff 	mov.w	r2, #4294967295
 8010900:	40da      	lsrs	r2, r3
 8010902:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010906:	4013      	ands	r3, r2
 8010908:	f846 3c04 	str.w	r3, [r6, #-4]
 801090c:	e7d4      	b.n	80108b8 <__hexnan+0xd4>
 801090e:	3f04      	subs	r7, #4
 8010910:	e7d2      	b.n	80108b8 <__hexnan+0xd4>
 8010912:	2004      	movs	r0, #4
 8010914:	b007      	add	sp, #28
 8010916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801091a <__ascii_mbtowc>:
 801091a:	b082      	sub	sp, #8
 801091c:	b901      	cbnz	r1, 8010920 <__ascii_mbtowc+0x6>
 801091e:	a901      	add	r1, sp, #4
 8010920:	b142      	cbz	r2, 8010934 <__ascii_mbtowc+0x1a>
 8010922:	b14b      	cbz	r3, 8010938 <__ascii_mbtowc+0x1e>
 8010924:	7813      	ldrb	r3, [r2, #0]
 8010926:	600b      	str	r3, [r1, #0]
 8010928:	7812      	ldrb	r2, [r2, #0]
 801092a:	1e10      	subs	r0, r2, #0
 801092c:	bf18      	it	ne
 801092e:	2001      	movne	r0, #1
 8010930:	b002      	add	sp, #8
 8010932:	4770      	bx	lr
 8010934:	4610      	mov	r0, r2
 8010936:	e7fb      	b.n	8010930 <__ascii_mbtowc+0x16>
 8010938:	f06f 0001 	mvn.w	r0, #1
 801093c:	e7f8      	b.n	8010930 <__ascii_mbtowc+0x16>
	...

08010940 <_Balloc>:
 8010940:	b570      	push	{r4, r5, r6, lr}
 8010942:	69c6      	ldr	r6, [r0, #28]
 8010944:	4604      	mov	r4, r0
 8010946:	460d      	mov	r5, r1
 8010948:	b976      	cbnz	r6, 8010968 <_Balloc+0x28>
 801094a:	2010      	movs	r0, #16
 801094c:	f7fc fe50 	bl	800d5f0 <malloc>
 8010950:	4602      	mov	r2, r0
 8010952:	61e0      	str	r0, [r4, #28]
 8010954:	b920      	cbnz	r0, 8010960 <_Balloc+0x20>
 8010956:	4b18      	ldr	r3, [pc, #96]	; (80109b8 <_Balloc+0x78>)
 8010958:	4818      	ldr	r0, [pc, #96]	; (80109bc <_Balloc+0x7c>)
 801095a:	216b      	movs	r1, #107	; 0x6b
 801095c:	f000 ff5c 	bl	8011818 <__assert_func>
 8010960:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010964:	6006      	str	r6, [r0, #0]
 8010966:	60c6      	str	r6, [r0, #12]
 8010968:	69e6      	ldr	r6, [r4, #28]
 801096a:	68f3      	ldr	r3, [r6, #12]
 801096c:	b183      	cbz	r3, 8010990 <_Balloc+0x50>
 801096e:	69e3      	ldr	r3, [r4, #28]
 8010970:	68db      	ldr	r3, [r3, #12]
 8010972:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010976:	b9b8      	cbnz	r0, 80109a8 <_Balloc+0x68>
 8010978:	2101      	movs	r1, #1
 801097a:	fa01 f605 	lsl.w	r6, r1, r5
 801097e:	1d72      	adds	r2, r6, #5
 8010980:	0092      	lsls	r2, r2, #2
 8010982:	4620      	mov	r0, r4
 8010984:	f000 ff66 	bl	8011854 <_calloc_r>
 8010988:	b160      	cbz	r0, 80109a4 <_Balloc+0x64>
 801098a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801098e:	e00e      	b.n	80109ae <_Balloc+0x6e>
 8010990:	2221      	movs	r2, #33	; 0x21
 8010992:	2104      	movs	r1, #4
 8010994:	4620      	mov	r0, r4
 8010996:	f000 ff5d 	bl	8011854 <_calloc_r>
 801099a:	69e3      	ldr	r3, [r4, #28]
 801099c:	60f0      	str	r0, [r6, #12]
 801099e:	68db      	ldr	r3, [r3, #12]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d1e4      	bne.n	801096e <_Balloc+0x2e>
 80109a4:	2000      	movs	r0, #0
 80109a6:	bd70      	pop	{r4, r5, r6, pc}
 80109a8:	6802      	ldr	r2, [r0, #0]
 80109aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80109ae:	2300      	movs	r3, #0
 80109b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80109b4:	e7f7      	b.n	80109a6 <_Balloc+0x66>
 80109b6:	bf00      	nop
 80109b8:	08011f96 	.word	0x08011f96
 80109bc:	08012076 	.word	0x08012076

080109c0 <_Bfree>:
 80109c0:	b570      	push	{r4, r5, r6, lr}
 80109c2:	69c6      	ldr	r6, [r0, #28]
 80109c4:	4605      	mov	r5, r0
 80109c6:	460c      	mov	r4, r1
 80109c8:	b976      	cbnz	r6, 80109e8 <_Bfree+0x28>
 80109ca:	2010      	movs	r0, #16
 80109cc:	f7fc fe10 	bl	800d5f0 <malloc>
 80109d0:	4602      	mov	r2, r0
 80109d2:	61e8      	str	r0, [r5, #28]
 80109d4:	b920      	cbnz	r0, 80109e0 <_Bfree+0x20>
 80109d6:	4b09      	ldr	r3, [pc, #36]	; (80109fc <_Bfree+0x3c>)
 80109d8:	4809      	ldr	r0, [pc, #36]	; (8010a00 <_Bfree+0x40>)
 80109da:	218f      	movs	r1, #143	; 0x8f
 80109dc:	f000 ff1c 	bl	8011818 <__assert_func>
 80109e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80109e4:	6006      	str	r6, [r0, #0]
 80109e6:	60c6      	str	r6, [r0, #12]
 80109e8:	b13c      	cbz	r4, 80109fa <_Bfree+0x3a>
 80109ea:	69eb      	ldr	r3, [r5, #28]
 80109ec:	6862      	ldr	r2, [r4, #4]
 80109ee:	68db      	ldr	r3, [r3, #12]
 80109f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80109f4:	6021      	str	r1, [r4, #0]
 80109f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80109fa:	bd70      	pop	{r4, r5, r6, pc}
 80109fc:	08011f96 	.word	0x08011f96
 8010a00:	08012076 	.word	0x08012076

08010a04 <__multadd>:
 8010a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a08:	690d      	ldr	r5, [r1, #16]
 8010a0a:	4607      	mov	r7, r0
 8010a0c:	460c      	mov	r4, r1
 8010a0e:	461e      	mov	r6, r3
 8010a10:	f101 0c14 	add.w	ip, r1, #20
 8010a14:	2000      	movs	r0, #0
 8010a16:	f8dc 3000 	ldr.w	r3, [ip]
 8010a1a:	b299      	uxth	r1, r3
 8010a1c:	fb02 6101 	mla	r1, r2, r1, r6
 8010a20:	0c1e      	lsrs	r6, r3, #16
 8010a22:	0c0b      	lsrs	r3, r1, #16
 8010a24:	fb02 3306 	mla	r3, r2, r6, r3
 8010a28:	b289      	uxth	r1, r1
 8010a2a:	3001      	adds	r0, #1
 8010a2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010a30:	4285      	cmp	r5, r0
 8010a32:	f84c 1b04 	str.w	r1, [ip], #4
 8010a36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010a3a:	dcec      	bgt.n	8010a16 <__multadd+0x12>
 8010a3c:	b30e      	cbz	r6, 8010a82 <__multadd+0x7e>
 8010a3e:	68a3      	ldr	r3, [r4, #8]
 8010a40:	42ab      	cmp	r3, r5
 8010a42:	dc19      	bgt.n	8010a78 <__multadd+0x74>
 8010a44:	6861      	ldr	r1, [r4, #4]
 8010a46:	4638      	mov	r0, r7
 8010a48:	3101      	adds	r1, #1
 8010a4a:	f7ff ff79 	bl	8010940 <_Balloc>
 8010a4e:	4680      	mov	r8, r0
 8010a50:	b928      	cbnz	r0, 8010a5e <__multadd+0x5a>
 8010a52:	4602      	mov	r2, r0
 8010a54:	4b0c      	ldr	r3, [pc, #48]	; (8010a88 <__multadd+0x84>)
 8010a56:	480d      	ldr	r0, [pc, #52]	; (8010a8c <__multadd+0x88>)
 8010a58:	21ba      	movs	r1, #186	; 0xba
 8010a5a:	f000 fedd 	bl	8011818 <__assert_func>
 8010a5e:	6922      	ldr	r2, [r4, #16]
 8010a60:	3202      	adds	r2, #2
 8010a62:	f104 010c 	add.w	r1, r4, #12
 8010a66:	0092      	lsls	r2, r2, #2
 8010a68:	300c      	adds	r0, #12
 8010a6a:	f7fe fd1a 	bl	800f4a2 <memcpy>
 8010a6e:	4621      	mov	r1, r4
 8010a70:	4638      	mov	r0, r7
 8010a72:	f7ff ffa5 	bl	80109c0 <_Bfree>
 8010a76:	4644      	mov	r4, r8
 8010a78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010a7c:	3501      	adds	r5, #1
 8010a7e:	615e      	str	r6, [r3, #20]
 8010a80:	6125      	str	r5, [r4, #16]
 8010a82:	4620      	mov	r0, r4
 8010a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a88:	08012005 	.word	0x08012005
 8010a8c:	08012076 	.word	0x08012076

08010a90 <__s2b>:
 8010a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a94:	460c      	mov	r4, r1
 8010a96:	4615      	mov	r5, r2
 8010a98:	461f      	mov	r7, r3
 8010a9a:	2209      	movs	r2, #9
 8010a9c:	3308      	adds	r3, #8
 8010a9e:	4606      	mov	r6, r0
 8010aa0:	fb93 f3f2 	sdiv	r3, r3, r2
 8010aa4:	2100      	movs	r1, #0
 8010aa6:	2201      	movs	r2, #1
 8010aa8:	429a      	cmp	r2, r3
 8010aaa:	db09      	blt.n	8010ac0 <__s2b+0x30>
 8010aac:	4630      	mov	r0, r6
 8010aae:	f7ff ff47 	bl	8010940 <_Balloc>
 8010ab2:	b940      	cbnz	r0, 8010ac6 <__s2b+0x36>
 8010ab4:	4602      	mov	r2, r0
 8010ab6:	4b19      	ldr	r3, [pc, #100]	; (8010b1c <__s2b+0x8c>)
 8010ab8:	4819      	ldr	r0, [pc, #100]	; (8010b20 <__s2b+0x90>)
 8010aba:	21d3      	movs	r1, #211	; 0xd3
 8010abc:	f000 feac 	bl	8011818 <__assert_func>
 8010ac0:	0052      	lsls	r2, r2, #1
 8010ac2:	3101      	adds	r1, #1
 8010ac4:	e7f0      	b.n	8010aa8 <__s2b+0x18>
 8010ac6:	9b08      	ldr	r3, [sp, #32]
 8010ac8:	6143      	str	r3, [r0, #20]
 8010aca:	2d09      	cmp	r5, #9
 8010acc:	f04f 0301 	mov.w	r3, #1
 8010ad0:	6103      	str	r3, [r0, #16]
 8010ad2:	dd16      	ble.n	8010b02 <__s2b+0x72>
 8010ad4:	f104 0909 	add.w	r9, r4, #9
 8010ad8:	46c8      	mov	r8, r9
 8010ada:	442c      	add	r4, r5
 8010adc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010ae0:	4601      	mov	r1, r0
 8010ae2:	3b30      	subs	r3, #48	; 0x30
 8010ae4:	220a      	movs	r2, #10
 8010ae6:	4630      	mov	r0, r6
 8010ae8:	f7ff ff8c 	bl	8010a04 <__multadd>
 8010aec:	45a0      	cmp	r8, r4
 8010aee:	d1f5      	bne.n	8010adc <__s2b+0x4c>
 8010af0:	f1a5 0408 	sub.w	r4, r5, #8
 8010af4:	444c      	add	r4, r9
 8010af6:	1b2d      	subs	r5, r5, r4
 8010af8:	1963      	adds	r3, r4, r5
 8010afa:	42bb      	cmp	r3, r7
 8010afc:	db04      	blt.n	8010b08 <__s2b+0x78>
 8010afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b02:	340a      	adds	r4, #10
 8010b04:	2509      	movs	r5, #9
 8010b06:	e7f6      	b.n	8010af6 <__s2b+0x66>
 8010b08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010b0c:	4601      	mov	r1, r0
 8010b0e:	3b30      	subs	r3, #48	; 0x30
 8010b10:	220a      	movs	r2, #10
 8010b12:	4630      	mov	r0, r6
 8010b14:	f7ff ff76 	bl	8010a04 <__multadd>
 8010b18:	e7ee      	b.n	8010af8 <__s2b+0x68>
 8010b1a:	bf00      	nop
 8010b1c:	08012005 	.word	0x08012005
 8010b20:	08012076 	.word	0x08012076

08010b24 <__hi0bits>:
 8010b24:	0c03      	lsrs	r3, r0, #16
 8010b26:	041b      	lsls	r3, r3, #16
 8010b28:	b9d3      	cbnz	r3, 8010b60 <__hi0bits+0x3c>
 8010b2a:	0400      	lsls	r0, r0, #16
 8010b2c:	2310      	movs	r3, #16
 8010b2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010b32:	bf04      	itt	eq
 8010b34:	0200      	lsleq	r0, r0, #8
 8010b36:	3308      	addeq	r3, #8
 8010b38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010b3c:	bf04      	itt	eq
 8010b3e:	0100      	lsleq	r0, r0, #4
 8010b40:	3304      	addeq	r3, #4
 8010b42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010b46:	bf04      	itt	eq
 8010b48:	0080      	lsleq	r0, r0, #2
 8010b4a:	3302      	addeq	r3, #2
 8010b4c:	2800      	cmp	r0, #0
 8010b4e:	db05      	blt.n	8010b5c <__hi0bits+0x38>
 8010b50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010b54:	f103 0301 	add.w	r3, r3, #1
 8010b58:	bf08      	it	eq
 8010b5a:	2320      	moveq	r3, #32
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	4770      	bx	lr
 8010b60:	2300      	movs	r3, #0
 8010b62:	e7e4      	b.n	8010b2e <__hi0bits+0xa>

08010b64 <__lo0bits>:
 8010b64:	6803      	ldr	r3, [r0, #0]
 8010b66:	f013 0207 	ands.w	r2, r3, #7
 8010b6a:	d00c      	beq.n	8010b86 <__lo0bits+0x22>
 8010b6c:	07d9      	lsls	r1, r3, #31
 8010b6e:	d422      	bmi.n	8010bb6 <__lo0bits+0x52>
 8010b70:	079a      	lsls	r2, r3, #30
 8010b72:	bf49      	itett	mi
 8010b74:	085b      	lsrmi	r3, r3, #1
 8010b76:	089b      	lsrpl	r3, r3, #2
 8010b78:	6003      	strmi	r3, [r0, #0]
 8010b7a:	2201      	movmi	r2, #1
 8010b7c:	bf5c      	itt	pl
 8010b7e:	6003      	strpl	r3, [r0, #0]
 8010b80:	2202      	movpl	r2, #2
 8010b82:	4610      	mov	r0, r2
 8010b84:	4770      	bx	lr
 8010b86:	b299      	uxth	r1, r3
 8010b88:	b909      	cbnz	r1, 8010b8e <__lo0bits+0x2a>
 8010b8a:	0c1b      	lsrs	r3, r3, #16
 8010b8c:	2210      	movs	r2, #16
 8010b8e:	b2d9      	uxtb	r1, r3
 8010b90:	b909      	cbnz	r1, 8010b96 <__lo0bits+0x32>
 8010b92:	3208      	adds	r2, #8
 8010b94:	0a1b      	lsrs	r3, r3, #8
 8010b96:	0719      	lsls	r1, r3, #28
 8010b98:	bf04      	itt	eq
 8010b9a:	091b      	lsreq	r3, r3, #4
 8010b9c:	3204      	addeq	r2, #4
 8010b9e:	0799      	lsls	r1, r3, #30
 8010ba0:	bf04      	itt	eq
 8010ba2:	089b      	lsreq	r3, r3, #2
 8010ba4:	3202      	addeq	r2, #2
 8010ba6:	07d9      	lsls	r1, r3, #31
 8010ba8:	d403      	bmi.n	8010bb2 <__lo0bits+0x4e>
 8010baa:	085b      	lsrs	r3, r3, #1
 8010bac:	f102 0201 	add.w	r2, r2, #1
 8010bb0:	d003      	beq.n	8010bba <__lo0bits+0x56>
 8010bb2:	6003      	str	r3, [r0, #0]
 8010bb4:	e7e5      	b.n	8010b82 <__lo0bits+0x1e>
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	e7e3      	b.n	8010b82 <__lo0bits+0x1e>
 8010bba:	2220      	movs	r2, #32
 8010bbc:	e7e1      	b.n	8010b82 <__lo0bits+0x1e>
	...

08010bc0 <__i2b>:
 8010bc0:	b510      	push	{r4, lr}
 8010bc2:	460c      	mov	r4, r1
 8010bc4:	2101      	movs	r1, #1
 8010bc6:	f7ff febb 	bl	8010940 <_Balloc>
 8010bca:	4602      	mov	r2, r0
 8010bcc:	b928      	cbnz	r0, 8010bda <__i2b+0x1a>
 8010bce:	4b05      	ldr	r3, [pc, #20]	; (8010be4 <__i2b+0x24>)
 8010bd0:	4805      	ldr	r0, [pc, #20]	; (8010be8 <__i2b+0x28>)
 8010bd2:	f240 1145 	movw	r1, #325	; 0x145
 8010bd6:	f000 fe1f 	bl	8011818 <__assert_func>
 8010bda:	2301      	movs	r3, #1
 8010bdc:	6144      	str	r4, [r0, #20]
 8010bde:	6103      	str	r3, [r0, #16]
 8010be0:	bd10      	pop	{r4, pc}
 8010be2:	bf00      	nop
 8010be4:	08012005 	.word	0x08012005
 8010be8:	08012076 	.word	0x08012076

08010bec <__multiply>:
 8010bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bf0:	4691      	mov	r9, r2
 8010bf2:	690a      	ldr	r2, [r1, #16]
 8010bf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010bf8:	429a      	cmp	r2, r3
 8010bfa:	bfb8      	it	lt
 8010bfc:	460b      	movlt	r3, r1
 8010bfe:	460c      	mov	r4, r1
 8010c00:	bfbc      	itt	lt
 8010c02:	464c      	movlt	r4, r9
 8010c04:	4699      	movlt	r9, r3
 8010c06:	6927      	ldr	r7, [r4, #16]
 8010c08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010c0c:	68a3      	ldr	r3, [r4, #8]
 8010c0e:	6861      	ldr	r1, [r4, #4]
 8010c10:	eb07 060a 	add.w	r6, r7, sl
 8010c14:	42b3      	cmp	r3, r6
 8010c16:	b085      	sub	sp, #20
 8010c18:	bfb8      	it	lt
 8010c1a:	3101      	addlt	r1, #1
 8010c1c:	f7ff fe90 	bl	8010940 <_Balloc>
 8010c20:	b930      	cbnz	r0, 8010c30 <__multiply+0x44>
 8010c22:	4602      	mov	r2, r0
 8010c24:	4b44      	ldr	r3, [pc, #272]	; (8010d38 <__multiply+0x14c>)
 8010c26:	4845      	ldr	r0, [pc, #276]	; (8010d3c <__multiply+0x150>)
 8010c28:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010c2c:	f000 fdf4 	bl	8011818 <__assert_func>
 8010c30:	f100 0514 	add.w	r5, r0, #20
 8010c34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010c38:	462b      	mov	r3, r5
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	4543      	cmp	r3, r8
 8010c3e:	d321      	bcc.n	8010c84 <__multiply+0x98>
 8010c40:	f104 0314 	add.w	r3, r4, #20
 8010c44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010c48:	f109 0314 	add.w	r3, r9, #20
 8010c4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010c50:	9202      	str	r2, [sp, #8]
 8010c52:	1b3a      	subs	r2, r7, r4
 8010c54:	3a15      	subs	r2, #21
 8010c56:	f022 0203 	bic.w	r2, r2, #3
 8010c5a:	3204      	adds	r2, #4
 8010c5c:	f104 0115 	add.w	r1, r4, #21
 8010c60:	428f      	cmp	r7, r1
 8010c62:	bf38      	it	cc
 8010c64:	2204      	movcc	r2, #4
 8010c66:	9201      	str	r2, [sp, #4]
 8010c68:	9a02      	ldr	r2, [sp, #8]
 8010c6a:	9303      	str	r3, [sp, #12]
 8010c6c:	429a      	cmp	r2, r3
 8010c6e:	d80c      	bhi.n	8010c8a <__multiply+0x9e>
 8010c70:	2e00      	cmp	r6, #0
 8010c72:	dd03      	ble.n	8010c7c <__multiply+0x90>
 8010c74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d05b      	beq.n	8010d34 <__multiply+0x148>
 8010c7c:	6106      	str	r6, [r0, #16]
 8010c7e:	b005      	add	sp, #20
 8010c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c84:	f843 2b04 	str.w	r2, [r3], #4
 8010c88:	e7d8      	b.n	8010c3c <__multiply+0x50>
 8010c8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8010c8e:	f1ba 0f00 	cmp.w	sl, #0
 8010c92:	d024      	beq.n	8010cde <__multiply+0xf2>
 8010c94:	f104 0e14 	add.w	lr, r4, #20
 8010c98:	46a9      	mov	r9, r5
 8010c9a:	f04f 0c00 	mov.w	ip, #0
 8010c9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010ca2:	f8d9 1000 	ldr.w	r1, [r9]
 8010ca6:	fa1f fb82 	uxth.w	fp, r2
 8010caa:	b289      	uxth	r1, r1
 8010cac:	fb0a 110b 	mla	r1, sl, fp, r1
 8010cb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010cb4:	f8d9 2000 	ldr.w	r2, [r9]
 8010cb8:	4461      	add	r1, ip
 8010cba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010cbe:	fb0a c20b 	mla	r2, sl, fp, ip
 8010cc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010cc6:	b289      	uxth	r1, r1
 8010cc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010ccc:	4577      	cmp	r7, lr
 8010cce:	f849 1b04 	str.w	r1, [r9], #4
 8010cd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010cd6:	d8e2      	bhi.n	8010c9e <__multiply+0xb2>
 8010cd8:	9a01      	ldr	r2, [sp, #4]
 8010cda:	f845 c002 	str.w	ip, [r5, r2]
 8010cde:	9a03      	ldr	r2, [sp, #12]
 8010ce0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010ce4:	3304      	adds	r3, #4
 8010ce6:	f1b9 0f00 	cmp.w	r9, #0
 8010cea:	d021      	beq.n	8010d30 <__multiply+0x144>
 8010cec:	6829      	ldr	r1, [r5, #0]
 8010cee:	f104 0c14 	add.w	ip, r4, #20
 8010cf2:	46ae      	mov	lr, r5
 8010cf4:	f04f 0a00 	mov.w	sl, #0
 8010cf8:	f8bc b000 	ldrh.w	fp, [ip]
 8010cfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010d00:	fb09 220b 	mla	r2, r9, fp, r2
 8010d04:	4452      	add	r2, sl
 8010d06:	b289      	uxth	r1, r1
 8010d08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010d0c:	f84e 1b04 	str.w	r1, [lr], #4
 8010d10:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010d14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010d18:	f8be 1000 	ldrh.w	r1, [lr]
 8010d1c:	fb09 110a 	mla	r1, r9, sl, r1
 8010d20:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010d24:	4567      	cmp	r7, ip
 8010d26:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010d2a:	d8e5      	bhi.n	8010cf8 <__multiply+0x10c>
 8010d2c:	9a01      	ldr	r2, [sp, #4]
 8010d2e:	50a9      	str	r1, [r5, r2]
 8010d30:	3504      	adds	r5, #4
 8010d32:	e799      	b.n	8010c68 <__multiply+0x7c>
 8010d34:	3e01      	subs	r6, #1
 8010d36:	e79b      	b.n	8010c70 <__multiply+0x84>
 8010d38:	08012005 	.word	0x08012005
 8010d3c:	08012076 	.word	0x08012076

08010d40 <__pow5mult>:
 8010d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d44:	4615      	mov	r5, r2
 8010d46:	f012 0203 	ands.w	r2, r2, #3
 8010d4a:	4606      	mov	r6, r0
 8010d4c:	460f      	mov	r7, r1
 8010d4e:	d007      	beq.n	8010d60 <__pow5mult+0x20>
 8010d50:	4c25      	ldr	r4, [pc, #148]	; (8010de8 <__pow5mult+0xa8>)
 8010d52:	3a01      	subs	r2, #1
 8010d54:	2300      	movs	r3, #0
 8010d56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010d5a:	f7ff fe53 	bl	8010a04 <__multadd>
 8010d5e:	4607      	mov	r7, r0
 8010d60:	10ad      	asrs	r5, r5, #2
 8010d62:	d03d      	beq.n	8010de0 <__pow5mult+0xa0>
 8010d64:	69f4      	ldr	r4, [r6, #28]
 8010d66:	b97c      	cbnz	r4, 8010d88 <__pow5mult+0x48>
 8010d68:	2010      	movs	r0, #16
 8010d6a:	f7fc fc41 	bl	800d5f0 <malloc>
 8010d6e:	4602      	mov	r2, r0
 8010d70:	61f0      	str	r0, [r6, #28]
 8010d72:	b928      	cbnz	r0, 8010d80 <__pow5mult+0x40>
 8010d74:	4b1d      	ldr	r3, [pc, #116]	; (8010dec <__pow5mult+0xac>)
 8010d76:	481e      	ldr	r0, [pc, #120]	; (8010df0 <__pow5mult+0xb0>)
 8010d78:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010d7c:	f000 fd4c 	bl	8011818 <__assert_func>
 8010d80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010d84:	6004      	str	r4, [r0, #0]
 8010d86:	60c4      	str	r4, [r0, #12]
 8010d88:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010d8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010d90:	b94c      	cbnz	r4, 8010da6 <__pow5mult+0x66>
 8010d92:	f240 2171 	movw	r1, #625	; 0x271
 8010d96:	4630      	mov	r0, r6
 8010d98:	f7ff ff12 	bl	8010bc0 <__i2b>
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010da2:	4604      	mov	r4, r0
 8010da4:	6003      	str	r3, [r0, #0]
 8010da6:	f04f 0900 	mov.w	r9, #0
 8010daa:	07eb      	lsls	r3, r5, #31
 8010dac:	d50a      	bpl.n	8010dc4 <__pow5mult+0x84>
 8010dae:	4639      	mov	r1, r7
 8010db0:	4622      	mov	r2, r4
 8010db2:	4630      	mov	r0, r6
 8010db4:	f7ff ff1a 	bl	8010bec <__multiply>
 8010db8:	4639      	mov	r1, r7
 8010dba:	4680      	mov	r8, r0
 8010dbc:	4630      	mov	r0, r6
 8010dbe:	f7ff fdff 	bl	80109c0 <_Bfree>
 8010dc2:	4647      	mov	r7, r8
 8010dc4:	106d      	asrs	r5, r5, #1
 8010dc6:	d00b      	beq.n	8010de0 <__pow5mult+0xa0>
 8010dc8:	6820      	ldr	r0, [r4, #0]
 8010dca:	b938      	cbnz	r0, 8010ddc <__pow5mult+0x9c>
 8010dcc:	4622      	mov	r2, r4
 8010dce:	4621      	mov	r1, r4
 8010dd0:	4630      	mov	r0, r6
 8010dd2:	f7ff ff0b 	bl	8010bec <__multiply>
 8010dd6:	6020      	str	r0, [r4, #0]
 8010dd8:	f8c0 9000 	str.w	r9, [r0]
 8010ddc:	4604      	mov	r4, r0
 8010dde:	e7e4      	b.n	8010daa <__pow5mult+0x6a>
 8010de0:	4638      	mov	r0, r7
 8010de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010de6:	bf00      	nop
 8010de8:	080121c0 	.word	0x080121c0
 8010dec:	08011f96 	.word	0x08011f96
 8010df0:	08012076 	.word	0x08012076

08010df4 <__lshift>:
 8010df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010df8:	460c      	mov	r4, r1
 8010dfa:	6849      	ldr	r1, [r1, #4]
 8010dfc:	6923      	ldr	r3, [r4, #16]
 8010dfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010e02:	68a3      	ldr	r3, [r4, #8]
 8010e04:	4607      	mov	r7, r0
 8010e06:	4691      	mov	r9, r2
 8010e08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010e0c:	f108 0601 	add.w	r6, r8, #1
 8010e10:	42b3      	cmp	r3, r6
 8010e12:	db0b      	blt.n	8010e2c <__lshift+0x38>
 8010e14:	4638      	mov	r0, r7
 8010e16:	f7ff fd93 	bl	8010940 <_Balloc>
 8010e1a:	4605      	mov	r5, r0
 8010e1c:	b948      	cbnz	r0, 8010e32 <__lshift+0x3e>
 8010e1e:	4602      	mov	r2, r0
 8010e20:	4b28      	ldr	r3, [pc, #160]	; (8010ec4 <__lshift+0xd0>)
 8010e22:	4829      	ldr	r0, [pc, #164]	; (8010ec8 <__lshift+0xd4>)
 8010e24:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010e28:	f000 fcf6 	bl	8011818 <__assert_func>
 8010e2c:	3101      	adds	r1, #1
 8010e2e:	005b      	lsls	r3, r3, #1
 8010e30:	e7ee      	b.n	8010e10 <__lshift+0x1c>
 8010e32:	2300      	movs	r3, #0
 8010e34:	f100 0114 	add.w	r1, r0, #20
 8010e38:	f100 0210 	add.w	r2, r0, #16
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	4553      	cmp	r3, sl
 8010e40:	db33      	blt.n	8010eaa <__lshift+0xb6>
 8010e42:	6920      	ldr	r0, [r4, #16]
 8010e44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010e48:	f104 0314 	add.w	r3, r4, #20
 8010e4c:	f019 091f 	ands.w	r9, r9, #31
 8010e50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010e54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010e58:	d02b      	beq.n	8010eb2 <__lshift+0xbe>
 8010e5a:	f1c9 0e20 	rsb	lr, r9, #32
 8010e5e:	468a      	mov	sl, r1
 8010e60:	2200      	movs	r2, #0
 8010e62:	6818      	ldr	r0, [r3, #0]
 8010e64:	fa00 f009 	lsl.w	r0, r0, r9
 8010e68:	4310      	orrs	r0, r2
 8010e6a:	f84a 0b04 	str.w	r0, [sl], #4
 8010e6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e72:	459c      	cmp	ip, r3
 8010e74:	fa22 f20e 	lsr.w	r2, r2, lr
 8010e78:	d8f3      	bhi.n	8010e62 <__lshift+0x6e>
 8010e7a:	ebac 0304 	sub.w	r3, ip, r4
 8010e7e:	3b15      	subs	r3, #21
 8010e80:	f023 0303 	bic.w	r3, r3, #3
 8010e84:	3304      	adds	r3, #4
 8010e86:	f104 0015 	add.w	r0, r4, #21
 8010e8a:	4584      	cmp	ip, r0
 8010e8c:	bf38      	it	cc
 8010e8e:	2304      	movcc	r3, #4
 8010e90:	50ca      	str	r2, [r1, r3]
 8010e92:	b10a      	cbz	r2, 8010e98 <__lshift+0xa4>
 8010e94:	f108 0602 	add.w	r6, r8, #2
 8010e98:	3e01      	subs	r6, #1
 8010e9a:	4638      	mov	r0, r7
 8010e9c:	612e      	str	r6, [r5, #16]
 8010e9e:	4621      	mov	r1, r4
 8010ea0:	f7ff fd8e 	bl	80109c0 <_Bfree>
 8010ea4:	4628      	mov	r0, r5
 8010ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010eaa:	f842 0f04 	str.w	r0, [r2, #4]!
 8010eae:	3301      	adds	r3, #1
 8010eb0:	e7c5      	b.n	8010e3e <__lshift+0x4a>
 8010eb2:	3904      	subs	r1, #4
 8010eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8010eb8:	f841 2f04 	str.w	r2, [r1, #4]!
 8010ebc:	459c      	cmp	ip, r3
 8010ebe:	d8f9      	bhi.n	8010eb4 <__lshift+0xc0>
 8010ec0:	e7ea      	b.n	8010e98 <__lshift+0xa4>
 8010ec2:	bf00      	nop
 8010ec4:	08012005 	.word	0x08012005
 8010ec8:	08012076 	.word	0x08012076

08010ecc <__mcmp>:
 8010ecc:	b530      	push	{r4, r5, lr}
 8010ece:	6902      	ldr	r2, [r0, #16]
 8010ed0:	690c      	ldr	r4, [r1, #16]
 8010ed2:	1b12      	subs	r2, r2, r4
 8010ed4:	d10e      	bne.n	8010ef4 <__mcmp+0x28>
 8010ed6:	f100 0314 	add.w	r3, r0, #20
 8010eda:	3114      	adds	r1, #20
 8010edc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010ee0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010ee4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010ee8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010eec:	42a5      	cmp	r5, r4
 8010eee:	d003      	beq.n	8010ef8 <__mcmp+0x2c>
 8010ef0:	d305      	bcc.n	8010efe <__mcmp+0x32>
 8010ef2:	2201      	movs	r2, #1
 8010ef4:	4610      	mov	r0, r2
 8010ef6:	bd30      	pop	{r4, r5, pc}
 8010ef8:	4283      	cmp	r3, r0
 8010efa:	d3f3      	bcc.n	8010ee4 <__mcmp+0x18>
 8010efc:	e7fa      	b.n	8010ef4 <__mcmp+0x28>
 8010efe:	f04f 32ff 	mov.w	r2, #4294967295
 8010f02:	e7f7      	b.n	8010ef4 <__mcmp+0x28>

08010f04 <__mdiff>:
 8010f04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f08:	460c      	mov	r4, r1
 8010f0a:	4606      	mov	r6, r0
 8010f0c:	4611      	mov	r1, r2
 8010f0e:	4620      	mov	r0, r4
 8010f10:	4690      	mov	r8, r2
 8010f12:	f7ff ffdb 	bl	8010ecc <__mcmp>
 8010f16:	1e05      	subs	r5, r0, #0
 8010f18:	d110      	bne.n	8010f3c <__mdiff+0x38>
 8010f1a:	4629      	mov	r1, r5
 8010f1c:	4630      	mov	r0, r6
 8010f1e:	f7ff fd0f 	bl	8010940 <_Balloc>
 8010f22:	b930      	cbnz	r0, 8010f32 <__mdiff+0x2e>
 8010f24:	4b3a      	ldr	r3, [pc, #232]	; (8011010 <__mdiff+0x10c>)
 8010f26:	4602      	mov	r2, r0
 8010f28:	f240 2137 	movw	r1, #567	; 0x237
 8010f2c:	4839      	ldr	r0, [pc, #228]	; (8011014 <__mdiff+0x110>)
 8010f2e:	f000 fc73 	bl	8011818 <__assert_func>
 8010f32:	2301      	movs	r3, #1
 8010f34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010f38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f3c:	bfa4      	itt	ge
 8010f3e:	4643      	movge	r3, r8
 8010f40:	46a0      	movge	r8, r4
 8010f42:	4630      	mov	r0, r6
 8010f44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010f48:	bfa6      	itte	ge
 8010f4a:	461c      	movge	r4, r3
 8010f4c:	2500      	movge	r5, #0
 8010f4e:	2501      	movlt	r5, #1
 8010f50:	f7ff fcf6 	bl	8010940 <_Balloc>
 8010f54:	b920      	cbnz	r0, 8010f60 <__mdiff+0x5c>
 8010f56:	4b2e      	ldr	r3, [pc, #184]	; (8011010 <__mdiff+0x10c>)
 8010f58:	4602      	mov	r2, r0
 8010f5a:	f240 2145 	movw	r1, #581	; 0x245
 8010f5e:	e7e5      	b.n	8010f2c <__mdiff+0x28>
 8010f60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010f64:	6926      	ldr	r6, [r4, #16]
 8010f66:	60c5      	str	r5, [r0, #12]
 8010f68:	f104 0914 	add.w	r9, r4, #20
 8010f6c:	f108 0514 	add.w	r5, r8, #20
 8010f70:	f100 0e14 	add.w	lr, r0, #20
 8010f74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010f78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010f7c:	f108 0210 	add.w	r2, r8, #16
 8010f80:	46f2      	mov	sl, lr
 8010f82:	2100      	movs	r1, #0
 8010f84:	f859 3b04 	ldr.w	r3, [r9], #4
 8010f88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010f8c:	fa11 f88b 	uxtah	r8, r1, fp
 8010f90:	b299      	uxth	r1, r3
 8010f92:	0c1b      	lsrs	r3, r3, #16
 8010f94:	eba8 0801 	sub.w	r8, r8, r1
 8010f98:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010f9c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010fa0:	fa1f f888 	uxth.w	r8, r8
 8010fa4:	1419      	asrs	r1, r3, #16
 8010fa6:	454e      	cmp	r6, r9
 8010fa8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010fac:	f84a 3b04 	str.w	r3, [sl], #4
 8010fb0:	d8e8      	bhi.n	8010f84 <__mdiff+0x80>
 8010fb2:	1b33      	subs	r3, r6, r4
 8010fb4:	3b15      	subs	r3, #21
 8010fb6:	f023 0303 	bic.w	r3, r3, #3
 8010fba:	3304      	adds	r3, #4
 8010fbc:	3415      	adds	r4, #21
 8010fbe:	42a6      	cmp	r6, r4
 8010fc0:	bf38      	it	cc
 8010fc2:	2304      	movcc	r3, #4
 8010fc4:	441d      	add	r5, r3
 8010fc6:	4473      	add	r3, lr
 8010fc8:	469e      	mov	lr, r3
 8010fca:	462e      	mov	r6, r5
 8010fcc:	4566      	cmp	r6, ip
 8010fce:	d30e      	bcc.n	8010fee <__mdiff+0xea>
 8010fd0:	f10c 0203 	add.w	r2, ip, #3
 8010fd4:	1b52      	subs	r2, r2, r5
 8010fd6:	f022 0203 	bic.w	r2, r2, #3
 8010fda:	3d03      	subs	r5, #3
 8010fdc:	45ac      	cmp	ip, r5
 8010fde:	bf38      	it	cc
 8010fe0:	2200      	movcc	r2, #0
 8010fe2:	4413      	add	r3, r2
 8010fe4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010fe8:	b17a      	cbz	r2, 801100a <__mdiff+0x106>
 8010fea:	6107      	str	r7, [r0, #16]
 8010fec:	e7a4      	b.n	8010f38 <__mdiff+0x34>
 8010fee:	f856 8b04 	ldr.w	r8, [r6], #4
 8010ff2:	fa11 f288 	uxtah	r2, r1, r8
 8010ff6:	1414      	asrs	r4, r2, #16
 8010ff8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010ffc:	b292      	uxth	r2, r2
 8010ffe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011002:	f84e 2b04 	str.w	r2, [lr], #4
 8011006:	1421      	asrs	r1, r4, #16
 8011008:	e7e0      	b.n	8010fcc <__mdiff+0xc8>
 801100a:	3f01      	subs	r7, #1
 801100c:	e7ea      	b.n	8010fe4 <__mdiff+0xe0>
 801100e:	bf00      	nop
 8011010:	08012005 	.word	0x08012005
 8011014:	08012076 	.word	0x08012076

08011018 <__ulp>:
 8011018:	b082      	sub	sp, #8
 801101a:	ed8d 0b00 	vstr	d0, [sp]
 801101e:	9a01      	ldr	r2, [sp, #4]
 8011020:	4b0f      	ldr	r3, [pc, #60]	; (8011060 <__ulp+0x48>)
 8011022:	4013      	ands	r3, r2
 8011024:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8011028:	2b00      	cmp	r3, #0
 801102a:	dc08      	bgt.n	801103e <__ulp+0x26>
 801102c:	425b      	negs	r3, r3
 801102e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8011032:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011036:	da04      	bge.n	8011042 <__ulp+0x2a>
 8011038:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801103c:	4113      	asrs	r3, r2
 801103e:	2200      	movs	r2, #0
 8011040:	e008      	b.n	8011054 <__ulp+0x3c>
 8011042:	f1a2 0314 	sub.w	r3, r2, #20
 8011046:	2b1e      	cmp	r3, #30
 8011048:	bfda      	itte	le
 801104a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801104e:	40da      	lsrle	r2, r3
 8011050:	2201      	movgt	r2, #1
 8011052:	2300      	movs	r3, #0
 8011054:	4619      	mov	r1, r3
 8011056:	4610      	mov	r0, r2
 8011058:	ec41 0b10 	vmov	d0, r0, r1
 801105c:	b002      	add	sp, #8
 801105e:	4770      	bx	lr
 8011060:	7ff00000 	.word	0x7ff00000

08011064 <__b2d>:
 8011064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011068:	6906      	ldr	r6, [r0, #16]
 801106a:	f100 0814 	add.w	r8, r0, #20
 801106e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011072:	1f37      	subs	r7, r6, #4
 8011074:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011078:	4610      	mov	r0, r2
 801107a:	f7ff fd53 	bl	8010b24 <__hi0bits>
 801107e:	f1c0 0320 	rsb	r3, r0, #32
 8011082:	280a      	cmp	r0, #10
 8011084:	600b      	str	r3, [r1, #0]
 8011086:	491b      	ldr	r1, [pc, #108]	; (80110f4 <__b2d+0x90>)
 8011088:	dc15      	bgt.n	80110b6 <__b2d+0x52>
 801108a:	f1c0 0c0b 	rsb	ip, r0, #11
 801108e:	fa22 f30c 	lsr.w	r3, r2, ip
 8011092:	45b8      	cmp	r8, r7
 8011094:	ea43 0501 	orr.w	r5, r3, r1
 8011098:	bf34      	ite	cc
 801109a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801109e:	2300      	movcs	r3, #0
 80110a0:	3015      	adds	r0, #21
 80110a2:	fa02 f000 	lsl.w	r0, r2, r0
 80110a6:	fa23 f30c 	lsr.w	r3, r3, ip
 80110aa:	4303      	orrs	r3, r0
 80110ac:	461c      	mov	r4, r3
 80110ae:	ec45 4b10 	vmov	d0, r4, r5
 80110b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110b6:	45b8      	cmp	r8, r7
 80110b8:	bf3a      	itte	cc
 80110ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80110be:	f1a6 0708 	subcc.w	r7, r6, #8
 80110c2:	2300      	movcs	r3, #0
 80110c4:	380b      	subs	r0, #11
 80110c6:	d012      	beq.n	80110ee <__b2d+0x8a>
 80110c8:	f1c0 0120 	rsb	r1, r0, #32
 80110cc:	fa23 f401 	lsr.w	r4, r3, r1
 80110d0:	4082      	lsls	r2, r0
 80110d2:	4322      	orrs	r2, r4
 80110d4:	4547      	cmp	r7, r8
 80110d6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80110da:	bf8c      	ite	hi
 80110dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80110e0:	2200      	movls	r2, #0
 80110e2:	4083      	lsls	r3, r0
 80110e4:	40ca      	lsrs	r2, r1
 80110e6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80110ea:	4313      	orrs	r3, r2
 80110ec:	e7de      	b.n	80110ac <__b2d+0x48>
 80110ee:	ea42 0501 	orr.w	r5, r2, r1
 80110f2:	e7db      	b.n	80110ac <__b2d+0x48>
 80110f4:	3ff00000 	.word	0x3ff00000

080110f8 <__d2b>:
 80110f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80110fc:	460f      	mov	r7, r1
 80110fe:	2101      	movs	r1, #1
 8011100:	ec59 8b10 	vmov	r8, r9, d0
 8011104:	4616      	mov	r6, r2
 8011106:	f7ff fc1b 	bl	8010940 <_Balloc>
 801110a:	4604      	mov	r4, r0
 801110c:	b930      	cbnz	r0, 801111c <__d2b+0x24>
 801110e:	4602      	mov	r2, r0
 8011110:	4b24      	ldr	r3, [pc, #144]	; (80111a4 <__d2b+0xac>)
 8011112:	4825      	ldr	r0, [pc, #148]	; (80111a8 <__d2b+0xb0>)
 8011114:	f240 310f 	movw	r1, #783	; 0x30f
 8011118:	f000 fb7e 	bl	8011818 <__assert_func>
 801111c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011120:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011124:	bb2d      	cbnz	r5, 8011172 <__d2b+0x7a>
 8011126:	9301      	str	r3, [sp, #4]
 8011128:	f1b8 0300 	subs.w	r3, r8, #0
 801112c:	d026      	beq.n	801117c <__d2b+0x84>
 801112e:	4668      	mov	r0, sp
 8011130:	9300      	str	r3, [sp, #0]
 8011132:	f7ff fd17 	bl	8010b64 <__lo0bits>
 8011136:	e9dd 1200 	ldrd	r1, r2, [sp]
 801113a:	b1e8      	cbz	r0, 8011178 <__d2b+0x80>
 801113c:	f1c0 0320 	rsb	r3, r0, #32
 8011140:	fa02 f303 	lsl.w	r3, r2, r3
 8011144:	430b      	orrs	r3, r1
 8011146:	40c2      	lsrs	r2, r0
 8011148:	6163      	str	r3, [r4, #20]
 801114a:	9201      	str	r2, [sp, #4]
 801114c:	9b01      	ldr	r3, [sp, #4]
 801114e:	61a3      	str	r3, [r4, #24]
 8011150:	2b00      	cmp	r3, #0
 8011152:	bf14      	ite	ne
 8011154:	2202      	movne	r2, #2
 8011156:	2201      	moveq	r2, #1
 8011158:	6122      	str	r2, [r4, #16]
 801115a:	b1bd      	cbz	r5, 801118c <__d2b+0x94>
 801115c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011160:	4405      	add	r5, r0
 8011162:	603d      	str	r5, [r7, #0]
 8011164:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011168:	6030      	str	r0, [r6, #0]
 801116a:	4620      	mov	r0, r4
 801116c:	b003      	add	sp, #12
 801116e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011172:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011176:	e7d6      	b.n	8011126 <__d2b+0x2e>
 8011178:	6161      	str	r1, [r4, #20]
 801117a:	e7e7      	b.n	801114c <__d2b+0x54>
 801117c:	a801      	add	r0, sp, #4
 801117e:	f7ff fcf1 	bl	8010b64 <__lo0bits>
 8011182:	9b01      	ldr	r3, [sp, #4]
 8011184:	6163      	str	r3, [r4, #20]
 8011186:	3020      	adds	r0, #32
 8011188:	2201      	movs	r2, #1
 801118a:	e7e5      	b.n	8011158 <__d2b+0x60>
 801118c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011190:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011194:	6038      	str	r0, [r7, #0]
 8011196:	6918      	ldr	r0, [r3, #16]
 8011198:	f7ff fcc4 	bl	8010b24 <__hi0bits>
 801119c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80111a0:	e7e2      	b.n	8011168 <__d2b+0x70>
 80111a2:	bf00      	nop
 80111a4:	08012005 	.word	0x08012005
 80111a8:	08012076 	.word	0x08012076

080111ac <__ratio>:
 80111ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111b0:	4688      	mov	r8, r1
 80111b2:	4669      	mov	r1, sp
 80111b4:	4681      	mov	r9, r0
 80111b6:	f7ff ff55 	bl	8011064 <__b2d>
 80111ba:	a901      	add	r1, sp, #4
 80111bc:	4640      	mov	r0, r8
 80111be:	ec55 4b10 	vmov	r4, r5, d0
 80111c2:	f7ff ff4f 	bl	8011064 <__b2d>
 80111c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80111ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80111ce:	eba3 0c02 	sub.w	ip, r3, r2
 80111d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80111d6:	1a9b      	subs	r3, r3, r2
 80111d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80111dc:	ec51 0b10 	vmov	r0, r1, d0
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	bfd6      	itet	le
 80111e4:	460a      	movle	r2, r1
 80111e6:	462a      	movgt	r2, r5
 80111e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80111ec:	468b      	mov	fp, r1
 80111ee:	462f      	mov	r7, r5
 80111f0:	bfd4      	ite	le
 80111f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80111f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80111fa:	4620      	mov	r0, r4
 80111fc:	ee10 2a10 	vmov	r2, s0
 8011200:	465b      	mov	r3, fp
 8011202:	4639      	mov	r1, r7
 8011204:	f7ef fb22 	bl	800084c <__aeabi_ddiv>
 8011208:	ec41 0b10 	vmov	d0, r0, r1
 801120c:	b003      	add	sp, #12
 801120e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011212 <__copybits>:
 8011212:	3901      	subs	r1, #1
 8011214:	b570      	push	{r4, r5, r6, lr}
 8011216:	1149      	asrs	r1, r1, #5
 8011218:	6914      	ldr	r4, [r2, #16]
 801121a:	3101      	adds	r1, #1
 801121c:	f102 0314 	add.w	r3, r2, #20
 8011220:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011224:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011228:	1f05      	subs	r5, r0, #4
 801122a:	42a3      	cmp	r3, r4
 801122c:	d30c      	bcc.n	8011248 <__copybits+0x36>
 801122e:	1aa3      	subs	r3, r4, r2
 8011230:	3b11      	subs	r3, #17
 8011232:	f023 0303 	bic.w	r3, r3, #3
 8011236:	3211      	adds	r2, #17
 8011238:	42a2      	cmp	r2, r4
 801123a:	bf88      	it	hi
 801123c:	2300      	movhi	r3, #0
 801123e:	4418      	add	r0, r3
 8011240:	2300      	movs	r3, #0
 8011242:	4288      	cmp	r0, r1
 8011244:	d305      	bcc.n	8011252 <__copybits+0x40>
 8011246:	bd70      	pop	{r4, r5, r6, pc}
 8011248:	f853 6b04 	ldr.w	r6, [r3], #4
 801124c:	f845 6f04 	str.w	r6, [r5, #4]!
 8011250:	e7eb      	b.n	801122a <__copybits+0x18>
 8011252:	f840 3b04 	str.w	r3, [r0], #4
 8011256:	e7f4      	b.n	8011242 <__copybits+0x30>

08011258 <__any_on>:
 8011258:	f100 0214 	add.w	r2, r0, #20
 801125c:	6900      	ldr	r0, [r0, #16]
 801125e:	114b      	asrs	r3, r1, #5
 8011260:	4298      	cmp	r0, r3
 8011262:	b510      	push	{r4, lr}
 8011264:	db11      	blt.n	801128a <__any_on+0x32>
 8011266:	dd0a      	ble.n	801127e <__any_on+0x26>
 8011268:	f011 011f 	ands.w	r1, r1, #31
 801126c:	d007      	beq.n	801127e <__any_on+0x26>
 801126e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011272:	fa24 f001 	lsr.w	r0, r4, r1
 8011276:	fa00 f101 	lsl.w	r1, r0, r1
 801127a:	428c      	cmp	r4, r1
 801127c:	d10b      	bne.n	8011296 <__any_on+0x3e>
 801127e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011282:	4293      	cmp	r3, r2
 8011284:	d803      	bhi.n	801128e <__any_on+0x36>
 8011286:	2000      	movs	r0, #0
 8011288:	bd10      	pop	{r4, pc}
 801128a:	4603      	mov	r3, r0
 801128c:	e7f7      	b.n	801127e <__any_on+0x26>
 801128e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011292:	2900      	cmp	r1, #0
 8011294:	d0f5      	beq.n	8011282 <__any_on+0x2a>
 8011296:	2001      	movs	r0, #1
 8011298:	e7f6      	b.n	8011288 <__any_on+0x30>
	...

0801129c <_strtol_l.constprop.0>:
 801129c:	2b01      	cmp	r3, #1
 801129e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112a2:	d001      	beq.n	80112a8 <_strtol_l.constprop.0+0xc>
 80112a4:	2b24      	cmp	r3, #36	; 0x24
 80112a6:	d906      	bls.n	80112b6 <_strtol_l.constprop.0+0x1a>
 80112a8:	f7fe f8ce 	bl	800f448 <__errno>
 80112ac:	2316      	movs	r3, #22
 80112ae:	6003      	str	r3, [r0, #0]
 80112b0:	2000      	movs	r0, #0
 80112b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112b6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801139c <_strtol_l.constprop.0+0x100>
 80112ba:	460d      	mov	r5, r1
 80112bc:	462e      	mov	r6, r5
 80112be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80112c2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80112c6:	f017 0708 	ands.w	r7, r7, #8
 80112ca:	d1f7      	bne.n	80112bc <_strtol_l.constprop.0+0x20>
 80112cc:	2c2d      	cmp	r4, #45	; 0x2d
 80112ce:	d132      	bne.n	8011336 <_strtol_l.constprop.0+0x9a>
 80112d0:	782c      	ldrb	r4, [r5, #0]
 80112d2:	2701      	movs	r7, #1
 80112d4:	1cb5      	adds	r5, r6, #2
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d05b      	beq.n	8011392 <_strtol_l.constprop.0+0xf6>
 80112da:	2b10      	cmp	r3, #16
 80112dc:	d109      	bne.n	80112f2 <_strtol_l.constprop.0+0x56>
 80112de:	2c30      	cmp	r4, #48	; 0x30
 80112e0:	d107      	bne.n	80112f2 <_strtol_l.constprop.0+0x56>
 80112e2:	782c      	ldrb	r4, [r5, #0]
 80112e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80112e8:	2c58      	cmp	r4, #88	; 0x58
 80112ea:	d14d      	bne.n	8011388 <_strtol_l.constprop.0+0xec>
 80112ec:	786c      	ldrb	r4, [r5, #1]
 80112ee:	2310      	movs	r3, #16
 80112f0:	3502      	adds	r5, #2
 80112f2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80112f6:	f108 38ff 	add.w	r8, r8, #4294967295
 80112fa:	f04f 0e00 	mov.w	lr, #0
 80112fe:	fbb8 f9f3 	udiv	r9, r8, r3
 8011302:	4676      	mov	r6, lr
 8011304:	fb03 8a19 	mls	sl, r3, r9, r8
 8011308:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801130c:	f1bc 0f09 	cmp.w	ip, #9
 8011310:	d816      	bhi.n	8011340 <_strtol_l.constprop.0+0xa4>
 8011312:	4664      	mov	r4, ip
 8011314:	42a3      	cmp	r3, r4
 8011316:	dd24      	ble.n	8011362 <_strtol_l.constprop.0+0xc6>
 8011318:	f1be 3fff 	cmp.w	lr, #4294967295
 801131c:	d008      	beq.n	8011330 <_strtol_l.constprop.0+0x94>
 801131e:	45b1      	cmp	r9, r6
 8011320:	d31c      	bcc.n	801135c <_strtol_l.constprop.0+0xc0>
 8011322:	d101      	bne.n	8011328 <_strtol_l.constprop.0+0x8c>
 8011324:	45a2      	cmp	sl, r4
 8011326:	db19      	blt.n	801135c <_strtol_l.constprop.0+0xc0>
 8011328:	fb06 4603 	mla	r6, r6, r3, r4
 801132c:	f04f 0e01 	mov.w	lr, #1
 8011330:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011334:	e7e8      	b.n	8011308 <_strtol_l.constprop.0+0x6c>
 8011336:	2c2b      	cmp	r4, #43	; 0x2b
 8011338:	bf04      	itt	eq
 801133a:	782c      	ldrbeq	r4, [r5, #0]
 801133c:	1cb5      	addeq	r5, r6, #2
 801133e:	e7ca      	b.n	80112d6 <_strtol_l.constprop.0+0x3a>
 8011340:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011344:	f1bc 0f19 	cmp.w	ip, #25
 8011348:	d801      	bhi.n	801134e <_strtol_l.constprop.0+0xb2>
 801134a:	3c37      	subs	r4, #55	; 0x37
 801134c:	e7e2      	b.n	8011314 <_strtol_l.constprop.0+0x78>
 801134e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011352:	f1bc 0f19 	cmp.w	ip, #25
 8011356:	d804      	bhi.n	8011362 <_strtol_l.constprop.0+0xc6>
 8011358:	3c57      	subs	r4, #87	; 0x57
 801135a:	e7db      	b.n	8011314 <_strtol_l.constprop.0+0x78>
 801135c:	f04f 3eff 	mov.w	lr, #4294967295
 8011360:	e7e6      	b.n	8011330 <_strtol_l.constprop.0+0x94>
 8011362:	f1be 3fff 	cmp.w	lr, #4294967295
 8011366:	d105      	bne.n	8011374 <_strtol_l.constprop.0+0xd8>
 8011368:	2322      	movs	r3, #34	; 0x22
 801136a:	6003      	str	r3, [r0, #0]
 801136c:	4646      	mov	r6, r8
 801136e:	b942      	cbnz	r2, 8011382 <_strtol_l.constprop.0+0xe6>
 8011370:	4630      	mov	r0, r6
 8011372:	e79e      	b.n	80112b2 <_strtol_l.constprop.0+0x16>
 8011374:	b107      	cbz	r7, 8011378 <_strtol_l.constprop.0+0xdc>
 8011376:	4276      	negs	r6, r6
 8011378:	2a00      	cmp	r2, #0
 801137a:	d0f9      	beq.n	8011370 <_strtol_l.constprop.0+0xd4>
 801137c:	f1be 0f00 	cmp.w	lr, #0
 8011380:	d000      	beq.n	8011384 <_strtol_l.constprop.0+0xe8>
 8011382:	1e69      	subs	r1, r5, #1
 8011384:	6011      	str	r1, [r2, #0]
 8011386:	e7f3      	b.n	8011370 <_strtol_l.constprop.0+0xd4>
 8011388:	2430      	movs	r4, #48	; 0x30
 801138a:	2b00      	cmp	r3, #0
 801138c:	d1b1      	bne.n	80112f2 <_strtol_l.constprop.0+0x56>
 801138e:	2308      	movs	r3, #8
 8011390:	e7af      	b.n	80112f2 <_strtol_l.constprop.0+0x56>
 8011392:	2c30      	cmp	r4, #48	; 0x30
 8011394:	d0a5      	beq.n	80112e2 <_strtol_l.constprop.0+0x46>
 8011396:	230a      	movs	r3, #10
 8011398:	e7ab      	b.n	80112f2 <_strtol_l.constprop.0+0x56>
 801139a:	bf00      	nop
 801139c:	080121cd 	.word	0x080121cd

080113a0 <_strtol_r>:
 80113a0:	f7ff bf7c 	b.w	801129c <_strtol_l.constprop.0>

080113a4 <__ascii_wctomb>:
 80113a4:	b149      	cbz	r1, 80113ba <__ascii_wctomb+0x16>
 80113a6:	2aff      	cmp	r2, #255	; 0xff
 80113a8:	bf85      	ittet	hi
 80113aa:	238a      	movhi	r3, #138	; 0x8a
 80113ac:	6003      	strhi	r3, [r0, #0]
 80113ae:	700a      	strbls	r2, [r1, #0]
 80113b0:	f04f 30ff 	movhi.w	r0, #4294967295
 80113b4:	bf98      	it	ls
 80113b6:	2001      	movls	r0, #1
 80113b8:	4770      	bx	lr
 80113ba:	4608      	mov	r0, r1
 80113bc:	4770      	bx	lr

080113be <__ssputs_r>:
 80113be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113c2:	688e      	ldr	r6, [r1, #8]
 80113c4:	461f      	mov	r7, r3
 80113c6:	42be      	cmp	r6, r7
 80113c8:	680b      	ldr	r3, [r1, #0]
 80113ca:	4682      	mov	sl, r0
 80113cc:	460c      	mov	r4, r1
 80113ce:	4690      	mov	r8, r2
 80113d0:	d82c      	bhi.n	801142c <__ssputs_r+0x6e>
 80113d2:	898a      	ldrh	r2, [r1, #12]
 80113d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80113d8:	d026      	beq.n	8011428 <__ssputs_r+0x6a>
 80113da:	6965      	ldr	r5, [r4, #20]
 80113dc:	6909      	ldr	r1, [r1, #16]
 80113de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80113e2:	eba3 0901 	sub.w	r9, r3, r1
 80113e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80113ea:	1c7b      	adds	r3, r7, #1
 80113ec:	444b      	add	r3, r9
 80113ee:	106d      	asrs	r5, r5, #1
 80113f0:	429d      	cmp	r5, r3
 80113f2:	bf38      	it	cc
 80113f4:	461d      	movcc	r5, r3
 80113f6:	0553      	lsls	r3, r2, #21
 80113f8:	d527      	bpl.n	801144a <__ssputs_r+0x8c>
 80113fa:	4629      	mov	r1, r5
 80113fc:	f7fc f928 	bl	800d650 <_malloc_r>
 8011400:	4606      	mov	r6, r0
 8011402:	b360      	cbz	r0, 801145e <__ssputs_r+0xa0>
 8011404:	6921      	ldr	r1, [r4, #16]
 8011406:	464a      	mov	r2, r9
 8011408:	f7fe f84b 	bl	800f4a2 <memcpy>
 801140c:	89a3      	ldrh	r3, [r4, #12]
 801140e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011416:	81a3      	strh	r3, [r4, #12]
 8011418:	6126      	str	r6, [r4, #16]
 801141a:	6165      	str	r5, [r4, #20]
 801141c:	444e      	add	r6, r9
 801141e:	eba5 0509 	sub.w	r5, r5, r9
 8011422:	6026      	str	r6, [r4, #0]
 8011424:	60a5      	str	r5, [r4, #8]
 8011426:	463e      	mov	r6, r7
 8011428:	42be      	cmp	r6, r7
 801142a:	d900      	bls.n	801142e <__ssputs_r+0x70>
 801142c:	463e      	mov	r6, r7
 801142e:	6820      	ldr	r0, [r4, #0]
 8011430:	4632      	mov	r2, r6
 8011432:	4641      	mov	r1, r8
 8011434:	f000 f9ca 	bl	80117cc <memmove>
 8011438:	68a3      	ldr	r3, [r4, #8]
 801143a:	1b9b      	subs	r3, r3, r6
 801143c:	60a3      	str	r3, [r4, #8]
 801143e:	6823      	ldr	r3, [r4, #0]
 8011440:	4433      	add	r3, r6
 8011442:	6023      	str	r3, [r4, #0]
 8011444:	2000      	movs	r0, #0
 8011446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801144a:	462a      	mov	r2, r5
 801144c:	f000 fa18 	bl	8011880 <_realloc_r>
 8011450:	4606      	mov	r6, r0
 8011452:	2800      	cmp	r0, #0
 8011454:	d1e0      	bne.n	8011418 <__ssputs_r+0x5a>
 8011456:	6921      	ldr	r1, [r4, #16]
 8011458:	4650      	mov	r0, sl
 801145a:	f7fe febb 	bl	80101d4 <_free_r>
 801145e:	230c      	movs	r3, #12
 8011460:	f8ca 3000 	str.w	r3, [sl]
 8011464:	89a3      	ldrh	r3, [r4, #12]
 8011466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801146a:	81a3      	strh	r3, [r4, #12]
 801146c:	f04f 30ff 	mov.w	r0, #4294967295
 8011470:	e7e9      	b.n	8011446 <__ssputs_r+0x88>
	...

08011474 <_svfiprintf_r>:
 8011474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011478:	4698      	mov	r8, r3
 801147a:	898b      	ldrh	r3, [r1, #12]
 801147c:	061b      	lsls	r3, r3, #24
 801147e:	b09d      	sub	sp, #116	; 0x74
 8011480:	4607      	mov	r7, r0
 8011482:	460d      	mov	r5, r1
 8011484:	4614      	mov	r4, r2
 8011486:	d50e      	bpl.n	80114a6 <_svfiprintf_r+0x32>
 8011488:	690b      	ldr	r3, [r1, #16]
 801148a:	b963      	cbnz	r3, 80114a6 <_svfiprintf_r+0x32>
 801148c:	2140      	movs	r1, #64	; 0x40
 801148e:	f7fc f8df 	bl	800d650 <_malloc_r>
 8011492:	6028      	str	r0, [r5, #0]
 8011494:	6128      	str	r0, [r5, #16]
 8011496:	b920      	cbnz	r0, 80114a2 <_svfiprintf_r+0x2e>
 8011498:	230c      	movs	r3, #12
 801149a:	603b      	str	r3, [r7, #0]
 801149c:	f04f 30ff 	mov.w	r0, #4294967295
 80114a0:	e0d0      	b.n	8011644 <_svfiprintf_r+0x1d0>
 80114a2:	2340      	movs	r3, #64	; 0x40
 80114a4:	616b      	str	r3, [r5, #20]
 80114a6:	2300      	movs	r3, #0
 80114a8:	9309      	str	r3, [sp, #36]	; 0x24
 80114aa:	2320      	movs	r3, #32
 80114ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80114b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80114b4:	2330      	movs	r3, #48	; 0x30
 80114b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801165c <_svfiprintf_r+0x1e8>
 80114ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80114be:	f04f 0901 	mov.w	r9, #1
 80114c2:	4623      	mov	r3, r4
 80114c4:	469a      	mov	sl, r3
 80114c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80114ca:	b10a      	cbz	r2, 80114d0 <_svfiprintf_r+0x5c>
 80114cc:	2a25      	cmp	r2, #37	; 0x25
 80114ce:	d1f9      	bne.n	80114c4 <_svfiprintf_r+0x50>
 80114d0:	ebba 0b04 	subs.w	fp, sl, r4
 80114d4:	d00b      	beq.n	80114ee <_svfiprintf_r+0x7a>
 80114d6:	465b      	mov	r3, fp
 80114d8:	4622      	mov	r2, r4
 80114da:	4629      	mov	r1, r5
 80114dc:	4638      	mov	r0, r7
 80114de:	f7ff ff6e 	bl	80113be <__ssputs_r>
 80114e2:	3001      	adds	r0, #1
 80114e4:	f000 80a9 	beq.w	801163a <_svfiprintf_r+0x1c6>
 80114e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114ea:	445a      	add	r2, fp
 80114ec:	9209      	str	r2, [sp, #36]	; 0x24
 80114ee:	f89a 3000 	ldrb.w	r3, [sl]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	f000 80a1 	beq.w	801163a <_svfiprintf_r+0x1c6>
 80114f8:	2300      	movs	r3, #0
 80114fa:	f04f 32ff 	mov.w	r2, #4294967295
 80114fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011502:	f10a 0a01 	add.w	sl, sl, #1
 8011506:	9304      	str	r3, [sp, #16]
 8011508:	9307      	str	r3, [sp, #28]
 801150a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801150e:	931a      	str	r3, [sp, #104]	; 0x68
 8011510:	4654      	mov	r4, sl
 8011512:	2205      	movs	r2, #5
 8011514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011518:	4850      	ldr	r0, [pc, #320]	; (801165c <_svfiprintf_r+0x1e8>)
 801151a:	f7ee fe59 	bl	80001d0 <memchr>
 801151e:	9a04      	ldr	r2, [sp, #16]
 8011520:	b9d8      	cbnz	r0, 801155a <_svfiprintf_r+0xe6>
 8011522:	06d0      	lsls	r0, r2, #27
 8011524:	bf44      	itt	mi
 8011526:	2320      	movmi	r3, #32
 8011528:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801152c:	0711      	lsls	r1, r2, #28
 801152e:	bf44      	itt	mi
 8011530:	232b      	movmi	r3, #43	; 0x2b
 8011532:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011536:	f89a 3000 	ldrb.w	r3, [sl]
 801153a:	2b2a      	cmp	r3, #42	; 0x2a
 801153c:	d015      	beq.n	801156a <_svfiprintf_r+0xf6>
 801153e:	9a07      	ldr	r2, [sp, #28]
 8011540:	4654      	mov	r4, sl
 8011542:	2000      	movs	r0, #0
 8011544:	f04f 0c0a 	mov.w	ip, #10
 8011548:	4621      	mov	r1, r4
 801154a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801154e:	3b30      	subs	r3, #48	; 0x30
 8011550:	2b09      	cmp	r3, #9
 8011552:	d94d      	bls.n	80115f0 <_svfiprintf_r+0x17c>
 8011554:	b1b0      	cbz	r0, 8011584 <_svfiprintf_r+0x110>
 8011556:	9207      	str	r2, [sp, #28]
 8011558:	e014      	b.n	8011584 <_svfiprintf_r+0x110>
 801155a:	eba0 0308 	sub.w	r3, r0, r8
 801155e:	fa09 f303 	lsl.w	r3, r9, r3
 8011562:	4313      	orrs	r3, r2
 8011564:	9304      	str	r3, [sp, #16]
 8011566:	46a2      	mov	sl, r4
 8011568:	e7d2      	b.n	8011510 <_svfiprintf_r+0x9c>
 801156a:	9b03      	ldr	r3, [sp, #12]
 801156c:	1d19      	adds	r1, r3, #4
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	9103      	str	r1, [sp, #12]
 8011572:	2b00      	cmp	r3, #0
 8011574:	bfbb      	ittet	lt
 8011576:	425b      	neglt	r3, r3
 8011578:	f042 0202 	orrlt.w	r2, r2, #2
 801157c:	9307      	strge	r3, [sp, #28]
 801157e:	9307      	strlt	r3, [sp, #28]
 8011580:	bfb8      	it	lt
 8011582:	9204      	strlt	r2, [sp, #16]
 8011584:	7823      	ldrb	r3, [r4, #0]
 8011586:	2b2e      	cmp	r3, #46	; 0x2e
 8011588:	d10c      	bne.n	80115a4 <_svfiprintf_r+0x130>
 801158a:	7863      	ldrb	r3, [r4, #1]
 801158c:	2b2a      	cmp	r3, #42	; 0x2a
 801158e:	d134      	bne.n	80115fa <_svfiprintf_r+0x186>
 8011590:	9b03      	ldr	r3, [sp, #12]
 8011592:	1d1a      	adds	r2, r3, #4
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	9203      	str	r2, [sp, #12]
 8011598:	2b00      	cmp	r3, #0
 801159a:	bfb8      	it	lt
 801159c:	f04f 33ff 	movlt.w	r3, #4294967295
 80115a0:	3402      	adds	r4, #2
 80115a2:	9305      	str	r3, [sp, #20]
 80115a4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801166c <_svfiprintf_r+0x1f8>
 80115a8:	7821      	ldrb	r1, [r4, #0]
 80115aa:	2203      	movs	r2, #3
 80115ac:	4650      	mov	r0, sl
 80115ae:	f7ee fe0f 	bl	80001d0 <memchr>
 80115b2:	b138      	cbz	r0, 80115c4 <_svfiprintf_r+0x150>
 80115b4:	9b04      	ldr	r3, [sp, #16]
 80115b6:	eba0 000a 	sub.w	r0, r0, sl
 80115ba:	2240      	movs	r2, #64	; 0x40
 80115bc:	4082      	lsls	r2, r0
 80115be:	4313      	orrs	r3, r2
 80115c0:	3401      	adds	r4, #1
 80115c2:	9304      	str	r3, [sp, #16]
 80115c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115c8:	4825      	ldr	r0, [pc, #148]	; (8011660 <_svfiprintf_r+0x1ec>)
 80115ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80115ce:	2206      	movs	r2, #6
 80115d0:	f7ee fdfe 	bl	80001d0 <memchr>
 80115d4:	2800      	cmp	r0, #0
 80115d6:	d038      	beq.n	801164a <_svfiprintf_r+0x1d6>
 80115d8:	4b22      	ldr	r3, [pc, #136]	; (8011664 <_svfiprintf_r+0x1f0>)
 80115da:	bb1b      	cbnz	r3, 8011624 <_svfiprintf_r+0x1b0>
 80115dc:	9b03      	ldr	r3, [sp, #12]
 80115de:	3307      	adds	r3, #7
 80115e0:	f023 0307 	bic.w	r3, r3, #7
 80115e4:	3308      	adds	r3, #8
 80115e6:	9303      	str	r3, [sp, #12]
 80115e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115ea:	4433      	add	r3, r6
 80115ec:	9309      	str	r3, [sp, #36]	; 0x24
 80115ee:	e768      	b.n	80114c2 <_svfiprintf_r+0x4e>
 80115f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80115f4:	460c      	mov	r4, r1
 80115f6:	2001      	movs	r0, #1
 80115f8:	e7a6      	b.n	8011548 <_svfiprintf_r+0xd4>
 80115fa:	2300      	movs	r3, #0
 80115fc:	3401      	adds	r4, #1
 80115fe:	9305      	str	r3, [sp, #20]
 8011600:	4619      	mov	r1, r3
 8011602:	f04f 0c0a 	mov.w	ip, #10
 8011606:	4620      	mov	r0, r4
 8011608:	f810 2b01 	ldrb.w	r2, [r0], #1
 801160c:	3a30      	subs	r2, #48	; 0x30
 801160e:	2a09      	cmp	r2, #9
 8011610:	d903      	bls.n	801161a <_svfiprintf_r+0x1a6>
 8011612:	2b00      	cmp	r3, #0
 8011614:	d0c6      	beq.n	80115a4 <_svfiprintf_r+0x130>
 8011616:	9105      	str	r1, [sp, #20]
 8011618:	e7c4      	b.n	80115a4 <_svfiprintf_r+0x130>
 801161a:	fb0c 2101 	mla	r1, ip, r1, r2
 801161e:	4604      	mov	r4, r0
 8011620:	2301      	movs	r3, #1
 8011622:	e7f0      	b.n	8011606 <_svfiprintf_r+0x192>
 8011624:	ab03      	add	r3, sp, #12
 8011626:	9300      	str	r3, [sp, #0]
 8011628:	462a      	mov	r2, r5
 801162a:	4b0f      	ldr	r3, [pc, #60]	; (8011668 <_svfiprintf_r+0x1f4>)
 801162c:	a904      	add	r1, sp, #16
 801162e:	4638      	mov	r0, r7
 8011630:	f7fc ff58 	bl	800e4e4 <_printf_float>
 8011634:	1c42      	adds	r2, r0, #1
 8011636:	4606      	mov	r6, r0
 8011638:	d1d6      	bne.n	80115e8 <_svfiprintf_r+0x174>
 801163a:	89ab      	ldrh	r3, [r5, #12]
 801163c:	065b      	lsls	r3, r3, #25
 801163e:	f53f af2d 	bmi.w	801149c <_svfiprintf_r+0x28>
 8011642:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011644:	b01d      	add	sp, #116	; 0x74
 8011646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801164a:	ab03      	add	r3, sp, #12
 801164c:	9300      	str	r3, [sp, #0]
 801164e:	462a      	mov	r2, r5
 8011650:	4b05      	ldr	r3, [pc, #20]	; (8011668 <_svfiprintf_r+0x1f4>)
 8011652:	a904      	add	r1, sp, #16
 8011654:	4638      	mov	r0, r7
 8011656:	f7fd f9e9 	bl	800ea2c <_printf_i>
 801165a:	e7eb      	b.n	8011634 <_svfiprintf_r+0x1c0>
 801165c:	080122cd 	.word	0x080122cd
 8011660:	080122d7 	.word	0x080122d7
 8011664:	0800e4e5 	.word	0x0800e4e5
 8011668:	080113bf 	.word	0x080113bf
 801166c:	080122d3 	.word	0x080122d3

08011670 <__sflush_r>:
 8011670:	898a      	ldrh	r2, [r1, #12]
 8011672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011676:	4605      	mov	r5, r0
 8011678:	0710      	lsls	r0, r2, #28
 801167a:	460c      	mov	r4, r1
 801167c:	d458      	bmi.n	8011730 <__sflush_r+0xc0>
 801167e:	684b      	ldr	r3, [r1, #4]
 8011680:	2b00      	cmp	r3, #0
 8011682:	dc05      	bgt.n	8011690 <__sflush_r+0x20>
 8011684:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011686:	2b00      	cmp	r3, #0
 8011688:	dc02      	bgt.n	8011690 <__sflush_r+0x20>
 801168a:	2000      	movs	r0, #0
 801168c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011690:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011692:	2e00      	cmp	r6, #0
 8011694:	d0f9      	beq.n	801168a <__sflush_r+0x1a>
 8011696:	2300      	movs	r3, #0
 8011698:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801169c:	682f      	ldr	r7, [r5, #0]
 801169e:	6a21      	ldr	r1, [r4, #32]
 80116a0:	602b      	str	r3, [r5, #0]
 80116a2:	d032      	beq.n	801170a <__sflush_r+0x9a>
 80116a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80116a6:	89a3      	ldrh	r3, [r4, #12]
 80116a8:	075a      	lsls	r2, r3, #29
 80116aa:	d505      	bpl.n	80116b8 <__sflush_r+0x48>
 80116ac:	6863      	ldr	r3, [r4, #4]
 80116ae:	1ac0      	subs	r0, r0, r3
 80116b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80116b2:	b10b      	cbz	r3, 80116b8 <__sflush_r+0x48>
 80116b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80116b6:	1ac0      	subs	r0, r0, r3
 80116b8:	2300      	movs	r3, #0
 80116ba:	4602      	mov	r2, r0
 80116bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80116be:	6a21      	ldr	r1, [r4, #32]
 80116c0:	4628      	mov	r0, r5
 80116c2:	47b0      	blx	r6
 80116c4:	1c43      	adds	r3, r0, #1
 80116c6:	89a3      	ldrh	r3, [r4, #12]
 80116c8:	d106      	bne.n	80116d8 <__sflush_r+0x68>
 80116ca:	6829      	ldr	r1, [r5, #0]
 80116cc:	291d      	cmp	r1, #29
 80116ce:	d82b      	bhi.n	8011728 <__sflush_r+0xb8>
 80116d0:	4a29      	ldr	r2, [pc, #164]	; (8011778 <__sflush_r+0x108>)
 80116d2:	410a      	asrs	r2, r1
 80116d4:	07d6      	lsls	r6, r2, #31
 80116d6:	d427      	bmi.n	8011728 <__sflush_r+0xb8>
 80116d8:	2200      	movs	r2, #0
 80116da:	6062      	str	r2, [r4, #4]
 80116dc:	04d9      	lsls	r1, r3, #19
 80116de:	6922      	ldr	r2, [r4, #16]
 80116e0:	6022      	str	r2, [r4, #0]
 80116e2:	d504      	bpl.n	80116ee <__sflush_r+0x7e>
 80116e4:	1c42      	adds	r2, r0, #1
 80116e6:	d101      	bne.n	80116ec <__sflush_r+0x7c>
 80116e8:	682b      	ldr	r3, [r5, #0]
 80116ea:	b903      	cbnz	r3, 80116ee <__sflush_r+0x7e>
 80116ec:	6560      	str	r0, [r4, #84]	; 0x54
 80116ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80116f0:	602f      	str	r7, [r5, #0]
 80116f2:	2900      	cmp	r1, #0
 80116f4:	d0c9      	beq.n	801168a <__sflush_r+0x1a>
 80116f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80116fa:	4299      	cmp	r1, r3
 80116fc:	d002      	beq.n	8011704 <__sflush_r+0x94>
 80116fe:	4628      	mov	r0, r5
 8011700:	f7fe fd68 	bl	80101d4 <_free_r>
 8011704:	2000      	movs	r0, #0
 8011706:	6360      	str	r0, [r4, #52]	; 0x34
 8011708:	e7c0      	b.n	801168c <__sflush_r+0x1c>
 801170a:	2301      	movs	r3, #1
 801170c:	4628      	mov	r0, r5
 801170e:	47b0      	blx	r6
 8011710:	1c41      	adds	r1, r0, #1
 8011712:	d1c8      	bne.n	80116a6 <__sflush_r+0x36>
 8011714:	682b      	ldr	r3, [r5, #0]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d0c5      	beq.n	80116a6 <__sflush_r+0x36>
 801171a:	2b1d      	cmp	r3, #29
 801171c:	d001      	beq.n	8011722 <__sflush_r+0xb2>
 801171e:	2b16      	cmp	r3, #22
 8011720:	d101      	bne.n	8011726 <__sflush_r+0xb6>
 8011722:	602f      	str	r7, [r5, #0]
 8011724:	e7b1      	b.n	801168a <__sflush_r+0x1a>
 8011726:	89a3      	ldrh	r3, [r4, #12]
 8011728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801172c:	81a3      	strh	r3, [r4, #12]
 801172e:	e7ad      	b.n	801168c <__sflush_r+0x1c>
 8011730:	690f      	ldr	r7, [r1, #16]
 8011732:	2f00      	cmp	r7, #0
 8011734:	d0a9      	beq.n	801168a <__sflush_r+0x1a>
 8011736:	0793      	lsls	r3, r2, #30
 8011738:	680e      	ldr	r6, [r1, #0]
 801173a:	bf08      	it	eq
 801173c:	694b      	ldreq	r3, [r1, #20]
 801173e:	600f      	str	r7, [r1, #0]
 8011740:	bf18      	it	ne
 8011742:	2300      	movne	r3, #0
 8011744:	eba6 0807 	sub.w	r8, r6, r7
 8011748:	608b      	str	r3, [r1, #8]
 801174a:	f1b8 0f00 	cmp.w	r8, #0
 801174e:	dd9c      	ble.n	801168a <__sflush_r+0x1a>
 8011750:	6a21      	ldr	r1, [r4, #32]
 8011752:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011754:	4643      	mov	r3, r8
 8011756:	463a      	mov	r2, r7
 8011758:	4628      	mov	r0, r5
 801175a:	47b0      	blx	r6
 801175c:	2800      	cmp	r0, #0
 801175e:	dc06      	bgt.n	801176e <__sflush_r+0xfe>
 8011760:	89a3      	ldrh	r3, [r4, #12]
 8011762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011766:	81a3      	strh	r3, [r4, #12]
 8011768:	f04f 30ff 	mov.w	r0, #4294967295
 801176c:	e78e      	b.n	801168c <__sflush_r+0x1c>
 801176e:	4407      	add	r7, r0
 8011770:	eba8 0800 	sub.w	r8, r8, r0
 8011774:	e7e9      	b.n	801174a <__sflush_r+0xda>
 8011776:	bf00      	nop
 8011778:	dfbffffe 	.word	0xdfbffffe

0801177c <_fflush_r>:
 801177c:	b538      	push	{r3, r4, r5, lr}
 801177e:	690b      	ldr	r3, [r1, #16]
 8011780:	4605      	mov	r5, r0
 8011782:	460c      	mov	r4, r1
 8011784:	b913      	cbnz	r3, 801178c <_fflush_r+0x10>
 8011786:	2500      	movs	r5, #0
 8011788:	4628      	mov	r0, r5
 801178a:	bd38      	pop	{r3, r4, r5, pc}
 801178c:	b118      	cbz	r0, 8011796 <_fflush_r+0x1a>
 801178e:	6a03      	ldr	r3, [r0, #32]
 8011790:	b90b      	cbnz	r3, 8011796 <_fflush_r+0x1a>
 8011792:	f7fd fd09 	bl	800f1a8 <__sinit>
 8011796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d0f3      	beq.n	8011786 <_fflush_r+0xa>
 801179e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80117a0:	07d0      	lsls	r0, r2, #31
 80117a2:	d404      	bmi.n	80117ae <_fflush_r+0x32>
 80117a4:	0599      	lsls	r1, r3, #22
 80117a6:	d402      	bmi.n	80117ae <_fflush_r+0x32>
 80117a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117aa:	f7fd fe78 	bl	800f49e <__retarget_lock_acquire_recursive>
 80117ae:	4628      	mov	r0, r5
 80117b0:	4621      	mov	r1, r4
 80117b2:	f7ff ff5d 	bl	8011670 <__sflush_r>
 80117b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80117b8:	07da      	lsls	r2, r3, #31
 80117ba:	4605      	mov	r5, r0
 80117bc:	d4e4      	bmi.n	8011788 <_fflush_r+0xc>
 80117be:	89a3      	ldrh	r3, [r4, #12]
 80117c0:	059b      	lsls	r3, r3, #22
 80117c2:	d4e1      	bmi.n	8011788 <_fflush_r+0xc>
 80117c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117c6:	f7fd fe6b 	bl	800f4a0 <__retarget_lock_release_recursive>
 80117ca:	e7dd      	b.n	8011788 <_fflush_r+0xc>

080117cc <memmove>:
 80117cc:	4288      	cmp	r0, r1
 80117ce:	b510      	push	{r4, lr}
 80117d0:	eb01 0402 	add.w	r4, r1, r2
 80117d4:	d902      	bls.n	80117dc <memmove+0x10>
 80117d6:	4284      	cmp	r4, r0
 80117d8:	4623      	mov	r3, r4
 80117da:	d807      	bhi.n	80117ec <memmove+0x20>
 80117dc:	1e43      	subs	r3, r0, #1
 80117de:	42a1      	cmp	r1, r4
 80117e0:	d008      	beq.n	80117f4 <memmove+0x28>
 80117e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80117e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80117ea:	e7f8      	b.n	80117de <memmove+0x12>
 80117ec:	4402      	add	r2, r0
 80117ee:	4601      	mov	r1, r0
 80117f0:	428a      	cmp	r2, r1
 80117f2:	d100      	bne.n	80117f6 <memmove+0x2a>
 80117f4:	bd10      	pop	{r4, pc}
 80117f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80117fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80117fe:	e7f7      	b.n	80117f0 <memmove+0x24>

08011800 <strnlen>:
 8011800:	b510      	push	{r4, lr}
 8011802:	4602      	mov	r2, r0
 8011804:	4401      	add	r1, r0
 8011806:	428a      	cmp	r2, r1
 8011808:	4613      	mov	r3, r2
 801180a:	d003      	beq.n	8011814 <strnlen+0x14>
 801180c:	781c      	ldrb	r4, [r3, #0]
 801180e:	3201      	adds	r2, #1
 8011810:	2c00      	cmp	r4, #0
 8011812:	d1f8      	bne.n	8011806 <strnlen+0x6>
 8011814:	1a18      	subs	r0, r3, r0
 8011816:	bd10      	pop	{r4, pc}

08011818 <__assert_func>:
 8011818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801181a:	4614      	mov	r4, r2
 801181c:	461a      	mov	r2, r3
 801181e:	4b09      	ldr	r3, [pc, #36]	; (8011844 <__assert_func+0x2c>)
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	4605      	mov	r5, r0
 8011824:	68d8      	ldr	r0, [r3, #12]
 8011826:	b14c      	cbz	r4, 801183c <__assert_func+0x24>
 8011828:	4b07      	ldr	r3, [pc, #28]	; (8011848 <__assert_func+0x30>)
 801182a:	9100      	str	r1, [sp, #0]
 801182c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011830:	4906      	ldr	r1, [pc, #24]	; (801184c <__assert_func+0x34>)
 8011832:	462b      	mov	r3, r5
 8011834:	f000 f854 	bl	80118e0 <fiprintf>
 8011838:	f000 f864 	bl	8011904 <abort>
 801183c:	4b04      	ldr	r3, [pc, #16]	; (8011850 <__assert_func+0x38>)
 801183e:	461c      	mov	r4, r3
 8011840:	e7f3      	b.n	801182a <__assert_func+0x12>
 8011842:	bf00      	nop
 8011844:	200001f4 	.word	0x200001f4
 8011848:	080122de 	.word	0x080122de
 801184c:	080122eb 	.word	0x080122eb
 8011850:	08012319 	.word	0x08012319

08011854 <_calloc_r>:
 8011854:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011856:	fba1 2402 	umull	r2, r4, r1, r2
 801185a:	b94c      	cbnz	r4, 8011870 <_calloc_r+0x1c>
 801185c:	4611      	mov	r1, r2
 801185e:	9201      	str	r2, [sp, #4]
 8011860:	f7fb fef6 	bl	800d650 <_malloc_r>
 8011864:	9a01      	ldr	r2, [sp, #4]
 8011866:	4605      	mov	r5, r0
 8011868:	b930      	cbnz	r0, 8011878 <_calloc_r+0x24>
 801186a:	4628      	mov	r0, r5
 801186c:	b003      	add	sp, #12
 801186e:	bd30      	pop	{r4, r5, pc}
 8011870:	220c      	movs	r2, #12
 8011872:	6002      	str	r2, [r0, #0]
 8011874:	2500      	movs	r5, #0
 8011876:	e7f8      	b.n	801186a <_calloc_r+0x16>
 8011878:	4621      	mov	r1, r4
 801187a:	f7fd fd2e 	bl	800f2da <memset>
 801187e:	e7f4      	b.n	801186a <_calloc_r+0x16>

08011880 <_realloc_r>:
 8011880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011884:	4680      	mov	r8, r0
 8011886:	4614      	mov	r4, r2
 8011888:	460e      	mov	r6, r1
 801188a:	b921      	cbnz	r1, 8011896 <_realloc_r+0x16>
 801188c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011890:	4611      	mov	r1, r2
 8011892:	f7fb bedd 	b.w	800d650 <_malloc_r>
 8011896:	b92a      	cbnz	r2, 80118a4 <_realloc_r+0x24>
 8011898:	f7fe fc9c 	bl	80101d4 <_free_r>
 801189c:	4625      	mov	r5, r4
 801189e:	4628      	mov	r0, r5
 80118a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118a4:	f000 f835 	bl	8011912 <_malloc_usable_size_r>
 80118a8:	4284      	cmp	r4, r0
 80118aa:	4607      	mov	r7, r0
 80118ac:	d802      	bhi.n	80118b4 <_realloc_r+0x34>
 80118ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80118b2:	d812      	bhi.n	80118da <_realloc_r+0x5a>
 80118b4:	4621      	mov	r1, r4
 80118b6:	4640      	mov	r0, r8
 80118b8:	f7fb feca 	bl	800d650 <_malloc_r>
 80118bc:	4605      	mov	r5, r0
 80118be:	2800      	cmp	r0, #0
 80118c0:	d0ed      	beq.n	801189e <_realloc_r+0x1e>
 80118c2:	42bc      	cmp	r4, r7
 80118c4:	4622      	mov	r2, r4
 80118c6:	4631      	mov	r1, r6
 80118c8:	bf28      	it	cs
 80118ca:	463a      	movcs	r2, r7
 80118cc:	f7fd fde9 	bl	800f4a2 <memcpy>
 80118d0:	4631      	mov	r1, r6
 80118d2:	4640      	mov	r0, r8
 80118d4:	f7fe fc7e 	bl	80101d4 <_free_r>
 80118d8:	e7e1      	b.n	801189e <_realloc_r+0x1e>
 80118da:	4635      	mov	r5, r6
 80118dc:	e7df      	b.n	801189e <_realloc_r+0x1e>
	...

080118e0 <fiprintf>:
 80118e0:	b40e      	push	{r1, r2, r3}
 80118e2:	b503      	push	{r0, r1, lr}
 80118e4:	4601      	mov	r1, r0
 80118e6:	ab03      	add	r3, sp, #12
 80118e8:	4805      	ldr	r0, [pc, #20]	; (8011900 <fiprintf+0x20>)
 80118ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80118ee:	6800      	ldr	r0, [r0, #0]
 80118f0:	9301      	str	r3, [sp, #4]
 80118f2:	f000 f83f 	bl	8011974 <_vfiprintf_r>
 80118f6:	b002      	add	sp, #8
 80118f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80118fc:	b003      	add	sp, #12
 80118fe:	4770      	bx	lr
 8011900:	200001f4 	.word	0x200001f4

08011904 <abort>:
 8011904:	b508      	push	{r3, lr}
 8011906:	2006      	movs	r0, #6
 8011908:	f000 fa0c 	bl	8011d24 <raise>
 801190c:	2001      	movs	r0, #1
 801190e:	f7f0 fc0b 	bl	8002128 <_exit>

08011912 <_malloc_usable_size_r>:
 8011912:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011916:	1f18      	subs	r0, r3, #4
 8011918:	2b00      	cmp	r3, #0
 801191a:	bfbc      	itt	lt
 801191c:	580b      	ldrlt	r3, [r1, r0]
 801191e:	18c0      	addlt	r0, r0, r3
 8011920:	4770      	bx	lr

08011922 <__sfputc_r>:
 8011922:	6893      	ldr	r3, [r2, #8]
 8011924:	3b01      	subs	r3, #1
 8011926:	2b00      	cmp	r3, #0
 8011928:	b410      	push	{r4}
 801192a:	6093      	str	r3, [r2, #8]
 801192c:	da08      	bge.n	8011940 <__sfputc_r+0x1e>
 801192e:	6994      	ldr	r4, [r2, #24]
 8011930:	42a3      	cmp	r3, r4
 8011932:	db01      	blt.n	8011938 <__sfputc_r+0x16>
 8011934:	290a      	cmp	r1, #10
 8011936:	d103      	bne.n	8011940 <__sfputc_r+0x1e>
 8011938:	f85d 4b04 	ldr.w	r4, [sp], #4
 801193c:	f000 b934 	b.w	8011ba8 <__swbuf_r>
 8011940:	6813      	ldr	r3, [r2, #0]
 8011942:	1c58      	adds	r0, r3, #1
 8011944:	6010      	str	r0, [r2, #0]
 8011946:	7019      	strb	r1, [r3, #0]
 8011948:	4608      	mov	r0, r1
 801194a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801194e:	4770      	bx	lr

08011950 <__sfputs_r>:
 8011950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011952:	4606      	mov	r6, r0
 8011954:	460f      	mov	r7, r1
 8011956:	4614      	mov	r4, r2
 8011958:	18d5      	adds	r5, r2, r3
 801195a:	42ac      	cmp	r4, r5
 801195c:	d101      	bne.n	8011962 <__sfputs_r+0x12>
 801195e:	2000      	movs	r0, #0
 8011960:	e007      	b.n	8011972 <__sfputs_r+0x22>
 8011962:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011966:	463a      	mov	r2, r7
 8011968:	4630      	mov	r0, r6
 801196a:	f7ff ffda 	bl	8011922 <__sfputc_r>
 801196e:	1c43      	adds	r3, r0, #1
 8011970:	d1f3      	bne.n	801195a <__sfputs_r+0xa>
 8011972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011974 <_vfiprintf_r>:
 8011974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011978:	460d      	mov	r5, r1
 801197a:	b09d      	sub	sp, #116	; 0x74
 801197c:	4614      	mov	r4, r2
 801197e:	4698      	mov	r8, r3
 8011980:	4606      	mov	r6, r0
 8011982:	b118      	cbz	r0, 801198c <_vfiprintf_r+0x18>
 8011984:	6a03      	ldr	r3, [r0, #32]
 8011986:	b90b      	cbnz	r3, 801198c <_vfiprintf_r+0x18>
 8011988:	f7fd fc0e 	bl	800f1a8 <__sinit>
 801198c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801198e:	07d9      	lsls	r1, r3, #31
 8011990:	d405      	bmi.n	801199e <_vfiprintf_r+0x2a>
 8011992:	89ab      	ldrh	r3, [r5, #12]
 8011994:	059a      	lsls	r2, r3, #22
 8011996:	d402      	bmi.n	801199e <_vfiprintf_r+0x2a>
 8011998:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801199a:	f7fd fd80 	bl	800f49e <__retarget_lock_acquire_recursive>
 801199e:	89ab      	ldrh	r3, [r5, #12]
 80119a0:	071b      	lsls	r3, r3, #28
 80119a2:	d501      	bpl.n	80119a8 <_vfiprintf_r+0x34>
 80119a4:	692b      	ldr	r3, [r5, #16]
 80119a6:	b99b      	cbnz	r3, 80119d0 <_vfiprintf_r+0x5c>
 80119a8:	4629      	mov	r1, r5
 80119aa:	4630      	mov	r0, r6
 80119ac:	f000 f93a 	bl	8011c24 <__swsetup_r>
 80119b0:	b170      	cbz	r0, 80119d0 <_vfiprintf_r+0x5c>
 80119b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80119b4:	07dc      	lsls	r4, r3, #31
 80119b6:	d504      	bpl.n	80119c2 <_vfiprintf_r+0x4e>
 80119b8:	f04f 30ff 	mov.w	r0, #4294967295
 80119bc:	b01d      	add	sp, #116	; 0x74
 80119be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119c2:	89ab      	ldrh	r3, [r5, #12]
 80119c4:	0598      	lsls	r0, r3, #22
 80119c6:	d4f7      	bmi.n	80119b8 <_vfiprintf_r+0x44>
 80119c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80119ca:	f7fd fd69 	bl	800f4a0 <__retarget_lock_release_recursive>
 80119ce:	e7f3      	b.n	80119b8 <_vfiprintf_r+0x44>
 80119d0:	2300      	movs	r3, #0
 80119d2:	9309      	str	r3, [sp, #36]	; 0x24
 80119d4:	2320      	movs	r3, #32
 80119d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80119da:	f8cd 800c 	str.w	r8, [sp, #12]
 80119de:	2330      	movs	r3, #48	; 0x30
 80119e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011b94 <_vfiprintf_r+0x220>
 80119e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80119e8:	f04f 0901 	mov.w	r9, #1
 80119ec:	4623      	mov	r3, r4
 80119ee:	469a      	mov	sl, r3
 80119f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80119f4:	b10a      	cbz	r2, 80119fa <_vfiprintf_r+0x86>
 80119f6:	2a25      	cmp	r2, #37	; 0x25
 80119f8:	d1f9      	bne.n	80119ee <_vfiprintf_r+0x7a>
 80119fa:	ebba 0b04 	subs.w	fp, sl, r4
 80119fe:	d00b      	beq.n	8011a18 <_vfiprintf_r+0xa4>
 8011a00:	465b      	mov	r3, fp
 8011a02:	4622      	mov	r2, r4
 8011a04:	4629      	mov	r1, r5
 8011a06:	4630      	mov	r0, r6
 8011a08:	f7ff ffa2 	bl	8011950 <__sfputs_r>
 8011a0c:	3001      	adds	r0, #1
 8011a0e:	f000 80a9 	beq.w	8011b64 <_vfiprintf_r+0x1f0>
 8011a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a14:	445a      	add	r2, fp
 8011a16:	9209      	str	r2, [sp, #36]	; 0x24
 8011a18:	f89a 3000 	ldrb.w	r3, [sl]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	f000 80a1 	beq.w	8011b64 <_vfiprintf_r+0x1f0>
 8011a22:	2300      	movs	r3, #0
 8011a24:	f04f 32ff 	mov.w	r2, #4294967295
 8011a28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a2c:	f10a 0a01 	add.w	sl, sl, #1
 8011a30:	9304      	str	r3, [sp, #16]
 8011a32:	9307      	str	r3, [sp, #28]
 8011a34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011a38:	931a      	str	r3, [sp, #104]	; 0x68
 8011a3a:	4654      	mov	r4, sl
 8011a3c:	2205      	movs	r2, #5
 8011a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a42:	4854      	ldr	r0, [pc, #336]	; (8011b94 <_vfiprintf_r+0x220>)
 8011a44:	f7ee fbc4 	bl	80001d0 <memchr>
 8011a48:	9a04      	ldr	r2, [sp, #16]
 8011a4a:	b9d8      	cbnz	r0, 8011a84 <_vfiprintf_r+0x110>
 8011a4c:	06d1      	lsls	r1, r2, #27
 8011a4e:	bf44      	itt	mi
 8011a50:	2320      	movmi	r3, #32
 8011a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a56:	0713      	lsls	r3, r2, #28
 8011a58:	bf44      	itt	mi
 8011a5a:	232b      	movmi	r3, #43	; 0x2b
 8011a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a60:	f89a 3000 	ldrb.w	r3, [sl]
 8011a64:	2b2a      	cmp	r3, #42	; 0x2a
 8011a66:	d015      	beq.n	8011a94 <_vfiprintf_r+0x120>
 8011a68:	9a07      	ldr	r2, [sp, #28]
 8011a6a:	4654      	mov	r4, sl
 8011a6c:	2000      	movs	r0, #0
 8011a6e:	f04f 0c0a 	mov.w	ip, #10
 8011a72:	4621      	mov	r1, r4
 8011a74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a78:	3b30      	subs	r3, #48	; 0x30
 8011a7a:	2b09      	cmp	r3, #9
 8011a7c:	d94d      	bls.n	8011b1a <_vfiprintf_r+0x1a6>
 8011a7e:	b1b0      	cbz	r0, 8011aae <_vfiprintf_r+0x13a>
 8011a80:	9207      	str	r2, [sp, #28]
 8011a82:	e014      	b.n	8011aae <_vfiprintf_r+0x13a>
 8011a84:	eba0 0308 	sub.w	r3, r0, r8
 8011a88:	fa09 f303 	lsl.w	r3, r9, r3
 8011a8c:	4313      	orrs	r3, r2
 8011a8e:	9304      	str	r3, [sp, #16]
 8011a90:	46a2      	mov	sl, r4
 8011a92:	e7d2      	b.n	8011a3a <_vfiprintf_r+0xc6>
 8011a94:	9b03      	ldr	r3, [sp, #12]
 8011a96:	1d19      	adds	r1, r3, #4
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	9103      	str	r1, [sp, #12]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	bfbb      	ittet	lt
 8011aa0:	425b      	neglt	r3, r3
 8011aa2:	f042 0202 	orrlt.w	r2, r2, #2
 8011aa6:	9307      	strge	r3, [sp, #28]
 8011aa8:	9307      	strlt	r3, [sp, #28]
 8011aaa:	bfb8      	it	lt
 8011aac:	9204      	strlt	r2, [sp, #16]
 8011aae:	7823      	ldrb	r3, [r4, #0]
 8011ab0:	2b2e      	cmp	r3, #46	; 0x2e
 8011ab2:	d10c      	bne.n	8011ace <_vfiprintf_r+0x15a>
 8011ab4:	7863      	ldrb	r3, [r4, #1]
 8011ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8011ab8:	d134      	bne.n	8011b24 <_vfiprintf_r+0x1b0>
 8011aba:	9b03      	ldr	r3, [sp, #12]
 8011abc:	1d1a      	adds	r2, r3, #4
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	9203      	str	r2, [sp, #12]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	bfb8      	it	lt
 8011ac6:	f04f 33ff 	movlt.w	r3, #4294967295
 8011aca:	3402      	adds	r4, #2
 8011acc:	9305      	str	r3, [sp, #20]
 8011ace:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011ba4 <_vfiprintf_r+0x230>
 8011ad2:	7821      	ldrb	r1, [r4, #0]
 8011ad4:	2203      	movs	r2, #3
 8011ad6:	4650      	mov	r0, sl
 8011ad8:	f7ee fb7a 	bl	80001d0 <memchr>
 8011adc:	b138      	cbz	r0, 8011aee <_vfiprintf_r+0x17a>
 8011ade:	9b04      	ldr	r3, [sp, #16]
 8011ae0:	eba0 000a 	sub.w	r0, r0, sl
 8011ae4:	2240      	movs	r2, #64	; 0x40
 8011ae6:	4082      	lsls	r2, r0
 8011ae8:	4313      	orrs	r3, r2
 8011aea:	3401      	adds	r4, #1
 8011aec:	9304      	str	r3, [sp, #16]
 8011aee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011af2:	4829      	ldr	r0, [pc, #164]	; (8011b98 <_vfiprintf_r+0x224>)
 8011af4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011af8:	2206      	movs	r2, #6
 8011afa:	f7ee fb69 	bl	80001d0 <memchr>
 8011afe:	2800      	cmp	r0, #0
 8011b00:	d03f      	beq.n	8011b82 <_vfiprintf_r+0x20e>
 8011b02:	4b26      	ldr	r3, [pc, #152]	; (8011b9c <_vfiprintf_r+0x228>)
 8011b04:	bb1b      	cbnz	r3, 8011b4e <_vfiprintf_r+0x1da>
 8011b06:	9b03      	ldr	r3, [sp, #12]
 8011b08:	3307      	adds	r3, #7
 8011b0a:	f023 0307 	bic.w	r3, r3, #7
 8011b0e:	3308      	adds	r3, #8
 8011b10:	9303      	str	r3, [sp, #12]
 8011b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b14:	443b      	add	r3, r7
 8011b16:	9309      	str	r3, [sp, #36]	; 0x24
 8011b18:	e768      	b.n	80119ec <_vfiprintf_r+0x78>
 8011b1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b1e:	460c      	mov	r4, r1
 8011b20:	2001      	movs	r0, #1
 8011b22:	e7a6      	b.n	8011a72 <_vfiprintf_r+0xfe>
 8011b24:	2300      	movs	r3, #0
 8011b26:	3401      	adds	r4, #1
 8011b28:	9305      	str	r3, [sp, #20]
 8011b2a:	4619      	mov	r1, r3
 8011b2c:	f04f 0c0a 	mov.w	ip, #10
 8011b30:	4620      	mov	r0, r4
 8011b32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b36:	3a30      	subs	r2, #48	; 0x30
 8011b38:	2a09      	cmp	r2, #9
 8011b3a:	d903      	bls.n	8011b44 <_vfiprintf_r+0x1d0>
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d0c6      	beq.n	8011ace <_vfiprintf_r+0x15a>
 8011b40:	9105      	str	r1, [sp, #20]
 8011b42:	e7c4      	b.n	8011ace <_vfiprintf_r+0x15a>
 8011b44:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b48:	4604      	mov	r4, r0
 8011b4a:	2301      	movs	r3, #1
 8011b4c:	e7f0      	b.n	8011b30 <_vfiprintf_r+0x1bc>
 8011b4e:	ab03      	add	r3, sp, #12
 8011b50:	9300      	str	r3, [sp, #0]
 8011b52:	462a      	mov	r2, r5
 8011b54:	4b12      	ldr	r3, [pc, #72]	; (8011ba0 <_vfiprintf_r+0x22c>)
 8011b56:	a904      	add	r1, sp, #16
 8011b58:	4630      	mov	r0, r6
 8011b5a:	f7fc fcc3 	bl	800e4e4 <_printf_float>
 8011b5e:	4607      	mov	r7, r0
 8011b60:	1c78      	adds	r0, r7, #1
 8011b62:	d1d6      	bne.n	8011b12 <_vfiprintf_r+0x19e>
 8011b64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011b66:	07d9      	lsls	r1, r3, #31
 8011b68:	d405      	bmi.n	8011b76 <_vfiprintf_r+0x202>
 8011b6a:	89ab      	ldrh	r3, [r5, #12]
 8011b6c:	059a      	lsls	r2, r3, #22
 8011b6e:	d402      	bmi.n	8011b76 <_vfiprintf_r+0x202>
 8011b70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011b72:	f7fd fc95 	bl	800f4a0 <__retarget_lock_release_recursive>
 8011b76:	89ab      	ldrh	r3, [r5, #12]
 8011b78:	065b      	lsls	r3, r3, #25
 8011b7a:	f53f af1d 	bmi.w	80119b8 <_vfiprintf_r+0x44>
 8011b7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b80:	e71c      	b.n	80119bc <_vfiprintf_r+0x48>
 8011b82:	ab03      	add	r3, sp, #12
 8011b84:	9300      	str	r3, [sp, #0]
 8011b86:	462a      	mov	r2, r5
 8011b88:	4b05      	ldr	r3, [pc, #20]	; (8011ba0 <_vfiprintf_r+0x22c>)
 8011b8a:	a904      	add	r1, sp, #16
 8011b8c:	4630      	mov	r0, r6
 8011b8e:	f7fc ff4d 	bl	800ea2c <_printf_i>
 8011b92:	e7e4      	b.n	8011b5e <_vfiprintf_r+0x1ea>
 8011b94:	080122cd 	.word	0x080122cd
 8011b98:	080122d7 	.word	0x080122d7
 8011b9c:	0800e4e5 	.word	0x0800e4e5
 8011ba0:	08011951 	.word	0x08011951
 8011ba4:	080122d3 	.word	0x080122d3

08011ba8 <__swbuf_r>:
 8011ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011baa:	460e      	mov	r6, r1
 8011bac:	4614      	mov	r4, r2
 8011bae:	4605      	mov	r5, r0
 8011bb0:	b118      	cbz	r0, 8011bba <__swbuf_r+0x12>
 8011bb2:	6a03      	ldr	r3, [r0, #32]
 8011bb4:	b90b      	cbnz	r3, 8011bba <__swbuf_r+0x12>
 8011bb6:	f7fd faf7 	bl	800f1a8 <__sinit>
 8011bba:	69a3      	ldr	r3, [r4, #24]
 8011bbc:	60a3      	str	r3, [r4, #8]
 8011bbe:	89a3      	ldrh	r3, [r4, #12]
 8011bc0:	071a      	lsls	r2, r3, #28
 8011bc2:	d525      	bpl.n	8011c10 <__swbuf_r+0x68>
 8011bc4:	6923      	ldr	r3, [r4, #16]
 8011bc6:	b31b      	cbz	r3, 8011c10 <__swbuf_r+0x68>
 8011bc8:	6823      	ldr	r3, [r4, #0]
 8011bca:	6922      	ldr	r2, [r4, #16]
 8011bcc:	1a98      	subs	r0, r3, r2
 8011bce:	6963      	ldr	r3, [r4, #20]
 8011bd0:	b2f6      	uxtb	r6, r6
 8011bd2:	4283      	cmp	r3, r0
 8011bd4:	4637      	mov	r7, r6
 8011bd6:	dc04      	bgt.n	8011be2 <__swbuf_r+0x3a>
 8011bd8:	4621      	mov	r1, r4
 8011bda:	4628      	mov	r0, r5
 8011bdc:	f7ff fdce 	bl	801177c <_fflush_r>
 8011be0:	b9e0      	cbnz	r0, 8011c1c <__swbuf_r+0x74>
 8011be2:	68a3      	ldr	r3, [r4, #8]
 8011be4:	3b01      	subs	r3, #1
 8011be6:	60a3      	str	r3, [r4, #8]
 8011be8:	6823      	ldr	r3, [r4, #0]
 8011bea:	1c5a      	adds	r2, r3, #1
 8011bec:	6022      	str	r2, [r4, #0]
 8011bee:	701e      	strb	r6, [r3, #0]
 8011bf0:	6962      	ldr	r2, [r4, #20]
 8011bf2:	1c43      	adds	r3, r0, #1
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d004      	beq.n	8011c02 <__swbuf_r+0x5a>
 8011bf8:	89a3      	ldrh	r3, [r4, #12]
 8011bfa:	07db      	lsls	r3, r3, #31
 8011bfc:	d506      	bpl.n	8011c0c <__swbuf_r+0x64>
 8011bfe:	2e0a      	cmp	r6, #10
 8011c00:	d104      	bne.n	8011c0c <__swbuf_r+0x64>
 8011c02:	4621      	mov	r1, r4
 8011c04:	4628      	mov	r0, r5
 8011c06:	f7ff fdb9 	bl	801177c <_fflush_r>
 8011c0a:	b938      	cbnz	r0, 8011c1c <__swbuf_r+0x74>
 8011c0c:	4638      	mov	r0, r7
 8011c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c10:	4621      	mov	r1, r4
 8011c12:	4628      	mov	r0, r5
 8011c14:	f000 f806 	bl	8011c24 <__swsetup_r>
 8011c18:	2800      	cmp	r0, #0
 8011c1a:	d0d5      	beq.n	8011bc8 <__swbuf_r+0x20>
 8011c1c:	f04f 37ff 	mov.w	r7, #4294967295
 8011c20:	e7f4      	b.n	8011c0c <__swbuf_r+0x64>
	...

08011c24 <__swsetup_r>:
 8011c24:	b538      	push	{r3, r4, r5, lr}
 8011c26:	4b2a      	ldr	r3, [pc, #168]	; (8011cd0 <__swsetup_r+0xac>)
 8011c28:	4605      	mov	r5, r0
 8011c2a:	6818      	ldr	r0, [r3, #0]
 8011c2c:	460c      	mov	r4, r1
 8011c2e:	b118      	cbz	r0, 8011c38 <__swsetup_r+0x14>
 8011c30:	6a03      	ldr	r3, [r0, #32]
 8011c32:	b90b      	cbnz	r3, 8011c38 <__swsetup_r+0x14>
 8011c34:	f7fd fab8 	bl	800f1a8 <__sinit>
 8011c38:	89a3      	ldrh	r3, [r4, #12]
 8011c3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011c3e:	0718      	lsls	r0, r3, #28
 8011c40:	d422      	bmi.n	8011c88 <__swsetup_r+0x64>
 8011c42:	06d9      	lsls	r1, r3, #27
 8011c44:	d407      	bmi.n	8011c56 <__swsetup_r+0x32>
 8011c46:	2309      	movs	r3, #9
 8011c48:	602b      	str	r3, [r5, #0]
 8011c4a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011c4e:	81a3      	strh	r3, [r4, #12]
 8011c50:	f04f 30ff 	mov.w	r0, #4294967295
 8011c54:	e034      	b.n	8011cc0 <__swsetup_r+0x9c>
 8011c56:	0758      	lsls	r0, r3, #29
 8011c58:	d512      	bpl.n	8011c80 <__swsetup_r+0x5c>
 8011c5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c5c:	b141      	cbz	r1, 8011c70 <__swsetup_r+0x4c>
 8011c5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c62:	4299      	cmp	r1, r3
 8011c64:	d002      	beq.n	8011c6c <__swsetup_r+0x48>
 8011c66:	4628      	mov	r0, r5
 8011c68:	f7fe fab4 	bl	80101d4 <_free_r>
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	6363      	str	r3, [r4, #52]	; 0x34
 8011c70:	89a3      	ldrh	r3, [r4, #12]
 8011c72:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011c76:	81a3      	strh	r3, [r4, #12]
 8011c78:	2300      	movs	r3, #0
 8011c7a:	6063      	str	r3, [r4, #4]
 8011c7c:	6923      	ldr	r3, [r4, #16]
 8011c7e:	6023      	str	r3, [r4, #0]
 8011c80:	89a3      	ldrh	r3, [r4, #12]
 8011c82:	f043 0308 	orr.w	r3, r3, #8
 8011c86:	81a3      	strh	r3, [r4, #12]
 8011c88:	6923      	ldr	r3, [r4, #16]
 8011c8a:	b94b      	cbnz	r3, 8011ca0 <__swsetup_r+0x7c>
 8011c8c:	89a3      	ldrh	r3, [r4, #12]
 8011c8e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011c96:	d003      	beq.n	8011ca0 <__swsetup_r+0x7c>
 8011c98:	4621      	mov	r1, r4
 8011c9a:	4628      	mov	r0, r5
 8011c9c:	f000 f884 	bl	8011da8 <__smakebuf_r>
 8011ca0:	89a0      	ldrh	r0, [r4, #12]
 8011ca2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011ca6:	f010 0301 	ands.w	r3, r0, #1
 8011caa:	d00a      	beq.n	8011cc2 <__swsetup_r+0x9e>
 8011cac:	2300      	movs	r3, #0
 8011cae:	60a3      	str	r3, [r4, #8]
 8011cb0:	6963      	ldr	r3, [r4, #20]
 8011cb2:	425b      	negs	r3, r3
 8011cb4:	61a3      	str	r3, [r4, #24]
 8011cb6:	6923      	ldr	r3, [r4, #16]
 8011cb8:	b943      	cbnz	r3, 8011ccc <__swsetup_r+0xa8>
 8011cba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011cbe:	d1c4      	bne.n	8011c4a <__swsetup_r+0x26>
 8011cc0:	bd38      	pop	{r3, r4, r5, pc}
 8011cc2:	0781      	lsls	r1, r0, #30
 8011cc4:	bf58      	it	pl
 8011cc6:	6963      	ldrpl	r3, [r4, #20]
 8011cc8:	60a3      	str	r3, [r4, #8]
 8011cca:	e7f4      	b.n	8011cb6 <__swsetup_r+0x92>
 8011ccc:	2000      	movs	r0, #0
 8011cce:	e7f7      	b.n	8011cc0 <__swsetup_r+0x9c>
 8011cd0:	200001f4 	.word	0x200001f4

08011cd4 <_raise_r>:
 8011cd4:	291f      	cmp	r1, #31
 8011cd6:	b538      	push	{r3, r4, r5, lr}
 8011cd8:	4604      	mov	r4, r0
 8011cda:	460d      	mov	r5, r1
 8011cdc:	d904      	bls.n	8011ce8 <_raise_r+0x14>
 8011cde:	2316      	movs	r3, #22
 8011ce0:	6003      	str	r3, [r0, #0]
 8011ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ce6:	bd38      	pop	{r3, r4, r5, pc}
 8011ce8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011cea:	b112      	cbz	r2, 8011cf2 <_raise_r+0x1e>
 8011cec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011cf0:	b94b      	cbnz	r3, 8011d06 <_raise_r+0x32>
 8011cf2:	4620      	mov	r0, r4
 8011cf4:	f000 f830 	bl	8011d58 <_getpid_r>
 8011cf8:	462a      	mov	r2, r5
 8011cfa:	4601      	mov	r1, r0
 8011cfc:	4620      	mov	r0, r4
 8011cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d02:	f000 b817 	b.w	8011d34 <_kill_r>
 8011d06:	2b01      	cmp	r3, #1
 8011d08:	d00a      	beq.n	8011d20 <_raise_r+0x4c>
 8011d0a:	1c59      	adds	r1, r3, #1
 8011d0c:	d103      	bne.n	8011d16 <_raise_r+0x42>
 8011d0e:	2316      	movs	r3, #22
 8011d10:	6003      	str	r3, [r0, #0]
 8011d12:	2001      	movs	r0, #1
 8011d14:	e7e7      	b.n	8011ce6 <_raise_r+0x12>
 8011d16:	2400      	movs	r4, #0
 8011d18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011d1c:	4628      	mov	r0, r5
 8011d1e:	4798      	blx	r3
 8011d20:	2000      	movs	r0, #0
 8011d22:	e7e0      	b.n	8011ce6 <_raise_r+0x12>

08011d24 <raise>:
 8011d24:	4b02      	ldr	r3, [pc, #8]	; (8011d30 <raise+0xc>)
 8011d26:	4601      	mov	r1, r0
 8011d28:	6818      	ldr	r0, [r3, #0]
 8011d2a:	f7ff bfd3 	b.w	8011cd4 <_raise_r>
 8011d2e:	bf00      	nop
 8011d30:	200001f4 	.word	0x200001f4

08011d34 <_kill_r>:
 8011d34:	b538      	push	{r3, r4, r5, lr}
 8011d36:	4d07      	ldr	r5, [pc, #28]	; (8011d54 <_kill_r+0x20>)
 8011d38:	2300      	movs	r3, #0
 8011d3a:	4604      	mov	r4, r0
 8011d3c:	4608      	mov	r0, r1
 8011d3e:	4611      	mov	r1, r2
 8011d40:	602b      	str	r3, [r5, #0]
 8011d42:	f7f0 f9e1 	bl	8002108 <_kill>
 8011d46:	1c43      	adds	r3, r0, #1
 8011d48:	d102      	bne.n	8011d50 <_kill_r+0x1c>
 8011d4a:	682b      	ldr	r3, [r5, #0]
 8011d4c:	b103      	cbz	r3, 8011d50 <_kill_r+0x1c>
 8011d4e:	6023      	str	r3, [r4, #0]
 8011d50:	bd38      	pop	{r3, r4, r5, pc}
 8011d52:	bf00      	nop
 8011d54:	200011c8 	.word	0x200011c8

08011d58 <_getpid_r>:
 8011d58:	f7f0 b9ce 	b.w	80020f8 <_getpid>

08011d5c <__swhatbuf_r>:
 8011d5c:	b570      	push	{r4, r5, r6, lr}
 8011d5e:	460c      	mov	r4, r1
 8011d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d64:	2900      	cmp	r1, #0
 8011d66:	b096      	sub	sp, #88	; 0x58
 8011d68:	4615      	mov	r5, r2
 8011d6a:	461e      	mov	r6, r3
 8011d6c:	da0d      	bge.n	8011d8a <__swhatbuf_r+0x2e>
 8011d6e:	89a3      	ldrh	r3, [r4, #12]
 8011d70:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011d74:	f04f 0100 	mov.w	r1, #0
 8011d78:	bf0c      	ite	eq
 8011d7a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011d7e:	2340      	movne	r3, #64	; 0x40
 8011d80:	2000      	movs	r0, #0
 8011d82:	6031      	str	r1, [r6, #0]
 8011d84:	602b      	str	r3, [r5, #0]
 8011d86:	b016      	add	sp, #88	; 0x58
 8011d88:	bd70      	pop	{r4, r5, r6, pc}
 8011d8a:	466a      	mov	r2, sp
 8011d8c:	f000 f848 	bl	8011e20 <_fstat_r>
 8011d90:	2800      	cmp	r0, #0
 8011d92:	dbec      	blt.n	8011d6e <__swhatbuf_r+0x12>
 8011d94:	9901      	ldr	r1, [sp, #4]
 8011d96:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011d9a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011d9e:	4259      	negs	r1, r3
 8011da0:	4159      	adcs	r1, r3
 8011da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011da6:	e7eb      	b.n	8011d80 <__swhatbuf_r+0x24>

08011da8 <__smakebuf_r>:
 8011da8:	898b      	ldrh	r3, [r1, #12]
 8011daa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011dac:	079d      	lsls	r5, r3, #30
 8011dae:	4606      	mov	r6, r0
 8011db0:	460c      	mov	r4, r1
 8011db2:	d507      	bpl.n	8011dc4 <__smakebuf_r+0x1c>
 8011db4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011db8:	6023      	str	r3, [r4, #0]
 8011dba:	6123      	str	r3, [r4, #16]
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	6163      	str	r3, [r4, #20]
 8011dc0:	b002      	add	sp, #8
 8011dc2:	bd70      	pop	{r4, r5, r6, pc}
 8011dc4:	ab01      	add	r3, sp, #4
 8011dc6:	466a      	mov	r2, sp
 8011dc8:	f7ff ffc8 	bl	8011d5c <__swhatbuf_r>
 8011dcc:	9900      	ldr	r1, [sp, #0]
 8011dce:	4605      	mov	r5, r0
 8011dd0:	4630      	mov	r0, r6
 8011dd2:	f7fb fc3d 	bl	800d650 <_malloc_r>
 8011dd6:	b948      	cbnz	r0, 8011dec <__smakebuf_r+0x44>
 8011dd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ddc:	059a      	lsls	r2, r3, #22
 8011dde:	d4ef      	bmi.n	8011dc0 <__smakebuf_r+0x18>
 8011de0:	f023 0303 	bic.w	r3, r3, #3
 8011de4:	f043 0302 	orr.w	r3, r3, #2
 8011de8:	81a3      	strh	r3, [r4, #12]
 8011dea:	e7e3      	b.n	8011db4 <__smakebuf_r+0xc>
 8011dec:	89a3      	ldrh	r3, [r4, #12]
 8011dee:	6020      	str	r0, [r4, #0]
 8011df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011df4:	81a3      	strh	r3, [r4, #12]
 8011df6:	9b00      	ldr	r3, [sp, #0]
 8011df8:	6163      	str	r3, [r4, #20]
 8011dfa:	9b01      	ldr	r3, [sp, #4]
 8011dfc:	6120      	str	r0, [r4, #16]
 8011dfe:	b15b      	cbz	r3, 8011e18 <__smakebuf_r+0x70>
 8011e00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e04:	4630      	mov	r0, r6
 8011e06:	f000 f81d 	bl	8011e44 <_isatty_r>
 8011e0a:	b128      	cbz	r0, 8011e18 <__smakebuf_r+0x70>
 8011e0c:	89a3      	ldrh	r3, [r4, #12]
 8011e0e:	f023 0303 	bic.w	r3, r3, #3
 8011e12:	f043 0301 	orr.w	r3, r3, #1
 8011e16:	81a3      	strh	r3, [r4, #12]
 8011e18:	89a3      	ldrh	r3, [r4, #12]
 8011e1a:	431d      	orrs	r5, r3
 8011e1c:	81a5      	strh	r5, [r4, #12]
 8011e1e:	e7cf      	b.n	8011dc0 <__smakebuf_r+0x18>

08011e20 <_fstat_r>:
 8011e20:	b538      	push	{r3, r4, r5, lr}
 8011e22:	4d07      	ldr	r5, [pc, #28]	; (8011e40 <_fstat_r+0x20>)
 8011e24:	2300      	movs	r3, #0
 8011e26:	4604      	mov	r4, r0
 8011e28:	4608      	mov	r0, r1
 8011e2a:	4611      	mov	r1, r2
 8011e2c:	602b      	str	r3, [r5, #0]
 8011e2e:	f7f0 f9ca 	bl	80021c6 <_fstat>
 8011e32:	1c43      	adds	r3, r0, #1
 8011e34:	d102      	bne.n	8011e3c <_fstat_r+0x1c>
 8011e36:	682b      	ldr	r3, [r5, #0]
 8011e38:	b103      	cbz	r3, 8011e3c <_fstat_r+0x1c>
 8011e3a:	6023      	str	r3, [r4, #0]
 8011e3c:	bd38      	pop	{r3, r4, r5, pc}
 8011e3e:	bf00      	nop
 8011e40:	200011c8 	.word	0x200011c8

08011e44 <_isatty_r>:
 8011e44:	b538      	push	{r3, r4, r5, lr}
 8011e46:	4d06      	ldr	r5, [pc, #24]	; (8011e60 <_isatty_r+0x1c>)
 8011e48:	2300      	movs	r3, #0
 8011e4a:	4604      	mov	r4, r0
 8011e4c:	4608      	mov	r0, r1
 8011e4e:	602b      	str	r3, [r5, #0]
 8011e50:	f7f0 f9c9 	bl	80021e6 <_isatty>
 8011e54:	1c43      	adds	r3, r0, #1
 8011e56:	d102      	bne.n	8011e5e <_isatty_r+0x1a>
 8011e58:	682b      	ldr	r3, [r5, #0]
 8011e5a:	b103      	cbz	r3, 8011e5e <_isatty_r+0x1a>
 8011e5c:	6023      	str	r3, [r4, #0]
 8011e5e:	bd38      	pop	{r3, r4, r5, pc}
 8011e60:	200011c8 	.word	0x200011c8

08011e64 <_init>:
 8011e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e66:	bf00      	nop
 8011e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e6a:	bc08      	pop	{r3}
 8011e6c:	469e      	mov	lr, r3
 8011e6e:	4770      	bx	lr

08011e70 <_fini>:
 8011e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e72:	bf00      	nop
 8011e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e76:	bc08      	pop	{r3}
 8011e78:	469e      	mov	lr, r3
 8011e7a:	4770      	bx	lr
